//---------------------------------------------------------------------------
#ifndef PROTankH
#define PROTankH

#include "TSNIncludes.h"
#ifdef ANWIN
#include "TankWashingMachineCollection.h"
#endif
// forward declarations
class TankWashingMachineCollection;


class PROTank :
public PROXRefObject {
private:
    bool HasRedundancy;
    bool HasRadarAndPressure;
    int MyIndex;
    float LR_Buffer[LR_BUFSIZE];
    float Prev_Volume;
    float LR_Volume;
    float LR_Weight;
    float LR_Limit;
    int   LR_Cnt;

    bool  LrCalcFlag;
    clock_t LrCalcTime;

    float SMid,SCl;
    float AdjustedDBU;
    float SteelExp;
    bool  UsePrevCalcDns;
    bool HasDVManMsrPntToSns;
    bool HasDVSnsToUTI;

    float FilteredMsrdDns;
    AIWaterIngressSensor *WaterSns;
    vector<AIRadarSensor*>RadarSensors;
    AIMetriTapeSensor *MetriTapeSns;
    AILNGFloat        *HSH_FloatSns;
    AILevelSensorAirPurge *AirPurgeLevelSns;
    vector<AIPressSensor*>LevelPressures;
	vector<AIPressSensor*>tankPressures;
    int LevelPressureSnsCnt;
    float cDLR;
    float cDTR;
    float cDLFC;
    float cDTFC;
    float LevelOffset;
    float TableOffset;
    bool DBU_IsConfigured;
    int  OutsideCnt;
    bool  NotEmtyTank;
    float NoiseLimitR;
    float VolumeOffset;
    bool CalculateHSH_LNG_Float(void);
    bool CalculateAirPurgeLevel(void);
    bool CalculateMetriTape(void);
    bool CalculateRadarUllage(void);
    bool CalculateOtherSns(void);
    void FindLevelPressSns(float &PrevMaxDB, float &MaxDB, float &PrevMaxDBSnsPress,  float &MaxDBSnsPress, int &NumberOfSubmergedSensors, int &NumberOfUseableSensors );

protected:
    float CompDns;
    virtual float GetNoiseLimitB(void);
    virtual float GetNoiseLimitU(void);

    static ValueList TankAlarmValueList[];
    static int SizeofTankAlarmValueList;
public:
    static vector<PROTank*>TankVector;
    static set<PRogramObjectBase*>ObjectSet;
    static float GravityCorrection;
    static int LevelDifferenceFilterDegree;
	static int LevelChangeFilterDegree;

#ifdef ANWIN
	TankWashingMachineCollection* WashingMachines;
#endif
    float LoadRate;
    float MeasuredDns;
    bool  UseMeasuredDensity;
    bool  HasMeasuredDensity;
    bool  HasLevelSensors;

    int    UseTempFromOtherId;
    int    UsePressFromOtherId;
    PROTank(bool AddToList=true);
    PROTank(int number,bool AddToList=true);
    PROTank(int TType,int number,bool AddToList=true);
    void Initiate(bool AddToList);
    ~PROTank(void);

//  int RefSystem;
    bool GlobalRefSystem;
    bool UseCFTable;


    float DBotUllRefPnt;        // DBU
    float DBotManMsrPnt;        // DB1Ref Distance bottom at manual reference point
    // to bottom at sensor location
    float DSnsToMid;
    float DSnsToCL;
    float DManMsrPntToMid;
    float DManMsrPntToCL;
    float DFltCntToMid;
    float DFltCntToCL;

    float DLManMsrPntToSns;
    float DTManMsrPntToSns;
    float DVManMsrPntToSns;
    float DVSnsToUTI;
    float DLFltCntToSns;
    float DTFltCntToSns;
    float TableType;
    float Temperature;
    float Pressure;
    float Density;
    float Ullage,UllageFC,UllageAtSns;
    float Level,LevelFC,Sounding,LevelAtRef;
    float Volume,VolumePercent,Weight,LevelDifference;
    float RemainingTime;
    float RemainingVolume;
    float LCWeight,LCVolume;
    float StartVolPercent;
    time_t LCDataTime;
    float *TempLog[5];//[MAX_TEMP_SENSORS+1];
    float *VapourLog;
    PROTankPressure *PressurePtr;
    PROTemperature  *TemperaturePtr;
    PROLinePressure *LPressurePtr;
    char HasWater;
    CargoTypeObject         *CargoType;

    AlarmOverfill           *OverfillPtr;
    AlarmHighLevel          *HighLevelPtr;
    AlarmLowLevel           *LowLevelPtr;
    AlarmVoidSpace          *VoidSpaceAPtr;
    AlarmLevelDifference    *LevelDiffAPtr;
    AlarmLevelChange        *LevelChangeAPtr;
    AlarmWaterDetect        *AlarmWaterDetectPtr;

    float VoidSpaceLimit;
    float LevelDiffLimit;
    float OverfillLimit;
    float HighLevelLimit;
    float LowLevelLimit;
    float HighTempLimit;
    float LowTempLimit;
    float HighTankPressLimit;
    float LowTankPressLimit;
    float LowPressVacLimit;
    float HighPressVacLimit;
    float LowVapourReturnLimit;
    float HighVapourReturnLimit;
    float IntHighTankPressLimit;
    float IntLowTankPressLimit;
    bool HasIntHighTankPressLimit;
    bool HasIntLowTankPressLimit;

    bool OverfillLocked;
    bool HighLevelLocked;
    bool LowLevelLocked;
    bool HighTempLocked;
    bool LowTempLocked;
    bool HighTankPressLocked;
    bool LowTankPressLocked;


    TSNTable1Degree *LevVolumeTab,*UllVolumeTab,*VolumeTab,
    *SoundingTab;   // Volume table based on the sounding pipe
    TSNTableCenterOfFlotation *CenterOfFlotTab; // Instead of fixed point
    float FilteredVolPercent;

    int  GetTankType(void);
    void SetTankType(int TType);
    void CheckForTPAndTemp(void);

// Routines for the Configuration
    void WriteConfigToFile(TSNConfigString &ConfigString);
    int LoadConfigFromFile(TSNConfigString &ConfigString);
    void SetProList(void);
    static void SetAllProList(void);

// Routines for Saving of Settings
    void SaveSettings(TSNConfigString *SettingsString);
    bool RestoreSettings(TSNConfigString *SettingsString);

    AnsiString ZeroSetTankPressureSensor(bool Local);
    AnsiString ZeroSetLevelSensors(bool Local);

// Routines for the librarian
    bool HasLCData(void);
    int FindPROStatus(AnsiString &MyString);
    virtual int GetValue(int ValueId, int Index, float &MyValue,  int &DecPnt, int &Unit);
    virtual int GetStringValue(int ValueId, int Index, AnsiString &MyString);
    virtual int PutValue( int ValueId, int Index, AnsiString NewValue,bool Local=true, int *UnitId=NULL);
    virtual int PutFloatValue( int ValueId, float NewValue);

    int ReceiveData(U8* data);
    int SendData(U16 cmd=CMD_GENERIC_REALTIME_DATA);

    ValueList *GetValueInfoTable(int &Entries, int Index=0);
    ValueList *GetServiceValueInfoTable(int &Entries);

    float VolumeAtRefTmp(void);
    float NetVolumeAtRefTmp(void);

    void InputSounding(float Snd);
    void CalculateSounding(void);

    void LR_Calc(float LRTime);
    void CalcRemainingTime(float DirectionFlag=0.0);
    virtual bool IsLevelInsideWindow(float NewValue, float OldValue);

    virtual void Calculate(void);
    void SimCalculate(void);
    void GetHorisontalDistances(float *LDist, float *TDist);
    bool GetOnlineValues(float *PtrLevelFC,float *PtrSounding,float *PtrLevelAtRef, float *PtrUllage, float *PtrUllageFC,float *PtrVolume,float *PtrVolumePercent,float *PtrDensity,float *PtrTemperature);
    void GetCargoTypeSettings(int Key);

    int WriteXML(char *StrBuf, bool IncAlarms);
    void SetState(TankState newState);
    int LCWriteXML(char *StrBuf);
    float GetCorrectWeight(void);
    //float ConverToWeightInVac(float Wgt);
    bool HasInstalledLevelPressureSensors(void);
    static AnsiString ZeroSetAllTankPressureSensor(set<PRogramObjectBase*>TankSet, bool Local);
    static AnsiString ZeroSetAllLevelSensors(set<PRogramObjectBase*>TankSet, bool Local);
    void CalcSteelCorrection(void);
    float GetTemperature(void);
    void SetTemperature(float NewTemp);
    float GetPressure(void);
    void SetPressure(float NewPress);
    float GetWeightFromLPG(void);
    float GetWeightFromGas(void);

};

//---------------------------------------------------------------------------
#endif
