##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:15:19 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PRONode.cpp                     #
#    Command line    =  D:\S2Prog\Shared\Src\PRONode.cpp --fpu None -D       #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PRONode.lst                 #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PRONode.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PRONode.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          PRONode::~PRONode(void)
     10          {
     11          
     12          }
   \                     `?~PRONode`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          PRONode::PRONode(void)
     15          {
     16          	element = NULL;
   \                     ??PRONode:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   041080E5           STR      R1,[R0, #+4]
     17          	prev = NULL;
   \   00000008   001080E5           STR      R1,[R0, #+0]
     18          	next = NULL;
   \   0000000C   ........           B        ?Subroutine14
     19          //	this(NULL,NULL,NULL);
     20          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   081080E5           STR      R1,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          PRONode::PRONode(PRogramObjectBase *e, PRONode *p, PRONode *n)
     23          {
     24          	element = e;
   \                     ??PRONode_1:
   \   00000000   041080E5           STR      R1,[R0, #+4]
     25          	prev = p;
   \   00000004   002080E5           STR      R2,[R0, #+0]
     26          	next = n;
   \   00000008   083080E5           STR      R3,[R0, #+8]
     27          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          void PRONode::setElement(PRogramObjectBase *newElem)
     30          {
     31          	element = newElem;
   \                     ??setElement:
   \   00000000   041080E5           STR      R1,[R0, #+4]
     32          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void PRONode::setNext(PRONode *newNext)
     35          {
     36          	next = newNext;
   \                     ??setNext:
   \   00000000                      REQUIRE ?Subroutine14
   \   00000000                      ;; // Fall through to label ?Subroutine14
     37          }
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          void PRONode::setPrev(PRONode *newPrev)
     40          {
     41          	prev = newPrev;
   \                     ??setPrev:
   \   00000000   001080E5           STR      R1,[R0, #+0]
     42          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          PRogramObjectBase *PRONode::getElement()
     45          {
     46          	return element;
   \                     ??getElement:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     47          }
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          PRONode *PRONode::getNext()
     50          {
     51          	return next;
   \                     ??getNext:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     52          }
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          PRONode *PRONode::getPrev()
     55          {
     56          	return prev;
   \                     ??getPrev:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     57          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRONode &PRONode::new PRONode()
   \                     `??new PRONode`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0C00A0E3           MOV      R0,#+12
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new PRONode_2`
   \   00000014   ........           BL       ??PRONode
   \                     `??new PRONode_2`:
   \   00000018   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void PRONode::delete ~PRONode(PRONode *)
   \                     `??delete ~PRONode`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0000000A           BEQ      `??delete ~PRONode_1`
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~PRONode_1`:
   \   00000010                      REQUIRE ?Subroutine13
   \   00000010                      ;; // Fall through to label ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRONode &PRONode::new PRONode(PRogramObjectBase *, PRONode *, PRONode *)
   \                     `??new PRONode_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0C00A0E3           MOV      R0,#+12
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new PRONode_3`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??PRONode_1
   \                     `??new PRONode_3`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PRONode::PRONode()                 0
     PRONode::PRONode(PRogramObjectBase *, PRONode *, PRONode *)
                                        0
     PRONode::delete ~PRONode(PRONode *)
                                        4
     PRONode::getElement()              0
     PRONode::getNext()                 0
     PRONode::getPrev()                 0
     PRONode::new PRONode()             4
     PRONode::new PRONode(PRogramObjectBase *, PRONode *, PRONode *)
                                       16
     PRONode::setElement(PRogramObjectBase *)
                                        0
     PRONode::setNext(PRONode *)        0
     PRONode::setPrev(PRONode *)        0
     PRONode::~PRONode()                0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     PRONode::~PRONode()               4
     PRONode::PRONode()               16
     ?Subroutine14                     8
     PRONode::PRONode(PRogramObjectBase *, PRONode *, PRONode *)
                                      16
     PRONode::setElement(PRogramObjectBase *)
                                       8
     PRONode::setNext(PRONode *)       0
     PRONode::setPrev(PRONode *)       8
     PRONode::getElement()             8
     PRONode::getNext()                8
     PRONode::getPrev()                8
     PRONode::new PRONode()           28
     PRONode::delete ~PRONode(PRONode *)
                                      16
     ?Subroutine13                     8
     PRONode::new PRONode(PRogramObjectBase *, PRONode *, PRONode *)
                                      56
     __sti__routine()                  4
      Others                          80

 
 272 bytes in segment CODE
   4 bytes in segment DIFUNCT
 
 200 bytes of CODE memory (+ 76 bytes shared)

Errors: none
Warnings: none
