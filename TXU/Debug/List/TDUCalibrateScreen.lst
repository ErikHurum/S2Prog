##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:18:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\TDUCalibrateScreen.cpp             #
#    Command line    =  D:\S2Prog\TXU\src\TDUCalibrateScreen.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TDUCalibrateScreen.lst      #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TDUCalibrateScreen.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\TDUCalibrateScreen.cpp
      1          #include "TDUIncludes.h"
      2          //#include "TDU_Touch_Calibrate.c"
      3          
      4          
      5          
      6          /*********************************************************************
      7          *
      8          *       _DispStringCentered
      9          *
     10          * Purpose:
     11          *   Shows the given text horizontally and vertically centered
     12          */
     13          static void DispStringCentered(const char *pString) {
     14              GUI_RECT Rect;
     15              Rect.x0 = Rect.y0 = 0;
     16              Rect.x1 = LCD_GetXSize() - 1;
     17              Rect.y1 = LCD_GetYSize() - 1;
     18              GUI_DispStringInRect( pString, &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER );
     19          }
     20          
     21          /*********************************************************************
     22          *
     23          *       _GetPhysValues
     24          *
     25          * Purpose:
     26          *   Asks the user to press the touch screen at the given position
     27          *   and returns the physical A/D values
     28          */

   \                                 In segment CODE, align 4, keep-with-next
     29          static void CalibrationMessage(int LogX, int LogY, const char *pString) {
   \                     ??CalibrationMessage:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   48D04DE2           SUB      SP,SP,#+72
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     30              GUI_RECT Rect;
     31              int      FontSizeY,
     32                       Align;
     33              FontSizeY = GUI_GetFontSizeY();
   \   00000014   ........           _BLF     GUI_GetFontSizeY,??GUI_GetFontSizeY??rA
   \   00000018   0070A0E1           MOV      R7,R0
     34              GUI_Clear();
   \   0000001C   ........           _BLF     GUI_Clear,??GUI_Clear??rA
     35              GUI_SetColor( GUI_BLACK );
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
     36              DispStringCentered( FindDictionaryWord( L_WORD570 ).c_str() ); // Runtime calibration,\n please touch the screen\n at the center of the ring.")
   \   00000028   3A10A0E3           MOV      R1,#+58
   \   0000002C   801F81E3           ORR      R1,R1,#0x200
   \   00000030   10008DE2           ADD      R0,SP,#+16
   \   00000034   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000038   28009DE5           LDR      R0,[SP, #+40]
   \   0000003C   0090A0E3           MOV      R9,#+0
   \   00000040   100050E3           CMP      R0,#+16
   \   00000044   14809D25           LDRCS    R8,[SP, #+20]
   \   00000048   BA90CDE1           STRH     R9,[SP, #+10]
   \   0000004C   14808D32           ADDCC    R8,SP,#+20
   \   00000050   B890CDE1           STRH     R9,[SP, #+8]
   \   00000054   ........           _BLF     LCD_GetXSize,??LCD_GetXSize??rA
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   BC00CDE1           STRH     R0,[SP, #+12]
   \   00000060   ........           _BLF     LCD_GetYSize,??LCD_GetYSize??rA
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   BE00CDE1           STRH     R0,[SP, #+14]
   \   0000006C   0E20A0E3           MOV      R2,#+14
   \   00000070   08108DE2           ADD      R1,SP,#+8
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   ........           _BLF     GUI_DispStringInRect,??GUI_DispStringInRect??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   10008DE2           ADD      R0,SP,#+16
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
     37              /* Calculate the rectangle for the string */
     38              Rect.y0 = LogY - FontSizeY;
   \   0000008C   071045E0           SUB      R1,R5,R7
   \   00000090   B210CDE1           STRH     R1,[SP, #+2]
     39              Rect.y1 = LogY + FontSizeY;
   \   00000094   051087E0           ADD      R1,R7,R5
   \   00000098   B610CDE1           STRH     R1,[SP, #+6]
     40              if (LogX < LCD_GetXSize() / 2) {
   \   0000009C   ........           _BLF     LCD_GetXSize,??LCD_GetXSize??rA
   \   000000A0   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000A4   C00054E1           CMP      R4,R0, ASR #+1
   \   000000A8   050000AA           BGE      ??CalibrationMessage_1
     41                  Rect.x0 = LogX + 15;
   \   000000AC   0F1084E2           ADD      R1,R4,#+15
   \   000000B0   B010CDE1           STRH     R1,[SP, #+0]
     42                  Rect.x1 = LCD_GetXSize();
   \   000000B4   ........           _BLF     LCD_GetXSize,??LCD_GetXSize??rA
   \   000000B8   B400CDE1           STRH     R0,[SP, #+4]
     43                  Align = GUI_TA_LEFT;
   \   000000BC   0070A0E3           MOV      R7,#+0
   \   000000C0   030000EA           B        ??CalibrationMessage_2
     44              } else {
     45                  Rect.x0 = 0;
   \                     ??CalibrationMessage_1:
   \   000000C4   B090CDE1           STRH     R9,[SP, #+0]
     46                  Rect.x1 = LogX - 15;
   \   000000C8   0F1044E2           SUB      R1,R4,#+15
   \   000000CC   B410CDE1           STRH     R1,[SP, #+4]
     47                  Align = GUI_TA_RIGHT;
   \   000000D0   0170A0E3           MOV      R7,#+1
     48              }
     49              /* Show the text nearby the ring */
     50              GUI_DispStringInRect( FindDictionaryWord( L_WORD572 ).c_str(), &Rect, Align | GUI_TA_TOP );
   \                     ??CalibrationMessage_2:
   \   000000D4   8F1FA0E3           MOV      R1,#+572
   \   000000D8   2C008DE2           ADD      R0,SP,#+44
   \   000000DC   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000E0   44009DE5           LDR      R0,[SP, #+68]
   \   000000E4   0720A0E1           MOV      R2,R7
   \   000000E8   100050E3           CMP      R0,#+16
   \   000000EC   30009D25           LDRCS    R0,[SP, #+48]
   \   000000F0   0D10A0E1           MOV      R1,SP
   \   000000F4   30008D32           ADDCC    R0,SP,#+48
   \   000000F8   ........           _BLF     GUI_DispStringInRect,??GUI_DispStringInRect??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   2C008DE2           ADD      R0,SP,#+44
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              GUI_DispStringInRect( pString, &Rect, Align | GUI_TA_BOTTOM );
   \   0000010C   042087E3           ORR      R2,R7,#0x4
   \   00000110   0D10A0E1           MOV      R1,SP
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   ........           _BLF     GUI_DispStringInRect,??GUI_DispStringInRect??rA
     52              /* Draw the ring */
     53              GUI_FillCircle( LogX, LogY, 10 );
   \   0000011C   0A20A0E3           MOV      R2,#+10
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     GUI_FillCircle,??GUI_FillCircle??rA
     54              GUI_SetColor( GUI_WHITE );
   \   0000012C   FF04E0E3           MVN      R0,#-16777216
   \   00000130   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
     55              GUI_FillCircle( LogX, LogY, 3 );
   \   00000134   0320A0E3           MOV      R2,#+3
   \   00000138   0510A0E1           MOV      R1,R5
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           _BLF     GUI_FillCircle,??GUI_FillCircle??rA
     56              GUI_SetColor( GUI_BLACK );
   \   00000144   0900A0E1           MOV      R0,R9
   \   00000148   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
     57          }
   \   0000014C   48D08DE2           ADD      SP,SP,#+72
   \   00000150   F043BDE8           POP      {R4-R9,LR}
   \   00000154   1EFF2FE1           BX       LR               ;; return
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          TDUCalibrateScreen::~TDUCalibrateScreen(void) {
   \                     `?~TDUCalibrateScreen`:
   \   00000000   00402DE9           PUSH     {LR}
     60          }
   \   00000004   ........           _BLF     `?~TDUBasicWin`,`?~TDUBasicWin??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     61          

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Abort">`:
   \   00000000   41626F727400       DC8 "Abort"
   \   00000006   0000               DC8 0, 0
   \   00000008   D20800000000       DC32 2258, 0, 571
   \              00003B020000
     62          const GUIKey Words[ ] = {
     63              {CLOSE_BUT_ID_CALIBRATE	,0,L_WORD571 },
     64          };
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          TDUCalibrateScreen::TDUCalibrateScreen(void) {
   \                     ??TDUCalibrateScreen:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     67              GUI_TOUCH_SetDefaultCalibration();
     68              CalCnt = 0;
     69              aLogX[0] = 15;
     70              aLogY[0] = 15;
     71              aLogX[1] = LCD_GetXSize() - 15;
     72              aLogY[1] = LCD_GetYSize() - 15;
     73              ExitDelay = time( NULL );
     74          
     75              WinHandl  = WM_CreateWindow( 0, 0, LCDXSize, LCDYSize, WM_CF_SHOW, NULL, 0 );
     76              CloseButton = BUTTON_CreateAsChild( 250, 50, 60, 22, WinHandl, CLOSE_BUT_ID_CALIBRATE, WM_CF_SHOW );
     77              BUTTON_SetText( CloseButton, "Abort" );
   \   00000004   DC509FE5           LDR      R5,??TDUCalibrateScreen_1  ;; `?<Constant "Abort">`
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     ??TDUBasicWin,??TDUBasicWin??rA
   \   00000010   ........           _BLF     GUI_TOUCH_SetDefaultCalibration,??GUI_TOUCH_SetDefaultCalibration??rA
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   540084E5           STR      R0,[R4, #+84]
   \   0000001C   0F00A0E3           MOV      R0,#+15
   \   00000020   440084E5           STR      R0,[R4, #+68]
   \   00000024   4C0084E5           STR      R0,[R4, #+76]
   \   00000028   ........           _BLF     LCD_GetXSize,??LCD_GetXSize??rA
   \   0000002C   0F0040E2           SUB      R0,R0,#+15
   \   00000030   480084E5           STR      R0,[R4, #+72]
   \   00000034   ........           _BLF     LCD_GetYSize,??LCD_GetYSize??rA
   \   00000038   0F0040E2           SUB      R0,R0,#+15
   \   0000003C   500084E5           STR      R0,[R4, #+80]
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   ........           _BLF     time,??time??rA
   \   00000048   580084E5           STR      R0,[R4, #+88]
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   0200A0E3           MOV      R0,#+2
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   84009FE5           LDR      R0,??TDUCalibrateScreen_1+0x4  ;; LCDYSize
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   003090E5           LDR      R3,[R0, #+0]
   \   0000006C   7C009FE5           LDR      R0,??TDUCalibrateScreen_1+0x8  ;; LCDXSize
   \   00000070   002090E5           LDR      R2,[R0, #+0]
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   ........           _BLF     WM_CreateWindow,??WM_CreateWindow??rA
   \   0000007C   BA02C4E1           STRH     R0,[R4, #+42]
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   8D0E80E3           ORR      R0,R0,#0x8D0
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000094   1630A0E3           MOV      R3,#+22
   \   00000098   3C20A0E3           MOV      R2,#+60
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   3210A0E3           MOV      R1,#+50
   \   000000A4   FA00A0E3           MOV      R0,#+250
   \   000000A8   ........           _BLF     BUTTON_CreateAsChild,??BUTTON_CreateAsChild??rA
   \   000000AC   BC05C4E1           STRH     R0,[R4, #+92]
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
     78              AddToSKeyList( (GUIKey *)Words, NELEMENTS( Words ) );
   \   000000B8   0130A0E3           MOV      R3,#+1
   \   000000BC   0320A0E1           MOV      R2,R3
   \   000000C0   081085E2           ADD      R1,R5,#+8
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           _BLF     ??AddToSKeyList,??AddToSKeyList??rA
     79              WM_SetCallback( WinHandl, cbEventHandler );
   \   000000CC   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   000000D0   1C109FE5           LDR      R1,??TDUCalibrateScreen_1+0xC  ;; ??cbEventHandler
   \   000000D4   ........           _BLF     WM_SetCallback,??WM_SetCallback??rA
     80          }
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   18D08DE2           ADD      SP,SP,#+24
   \   000000E0   3040BDE8           POP      {R4,R5,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return
   \                     ??TDUCalibrateScreen_1:
   \   000000E8   ........           DC32     `?<Constant "Abort">`
   \   000000EC   ........           DC32     LCDYSize
   \   000000F0   ........           DC32     LCDXSize
   \   000000F4   ........           DC32     ??cbEventHandler
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          void TDUCalibrateScreen::Exec(void) {
     83              CalCnt = 0;
   \                     ??Exec:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   541080E5           STR      R1,[R0, #+84]
     84          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void TDUCalibrateScreen::cbEventHandler(WM_MESSAGE *pMsg) {
   \                     ??cbEventHandler:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   44D04DE2           SUB      SP,SP,#+68
     87          
     88          //	int NCode, Id;
     89              switch (pMsg->MsgId) {
   \   00000008   D4429FE5           LDR      R4,??cbEventHandler_1  ;; CalibrateScreen
   \   0000000C   D4529FE5           LDR      R5,??cbEventHandler_1+0x4  ;; MainWindow
   \   00000010   0070A0E1           MOV      R7,R0
   \   00000014   001097E5           LDR      R1,[R7, #+0]
   \   00000018   CC029FE5           LDR      R0,??cbEventHandler_1+0x8  ;; 0x808080
   \   0000001C   0360A0E3           MOV      R6,#+3
   \   00000020   011051E2           SUBS     R1,R1,#+1
   \   00000024   4200000A           BEQ      ??cbEventHandler_2
   \   00000028   0B1051E2           SUBS     R1,R1,#+11
   \   0000002C   4300000A           BEQ      ??cbEventHandler_3
   \   00000030   031051E2           SUBS     R1,R1,#+3
   \   00000034   0200000A           BEQ      ??cbEventHandler_4
   \   00000038   171051E2           SUBS     R1,R1,#+23
   \   0000003C   9B00000A           BEQ      ??cbEventHandler_5
   \   00000040   A40000EA           B        ??cbEventHandler_6
     90              case WM_PAINT:
     91                  GUI_SetBkColor( TDU_C_CALIBRATE_BACK ); GUI_Clear();
   \                     ??cbEventHandler_4:
   \   00000044   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
   \   00000048   ........           _BLF     GUI_Clear,??GUI_Clear??rA
     92                  GUI_SetColor( TDU_C_CONF_TEXT );
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
     93                  GUI_SetTextMode( GUI_TM_TRANS );
   \   00000054   0200A0E3           MOV      R0,#+2
   \   00000058   ........           _BLF     GUI_SetTextMode,??GUI_SetTextMode??rA
     94                  GUI_SetFont( &GUI_Font13_1 );
   \   0000005C   8C029FE5           LDR      R0,??cbEventHandler_1+0xC  ;; GUI_Font13_1
   \   00000060   ........           _BLF     GUI_SetFont,??GUI_SetFont??rA
     95                  CalibrateScreen->UpdateLanguage();
   \   00000064   000094E5           LDR      R0,[R4, #+0]
   \   00000068   ........           _BLF     ??UpdateLanguage,??UpdateLanguage??rA
     96          
     97                  switch (CalibrateScreen->CalCnt) {
   \   0000006C   000094E5           LDR      R0,[R4, #+0]
   \   00000070   540090E5           LDR      R0,[R0, #+84]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0400000A           BEQ      ??cbEventHandler_7
   \   0000007C   010050E2           SUBS     R0,R0,#+1
   \   00000080   1500000A           BEQ      ??cbEventHandler_8
   \   00000084   010050E2           SUBS     R0,R0,#+1
   \   00000088   2300000A           BEQ      ??cbEventHandler_9
   \   0000008C   0F0000EA           B        ??cbEventHandler_10
     98                  case 0:
     99                      CalibrationMessage( CalibrateScreen->aLogX[0], CalibrateScreen->aLogY[0], FindDictionaryWord( L_WORD573 ).c_str() ); // _acPos[0]);
   \                     ??cbEventHandler_7:
   \   00000090   3D10A0E3           MOV      R1,#+61
   \   00000094   801F81E3           ORR      R1,R1,#0x200
   \   00000098   28008DE2           ADD      R0,SP,#+40
   \   0000009C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000A0   40009DE5           LDR      R0,[SP, #+64]
   \   000000A4   100050E3           CMP      R0,#+16
   \   000000A8   000094E5           LDR      R0,[R4, #+0]
   \   000000AC   2C209D25           LDRCS    R2,[SP, #+44]
   \   000000B0   4C1090E5           LDR      R1,[R0, #+76]
   \   000000B4   440090E5           LDR      R0,[R0, #+68]
   \   000000B8   2C208D32           ADDCC    R2,SP,#+44
   \   000000BC   ........           BL       ??CalibrationMessage
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   28008DE2           ADD      R0,SP,#+40
   \                     ??cbEventHandler_11:
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??cbEventHandler_10:
   \   000000D0   44D08DE2           ADD      SP,SP,#+68
   \   000000D4   F040BDE8           POP      {R4-R7,LR}
   \   000000D8   1EFF2FE1           BX       LR
    100                      break;
    101                  case 1:
    102                      CalibrationMessage( CalibrateScreen->aLogX[1], CalibrateScreen->aLogY[1], FindDictionaryWord( L_WORD574 ).c_str() ); //_acPos[1]);
   \                     ??cbEventHandler_8:
   \   000000DC   3E10A0E3           MOV      R1,#+62
   \   000000E0   801F81E3           ORR      R1,R1,#0x200
   \   000000E4   0C008DE2           ADD      R0,SP,#+12
   \   000000E8   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000EC   24009DE5           LDR      R0,[SP, #+36]
   \   000000F0   100050E3           CMP      R0,#+16
   \   000000F4   000094E5           LDR      R0,[R4, #+0]
   \   000000F8   10209D25           LDRCS    R2,[SP, #+16]
   \   000000FC   501090E5           LDR      R1,[R0, #+80]
   \   00000100   480090E5           LDR      R0,[R0, #+72]
   \   00000104   10208D32           ADDCC    R2,SP,#+16
   \   00000108   ........           BL       ??CalibrationMessage
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   0C008DE2           ADD      R0,SP,#+12
   \   00000118   EBFFFFEA           B        ??cbEventHandler_11
    103                      break;
    104                  case 2:
    105                      /* Display the result */
    106                      //GUI_CURSOR_Show();
    107                      GUI_Clear();
   \                     ??cbEventHandler_9:
   \   0000011C   ........           _BLF     GUI_Clear,??GUI_Clear??rA
    108                      MainWindow->SetPreviousWindow();
   \                     ??cbEventHandler_12:
   \   00000120   000095E5           LDR      R0,[R5, #+0]
   \   00000124   ........           _BLF     ??SetPreviousWindow,??SetPreviousWindow??rA
    109                      CalibrateScreen->CalCnt = 3;
   \   00000128   000094E5           LDR      R0,[R4, #+0]
   \   0000012C   546080E5           STR      R6,[R0, #+84]
   \   00000130   E6FFFFEA           B        ??cbEventHandler_10
    110                      break;
    111                  case 3:
    112                      // Exit, do nothing
    113                      break;
    114                  }
    115                  break;
    116              case WM_CREATE:
    117                  {
    118                      GUI_SetBkColor( TDU_C_CALIBRATE_BACK ); GUI_Clear();
   \                     ??cbEventHandler_2:
   \   00000134   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
   \   00000138   ........           _BLF     GUI_Clear,??GUI_Clear??rA
   \   0000013C   E3FFFFEA           B        ??cbEventHandler_10
    119                  }
    120                  break;
    121              case WM_TOUCH:
    122                  {
    123                      GUI_PID_STATE State;
    124                      /* Wait until touch is pressed */
    125                      GUI_TOUCH_GetState( &State );
   \                     ??cbEventHandler_3:
   \   00000140   0D00A0E1           MOV      R0,SP
   \   00000144   ........           _BLF     GUI_TOUCH_GetState,??GUI_TOUCH_GetState??rA
    126                      if (State.Pressed == 1) {
   \   00000148   0800DDE5           LDRB     R0,[SP, #+8]
   \   0000014C   010050E3           CMP      R0,#+1
   \   00000150   DEFFFF1A           BNE      ??cbEventHandler_10
    127                          if (CalibrateScreen->CalCnt == 0) {
   \   00000154   000094E5           LDR      R0,[R4, #+0]
   \   00000158   04109DE5           LDR      R1,[SP, #+4]
   \   0000015C   542090E5           LDR      R2,[R0, #+84]
   \   00000160   000052E3           CMP      R2,#+0
   \   00000164   1300001A           BNE      ??cbEventHandler_13
    128                              // Check the position. Seems reasonable??
    129                              if (( State.x < CalibrateScreen->aLogX[0] + 30 ) && ( State.y < CalibrateScreen->aLogY[0] + 80 )) {
   \   00000168   00209DE5           LDR      R2,[SP, #+0]
   \   0000016C   443090E5           LDR      R3,[R0, #+68]
   \   00000170   1E3083E2           ADD      R3,R3,#+30
   \   00000174   030052E1           CMP      R2,R3
   \   00000178   D4FFFFAA           BGE      ??cbEventHandler_10
   \   0000017C   4C2090E5           LDR      R2,[R0, #+76]
   \   00000180   502082E2           ADD      R2,R2,#+80
   \   00000184   020051E1           CMP      R1,R2
   \   00000188   D0FFFFAA           BGE      ??cbEventHandler_10
    130                                  CalibrateScreen->CalCnt = 1;
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   541080E5           STR      R1,[R0, #+84]
    131                                  CalibrateScreen->aPhysX[0] = GUI_TOUCH_GetxPhys();
   \   00000194   ........           _BLF     GUI_TOUCH_GetxPhys,??GUI_TOUCH_GetxPhys??rA
   \   00000198   001094E5           LDR      R1,[R4, #+0]
   \   0000019C   340081E5           STR      R0,[R1, #+52]
    132                                  CalibrateScreen->aPhysY[0] = GUI_TOUCH_GetyPhys();
   \   000001A0   ........           _BLF     GUI_TOUCH_GetyPhys,??GUI_TOUCH_GetyPhys??rA
   \   000001A4   001094E5           LDR      R1,[R4, #+0]
   \   000001A8   3C0081E5           STR      R0,[R1, #+60]
    133                                  WM_Paint( CalibrateScreen->WinHandl );
   \   000001AC   FA02D1E1           LDRSH    R0,[R1, #+42]
   \   000001B0   ........           _BLF     WM_Paint,??WM_Paint??rA
   \   000001B4   C5FFFFEA           B        ??cbEventHandler_10
    134                              }
    135                          } else if (CalibrateScreen->CalCnt == 1) {
   \                     ??cbEventHandler_13:
   \   000001B8   010052E3           CMP      R2,#+1
   \   000001BC   3600001A           BNE      ??cbEventHandler_14
    136                              // Check the position. Seems reasonable??
    137                              if (( State.x > CalibrateScreen->aLogX[1] - 15 ) && ( State.y > CalibrateScreen->aLogY[1] - 15 )) {
   \   000001C0   482090E5           LDR      R2,[R0, #+72]
   \   000001C4   00309DE5           LDR      R3,[SP, #+0]
   \   000001C8   0F2042E2           SUB      R2,R2,#+15
   \   000001CC   030052E1           CMP      R2,R3
   \   000001D0   BEFFFFAA           BGE      ??cbEventHandler_10
   \   000001D4   502090E5           LDR      R2,[R0, #+80]
   \   000001D8   0F2042E2           SUB      R2,R2,#+15
   \   000001DC   010052E1           CMP      R2,R1
   \   000001E0   BAFFFFAA           BGE      ??cbEventHandler_10
    138                                  CalibrateScreen->CalCnt = 2;
   \   000001E4   0210A0E3           MOV      R1,#+2
   \   000001E8   541080E5           STR      R1,[R0, #+84]
    139                                  CalibrateScreen->aPhysX[1] = GUI_TOUCH_GetxPhys();
   \   000001EC   ........           _BLF     GUI_TOUCH_GetxPhys,??GUI_TOUCH_GetxPhys??rA
   \   000001F0   001094E5           LDR      R1,[R4, #+0]
   \   000001F4   380081E5           STR      R0,[R1, #+56]
    140                                  CalibrateScreen->aPhysY[1] = GUI_TOUCH_GetyPhys();
   \   000001F8   ........           _BLF     GUI_TOUCH_GetyPhys,??GUI_TOUCH_GetyPhys??rA
   \   000001FC   001094E5           LDR      R1,[R4, #+0]
   \   00000200   400081E5           STR      R0,[R1, #+64]
    141                                  /* Use the physical values to calibrate the touch screen */
    142                                  GUI_TOUCH_Calibrate( 0, CalibrateScreen->aLogX[0], CalibrateScreen->aLogX[1], CalibrateScreen->aPhysX[0], CalibrateScreen->aPhysX[1] );   /* Calibrate X-axis */
   \   00000204   380091E5           LDR      R0,[R1, #+56]
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   343091E5           LDR      R3,[R1, #+52]
   \   00000210   482091E5           LDR      R2,[R1, #+72]
   \   00000214   441091E5           LDR      R1,[R1, #+68]
   \   00000218   0000A0E3           MOV      R0,#+0
   \   0000021C   ........           _BLF     GUI_TOUCH_Calibrate,??GUI_TOUCH_Calibrate??rA
    143                                  GUI_TOUCH_Calibrate( 1, CalibrateScreen->aLogY[0], CalibrateScreen->aLogY[1], CalibrateScreen->aPhysY[0], CalibrateScreen->aPhysY[1] );   /* Calibrate Y-axis */
   \   00000220   000094E5           LDR      R0,[R4, #+0]
   \   00000224   401090E5           LDR      R1,[R0, #+64]
   \   00000228   02002DE9           PUSH     {R1}
   \   0000022C   3C3090E5           LDR      R3,[R0, #+60]
   \   00000230   502090E5           LDR      R2,[R0, #+80]
   \   00000234   4C1090E5           LDR      R1,[R0, #+76]
   \   00000238   0100A0E3           MOV      R0,#+1
   \   0000023C   ........           _BLF     GUI_TOUCH_Calibrate,??GUI_TOUCH_Calibrate??rA
    144          #ifdef S2TXU
    145                                 // WriteLocalSettings();
    146          #endif
    147                                  BUTTON_SetText( CalibrateScreen->CloseButton, FindDictionaryWord( L_WORD18 ).c_str() ); // Close
   \   00000240   1210A0E3           MOV      R1,#+18
   \   00000244   14008DE2           ADD      R0,SP,#+20
   \   00000248   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000024C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000250   08D08DE2           ADD      SP,SP,#+8
   \   00000254   100050E3           CMP      R0,#+16
   \   00000258   000094E5           LDR      R0,[R4, #+0]
   \   0000025C   10109D25           LDRCS    R1,[SP, #+16]
   \   00000260   FC05D0E1           LDRSH    R0,[R0, #+92]
   \   00000264   10108D32           ADDCC    R1,SP,#+16
   \   00000268   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   0C008DE2           ADD      R0,SP,#+12
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
    148                                  WM_Paint( CalibrateScreen->WinHandl );
   \   0000027C   000094E5           LDR      R0,[R4, #+0]
   \   00000280   FA02D0E1           LDRSH    R0,[R0, #+42]
   \   00000284   ........           _BLF     WM_Paint,??WM_Paint??rA
    149                                  CalibrateScreen->ExitDelay = time( NULL );
   \   00000288   0000A0E3           MOV      R0,#+0
   \   0000028C   ........           _BLF     time,??time??rA
   \   00000290   001094E5           LDR      R1,[R4, #+0]
   \   00000294   580081E5           STR      R0,[R1, #+88]
   \   00000298   8CFFFFEA           B        ??cbEventHandler_10
    150                              }
    151                          } else if (CalibrateScreen->CalCnt == 2) {
   \                     ??cbEventHandler_14:
   \   0000029C   020052E3           CMP      R2,#+2
   \   000002A0   8AFFFF1A           BNE      ??cbEventHandler_10
    152                              MainWindow->SetPreviousWindow();
   \   000002A4   000095E5           LDR      R0,[R5, #+0]
   \   000002A8   ........           _BLF     ??SetPreviousWindow,??SetPreviousWindow??rA
   \   000002AC   87FFFFEA           B        ??cbEventHandler_10
    153                          }
    154                      }
    155                  }
    156                  break;
    157              case WM_NOTIFY_PARENT:
    158                  {
    159                      int NCode, Id;
    160                      Id    = WM_GetId( pMsg->hWinSrc );        /* Id of widget */
   \                     ??cbEventHandler_5:
   \   000002B0   F600D7E1           LDRSH    R0,[R7, #+6]
   \   000002B4   ........           _BLF     WM_GetId,??WM_GetId??rA
    161                      NCode = pMsg->Data.v;                               /* Notification code */
    162                      switch (NCode) {
   \   000002B8   081097E5           LDR      R1,[R7, #+8]
   \   000002BC   020051E3           CMP      R1,#+2
   \   000002C0   82FFFF1A           BNE      ??cbEventHandler_10
    163                      case WM_NOTIFICATION_RELEASED:  /* React only if released */
    164          //				case WM_NOTIFICATION_CLICKED:   /* React only if pressed */
    165                          {
    166                              switch (Id) {
   \   000002C4   D210A0E3           MOV      R1,#+210
   \   000002C8   801E81E3           ORR      R1,R1,#0x800
   \   000002CC   010050E1           CMP      R0,R1
   \   000002D0   7EFFFF1A           BNE      ??cbEventHandler_10
    167                              case CLOSE_BUT_ID_CALIBRATE:
    168                                  MainWindow->SetPreviousWindow();
   \   000002D4   91FFFFEA           B        ??cbEventHandler_12
    169                                  CalibrateScreen->CalCnt = 3;
    170                                  break;
    171                              }
    172                          }
    173                          break;
    174                      }
    175                  }
    176                  break;
    177              default:
    178                  WM_DefaultProc( pMsg );
   \                     ??cbEventHandler_6:
   \   000002D8   0700A0E1           MOV      R0,R7
   \   000002DC   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
    179              }
    180          }
   \                     ??cbEventHandler_15:
   \   000002E0   7AFFFFEA           B        ??cbEventHandler_10
   \                     ??cbEventHandler_1:
   \   000002E4   ........           DC32     CalibrateScreen
   \   000002E8   ........           DC32     MainWindow
   \   000002EC   80808000           DC32     0x808080
   \   000002F0   ........           DC32     GUI_Font13_1

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TDUCalibrateScreen &TDUCalibrateScreen::new TDUCalibrateScreen()
   \                     `??new TDUCalibrateScreen`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   6000A0E3           MOV      R0,#+96
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TDUCalibrateScreen_1`
   \   00000014   ........           BL       ??TDUCalibrateScreen
   \                     `??new TDUCalibrateScreen_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TDUCalibrateScreen::delete ~TDUCalibrateScreen(TDUCalibrateScreen *)
   \                     `??delete ~TDUCalibrateScreen`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TDUCalibrateScreen_1`
   \   0000000C   ........           _BLF     `?~TDUBasicWin`,`?~TDUBasicWin??rA`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TDUCalibrateScreen_1`:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CalibrationMessage(int, int, char const *)
                                      100
     TDUCalibrateScreen::Exec()         0
     TDUCalibrateScreen::TDUCalibrateScreen()
                                       36
     TDUCalibrateScreen::cbEventHandler(WM_MESSAGE *)
                                       96
     TDUCalibrateScreen::delete ~TDUCalibrateScreen(TDUCalibrateScreen *)
                                        8
     TDUCalibrateScreen::new TDUCalibrateScreen()
                                        4
     TDUCalibrateScreen::~TDUCalibrateScreen()
                                        4
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CalibrationMessage(int, int, char const *)
                                     344
     TDUCalibrateScreen::~TDUCalibrateScreen()
                                      16
     ?<Constant "Abort">              20
     TDUCalibrateScreen::TDUCalibrateScreen()
                                     248
     TDUCalibrateScreen::Exec()       12
     TDUCalibrateScreen::cbEventHandler(WM_MESSAGE *)
                                     756
     TDUCalibrateScreen::new TDUCalibrateScreen()
                                      32
     TDUCalibrateScreen::delete ~TDUCalibrateScreen(TDUCalibrateScreen *)
                                      32
     __sti__routine()                  4
      Others                         420

 
 1 860 bytes in segment CODE
    20 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 448 bytes of CODE  memory (+ 416 bytes shared)
    20 bytes of CONST memory

Errors: none
Warnings: none
