##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\DigitalInput.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\DigitalInput.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\DigitalInput.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\DigitalInput.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\DigitalInput.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          int DigitalInput::NumberOfPRO=0;
   \                     ??NumberOfPRO:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          DigitalInput::DigitalInput(void)
   \                     ??DigitalInput:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     12          {
   \   00000008   ........           _BLF     ??PROIOComponent,??PROIOComponent??rA
   \   0000000C   18009FE5           LDR      R0,??DigitalInput_1  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     13          	Failure= false;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1001C4E5           STRB     R0,[R4, #+272]
     14          	Init();
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Init
     15          }
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           B        ?Subroutine12
   \                     ??DigitalInput_1:
   \   0000002C   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine12_0:
   \   00000008   ........           DC32     ??NumberOfPRO
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          void DigitalInput::Init(void)
     18          {
   \                     ??Init:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     19          	NumberOfPRO++;
   \   00000008   ........           LDR      R0,??Subroutine12_0  ;; ??NumberOfPRO
   \   0000000C   1CD04DE2           SUB      SP,SP,#+28
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
     20          	IDNumber = (C_IOC_DIGITAL_IN << 16 )+NumberOfPRO;
   \   0000001C   7006A0E3           MOV      R0,#+117440512
   \   00000020   EE0880E3           ORR      R0,R0,#0xEE0000
   \   00000024   010080E0           ADD      R0,R0,R1
     21          	SerialNumber = "None";
   \   00000028   ........           LDR      R1,??DataTable3  ;; `?<Constant "None">`
   \   0000002C   9C0084E5           STR      R0,[R4, #+156]
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000038   ........           LDR      R1,??DataTable5  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003091E5           LDR      R3,[R1, #+0]
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   D80084E2           ADD      R0,R4,#+216
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
     22          	TCUAddress = 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   F40084E5           STR      R0,[R4, #+244]
     23          	//TCUPort = 0;
     24          	TCUPortNo = 0;
   \   00000068   F80084E5           STR      R0,[R4, #+248]
     25          	IOType = 0;
   \   0000006C   FC0084E5           STR      R0,[R4, #+252]
     26          	IOAddress = 0;
   \   00000070   000184E5           STR      R0,[R4, #+256]
     27          	IOChannel = 0;
   \   00000074   040184E5           STR      R0,[R4, #+260]
     28          	ADCardChannel = 0;
   \   00000078   080184E5           STR      R0,[R4, #+264]
     29          }
   \   0000007C   1CD08DE2           ADD      SP,SP,#+28
   \   00000080                      REQUIRE ?Subroutine12
   \   00000080                      ;; // Fall through to label ?Subroutine12
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          DigitalInput::~DigitalInput(void)
     32          {
   \                     `?~DigitalInput`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~DigitalInput_1`
     33          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROIOComponent`,`?~PROIOComponent??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~DigitalInput_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~DigitalInput_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     34          
     35          
     36          
     37          ///////////////////////////////////////////////////////////////
     38          //
     39          // Routines for the Configuration
     40          //
     41          ///////////////////////////////////////////////////////////////
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          AnsiString DigitalInput::MakeConfigString(int ExtraTabs)
     44          {
   \                     ??MakeConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     45          	AnsiString LocalString;
     46          	LocalString +=TabStr2+KeyWord(C_DI_START_COMMON)+CrLfStr;
   \   00000004   78669FE5           LDR      R6,??MakeConfigString_2  ;; TabStr2
   \   00000008   78769FE5           LDR      R7,??MakeConfigString_2+0x4  ;; CrLfStr
   \   0000000C   98D04DE2           SUB      SP,SP,#+152
   \   00000010   40DE4DE2           SUB      SP,SP,#+1024
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000024   2910A0E3           MOV      R1,#+41
   \   00000028   A01E81E3           ORR      R1,R1,#0xA00
   \   0000002C   38008DE2           ADD      R0,SP,#+56
   \   00000030   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000034   38208DE2           ADD      R2,SP,#+56
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   1C008DE2           ADD      R0,SP,#+28
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   1C108DE2           ADD      R1,SP,#+28
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   008090E5           LDR      R8,[R0, #+0]
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0830A0E1           MOV      R3,R8
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   1C008DE2           ADD      R0,SP,#+28
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   38008DE2           ADD      R0,SP,#+56
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
     47          //    LocalString +=TabStr3+KeyWord(C_DI_TYPE)+(AnsiString)Type+CrLfStr;
     48          	if ( SerialNumber.IsEmpty()) {
   \   000000A0   D80084E2           ADD      R0,R4,#+216
   \   000000A4   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0B00000A           BEQ      ??MakeConfigString_3
     49          		 SerialNumber = "None";
   \   000000B0   ........           LDR      R1,??DataTable3  ;; `?<Constant "None">`
   \   000000B4   FC0F8DE2           ADD      R0,SP,#+1008
   \   000000B8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000BC   0830A0E1           MOV      R3,R8
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0010A0E1           MOV      R1,R0
   \   000000C8   D80084E2           ADD      R0,R4,#+216
   \   000000CC   ........           _BLF     ??assign,??assign??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   FC0F8DE2           ADD      R0,SP,#+1008
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     50          	}
     51          	LocalString +=TabStr3+KeyWord(C_DI_SERIALNO)+SerialNumber+CrLfStr;
   \                     ??MakeConfigString_3:
   \   000000E0   A4959FE5           LDR      R9,??MakeConfigString_2+0x8  ;; TabStr3
   \   000000E4   3310A0E3           MOV      R1,#+51
   \   000000E8   A01E81E3           ORR      R1,R1,#0xA00
   \   000000EC   A8008DE2           ADD      R0,SP,#+168
   \   000000F0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000F4   A8208DE2           ADD      R2,SP,#+168
   \   000000F8   0910A0E1           MOV      R1,R9
   \   000000FC   8C008DE2           ADD      R0,SP,#+140
   \   00000100   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000104   D82084E2           ADD      R2,R4,#+216
   \   00000108   8C108DE2           ADD      R1,SP,#+140
   \   0000010C   70008DE2           ADD      R0,SP,#+112
   \   00000110   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000114   0720A0E1           MOV      R2,R7
   \   00000118   70108DE2           ADD      R1,SP,#+112
   \   0000011C   54008DE2           ADD      R0,SP,#+84
   \   00000120   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000124   0830A0E1           MOV      R3,R8
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   54108DE2           ADD      R1,SP,#+84
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           _BLF     ??append,??append??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   54008DE2           ADD      R0,SP,#+84
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   70008DE2           ADD      R0,SP,#+112
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   8C008DE2           ADD      R0,SP,#+140
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   A8008DE2           ADD      R0,SP,#+168
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
     52          
     53          	LocalString +=TabStr3+KeyWord(C_TCU_ADDRESS)+(AnsiString)TCUAddress+CrLfStr;
   \   00000178   F41094E5           LDR      R1,[R4, #+244]
   \   0000017C   0C008DE2           ADD      R0,SP,#+12
   \   00000180   400E80E2           ADD      R0,R0,#+1024
   \   00000184   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000188   00A0A0E1           MOV      R10,R0
   \   0000018C   0510A0E3           MOV      R1,#+5
   \   00000190   801E81E3           ORR      R1,R1,#0x800
   \   00000194   460F8DE2           ADD      R0,SP,#+280
   \   00000198   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000019C   462F8DE2           ADD      R2,SP,#+280
   \   000001A0   0910A0E1           MOV      R1,R9
   \   000001A4   FC008DE2           ADD      R0,SP,#+252
   \   000001A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001AC   0A20A0E1           MOV      R2,R10
   \   000001B0   FC108DE2           ADD      R1,SP,#+252
   \   000001B4   E0008DE2           ADD      R0,SP,#+224
   \   000001B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001BC   0720A0E1           MOV      R2,R7
   \   000001C0   E0108DE2           ADD      R1,SP,#+224
   \   000001C4   C4008DE2           ADD      R0,SP,#+196
   \   000001C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001CC   0830A0E1           MOV      R3,R8
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   C4108DE2           ADD      R1,SP,#+196
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   ........           _BLF     ??append,??append??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   C4008DE2           ADD      R0,SP,#+196
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   E0008DE2           ADD      R0,SP,#+224
   \   000001FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   0C008DE2           ADD      R0,SP,#+12
   \   0000020C   400E80E2           ADD      R0,R0,#+1024
   \   00000210   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   FC008DE2           ADD      R0,SP,#+252
   \   00000220   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   460F8DE2           ADD      R0,SP,#+280
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
     54          	//   LocalString +=TabStr3+KeyWord(C_TCU_PORT)+(AnsiString)TCUPort+CrLfStr;
     55          	LocalString +=TabStr3+KeyWord(C_TCU_PORT_NO)+(AnsiString)TCUPortNo+CrLfStr;
   \   00000234   F81094E5           LDR      R1,[R4, #+248]
   \   00000238   28008DE2           ADD      R0,SP,#+40
   \   0000023C   400E80E2           ADD      R0,R0,#+1024
   \   00000240   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000244   00A0A0E1           MOV      R10,R0
   \   00000248   0B10A0E3           MOV      R1,#+11
   \   0000024C   801E81E3           ORR      R1,R1,#0x800
   \   00000250   620F8DE2           ADD      R0,SP,#+392
   \   00000254   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000258   622F8DE2           ADD      R2,SP,#+392
   \   0000025C   0910A0E1           MOV      R1,R9
   \   00000260   5B0F8DE2           ADD      R0,SP,#+364
   \   00000264   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000268   0A20A0E1           MOV      R2,R10
   \   0000026C   5B1F8DE2           ADD      R1,SP,#+364
   \   00000270   540F8DE2           ADD      R0,SP,#+336
   \   00000274   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000278   0720A0E1           MOV      R2,R7
   \   0000027C   541F8DE2           ADD      R1,SP,#+336
   \   00000280   4D0F8DE2           ADD      R0,SP,#+308
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   0830A0E1           MOV      R3,R8
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   4D1F8DE2           ADD      R1,SP,#+308
   \   00000294   0500A0E1           MOV      R0,R5
   \   00000298   ........           _BLF     ??append,??append??rA
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   4D0F8DE2           ADD      R0,SP,#+308
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   0110A0E3           MOV      R1,#+1
   \   000002B4   540F8DE2           ADD      R0,SP,#+336
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   28008DE2           ADD      R0,SP,#+40
   \   000002C8   400E80E2           ADD      R0,R0,#+1024
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   5B0F8DE2           ADD      R0,SP,#+364
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E0   0020A0E3           MOV      R2,#+0
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   620F8DE2           ADD      R0,SP,#+392
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     56          	LocalString +=TabStr3+KeyWord(C_IO_TYPE)+KeyWord(IOType)+CrLfStr;
   \   000002F0   FC1094E5           LDR      R1,[R4, #+252]
   \   000002F4   850F8DE2           ADD      R0,SP,#+532
   \   000002F8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002FC   0710A0E3           MOV      R1,#+7
   \   00000300   801E81E3           ORR      R1,R1,#0x800
   \   00000304   7E0F8DE2           ADD      R0,SP,#+504
   \   00000308   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000030C   7E2F8DE2           ADD      R2,SP,#+504
   \   00000310   0910A0E1           MOV      R1,R9
   \   00000314   770F8DE2           ADD      R0,SP,#+476
   \   00000318   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000031C   852F8DE2           ADD      R2,SP,#+532
   \   00000320   771F8DE2           ADD      R1,SP,#+476
   \   00000324   700F8DE2           ADD      R0,SP,#+448
   \   00000328   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000032C   0720A0E1           MOV      R2,R7
   \   00000330   701F8DE2           ADD      R1,SP,#+448
   \   00000334   690F8DE2           ADD      R0,SP,#+420
   \   00000338   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000033C   0830A0E1           MOV      R3,R8
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   691F8DE2           ADD      R1,SP,#+420
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           _BLF     ??append,??append??rA
   \   00000350   0020A0E3           MOV      R2,#+0
   \   00000354   0110A0E3           MOV      R1,#+1
   \   00000358   690F8DE2           ADD      R0,SP,#+420
   \   0000035C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   0110A0E3           MOV      R1,#+1
   \   00000368   700F8DE2           ADD      R0,SP,#+448
   \   0000036C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   850F8DE2           ADD      R0,SP,#+532
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   0110A0E3           MOV      R1,#+1
   \   00000388   770F8DE2           ADD      R0,SP,#+476
   \   0000038C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   7E0F8DE2           ADD      R0,SP,#+504
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
     57          	LocalString +=TabStr3+KeyWord(C_IO_ADDRESS)+(AnsiString)IOAddress+CrLfStr;
   \   000003A0   001194E5           LDR      R1,[R4, #+256]
   \   000003A4   44008DE2           ADD      R0,SP,#+68
   \   000003A8   400E80E2           ADD      R0,R0,#+1024
   \   000003AC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000003B0   00A0A0E1           MOV      R10,R0
   \   000003B4   0810A0E3           MOV      R1,#+8
   \   000003B8   801E81E3           ORR      R1,R1,#0x800
   \   000003BC   A10F8DE2           ADD      R0,SP,#+644
   \   000003C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003C4   A12F8DE2           ADD      R2,SP,#+644
   \   000003C8   0910A0E1           MOV      R1,R9
   \   000003CC   9A0F8DE2           ADD      R0,SP,#+616
   \   000003D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D4   0A20A0E1           MOV      R2,R10
   \   000003D8   9A1F8DE2           ADD      R1,SP,#+616
   \   000003DC   930F8DE2           ADD      R0,SP,#+588
   \   000003E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E4   0720A0E1           MOV      R2,R7
   \   000003E8   931F8DE2           ADD      R1,SP,#+588
   \   000003EC   8C0F8DE2           ADD      R0,SP,#+560
   \   000003F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F4   0830A0E1           MOV      R3,R8
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   8C1F8DE2           ADD      R1,SP,#+560
   \   00000400   0500A0E1           MOV      R0,R5
   \   00000404   ........           _BLF     ??append,??append??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   8C0F8DE2           ADD      R0,SP,#+560
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   930F8DE2           ADD      R0,SP,#+588
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   44008DE2           ADD      R0,SP,#+68
   \   00000434   400E80E2           ADD      R0,R0,#+1024
   \   00000438   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000043C   0020A0E3           MOV      R2,#+0
   \   00000440   0110A0E3           MOV      R1,#+1
   \   00000444   9A0F8DE2           ADD      R0,SP,#+616
   \   00000448   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0110A0E3           MOV      R1,#+1
   \   00000454   A10F8DE2           ADD      R0,SP,#+644
   \   00000458   ........           _BLF     ??_Tidy,??_Tidy??rA
     58          	LocalString +=TabStr3+KeyWord(C_IO_CHANNEL)+(AnsiString)IOChannel+CrLfStr;
   \   0000045C   041194E5           LDR      R1,[R4, #+260]
   \   00000460   460E8DE2           ADD      R0,SP,#+1120
   \   00000464   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000468   00A0A0E1           MOV      R10,R0
   \   0000046C   0910A0E3           MOV      R1,#+9
   \   00000470   801E81E3           ORR      R1,R1,#0x800
   \   00000474   BD0F8DE2           ADD      R0,SP,#+756
   \   00000478   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000047C   BD2F8DE2           ADD      R2,SP,#+756
   \   00000480   0910A0E1           MOV      R1,R9
   \   00000484   B60F8DE2           ADD      R0,SP,#+728
   \   00000488   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000048C   0A20A0E1           MOV      R2,R10
   \   00000490   B61F8DE2           ADD      R1,SP,#+728
   \   00000494   AF0F8DE2           ADD      R0,SP,#+700
   \   00000498   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000049C   0720A0E1           MOV      R2,R7
   \   000004A0   AF1F8DE2           ADD      R1,SP,#+700
   \   000004A4   A80F8DE2           ADD      R0,SP,#+672
   \   000004A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004AC   0830A0E1           MOV      R3,R8
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   A81F8DE2           ADD      R1,SP,#+672
   \   000004B8   0500A0E1           MOV      R0,R5
   \   000004BC   ........           _BLF     ??append,??append??rA
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   A80F8DE2           ADD      R0,SP,#+672
   \   000004CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D0   0020A0E3           MOV      R2,#+0
   \   000004D4   0110A0E3           MOV      R1,#+1
   \   000004D8   AF0F8DE2           ADD      R0,SP,#+700
   \   000004DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E0   0020A0E3           MOV      R2,#+0
   \   000004E4   0110A0E3           MOV      R1,#+1
   \   000004E8   460E8DE2           ADD      R0,SP,#+1120
   \   000004EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   0110A0E3           MOV      R1,#+1
   \   000004F8   B60F8DE2           ADD      R0,SP,#+728
   \   000004FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0110A0E3           MOV      R1,#+1
   \   00000508   BD0F8DE2           ADD      R0,SP,#+756
   \   0000050C   ........           _BLF     ??_Tidy,??_Tidy??rA
     59          	LocalString +=TabStr3+KeyWord(C_ADCARD_CH)+(AnsiString)ADCardChannel+CrLfStr;
   \   00000510   081194E5           LDR      R1,[R4, #+264]
   \   00000514   7C008DE2           ADD      R0,SP,#+124
   \   00000518   400E80E2           ADD      R0,R0,#+1024
   \   0000051C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000520   00A0A0E1           MOV      R10,R0
   \   00000524   0A10A0E3           MOV      R1,#+10
   \   00000528   801E81E3           ORR      R1,R1,#0x800
   \   0000052C   D90F8DE2           ADD      R0,SP,#+868
   \   00000530   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000534   D92F8DE2           ADD      R2,SP,#+868
   \   00000538   0910A0E1           MOV      R1,R9
   \   0000053C   D20F8DE2           ADD      R0,SP,#+840
   \   00000540   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000544   0A20A0E1           MOV      R2,R10
   \   00000548   D21F8DE2           ADD      R1,SP,#+840
   \   0000054C   CB0F8DE2           ADD      R0,SP,#+812
   \   00000550   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000554   0720A0E1           MOV      R2,R7
   \   00000558   CB1F8DE2           ADD      R1,SP,#+812
   \   0000055C   C40F8DE2           ADD      R0,SP,#+784
   \   00000560   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000564   0830A0E1           MOV      R3,R8
   \   00000568   0020A0E3           MOV      R2,#+0
   \   0000056C   C41F8DE2           ADD      R1,SP,#+784
   \   00000570   0500A0E1           MOV      R0,R5
   \   00000574   ........           _BLF     ??append,??append??rA
   \   00000578   0020A0E3           MOV      R2,#+0
   \   0000057C   0110A0E3           MOV      R1,#+1
   \   00000580   C40F8DE2           ADD      R0,SP,#+784
   \   00000584   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   0110A0E3           MOV      R1,#+1
   \   00000590   CB0F8DE2           ADD      R0,SP,#+812
   \   00000594   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000598   0020A0E3           MOV      R2,#+0
   \   0000059C   0110A0E3           MOV      R1,#+1
   \   000005A0   7C008DE2           ADD      R0,SP,#+124
   \   000005A4   400E80E2           ADD      R0,R0,#+1024
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005AC   0020A0E3           MOV      R2,#+0
   \   000005B0   0110A0E3           MOV      R1,#+1
   \   000005B4   D20F8DE2           ADD      R0,SP,#+840
   \   000005B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005BC   0020A0E3           MOV      R2,#+0
   \   000005C0   0110A0E3           MOV      R1,#+1
   \   000005C4   D90F8DE2           ADD      R0,SP,#+868
   \   000005C8   ........           _BLF     ??_Tidy,??_Tidy??rA
     60          	LocalString +=TabStr2+KeyWord(C_DI_END_COMMON)+CrLfStr;
   \   000005CC   2A10A0E3           MOV      R1,#+42
   \   000005D0   A01E81E3           ORR      R1,R1,#0xA00
   \   000005D4   EE0F8DE2           ADD      R0,SP,#+952
   \   000005D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005DC   EE2F8DE2           ADD      R2,SP,#+952
   \   000005E0   0610A0E1           MOV      R1,R6
   \   000005E4   E70F8DE2           ADD      R0,SP,#+924
   \   000005E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005EC   0720A0E1           MOV      R2,R7
   \   000005F0   E71F8DE2           ADD      R1,SP,#+924
   \   000005F4   E00F8DE2           ADD      R0,SP,#+896
   \   000005F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005FC   0830A0E1           MOV      R3,R8
   \   00000600   0020A0E3           MOV      R2,#+0
   \   00000604   E01F8DE2           ADD      R1,SP,#+896
   \   00000608   0500A0E1           MOV      R0,R5
   \   0000060C   ........           _BLF     ??append,??append??rA
   \   00000610   0020A0E3           MOV      R2,#+0
   \   00000614   0110A0E3           MOV      R1,#+1
   \   00000618   E00F8DE2           ADD      R0,SP,#+896
   \   0000061C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000620   0020A0E3           MOV      R2,#+0
   \   00000624   0110A0E3           MOV      R1,#+1
   \   00000628   E70F8DE2           ADD      R0,SP,#+924
   \   0000062C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000630   0020A0E3           MOV      R2,#+0
   \   00000634   0110A0E3           MOV      R1,#+1
   \   00000638   EE0F8DE2           ADD      R0,SP,#+952
   \   0000063C   ........           _BLF     ??_Tidy,??_Tidy??rA
     61          
     62          	LocalString += PROIOComponent::MakeConfigString();
   \   00000640   0020A0E3           MOV      R2,#+0
   \   00000644   F51F8DE2           ADD      R1,SP,#+980
   \   00000648   0400A0E1           MOV      R0,R4
   \   0000064C   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000650   0830A0E1           MOV      R3,R8
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   F51F8DE2           ADD      R1,SP,#+980
   \   0000065C   0500A0E1           MOV      R0,R5
   \   00000660   ........           _BLF     ??append,??append??rA
   \   00000664   0020A0E3           MOV      R2,#+0
   \   00000668   0110A0E3           MOV      R1,#+1
   \   0000066C   F50F8DE2           ADD      R0,SP,#+980
   \   00000670   ........           _BLF     ??_Tidy,??_Tidy??rA
     63          	return (LocalString);
   \   00000674   98D08DE2           ADD      SP,SP,#+152
   \   00000678   40DE8DE2           ADD      SP,SP,#+1024
   \   0000067C   F047BDE8           POP      {R4-R10,LR}
   \   00000680   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000684   ........           DC32     TabStr2
   \   00000688   ........           DC32     CrLfStr
   \   0000068C   ........           DC32     TabStr3
     64          }
     65          //---------------------------------------------------------------------------
     66          

   \                                 In segment CODE, align 4, keep-with-next
     67          bool DigitalInput::LoadConfigString(TSNConfigString &ConfigString)
     68          {
   \                     ??LoadConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     69          	bool NoError = true;
     70          	int ErrorLine=0;
   \   00000004   F0929FE5           LDR      R9,??LoadConfigString_1  ;; `?<Constant "Digital Input">`
   \   00000008   C8D04DE2           SUB      SP,SP,#+200
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0160A0E3           MOV      R6,#+1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0170E0E1           MVN      R7,R1
     71          	int Key;
     72          	do {
     73          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   58108DE2           ADD      R1,SP,#+88
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??NextWord,??NextWord??rA
     74          		if ( ErrorLine ) {
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0B00000A           BEQ      ??LoadConfigString_3
     75          			if ( ErrorLine != EOF ) {
   \   00000044   070050E1           CMP      R0,R7
   \   00000048   9C00000A           BEQ      ??LoadConfigString_4
     76          				GiveConfigWarning("Digital Input",ErrorLine);
   \   0000004C   0910A0E1           MOV      R1,R9
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_5:
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   920000EA           B        ??LoadConfigString_4
     77          			}
     78          		} else {
     79          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   3C008DE2           ADD      R0,SP,#+60
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   00A090E5           LDR      R10,[R0, #+0]
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   0A30A0E1           MOV      R3,R10
   \   00000098   3C008DE2           ADD      R0,SP,#+60
   \   0000009C   ........           _BLF     ??assign,??assign??rA
   \   000000A0   3C008DE2           ADD      R0,SP,#+60
   \   000000A4   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A8   0080A0E1           MOV      R8,R0
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   3C008DE2           ADD      R0,SP,#+60
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
     80          			switch ( Key ) {
   \   000000BC   0510A0E3           MOV      R1,#+5
   \   000000C0   801E81E3           ORR      R1,R1,#0x800
   \   000000C4   010058E1           CMP      R8,R1
   \   000000C8   3B00000A           BEQ      ??LoadConfigString_6
   \   000000CC   021081E3           ORR      R1,R1,#0x2
   \   000000D0   010058E1           CMP      R8,R1
   \   000000D4   4400000A           BEQ      ??LoadConfigString_7
   \   000000D8   011081E2           ADD      R1,R1,#+1
   \   000000DC   010058E1           CMP      R8,R1
   \   000000E0   6100000A           BEQ      ??LoadConfigString_8
   \   000000E4   011081E3           ORR      R1,R1,#0x1
   \   000000E8   010058E1           CMP      R8,R1
   \   000000EC   6400000A           BEQ      ??LoadConfigString_9
   \   000000F0   011081E2           ADD      R1,R1,#+1
   \   000000F4   010058E1           CMP      R8,R1
   \   000000F8   6700000A           BEQ      ??LoadConfigString_10
   \   000000FC   011081E3           ORR      R1,R1,#0x1
   \   00000100   010058E1           CMP      R8,R1
   \   00000104   3200000A           BEQ      ??LoadConfigString_11
   \   00000108   2A10A0E3           MOV      R1,#+42
   \   0000010C   A01E81E3           ORR      R1,R1,#0xA00
   \   00000110   010058E1           CMP      R8,R1
   \   00000114   6900000A           BEQ      ??LoadConfigString_4
   \   00000118   091081E2           ADD      R1,R1,#+9
   \   0000011C   010058E1           CMP      R8,R1
   \   00000120   1600000A           BEQ      ??LoadConfigString_12
     81          				default:
     82          					GiveConfigWarning("Digital Input",InputKeyWord,ConfigString.LineCount);
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0010A0E3           MOV      R1,#+0
   \   0000012C   74008DE2           ADD      R0,SP,#+116
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0A30A0E1           MOV      R3,R10
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   58108DE2           ADD      R1,SP,#+88
   \   00000140   74008DE2           ADD      R0,SP,#+116
   \   00000144   ........           _BLF     ??assign,??assign??rA
   \   00000148   0910A0E1           MOV      R1,R9
   \   0000014C   90008DE2           ADD      R0,SP,#+144
   \   00000150   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000154   1C2095E5           LDR      R2,[R5, #+28]
   \   00000158   74108DE2           ADD      R1,SP,#+116
   \   0000015C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   74008DE2           ADD      R0,SP,#+116
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   90008DE2           ADD      R0,SP,#+144
   \   0000017C   BAFFFFEA           B        ??LoadConfigString_5
     83          					break;
     84          				case C_DI_END_COMMON:
     85          					break;
     86          				case C_DI_SERIALNO:
     87          					SerialNumber = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000180   0030A0E3           MOV      R3,#+0
   \   00000184   0D20A0E1           MOV      R2,SP
   \   00000188   AC108DE2           ADD      R1,SP,#+172
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000194   0A30A0E1           MOV      R3,R10
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   AC108DE2           ADD      R1,SP,#+172
   \   000001A0   D80084E2           ADD      R0,R4,#+216
   \   000001A4   ........           _BLF     ??assign,??assign??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   AC008DE2           ADD      R0,SP,#+172
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     88          					NoError = !ErrorLine;
   \   000001B8   3C0000EA           B        ??LoadConfigString_13
     89          					break;
     90          				case C_TCU_ADDRESS:
     91          					TCUAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_6:
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0D10A0E1           MOV      R1,SP
   \   000001C4   0500A0E1           MOV      R0,R5
   \   000001C8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001CC   F40084E5           STR      R0,[R4, #+244]
     92          					NoError = !ErrorLine;
   \   000001D0   360000EA           B        ??LoadConfigString_13
     93          					break;
     94          				case C_TCU_PORT_NO:
     95          					TCUPortNo = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_11:
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   0D10A0E1           MOV      R1,SP
   \   000001DC   0500A0E1           MOV      R0,R5
   \   000001E0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001E4   F80084E5           STR      R0,[R4, #+248]
     96          					NoError = !ErrorLine;
   \   000001E8   300000EA           B        ??LoadConfigString_13
     97          					break;
     98          				case C_IO_TYPE:
     99          					{
    100          						AnsiString temp = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_7:
   \   000001EC   0030A0E3           MOV      R3,#+0
   \   000001F0   0D20A0E1           MOV      R2,SP
   \   000001F4   20108DE2           ADD      R1,SP,#+32
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??NextWord,??NextWord??rA
    101          						if ( !ErrorLine ) {
   \   00000200   00009DE5           LDR      R0,[SP, #+0]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   0F00001A           BNE      ??LoadConfigString_14
    102          							IOType = FindConfigKey(temp);
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   04008DE2           ADD      R0,SP,#+4
   \   00000218   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000021C   0A30A0E1           MOV      R3,R10
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   20108DE2           ADD      R1,SP,#+32
   \   00000228   04008DE2           ADD      R0,SP,#+4
   \   0000022C   ........           _BLF     ??assign,??assign??rA
   \   00000230   04008DE2           ADD      R0,SP,#+4
   \   00000234   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000238   FC0084E5           STR      R0,[R4, #+252]
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   04008DE2           ADD      R0,SP,#+4
   \   00000248   ........           _BLF     ??_Tidy,??_Tidy??rA
    103          						}
    104          						NoError = !ErrorLine;
   \                     ??LoadConfigString_14:
   \   0000024C   00009DE5           LDR      R0,[SP, #+0]
    105          					}
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   0160A003           MOVEQ    R6,#+1
   \   0000025C   0060A013           MOVNE    R6,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   20008DE2           ADD      R0,SP,#+32
   \   00000268   7FFFFFEA           B        ??LoadConfigString_5
    106          					break;
    107          				case C_IO_ADDRESS:
    108          					IOAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_8:
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0D10A0E1           MOV      R1,SP
   \   00000274   0500A0E1           MOV      R0,R5
   \   00000278   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000027C   000184E5           STR      R0,[R4, #+256]
    109          					NoError = !ErrorLine;
   \   00000280   0A0000EA           B        ??LoadConfigString_13
    110          					break;
    111          				case C_IO_CHANNEL:
    112          					IOChannel = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_9:
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0D10A0E1           MOV      R1,SP
   \   0000028C   0500A0E1           MOV      R0,R5
   \   00000290   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000294   040184E5           STR      R0,[R4, #+260]
    113          					NoError = !ErrorLine;
   \   00000298   040000EA           B        ??LoadConfigString_13
    114          					break;
    115          				case C_ADCARD_CH:
    116          					ADCardChannel = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_10:
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0D10A0E1           MOV      R1,SP
   \   000002A4   0500A0E1           MOV      R0,R5
   \   000002A8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002AC   080184E5           STR      R0,[R4, #+264]
    117          					NoError = !ErrorLine;
   \                     ??LoadConfigString_13:
   \   000002B0   00009DE5           LDR      R0,[SP, #+0]
   \   000002B4   000050E3           CMP      R0,#+0
   \   000002B8   0160A003           MOVEQ    R6,#+1
   \   000002BC   0060A013           MOVNE    R6,#+0
    118          					break;
    119          			}
    120          		}
    121          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_DI_END_COMMON ) );
   \                     ??LoadConfigString_4:
   \   000002C0   0020A0E3           MOV      R2,#+0
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   58008DE2           ADD      R0,SP,#+88
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   000056E3           CMP      R6,#+0
   \   000002D4   00009D15           LDRNE    R0,[SP, #+0]
   \   000002D8   07005011           CMPNE    R0,R7
   \   000002DC   2A00A013           MOVNE    R0,#+42
   \   000002E0   A00E8013           ORRNE    R0,R0,#0xA00
   \   000002E4   00005811           CMPNE    R8,R0
   \   000002E8   4DFFFF1A           BNE      ??LoadConfigString_2
    122          	return (NoError);
   \   000002EC   0600A0E1           MOV      R0,R6
   \   000002F0   C8D08DE2           ADD      SP,SP,#+200
   \   000002F4   F047BDE8           POP      {R4-R10,LR}
   \   000002F8   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_1:
   \   000002FC   ........           DC32     `?<Constant "Digital Input">`
    123          }
    124          //---------------------------------------------------------------------------
    125          
    126          
    127          ///////////////////////////////////////////////////////////////
    128          //
    129          // Routines for the librarian
    130          //
    131          ///////////////////////////////////////////////////////////////
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          int DigitalInput::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    134          {
   \                     ??GetStringValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    135          	int Status = GETVAL_NO_ERR;
    136          	//switch ( ValueId ){
    137          	//	default:
    138          	MyString = "";
   \   0000000C   0E1F8FE2           ADR      R1,??GetStringValue_1  ;; ""
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   ........           LDR      R1,??DataTable5  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
    139          	Status = GETVAL_NOT_AVAILABLE;
    140          	//		break;
    141          	//}
    142          	return(Status);
   \   00000040   1CD08DE2           ADD      SP,SP,#+28
   \   00000044   1040BDE8           POP      {R4,LR}
   \   00000048   ........           B        ?Subroutine13
   \                     ??GetStringValue_1:
   \   0000004C   00000000           DC8      "",+0,+0,+0
    143          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          int DigitalInput::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit)
    146          {
    147          	int Status = GETVAL_NO_ERR;
    148          	//switch ( ValueId )
    149          	// {
    150          	//	default:
    151          	Status = GETVAL_NOT_AVAILABLE;
    152          	//		  break;
    153          	//}
    154          	return(Status);
   \                     ??GetValue:
   \   00000000                      REQUIRE ?Subroutine13
   \   00000000                      ;; // Fall through to label ?Subroutine13
    155          }
    156          

   \                                 In segment CODE, align 4, keep-with-next
    157          int DigitalInput::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    158          {
   \                     ??PutValue:
   \   00000000   04009DE5           LDR      R0,[SP, #+4]
    159          	int Status=E_NO_ERR, ValUnitId = NO_UNIT;
    160          	//switch ( ValueId ){
    161          	//	default:
    162          	Status = E_INPUT_ERR;
    163          	//		break;
    164          	//}
    165          	if ( Status==E_NO_ERR ) {
    166          		SetModifiedFlag();
    167          	}
    168          	if (UnitId) {
   \   00000004   000050E3           CMP      R0,#+0
    169          		*UnitId = ValUnitId;
   \   00000008   0010A013           MOVNE    R1,#+0
   \   0000000C   00108015           STRNE    R1,[R0, #+0]
    170          	}
    171          	return(Status);
   \   00000010   ........           B        ?Subroutine13
    172          }
    173          

   \                                 In segment CODE, align 4, keep-with-next
    174          int DigitalInput::PutFloatValue( int ValueId, float NewValue)
    175          {
    176          	int Status= E_NO_ERR;
    177          	//switch ( ValueId )
    178          	// {
    179          	//   default:
    180          	Status = E_NOT_ADJUSTABLE;
    181          	//		break;
    182          	//}
    183          	return(Status);
   \                     ??PutFloatValue:
   \   00000000   2900A0E3           MOV      R0,#+41
   \   00000004   1EFF2FE1           BX       LR               ;; return
    184          }
    185          //end librerian
    186          
    187          

   \                                 In segment CODE, align 4, keep-with-next
    188          float DigitalInput::Calculate(void)
    189          {
    190          	return (0.0);
   \                     ??Calculate:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    191          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "None">`:
   \   00000000   4E6F6E6500         DC8 "None"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Digital Input">`:
   \   00000000   446967697461       DC8 "Digital Input"
   \              6C20496E7075
   \              7400        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs DigitalInput &DigitalInput::new DigitalInput()
   \                     `??new DigitalInput`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   450FA0E3           MOV      R0,#+276
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new DigitalInput_1`
   \   00000014   ........           BL       ??DigitalInput
   \                     `??new DigitalInput_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant "None">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     DigitalInput::Calculate()          0
     DigitalInput::DigitalInput()       8
     DigitalInput::GetStringValue(int, int, AnsiString &)
                                       36
     DigitalInput::GetValue(int, int, float &, int &, int &)
                                        0
     DigitalInput::Init()              36
     DigitalInput::LoadConfigString(TSNConfigString &)
                                      236
     DigitalInput::MakeConfigString(int)
                                     1208
     DigitalInput::PutFloatValue(int, float)
                                        0
     DigitalInput::PutValue(int, int, AnsiString, bool, int *)
                                        0
     DigitalInput::new DigitalInput()
                                        4
     DigitalInput::~DigitalInput()     12
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     DigitalInput::NumberOfPRO         4
     DigitalInput::DigitalInput()     48
     ?Subroutine12                    12
     DigitalInput::Init()            128
     DigitalInput::~DigitalInput()    52
     DigitalInput::MakeConfigString(int)
                                    1680
     DigitalInput::LoadConfigString(TSNConfigString &)
                                     768
     DigitalInput::GetStringValue(int, int, AnsiString &)
                                      80
     ?Subroutine13                     8
     DigitalInput::GetValue(int, int, float &, int &, int &)
                                       0
     DigitalInput::PutValue(int, int, AnsiString, bool, int *)
                                      20
     DigitalInput::PutFloatValue(int, float)
                                       8
     DigitalInput::Calculate()         8
     ?<Constant "None">                8
     ?<Constant "Digital Input">      16
     ?<Constant "">                    1
     DigitalInput::new DigitalInput()
                                      32
     __sti__routine()                  4
     ??DataTable3                      4
     ??DataTable5                      4
      Others                         400

 
 3 288 bytes in segment CODE
   133 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 860 bytes of CODE  memory (+ 444 bytes shared)
   133 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
