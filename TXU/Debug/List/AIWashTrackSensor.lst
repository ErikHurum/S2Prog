##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:43 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIWashTrackSensor.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AIWashTrackSensor.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIWashTrackSensor.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIWashTrackSensor.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIWashTrackSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AiWashTrackSensor::AiWashTrackSensor(void)
   \                     ??AiWashTrackSensor:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     10          {
   \   00000008   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   0000000C   3C009FE5           LDR      R0,??AiWashTrackSensor_1  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     11              Type                 = C_AI_WashTrackSensor;
   \   00000014   7F00A0E3           MOV      R0,#+127
   \   00000018   800E80E3           ORR      R0,R0,#0x800
   \   0000001C   A00084E5           STR      R0,[R4, #+160]
     12              BasicSensorType      = AI_SENSOR_REVOLUTIONS;
   \   00000020   0B00A0E3           MOV      R0,#+11
   \   00000024   100184E5           STR      R0,[R4, #+272]
     13              BasicSensorTypeWord  = L_WORD1015; //Revolutions
   \   00000028   FB0F80E2           ADD      R0,R0,#+1004
   \   0000002C   140184E5           STR      R0,[R4, #+276]
     14              Location             = C_AI_LOC_DECK;
   \   00000030   EA00A0E3           MOV      R0,#+234
   \   00000034   800E80E3           ORR      R0,R0,#0x800
   \   00000038   280184E5           STR      R0,[R4, #+296]
     15              LocationKWord        = L_WORD593;
   \   0000003C   5100A0E3           MOV      R0,#+81
   \   00000040   800F80E3           ORR      R0,R0,#0x200
   \   00000044   180184E5           STR      R0,[R4, #+280]
     16          }
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           B        ?Subroutine13
   \                     ??AiWashTrackSensor_1:
   \   00000050   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     17          //---------------------------------------------------------------------------
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          AiWashTrackSensor::~AiWashTrackSensor(void)
     20          {
   \                     `?~AiWashTrackSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AiWashTrackSensor_1`
     21          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AiWashTrackSensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AiWashTrackSensor_1`:
   \   0000002C   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     22          //---------------------------------------------------------------------------
     23          ///////////////////////////////////////////////////////////////
     24          //
     25          // Routines for the Configuration
     26          //
     27          ///////////////////////////////////////////////////////////////
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          AnsiString AiWashTrackSensor::MakeConfigString(int ExtraTabs)
     30          {
   \                     ??MakeConfigString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   5BDF4DE2           SUB      SP,SP,#+364
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     31              AnsiString TabStr1= AnsiString::StringOfChar('\t',1+ExtraTabs);
   \   00000014   012086E2           ADD      R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   C4008DE2           ADD      R0,SP,#+196
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     32              AnsiString TabStr2= AnsiString::StringOfChar('\t',2+ExtraTabs);
   \   00000024   022086E2           ADD      R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   E0008DE2           ADD      R0,SP,#+224
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     33              AnsiString TabStr3= AnsiString::StringOfChar('\t',3+ExtraTabs);
   \   00000034   032086E2           ADD      R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   FC008DE2           ADD      R0,SP,#+252
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     34              AnsiString TabStr4= AnsiString::StringOfChar('\t',4+ExtraTabs);
   \   00000044   042086E2           ADD      R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   460F8DE2           ADD      R0,SP,#+280
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     35              AnsiString TabStr5= AnsiString::StringOfChar('\t',5+ExtraTabs);
   \   00000054   052086E2           ADD      R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     36              AnsiString TabStr6= AnsiString::StringOfChar('\t',6+ExtraTabs);
   \   00000064   062086E2           ADD      R2,R6,#+6
     37              AnsiString LocalString;
     38              LocalString +=TabStr1+KeyWord(Type)+CrLfStr;
   \   00000068   B0619FE5           LDR      R6,??MakeConfigString_2  ;; CrLfStr
   \   0000006C   0910A0E3           MOV      R1,#+9
   \   00000070   540F8DE2           ADD      R0,SP,#+336
   \   00000074   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000080   A01094E5           LDR      R1,[R4, #+160]
   \   00000084   38008DE2           ADD      R0,SP,#+56
   \   00000088   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000008C   38208DE2           ADD      R2,SP,#+56
   \   00000090   C4108DE2           ADD      R1,SP,#+196
   \   00000094   1C008DE2           ADD      R0,SP,#+28
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   1C108DE2           ADD      R1,SP,#+28
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   ........           LDR      R0,??DataTable3  ;; ??npos
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   007090E5           LDR      R7,[R0, #+0]
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0730A0E1           MOV      R3,R7
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??append,??append??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   1C008DE2           ADD      R0,SP,#+28
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   38008DE2           ADD      R0,SP,#+56
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
     39              LocalString += AnalogInput::MakeConfigString();   //common
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   54108DE2           ADD      R1,SP,#+84
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000108   0730A0E1           MOV      R3,R7
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   54108DE2           ADD      R1,SP,#+84
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   ........           _BLF     ??append,??append??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   54008DE2           ADD      R0,SP,#+84
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
     40          
     41              LocalString +=TabStr1+KeyWord(C_AI_END)+CrLfStr;
   \   0000012C   9810A0E3           MOV      R1,#+152
   \   00000130   801E81E3           ORR      R1,R1,#0x800
   \   00000134   A8008DE2           ADD      R0,SP,#+168
   \   00000138   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000013C   A8208DE2           ADD      R2,SP,#+168
   \   00000140   C4108DE2           ADD      R1,SP,#+196
   \   00000144   8C008DE2           ADD      R0,SP,#+140
   \   00000148   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000014C   0620A0E1           MOV      R2,R6
   \   00000150   8C108DE2           ADD      R1,SP,#+140
   \   00000154   70008DE2           ADD      R0,SP,#+112
   \   00000158   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000015C   0730A0E1           MOV      R3,R7
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   70108DE2           ADD      R1,SP,#+112
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           _BLF     ??append,??append??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   70008DE2           ADD      R0,SP,#+112
   \   0000017C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   8C008DE2           ADD      R0,SP,#+140
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   A8008DE2           ADD      R0,SP,#+168
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
     42              LocalString += CrLfStr;
   \   000001A0   0730A0E1           MOV      R3,R7
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0610A0E1           MOV      R1,R6
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   ........           _BLF     ??append,??append??rA
     43          
     44              return(LocalString);
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   540F8DE2           ADD      R0,SP,#+336
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   4D0F8DE2           ADD      R0,SP,#+308
   \   000001D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   0110A0E3           MOV      R1,#+1
   \   000001DC   460F8DE2           ADD      R0,SP,#+280
   \   000001E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   FC008DE2           ADD      R0,SP,#+252
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   E0008DE2           ADD      R0,SP,#+224
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   C4008DE2           ADD      R0,SP,#+196
   \   00000210   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000214   5BDF8DE2           ADD      SP,SP,#+364
   \   00000218   F040BDE8           POP      {R4-R7,LR}
   \   0000021C   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000220   ........           DC32     CrLfStr
     45              //ConfigString.AddString(LocalString);
     46          }
     47          //---------------------------------------------------------------------------
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          bool AiWashTrackSensor::LoadConfigString(TSNConfigString &ConfigString)
     50          {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     51              bool NoError = true;
     52              int ErrorLine=0;
   \   00000004   6C819FE5           LDR      R8,??LoadConfigString_3  ;; `?<Constant "Washtrack sensor">`
   \   00000008   74D04DE2           SUB      SP,SP,#+116
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0170E0E1           MVN      R7,R1
     53              int Key;
     54              do {
     55                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   20108DE2           ADD      R1,SP,#+32
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     56                  if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0B00000A           BEQ      ??LoadConfigString_5
     57                      if ( ErrorLine != EOF ) {
   \   00000040   070050E1           CMP      R0,R7
   \   00000044   3D00000A           BEQ      ??LoadConfigString_6
     58                          GiveConfigWarning("Washtrack sensor",ErrorLine);
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000054   00109DE5           LDR      R1,[SP, #+0]
   \   00000058   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   330000EA           B        ??LoadConfigString_6
     59                      }
     60                  } else {
     61                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   ........           LDR      R0,??DataTable3  ;; ??npos
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   009090E5           LDR      R9,[R0, #+0]
   \   0000008C   20108DE2           ADD      R1,SP,#+32
   \   00000090   0930A0E1           MOV      R3,R9
   \   00000094   04008DE2           ADD      R0,SP,#+4
   \   00000098   ........           _BLF     ??assign,??assign??rA
   \   0000009C   04008DE2           ADD      R0,SP,#+4
   \   000000A0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A4   0060A0E1           MOV      R6,R0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   04008DE2           ADD      R0,SP,#+4
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     62                      switch ( Key ) {
   \   000000B8   980046E2           SUB      R0,R6,#+152
   \   000000BC   800E40E2           SUB      R0,R0,#+2048
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   0300008A           BHI      ??LoadConfigString_8
   \   000000C8   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000000CC   0010D1E7           LDRB     R1,[R1, R0]
   \   000000D0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000000D4   1A170000           DC8      +26,+23,+0,+0
     63                      default:
     64                          GiveConfigWarning("Washtrack sensor",InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_8:
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   3C008DE2           ADD      R0,SP,#+60
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0930A0E1           MOV      R3,R9
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   20108DE2           ADD      R1,SP,#+32
   \   000000F4   3C008DE2           ADD      R0,SP,#+60
   \   000000F8   ........           _BLF     ??assign,??assign??rA
   \   000000FC   0810A0E1           MOV      R1,R8
   \   00000100   58008DE2           ADD      R0,SP,#+88
   \   00000104   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000108   1C2095E5           LDR      R2,[R5, #+28]
   \   0000010C   3C108DE2           ADD      R1,SP,#+60
   \   00000110   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   3C008DE2           ADD      R0,SP,#+60
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   58008DE2           ADD      R0,SP,#+88
   \   00000130   CCFFFFEA           B        ??LoadConfigString_7
     65                          break;
     66                      case C_AI_START_COMMON:
     67                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_9:
   \   00000134   0510A0E1           MOV      R1,R5
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     68                          break;
     69                      case C_AI_END:
     70                          break;
     71                      }
     72                  }
     73              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_6:
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   20008DE2           ADD      R0,SP,#+32
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000150   00009DE5           LDR      R0,[SP, #+0]
   \   00000154   070050E1           CMP      R0,R7
   \   00000158   9800A013           MOVNE    R0,#+152
   \   0000015C   800E8013           ORRNE    R0,R0,#0x800
   \   00000160   00005611           CMPNE    R6,R0
   \   00000164   ADFFFF1A           BNE      ??LoadConfigString_4
     74              return(NoError);
   \   00000168   74D08DE2           ADD      SP,SP,#+116
   \   0000016C   F043BDE8           POP      {R4-R9,LR}
   \   00000170   0100A0E3           MOV      R0,#+1
   \   00000174   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_3:
   \   00000178   ........           DC32     `?<Constant "Washtrack sensor">`
     75          }
     76          //---------------------------------------------------------------------------
     77          
     78          
     79          ///////////////////////////////////////////////////////////////
     80          //
     81          // Routines for the librarian for input
     82          //
     83          ///////////////////////////////////////////////////////////////
     84          
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          int AiWashTrackSensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     87          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     88              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     89              switch ( ValueId ) {
     90              case SVT_AI_OFFSET   :
     91              case SVT_AI_CALC_VAL :
     92              default:
     93                  Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000034   ........           LDR      R0,??DataTable3  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   00012DE9           PUSH     {R8}
   \   00000058   0C308DE2           ADD      R3,SP,#+12
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000006C   0050A0E1           MOV      R5,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     94                  break;
     95              }
     96              if ( Status==E_NO_ERR ) {
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   0400001A           BNE      ??PutValue_2
     97                  SetModifiedFlag();
   \   0000008C   A41094E5           LDR      R1,[R4, #+164]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   541091E5           LDR      R1,[R1, #+84]
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   11FF2FE1           BX       R1
     98              }
     99              if ( UnitId ) {
   \                     ??PutValue_2:
   \   000000A0   000059E3           CMP      R9,#+0
    100                  *UnitId = ValUnitId;
   \   000000A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A8   00008915           STRNE    R0,[R9, #+0]
    101              }
    102              return(Status);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   20D08DE2           ADD      SP,SP,#+32
   \   000000B4   ........           B        ?Subroutine15
    103          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    104          

   \                                 In segment CODE, align 4, keep-with-next
    105          int  AiWashTrackSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    106          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   00C0A0E1           MOV      R12,R0
   \   00000010   0340A0E1           MOV      R4,R3
    107              int Status = GETVAL_NO_ERR;
   \   00000014   0070A0E3           MOV      R7,#+0
    108              switch ( ValueId ) {
   \   00000018   1B80A0E3           MOV      R8,#+27
   \   0000001C   0190A0E3           MOV      R9,#+1
   \   00000020   B50041E2           SUB      R0,R1,#+181
   \   00000024   400E40E2           SUB      R0,R0,#+1024
   \   00000028   030050E3           CMP      R0,#+3
   \   0000002C   0E00008A           BHI      ??GetValue_3
   \   00000030   013F8FE2           ADR      R3,??GetValue_1
   \   00000034   0030D3E7           LDRB     R3,[R3, R0]
   \   00000038   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetValue_1:
   \   0000003C   000B0B05           DC8      +0,+11,+11,+5
    109              case SVT_AI_OFFSET      :
    110                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000040   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_5:
   \   00000044   000084E5           STR      R0,[R4, #+0]
    111          		DecPnt     = 1;
   \   00000048   009085E5           STR      R9,[R5, #+0]
    112          		Unit       = REVOLUTIONS_UNIT;
   \   0000004C   008086E5           STR      R8,[R6, #+0]
   \   00000050   0C0000EA           B        ??GetValue_6
    113                  break;
    114              case SVT_AI_CALC_VAL    :
    115                  MyRetValue = Calculate();
   \                     ??GetValue_7:
   \   00000054   A4109CE5           LDR      R1,[R12, #+164]
   \   00000058   0C00A0E1           MOV      R0,R12
   \   0000005C   601091E5           LDR      R1,[R1, #+96]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
   \   00000068   F5FFFFEA           B        ??GetValue_5
    116          		DecPnt     = 1;
    117                  Unit       = REVOLUTIONS_UNIT;
    118                  break;
    119              default:
    120                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   0000006C   40002DE9           PUSH     {R6}
   \   00000070   20002DE9           PUSH     {R5}
   \   00000074   0430A0E1           MOV      R3,R4
   \   00000078   0C00A0E1           MOV      R0,R12
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   0070A0E1           MOV      R7,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    121                  break;
    122              }
    123              return(Status);
   \                     ??GetValue_6:
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C                      REQUIRE ?Subroutine15
   \   0000008C                      ;; // Fall through to label ?Subroutine15
    124          }
    125          

   \                                 In segment CODE, align 4, keep-with-next
    126          int AiWashTrackSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    127          {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    128              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    129              switch ( ValueId ) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0D00001A           BNE      ??GetStringValue_2
    130              case SVT_AI_UNIT:
    131                  {
    132                      int Unit = REVOLUTIONS_UNIT;
    133                      MyString = GetUnitName(Unit);
   \   00000018   1B10A0E3           MOV      R1,#+27
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000024   ........           LDR      R0,??DataTable3  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign,??assign??rA
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   010000EA           B        ??GetStringValue_3
    134                  }
    135                  break;
    136              default:
    137                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
    138                  break;
    139              }
    140              return(Status);
   \                     ??GetStringValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1CD08DE2           ADD      SP,SP,#+28
   \   00000060                      REQUIRE ?Subroutine14
   \   00000060                      ;; // Fall through to label ?Subroutine14
    141          }
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          int AiWashTrackSensor::PutFloatValue( int ValueId, float NewValue)
    144          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    145              return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine12
   \   00000008                      ;; // Fall through to label ?Subroutine12
    146          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    147          
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          void AiWashTrackSensor::NewValue(float NewValue)
    150          {
   \                     ??NewValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    151              HWFailure     = false;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0C01C4E5           STRB     R0,[R4, #+268]
    152              FilteredValue = FilterVal(FilteredValue, NewValue, 1);
   \   00000010   515FA0E3           MOV      R5,#+324
   \   00000014   040095E7           LDR      R0,[R5, +R4]
   \   00000018   FE25A0E3           MOV      R2,#+1065353216
   \   0000001C   ........           _BLF     ??FilterVal,??FilterVal??rA
   \   00000020   040085E7           STR      R0,[R5, +R4]
    153          }
   \   00000024   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
    154          float AiWashTrackSensor::Calculate(void)
    155          {
   \                     ??Calculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    156              if ( CanCalculate() ) {
   \   00000008   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??Calculate_1
    157                  CalcValue = Gain*FilteredValue-Offset;
   \   00000014   3C1194E5           LDR      R1,[R4, #+316]
   \   00000018   440194E5           LDR      R0,[R4, #+324]
   \   0000001C   ........           _BLF     __fMul,??__fMul??rA
   \   00000020   401194E5           LDR      R1,[R4, #+320]
   \   00000024   ........           _BLF     __fSub,??__fSub??rA
    158              } else {
    159                  CalcValue = 0.0;
   \                     ??Calculate_1:
   \   00000028   480184E5           STR      R0,[R4, #+328]
    160              }
    161              return(CalcValue);
   \   0000002C                      REQUIRE ?Subroutine13
   \   0000002C                      ;; // Fall through to label ?Subroutine13
    162          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Washtrack sensor">`:
   \   00000000   576173687472       DC8 "Washtrack sensor"
   \              61636B207365
   \              6E736F7200  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AiWashTrackSensor &AiWashTrackSensor::new AiWashTrackSensor()
   \                     `??new AiWashTrackSensor`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   590FA0E3           MOV      R0,#+356
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AiWashTrackSensor_1`
   \   00000014   ........           BL       ??AiWashTrackSensor
   \                     `??new AiWashTrackSensor_1`:
   \   00000018   ........           B        ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??npos
    163          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AiWashTrackSensor::AiWashTrackSensor()
                                        8
     AiWashTrackSensor::Calculate()     8
     AiWashTrackSensor::GetStringValue(int, int, AnsiString &)
                                       40
     AiWashTrackSensor::GetValue(int, int, float &, int &, int &)
                                       36
     AiWashTrackSensor::LoadConfigString(TSNConfigString &)
                                      144
     AiWashTrackSensor::MakeConfigString(int)
                                      384
     AiWashTrackSensor::NewValue(float)
                                       12
     AiWashTrackSensor::PutFloatValue(int, float)
                                        4
     AiWashTrackSensor::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AiWashTrackSensor::new AiWashTrackSensor()
                                        4
     AiWashTrackSensor::~AiWashTrackSensor()
                                       12
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     AiWashTrackSensor::AiWashTrackSensor()
                                      84
     ?Subroutine13                     8
     AiWashTrackSensor::~AiWashTrackSensor()
                                      48
     ?Subroutine14                     8
     AiWashTrackSensor::MakeConfigString(int)
                                     548
     AiWashTrackSensor::LoadConfigString(TSNConfigString &)
                                     380
     AiWashTrackSensor::PutValue(int, int, AnsiString, bool, int *)
                                     184
     ?Subroutine15                     8
     AiWashTrackSensor::GetValue(int, int, float &, int &, int &)
                                     140
     AiWashTrackSensor::GetStringValue(int, int, AnsiString &)
                                      96
     AiWashTrackSensor::PutFloatValue(int, float)
                                       8
     ?Subroutine12                     8
     AiWashTrackSensor::NewValue(float)
                                      40
     AiWashTrackSensor::Calculate()   44
     ?<Constant "Washtrack sensor">   20
     AiWashTrackSensor::new AiWashTrackSensor()
                                      28
     __sti__routine()                  4
     ??DataTable3                      4
      Others                         508

 
 2 168 bytes in segment CODE
   152 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 644 bytes of CODE  memory (+ 528 bytes shared)
   152 bytes of CONST memory

Errors: none
Warnings: none
