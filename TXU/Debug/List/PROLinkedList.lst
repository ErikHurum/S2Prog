##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:15:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROLinkedList.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\PROLinkedList.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROLinkedList.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROLinkedList.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROLinkedList.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_13:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_13
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          #ifndef S2TXU
      9          	#include <windows.h>
     10          	#include <process.h>
     11          #endif
     12          //---------------------------------------------------------------------------
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          PROLinkedList::~PROLinkedList(void)
     15          {
   \                     `?~PROLinkedList`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0F0000EA           B        `?~PROLinkedList_1`
     16          	while ( size>0 ) {
     17          		PRONode *temp = head->getNext();
   \                     `?~PROLinkedList_2`:
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   ........           _BLF     ??getNext,??getNext??rA
     18          		PRogramObjectBase *PROPtr = removeNode(temp);
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       ??removeNode
   \   00000020   0020A0E1           MOV      R2,R0
     19          		if ( CanDeleteProObj && PROPtr ) delete PROPtr;
   \   00000024   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   00005213           CMPNE    R2,#+0
   \   00000030   0500000A           BEQ      `?~PROLinkedList_1`
   \   00000034   0200A0E1           MOV      R0,R2
   \   00000038   A42092E5           LDR      R2,[R2, #+164]
   \   0000003C   0310A0E3           MOV      R1,#+3
   \   00000040   002092E5           LDR      R2,[R2, #+0]
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
     20          	}
   \                     `?~PROLinkedList_1`:
   \   0000004C   100094E5           LDR      R0,[R4, #+16]
   \   00000050   010050E3           CMP      R0,#+1
   \   00000054   ECFFFFAA           BGE      `?~PROLinkedList_2`
     21          	if ( WithProtection ) {
   \   00000058   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0100000A           BEQ      `?~PROLinkedList_3`
     22          		delete ListSema;
   \   00000064   040094E5           LDR      R0,[R4, #+4]
   \   00000068   ........           _BLF     `??delete ~ANCriticalSection`,`??delete ~ANCriticalSection??rA`
     23          	}
     24          	delete head;
   \                     `?~PROLinkedList_3`:
   \   0000006C   080094E5           LDR      R0,[R4, #+8]
   \   00000070   ........           _BLF     `??delete ~PRONode`,`??delete ~PRONode??rA`
     25          	delete tail;
   \   00000074   0C0094E5           LDR      R0,[R4, #+12]
   \   00000078   ........           _BLF     `??delete ~PRONode`,`??delete ~PRONode??rA`
     26          }
   \   0000007C                      REQUIRE ?Subroutine42
   \   0000007C                      ;; // Fall through to label ?Subroutine42

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine42:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          PROLinkedList::PROLinkedList(bool WProtection, bool CanDelete)
     29          {
   \                     ??PROLinkedList:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     30          	WithProtection  = WProtection;
   \   00000008   0010C4E5           STRB     R1,[R4, #+0]
     31          	CanDeleteProObj = CanDelete;
   \   0000000C   0120C4E5           STRB     R2,[R4, #+1]
     32          	Changed			= 0xffffffff;
   \   00000010   0000E0E3           MVN      R0,#+0
   \   00000014   140084E5           STR      R0,[R4, #+20]
     33          	if ( WithProtection ) {
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   0100000A           BEQ      ??PROLinkedList_1
     34          		ListSema = new ANCriticalSection;
   \   00000020   ........           _BLF     `??new ANCriticalSection`,`??new ANCriticalSection??rA`
   \   00000024   040084E5           STR      R0,[R4, #+4]
     35          	}
     36          	Compare = CompareElement;
   \                     ??PROLinkedList_1:
   \   00000028   A8009FE5           LDR      R0,??PROLinkedList_2  ;; ??CompareElement
     37          	Protect();
     38          	head = new PRONode();
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   180084E5           STR      R0,[R4, #+24]
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       ??Protect
   \   0000003C   0C00A0E3           MOV      R0,#+12
   \   00000040   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000044   0050B0E1           MOVS     R5,R0
   \   00000048   0100000A           BEQ      ??PROLinkedList_3
   \   0000004C   ........           _BLF     ??PRONode,??PRONode??rA
   \   00000050   000000EA           B        ??PROLinkedList_4
   \                     ??PROLinkedList_3:
   \   00000054   0050A0E3           MOV      R5,#+0
   \                     ??PROLinkedList_4:
   \   00000058   085084E5           STR      R5,[R4, #+8]
     39          	tail = new PRONode();
   \   0000005C   0C00A0E3           MOV      R0,#+12
   \   00000060   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000064   0050B0E1           MOVS     R5,R0
   \   00000068   0100000A           BEQ      ??PROLinkedList_5
   \   0000006C   ........           _BLF     ??PRONode,??PRONode??rA
   \   00000070   000000EA           B        ??PROLinkedList_6
   \                     ??PROLinkedList_5:
   \   00000074   0050A0E3           MOV      R5,#+0
   \                     ??PROLinkedList_6:
   \   00000078   0C5084E5           STR      R5,[R4, #+12]
     40          	head->setElement(NULL);
   \   0000007C   080094E5           LDR      R0,[R4, #+8]
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   ........           _BLF     ??setElement,??setElement??rA
     41          	head->setPrev(NULL);
   \   00000088   080094E5           LDR      R0,[R4, #+8]
   \   0000008C   0610A0E1           MOV      R1,R6
   \   00000090   ........           _BLF     ??setPrev,??setPrev??rA
     42          	head->setNext(tail);
   \   00000094   0C1094E5           LDR      R1,[R4, #+12]
   \   00000098   080094E5           LDR      R0,[R4, #+8]
   \   0000009C   ........           _BLF     ??setNext,??setNext??rA
     43          	tail->setElement(NULL);
   \   000000A0   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A4   0610A0E1           MOV      R1,R6
   \   000000A8   ........           _BLF     ??setElement,??setElement??rA
     44          	tail->setNext(NULL);
   \   000000AC   0C0094E5           LDR      R0,[R4, #+12]
   \   000000B0   0610A0E1           MOV      R1,R6
   \   000000B4   ........           _BLF     ??setNext,??setNext??rA
     45          	tail->setPrev(head);
   \   000000B8   081094E5           LDR      R1,[R4, #+8]
   \   000000BC   0C0094E5           LDR      R0,[R4, #+12]
   \   000000C0   ........           _BLF     ??setPrev,??setPrev??rA
     46          	size = 0;
   \   000000C4   106084E5           STR      R6,[R4, #+16]
     47          	UnProtect();
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           BL       ??UnProtect
     48          }
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           B        ??Subroutine40_0
   \                     ??PROLinkedList_2:
   \   000000D8   ........           DC32     ??CompareElement

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   ........           BL       ??UnProtect
   \   00000008   0600A0E1           MOV      R0,R6
   \                     ??Subroutine40_0:
   \   0000000C   7040BDE8           POP      {R4-R6,LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return
     49          
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void PROLinkedList::Protect(void)
     52          {
   \                     ??Protect:
   \   00000000   00402DE9           PUSH     {LR}
     53          	if ( this && WithProtection ) {
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0010D015           LDRBNE   R1,[R0, #+0]
   \   0000000C   00005113           CMPNE    R1,#+0
   \   00000010   0100000A           BEQ      ??Protect_1
     54          		ListSema->Acquire();
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   ........           _BLF     ??Acquire,??Acquire??rA
     55          	}
     56          }
   \                     ??Protect_1:
   \   0000001C   ........           B        ?Subroutine43

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          void PROLinkedList::UnProtect(void)
     59          {
   \                     ??UnProtect:
   \   00000000   00402DE9           PUSH     {LR}
     60          	if ( this && WithProtection ) {
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0010D015           LDRBNE   R1,[R0, #+0]
   \   0000000C   00005113           CMPNE    R1,#+0
   \   00000010   0100000A           BEQ      ??UnProtect_1
     61          		ListSema->Release();
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   ........           _BLF     ??Release,??Release??rA
     62          	}
     63          }
   \                     ??UnProtect_1:
   \   0000001C                      REQUIRE ?Subroutine43
   \   0000001C                      ;; // Fall through to label ?Subroutine43
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          int PROLinkedList::Size()
     66          {
     67          	int TmpSize=0;
   \                     ??Size:
   \   00000000   0010A0E3           MOV      R1,#+0
     68          	if ( this ) {
   \   00000004   000050E3           CMP      R0,#+0
     69          		TmpSize = size;
   \   00000008   10109015           LDRNE    R1,[R0, #+16]
     70          	}
     71          	return(TmpSize);
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   1EFF2FE1           BX       LR               ;; return
     72          }
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          bool PROLinkedList::isEmpty()
     75          {
     76          	if ( this ) {
   \                     ??isEmpty:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0500000A           BEQ      ??isEmpty_1
     77          		if ( (U32)this < 0x40000000 ) {
   \   00000008   400450E3           CMP      R0,#+1073741824
   \   0000000C   0300002A           BCS      ??isEmpty_1
     78          			bool IsEmpty = !size;
   \   00000010   100090E5           LDR      R0,[R0, #+16]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000A013           MOVNE    R0,#+0
     79          			return(IsEmpty);
   \   0000001C   1EFF2F11           BXNE     LR
     80          		} else {
     81          			return(true);
   \                     ??isEmpty_1:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1EFF2FE1           BX       LR               ;; return
     82          		}
     83          	} else {
     84          		return(true);
     85          	}
     86          }
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          void PROLinkedList::insertFirst(PRogramObjectBase *obj)
     89          {
   \                     ??insertFirst:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     90          	Protect ();
   \   0000000C   ........           BL       ??Protect
     91          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1100000A           BEQ      ??insertFirst_1
     92          		PRONode *second = head->getNext();
   \   0000001C   ........           _BLF     ??getNext,??getNext??rA
     93          		PRONode *first = new PRONode(obj, head, second);
   \   00000020   081094E5           LDR      R1,[R4, #+8]
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000034   0050A0E1           MOV      R5,R0
     94          		second->setPrev(first);
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??setPrev,??setPrev??rA
     95          		head->setNext(first);
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   ........           _BLF     ??setNext,??setNext??rA
     96          		size++;
   \   00000050   100094E5           LDR      R0,[R4, #+16]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   100084E5           STR      R0,[R4, #+16]
     97          		Changed=0xffffffff;
   \   0000005C   0000E0E3           MVN      R0,#+0
   \   00000060   140084E5           STR      R0,[R4, #+20]
     98          	}
     99          	UnProtect();
   \                     ??insertFirst_1:
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       ??UnProtect
    100          }
   \   0000006C   ........           B        ??Subroutine40_0
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          bool PROLinkedList::insertFirstIfUnique(PRogramObjectBase *obj)
    103          {
   \                     ??insertFirstIfUnique:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    104          	bool ObjIsUnique=false;
    105          	Protect ();
   \   0000000C   ........           BL       ??Protect
    106          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1800000A           BEQ      ??insertFirstIfUnique_1
    107          		if ( IsUnique(obj) ) {
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??IsUnique
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1300000A           BEQ      ??insertFirstIfUnique_1
    108          			ObjIsUnique = true;
    109          			PRONode *second = head->getNext();
   \   00000034   080094E5           LDR      R0,[R4, #+8]
   \   00000038   0150A0E3           MOV      R5,#+1
   \   0000003C   ........           _BLF     ??getNext,??getNext??rA
    110          			PRONode *first = new PRONode(obj, head, second);
   \   00000040   081094E5           LDR      R1,[R4, #+8]
   \   00000044   0070A0E1           MOV      R7,R0
   \   00000048   0720A0E1           MOV      R2,R7
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000054   0060A0E1           MOV      R6,R0
    111          			second->setPrev(first);
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   ........           _BLF     ??setPrev,??setPrev??rA
    112          			head->setNext(first);
   \   00000064   080094E5           LDR      R0,[R4, #+8]
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   ........           _BLF     ??setNext,??setNext??rA
    113          			size++;
   \   00000070   100094E5           LDR      R0,[R4, #+16]
   \   00000074   010080E2           ADD      R0,R0,#+1
   \   00000078   100084E5           STR      R0,[R4, #+16]
    114          			Changed=0xffffffff;
   \   0000007C   000065E2           RSB      R0,R5,#+0
   \   00000080   140084E5           STR      R0,[R4, #+20]
    115          		}
    116          	}
    117          	UnProtect();
   \                     ??insertFirstIfUnique_1:
   \   00000084   ........           B        ?Subroutine39
    118          	return(ObjIsUnique);
    119          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   ........           BL       ??UnProtect
   \   00000008   0500A0E1           MOV      R0,R5
   \                     ??Subroutine39_0:
   \   0000000C   F040BDE8           POP      {R4-R7,LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          void PROLinkedList::insertLast(PRogramObjectBase *obj)
    122          {
   \                     ??insertLast:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    123          	Protect ();
   \   0000000C   ........           BL       ??Protect
    124          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1200000A           BEQ      ??insertLast_1
    125          		PRONode *secondLast = tail->getPrev();
   \   0000001C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000020   ........           _BLF     ??getPrev,??getPrev??rA
    126          		PRONode *last = new PRONode(obj, secondLast, tail);
   \   00000024   0C2094E5           LDR      R2,[R4, #+12]
   \   00000028   0060A0E1           MOV      R6,R0
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000038   0050A0E1           MOV      R5,R0
    127          		secondLast->setNext(last);
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??setNext,??setNext??rA
    128          		tail->setPrev(last);
   \   00000048   0C0094E5           LDR      R0,[R4, #+12]
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   ........           _BLF     ??setPrev,??setPrev??rA
    129          		size++;
   \   00000054   100094E5           LDR      R0,[R4, #+16]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   100084E5           STR      R0,[R4, #+16]
    130          		Changed=0xffffffff;
   \   00000060   0000E0E3           MVN      R0,#+0
   \   00000064   140084E5           STR      R0,[R4, #+20]
    131          	}
    132          	UnProtect ();
   \                     ??insertLast_1:
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       ??UnProtect
    133          }
   \   00000070   ........           B        ??Subroutine40_0
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          bool PROLinkedList::insertLastIfUnique(PRogramObjectBase *obj)
    136          {
   \                     ??insertLastIfUnique:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    137          	bool ObjIsUnique=false;
    138          	Protect ();
   \   0000000C   ........           BL       ??Protect
    139          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1800000A           BEQ      ??insertLastIfUnique_1
    140          		if ( IsUnique(obj) ) {
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??IsUnique
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1300000A           BEQ      ??insertLastIfUnique_1
    141          			ObjIsUnique = true;
    142          			PRONode *secondLast = tail->getPrev();
   \   00000034   0C0094E5           LDR      R0,[R4, #+12]
   \   00000038   0150A0E3           MOV      R5,#+1
   \   0000003C   ........           _BLF     ??getPrev,??getPrev??rA
    143          			PRONode *last = new PRONode(obj, secondLast, tail);
   \   00000040   0C2094E5           LDR      R2,[R4, #+12]
   \   00000044   0070A0E1           MOV      R7,R0
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000054   0060A0E1           MOV      R6,R0
    144          			secondLast->setNext(last);
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   ........           _BLF     ??setNext,??setNext??rA
    145          			tail->setPrev(last);
   \   00000064   0C0094E5           LDR      R0,[R4, #+12]
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   ........           _BLF     ??setPrev,??setPrev??rA
    146          			size++;
   \   00000070   100094E5           LDR      R0,[R4, #+16]
   \   00000074   010080E2           ADD      R0,R0,#+1
   \   00000078   100084E5           STR      R0,[R4, #+16]
    147          			Changed=0xffffffff;
   \   0000007C   000065E2           RSB      R0,R5,#+0
   \   00000080   140084E5           STR      R0,[R4, #+20]
    148          		}
    149          	}
    150          	UnProtect ();
   \                     ??insertLastIfUnique_1:
   \   00000084                      REQUIRE ?Subroutine39
   \   00000084                      ;; // Fall through to label ?Subroutine39
    151          	return(ObjIsUnique);
    152          }
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          void PROLinkedList::insertInOrder(PRogramObjectBase *obj)
    155          {
   \                     ??insertInOrder:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    156          	Protect ();
   \   0000000C   ........           BL       ??Protect
    157          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1C00000A           BEQ      ??insertInOrder_1
    158          		PRONode *before = FindNodeBefore(obj);
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??FindNodeBefore
   \   00000028   0060B0E1           MOVS     R6,R0
    159          		if ( before ) {
   \   0000002C   1400000A           BEQ      ??insertInOrder_2
    160          			PRONode *after = before->getNext();
   \   00000030   ........           _BLF     ??getNext,??getNext??rA
   \   00000034   0070A0E1           MOV      R7,R0
    161          			PRONode *newNode = new PRONode(obj, before, after);
   \   00000038   0720A0E1           MOV      R2,R7
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000048   0050A0E1           MOV      R5,R0
    162          			before->setNext(newNode);
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           _BLF     ??setNext,??setNext??rA
    163          			if ( after )after->setPrev(newNode);
   \   00000058   000057E3           CMP      R7,#+0
   \   0000005C   0200000A           BEQ      ??insertInOrder_3
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     ??setPrev,??setPrev??rA
    164          			size++;
   \                     ??insertInOrder_3:
   \   0000006C   100094E5           LDR      R0,[R4, #+16]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   100084E5           STR      R0,[R4, #+16]
    165          			Changed=0xffffffff;
   \   00000078   0000E0E3           MVN      R0,#+0
   \   0000007C   140084E5           STR      R0,[R4, #+20]
   \   00000080   020000EA           B        ??insertInOrder_1
    166          		} else {
    167          			insertFirst(obj);
   \                     ??insertInOrder_2:
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       ??insertFirst
    168          		}
    169          	}
    170          	UnProtect ();
   \                     ??insertInOrder_1:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       ??UnProtect
    171          }
   \   00000098   ........           B        ??Subroutine39_0
    172          
    173          

   \                                 In segment CODE, align 4, keep-with-next
    174          bool PROLinkedList::insertInOrderIfUnique(PRogramObjectBase *obj)
    175          {
   \                     ??insertInOrderIfUnique:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    176          	bool ObjIsUnique=false;
    177          	Protect ();
   \   0000000C   ........           BL       ??Protect
    178          	if ( head ) {
   \   00000010   080094E5           LDR      R0,[R4, #+8]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2200000A           BEQ      ??insertInOrderIfUnique_1
    179          		if ( IsUnique (obj) ) {
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??IsUnique
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1D00000A           BEQ      ??insertInOrderIfUnique_1
    180          			ObjIsUnique = true;
   \   00000034   0150A0E3           MOV      R5,#+1
    181          			PRONode *before = FindNodeBefore(obj);
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       ??FindNodeBefore
   \   00000044   0070B0E1           MOVS     R7,R0
    182          			if ( before ) {
   \   00000048   1400000A           BEQ      ??insertInOrderIfUnique_2
    183          				PRONode *after = before->getNext();
   \   0000004C   ........           _BLF     ??getNext,??getNext??rA
   \   00000050   0080A0E1           MOV      R8,R0
    184          				PRONode *newNode = new PRONode(obj, before, after);
   \   00000054   0820A0E1           MOV      R2,R8
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   ........           _BLF     `??new PRONode`,`??new PRONode??rA`
   \   00000064   0060A0E1           MOV      R6,R0
    185          				before->setNext(newNode);
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   ........           _BLF     ??setNext,??setNext??rA
    186          				if ( after )after->setPrev(newNode);
   \   00000074   000058E3           CMP      R8,#+0
   \   00000078   0200000A           BEQ      ??insertInOrderIfUnique_3
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0800A0E1           MOV      R0,R8
   \   00000084   ........           _BLF     ??setPrev,??setPrev??rA
    187          				size++;
   \                     ??insertInOrderIfUnique_3:
   \   00000088   100094E5           LDR      R0,[R4, #+16]
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   100084E5           STR      R0,[R4, #+16]
    188          				Changed=0xffffffff;
   \   00000094   000065E2           RSB      R0,R5,#+0
   \   00000098   140084E5           STR      R0,[R4, #+20]
   \   0000009C   020000EA           B        ??insertInOrderIfUnique_1
    189          			} else {
    190          				insertFirst(obj);
   \                     ??insertInOrderIfUnique_2:
   \   000000A0   0610A0E1           MOV      R1,R6
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       ??insertFirst
    191          			}
    192          		}
    193          	}
    194          	UnProtect ();
   \                     ??insertInOrderIfUnique_1:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       ??UnProtect
    195          	return(ObjIsUnique);
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   ........           B        ??Subroutine38_0
    196          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine38:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??Protect
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??isEmpty
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1900001A           BNE      ??Subroutine38_1
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   ........           _BLF     ??getNext,??getNext??rA
   \   00000038   0060A0E1           MOV      R6,R0
   \   0000003C   0D0000EA           B        ??Subroutine38_2
   \                     ??Subroutine38_3:
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??getElement,??getElement??rA
   \   00000048   0080A0E1           MOV      R8,R0
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   ........           _BLF     ??ReadPermission,??ReadPermission??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0200000A           BEQ      ??Subroutine38_4
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \                     ??Subroutine38_4:
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   ........           _BLF     ??getNext,??getNext??rA
   \   00000070   0060A0E1           MOV      R6,R0
   \   00000074   017087E2           ADD      R7,R7,#+1
   \                     ??Subroutine38_2:
   \   00000078   100094E5           LDR      R0,[R4, #+16]
   \   0000007C   000057E1           CMP      R7,R0
   \   00000080   030000AA           BGE      ??Subroutine38_1
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   ........           _BLF     ??getElement,??getElement??rA
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   EAFFFF1A           BNE      ??Subroutine38_3
   \                     ??Subroutine38_1:
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       ??UnProtect
   \                     ??Subroutine38_0:
   \   0000009C   F041BDE8           POP      {R4-R8,LR}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
    197          

   \                                 In segment CODE, align 4, keep-with-next
    198          PRONode *PROLinkedList::getHead()
    199          {
    200          	return(head);
   \                     ??getHead:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    201          }
    202          

   \                                 In segment CODE, align 4, keep-with-next
    203          PRONode *PROLinkedList::getTail()
    204          {
    205          	return(tail);
   \                     ??getTail:
   \   00000000   0C0090E5           LDR      R0,[R0, #+12]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    206          }
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          PRogramObjectBase *PROLinkedList::operator[](int Index)
    209          {
   \                     `??operator[]`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    210          	Protect ();
   \   0000000C   ........           BL       ??Protect
    211          	PRogramObjectBase *Ptr = NULL;
   \   00000010   0060A0E3           MOV      R6,#+0
    212          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0D00001A           BNE      `??operator[]_1`
    213          		PRONode *curr = head->getNext();
   \   00000024   080094E5           LDR      R0,[R4, #+8]
   \   00000028   ........           _BLF     ??getNext,??getNext??rA
    214          		if ( Index < size ) {
   \   0000002C   101094E5           LDR      R1,[R4, #+16]
   \   00000030   010055E1           CMP      R5,R1
   \   00000034   080000AA           BGE      `??operator[]_1`
    215          			for ( int i = 0; i < Index && i<size; i++ ) {
   \   00000038   010000EA           B        `??operator[]_2`
    216          				curr = curr->getNext();
   \                     `??operator[]_3`:
   \   0000003C   ........           _BLF     ??getNext,??getNext??rA
    217          			}
   \   00000040   016086E2           ADD      R6,R6,#+1
   \                     `??operator[]_2`:
   \   00000044   050056E1           CMP      R6,R5
   \   00000048   101094B5           LDRLT    R1,[R4, #+16]
   \   0000004C   010056B1           CMPLT    R6,R1
   \   00000050   F9FFFFBA           BLT      `??operator[]_3`
    218          			Ptr = curr->getElement();
   \   00000054   ........           _BLF     ??getElement,??getElement??rA
   \   00000058   0060A0E1           MOV      R6,R0
    219          		}
    220          	}
    221          	UnProtect ();
   \                     `??operator[]_1`:
   \   0000005C   ........           B        ?Subroutine40
    222          	return(Ptr);
    223          }
    224          
    225          

   \                                 In segment CODE, align 4, keep-with-next
    226          PRogramObjectBase *PROLinkedList::removeFirst()
    227          {
   \                     ??removeFirst:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    228          	PRogramObjectBase *obj = NULL;
   \   00000008   0050A0E3           MOV      R5,#+0
    229          	Protect ();
   \   0000000C   ........           BL       ??Protect
    230          	if ( !isEmpty() ) {
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??isEmpty
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1400001A           BNE      ??removeFirst_1
    231          		PRONode *first = head->getNext();
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   ........           _BLF     ??getNext,??getNext??rA
   \   00000028   0060A0E1           MOV      R6,R0
    232          		obj = first->getElement();
   \   0000002C   ........           _BLF     ??getElement,??getElement??rA
   \   00000030   0050A0E1           MOV      R5,R0
    233          		PRONode *secondfirst = first->getNext();
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??getNext,??getNext??rA
   \   0000003C   0070A0E1           MOV      R7,R0
    234          		head->setNext(secondfirst);
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   ........           _BLF     ??setNext,??setNext??rA
    235          		secondfirst->setPrev(head);
   \   0000004C   081094E5           LDR      R1,[R4, #+8]
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           _BLF     ??setPrev,??setPrev??rA
    236          		delete(first);
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           _BLF     `??delete ~PRONode`,`??delete ~PRONode??rA`
    237          		size--;
   \   00000060   100094E5           LDR      R0,[R4, #+16]
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   100084E5           STR      R0,[R4, #+16]
    238          		Changed=0xffffffff;
   \   0000006C   0000E0E3           MVN      R0,#+0
   \   00000070   140084E5           STR      R0,[R4, #+20]
    239          	}
    240          	UnProtect ();
   \                     ??removeFirst_1:
   \   00000074   ........           B        ?Subroutine39
    241          	return(obj);
    242          }
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          PRogramObjectBase *PROLinkedList::removeLast()
    245          {
   \                     ??removeLast:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    246          	PRogramObjectBase *obj = NULL;
   \   00000008   0050A0E3           MOV      R5,#+0
    247          	Protect ();
   \   0000000C   ........           BL       ??Protect
    248          	if ( !isEmpty() ) {
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??isEmpty
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1400001A           BNE      ??removeLast_1
    249          		PRONode *last = tail->getPrev();
   \   00000020   0C0094E5           LDR      R0,[R4, #+12]
   \   00000024   ........           _BLF     ??getPrev,??getPrev??rA
   \   00000028   0060A0E1           MOV      R6,R0
    250          		obj = last->getElement();
   \   0000002C   ........           _BLF     ??getElement,??getElement??rA
   \   00000030   0050A0E1           MOV      R5,R0
    251          		PRONode *secondtolast = last->getPrev();
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??getPrev,??getPrev??rA
   \   0000003C   0070A0E1           MOV      R7,R0
    252          		tail->setPrev(secondtolast);
   \   00000040   0C0094E5           LDR      R0,[R4, #+12]
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   ........           _BLF     ??setPrev,??setPrev??rA
    253          		secondtolast->setNext(tail);
   \   0000004C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           _BLF     ??setNext,??setNext??rA
    254          		delete(last);
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           _BLF     `??delete ~PRONode`,`??delete ~PRONode??rA`
    255          		size--;
   \   00000060   100094E5           LDR      R0,[R4, #+16]
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   100084E5           STR      R0,[R4, #+16]
    256          		Changed=0xffffffff;
   \   0000006C   0000E0E3           MVN      R0,#+0
   \   00000070   140084E5           STR      R0,[R4, #+20]
    257          	}
    258          	UnProtect ();
   \                     ??removeLast_1:
   \   00000074   ........           B        ?Subroutine39
    259          	return(obj);
    260          }
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          PRogramObjectBase *PROLinkedList::removeNode(PRONode *n)
    263          {
   \                     ??removeNode:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    264          	PRogramObjectBase *obj = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    265          	Protect ();
   \   00000010   ........           BL       ??Protect
    266          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1500001A           BNE      ??removeNode_2
    267          		PRONode *prev = n->getPrev();
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??getPrev,??getPrev??rA
   \   0000002C   0060A0E1           MOV      R6,R0
    268          		PRONode *next = n->getNext();
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??getNext,??getNext??rA
   \   00000038   0070A0E1           MOV      R7,R0
    269          		prev->setNext(next);
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??setNext,??setNext??rA
    270          		next->setPrev(prev);
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??setPrev,??setPrev??rA
    271          		obj = n->getElement();
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           _BLF     ??getElement,??getElement??rA
   \   0000005C   0060A0E1           MOV      R6,R0
    272          		delete(n);
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     `??delete ~PRONode`,`??delete ~PRONode??rA`
    273          		size--;
   \   00000068   100094E5           LDR      R0,[R4, #+16]
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   100084E5           STR      R0,[R4, #+16]
    274          		Changed=0xffffffff;
   \   00000074   0000E0E3           MVN      R0,#+0
   \   00000078   140084E5           STR      R0,[R4, #+20]
    275          	}
    276          	UnProtect ();
   \                     ??removeNode_2:
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       ??UnProtect
    277          	return(obj);
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   ........           B        ??Subroutine39_0
    278          }
    279          

   \                                 In segment CODE, align 4, keep-with-next
    280          PRogramObjectBase* PROLinkedList::removeNode(PRogramObjectBase *obj)
    281          {
   \                     ??removeNode_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    282          	PRogramObjectBase *objPtr = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    283          	Protect ();
   \   00000010   ........           BL       ??Protect
    284          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0A00001A           BNE      ??removeNode_3
    285          		PRONode *NodePtr = FindNode(obj);
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??FindNode
    286          		if ( NodePtr ) {
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400000A           BEQ      ??removeNode_4
    287          			objPtr = removeNode(NodePtr);
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       ??removeNode
   \   00000044   0060A0E1           MOV      R6,R0
   \   00000048   000000EA           B        ??removeNode_3
    288          		} else {
    289          			objPtr = obj;
   \                     ??removeNode_4:
   \   0000004C   0560A0E1           MOV      R6,R5
    290          		}
    291          	}
    292          	UnProtect ();
   \                     ??removeNode_3:
   \   00000050                      REQUIRE ?Subroutine40
   \   00000050                      ;; // Fall through to label ?Subroutine40
    293          	return(objPtr);
    294          }
    295          

   \                                 In segment CODE, align 4, keep-with-next
    296          bool PROLinkedList::RemoveAllNodes(void)
    297          {
   \                     ??RemoveAllNodes:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    298          	bool IsOk = false;
   \   00000008   0050A0E3           MOV      R5,#+0
    299          	Protect ();
   \   0000000C   ........           BL       ??Protect
    300          	if ( !isEmpty() ) {
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??isEmpty
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1000001A           BNE      ??RemoveAllNodes_1
    301          		if ( size ) {
   \   00000020   100094E5           LDR      R0,[R4, #+16]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200001A           BNE      ??RemoveAllNodes_2
   \   0000002C   090000EA           B        ??RemoveAllNodes_3
    302          			PRogramObjectBase *obj;
    303          			do {
    304          				PRONode *curr = head->getNext();
    305          				obj = removeNode(curr);
    306          			}while ( size && obj );
   \                     ??RemoveAllNodes_4:
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0A00000A           BEQ      ??RemoveAllNodes_1
   \                     ??RemoveAllNodes_2:
   \   00000038   080094E5           LDR      R0,[R4, #+8]
   \   0000003C   ........           _BLF     ??getNext,??getNext??rA
   \   00000040   0010A0E1           MOV      R1,R0
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       ??removeNode
   \   0000004C   101094E5           LDR      R1,[R4, #+16]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F5FFFF1A           BNE      ??RemoveAllNodes_4
    307          		}
    308          		IsOk = (bool)!size;
   \                     ??RemoveAllNodes_3:
   \   00000058   100094E5           LDR      R0,[R4, #+16]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0150A003           MOVEQ    R5,#+1
    309          	}
    310          	UnProtect ();
   \                     ??RemoveAllNodes_1:
   \   00000064   ........           B        ?Subroutine41
    311          	return( IsOk );
    312          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   ........           BL       ??UnProtect
   \   00000008   0500A0E1           MOV      R0,R5
   \                     ??Subroutine41_0:
   \   0000000C   3040BDE8           POP      {R4,R5,LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return
    313          
    314          

   \                                 In segment CODE, align 4, keep-with-next
    315          PRogramObjectBase *PROLinkedList::FindElement(PRogramObjectBase *obj)
    316          {
   \                     ??FindElement:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    317          	PRogramObjectBase *FoundPtr = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    318          	Protect ();
   \   00000010   ........           BL       ??Protect
    319          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1C00001A           BNE      ??FindElement_1
    320          		PRONode *curr = head->getNext();
   \   00000024   080094E5           LDR      R0,[R4, #+8]
    321          		for ( int i = 0; !FoundPtr && i<size; i++ ) {
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   ........           _BLF     ??getNext,??getNext??rA
   \   00000030   0070A0E1           MOV      R7,R0
   \   00000034   040000EA           B        ??FindElement_2
    322          			int comp = Compare(obj, curr->getElement());
    323          			if ( comp == 0 ) {
    324          				FoundPtr = curr->getElement();
    325          			} else {
    326          				curr = curr->getNext();
   \                     ??FindElement_3:
   \   00000038   ........           _BLF     ??getNext,??getNext??rA
   \   0000003C   0070A0E1           MOV      R7,R0
    327          			}
   \                     ??FindElement_4:
   \   00000040   018088E2           ADD      R8,R8,#+1
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   1200001A           BNE      ??FindElement_1
   \                     ??FindElement_2:
   \   0000004C   100094E5           LDR      R0,[R4, #+16]
   \   00000050   000058E1           CMP      R8,R0
   \   00000054   0C0000AA           BGE      ??FindElement_5
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     ??getElement,??getElement??rA
   \   00000060   182094E5           LDR      R2,[R4, #+24]
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   12FF2FE1           BX       R2
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   EDFFFF1A           BNE      ??FindElement_3
   \   00000080   ........           _BLF     ??getElement,??getElement??rA
   \   00000084   0060A0E1           MOV      R6,R0
   \   00000088   ECFFFFEA           B        ??FindElement_4
    328          		}
    329          		if ( !FoundPtr ) {
    330          			FoundPtr = head->getElement();
   \                     ??FindElement_5:
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   ........           _BLF     ??getElement,??getElement??rA
   \   00000094   0060A0E1           MOV      R6,R0
    331          		}
    332          	}
    333          	UnProtect ();
   \                     ??FindElement_1:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ??UnProtect
    334          	return(FoundPtr);
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           B        ??Subroutine38_0
    335          }
    336          

   \                                 In segment CODE, align 4, keep-with-next
    337          PRogramObjectBase *PROLinkedList::getFirstElement(void)
    338          {
   \                     ??getFirstElement:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    339          	PRogramObjectBase *FoundPtr= NULL;
   \   00000008   0050A0E3           MOV      R5,#+0
    340          	Protect ();
   \   0000000C   ........           BL       ??Protect
    341          	if ( !isEmpty() ) {
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??isEmpty
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300001A           BNE      ??getFirstElement_1
    342          		FoundPtr = (head->getNext())->getElement();
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   ........           _BLF     ??getNext,??getNext??rA
   \   00000028   ........           _BLF     ??getElement,??getElement??rA
   \   0000002C   0050A0E1           MOV      R5,R0
    343          	}
    344          	UnProtect ();
   \                     ??getFirstElement_1:
   \   00000030                      REQUIRE ?Subroutine41
   \   00000030                      ;; // Fall through to label ?Subroutine41
    345          	return(FoundPtr);
    346          
    347          }
    348          

   \                                 In segment CODE, align 4, keep-with-next
    349          PRogramObjectBase *PROLinkedList::FindElementBefore(PRogramObjectBase *obj)
    350          {
   \                     ??FindElementBefore:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    351          	PRogramObjectBase *FoundPtr = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    352          	Protect ();
   \   00000010   ........           BL       ??Protect
    353          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1B00001A           BNE      ??FindElementBefore_1
    354          		PRONode *curr = head->getNext();
   \   00000024   080094E5           LDR      R0,[R4, #+8]
    355          		for ( int i = 0; !FoundPtr && i<size; i++ ) {
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   ........           _BLF     ??getNext,??getNext??rA
   \   00000030   0070A0E1           MOV      R7,R0
   \                     ??FindElementBefore_2:
   \   00000034   100094E5           LDR      R0,[R4, #+16]
   \   00000038   000058E1           CMP      R8,R0
   \   0000003C   140000AA           BGE      ??FindElementBefore_1
    356          			int comp = Compare(obj, curr->getElement());
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??getElement,??getElement??rA
   \   00000048   182094E5           LDR      R2,[R4, #+24]
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   12FF2FE1           BX       R2
    357          			if ( comp < 0 ) {
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0500004A           BMI      ??FindElementBefore_3
    358          
    359          			} else if ( comp == 0 ) {
   \   00000064   0400000A           BEQ      ??FindElementBefore_3
    360          				//Fault: same as earlier. handle later???
    361          			} else {
    362          				FoundPtr = (curr->getPrev())->getElement();
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   ........           _BLF     ??getPrev,??getPrev??rA
   \   00000070   ........           _BLF     ??getElement,??getElement??rA
   \   00000074   0060B0E1           MOVS     R6,R0
    363          			}
    364          			if ( !FoundPtr ) curr = curr->getNext();
   \   00000078   0200001A           BNE      ??FindElementBefore_4
   \                     ??FindElementBefore_3:
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   ........           _BLF     ??getNext,??getNext??rA
   \   00000084   0070A0E1           MOV      R7,R0
    365          		}
   \                     ??FindElementBefore_4:
   \   00000088   018088E2           ADD      R8,R8,#+1
   \   0000008C   000056E3           CMP      R6,#+0
   \   00000090   E7FFFF0A           BEQ      ??FindElementBefore_2
    366          	}
    367          	UnProtect ();
   \                     ??FindElementBefore_1:
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       ??UnProtect
    368          	return(FoundPtr);
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   ........           B        ??Subroutine38_0
    369          }
    370          

   \                                 In segment CODE, align 4, keep-with-next
    371          PRONode *PROLinkedList::FindNodeBefore(PRogramObjectBase *obj)
    372          {
   \                     ??FindNodeBefore:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    373          	PRONode *FoundPtr = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    374          	Protect ();
   \   00000010   ........           BL       ??Protect
    375          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   2000001A           BNE      ??FindNodeBefore_1
    376          		PRONode *curr = head->getNext();
   \   00000024   080094E5           LDR      R0,[R4, #+8]
   \                     ??FindNodeBefore_2:
   \   00000028   ........           _BLF     ??getNext,??getNext??rA
   \   0000002C   0070A0E1           MOV      R7,R0
    377          		int count = 0;
   \                     ??FindNodeBefore_3:
   \   00000030   100094E5           LDR      R0,[R4, #+16]
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   170000BA           BLT      ??FindNodeBefore_4
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   ........           _BLF     ??getElement,??getElement??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1300000A           BEQ      ??FindNodeBefore_4
    378          		while ( !FoundPtr && count<size && curr->getElement() ) {
    379          			int comp = Compare(obj, curr->getElement());
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??getElement,??getElement??rA
   \   00000054   182094E5           LDR      R2,[R4, #+24]
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   12FF2FE1           BX       R2
    380          			if ( comp < 0 ) {
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0300005A           BPL      ??FindNodeBefore_5
    381          				FoundPtr = curr->getPrev();
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   ........           _BLF     ??getPrev,??getPrev??rA
   \   00000078   0060A0E1           MOV      R6,R0
   \   0000007C   010000EA           B        ??FindNodeBefore_6
    382          			} else if ( comp == 0 ) {
   \                     ??FindNodeBefore_5:
   \   00000080   0300001A           BNE      ??FindNodeBefore_7
    383          				FoundPtr = curr;
   \   00000084   0760A0E1           MOV      R6,R7
    384          			} else {
   \                     ??FindNodeBefore_6:
   \   00000088   000056E3           CMP      R6,#+0
   \   0000008C   0500001A           BNE      ??FindNodeBefore_1
   \   00000090   E6FFFFEA           B        ??FindNodeBefore_3
    385          				//Go on:
    386          				curr = curr->getNext();
   \                     ??FindNodeBefore_7:
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   E2FFFFEA           B        ??FindNodeBefore_2
    387          			}
    388          		}
    389          		if ( !FoundPtr ) {
    390          			FoundPtr = tail->getPrev();
   \                     ??FindNodeBefore_4:
   \   0000009C   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A0   ........           _BLF     ??getPrev,??getPrev??rA
   \   000000A4   0060A0E1           MOV      R6,R0
    391          		}
    392          	}
    393          	UnProtect();
   \                     ??FindNodeBefore_1:
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           BL       ??UnProtect
    394          	return(FoundPtr);
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           B        ??Subroutine39_0
    395          }
    396          

   \                                 In segment CODE, align 4, keep-with-next
    397          int PROLinkedList::CompareElement(PRogramObjectBase *obj1, PRogramObjectBase *obj2)
    398          {
    399          	if ( !obj2 )return(0);
   \                     ??CompareElement:
   \   00000000   000051E3           CMP      R1,#+0
   \   00000004   0500000A           BEQ      ??CompareElement_1
    400          	int temp;
    401          	if ( obj1->SortNo > obj2->SortNo ) {
   \   00000008   980090E5           LDR      R0,[R0, #+152]
   \   0000000C   981091E5           LDR      R1,[R1, #+152]
   \   00000010   000051E1           CMP      R1,R0
    402          		temp = 1;
   \   00000014   0100A0B3           MOVLT    R0,#+1
   \   00000018   1EFF2FB1           BXLT     LR
    403          	} else if ( obj1->SortNo == obj2->SortNo ) {
   \   0000001C   0100001A           BNE      ??CompareElement_2
    404          		temp = 0;
   \                     ??CompareElement_1:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1EFF2FE1           BX       LR
    405          	} else {
    406          		temp = -1;
   \                     ??CompareElement_2:
   \   00000028   0000E0E3           MVN      R0,#+0
    407          	}
    408          
    409          	return(temp);
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    410          }
    411          
    412          

   \                                 In segment CODE, align 4, keep-with-next
    413          bool PROLinkedList::IsUnique(PRogramObjectBase *obj)
    414          {
   \                     ??IsUnique:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    415          	if ( isEmpty() )return(true);
   \   0000000C   ........           BL       ??isEmpty
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100A013           MOVNE    R0,#+1
   \   00000018   1700001A           BNE      ??IsUnique_1
    416          	bool StatusIsUnique=true;
    417          	PRONode *curr = head->getNext();
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   0160A0E3           MOV      R6,#+1
   \   00000024   ........           _BLF     ??getNext,??getNext??rA
   \   00000028   0070A0E1           MOV      R7,R0
    418          	for ( int i = 0; StatusIsUnique && i<size; i++ ) {
   \   0000002C   0080A0E3           MOV      R8,#+0
   \                     ??IsUnique_2:
   \   00000030   100094E5           LDR      R0,[R4, #+16]
   \   00000034   000058E1           CMP      R8,R0
   \   00000038   0E0000AA           BGE      ??IsUnique_3
    419          		if ( IsEqual(obj, curr->getElement()) ) {
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   ........           _BLF     ??getElement,??getElement??rA
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       ??IsEqual
   \   00000054   000050E3           CMP      R0,#+0
    420          			StatusIsUnique = false;
   \   00000058   0060A013           MOVNE    R6,#+0
   \   0000005C   0200001A           BNE      ??IsUnique_4
    421          		} else {
    422          			curr = curr->getNext();
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           _BLF     ??getNext,??getNext??rA
   \   00000068   0070A0E1           MOV      R7,R0
    423          		}
    424          	}
   \                     ??IsUnique_4:
   \   0000006C   018088E2           ADD      R8,R8,#+1
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   EDFFFF1A           BNE      ??IsUnique_2
    425          	return(StatusIsUnique);
   \                     ??IsUnique_3:
   \   00000078   0600A0E1           MOV      R0,R6
   \                     ??IsUnique_1:
   \   0000007C   ........           B        ??Subroutine38_0
    426          }
    427          

   \                                 In segment CODE, align 4, keep-with-next
    428          bool PROLinkedList::IsEqual(PRogramObjectBase *obj1, PRogramObjectBase *obj2)
    429          {
   \                     ??IsEqual:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
    430          	if ( isEmpty()||!obj2 )return(false);
   \   0000000C   ........           BL       ??isEmpty
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0600001A           BNE      ??IsEqual_1
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   0400000A           BEQ      ??IsEqual_1
    431          	bool Result = (obj1->IDNumber == obj2->IDNumber);
   \   00000020   9C0094E5           LDR      R0,[R4, #+156]
   \   00000024   9C1095E5           LDR      R1,[R5, #+156]
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   0000000A           BEQ      ??IsEqual_2
   \                     ??IsEqual_1:
   \   00000034   0000A0E3           MOV      R0,#+0
    432          	return(Result);
   \                     ??IsEqual_2:
   \   00000038   ........           B        ??Subroutine41_0
    433          }
    434          
    435          // Need external protection anyway, so no local protection

   \                                 In segment CODE, align 4, keep-with-next
    436          PRONode *PROLinkedList::FindNode(PRogramObjectBase *obj)
    437          {
   \                     ??FindNode:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    438          	PRONode *FoundPtr = NULL;
   \   0000000C   0060A0E3           MOV      R6,#+0
    439          	Protect ();
   \   00000010   ........           BL       ??Protect
    440          	if ( !isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??isEmpty
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1A00001A           BNE      ??FindNode_1
    441          		PRONode *curr = head->getNext();
   \   00000024   080094E5           LDR      R0,[R4, #+8]
    442          		int count = 0;
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   ........           _BLF     ??getNext,??getNext??rA
   \   00000030   0070A0E1           MOV      R7,R0
   \   00000034   010000EA           B        ??FindNode_2
    443          		while ( !FoundPtr && count<size && curr->getElement() ) {
    444          			if ( IsEqual(obj, curr->getElement()) ) {
    445          				FoundPtr = curr;
   \                     ??FindNode_3:
   \   00000038   0760B0E1           MOVS     R6,R7
    446          			} else {
   \   0000003C   1300001A           BNE      ??FindNode_1
   \                     ??FindNode_2:
   \   00000040   100094E5           LDR      R0,[R4, #+16]
   \   00000044   000058E1           CMP      R8,R0
   \   00000048   100000AA           BGE      ??FindNode_1
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??getElement,??getElement??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0C00000A           BEQ      ??FindNode_1
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   ........           _BLF     ??getElement,??getElement??rA
   \   00000064   0020A0E1           MOV      R2,R0
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       ??IsEqual
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   EEFFFF1A           BNE      ??FindNode_3
    447          				curr = curr->getNext();
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   ........           _BLF     ??getNext,??getNext??rA
   \   00000084   0070A0E1           MOV      R7,R0
    448          				count++;
   \   00000088   018088E2           ADD      R8,R8,#+1
   \   0000008C   EBFFFFEA           B        ??FindNode_2
    449          			}
    450          		}
    451          	}
    452          	UnProtect ();
   \                     ??FindNode_1:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       ??UnProtect
    453          	return(FoundPtr);
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   ........           B        ??Subroutine38_0
    454          }
    455          

   \                                 In segment CODE, align 4, keep-with-next
    456          set<PRogramObjectBase*> PROLinkedList::ConvertToSet(void)
    457          {
   \                     ??ConvertToSet:
   \   00000000   F7402DE9           PUSH     {R0-R2,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    458          	set<PRogramObjectBase*>ListSet;
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000020   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000024   1400C5E5           STRB     R0,[R5, #+20]
    459          	Protect ();
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??Protect
    460          	if ( !isEmpty() ) {
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       ??isEmpty
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1500001A           BNE      ??ConvertToSet_1
    461          		PRONode *curr = head->getNext();
   \   00000040   080094E5           LDR      R0,[R4, #+8]
    462          		for ( int count= 0; count < size && curr->getElement(); count++ ) {
   \   00000044   0070A0E3           MOV      R7,#+0
   \   00000048   ........           _BLF     ??getNext,??getNext??rA
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   090000EA           B        ??ConvertToSet_2
    463          			PRogramObjectBase *tmpPtr = curr->getElement();
   \                     ??ConvertToSet_3:
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??getElement,??getElement??rA
    464          			ListSet.insert(tmpPtr);
   \   0000005C   0020A0E1           MOV      R2,R0
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   04008DE2           ADD      R0,SP,#+4
   \   00000068   ........           _BLF     ??insert,??insert??rA
    465          			curr = curr->getNext();
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           _BLF     ??getNext,??getNext??rA
   \   00000074   0060A0E1           MOV      R6,R0
    466          		}
   \   00000078   017087E2           ADD      R7,R7,#+1
   \                     ??ConvertToSet_2:
   \   0000007C   100094E5           LDR      R0,[R4, #+16]
   \   00000080   000057E1           CMP      R7,R0
   \   00000084   030000AA           BGE      ??ConvertToSet_1
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           _BLF     ??getElement,??getElement??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   EEFFFF1A           BNE      ??ConvertToSet_3
    467          	}
    468          	UnProtect ();
   \                     ??ConvertToSet_1:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ??UnProtect
    469          	return(ListSet);
   \   000000A0   F740BDE8           POP      {R0-R2,R4-R7,LR}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
    470          }
    471          
    472          
    473          

   \                                 In segment CODE, align 4, keep-with-next
    474          vector<PRogramObjectBase*> PROLinkedList::GetVector(void)
    475          {
   \                     ??GetVector:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    476          	vector<PRogramObjectBase*>ListVector;
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
    477          	Protect ();
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??Protect
    478          	if ( !isEmpty() ) {
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??isEmpty
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1400001A           BNE      ??GetVector_2
    479          		PRONode *curr = head->getNext();
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
    480          		for ( int count= 0; count < size && curr->getElement(); count++ ) {
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   ........           _BLF     ??getNext,??getNext??rA
   \   00000038   0060A0E1           MOV      R6,R0
   \   0000003C   080000EA           B        ??GetVector_3
    481          			PRogramObjectBase *tmpPtr = curr->getElement();
   \                     ??GetVector_4:
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??getElement,??getElement??rA
    482          			ListVector.push_back(tmpPtr);
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    483          			curr = curr->getNext();
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??getNext,??getNext??rA
   \   0000005C   0060A0E1           MOV      R6,R0
    484          		}
   \   00000060   017087E2           ADD      R7,R7,#+1
   \                     ??GetVector_3:
   \   00000064   100094E5           LDR      R0,[R4, #+16]
   \   00000068   000057E1           CMP      R7,R0
   \   0000006C   030000AA           BGE      ??GetVector_2
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           _BLF     ??getElement,??getElement??rA
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   EFFFFF1A           BNE      ??GetVector_4
    485          	}
    486          	UnProtect ();
   \                     ??GetVector_2:
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       ??UnProtect
    487          	return(ListVector);
   \   00000088   ........           B        ??Subroutine39_0
    488          }
    489          

   \                                 In segment CODE, align 4, keep-with-next
    490          vector<PRogramObjectBase*> PROLinkedList::GetVector(PROLinkedList *PROList)
    491          {
   \                     ??GetVector_1:
   \   00000000   37402DE9           PUSH     {R0-R2,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    492          	vector<PRogramObjectBase*>ListVector;
   \   0000000C   ........           _BLF     ??_Zero,??_Zero??rA
    493          	if ( PROList ) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0900000A           BEQ      ??GetVector_5
    494          		ListVector = PROList->GetVector();
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       ??GetVector
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Zero,??_Zero??rA
    495          	}
    496          	return (ListVector);
   \                     ??GetVector_5:
   \   00000040   3740BDE8           POP      {R0-R2,R4,R5,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
    497          }
    498          

   \                                 In segment CODE, align 4, keep-with-next
    499          vector<PRogramObjectBase*> PROLinkedList::GetReadPermissionVector(unsigned IDNum)
   \                     ??GetReadPermissionVector:
   \   00000000   ........           B        ?Subroutine38
    500          {
    501          	vector<PRogramObjectBase*>ListVector;
    502          	Protect ();
    503          	if ( !isEmpty() ) {
    504          		PRONode *curr = head->getNext();
    505          		for ( int count= 0; count < size && curr->getElement(); count++ ) {
    506          			PRogramObjectBase *tmpPtr = curr->getElement();
    507          			if ( tmpPtr->ReadPermission() ) {
    508          				ListVector.push_back(tmpPtr);
    509          			}
    510          			curr = curr->getNext();
    511          		}
    512          	}
    513          	UnProtect ();
    514          	return(ListVector);
    515          }
    516          

   \                                 In segment CODE, align 4, keep-with-next
    517          vector<PRogramObjectBase*> PROLinkedList::GetWritePermissionVector(unsigned IDNum)
   \                     ??GetWritePermissionVector:
   \   00000000                      REQUIRE ?Subroutine38
   \   00000000                      ;; // Fall through to label ?Subroutine38
    518          {
    519          	vector<PRogramObjectBase*>ListVector;
    520          	Protect ();
    521          	if ( !isEmpty() ) {
    522          		PRONode *curr = head->getNext();
    523          		for ( int count= 0; count < size && curr->getElement(); count++ ) {
    524          			PRogramObjectBase *tmpPtr = curr->getElement();
    525          			if ( tmpPtr->ReadPermission() ) {
    526          				ListVector.push_back(tmpPtr);
    527          			}
    528          			curr = curr->getNext();
    529          		}
    530          	}
    531          	UnProtect ();
    532          	return(ListVector);
    533          }
    534          

   \                                 In segment CODE, align 4, keep-with-next
    535          vector<PRogramObjectBase*> PROLinkedList::GetReadPermissionVector(PROLinkedList *PROList, unsigned IDNum)
    536          {
   \                     ??GetReadPermissionVector_1:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    537          	vector<PRogramObjectBase*>ListVector;
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
    538          	if ( PROList ) {
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   0A00000A           BEQ      ??GetReadPermissionVector_2
    539          		ListVector = PROList->GetReadPermissionVector(IDNum);
   \   0000001C   0620A0E1           MOV      R2,R6
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       ??GetReadPermissionVector
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
    540          	}
    541          	return (ListVector);
   \                     ??GetReadPermissionVector_2:
   \   00000048   ........           B        ?Subroutine44
    542          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine44:
   \   00000000   7740BDE8           POP      {R0-R2,R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    543          vector<PRogramObjectBase*> PROLinkedList::GetWritePermissionVector(PROLinkedList *PROList, unsigned IDNum)
    544          {
   \                     ??GetWritePermissionVector_1:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    545          	vector<PRogramObjectBase*>ListVector;
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
    546          	if ( PROList ) {
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   0A00000A           BEQ      ??GetWritePermissionVector_2
    547          		ListVector = PROList->GetWritePermissionVector(IDNum);
   \   0000001C   0620A0E1           MOV      R2,R6
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       ??GetWritePermissionVector
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
    548          	}
    549          	return (ListVector);
   \                     ??GetWritePermissionVector_2:
   \   00000048                      REQUIRE ?Subroutine44
   \   00000048                      ;; // Fall through to label ?Subroutine44
    550          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void PROLinkedList::delete ~PROLinkedList(PROLinkedList *)
   \                     `??delete ~PROLinkedList`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~PROLinkedList_1`
   \   0000000C   ........           BL       `?~PROLinkedList`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~PROLinkedList_1`:
   \   00000018   ........           B        ?Subroutine42

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROLinkedList &PROLinkedList::new PROLinkedList(bool, bool)
   \                     `??new PROLinkedList`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   1C00A0E3           MOV      R0,#+28
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROLinkedList_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROLinkedList
   \                     `??new PROLinkedList_1`:
   \   00000028   ........           B        ??Subroutine41_0
    551          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROLinkedList::CompareElement(PRogramObjectBase *, PRogramObjectBase *)
                                        0
     PROLinkedList::ConvertToSet()     32
     PROLinkedList::FindElement(PRogramObjectBase *)
                                       24
     PROLinkedList::FindElementBefore(PRogramObjectBase *)
                                       24
     PROLinkedList::FindNode(PRogramObjectBase *)
                                       24
     PROLinkedList::FindNodeBefore(PRogramObjectBase *)
                                       20
     PROLinkedList::GetReadPermissionVector(PROLinkedList *, unsigned int)
                                       28
     PROLinkedList::GetReadPermissionVector(unsigned int)
                                       24
     PROLinkedList::GetVector()        20
     PROLinkedList::GetVector(PROLinkedList *)
                                       24
     PROLinkedList::GetWritePermissionVector(PROLinkedList *, unsigned int)
                                       28
     PROLinkedList::GetWritePermissionVector(unsigned int)
                                       24
     PROLinkedList::IsEqual(PRogramObjectBase *, PRogramObjectBase *)
                                       12
     PROLinkedList::IsUnique(PRogramObjectBase *)
                                       24
     PROLinkedList::PROLinkedList(bool, bool)
                                       16
     PROLinkedList::Protect()           4
     PROLinkedList::RemoveAllNodes()
                                       12
     PROLinkedList::Size()              0
     PROLinkedList::UnProtect()         4
     PROLinkedList::delete ~PROLinkedList(PROLinkedList *)
                                        8
     PROLinkedList::getFirstElement()
                                       12
     PROLinkedList::getHead()           0
     PROLinkedList::getTail()           0
     PROLinkedList::insertFirst(PRogramObjectBase *)
                                       16
     PROLinkedList::insertFirstIfUnique(PRogramObjectBase *)
                                       20
     PROLinkedList::insertInOrder(PRogramObjectBase *)
                                       20
     PROLinkedList::insertInOrderIfUnique(PRogramObjectBase *)
                                       24
     PROLinkedList::insertLast(PRogramObjectBase *)
                                       16
     PROLinkedList::insertLastIfUnique(PRogramObjectBase *)
                                       20
     PROLinkedList::isEmpty()           0
     PROLinkedList::new PROLinkedList(bool, bool)
                                       12
     PROLinkedList::operator[](int)    16
     PROLinkedList::removeFirst()      20
     PROLinkedList::removeLast()       20
     PROLinkedList::removeNode(PRONode *)
                                       20
     PROLinkedList::removeNode(PRogramObjectBase *)
                                       16
     PROLinkedList::~PROLinkedList()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                       20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                     224
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     PROLinkedList::~PROLinkedList()
                                     124
     ?Subroutine42                     8
     PROLinkedList::PROLinkedList(bool, bool)
                                     220
     ?Subroutine40                    20
     PROLinkedList::Protect()         32
     ?Subroutine43                     8
     PROLinkedList::UnProtect()       28
     PROLinkedList::Size()            20
     PROLinkedList::isEmpty()         40
     PROLinkedList::insertFirst(PRogramObjectBase *)
                                     112
     PROLinkedList::insertFirstIfUnique(PRogramObjectBase *)
                                     136
     ?Subroutine39                    20
     PROLinkedList::insertLast(PRogramObjectBase *)
                                     116
     PROLinkedList::insertLastIfUnique(PRogramObjectBase *)
                                     132
     PROLinkedList::insertInOrder(PRogramObjectBase *)
                                     156
     PROLinkedList::insertInOrderIfUnique(PRogramObjectBase *)
                                     188
     ?Subroutine38                   164
     PROLinkedList::getHead()          8
     PROLinkedList::getTail()          8
     PROLinkedList::operator[](int)   96
     PROLinkedList::removeFirst()    120
     PROLinkedList::removeLast()     120
     PROLinkedList::removeNode(PRONode *)
                                     140
     PROLinkedList::removeNode(PRogramObjectBase *)
                                      80
     PROLinkedList::RemoveAllNodes()
                                     104
     ?Subroutine41                    20
     PROLinkedList::FindElement(PRogramObjectBase *)
                                     168
     PROLinkedList::getFirstElement()
                                      48
     PROLinkedList::FindElementBefore(PRogramObjectBase *)
                                     164
     PROLinkedList::FindNodeBefore(PRogramObjectBase *)
                                     184
     PROLinkedList::CompareElement(PRogramObjectBase *, PRogramObjectBase *)
                                      48
     PROLinkedList::IsUnique(PRogramObjectBase *)
                                     128
     PROLinkedList::IsEqual(PRogramObjectBase *, PRogramObjectBase *)
                                      60
     PROLinkedList::FindNode(PRogramObjectBase *)
                                     160
     PROLinkedList::ConvertToSet()   168
     PROLinkedList::GetVector()      140
     PROLinkedList::GetVector(PROLinkedList *)
                                      72
     PROLinkedList::GetReadPermissionVector(unsigned int)
                                       4
     PROLinkedList::GetWritePermissionVector(unsigned int)
                                       0
     PROLinkedList::GetReadPermissionVector(PROLinkedList *, unsigned int)
                                      76
     ?Subroutine44                     8
     PROLinkedList::GetWritePermissionVector(PROLinkedList *, unsigned int)
                                      72
     PROLinkedList::delete ~PROLinkedList(PROLinkedList *)
                                      28
     __sti__routine()                  4
     PROLinkedList::new PROLinkedList(bool, bool)
                                      44
      Others                         540

 
 5 944 bytes in segment CODE
     4 bytes in segment DIFUNCT
 
 3 800 bytes of CODE memory (+ 2 148 bytes shared)

Errors: none
Warnings: none
