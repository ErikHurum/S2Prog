##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmOverfill.Cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmOverfill.Cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmOverfill.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmOverfill.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmOverfill.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmOverfill::~AlarmOverfill()
   \                     `?~AlarmOverfill`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmOverfill_1`
   \   00000014   0100000A           BEQ      `?~AlarmOverfill_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmOverfill_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmOverfill_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmOverfill_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmOverfill::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmOverfill::AlarmOverfill(PRogramObjectBase *PROPtr,float Lim, bool Lock) :AlarmBasic(PROPtr)
   \                     ??AlarmOverfill:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
     11          {
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   64009FE5           LDR      R0,??AlarmOverfill_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     12          	PROPointer = PROPtr;
     13          	PROTankPtr = (PROTank*)PROPtr;
     14          	NumberOfAlarmSettings++;
   \   00000020   60009FE5           LDR      R0,??AlarmOverfill_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   C47084E5           STR      R7,[R4, #+196]
   \   00000028   EC7084E5           STR      R7,[R4, #+236]
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   001080E5           STR      R1,[R0, #+0]
     15          	IDNumber            =  (ID_AL_OVERFILL << 16)+NumberOfAlarmSettings;
   \   00000038   B006A0E3           MOV      R0,#+184549376
   \   0000003C   C20880E3           ORR      R0,R0,#0xC20000
   \   00000040   010080E0           ADD      R0,R0,R1
   \   00000044   9C0084E5           STR      R0,[R4, #+156]
     16          	Type                = ID_AL_OVERFILL;
   \   00000048   C200A0E3           MOV      R0,#+194
   \   0000004C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000050   A00084E5           STR      R0,[R4, #+160]
     17          	Limit               = Lim;
     18          	Locked              = Lock;
     19          	Deadband            = 0.1;
   \   00000054   30009FE5           LDR      R0,??AlarmOverfill_1+0x8  ;; 0x3dcccccd
   \   00000058   E45084E5           STR      R5,[R4, #+228]
   \   0000005C   E860C4E5           STRB     R6,[R4, #+232]
   \   00000060   BC0084E5           STR      R0,[R4, #+188]
     20          	MessageKey          = L_WORD109;	// Overfill
   \   00000064   6D00A0E3           MOV      R0,#+109
   \   00000068   B80084E5           STR      R0,[R4, #+184]
     21          	TPCMessageKey       = L_WORD534;	// OFill
   \   0000006C   1600A0E3           MOV      R0,#+22
   \   00000070   800F80E3           ORR      R0,R0,#0x200
   \   00000074   B40084E5           STR      R0,[R4, #+180]
     22          }
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   F040BDE8           POP      {R4-R7,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmOverfill_1:
   \   00000084   ........           DC32     ??__vtbl
   \   00000088   ........           DC32     ??NumberOfAlarmSettings
   \   0000008C   CDCCCC3D           DC32     0x3dcccccd
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void AlarmOverfill::Check(void)
     25          {
   \                     ??Check:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     26          	int Status = AL_STAT_IN_DEADBAND;
     27          	if ( PROTankPtr->HasLevelSensors ) {
   \   00000004   84609FE5           LDR      R6,??Check_1     ;; ??AlarmOffDelay
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   EC0094E5           LDR      R0,[R4, #+236]
   \   00000010   C07094E5           LDR      R7,[R4, #+192]
   \   00000014   3212D0E5           LDRB     R1,[R0, #+562]
   \   00000018   0250A0E3           MOV      R5,#+2
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   1000000A           BEQ      ??Check_2
     28          		float Val = PROTankPtr->VolumePercent;
   \   00000024   B88290E5           LDR      R8,[R0, #+696]
     29          		if ( Val < Limit - Deadband ) {
   \   00000028   E49094E5           LDR      R9,[R4, #+228]
   \   0000002C   BC1094E5           LDR      R1,[R4, #+188]
   \   00000030   0900A0E1           MOV      R0,R9
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0800A0E1           MOV      R0,R8
   \   00000040   ........           _BLF     __fLess,??__fLess??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0600001A           BNE      ??Check_2
     30          			if ( TSNElapsedTicks(LastActiveTime) > PROSystemData::AlarmOffDelay ) {
     31          				Status = AL_STAT_IN_NORMAL;
     32          			}
     33          		} else if ( Val >= Limit ) {
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   0910A0E1           MOV      R1,R9
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0600000A           BEQ      ??Check_3
     34          			Status = AL_STAT_IN_ALARM;
   \   00000060   0150A0E3           MOV      R5,#+1
   \   00000064   040000EA           B        ??Check_3
     35          		}
     36          	} else if ( TSNElapsedTicks(LastActiveTime) > PROSystemData::AlarmOffDelay ) {
   \                     ??Check_2:
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000070   001096E5           LDR      R1,[R6, #+0]
   \   00000074   000051E1           CMP      R1,R0
     37          		Status = AL_STAT_IN_NORMAL;
   \   00000078   0050A0B3           MOVLT    R5,#+0
     38          	}
     39          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     40          }
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??Check_1:
   \   00000090   ........           DC32     ??AlarmOffDelay
     41          
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the librarian for input
     45          //
     46          ///////////////////////////////////////////////////////////////
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          int AlarmOverfill::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     49          {
   \                     ??PutValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   8490DDE5           LDRB     R9,[SP, #+132]
   \   00000010   88409DE5           LDR      R4,[SP, #+136]
   \   00000014   0170A0E1           MOV      R7,R1
     50          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     51          	if ( Locked ) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   000050E3           CMP      R0,#+0
     52          		Status = E_NO_INPUT_PERMISSION;
   \   00000030   2A10A013           MOVNE    R1,#+42
   \   00000034   00108D15           STRNE    R1,[SP, #+0]
   \   00000038   7B00001A           BNE      ??PutValue_3
     53          	} else {
     54                  float OrgLimit = Limit;
   \   0000003C   E46095E5           LDR      R6,[R5, #+228]
     55          		int Key = FindConfigKey(NewValue);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   40008DE2           ADD      R0,SP,#+64
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   F4019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   00A090E5           LDR      R10,[R0, #+0]
   \   00000058   0810A0E1           MOV      R1,R8
   \   0000005C   0A30A0E1           MOV      R3,R10
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   40008DE2           ADD      R0,SP,#+64
   \   0000006C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000070   00B0A0E1           MOV      R11,R0
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   40008DE2           ADD      R0,SP,#+64
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
     56          		switch ( Key ) {
   \   00000084   64B04BE2           SUB      R11,R11,#+100
   \   00000088   05005BE3           CMP      R11,#+5
   \   0000008C   1100008A           BHI      ??PutValue_5
   \   00000090   010F8FE2           ADR      R0,??PutValue_1
   \   00000094   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000098   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   0000009C   010C010C           DC8      +1,+12,+1,+12
   \   000000A0   010C0000           DC8      +1,+12,+0,+0
     57          			case C_ON:
     58          			case C_OPEN:
     59          			case C_ENABLE:
     60                          SetEnable(EnableTrue);
   \                     ??PutValue_6:
   \   000000A4   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_7:
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??SetEnable,??SetEnable??rA
     61          				PROTankPtr->SetState(tUndefined);
   \   000000B0   EC2095E5           LDR      R2,[R5, #+236]
   \   000000B4   0410A0E3           MOV      R1,#+4
   \   000000B8   0200A0E1           MOV      R0,R2
   \   000000BC   A42092E5           LDR      R2,[R2, #+164]
   \   000000C0   7C2092E5           LDR      R2,[R2, #+124]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   12FF2FE1           BX       R2
   \   000000CC   3F0000EA           B        ??PutValue_8
     62          				break;
     63          			case C_OFF:
     64          			case C_CLOSE:
     65          			case C_DISABLE:
     66                          SetEnable(EnableFalse);
   \                     ??PutValue_9:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   F3FFFFEA           B        ??PutValue_7
     67          				PROTankPtr->SetState(tUndefined);
     68          				break;
     69          			default:
     70          				switch ( ValueId ) {
   \                     ??PutValue_5:
   \   000000D8   3210A0E3           MOV      R1,#+50
   \   000000DC   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000E0   010057E1           CMP      R7,R1
   \   000000E4   2200001A           BNE      ??PutValue_10
     71          					case SVT_AL_LIMIT:
     72          						{
     73          							float Value = ConvertToSi(NewValue, ValUnitId=PERCENT_UNIT, Status,0.0 ,100.0,0.0);
   \   000000E8   1010A0E3           MOV      R1,#+16
   \   000000EC   04108DE5           STR      R1,[SP, #+4]
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   24008DE2           ADD      R0,SP,#+36
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0A30A0E1           MOV      R3,R10
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0810A0E1           MOV      R1,R8
   \   0000010C   24008DE2           ADD      R0,SP,#+36
   \   00000110   ........           _BLF     ??assign,??assign??rA
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   0010A0E1           MOV      R1,R0
   \   0000011C   03002DE9           PUSH     {R0,R1}
   \   00000120   4014A0E3           MOV      R1,#+1073741824
   \   00000124   591881E3           ORR      R1,R1,#0x590000
   \   00000128   03002DE9           PUSH     {R0,R1}
   \   0000012C   0010A0E1           MOV      R1,R0
   \   00000130   03002DE9           PUSH     {R0,R1}
   \   00000134   18208DE2           ADD      R2,SP,#+24
   \   00000138   3C008DE2           ADD      R0,SP,#+60
   \   0000013C   0800BDE8           POP      {R3}
   \   00000140   1010A0E3           MOV      R1,#+16
   \   00000144   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000148   0070A0E1           MOV      R7,R0
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   38008DE2           ADD      R0,SP,#+56
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
     74          							if ( Status== E_NO_ERR ) {
   \   0000015C   14009DE5           LDR      R0,[SP, #+20]
   \   00000160   14D08DE2           ADD      SP,SP,#+20
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   1800001A           BNE      ??PutValue_8
     75          								Limit = Value;
   \   0000016C   E47085E5           STR      R7,[R5, #+228]
   \   00000170   190000EA           B        ??PutValue_11
     76          							}
     77          						}
     78          						break;
     79          					default:
     80          						Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_10:
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0010A0E3           MOV      R1,#+0
   \   0000017C   08008DE2           ADD      R0,SP,#+8
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000184   0A30A0E1           MOV      R3,R10
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0810A0E1           MOV      R1,R8
   \   00000190   08008DE2           ADD      R0,SP,#+8
   \   00000194   ........           _BLF     ??assign,??assign??rA
   \   00000198   04008DE2           ADD      R0,SP,#+4
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   00022DE9           PUSH     {R9}
   \   000001A4   64209DE5           LDR      R2,[SP, #+100]
   \   000001A8   10308DE2           ADD      R3,SP,#+16
   \   000001AC   0710A0E1           MOV      R1,R7
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001B8   08008DE5           STR      R0,[SP, #+8]
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   10008DE2           ADD      R0,SP,#+16
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001CC   08D08DE2           ADD      SP,SP,#+8
     81          						break;
     82          				}
     83          				break; // switch ( ValueId )
     84          		}//switch ( Key )
     85          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_8:
   \   000001D0   00009DE5           LDR      R0,[SP, #+0]
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   1300001A           BNE      ??PutValue_3
     86          			SetModifiedFlag();
   \                     ??PutValue_11:
   \   000001DC   A41095E5           LDR      R1,[R5, #+164]
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   541091E5           LDR      R1,[R1, #+84]
   \   000001E8   0FE0A0E1           MOV      LR,PC
   \   000001EC   11FF2FE1           BX       R1
     87          			if ( Limit != OrgLimit ) {
   \   000001F0   E40095E5           LDR      R0,[R5, #+228]
   \   000001F4   0610A0E1           MOV      R1,R6
   \   000001F8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   0900000A           BEQ      ??PutValue_3
     88          				LogEvent("New limit");
   \   00000204   40109FE5           LDR      R1,??PutValue_4+0x4  ;; `?<Constant "New limit">`
   \   00000208   08008DE2           ADD      R0,SP,#+8
   \   0000020C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000210   0010A0E1           MOV      R1,R0
   \   00000214   0500A0E1           MOV      R0,R5
   \   00000218   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   08008DE2           ADD      R0,SP,#+8
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
     89          			}
     90          		}
     91          	}// if ( Locked ) else
     92          	if (UnitId) {
   \                     ??PutValue_3:
   \   0000022C   000054E3           CMP      R4,#+0
     93          		*UnitId = ValUnitId;
   \   00000230   04009D15           LDRNE    R0,[SP, #+4]
   \   00000234   00008415           STRNE    R0,[R4, #+0]
     94          	}
     95          	return(Status);
   \   00000238   00009DE5           LDR      R0,[SP, #+0]
   \   0000023C   60D08DE2           ADD      SP,SP,#+96
   \   00000240   F04FBDE8           POP      {R4-R11,LR}
   \   00000244   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   00000248   ........           DC32     ??npos
   \   0000024C   ........           DC32     `?<Constant "New limit">`
     96          }
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          int  AlarmOverfill::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     99          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
    100          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    101          	switch ( ValueId ) {
   \   00000010   1060A0E3           MOV      R6,#+16
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0F00008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    102          		case SVT_AL_LIMIT:
    103          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    104          			DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    105          			Unit       = PERCENT_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    106          			if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0900001A           BNE      ??GetValue_6
    107          				Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   070000EA           B        ??GetValue_6
    108          			}
    109          			break;
    110          		case SVT_AL_VALUE:
    111          			MyRetValue = PROTankPtr->VolumePercent;
   \                     ??GetValue_7:
   \   0000005C   EC1090E5           LDR      R1,[R0, #+236]
   \   00000060   B81291E5           LDR      R1,[R1, #+696]
   \   00000064   F4FFFFEA           B        ??GetValue_5
    112          			DecPnt     = 1;
    113          			Unit       = PERCENT_UNIT;
    114          			if ( !Enable ) {
    115          				Status     = GETVAL_DISABLED;
    116          			}
    117          			break;
    118          		default:
    119          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000068   20002DE9           PUSH     {R5}
   \   0000006C   10002DE9           PUSH     {R4}
   \   00000070   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000074   00C0A0E1           MOV      R12,R0
   \   00000078   08D08DE2           ADD      SP,SP,#+8
    120          			break;
    121          	}
    122          	return(Status);
   \                     ??GetValue_6:
   \   0000007C   F043BDE8           POP      {R4-R9,LR}
   \   00000080   0C00A0E1           MOV      R0,R12
   \   00000084   1EFF2FE1           BX       LR               ;; return
    123          }
    124          
    125          

   \                                 In segment CODE, align 4, keep-with-next
    126          int AlarmOverfill::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    127          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    128          	int Status = GETVAL_NO_ERR;
    129          	//switch ( ValueId ) {
    130          	//	default:
    131          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    132          	//		break;
    133          	//}
    134          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    135          }
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          int AlarmOverfill::PutFloatValue( int ValueId, float NewValue)
    138          {
   \                     ??PutFloatValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
    139              int Status = E_NO_ERR;
   \   00000004   0030A0E3           MOV      R3,#+0
    140              switch ( ValueId ) {
   \   00000008   3240A0E3           MOV      R4,#+50
   \   0000000C   8C4D84E3           ORR      R4,R4,#0x2300
   \   00000010   040051E1           CMP      R1,R4
   \   00000014   C0408413           ORRNE    R4,R4,#0xC0
   \   00000018   04005111           CMPNE    R1,R4
    141              case SVT_HIHI_VOLPCNT_LIM :
    142          	case SVT_AL_LIMIT:
    143          		Limit = NewValue;
   \   0000001C   E4208005           STREQ    R2,[R0, #+228]
   \   00000020   0100000A           BEQ      ??PutFloatValue_2
    144                  break;
    145              default:
    146                  Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
   \   00000024   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000028   0030A0E1           MOV      R3,R0
    147                  break;
    148              }
    149              return (Status);
   \                     ??PutFloatValue_2:
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   0300A0E1           MOV      R0,R3
   \   00000034   1EFF2FE1           BX       LR               ;; return
    150          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmOverfill &AlarmOverfill::new AlarmOverfill(PRogramObjectBase *, float, bool)
   \                     `??new AlarmOverfill`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmOverfill_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmOverfill
   \                     `??new AlarmOverfill_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    151          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmOverfill::AlarmOverfill(PRogramObjectBase *, float, bool)
                                       20
     AlarmOverfill::Check()            32
     AlarmOverfill::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmOverfill::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmOverfill::PutFloatValue(int, float)
                                        8
     AlarmOverfill::PutValue(int, int, AnsiString, bool, int *)
                                      156
     AlarmOverfill::new AlarmOverfill(PRogramObjectBase *, float, bool)
                                       16
     AlarmOverfill::~AlarmOverfill()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmOverfill::~AlarmOverfill()
                                      56
     AlarmOverfill::NumberOfAlarmSettings
                                       4
     AlarmOverfill::AlarmOverfill(PRogramObjectBase *, float, bool)
                                     144
     AlarmOverfill::Check()          148
     AlarmOverfill::PutValue(int, int, AnsiString, bool, int *)
                                     592
     AlarmOverfill::GetValue(int, int, float &, int &, int &)
                                     136
     AlarmOverfill::GetStringValue(int, int, AnsiString &)
                                      16
     AlarmOverfill::PutFloatValue(int, float)
                                      56
     ?<Constant "New limit">          12
     AlarmOverfill::new AlarmOverfill(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         416

 
 1 492 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 156 bytes of CODE  memory (+ 352 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
