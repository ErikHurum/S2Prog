##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmFuse.Cpp                   #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmFuse.Cpp --fpu None -D     #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmFuse.lst               #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmFuse.r79                #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmFuse.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmFuse::~AlarmFuse()
   \                     `?~AlarmFuse`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmFuse_1`
   \   00000014   0100000A           BEQ      `?~AlarmFuse_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmFuse_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmFuse_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmFuse_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmFuse::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmFuse::AlarmFuse(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmFuse:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   64009FE5           LDR      R0,??AlarmFuse_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer = PROPtr;
     14          	NumberOfAlarmSettings++;
   \   00000018   60009FE5           LDR      R0,??AlarmFuse_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   C45084E5           STR      R5,[R4, #+196]
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     15          	IDNumber =  (ID_AL_FUSE << 16)+NumberOfAlarmSettings;
   \   0000002C   B006A0E3           MOV      R0,#+184549376
   \   00000030   E60880E3           ORR      R0,R0,#0xE60000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     16          	Type     = ID_AL_FUSE;
   \   0000003C   E600A0E3           MOV      R0,#+230
   \   00000040   B00E80E3           ORR      R0,R0,#0xB00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     17          	Limit    = 1.0;
   \   00000048   FE05A0E3           MOV      R0,#+1065353216
   \   0000004C   E40084E5           STR      R0,[R4, #+228]
     18          	Deadband = 0.0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   BC0084E5           STR      R0,[R4, #+188]
     19          	MessageKey      = L_WORD892;	// Fuse broken
   \   00000058   DF0FA0E3           MOV      R0,#+892
   \   0000005C   B80084E5           STR      R0,[R4, #+184]
     20          	TPCMessageKey   = L_WORD889;	// Fuse
   \   00000060   030040E2           SUB      R0,R0,#+3
   \   00000064   B40084E5           STR      R0,[R4, #+180]
     21          	IsHWAlarm       = true;
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   CE00C4E5           STRB     R0,[R4, #+206]
     22          }
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   3040BDE8           POP      {R4,R5,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmFuse_1:
   \   0000007C   ........           DC32     ??__vtbl
   \   00000080   ........           DC32     ??NumberOfAlarmSettings
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void AlarmFuse::Check(void)
     25          {
   \                     ??Check:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26          	bool Val = bool(((AIFuseSensor*)PROPointer)->Calculate());
   \   00000008   C41094E5           LDR      R1,[R4, #+196]
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   A41091E5           LDR      R1,[R1, #+164]
   \   00000014   601091E5           LDR      R1,[R1, #+96]
   \   00000018   0FE0A0E1           MOV      LR,PC
   \   0000001C   11FF2FE1           BX       R1
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100A013           MOVNE    R0,#+1
     27          	int Status = AL_STAT_IN_DEADBAND;
     28          	if ( !Val ) {
   \   00000030   000050E3           CMP      R0,#+0
     29          		Status = AL_STAT_IN_NORMAL;
   \   00000034   0010A003           MOVEQ    R1,#+0
     30          	} else if ( Val ) {
     31          		Status = AL_STAT_IN_ALARM;
   \   00000038   0110A013           MOVNE    R1,#+1
     32          	}
     33          	UpdateAlarm(Status);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     34          }
   \   00000044                      REQUIRE ?Subroutine8
   \   00000044                      ;; // Fall through to label ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     35          
     36          ///////////////////////////////////////////////////////////////
     37          //
     38          // Routines for the librarian
     39          //
     40          ///////////////////////////////////////////////////////////////
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          int AlarmFuse::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     43          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   5C90DDE5           LDRB     R9,[SP, #+92]
   \   00000010   60409DE5           LDR      R4,[SP, #+96]
   \   00000014   0170A0E1           MOV      R7,R1
     44          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     45          	if ( Locked ) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0280A0E1           MOV      R8,R2
   \   0000002C   0360A0E1           MOV      R6,R3
   \   00000030   000050E3           CMP      R0,#+0
     46          		Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A10A013           MOVNE    R1,#+42
   \   00000038   00108D15           STRNE    R1,[SP, #+0]
   \   0000003C   4D00001A           BNE      ??PutValue_2
     47          	} else switch ( ValueId ) {
   \   00000040   3210A0E3           MOV      R1,#+50
   \   00000044   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000048   010057E1           CMP      R7,R1
   \   0000004C   2900001A           BNE      ??PutValue_3
     48          		case SVT_AL_LIMIT:
     49          			{
     50          				float Value = ConvertToSi(NewValue, ValUnitId=NO_UNIT, Status,0.0 ,((AIFuseSensor*)PROPointer)->Calculate(),0.0);
   \   00000050   C41095E5           LDR      R1,[R5, #+196]
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   A41091E5           LDR      R1,[R1, #+164]
   \   0000005C   601091E5           LDR      R1,[R1, #+96]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   04108DE5           STR      R1,[SP, #+4]
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   08008DE2           ADD      R0,SP,#+8
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0C019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   003090E5           LDR      R3,[R0, #+0]
   \   0000008C   0610A0E1           MOV      R1,R6
   \   00000090   08008DE2           ADD      R0,SP,#+8
   \   00000094   ........           _BLF     ??assign,??assign??rA
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   0010A0E1           MOV      R1,R0
   \   000000A0   03002DE9           PUSH     {R0,R1}
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000AC   03002DE9           PUSH     {R0,R1}
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   0010A0E1           MOV      R1,R0
   \   000000B8   03002DE9           PUSH     {R0,R1}
   \   000000BC   18208DE2           ADD      R2,SP,#+24
   \   000000C0   20008DE2           ADD      R0,SP,#+32
   \   000000C4   0800BDE8           POP      {R3}
   \   000000C8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000CC   0060A0E1           MOV      R6,R0
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     51          				if ( Status== E_NO_ERR ) {
   \   000000E0   14009DE5           LDR      R0,[SP, #+20]
   \   000000E4   14D08DE2           ADD      SP,SP,#+20
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   1900001A           BNE      ??PutValue_5
     52          					Limit = Value;
   \   000000F0   E46085E5           STR      R6,[R5, #+228]
   \   000000F4   170000EA           B        ??PutValue_5
     53          				}
     54          			}
     55          			break;
     56          		default:
     57          			Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   24008DE2           ADD      R0,SP,#+36
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000108   84009FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   003090E5           LDR      R3,[R0, #+0]
   \   00000114   0610A0E1           MOV      R1,R6
   \   00000118   24008DE2           ADD      R0,SP,#+36
   \   0000011C   ........           _BLF     ??assign,??assign??rA
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   00022DE9           PUSH     {R9}
   \   0000012C   2C308DE2           ADD      R3,SP,#+44
   \   00000130   0820A0E1           MOV      R2,R8
   \   00000134   0710A0E1           MOV      R1,R7
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000140   08008DE5           STR      R0,[SP, #+8]
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   2C008DE2           ADD      R0,SP,#+44
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   08D08DE2           ADD      SP,SP,#+8
     58          			break;
     59          		}
     60          	if ( Status==E_NO_ERR ) {
   \                     ??PutValue_5:
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0400001A           BNE      ??PutValue_2
     61          		SetModifiedFlag();
   \   00000164   A41095E5           LDR      R1,[R5, #+164]
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   541091E5           LDR      R1,[R1, #+84]
   \   00000170   0FE0A0E1           MOV      LR,PC
   \   00000174   11FF2FE1           BX       R1
     62          	}
     63          	if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000178   000054E3           CMP      R4,#+0
     64          		*UnitId = ValUnitId;
   \   0000017C   04009D15           LDRNE    R0,[SP, #+4]
   \   00000180   00008415           STRNE    R0,[R4, #+0]
     65          	}
     66          	return(Status);
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   40D08DE2           ADD      SP,SP,#+64
   \   0000018C   F043BDE8           POP      {R4-R9,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   00000194   ........           DC32     ??npos
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          int  AlarmFuse::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     70          {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
     71          	int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     72          	switch ( ValueId ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   323041E2           SUB      R3,R1,#+50
   \   0000001C   8C3D43E2           SUB      R3,R3,#+8960
   \   00000020   010053E3           CMP      R3,#+1
   \   00000024   0F00008A           BHI      ??GetValue_3
   \   00000028   01CF8FE2           ADR      R12,??GetValue_1
   \   0000002C   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     73          	case SVT_AL_LIMIT:
     74          		MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     75          		DecPnt     = 0;
   \   00000040   008085E5           STR      R8,[R5, #+0]
     76          		Unit       = NO_UNIT;
   \   00000044   008086E5           STR      R8,[R6, #+0]
   \   00000048   0C0000EA           B        ??GetValue_6
     77          		break;
     78          	case SVT_AL_VALUE:
     79          		MyRetValue = ((AIFuseSensor*)PROPointer)->Calculate();
   \                     ??GetValue_7:
   \   0000004C   C41090E5           LDR      R1,[R0, #+196]
   \   00000050   0100A0E1           MOV      R0,R1
   \   00000054   A41091E5           LDR      R1,[R1, #+164]
   \   00000058   601091E5           LDR      R1,[R1, #+96]
   \   0000005C   0FE0A0E1           MOV      LR,PC
   \   00000060   11FF2FE1           BX       R1
   \   00000064   F4FFFFEA           B        ??GetValue_5
     80          		DecPnt     = 0;
     81          		Unit       = NO_UNIT;
     82          		break;
     83          	default:
     84          		Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000068   40002DE9           PUSH     {R6}
   \   0000006C   20002DE9           PUSH     {R5}
   \   00000070   0430A0E1           MOV      R3,R4
   \   00000074   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000078   0070A0E1           MOV      R7,R0
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
     85          		break;
     86          	}
     87          	return(Status);
   \                     ??GetValue_6:
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   F041BDE8           POP      {R4-R8,LR}
   \   00000088   1EFF2FE1           BX       LR               ;; return
     88          }
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int AlarmFuse::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     91          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     92          	int Status = GETVAL_NO_ERR;
     93          	//switch ( ValueId ) {
     94          	//	default:
     95          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     96          	//		break;
     97          	//}
     98          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine9
     99          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          int AlarmFuse::PutFloatValue( int ValueId, float NewValue)
    102          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    103          	int Status= E_NO_ERR;
    104          	//switch ( ValueId ) {
    105          	//   default:
    106          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    107          	//     break;
    108          	//}
    109          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine9
   \   00000008                      ;; // Fall through to label ?Subroutine9
    110          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmFuse &AlarmFuse::new AlarmFuse(PRogramObjectBase *)
   \                     `??new AlarmFuse`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   EC00A0E3           MOV      R0,#+236
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmFuse_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmFuse
   \                     `??new AlarmFuse_1`:
   \   00000020   ........           B        ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    111          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmFuse::AlarmFuse(PRogramObjectBase *)
                                       12
     AlarmFuse::Check()                 8
     AlarmFuse::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmFuse::GetValue(int, int, float &, int &, int &)
                                       32
     AlarmFuse::PutFloatValue(int, float)
                                        4
     AlarmFuse::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmFuse::new AlarmFuse(PRogramObjectBase *)
                                        8
     AlarmFuse::~AlarmFuse()           12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmFuse::~AlarmFuse()          56
     AlarmFuse::NumberOfAlarmSettings
                                       4
     AlarmFuse::AlarmFuse(PRogramObjectBase *)
                                     132
     AlarmFuse::Check()               68
     ?Subroutine8                      8
     AlarmFuse::PutValue(int, int, AnsiString, bool, int *)
                                     408
     AlarmFuse::GetValue(int, int, float &, int &, int &)
                                     140
     AlarmFuse::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine9                      8
     AlarmFuse::PutFloatValue(int, float)
                                       8
     AlarmFuse::new AlarmFuse(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
      Others                         332

 
 1 080 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 828 bytes of CODE  memory (+ 268 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
