##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:40 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\CtrlLight.cpp                   #
#    Command line    =  D:\S2Prog\Shared\Src\CtrlLight.cpp --fpu None -D     #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\CtrlLight.lst               #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\CtrlLight.r79                #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\CtrlLight.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          CtrlLight::CtrlLight(void):PROControl(RELAY_LIGHT)
   \                     ??CtrlLight:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     10          {
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           _BLF     ??PROControl,??PROControl??rA
   \   00000010   0C009FE5           LDR      R0,??CtrlLight_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     11          	//DeActivate();
     12          }
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??CtrlLight_1:
   \   00000024   ........           DC32     ??__vtbl
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          CtrlLight::~CtrlLight(void)
     15          {
   \                     `?~CtrlLight`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~CtrlLight_1`
     16          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROControl`,`?~PROControl??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~CtrlLight_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~CtrlLight_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     17          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     18          void CtrlLight::Update(char Mode)
     19          {
   \                     ??Update:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
     20            #ifdef S2TXU
     21          	OS_Use(&CtrlSema);
   \   0000000C   4B5FA0E3           MOV      R5,#+300
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
     22          /*
     23          	//Follow PROList
     24          	if Active alarms and not AlarmSilence:
     25          	1.	Active HHL / HL	alarms: light			frequenc: 1
     26          	2.  if AlarmList?
     27          			Active alarms					: light			frequenc: 1
     28          	3.	Only Acknow alarms		: off
     29          	else											: off
     30          */
     31          	switch ( Mode ) {
   \   00000018   020056E3           CMP      R6,#+2
   \   0000001C   1700008A           BHI      ??Update_2
   \   00000020   010F8FE2           ADR      R0,??Update_1
   \   00000024   0600D0E7           LDRB     R0,[R0, R6]
   \   00000028   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Update_1:
   \   0000002C   12000C00           DC8      +18,+0,+12,+0
     32          		case BUZZER_TEST_ON:
     33          			Activate(R_ACTIVATE0,RELAY_MSG_ON,0,0);
   \                     ??Update_3:
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   A46094E5           LDR      R6,[R4, #+164]
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   606096E5           LDR      R6,[R6, #+96]
   \   00000044   0120A0E3           MOV      R2,#+1
   \   00000048   0210A0E1           MOV      R1,R2
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   16FF2FE1           BX       R6
   \   00000058   04D08DE2           ADD      SP,SP,#+4
   \   0000005C   070000EA           B        ??Update_2
     34          			break;
     35          		case BUZZER_TEST_OFF:
     36          			DeActivate();
   \                     ??Update_4:
   \   00000060   A41094E5           LDR      R1,[R4, #+164]
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   641091E5           LDR      R1,[R1, #+100]
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   11FF2FE1           BX       R1
   \   00000074   010000EA           B        ??Update_2
     37          			break;
     38          		case BUZZER_NO_TEST:
     39          			UpdateRelay();
   \                     ??Update_5:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     ??UpdateRelay,??UpdateRelay??rA
     40          			break;
     41          	}
     42          	OS_Unuse(&CtrlSema);
   \                     ??Update_2:
   \   00000080   040085E0           ADD      R0,R5,R4
   \   00000084   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     43          #endif
     44          }
   \   00000088   7040BDE8           POP      {R4-R6,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CtrlLight &CtrlLight::new CtrlLight()
   \                     `??new CtrlLight`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   4F0FA0E3           MOV      R0,#+316
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new CtrlLight_1`
   \   00000014   ........           BL       ??CtrlLight
   \                     `??new CtrlLight_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     45          
     46          
     47          

   Maximum stack usage in bytes:

     Function                   CSTACK
     --------                   ------
     CtrlLight::CtrlLight()         8
     CtrlLight::Update(char)       20
     CtrlLight::new CtrlLight()     4
     CtrlLight::~CtrlLight()       12
     __sti__routine()               0


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     CtrlLight::CtrlLight()       40
     CtrlLight::~CtrlLight()      52
     CtrlLight::Update(char)     144
     CtrlLight::new CtrlLight()   32
     __sti__routine()              4
      Others                     212

 
 376 bytes in segment CODE
 104 bytes in segment DATA_C
   4 bytes in segment DIFUNCT
 
 276 bytes of CODE  memory (+ 104 bytes shared)
 104 bytes of CONST memory

Errors: none
Warnings: none
