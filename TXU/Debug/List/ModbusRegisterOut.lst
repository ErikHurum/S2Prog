##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusRegisterOut.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusRegisterOut.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusRegisterOut.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusRegisterOut.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusRegisterOut.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif

   \                                 In segment DATA_Z, align 4, align-sorted
      6          set<PRogramObjectBase*>ModbusRegisterOut::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          ModbusRegisterOut::ModbusRegisterOut(bool pIsCreatedFromMultiple, int ModuleType, bool InsertInSet)
   \                     ??ModbusRegisterOut:
   \   00000000   F3412DE9           PUSH     {R0,R1,R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
      9          {
     10          	if (InsertInSet) {
   \   00000010   ........           LDR      R8,??DataTable1  ;; ??ModbusSet
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   ........           _BLF     ??ModbusRegister,??ModbusRegister??rA
   \   0000001C   38009FE5           LDR      R0,??ModbusRegisterOut_1  ;; ??__vtbl
   \   00000020   000057E3           CMP      R7,#+0
   \   00000024   A40084E5           STR      R0,[R4, #+164]
   \   00000028   0300000A           BEQ      ??ModbusRegisterOut_2
     11          		ModbusSet.insert(this);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   0810A0E1           MOV      R1,R8
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??insert,??insert??rA
     12          	}
     13          	IDNumber    = (ModuleType << 16) + ModbusSet.size();
   \                     ??ModbusRegisterOut_2:
   \   0000003C   100098E5           LDR      R0,[R8, #+16]
   \   00000040   060880E0           ADD      R0,R0,R6, LSL #+16
   \   00000044   9C0084E5           STR      R0,[R4, #+156]
     14          	Type        = ModuleType;
   \   00000048   A06084E5           STR      R6,[R4, #+160]
     15              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   0000004C   7851C4E5           STRB     R5,[R4, #+376]
     16          }
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   F641BDE8           POP      {R1,R2,R4-R8,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegisterOut_1:
   \   0000005C   ........           DC32     ??__vtbl
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          ModbusRegisterOut::~ModbusRegisterOut()
     19          {
   \                     `?~ModbusRegisterOut`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~ModbusRegisterOut_1`
     20          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~ModbusRegister`,`?~ModbusRegister??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~ModbusRegisterOut_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusRegisterOut_1`:
   \   0000002C   ........           B        ??Subroutine13_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine13_0:
   \   00000004   3040BDE8           POP      {R4,R5,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void ModbusRegisterOut::CalculateScale(void)
     23          {
   \                     ??CalculateScale:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0060A0E1           MOV      R6,R0
     24              float Divisor = MaxRange - MinRange;
     25              if (Divisor) {
   \   00000008   800196E5           LDR      R0,[R6, #+384]
   \   0000000C   5F7FA0E3           MOV      R7,#+380
   \   00000010   061097E7           LDR      R1,[R7, +R6]
   \   00000014   ........           _BLF     __fSub,??__fSub??rA
   \   00000018   0080A0E1           MOV      R8,R0
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0810A0E1           MOV      R1,R8
   \   00000024   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0D00000A           BEQ      ??CalculateScale_1
     26                  Scale = (float(RegMax)-0.0)/( MaxRange - MinRange ) ;
   \   00000030   A80196E5           LDR      R0,[R6, #+424]
   \   00000034   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000038   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   0150A0E1           MOV      R5,R1
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   0130A0E1           MOV      R3,R1
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000060   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000064   000000EA           B        ??CalculateScale_2
     27              }else{
     28                  Scale = 1.0;
   \                     ??CalculateScale_1:
   \   00000068   FE05A0E3           MOV      R0,#+1065353216
   \                     ??CalculateScale_2:
   \   0000006C   880186E5           STR      R0,[R6, #+392]
     29              }
     30              Offset = -Scale*MinRange;
   \   00000070   061097E7           LDR      R1,[R7, +R6]
   \   00000074   ........           _BLF     __fMul,??__fMul??rA
   \   00000078   800420E2           EOR      R0,R0,#0x80000000
   \   0000007C   8C0186E5           STR      R0,[R6, #+396]
     31          }
   \   00000080   F041BDE8           POP      {R4-R8,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
     32          
     33          //---------------------------------------------------------------------------
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          int ModbusRegisterOut::GetOutputVal(void)
     36          {
   \                     ??GetOutputVal:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     37              int ReturnVal = 0;
   \   00000008   A0C194E5           LDR      R12,[R4, #+416]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   00005CE3           CMP      R12,#+0
   \   00000014   6400000A           BEQ      ??GetOutputVal_1
     38              if ( ObjPtr ) {
     39                  float OutVal;
     40                  int DecPnt,Unit; // These variables are not used
     41                  int Status = ObjPtr->GetValue(ValueKey, 0, OutVal,DecPnt,Unit);
   \   00000018   08008DE2           ADD      R0,SP,#+8
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   A4609CE5           LDR      R6,[R12, #+164]
   \   0000002C   A41194E5           LDR      R1,[R4, #+420]
   \   00000030   246096E5           LDR      R6,[R6, #+36]
   \   00000034   08308DE2           ADD      R3,SP,#+8
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0C00A0E1           MOV      R0,R12
   \   00000040   0FE0A0E1           MOV      LR,PC
   \   00000044   16FF2FE1           BX       R6
     42                  switch ( Status ) {
   \   00000048   08D08DE2           ADD      SP,SP,#+8
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0B00000A           BEQ      ??GetOutputVal_2
   \   00000054   0F0050E2           SUBS     R0,R0,#+15
   \   00000058   0200000A           BEQ      ??GetOutputVal_3
   \   0000005C   010050E2           SUBS     R0,R0,#+1
   \   00000060   0700000A           BEQ      ??GetOutputVal_2
   \   00000064   030000EA           B        ??GetOutputVal_4
     43                  case GETVAL_HW_ALARM       :
     44                      OutVal = RegMax;
   \                     ??GetOutputVal_3:
   \   00000068   A80194E5           LDR      R0,[R4, #+424]
   \   0000006C   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000070   00008DE5           STR      R0,[SP, #+0]
   \   00000074   0B0000EA           B        ??GetOutputVal_5
     45                      break;
     46                  case GETVAL_FLOAT_NOT_LEGAL:
     47                  case GETVAL_NOT_AVAILABLE  :
     48                  default:
     49                      OutVal = 0.0;
   \                     ??GetOutputVal_4:
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   00108DE5           STR      R1,[SP, #+0]
   \   00000080   080000EA           B        ??GetOutputVal_5
     50                      break;
     51                  case GETVAL_OFFLINE:
     52                  case GETVAL_NO_ERR:
     53                      OutVal = ConvertFromSi(NULL,OutVal,0,DecPnt,Unit);
   \                     ??GetOutputVal_2:
   \   00000084   08009DE5           LDR      R0,[SP, #+8]
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   08309DE5           LDR      R3,[SP, #+8]
   \   00000094   04109DE5           LDR      R1,[SP, #+4]
   \   00000098   0200A0E1           MOV      R0,R2
   \   0000009C   ........           _BLF     ??ConvertFromSi,??ConvertFromSi??rA
   \   000000A0   04008DE5           STR      R0,[SP, #+4]
   \   000000A4   04D08DE2           ADD      SP,SP,#+4
     54                      break;
     55                  }
     56                  if ( HasRange ) {
   \                     ??GetOutputVal_5:
   \   000000A8   9A01D4E5           LDRB     R0,[R4, #+410]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0C00000A           BEQ      ??GetOutputVal_6
   \   000000B4   7C6194E5           LDR      R6,[R4, #+380]
   \   000000B8   00009DE5           LDR      R0,[SP, #+0]
   \   000000BC   0610A0E1           MOV      R1,R6
   \   000000C0   ........           _BLF     __fLess,??__fLess??rA
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500001A           BNE      ??GetOutputVal_7
   \   000000CC   806194E5           LDR      R6,[R4, #+384]
   \   000000D0   00109DE5           LDR      R1,[SP, #+0]
   \   000000D4   0600A0E1           MOV      R0,R6
   \   000000D8   ........           _BLF     __fLess,??__fLess??rA
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0000000A           BEQ      ??GetOutputVal_6
     57                      if ( OutVal < MinRange ) {
     58                          OutVal = MinRange;
     59                      } else if ( OutVal > MaxRange ) {
     60                          OutVal = MaxRange;
   \                     ??GetOutputVal_7:
   \   000000E4   00608DE5           STR      R6,[SP, #+0]
     61                      }
     62                  }
     63          
     64                  switch ( ModbusDataFormat ) {
   \                     ??GetOutputVal_6:
   \   000000E8   9901D4E5           LDRB     R0,[R4, #+409]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0300000A           BEQ      ??GetOutputVal_8
   \   000000F4   050040E2           SUB      R0,R0,#+5
   \   000000F8   030050E3           CMP      R0,#+3
   \   000000FC   2700009A           BLS      ??GetOutputVal_9
   \   00000100   290000EA           B        ??GetOutputVal_1
     65                  case Float_None:
     66                      if ( HasDecimalScaling ) {
   \                     ??GetOutputVal_8:
   \   00000104   9801D4E5           LDRB     R0,[R4, #+408]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   1D00000A           BEQ      ??GetOutputVal_10
     67                          float rValue = DecimalScaling * OutVal;
   \   00000110   901194E5           LDR      R1,[R4, #+400]
   \   00000114   00009DE5           LDR      R0,[SP, #+0]
   \   00000118   ........           _BLF     __fMul,??__fMul??rA
   \                     ??GetOutputVal_11:
   \   0000011C   0060A0E1           MOV      R6,R0
     68                          ReturnVal = ( floor(rValue) + 0.5 ) > rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
   \   00000120   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000124   0040A0E1           MOV      R4,R0
   \   00000128   0150A0E1           MOV      R5,R1
   \   0000012C   0600A0E1           MOV      R0,R6
   \   00000130   ........           _BLF     floorf,??floorf??rA
   \   00000134   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   C035A0E3           MOV      R3,#+805306368
   \   00000140   FE3683E3           ORR      R3,R3,#0xFE00000
   \   00000144   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000148   0020A0E1           MOV      R2,R0
   \   0000014C   0130A0E1           MOV      R3,R1
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   0510A0E1           MOV      R1,R5
   \   00000158   ........           _BLF     __dLess,??__dLess??rA
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0600A0E1           MOV      R0,R6
   \   00000164   0100000A           BEQ      ??GetOutputVal_12
   \   00000168   ........           _BLF     floorf,??floorf??rA
   \   0000016C   000000EA           B        ??GetOutputVal_13
   \                     ??GetOutputVal_12:
   \   00000170   ........           _BLF     ceilf,??ceilf??rA
   \                     ??GetOutputVal_13:
   \   00000174   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000178   0050A0E1           MOV      R5,R0
   \   0000017C   0558A0E1           MOV      R5,R5, LSL #+16
   \   00000180   2558A0E1           MOV      R5,R5, LSR #+16
   \   00000184   080000EA           B        ??GetOutputVal_1
     69                      } else {
     70                          float rValue = Scale * OutVal+ Offset;
   \                     ??GetOutputVal_10:
   \   00000188   881194E5           LDR      R1,[R4, #+392]
   \   0000018C   00009DE5           LDR      R0,[SP, #+0]
   \   00000190   ........           _BLF     __fMul,??__fMul??rA
   \   00000194   8C1194E5           LDR      R1,[R4, #+396]
   \   00000198   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000019C   DEFFFFEA           B        ??GetOutputVal_11
     71                          ReturnVal = ( floor(rValue) + 0.5 ) > rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
     72                      }
     73                      break;
     74                  case Integer_B_Endian:
     75                  case Integer_B_Endian_ByteSwap:
     76                  case Integer_L_Endian:
     77                  case Integer_L_Endian_ByteSwap:
     78                      ReturnVal = OutVal;
   \                     ??GetOutputVal_9:
   \   000001A0   00009DE5           LDR      R0,[SP, #+0]
   \   000001A4   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000001A8   0050A0E1           MOV      R5,R0
     79                      break;
     80                  }
     81              }
     82              return ReturnVal;
   \                     ??GetOutputVal_1:
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   7E40BDE8           POP      {R1-R6,LR}
   \   000001B4   1EFF2FE1           BX       LR               ;; return
     83          
     84          }

   \                                 In segment CODE, align 4, keep-with-next
     85          float ModbusRegisterOut::GetOutputValFloat(void)
     86          {
   \                     ??GetOutputValFloat:
   \   00000000   07402DE9           PUSH     {R0-R2,LR}
   \   00000004   A0C190E5           LDR      R12,[R0, #+416]
   \   00000008   00005CE3           CMP      R12,#+0
   \   0000000C   1B00000A           BEQ      ??GetOutputValFloat_1
     87              if ( ObjPtr ) {
     88              float OutVal;
     89              int DecPnt,Unit; // These variables are not used
     90              int Status = ObjPtr->GetValue(ValueKey, 0, OutVal,DecPnt,Unit);
   \   00000010   08108DE2           ADD      R1,SP,#+8
   \   00000014   02002DE9           PUSH     {R1}
   \   00000018   08108DE2           ADD      R1,SP,#+8
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   A41190E5           LDR      R1,[R0, #+420]
   \   00000024   0C00A0E1           MOV      R0,R12
   \   00000028   A4C09CE5           LDR      R12,[R12, #+164]
   \   0000002C   08308DE2           ADD      R3,SP,#+8
   \   00000030   24C09CE5           LDR      R12,[R12, #+36]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0FE0A0E1           MOV      LR,PC
   \   0000003C   1CFF2FE1           BX       R12
     91              switch ( Status ) {
   \   00000040   08D08DE2           ADD      SP,SP,#+8
   \   00000044   000050E3           CMP      R0,#+0
     92              case GETVAL_FLOAT_NOT_LEGAL:
     93              case GETVAL_NOT_AVAILABLE:
     94              default:
     95                  OutVal = 0.0;
   \   00000048   0010A013           MOVNE    R1,#+0
   \   0000004C   00108D15           STRNE    R1,[SP, #+0]
   \   00000050   0800001A           BNE      ??GetOutputValFloat_2
     96                  break;
     97              case GETVAL_NO_ERR:
     98                  OutVal = ConvertFromSi(NULL,OutVal,0,DecPnt,Unit);
   \   00000054   08009DE5           LDR      R0,[SP, #+8]
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   08309DE5           LDR      R3,[SP, #+8]
   \   00000064   04109DE5           LDR      R1,[SP, #+4]
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   ........           _BLF     ??ConvertFromSi,??ConvertFromSi??rA
   \   00000070   04008DE5           STR      R0,[SP, #+4]
   \   00000074   04D08DE2           ADD      SP,SP,#+4
     99                  break;
    100              }
    101              return OutVal;
   \                     ??GetOutputValFloat_2:
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   000000EA           B        ??GetOutputValFloat_3
    102              }else{
    103                  return 0.0;
   \                     ??GetOutputValFloat_1:
   \   00000080   0000A0E3           MOV      R0,#+0
   \                     ??GetOutputValFloat_3:
   \   00000084   0E40BDE8           POP      {R1-R3,LR}
   \   00000088   1EFF2FE1           BX       LR               ;; return
    104              }
    105          }
    106          
    107          

   \                                 In segment CODE, align 4, keep-with-next
    108          AnsiString ModbusRegisterOut::GetOutputString(void)
    109          {
   \                     ??GetOutputString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    110              AnsiString MyString;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   A0C194E5           LDR      R12,[R4, #+416]
   \   0000001C   00005CE3           CMP      R12,#+0
   \   00000020   0900000A           BEQ      ??GetOutputString_1
    111              int ErrorStatus = GETVAL_ERROR;
    112              if ( ObjPtr ) {
    113                  ErrorStatus = ObjPtr->GetStringValue(ValueKey,0,MyString);
   \   00000024   A41194E5           LDR      R1,[R4, #+420]
   \   00000028   A4409CE5           LDR      R4,[R12, #+164]
   \   0000002C   0530A0E1           MOV      R3,R5
   \   00000030   284094E5           LDR      R4,[R4, #+40]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0C00A0E1           MOV      R0,R12
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   14FF2FE1           BX       R4
    114              }
    115              switch(ErrorStatus){
   \   00000044   040050E3           CMP      R0,#+4
   \   00000048   0C00001A           BNE      ??GetOutputString_2
    116              case GETVAL_ERROR:
    117                  MyString = "Error";
   \                     ??GetOutputString_1:
   \   0000004C   30109FE5           LDR      R1,??GetOutputString_3  ;; `?<Constant "Error">`
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     ??assign,??assign??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
    118                  break;
    119              default:
    120                  break;
    121              }
    122              return MyString;
   \                     ??GetOutputString_2:
   \   00000080   ........           B        ?Subroutine13
   \                     ??GetOutputString_3:
   \   00000084   ........           DC32     `?<Constant "Error">`
    123          }
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          void ModbusRegisterOut::Update(void)
    126          {
   \                     ??Update:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
    127              ModbusUnit *tmpPtr = FindUnit();
   \   0000000C   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   00000010   0050B0E1           MOVS     R5,R0
    128              if ( tmpPtr ) {
   \   00000014   A900000A           BEQ      ??Update_2
    129                  switch ( ModbusDataFormat ) {
   \   00000018   9901D4E5           LDRB     R0,[R4, #+409]
   \   0000001C   A41094E5           LDR      R1,[R4, #+164]
   \   00000020   5C6FA0E3           MOV      R6,#+368
   \   00000024   0A0050E3           CMP      R0,#+10
   \   00000028   A400008A           BHI      ??Update_2
   \   0000002C   012F8FE2           ADR      R2,??Update_1
   \   00000030   0020D2E7           LDRB     R2,[R2, R0]
   \   00000034   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??Update_1:
   \   00000038   66021C11           DC8      +102,+2,+28,+17
   \   0000003C   28345042           DC8      +40,+52,+80,+66
   \   00000040   616D8700           DC8      +97,+109,+135,+0
    130                  case Float_B_Endian:
    131                      {
    132                          float OutVal = GetOutputValFloat();
   \                     ??Update_3:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       ??GetOutputValFloat
   \   0000004C   00008DE5           STR      R0,[SP, #+0]
    133                          U16 *OutValPtr = (U16*)&OutVal;
    134                          tmpPtr->SetRegister(Channel+1,OutValPtr[0]);
   \   00000050   B020DDE1           LDRH     R2,[SP, #+0]
   \   00000054   040096E7           LDR      R0,[R6, +R4]
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   011080E2           ADD      R1,R0,#+1
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     ??SetRegister,??SetRegister??rA
    135                          tmpPtr->SetRegister(Channel  ,OutValPtr[1]);
   \   00000068   0030A0E3           MOV      R3,#+0
   \                     ??Update_4:
   \   0000006C   B220DDE1           LDRH     R2,[SP, #+2]
   \                     ??Update_5:
   \   00000070   041096E7           LDR      R1,[R6, +R4]
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           _BLF     ??SetRegister,??SetRegister??rA
   \   0000007C   8F0000EA           B        ??Update_2
    136                      }
    137                      break;
    138                  case Float_B_Endian_ByteSwap:
    139                      {
    140                          float OutVal = GetOutputValFloat();
   \                     ??Update_6:
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       ??GetOutputValFloat
   \   00000088   00008DE5           STR      R0,[SP, #+0]
    141                          U16 *OutValPtr = (U16*)&OutVal;
    142                          tmpPtr->SetRegister(Channel+1,OutValPtr[0], true);
   \   0000008C   B020DDE1           LDRH     R2,[SP, #+0]
   \   00000090   040096E7           LDR      R0,[R6, +R4]
   \   00000094   0130A0E3           MOV      R3,#+1
   \   00000098   011080E2           ADD      R1,R0,#+1
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     ??SetRegister,??SetRegister??rA
    143                          tmpPtr->SetRegister(Channel  ,OutValPtr[1], true);
   \   000000A4   0130A0E3           MOV      R3,#+1
   \   000000A8   EFFFFFEA           B        ??Update_4
    144                      }
    145                      break;
    146                  case Float_L_Endian:
    147                      {
    148                          float OutVal = GetOutputValFloat();
   \                     ??Update_7:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       ??GetOutputValFloat
   \   000000B4   00008DE5           STR      R0,[SP, #+0]
    149                          U16 *OutValPtr = (U16*)&OutVal;
    150                          tmpPtr->SetRegister(Channel+1,OutValPtr[1], true);
   \   000000B8   B220DDE1           LDRH     R2,[SP, #+2]
   \   000000BC   040096E7           LDR      R0,[R6, +R4]
   \   000000C0   0130A0E3           MOV      R3,#+1
   \   000000C4   011080E2           ADD      R1,R0,#+1
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     ??SetRegister,??SetRegister??rA
    151                          tmpPtr->SetRegister(Channel  ,OutValPtr[0], true);
   \   000000D0   B020DDE1           LDRH     R2,[SP, #+0]
   \   000000D4   0130A0E3           MOV      R3,#+1
   \   000000D8   E4FFFFEA           B        ??Update_5
    152                      }
    153                      break;
    154                  case Float_L_Endian_ByteSwap:
    155                      {
    156                          float OutVal = GetOutputValFloat();
   \                     ??Update_8:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       ??GetOutputValFloat
   \                     ??Update_9:
   \   000000E4   00008DE5           STR      R0,[SP, #+0]
    157                          U16 *OutValPtr = (U16*)&OutVal;
    158                          tmpPtr->SetRegister(Channel+1,OutValPtr[1]);
   \   000000E8   B220DDE1           LDRH     R2,[SP, #+2]
   \   000000EC   040096E7           LDR      R0,[R6, +R4]
   \   000000F0   0030A0E3           MOV      R3,#+0
   \   000000F4   011080E2           ADD      R1,R0,#+1
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   ........           _BLF     ??SetRegister,??SetRegister??rA
    159                          tmpPtr->SetRegister(Channel  ,OutValPtr[0]);
   \   00000100   B020DDE1           LDRH     R2,[SP, #+0]
   \   00000104   0030A0E3           MOV      R3,#+0
   \   00000108   D8FFFFEA           B        ??Update_5
    160                      }
    161                      break;
    162                  case Integer_B_Endian:
    163                      {
    164                          int OutVal = GetOutputVal();
   \                     ??Update_10:
   \   0000010C   A41091E5           LDR      R1,[R1, #+164]
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   0FE0A0E1           MOV      LR,PC
   \   00000118   11FF2FE1           BX       R1
   \   0000011C   00008DE5           STR      R0,[SP, #+0]
    165                          U16 *OutValPtr = (U16*)&OutVal;
    166                          tmpPtr->SetRegister(Channel+1,OutValPtr[0]);
   \   00000120   B020DDE1           LDRH     R2,[SP, #+0]
   \   00000124   040096E7           LDR      R0,[R6, +R4]
   \   00000128   0030A0E3           MOV      R3,#+0
   \   0000012C   011080E2           ADD      R1,R0,#+1
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           _BLF     ??SetRegister,??SetRegister??rA
    167                          tmpPtr->SetRegister(Channel  ,OutValPtr[1]);
   \   00000138   B220DDE1           LDRH     R2,[SP, #+2]
   \                     ??Update_11:
   \   0000013C   0030A0E3           MOV      R3,#+0
   \   00000140   CAFFFFEA           B        ??Update_5
    168                      }
    169                      break;
    170                  case Integer_B_Endian_ByteSwap:
    171                      {
    172                          int OutVal = GetOutputVal();
   \                     ??Update_12:
   \   00000144   A41091E5           LDR      R1,[R1, #+164]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   0FE0A0E1           MOV      LR,PC
   \   00000150   11FF2FE1           BX       R1
   \   00000154   00008DE5           STR      R0,[SP, #+0]
    173                          U16 *OutValPtr = (U16*)&OutVal;
    174                          tmpPtr->SetRegister(Channel+1,OutValPtr[0],true);
   \   00000158   B020DDE1           LDRH     R2,[SP, #+0]
   \   0000015C   040096E7           LDR      R0,[R6, +R4]
   \   00000160   0130A0E3           MOV      R3,#+1
   \   00000164   011080E2           ADD      R1,R0,#+1
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           _BLF     ??SetRegister,??SetRegister??rA
    175                          tmpPtr->SetRegister(Channel  ,OutValPtr[1],true);
   \   00000170   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000174   0130A0E3           MOV      R3,#+1
   \   00000178   BCFFFFEA           B        ??Update_5
    176                      }
    177                      break;
    178                  case Integer_L_Endian:
    179                      {
    180                          int OutVal = GetOutputVal();
   \                     ??Update_13:
   \   0000017C   A41091E5           LDR      R1,[R1, #+164]
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   0FE0A0E1           MOV      LR,PC
   \   00000188   11FF2FE1           BX       R1
   \   0000018C   00008DE5           STR      R0,[SP, #+0]
    181                          U16 *OutValPtr = (U16*)&OutVal;
    182                          tmpPtr->SetRegister(Channel+1,OutValPtr[1], true);
   \   00000190   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000194   040096E7           LDR      R0,[R6, +R4]
   \   00000198   0130A0E3           MOV      R3,#+1
   \   0000019C   011080E2           ADD      R1,R0,#+1
   \   000001A0   0500A0E1           MOV      R0,R5
   \   000001A4   ........           _BLF     ??SetRegister,??SetRegister??rA
    183                          tmpPtr->SetRegister(Channel  ,OutValPtr[0], true);
   \   000001A8   B020DDE1           LDRH     R2,[SP, #+0]
   \   000001AC   041096E7           LDR      R1,[R6, +R4]
   \   000001B0   0130A0E3           MOV      R3,#+1
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   ........           _BLF     ??SetRegister,??SetRegister??rA
   \   000001BC   3F0000EA           B        ??Update_2
    184                      }
    185                      break;
    186                  case Integer_L_Endian_ByteSwap:
    187                      {
    188                          int OutVal = GetOutputVal();
   \                     ??Update_14:
   \   000001C0   A41091E5           LDR      R1,[R1, #+164]
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   0FE0A0E1           MOV      LR,PC
   \   000001CC   11FF2FE1           BX       R1
   \   000001D0   C3FFFFEA           B        ??Update_9
    189                          U16 *OutValPtr = (U16*)&OutVal;
    190                          tmpPtr->SetRegister(Channel+1,OutValPtr[1]);
    191                          tmpPtr->SetRegister(Channel  ,OutValPtr[0]);
    192                      }
    193                      break;
    194                  case Float_None:
    195                      {
    196                          U16 OutVal    = (U16)GetOutputVal();
   \                     ??Update_15:
   \   000001D4   A41091E5           LDR      R1,[R1, #+164]
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   0FE0A0E1           MOV      LR,PC
   \   000001E0   11FF2FE1           BX       R1
   \   000001E4   0028A0E1           MOV      R2,R0, LSL #+16
   \   000001E8   2228A0E1           MOV      R2,R2, LSR #+16
    197                          tmpPtr->SetRegister(Channel,OutVal);
   \   000001EC   D2FFFFEA           B        ??Update_11
    198                      }
    199                      break;
    200                  case String10 :
    201                      {
    202                          AnsiString MyStr = GetOutputString();
   \                     ??Update_16:
   \   000001F0   04108DE2           ADD      R1,SP,#+4
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           BL       ??GetOutputString
    203                          tmpPtr->SetRegisterString(Channel,MyStr,10);
   \   000001FC   0020A0E3           MOV      R2,#+0
   \   00000200   0010A0E3           MOV      R1,#+0
   \   00000204   20008DE2           ADD      R0,SP,#+32
   \   00000208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000020C   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   003090E5           LDR      R3,[R0, #+0]
   \   00000218   04108DE2           ADD      R1,SP,#+4
   \   0000021C   20008DE2           ADD      R0,SP,#+32
   \   00000220   ........           _BLF     ??assign,??assign??rA
   \   00000224   041096E7           LDR      R1,[R6, +R4]
   \   00000228   0A30A0E3           MOV      R3,#+10
   \   0000022C   20208DE2           ADD      R2,SP,#+32
   \   00000230   0500A0E1           MOV      R0,R5
   \   00000234   ........           _BLF     ??SetRegisterString,??SetRegisterString??rA
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   20008DE2           ADD      R0,SP,#+32
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
    204                      }
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   04008DE2           ADD      R0,SP,#+4
   \   00000254   180000EA           B        ??Update_17
    205                      break;
    206                  case String20 :
    207                      {
    208                          AnsiString MyStr = GetOutputString();
   \                     ??Update_18:
   \   00000258   20108DE2           ADD      R1,SP,#+32
   \   0000025C   0400A0E1           MOV      R0,R4
   \   00000260   ........           BL       ??GetOutputString
    209                          tmpPtr->SetRegisterString(Channel,MyStr,20);
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0010A0E3           MOV      R1,#+0
   \   0000026C   04008DE2           ADD      R0,SP,#+4
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000274   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   003090E5           LDR      R3,[R0, #+0]
   \   00000280   20108DE2           ADD      R1,SP,#+32
   \   00000284   04008DE2           ADD      R0,SP,#+4
   \   00000288   ........           _BLF     ??assign,??assign??rA
   \   0000028C   041096E7           LDR      R1,[R6, +R4]
   \   00000290   1430A0E3           MOV      R3,#+20
   \   00000294   04208DE2           ADD      R2,SP,#+4
   \   00000298   0500A0E1           MOV      R0,R5
   \   0000029C   ........           _BLF     ??SetRegisterString,??SetRegisterString??rA
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   04008DE2           ADD      R0,SP,#+4
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
    210                      }
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   20008DE2           ADD      R0,SP,#+32
   \                     ??Update_17:
   \   000002BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    211                      break;
    212                  }
    213              }
    214          }
   \                     ??Update_2:
   \   000002C0   3CD08DE2           ADD      SP,SP,#+60
   \   000002C4                      REQUIRE ?Subroutine14
   \   000002C4                      ;; // Fall through to label ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    215          
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          ModbusRegisterOut& ModbusRegisterOut::operator=(ModbusRegisterOut Src)
    218          {
   \                     `??operator=`:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    219              Name          = Src.Name       ;
   \   00000008   ........           LDR      R0,??DataTable7  ;; ??npos
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0630A0E1           MOV      R3,R6
   \   0000001C   441085E2           ADD      R1,R5,#+68
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??assign,??assign??rA
    220              Description   = Src.Description;
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   7C1085E2           ADD      R1,R5,#+124
   \   00000034   7C0084E2           ADD      R0,R4,#+124
   \   00000038   ........           _BLF     ??assign,??assign??rA
    221          
    222              IPAddress     = Src.IPAddress  ;
   \   0000003C   520FA0E3           MOV      R0,#+328
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   051080E0           ADD      R1,R0,R5
   \   0000004C   040080E0           ADD      R0,R0,R4
   \   00000050   ........           _BLF     ??assign,??assign??rA
    223              TCUAddress    = Src.TCUAddress ;
   \   00000054   590FA0E3           MOV      R0,#+356
   \   00000058   051090E7           LDR      R1,[R0, +R5]
   \   0000005C   041080E7           STR      R1,[R0, +R4]
    224              TCUPortNo     = Src.TCUPortNo  ;
   \   00000060   5A1FA0E3           MOV      R1,#+360
   \   00000064   052091E7           LDR      R2,[R1, +R5]
   \   00000068   042081E7           STR      R2,[R1, +R4]
    225              Address       = Src.Address    ;
   \   0000006C   5B1FA0E3           MOV      R1,#+364
   \   00000070   052091E7           LDR      R2,[R1, +R5]
   \   00000074   042081E7           STR      R2,[R1, +R4]
    226              Channel       = Src.Channel    ;
   \   00000078   5C1FA0E3           MOV      R1,#+368
   \   0000007C   052091E7           LDR      R2,[R1, +R5]
   \   00000080   042081E7           STR      R2,[R1, +R4]
    227          
    228          
    229              MinRange      = Src.MinRange   ;
   \   00000084   5F1FA0E3           MOV      R1,#+380
   \   00000088   052091E7           LDR      R2,[R1, +R5]
   \   0000008C   042081E7           STR      R2,[R1, +R4]
    230              MaxRange      = Src.MaxRange   ;
   \   00000090   601FA0E3           MOV      R1,#+384
   \   00000094   052091E7           LDR      R2,[R1, +R5]
   \   00000098   042081E7           STR      R2,[R1, +R4]
    231              RegMax        = Src.RegMax     ;
   \   0000009C   6A1FA0E3           MOV      R1,#+424
   \   000000A0   052091E7           LDR      R2,[R1, +R5]
   \   000000A4   042081E7           STR      R2,[R1, +R4]
    232              ValueKey      = Src.ValueKey   ;
   \   000000A8   691FA0E3           MOV      R1,#+420
   \   000000AC   052091E7           LDR      R2,[R1, +R5]
   \   000000B0   042081E7           STR      R2,[R1, +R4]
    233              RefObjectId   = Src.RefObjectId   ;
   \   000000B4   671FA0E3           MOV      R1,#+412
   \   000000B8   052091E7           LDR      R2,[R1, +R5]
   \   000000BC   042081E7           STR      R2,[R1, +R4]
    234          
    235              Scale             = Src.Scale            ;
   \   000000C0   621FA0E3           MOV      R1,#+392
   \   000000C4   052091E7           LDR      R2,[R1, +R5]
   \   000000C8   042081E7           STR      R2,[R1, +R4]
    236              Offset            = Src.Offset           ;
   \   000000CC   631FA0E3           MOV      R1,#+396
   \   000000D0   052091E7           LDR      R2,[R1, +R5]
   \   000000D4   042081E7           STR      R2,[R1, +R4]
    237              HasSign           = Src.HasSign          ;
   \   000000D8   611FA0E3           MOV      R1,#+388
   \   000000DC   0520D1E7           LDRB     R2,[R1, +R5]
   \   000000E0   0420C1E7           STRB     R2,[R1, +R4]
    238              HasDecimalScaling = Src.HasDecimalScaling;
   \   000000E4   661FA0E3           MOV      R1,#+408
   \   000000E8   0520D1E7           LDRB     R2,[R1, +R5]
   \   000000EC   0420C1E7           STRB     R2,[R1, +R4]
    239              ModbusDataFormat   = Src.ModbusDataFormat  ;
   \   000000F0   351080E2           ADD      R1,R0,#+53
   \   000000F4   0520D1E7           LDRB     R2,[R1, +R5]
   \   000000F8   0420C1E7           STRB     R2,[R1, +R4]
    240              HasRange          = Src.HasRange         ;
   \   000000FC   361080E2           ADD      R1,R0,#+54
   \   00000100   0520D1E7           LDRB     R2,[R1, +R5]
   \   00000104   0420C1E7           STRB     R2,[R1, +R4]
    241              DecimalPoint      = Src.DecimalPoint     ;
   \   00000108   651FA0E3           MOV      R1,#+404
   \   0000010C   052091E7           LDR      R2,[R1, +R5]
   \   00000110   042081E7           STR      R2,[R1, +R4]
    242              DecimalScaling    = Src.DecimalScaling   ;
   \   00000114   641FA0E3           MOV      R1,#+400
   \   00000118   052091E7           LDR      R2,[R1, +R5]
   \   0000011C   042081E7           STR      R2,[R1, +R4]
    243              if ((TCUAddress==CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU)) {
   \   00000120   34109FE5           LDR      R1,`??operator=_1`  ;; CurrentDeviceAddress
   \   00000124   040090E7           LDR      R0,[R0, +R4]
   \   00000128   F010D1E1           LDRSH    R1,[R1, #+0]
   \   0000012C   010050E1           CMP      R0,R1
   \   00000130   28009F05           LDREQ    R0,`??operator=_1`+0x4  ;; CurrentDeviceId
   \   00000134   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   00000138   20005003           CMPEQ    R0,#+32
   \   0000013C   0300001A           BNE      `??operator=_2`
    244                  MyModbusSet.insert(this);
   \   00000140   1C109FE5           LDR      R1,`??operator=_1`+0x8  ;; ??MyModbusSet
   \   00000144   0420A0E1           MOV      R2,R4
   \   00000148   0D00A0E1           MOV      R0,SP
   \   0000014C   ........           _BLF     ??insert_1,??insert??rA_1
    245              }
    246              return *this;
   \                     `??operator=_2`:
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000158   1EFF2FE1           BX       LR               ;; return
   \                     `??operator=_1`:
   \   0000015C   ........           DC32     CurrentDeviceAddress
   \   00000160   ........           DC32     CurrentDeviceId
   \   00000164   ........           DC32     ??MyModbusSet
    247          }
    248          

   \                                 In segment CODE, align 4, keep-with-next
    249          void ModbusRegisterOut::UpdateFromMultiple(unsigned pIdNumber, int pChannel)
    250          {
   \                     ??UpdateFromMultiple:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    251              Channel +=  pChannel;
   \   00000008   5C5FA0E3           MOV      R5,#+368
   \   0000000C   040095E7           LDR      R0,[R5, +R4]
    252              RefObjectId = pIdNumber;
   \   00000010   676FA0E3           MOV      R6,#+412
   \   00000014   000082E0           ADD      R0,R2,R0
   \   00000018   040085E7           STR      R0,[R5, +R4]
   \   0000001C   041086E7           STR      R1,[R6, +R4]
    253              ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel,RefObjectId);
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   02002DE9           PUSH     {R1}
   \   00000028   041096E7           LDR      R1,[R6, +R4]
   \   0000002C   597FA0E3           MOV      R7,#+356
   \   00000030   5A8FA0E3           MOV      R8,#+360
   \   00000034   5B9FA0E3           MOV      R9,#+364
   \   00000038   02002DE9           PUSH     {R1}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   A03094E5           LDR      R3,[R4, #+160]
   \   00000044   042099E7           LDR      R2,[R9, +R4]
   \   00000048   041098E7           LDR      R1,[R8, +R4]
   \   0000004C   040097E7           LDR      R0,[R7, +R4]
   \   00000050   FF2002E2           AND      R2,R2,#0xFF
   \   00000054   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000058   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000005C   FF0000E2           AND      R0,R0,#0xFF
   \   00000060   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    254              if (ModbusDataFormat) { // Check if two registers are required
   \   00000064   9901D4E5           LDRB     R0,[R4, #+409]
   \   00000068   0CD08DE2           ADD      SP,SP,#+12
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   1000000A           BEQ      ??UpdateFromMultiple_1
    255                  ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel + 1,RefObjectId);
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   040096E7           LDR      R0,[R6, +R4]
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   040095E7           LDR      R0,[R5, +R4]
   \   00000088   010080E2           ADD      R0,R0,#+1
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   A03094E5           LDR      R3,[R4, #+160]
   \   00000094   042099E7           LDR      R2,[R9, +R4]
   \   00000098   041098E7           LDR      R1,[R8, +R4]
   \   0000009C   040097E7           LDR      R0,[R7, +R4]
   \   000000A0   FF2002E2           AND      R2,R2,#0xFF
   \   000000A4   0118A0E1           MOV      R1,R1, LSL #+16
   \   000000A8   2118A0E1           MOV      R1,R1, LSR #+16
   \   000000AC   FF0000E2           AND      R0,R0,#0xFF
   \   000000B0   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
    256              }
    257          }
   \                     ??UpdateFromMultiple_1:
   \   000000B8   F043BDE8           POP      {R4-R9,LR}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
    258          
    259          

   \                                 In segment CODE, align 4, keep-with-next
    260          AnsiString ModbusRegisterOut::GetRegisterValue(void) {
   \                     ??GetRegisterValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    261              AnsiString Result;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
    262              //Result.sprintf("%8.3f",GetOutputValFloat());
    263              Result = LibGetValue(ValueKey, ObjPtr);
   \   00000018   A02194E5           LDR      R2,[R4, #+416]
   \   0000001C   A41194E5           LDR      R1,[R4, #+420]
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   0000002C   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   003090E5           LDR      R3,[R0, #+0]
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           _BLF     ??assign,??assign??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
    264          	return Result;
   \   00000054                      REQUIRE ?Subroutine13
   \   00000054                      ;; // Fall through to label ?Subroutine13
    265          }
    266          
    267          //---------------------------------------------------------------------------
    268          
    269          

   \                                 In segment CODE, align 4, keep-with-next
    270          void ModbusRegisterOut::SetProList(void) {
   \                     ??SetProList:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    271              ObjPtr = (PRogramObject *)FindPROFromIDNumber(RefObjectId);
   \   0000000C   676FA0E3           MOV      R6,#+412
   \   00000010   040096E7           LDR      R0,[R6, +R4]
   \   00000014   685FA0E3           MOV      R5,#+416
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000020   040085E7           STR      R0,[R5, +R4]
    272              if (!ObjPtr) {
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2C00001A           BNE      ??SetProList_1
    273                  AnsiString InfoStr;
   \   0000002C   38008DE2           ADD      R0,SP,#+56
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
    274                  if (IsCreatedFromMultiple) {
   \   00000034   7801D4E5           LDRB     R0,[R4, #+376]
   \   00000038   A8209FE5           LDR      R2,??SetProList_2  ;; `?<Constant "Created by ModbusMult...">`
   \   0000003C   043096E7           LDR      R3,[R6, +R4]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0400000A           BEQ      ??SetProList_3
    275                      InfoStr.cat_sprintf("Created by ModbusMultiple (Line number %i): ModbusRegisterOut RefIDNumber %i (0x%0x) is incorrect", LineNumber, RefObjectId,RefObjectId);
   \   00000048   0300A0E1           MOV      R0,R3
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   08002DE9           PUSH     {R3}
   \   00000054   043094E5           LDR      R3,[R4, #+4]
   \   00000058   040000EA           B        ??SetProList_4
    276                  } else {
    277                      InfoStr.cat_sprintf("ModbusRegisterOut RefIDNumber %i (0x%0x) is incorrect. Line Number %i", RefObjectId, RefObjectId,LineNumber);
   \                     ??SetProList_3:
   \   0000005C   040094E5           LDR      R0,[R4, #+4]
   \   00000060   642082E2           ADD      R2,R2,#+100
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0300A0E1           MOV      R0,R3
   \   0000006C   01002DE9           PUSH     {R0}
   \                     ??SetProList_4:
   \   00000070   08108DE2           ADD      R1,SP,#+8
   \   00000074   40008DE2           ADD      R0,SP,#+64
   \   00000078   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   08008DE2           ADD      R0,SP,#+8
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   08D08DE2           ADD      SP,SP,#+8
    278                  }
    279                  GiveConfigWarning(InfoStr);
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   1C008DE2           ADD      R0,SP,#+28
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A0   ........           LDR      R0,??DataTable7  ;; ??npos
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   003090E5           LDR      R3,[R0, #+0]
   \   000000AC   38108DE2           ADD      R1,SP,#+56
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     ??assign,??assign??rA
   \   000000B8   1C008DE2           ADD      R0,SP,#+28
   \   000000BC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   1C008DE2           ADD      R0,SP,#+28
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    280              }
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   38008DE2           ADD      R0,SP,#+56
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    281          
    282          }
   \                     ??SetProList_1:
   \   000000E0   54D08DE2           ADD      SP,SP,#+84
   \   000000E4   ........           B        ?Subroutine14
   \                     ??SetProList_2:
   \   000000E8   ........           DC32     `?<Constant "Created by ModbusMult...">`

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error">`:
   \   00000000   4572726F7200       DC8 "Error"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   6520284C696E       DC8 65H, 20H, 28H, 4CH, 69H, 6EH, 65H, 20H
   \              6520        
   \   00000020   6E756D626572       DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000028   69293A204D6F       DC8 69H, 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H
   \              6462        
   \   00000030   757352656769       DC8 75H, 73H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000038   65724F757420       DC8 65H, 72H, 4FH, 75H, 74H, 20H, 52H, 65H
   \              5265        
   \   00000040   6649444E756D       DC8 66H, 49H, 44H, 4EH, 75H, 6DH, 62H, 65H
   \              6265        
   \   00000048   722025692028       DC8 72H, 20H, 25H, 69H, 20H, 28H, 30H, 78H
   \              3078        
   \   00000050   253078292069       DC8 25H, 30H, 78H, 29H, 20H, 69H, 73H, 20H
   \              7320        
   \   00000058   696E636F7272       DC8 69H, 6EH, 63H, 6FH, 72H, 72H, 65H, 63H
   \              6563        
   \   00000060   7400               DC8 74H, 0
   \   00000062   0000               DC8 0, 0
   \   00000064   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 52H, 65H
   \              5265        
   \   0000006C   676973746572       DC8 67H, 69H, 73H, 74H, 65H, 72H, 4FH, 75H
   \              4F75        
   \   00000074   742052656649       DC8 74H, 20H, 52H, 65H, 66H, 49H, 44H, 4EH
   \              444E        
   \   0000007C   756D62657220       DC8 75H, 6DH, 62H, 65H, 72H, 20H, 25H, 69H
   \              2569        
   \   00000084   202830782530       DC8 20H, 28H, 30H, 78H, 25H, 30H, 78H, 29H
   \              7829        
   \   0000008C   20697320696E       DC8 20H, 69H, 73H, 20H, 69H, 6EH, 63H, 6FH
   \              636F        
   \   00000094   72726563742E       DC8 72H, 72H, 65H, 63H, 74H, 2EH, 20H, 4CH
   \              204C        
   \   0000009C   696E65204E75       DC8 69H, 6EH, 65H, 20H, 4EH, 75H, 6DH, 62H
   \              6D62        
   \   000000A4   657220256900       DC8 65H, 72H, 20H, 25H, 69H, 0
   \   000000AA   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegisterOut &ModbusRegisterOut::new ModbusRegisterOut(bool, int, bool)
   \                     `??new ModbusRegisterOut`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   6B0FA0E3           MOV      R0,#+428
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new ModbusRegisterOut_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??ModbusRegisterOut
   \                     `??new ModbusRegisterOut_1`:
   \   00000030   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??npos
    283          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusRegisterOut::CalculateScale()
                                       24
     ModbusRegisterOut::GetOutputString()
                                       40
     ModbusRegisterOut::GetOutputVal()
                                       36
     ModbusRegisterOut::GetOutputValFloat()
                                       24
     ModbusRegisterOut::GetRegisterValue()
                                       40
     ModbusRegisterOut::ModbusRegisterOut(bool, int, bool)
                                       32
     ModbusRegisterOut::SetProList()
                                      108
     ModbusRegisterOut::Update()       76
     ModbusRegisterOut::UpdateFromMultiple(unsigned int, int)
                                       40
     ModbusRegisterOut::new ModbusRegisterOut(bool, int, bool)
                                       16
     ModbusRegisterOut::operator=(ModbusRegisterOut)
                                       24
     ModbusRegisterOut::~ModbusRegisterOut()
                                       12
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     set<PRogramObjectBase *>::~set()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     ModbusRegisterOut::ModbusSet     24
     ModbusRegisterOut::ModbusRegisterOut(bool, int, bool)
                                      96
     ModbusRegisterOut::~ModbusRegisterOut()
                                      48
     ?Subroutine13                    12
     ModbusRegisterOut::CalculateScale()
                                     136
     ModbusRegisterOut::GetOutputVal()
                                     440
     ModbusRegisterOut::GetOutputValFloat()
                                     140
     ModbusRegisterOut::GetOutputString()
                                     136
     ModbusRegisterOut::Update()     708
     ?Subroutine14                     8
     ModbusRegisterOut::operator=(ModbusRegisterOut)
                                     360
     ModbusRegisterOut::UpdateFromMultiple(unsigned int, int)
                                     192
     ModbusRegisterOut::GetRegisterValue()
                                      84
     ModbusRegisterOut::SetProList()
                                     236
     ?<Constant "Error">               8
     ?<Constant "Created by ModbusMult...">
                                     172
     ModbusRegisterOut::new ModbusRegisterOut(bool, int, bool)
                                      52
     __sti__routine()                 56
     ??DataTable1                      4
     ??DataTable7                      4
      Others                         768

 
 4 632 bytes in segment CODE
   360 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 716 bytes of CODE  memory (+ 1 932 bytes shared)
   360 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
