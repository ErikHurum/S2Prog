##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AnsiString.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\AnsiString.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AnsiString.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AnsiString.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AnsiString.cpp
      1          
      2          
      3          #include <stdlib.h>
      4          #include <stdio.h>
      5          
      6          #include "TSNConstants.h"
      7          #include "TSNUtilities.h"
      8          #include "AnsiString.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_2    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_2:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(char const *)
   \                     ??string_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     strlen,??strlen??rA
   \   00000020   0020A0E1           MOV      R2,R0
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign_1,??assign??rA_1
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char const *string::c_str() const
   \                     ??c_str:
   \   00000000   181090E5           LDR      R1,[R0, #+24]
   \   00000004   100051E3           CMP      R1,#+16
   \   00000008   04009025           LDRCS    R0,[R0, #+4]
   \   0000000C   1EFF2F21           BXCS     LR
   \   00000010   040080E2           ADD      R0,R0,#+4
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void string::resize(size_t, char)
   \                     ??resize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   143090E5           LDR      R3,[R0, #+20]
   \   00000008   010053E1           CMP      R3,R1
   \   0000000C   0300003A           BCC      ??resize_1
   \   00000010   18209FE5           LDR      R2,??resize_2    ;; ??npos
   \   00000014   002092E5           LDR      R2,[R2, #+0]
   \   00000018   ........           _BLF     ??erase,??erase??rA
   \   0000001C   010000EA           B        ??resize_3
   \                     ??resize_1:
   \   00000020   031041E0           SUB      R1,R1,R3
   \   00000024   ........           _BLF     ??append,??append??rA
   \                     ??resize_3:
   \   00000028   0040BDE8           POP      {LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??resize_2:
   \   00000030   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA_1
   \   00000018   34109FE5           LDR      R1,`??operator+_1`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append_1,??append??rA_1
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA_1
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000054   ........           DC32     ??npos
      9          
     10          ///////////////////////////////////////////////////////////////////////////////////
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          AnsiString::AnsiString():string()			// Null string
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     13          {
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           _BLF     ??_Tidy,??_Tidy??rA
     14          }
   \   00000014   ........           B        ?Subroutine43

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0400A0E1           MOV      R0,R4
   \                     ??Subroutine43_0:
   \   00000004   1040BDE8           POP      {R4,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          AnsiString::AnsiString(const string& S):string(S)	// Copy constructor
   \                     ??AnsiString_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     17          {
   \   00000008   ........           _BLF     ??string,??string??rA_1
     18          }
   \   0000000C                      REQUIRE ?Subroutine43
   \   0000000C                      ;; // Fall through to label ?Subroutine43
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          AnsiString::AnsiString(const char * a):string(a)		// Copy to embedded null
   \                     ??AnsiString_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     21          {
   \   00000008   ........           _BLF     ??string_1,??string??rA
     22          }
   \   0000000C   ........           B        ?Subroutine43
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          AnsiString::AnsiString(const char * a, size_t N):string(a,N)	// Copy past any embedded nulls
   \                     ??AnsiString_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     25          {
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000001C   0620A0E1           MOV      R2,R6
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??assign_1,??assign??rA_1
     26          }
   \   0000002C   ........           B        ?Subroutine44

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0400A0E1           MOV      R0,R4
   \                     ??Subroutine44_0:
   \   00000004   7040BDE8           POP      {R4-R6,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          AnsiString::AnsiString(char c):string(&c)
   \                     ??AnsiString_4:
   \   00000000   ........           B        ?Subroutine42

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine42:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   ........           _BLF     ??string_1,??string??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1240BDE8           POP      {R1,R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
     29          {
     30          }
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          AnsiString::AnsiString(unsigned char c):string((char*)&c)
   \                     ??AnsiString_5:
   \   00000000                      REQUIRE ?Subroutine42
   \   00000000                      ;; // Fall through to label ?Subroutine42
     33          {
     34          }
     35          
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          AnsiString::AnsiString(char c, size_t N):string(N,c)
   \                     ??AnsiString_6:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     38          {
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??assign_2,??assign??rA_2
     39          }
   \   0000002C                      REQUIRE ?Subroutine44
   \   0000002C                      ;; // Fall through to label ?Subroutine44
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          AnsiString::AnsiString(int IntNum)
   \                     ??AnsiString_7:
   \   00000000   ........           B        ?Subroutine40

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine40:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   0A2F8FE2           ADR      R2,??Subroutine40_2  ;; "%i"
   \                     ??Subroutine40_0:
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??sprintf
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine40_1:
   \   00000048   3040BDE8           POP      {R4,R5,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine40_2:
   \   00000050   25690000           DC8      "%i",+0
     42          {
     43          	sprintf("%i",IntNum);
     44          }
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          AnsiString::AnsiString(U32 IntNum)
   \                     ??AnsiString_8:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     47          {
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     ??_Tidy,??_Tidy??rA
     48          	sprintf("%u",IntNum);
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   ........           ADR      R2,??DataTable1  ;; "%u"
   \   00000024   ........           B        ??Subroutine40_0
     49          }
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          AnsiString::AnsiString(unsigned IntNum)
   \                     ??AnsiString_9:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     52          {
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     ??_Tidy,??_Tidy??rA
     53          	sprintf("%u",IntNum);
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   ........           ADR      R2,??DataTable1  ;; "%u"
   \   00000024   ........           B        ??Subroutine40_0
     54          }
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          AnsiString::AnsiString(short IntNum)
   \                     ??AnsiString_10:
   \   00000000                      REQUIRE ?Subroutine40
   \   00000000                      ;; // Fall through to label ?Subroutine40
     58          {
     59          	sprintf("%i",IntNum);
     60          }
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          AnsiString::AnsiString(double FloatNum)
   \                     ??AnsiString_11:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
     63          {
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     ??_Tidy,??_Tidy??rA
     64          	sprintf("%10.4f",FloatNum);
   \   00000020   2C209FE5           LDR      R2,??AnsiString_14  ;; `?<Constant "%10.4f">`
   \   00000024   30002DE9           PUSH     {R4,R5}
   \   00000028   08108DE2           ADD      R1,SP,#+8
   \   0000002C   0800BDE8           POP      {R3}
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           BL       ??sprintf
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   04008DE2           ADD      R0,SP,#+4
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
     65          }
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   20D08DE2           ADD      SP,SP,#+32
   \   00000050   ........           B        ??Subroutine44_0
   \                     ??AnsiString_14:
   \   00000054   ........           DC32     `?<Constant "%10.4f">`
     66          
     67          

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine46:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     68          AnsiString::AnsiString(double FloatNum, int Precision, bool ShowPoint)
   \                     ??AnsiString_12:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0370A0E1           MOV      R7,R3
     69          {
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
     70          	sprintf("%*.3f",Precision,FloatNum);
   \   00000024   2C209FE5           LDR      R2,??AnsiString_15  ;; `?<Constant "%*.3f">`
   \   00000028   30002DE9           PUSH     {R4,R5}
   \   0000002C   0730A0E1           MOV      R3,R7
   \   00000030   08108DE2           ADD      R1,SP,#+8
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           BL       ??sprintf
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   08008DE2           ADD      R0,SP,#+8
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
     71          }
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   24D08DE2           ADD      SP,SP,#+36
   \   00000054   ........           B        ?Subroutine46
   \                     ??AnsiString_15:
   \   00000058   ........           DC32     `?<Constant "%*.3f">`
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          AnsiString::AnsiString(double FloatNum, int Precision, int DecimalPoint)
   \                     ??AnsiString_13:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   34809DE5           LDR      R8,[SP, #+52]
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0370A0E1           MOV      R7,R3
     74          {
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
     75          	sprintf("%*.*f",Precision,DecimalPoint,FloatNum);
   \   00000028   ........           LDR      R2,??DataTable3  ;; `?<Constant "%*.*f">`
   \   0000002C   30002DE9           PUSH     {R4,R5}
   \   00000030   00012DE9           PUSH     {R8}
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0C108DE2           ADD      R1,SP,#+12
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           BL       ??sprintf
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0C008DE2           ADD      R0,SP,#+12
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
     76          }
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   28D08DE2           ADD      SP,SP,#+40
   \   0000005C   F041BDE8           POP      {R4-R8,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          AnsiString AnsiString::FloatToStrF(double value, TStringFloatFormat format, int Precision, int digits)
     79          {
   \                     ??FloatToStrF:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   70D04DE2           SUB      SP,SP,#+112
   \   00000008   8C709DE5           LDR      R7,[SP, #+140]
   \   0000000C   90909DE5           LDR      R9,[SP, #+144]
   \   00000010   0060A0E1           MOV      R6,R0
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0380A0E1           MOV      R8,R3
     80          	AnsiString TempString;
   \   00000020   ........           BL       ??AnsiString
     81          	switch ( format ) {
   \   00000024   ........           LDR      R2,??DataTable3  ;; `?<Constant "%*.*f">`
   \   00000028   028058E2           SUBS     R8,R8,#+2
   \   0000002C   3200001A           BNE      ??FloatToStrF_1
     82          	case sffFixed:
     83          		{
     84          			TempString.sprintf("%*.*f",Precision,digits,value);
   \   00000030   30002DE9           PUSH     {R4,R5}
   \   00000034   00022DE9           PUSH     {R9}
   \   00000038   0730A0E1           MOV      R3,R7
   \   0000003C   60108DE2           ADD      R1,SP,#+96
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           BL       ??sprintf
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   60008DE2           ADD      R0,SP,#+96
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
     85          			int LengthAdjust     = Precision - (int)TempString.length();
   \   00000058   140096E5           LDR      R0,[R6, #+20]
     86          			if ( LengthAdjust > 0 ) {
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12
   \   00000060   002047E0           SUB      R2,R7,R0
   \   00000064   010052E3           CMP      R2,#+1
   \   00000068   1C0000BA           BLT      ??FloatToStrF_2
     87          				AnsiString AdjustString(' ',size_t(LengthAdjust));
   \   0000006C   2010A0E3           MOV      R1,#+32
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           BL       ??AnsiString_6
     88          				TempString = AdjustString+TempString;
   \   00000078   0620A0E1           MOV      R2,R6
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   1C008DE2           ADD      R0,SP,#+28
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   1C108DE2           ADD      R1,SP,#+28
   \   0000008C   38008DE2           ADD      R0,SP,#+56
   \   00000090   ........           BL       ??AnsiString_1
   \   00000094   ........           LDR      R1,??DataTable5  ;; ??npos
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   003091E5           LDR      R3,[R1, #+0]
   \   000000A0   0010A0E1           MOV      R1,R0
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           _BLF     ??assign,??assign??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   38008DE2           ADD      R0,SP,#+56
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   1C008DE2           ADD      R0,SP,#+28
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
     89          			} else if ( LengthAdjust < 0 ) {
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   110000EA           B        ??FloatToStrF_3
   \                     ??FloatToStrF_2:
   \   000000E0   000052E3           CMP      R2,#+0
   \   000000E4   0F00005A           BPL      ??FloatToStrF_3
     90          				TempString.resize(Precision);
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   0600A0E1           MOV      R0,R6
   \   000000F4   ........           _BLF     ??resize,??resize??rA
   \   000000F8   0A0000EA           B        ??FloatToStrF_3
     91          			}
     92          		}
     93          		break;
     94          	case sffNumber:
     95          		{
     96          			TempString.sprintf("%*.*f",Precision,digits,value);
     97          		}
     98          		break;
     99          	default:
    100          		{
    101          			TempString.sprintf("%*.*f",Precision,digits,value);
   \                     ??FloatToStrF_1:
   \   000000FC   30002DE9           PUSH     {R4,R5}
   \   00000100   00022DE9           PUSH     {R9}
   \   00000104   0730A0E1           MOV      R3,R7
   \   00000108   0C108DE2           ADD      R1,SP,#+12
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110   ........           BL       ??sprintf
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   0C008DE2           ADD      R0,SP,#+12
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0CD08DE2           ADD      SP,SP,#+12
    102          		}
    103          		break;
    104          	}
    105          	return TempString;
   \                     ??FloatToStrF_3:
   \   00000128   70D08DE2           ADD      SP,SP,#+112
   \   0000012C   F043BDE8           POP      {R4-R9,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
    106          }
    107          

   \                                 In segment CODE, align 4, keep-with-next
    108          AnsiString AnsiString::sprintf(char* format, ...)
    109          {
   \                     ??sprintf:
   \   00000000   08002DE9           PUSH     {R3}
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   50DF4DE2           SUB      SP,SP,#+320
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0210A0E1           MOV      R1,R2
    110          	va_list ArgPtr;
    111          	char tmpBuf[4*BUF_SIZE];
    112          	va_start(ArgPtr, format);
   \   00000018   532F8DE2           ADD      R2,SP,#+332
    113          	vsprintf(tmpBuf,format, ArgPtr);
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     vsprintf,??vsprintf??rA
    114          	va_end(ArgPtr);
    115          	assign(tmpBuf);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
    116          	return(*this);
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??string,??string??rA_1
   \   00000048   50DF8DE2           ADD      SP,SP,#+320
   \   0000004C   ........           B        ?Subroutine45
    117          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine45:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   04D08DE2           ADD      SP,SP,#+4
   \   00000008   1EFF2FE1           BX       LR               ;; return
    118          
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          int AnsiString::AnsiCompareIC(AnsiString MyWord)
    121          {
   \                     ??AnsiCompareIC:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
    122          	return(stricmp((char*)c_str(),(char*)MyWord.c_str()));
   \   0000000C   ........           _BLF     ??c_str,??c_str??rA
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??c_str,??c_str??rA
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   ........           _BLF     ??stricmp,??stricmp??rA
   \   00000024   ........           B        ??Subroutine40_1
    123          }
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          int AnsiString::Length(void)
    126          {
    127          	return(length());
   \                     ??Length:
   \   00000000   140090E5           LDR      R0,[R0, #+20]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    128          }
    129          

   \                                 In segment CODE, align 4, keep-with-next
    130          AnsiString AnsiString::SetLength(int NewLength)
    131          {
   \                     ??SetLength:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0210A0E1           MOV      R1,R2
    132          	resize(NewLength,' ');
   \   00000010   2020A0E3           MOV      R2,#+32
   \   00000014   ........           _BLF     ??resize,??resize??rA
    133          	return(*this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??string,??string??rA_1
   \   00000024   ........           B        ??Subroutine40_1
    134          }
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          AnsiString AnsiString::StringOfChar(char ch, int count)
    137          {
   \                     ??StringOfChar:
   \   00000000   00402DE9           PUSH     {LR}
    138          	AnsiString TmpStr(ch, (size_t) count);
   \   00000004   ........           BL       ??AnsiString_6
    139          	return(TmpStr);
   \   00000008                      REQUIRE ?Subroutine47
   \   00000008                      ;; // Fall through to label ?Subroutine47
    140          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine47:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    141          
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          bool AnsiString::IsEmpty(void)
    144          {
    145          	//return(bool)!length();
    146          	return(empty());
   \                     ??IsEmpty:
   \   00000000   140090E5           LDR      R0,[R0, #+20]
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0100A003           MOVEQ    R0,#+1
   \   0000000C   1EFF2F01           BXEQ     LR
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    147          }
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          int AnsiString::AnsiPos(AnsiString SubStr)
    150          {
   \                     ??AnsiPos:
   \   00000000   00402DE9           PUSH     {LR}
    151          	return(int)find(SubStr);
   \   00000004   182091E5           LDR      R2,[R1, #+24]
   \   00000008   143091E5           LDR      R3,[R1, #+20]
   \   0000000C   100052E3           CMP      R2,#+16
   \   00000010   04C09125           LDRCS    R12,[R1, #+4]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   04C08132           ADDCC    R12,R1,#+4
   \   0000001C   0C10A0E1           MOV      R1,R12
   \   00000020   ........           _BLF     ??find,??find??rA
   \   00000024   ........           B        ?Subroutine47
    152          }
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          AnsiString AnsiString::Insert(AnsiString SubStr, int start)
    155          {
   \                     ??Insert:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0310A0E1           MOV      R1,R3
    156          	return(insert(start,SubStr));
   \   0000000C   ........           LDR      R3,??DataTable5  ;; ??npos
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   ........           _BLF     ??insert,??insert??rA
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??AnsiString_1
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
    157          }
    158          

   \                                 In segment CODE, align 4, keep-with-next
    159          AnsiString AnsiString::SubString(int index, int count)
    160          {
   \                     ??SubString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    161          	if ( !count ) {
   \   00000018   1700001A           BNE      ??SubString_1
    162          		count = length() - index;
   \   0000001C   140094E5           LDR      R0,[R4, #+20]
   \   00000020   067040E0           SUB      R7,R0,R6
    163          		if ( count > 0 ) {
   \   00000024   010057E3           CMP      R7,#+1
   \   00000028   0F0000BA           BLT      ??SubString_2
    164          			return(substr(index,count));
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000003C   0730A0E1           MOV      R3,R7
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           BL       ??AnsiString_1
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   120000EA           B        ??SubString_3
    165          		} else {
    166          			return("");
   \                     ??SubString_2:
   \   0000006C   141F8FE2           ADR      R1,??SubString_4  ;; ""
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       ??AnsiString_2
   \   00000078   0F0000EA           B        ??SubString_5
    167          		}
    168          	}
    169          	return(substr(index,count));
   \                     ??SubString_1:
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   1C008DE2           ADD      R0,SP,#+28
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0730A0E1           MOV      R3,R7
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0410A0E1           MOV      R1,R4
   \   00000098   1C008DE2           ADD      R0,SP,#+28
   \   0000009C   ........           _BLF     ??assign,??assign??rA
   \   000000A0   1C108DE2           ADD      R1,SP,#+28
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       ??AnsiString_1
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   1C008DE2           ADD      R0,SP,#+28
   \                     ??SubString_3:
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SubString_5:
   \   000000BC   38D08DE2           ADD      SP,SP,#+56
   \   000000C0   ........           B        ?Subroutine46
   \                     ??SubString_4:
   \   000000C4   00000000           DC8      "",+0,+0,+0
    170          }
    171          
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          AnsiString AnsiString::cat_sprintf(const char* format, ...)
    174          {
   \                     ??cat_sprintf:
   \   00000000   08002DE9           PUSH     {R3}
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   A0D04DE2           SUB      SP,SP,#+160
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0210A0E1           MOV      R1,R2
    175          	va_list ArgPtr;
    176          	char tmpBuf[2*BUF_SIZE];
    177          	va_start(ArgPtr, format);
   \   00000018   AC208DE2           ADD      R2,SP,#+172
    178          	vsprintf(tmpBuf,format, ArgPtr);
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     vsprintf,??vsprintf??rA
    179          	va_end(ArgPtr);
    180          	append(tmpBuf);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??append_2,??append??rA_2
    181          	return(*this);
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??string,??string??rA_1
   \   00000048   A0D08DE2           ADD      SP,SP,#+160
   \   0000004C                      REQUIRE ?Subroutine45
   \   0000004C                      ;; // Fall through to label ?Subroutine45
    182          }
    183          
    184          

   \                                 In segment CODE, align 4, keep-with-next
    185          AnsiString AnsiString::UpperCase(void)
    186          {
   \                     ??UpperCase:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   A0D04DE2           SUB      SP,SP,#+160
   \   00000008   0140A0E1           MOV      R4,R1
    187          	char tmpBuf[2*BUF_SIZE];
    188          	int Len = length();
    189          	strncpy(tmpBuf,c_str(),2*BUF_SIZE);
   \   0000000C   ........           _BLF     ??c_str,??c_str??rA
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   A020A0E3           MOV      R2,#+160
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     strncpy,??strncpy??rA
    190          	tmpBuf[2*BUF_SIZE-1] = 0; 
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   9F10CDE5           STRB     R1,[SP, #+159]
    191          	int i=0;
   \   00000028   000000EA           B        ??UpperCase_1
    192          	while (tmpBuf[i]) {
    193          		tmpBuf[i] = toupper(tmpBuf[i]);
   \                     ??UpperCase_2:
   \   0000002C   0000CDE5           STRB     R0,[SP, #+0]
   \                     ??UpperCase_1:
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0500000A           BEQ      ??UpperCase_3
   \   0000003C   610050E3           CMP      R0,#+97
   \   00000040   F9FFFFBA           BLT      ??UpperCase_2
   \   00000044   7B0050E3           CMP      R0,#+123
   \   00000048   F7FFFFAA           BGE      ??UpperCase_2
   \   0000004C   200040E2           SUB      R0,R0,#+32
   \   00000050   F5FFFFEA           B        ??UpperCase_2
    194          	}
    195          	return(AnsiString(tmpBuf));
   \                     ??UpperCase_3:
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       ??AnsiString_2
   \   00000060   A0D08DE2           ADD      SP,SP,#+160
   \   00000064   ........           B        ??Subroutine43_0
    196          }

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   256900             DC8 "%i"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%10.4f">`:
   \   00000000   2531302E3466       DC8 "%10.4f"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%*.3f">`:
   \   00000000   252A2E336600       DC8 "%*.3f"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%*.*f">`:
   \   00000000   252A2E2A6600       DC8 "%*.*f"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(unsigned char)
   \                     `??new AnsiString`:
   \   00000000   ........           B        ?Subroutine41

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(double, int, int)
   \                     `??new AnsiString_1`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1C00A0E3           MOV      R0,#+28
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   00C0B0E1           MOVS     R12,R0
   \   00000020   0600000A           BEQ      `??new AnsiString_14`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??AnsiString_13
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   000000EA           B        `??new AnsiString_15`
   \                     `??new AnsiString_14`:
   \   00000040   0000A0E3           MOV      R0,#+0
   \                     `??new AnsiString_15`:
   \   00000044   ........           B        ?Subroutine46

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString()
   \                     `??new AnsiString_2`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   1C00A0E3           MOV      R0,#+28
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AnsiString_16`
   \   00000014   ........           BL       ??AnsiString
   \                     `??new AnsiString_16`:
   \   00000018   ........           B        ?Subroutine47

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(string const &)
   \                     `??new AnsiString_3`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_17`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_1
   \                     `??new AnsiString_17`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(char const *)
   \                     `??new AnsiString_4`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_18`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_2
   \                     `??new AnsiString_18`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(char const *, size_t)
   \                     `??new AnsiString_5`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   1C00A0E3           MOV      R0,#+28
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AnsiString_19`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AnsiString_3
   \                     `??new AnsiString_19`:
   \   00000028   ........           B        ??Subroutine40_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(char)
   \                     `??new AnsiString_6`:
   \   00000000                      REQUIRE ?Subroutine41
   \   00000000                      ;; // Fall through to label ?Subroutine41

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine41:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0200000A           BEQ      ??Subroutine41_0
   \   00000018   0040CDE5           STRB     R4,[SP, #+0]
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   ........           _BLF     ??string_1,??string??rA
   \                     ??Subroutine41_0:
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   3240BDE8           POP      {R1,R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(char, size_t)
   \                     `??new AnsiString_7`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   1C00A0E3           MOV      R0,#+28
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AnsiString_20`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AnsiString_6
   \                     `??new AnsiString_20`:
   \   00000028   ........           B        ??Subroutine40_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(int)
   \                     `??new AnsiString_8`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_21`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_7
   \                     `??new AnsiString_21`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(unsigned long)
   \                     `??new AnsiString_9`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_22`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_8
   \                     `??new AnsiString_22`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(unsigned int)
   \                     `??new AnsiString_10`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_23`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_9
   \                     `??new AnsiString_23`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(short)
   \                     `??new AnsiString_11`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1C00A0E3           MOV      R0,#+28
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AnsiString_24`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AnsiString_10
   \                     `??new AnsiString_24`:
   \   00000020   ........           B        ??Subroutine43_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(double)
   \                     `??new AnsiString_12`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   1C00A0E3           MOV      R0,#+28
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   0030B0E1           MOVS     R3,R0
   \   00000018   0300000A           BEQ      `??new AnsiString_25`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AnsiString_11
   \   00000028   000000EA           B        `??new AnsiString_26`
   \                     `??new AnsiString_25`:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \                     `??new AnsiString_26`:
   \   00000030   ........           B        ??Subroutine40_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::new AnsiString(double, int, bool)
   \                     `??new AnsiString_13`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1C00A0E3           MOV      R0,#+28
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   00C0B0E1           MOVS     R12,R0
   \   00000020   0600000A           BEQ      `??new AnsiString_27`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??AnsiString_12
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \   0000003C   000000EA           B        `??new AnsiString_28`
   \                     `??new AnsiString_27`:
   \   00000040   0000A0E3           MOV      R0,#+0
   \                     `??new AnsiString_28`:
   \   00000044                      REQUIRE ?Subroutine46
   \   00000044                      ;; // Fall through to label ?Subroutine46

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   25750000           DC8      "%u",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant "%*.*f">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos
    197          
    198          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiCompareIC(AnsiString)
                                       12
     AnsiString::AnsiPos(AnsiString)
                                        4
     AnsiString::AnsiString()           8
     AnsiString::AnsiString(char const *)
                                        8
     AnsiString::AnsiString(char const *, size_t)
                                       16
     AnsiString::AnsiString(char)      12
     AnsiString::AnsiString(char, size_t)
                                       16
     AnsiString::AnsiString(double)    52
     AnsiString::AnsiString(double, int, bool)
                                       56
     AnsiString::AnsiString(double, int, int)
                                       64
     AnsiString::AnsiString(int)       40
     AnsiString::AnsiString(short)     40
     AnsiString::AnsiString(string const &)
                                        8
     AnsiString::AnsiString(unsigned char)
                                       12
     AnsiString::AnsiString(unsigned int)
                                       40
     AnsiString::AnsiString(unsigned long)
                                       40
     AnsiString::FloatToStrF(double, AnsiString::TStringFloatFormat, int, int)
                                      152
     AnsiString::Insert(AnsiString, int)
                                       12
     AnsiString::IsEmpty()              0
     AnsiString::Length()               0
     AnsiString::SetLength(int)        12
     AnsiString::StringOfChar(char, int)
                                        4
     AnsiString::SubString(int, int)
                                       76
     AnsiString::UpperCase()          168
     AnsiString::cat_sprintf(char const *, ...)
                                      172
     AnsiString::new AnsiString()       4
     AnsiString::new AnsiString(char const *)
                                        8
     AnsiString::new AnsiString(char const *, size_t)
                                       12
     AnsiString::new AnsiString(char)
                                       16
     AnsiString::new AnsiString(char, size_t)
                                       12
     AnsiString::new AnsiString(double)
                                       12
     AnsiString::new AnsiString(double, int, bool)
                                       24
     AnsiString::new AnsiString(double, int, int)
                                       24
     AnsiString::new AnsiString(int)
                                        8
     AnsiString::new AnsiString(short)
                                        8
     AnsiString::new AnsiString(string const &)
                                        8
     AnsiString::new AnsiString(unsigned char)
                                       16
     AnsiString::new AnsiString(unsigned int)
                                        8
     AnsiString::new AnsiString(unsigned long)
                                        8
     AnsiString::sprintf(char *, ...)
                                      332
     operator+(string const &, string const &)
                                       40
     string::c_str() const              0
     string::resize(size_t, char)       4
     string::string(char const *)      12
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     string::string(char const *)     60
     string::c_str() const            24
     string::resize(size_t, char)     52
     operator+(string const &, string const &)
                                      88
     AnsiString::AnsiString()         24
     ?Subroutine43                    12
     AnsiString::AnsiString(string const &)
                                      12
     AnsiString::AnsiString(char const *)
                                      16
     AnsiString::AnsiString(char const *, size_t)
                                      48
     ?Subroutine44                    12
     AnsiString::AnsiString(char)      4
     ?Subroutine42                    28
     AnsiString::AnsiString(unsigned char)
                                       0
     AnsiString::AnsiString(char, size_t)
                                      44
     AnsiString::AnsiString(int)       4
     ?Subroutine40                    84
     AnsiString::AnsiString(unsigned long)
                                      40
     AnsiString::AnsiString(unsigned int)
                                      40
     AnsiString::AnsiString(short)     0
     AnsiString::AnsiString(double)   88
     ?Subroutine46                     8
     AnsiString::AnsiString(double, int, bool)
                                      92
     AnsiString::AnsiString(double, int, int)
                                     100
     AnsiString::FloatToStrF(double, AnsiString::TStringFloatFormat, int, int)
                                     308
     AnsiString::sprintf(char *, ...)
                                      80
     ?Subroutine45                    12
     AnsiString::AnsiCompareIC(AnsiString)
                                      40
     AnsiString::Length()              8
     AnsiString::SetLength(int)       40
     AnsiString::StringOfChar(char, int)
                                       8
     ?Subroutine47                     8
     AnsiString::IsEmpty()            24
     AnsiString::AnsiPos(AnsiString)
                                      40
     AnsiString::Insert(AnsiString, int)
                                      52
     AnsiString::SubString(int, int)
                                     200
     AnsiString::cat_sprintf(char const *, ...)
                                      76
     AnsiString::UpperCase()         104
     ?<Constant "%i">                  3
     ?<Constant "%u">                  3
     ?<Constant "%10.4f">              8
     ?<Constant "%*.3f">               8
     ?<Constant "%*.*f">               8
     ?<Constant "">                    1
     AnsiString::new AnsiString(unsigned char)
                                       4
     AnsiString::new AnsiString(double, int, int)
                                      72
     AnsiString::new AnsiString()     28
     AnsiString::new AnsiString(string const &)
                                      36
     AnsiString::new AnsiString(char const *)
                                      36
     AnsiString::new AnsiString(char const *, size_t)
                                      44
     AnsiString::new AnsiString(char)
                                       0
     ?Subroutine41                    48
     AnsiString::new AnsiString(char, size_t)
                                      44
     AnsiString::new AnsiString(int)
                                      36
     AnsiString::new AnsiString(unsigned long)
                                      36
     AnsiString::new AnsiString(unsigned int)
                                      36
     AnsiString::new AnsiString(short)
                                      36
     AnsiString::new AnsiString(double)
                                      52
     AnsiString::new AnsiString(double, int, bool)
                                      68
     ??DataTable1                      4
     ??DataTable3                      4
     ??DataTable5                      4
      Others                         400

 
 2 932 bytes in segment CODE
    31 bytes in segment DATA_C
 
 2 244 bytes of CODE  memory (+ 688 bytes shared)
    31 bytes of CONST memory

Errors: none
Warnings: none
