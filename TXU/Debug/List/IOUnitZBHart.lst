##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\IOUnitZBHart.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\IOUnitZBHart.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\IOUnitZBHart.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\IOUnitZBHart.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\IOUnitZBHart.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          #include "TSNVersion.h"
      8          //---------------------------------------------------------------------------
      9          

   \                                 In segment DATA_I, align 4, align-sorted
     10          ValueList IOUnitZBHart::IOUnitZBHartValueList[] =  {
   \                     ??IOUnitZBHartValueList:
   \   00000000                      DS8 156
   \   0000009C                      REQUIRE `?<Initializer for IOUnitZBHartValueList>`
     11              { L_WORD304, L_WORD237, SVT_BLANK },                              //  {"Unused"       ,"",SVT_BLANK},
     12              { L_WORD379, L_WORD237, SVT_IO_COM_CHANNEL },                     //  {"Com Channel"  ,"",SVT_IO_COM_CHANNEL},
     13              { L_WORD24, L_WORD237, SVT_IO_PROG_VERSION },                    //  {"ProgVersion"  ,"",SVT_IO_PROG_VERSION},
     14              { L_WORD380, L_WORD237, SVT_IO_COM_VERSION },                     //  {"Com Version"  ,"",SVT_IO_COM_VERSION},
     15              { L_WORD381, L_WORD237, SVT_IO_STORE_VERSION },                   //  {"Store Ver."   ,"",SVT_IO_STORE_VERSION},
     16              { L_WORD382, L_WORD237, SVT_IO_RXBUF_SIZE },                      //  {"Rx Buf Size"  ,"",SVT_IO_RXBUF_SIZE},
     17              { L_WORD383, L_WORD237, SVT_IO_TXBUF_SIZE },                      //  {"Tx Buf Size"  ,"",SVT_IO_TXBUF_SIZE},
     18              { L_WORD384, L_WORD237, SVT_IO_RESET_STATUS },                    //  {"Reset Status" ,"",SVT_IO_RESET_STATUS},
     19              { L_WORD385, L_WORD237, SVT_IO_TOTAL_RESTARTS },                  //  {"Total Restart","",SVT_IO_TOTAL_RESTARTS},
     20              { L_WORD386, L_WORD237, SVT_IO_FAIL_CNT_CHK },                    //  {"Fail count"   ,"",SVT_IO_FAIL_CNT_CHK},
     21              { L_WORD387, L_WORD237, SVT_IO_FAIL_CNT_TOT },                    //  {"Tot. fail cnt","",SVT_IO_FAIL_CNT_TOT},
     22              { L_WORD388, L_WORD237, SVT_IO_P_TYPE_RUNNING },                  //  {"Program"      ,"",SVT_IO_P_TYPE_RUNNING},
     23              { L_WORD389, L_WORD237, SVT_IO_CARD_VOLTAGE },                    //  {"Pwr 24V"      ,"",SVT_IO_CARD_VOLTAGE},
     24          
     25          };
     26          

   \                                 In segment DATA_Z, align 4, align-sorted
     27          set<PRogramObjectBase *>IOUnitZBHart::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24

   \                                 In segment CODE, align 4, keep-with-next
     28          IOUnitZBHart::IOUnitZBHart(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr) : IOUnitZBAna(IOCompPtr, ElementPtr) {
   \                     ??IOUnitZBHart:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   ........           LDR      R7,??DataTable4  ;; ??__vtbl
     29              ObjectSet.insert(this);
   \   00000008   ........           LDR      R8,??DataTable5  ;; ??ObjectSet
   \   0000000C   78D04DE2           SUB      SP,SP,#+120
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   ........           _BLF     ??IOUnitZBAna,??IOUnitZBAna??rA
   \   00000020   A47084E5           STR      R7,[R4, #+164]
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   0810A0E1           MOV      R1,R8
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     ??insert,??insert??rA
     30              Type        = C_IO_AN_ZBHART;
   \   00000034   1900A0E3           MOV      R0,#+25
   \   00000038   800E80E3           ORR      R0,R0,#0x800
   \   0000003C   A00084E5           STR      R0,[R4, #+160]
     31              IDNumber    = (C_IO_AN_ZBHART << 16) + ObjectSet.size();
   \   00000040   100098E5           LDR      R0,[R8, #+16]
   \   00000044   8016A0E3           MOV      R1,#+134217728
   \   00000048   641981E3           ORR      R1,R1,#0x190000
   \   0000004C   000081E0           ADD      R0,R1,R0
   \   00000050   9C0084E5           STR      R0,[R4, #+156]
     32              ReceiveCnt  = 0;
   \   00000054   0080A0E3           MOV      R8,#+0
   \   00000058   F08184E5           STR      R8,[R4, #+496]
     33              for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   0020A0E1           MOV      R2,R0
     34                  Filters[i] = 0;
   \                     ??IOUnitZBHart_1:
   \   00000064   041080E0           ADD      R1,R0,R4
   \   00000068   A881C1E5           STRB     R8,[R1, #+424]
     35                  Status[i] = 0;
   \   0000006C   B481C1E5           STRB     R8,[R1, #+436]
     36                  IOComponent[i] = NULL;
   \   00000070   001184E0           ADD      R1,R4,R0, LSL #+2
   \   00000074   F48181E5           STR      R8,[R1, #+500]
     37                  mAValues[i] = 0.0;
   \   00000078   C02181E5           STR      R2,[R1, #+448]
     38              }
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   0C0050E3           CMP      R0,#+12
   \   00000084   F6FFFFBA           BLT      ??IOUnitZBHart_1
     39              TCUAddress  = IOCompPtr->TCUAddress;
   \   00000088   F40095E5           LDR      R0,[R5, #+244]
   \   0000008C   940184E5           STR      R0,[R4, #+404]
     40              TCUPortNo   = IOCompPtr->TCUPortNo;
   \   00000090   F80095E5           LDR      R0,[R5, #+248]
   \   00000094   980184E5           STR      R0,[R4, #+408]
     41              IOType      = IOCompPtr->IOType;
   \   00000098   FC0095E5           LDR      R0,[R5, #+252]
   \   0000009C   9C0184E5           STR      R0,[R4, #+412]
     42              IOAddress   = IOCompPtr->IOAddress;
   \   000000A0   001195E5           LDR      R1,[R5, #+256]
   \   000000A4   680FA0E3           MOV      R0,#+416
   \   000000A8   041080E7           STR      R1,[R0, +R4]
     43              Name = AnsiString("ZBHart:") + AnsiString(IOAddress);
   \   000000AC   5C008DE2           ADD      R0,SP,#+92
   \   000000B0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000B4   0090A0E1           MOV      R9,R0
   \   000000B8   941087E2           ADD      R1,R7,#+148
   \   000000BC   40008DE2           ADD      R0,SP,#+64
   \   000000C0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000C4   0920A0E1           MOV      R2,R9
   \   000000C8   0010A0E1           MOV      R1,R0
   \   000000CC   08008DE2           ADD      R0,SP,#+8
   \   000000D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D4   08108DE2           ADD      R1,SP,#+8
   \   000000D8   24008DE2           ADD      R0,SP,#+36
   \   000000DC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   ........           LDR      R0,??DataTable7  ;; ??npos
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   003090E5           LDR      R3,[R0, #+0]
   \   000000F0   440084E2           ADD      R0,R4,#+68
   \   000000F4   ........           _BLF     ??assign,??assign??rA
   \   000000F8   0820A0E1           MOV      R2,R8
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   24008DE2           ADD      R0,SP,#+36
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000108   0820A0E1           MOV      R2,R8
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   08008DE2           ADD      R0,SP,#+8
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000118   0820A0E1           MOV      R2,R8
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   5C008DE2           ADD      R0,SP,#+92
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000128   0820A0E1           MOV      R2,R8
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   40008DE2           ADD      R0,SP,#+64
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
     44              Add(IOCompPtr, ElementPtr);
   \   00000138   A43094E5           LDR      R3,[R4, #+164]
   \   0000013C   0620A0E1           MOV      R2,R6
   \   00000140   803093E5           LDR      R3,[R3, #+128]
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   0FE0A0E1           MOV      LR,PC
   \   00000150   13FF2FE1           BX       R3
     45              GlobalPRO_IOList.insert(this);
   \   00000154   1C109FE5           LDR      R1,??IOUnitZBHart_2  ;; ??GlobalPRO_IOList
   \   00000158   0420A0E1           MOV      R2,R4
   \   0000015C   0D00A0E1           MOV      R0,SP
   \   00000160   ........           _BLF     ??insert_1,??insert??rA_1
     46              ReqStatusTime = 0;
   \   00000164   788184E5           STR      R8,[R4, #+376]
     47          }
   \   00000168   0400A0E1           MOV      R0,R4
   \   0000016C   78D08DE2           ADD      SP,SP,#+120
   \   00000170   F043BDE8           POP      {R4-R9,LR}
   \   00000174   1EFF2FE1           BX       LR               ;; return
   \                     ??IOUnitZBHart_2:
   \   00000178   ........           DC32     ??GlobalPRO_IOList
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          IOUnitZBHart::~IOUnitZBHart(void) {
   \                     `?~IOUnitZBHart`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1500000A           BEQ      `?~IOUnitZBHart_1`
   \   00000014   ........           LDR      R0,??DataTable4  ;; ??__vtbl
     50              for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   00000018   7D2FA0E3           MOV      R2,#+500
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0000A0E3           MOV      R0,#+0
     51                  if ( IOComponent[i] ) {
   \                     `?~IOUnitZBHart_2`:
   \   00000024   001184E0           ADD      R1,R4,R0, LSL #+2
   \   00000028   013092E7           LDR      R3,[R2, +R1]
     52                      //done elsewhere     delete IOComponent[i];
     53                      IOComponent[i] = NULL;
     54                  }
     55              }
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   000053E3           CMP      R3,#+0
   \   00000034   0030A013           MOVNE    R3,#+0
   \   00000038   01308217           STRNE    R3,[R2, +R1]
   \   0000003C   0C0050E3           CMP      R0,#+12
   \   00000040   F7FFFFBA           BLT      `?~IOUnitZBHart_2`
     56              ObjectSet.erase(this);
   \   00000044   ........           LDR      R0,??DataTable5  ;; ??ObjectSet
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   ........           _BLF     ??erase_1,??erase??rA_1
     57          }
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     `?~IOUnitZBAna`,`?~IOUnitZBAna??rA`
   \   0000005C   010015E3           TST      R5,#0x1
   \   00000060   0100000A           BEQ      `?~IOUnitZBHart_1`
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~IOUnitZBHart_1`:
   \   0000006C                      REQUIRE ?Subroutine18
   \   0000006C                      ;; // Fall through to label ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     58          //---------------------------------------------------------------------------
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          bool IOUnitZBHart::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr) {
   \                     ??Add:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   4ADE4DE2           SUB      SP,SP,#+1184
     61          
     62              int tmpIOChannel = IOCompPtr->IOChannel;
   \   00000008   B0669FE5           LDR      R6,??Add_1       ;; `?<Constant "TCU ">`
   \   0000000C   0190A0E1           MOV      R9,R1
   \   00000010   04A199E5           LDR      R10,[R9, #+260]
   \   00000014   0070A0E1           MOV      R7,R0
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   5C8F87E2           ADD      R8,R7,#+368
   \   00000020   DC5F8FE2           ADR      R5,??Add_2       ;; ".\n"
   \   00000024   00005AE3           CMP      R10,#+0
   \   00000028   DB00004A           BMI      ??Add_3
   \   0000002C   0C005AE3           CMP      R10,#+12
   \   00000030   D90000AA           BGE      ??Add_3
     63              if ( tmpIOChannel >= 0 && tmpIOChannel < MAX_AN_ZBANA_CHANNELS ) {
     64                  if ( IOComponent[tmpIOChannel] ) {
   \   00000034   0A0187E0           ADD      R0,R7,R10, LSL #+2
   \   00000038   7D1FA0E3           MOV      R1,#+500
   \   0000003C   002091E7           LDR      R2,[R1, +R0]
   \   00000040   000052E3           CMP      R2,#+0
   \   00000044   BB00000A           BEQ      ??Add_4
     65                      AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
   \   00000048   F41099E5           LDR      R1,[R9, #+244]
   \   0000004C   B10F8DE2           ADD      R0,SP,#+708
   \   00000050   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000054   0070A0E1           MOV      R7,R0
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   AA0F8DE2           ADD      R0,SP,#+680
   \   00000060   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000064   0720A0E1           MOV      R2,R7
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   40008DE2           ADD      R0,SP,#+64
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   40108DE2           ADD      R1,SP,#+64
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   40008DE2           ADD      R0,SP,#+64
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   B10F8DE2           ADD      R0,SP,#+708
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   AA0F8DE2           ADD      R0,SP,#+680
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     66                      Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
   \   000000B0   F81099E5           LDR      R1,[R9, #+248]
   \   000000B4   BF0F8DE2           ADD      R0,SP,#+764
   \   000000B8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000BC   0070A0E1           MOV      R7,R0
   \   000000C0   081086E2           ADD      R1,R6,#+8
   \   000000C4   B80F8DE2           ADD      R0,SP,#+736
   \   000000C8   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000CC   0010A0E1           MOV      R1,R0
   \   000000D0   0720A0E1           MOV      R2,R7
   \   000000D4   78008DE2           ADD      R0,SP,#+120
   \   000000D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000DC   0520A0E1           MOV      R2,R5
   \   000000E0   78108DE2           ADD      R1,SP,#+120
   \   000000E4   5C008DE2           ADD      R0,SP,#+92
   \   000000E8   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000000EC   ........           LDR      R0,??DataTable7  ;; ??npos
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   007090E5           LDR      R7,[R0, #+0]
   \   000000F8   5C108DE2           ADD      R1,SP,#+92
   \   000000FC   0730A0E1           MOV      R3,R7
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           _BLF     ??append,??append??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   5C008DE2           ADD      R0,SP,#+92
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   78008DE2           ADD      R0,SP,#+120
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   BF0F8DE2           ADD      R0,SP,#+764
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   B80F8DE2           ADD      R0,SP,#+736
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
     67                      Message += (AnsiString)"Channel " + (AnsiString)(tmpIOChannel + 1);
   \   00000148   01108AE2           ADD      R1,R10,#+1
   \   0000014C   CD0F8DE2           ADD      R0,SP,#+820
   \   00000150   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000154   0090A0E1           MOV      R9,R0
   \   00000158   141086E2           ADD      R1,R6,#+20
   \   0000015C   C60F8DE2           ADD      R0,SP,#+792
   \   00000160   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000164   0920A0E1           MOV      R2,R9
   \   00000168   0010A0E1           MOV      R1,R0
   \   0000016C   94008DE2           ADD      R0,SP,#+148
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   0730A0E1           MOV      R3,R7
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   94108DE2           ADD      R1,SP,#+148
   \   00000180   0D00A0E1           MOV      R0,SP
   \   00000184   ........           _BLF     ??append,??append??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   94008DE2           ADD      R0,SP,#+148
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   CD0F8DE2           ADD      R0,SP,#+820
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   C60F8DE2           ADD      R0,SP,#+792
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     68                      Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
   \   000001B8   301098E5           LDR      R1,[R8, #+48]
   \   000001BC   DB0F8DE2           ADD      R0,SP,#+876
   \   000001C0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001C4   2C1098E5           LDR      R1,[R8, #+44]
   \   000001C8   0090A0E1           MOV      R9,R0
   \   000001CC   410F8DE2           ADD      R0,SP,#+260
   \   000001D0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001D4   201086E2           ADD      R1,R6,#+32
   \   000001D8   D40F8DE2           ADD      R0,SP,#+848
   \   000001DC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001E0   412F8DE2           ADD      R2,SP,#+260
   \   000001E4   0010A0E1           MOV      R1,R0
   \   000001E8   E8008DE2           ADD      R0,SP,#+232
   \   000001EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F0   282086E2           ADD      R2,R6,#+40
   \   000001F4   E8108DE2           ADD      R1,SP,#+232
   \   000001F8   CC008DE2           ADD      R0,SP,#+204
   \   000001FC   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000200   0920A0E1           MOV      R2,R9
   \   00000204   CC108DE2           ADD      R1,SP,#+204
   \   00000208   B0008DE2           ADD      R0,SP,#+176
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0730A0E1           MOV      R3,R7
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   B0108DE2           ADD      R1,SP,#+176
   \   0000021C   0D00A0E1           MOV      R0,SP
   \   00000220   ........           _BLF     ??append,??append??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   B0008DE2           ADD      R0,SP,#+176
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   DB0F8DE2           ADD      R0,SP,#+876
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   CC008DE2           ADD      R0,SP,#+204
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   E8008DE2           ADD      R0,SP,#+232
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   410F8DE2           ADD      R0,SP,#+260
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   0110A0E3           MOV      R1,#+1
   \   0000027C   D40F8DE2           ADD      R0,SP,#+848
   \   00000280   ........           _BLF     ??_Tidy,??_Tidy??rA
     69                      Message += (AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
   \   00000284   301086E2           ADD      R1,R6,#+48
   \   00000288   E20F8DE2           ADD      R0,SP,#+904
   \   0000028C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000290   0730A0E1           MOV      R3,R7
   \   00000294   0020A0E3           MOV      R2,#+0
   \   00000298   0010A0E1           MOV      R1,R0
   \   0000029C   0D00A0E1           MOV      R0,SP
   \   000002A0   ........           _BLF     ??append,??append??rA
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   0110A0E3           MOV      R1,#+1
   \   000002AC   E20F8DE2           ADD      R0,SP,#+904
   \   000002B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     70                      Message += (AnsiString)ElementPtr->Name + ".\n";
   \   000002B4   441084E2           ADD      R1,R4,#+68
   \   000002B8   4F0F8DE2           ADD      R0,SP,#+316
   \   000002BC   ........           _BLF     ??string,??string??rA
   \   000002C0   0520A0E1           MOV      R2,R5
   \   000002C4   4F1F8DE2           ADD      R1,SP,#+316
   \   000002C8   480F8DE2           ADD      R0,SP,#+288
   \   000002CC   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002D0   0730A0E1           MOV      R3,R7
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   481F8DE2           ADD      R1,SP,#+288
   \   000002DC   0D00A0E1           MOV      R0,SP
   \   000002E0   ........           _BLF     ??append,??append??rA
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0110A0E3           MOV      R1,#+1
   \   000002EC   480F8DE2           ADD      R0,SP,#+288
   \   000002F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F4   0020A0E3           MOV      R2,#+0
   \   000002F8   0110A0E3           MOV      R1,#+1
   \   000002FC   4F0F8DE2           ADD      R0,SP,#+316
   \   00000300   ........           _BLF     ??_Tidy,??_Tidy??rA
     71                      HardwareSetupWarning(Message);
   \   00000304   0D10A0E1           MOV      R1,SP
   \   00000308   560F8DE2           ADD      R0,SP,#+344
   \   0000030C   ........           _BLF     ??string,??string??rA
   \   00000310   560F8DE2           ADD      R0,SP,#+344
   \   00000314   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   560F8DE2           ADD      R0,SP,#+344
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
     72                      return (false);
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   0D00A0E1           MOV      R0,SP
   \   00000334   DC0000EA           B        ??Add_5
     73                  } else {
     74                      IOComponent[tmpIOChannel] = IOCompPtr;
   \                     ??Add_4:
   \   00000338   009081E7           STR      R9,[R1, +R0]
     75                      PowerStatus |= 1 << tmpIOChannel;
   \   0000033C   B000D8E1           LDRH     R0,[R8, #+0]
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   111AA0E1           LSL      R1,R1,R10
   \   00000348   000081E1           ORR      R0,R1,R0
   \   0000034C   B000C8E1           STRH     R0,[R8, #+0]
     76          
     77                      pair<set<PRogramObject *>::iterator, bool> Ret;
     78                      Ret = IOUniquePROSet.insert(ElementPtr);
   \   00000350   0420A0E1           MOV      R2,R4
   \   00000354   5F1F87E2           ADD      R1,R7,#+380
   \   00000358   38008DE2           ADD      R0,SP,#+56
   \   0000035C   ........           _BLF     ??insert_1,??insert??rA_1
     79          
     80                      if ( Ret.second ) {
   \   00000360   3C00DDE5           LDRB     R0,[SP, #+60]
   \   00000364   000050E3           CMP      R0,#+0
   \   00000368   0200000A           BEQ      ??Add_6
     81                          AddAlarms(ElementPtr->CompleteAlarmInfoList);
   \   0000036C   FC1084E2           ADD      R1,R4,#+252
   \   00000370   0700A0E1           MOV      R0,R7
   \   00000374   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     82                      }
     83                      //((AnalogInput*)IOCompPtr)->SetPROPtr(ElementPtr);
     84                      ElementPtr->MergeChildUserRights(this);
   \                     ??Add_6:
   \   00000378   0710A0E1           MOV      R1,R7
   \   0000037C   0400A0E1           MOV      R0,R4
   \   00000380   ........           _BLF     ??MergeChildUserRights,??MergeChildUserRights??rA
     85                      IOCompPtr->AddIOMdulePtr((ANPRO10Object *)this);
   \   00000384   0710A0E1           MOV      R1,R7
   \   00000388   0900A0E1           MOV      R0,R9
   \   0000038C   ........           _BLF     ??AddIOMdulePtr,??AddIOMdulePtr??rA
     86                  }
     87                  return (true);
   \   00000390   0100A0E3           MOV      R0,#+1
   \   00000394   C60000EA           B        ??Add_7
   \                     ??Add_2:
   \   00000398   2E0A0000           DC8      ".\n",+0
     88              }
     89              AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
   \                     ??Add_3:
   \   0000039C   F41099E5           LDR      R1,[R9, #+244]
   \   000003A0   F00F8DE2           ADD      R0,SP,#+960
   \   000003A4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000003A8   0070A0E1           MOV      R7,R0
   \   000003AC   0610A0E1           MOV      R1,R6
   \   000003B0   E90F8DE2           ADD      R0,SP,#+932
   \   000003B4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000003B8   0720A0E1           MOV      R2,R7
   \   000003BC   0010A0E1           MOV      R1,R0
   \   000003C0   5D0F8DE2           ADD      R0,SP,#+372
   \   000003C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C8   5D1F8DE2           ADD      R1,SP,#+372
   \   000003CC   1C008DE2           ADD      R0,SP,#+28
   \   000003D0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   0110A0E3           MOV      R1,#+1
   \   000003DC   5D0F8DE2           ADD      R0,SP,#+372
   \   000003E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E4   0020A0E3           MOV      R2,#+0
   \   000003E8   0110A0E3           MOV      R1,#+1
   \   000003EC   F00F8DE2           ADD      R0,SP,#+960
   \   000003F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   E90F8DE2           ADD      R0,SP,#+932
   \   00000400   ........           _BLF     ??_Tidy,??_Tidy??rA
     90              Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
   \   00000404   F81099E5           LDR      R1,[R9, #+248]
   \   00000408   FE0F8DE2           ADD      R0,SP,#+1016
   \   0000040C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000410   0070A0E1           MOV      R7,R0
   \   00000414   081086E2           ADD      R1,R6,#+8
   \   00000418   F70F8DE2           ADD      R0,SP,#+988
   \   0000041C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000420   0720A0E1           MOV      R2,R7
   \   00000424   0010A0E1           MOV      R1,R0
   \   00000428   6B0F8DE2           ADD      R0,SP,#+428
   \   0000042C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000430   0520A0E1           MOV      R2,R5
   \   00000434   6B1F8DE2           ADD      R1,SP,#+428
   \   00000438   640F8DE2           ADD      R0,SP,#+400
   \   0000043C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000440   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   007090E5           LDR      R7,[R0, #+0]
   \   0000044C   641F8DE2           ADD      R1,SP,#+400
   \   00000450   0730A0E1           MOV      R3,R7
   \   00000454   1C008DE2           ADD      R0,SP,#+28
   \   00000458   ........           _BLF     ??append,??append??rA
   \   0000045C   0020A0E3           MOV      R2,#+0
   \   00000460   0110A0E3           MOV      R1,#+1
   \   00000464   640F8DE2           ADD      R0,SP,#+400
   \   00000468   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   6B0F8DE2           ADD      R0,SP,#+428
   \   00000478   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   FE0F8DE2           ADD      R0,SP,#+1016
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0110A0E3           MOV      R1,#+1
   \   00000494   F70F8DE2           ADD      R0,SP,#+988
   \   00000498   ........           _BLF     ??_Tidy,??_Tidy??rA
     91              Message += (AnsiString)"Channel " + (AnsiString)(IOCompPtr->IOChannel + 1);
   \   0000049C   040199E5           LDR      R0,[R9, #+260]
   \   000004A0   011080E2           ADD      R1,R0,#+1
   \   000004A4   430E8DE2           ADD      R0,SP,#+1072
   \   000004A8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000004AC   0090A0E1           MOV      R9,R0
   \   000004B0   141086E2           ADD      R1,R6,#+20
   \   000004B4   14008DE2           ADD      R0,SP,#+20
   \   000004B8   400E80E2           ADD      R0,R0,#+1024
   \   000004BC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000004C0   0920A0E1           MOV      R2,R9
   \   000004C4   0010A0E1           MOV      R1,R0
   \   000004C8   720F8DE2           ADD      R0,SP,#+456
   \   000004CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004D0   0730A0E1           MOV      R3,R7
   \   000004D4   0020A0E3           MOV      R2,#+0
   \   000004D8   721F8DE2           ADD      R1,SP,#+456
   \   000004DC   1C008DE2           ADD      R0,SP,#+28
   \   000004E0   ........           _BLF     ??append,??append??rA
   \   000004E4   0020A0E3           MOV      R2,#+0
   \   000004E8   0110A0E3           MOV      R1,#+1
   \   000004EC   720F8DE2           ADD      R0,SP,#+456
   \   000004F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F4   0020A0E3           MOV      R2,#+0
   \   000004F8   0110A0E3           MOV      R1,#+1
   \   000004FC   430E8DE2           ADD      R0,SP,#+1072
   \   00000500   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000504   0020A0E3           MOV      R2,#+0
   \   00000508   0110A0E3           MOV      R1,#+1
   \   0000050C   14008DE2           ADD      R0,SP,#+20
   \   00000510   400E80E2           ADD      R0,R0,#+1024
   \   00000514   ........           _BLF     ??_Tidy,??_Tidy??rA
     92              Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
   \   00000518   301098E5           LDR      R1,[R8, #+48]
   \   0000051C   68008DE2           ADD      R0,SP,#+104
   \   00000520   400E80E2           ADD      R0,R0,#+1024
   \   00000524   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000528   2C1098E5           LDR      R1,[R8, #+44]
   \   0000052C   0090A0E1           MOV      R9,R0
   \   00000530   8E0F8DE2           ADD      R0,SP,#+568
   \   00000534   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000538   201086E2           ADD      R1,R6,#+32
   \   0000053C   4C008DE2           ADD      R0,SP,#+76
   \   00000540   400E80E2           ADD      R0,R0,#+1024
   \   00000544   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000548   8E2F8DE2           ADD      R2,SP,#+568
   \   0000054C   0010A0E1           MOV      R1,R0
   \   00000550   870F8DE2           ADD      R0,SP,#+540
   \   00000554   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000558   282086E2           ADD      R2,R6,#+40
   \   0000055C   871F8DE2           ADD      R1,SP,#+540
   \   00000560   800F8DE2           ADD      R0,SP,#+512
   \   00000564   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000568   0920A0E1           MOV      R2,R9
   \   0000056C   801F8DE2           ADD      R1,SP,#+512
   \   00000570   790F8DE2           ADD      R0,SP,#+484
   \   00000574   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000578   0730A0E1           MOV      R3,R7
   \   0000057C   0020A0E3           MOV      R2,#+0
   \   00000580   791F8DE2           ADD      R1,SP,#+484
   \   00000584   1C008DE2           ADD      R0,SP,#+28
   \   00000588   ........           _BLF     ??append,??append??rA
   \   0000058C   0020A0E3           MOV      R2,#+0
   \   00000590   0110A0E3           MOV      R1,#+1
   \   00000594   790F8DE2           ADD      R0,SP,#+484
   \   00000598   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   68008DE2           ADD      R0,SP,#+104
   \   000005A8   400E80E2           ADD      R0,R0,#+1024
   \   000005AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B0   0020A0E3           MOV      R2,#+0
   \   000005B4   0110A0E3           MOV      R1,#+1
   \   000005B8   800F8DE2           ADD      R0,SP,#+512
   \   000005BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C0   0020A0E3           MOV      R2,#+0
   \   000005C4   0110A0E3           MOV      R1,#+1
   \   000005C8   870F8DE2           ADD      R0,SP,#+540
   \   000005CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005D0   0020A0E3           MOV      R2,#+0
   \   000005D4   0110A0E3           MOV      R1,#+1
   \   000005D8   8E0F8DE2           ADD      R0,SP,#+568
   \   000005DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005E0   0020A0E3           MOV      R2,#+0
   \   000005E4   0110A0E3           MOV      R1,#+1
   \   000005E8   4C008DE2           ADD      R0,SP,#+76
   \   000005EC   400E80E2           ADD      R0,R0,#+1024
   \   000005F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     93              Message += (AnsiString)".\n Not legal ZBHart Channel.\nTry to set sensor for ";
   \   000005F4   601086E2           ADD      R1,R6,#+96
   \   000005F8   84008DE2           ADD      R0,SP,#+132
   \   000005FC   400E80E2           ADD      R0,R0,#+1024
   \   00000600   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000604   0730A0E1           MOV      R3,R7
   \   00000608   0020A0E3           MOV      R2,#+0
   \   0000060C   0010A0E1           MOV      R1,R0
   \   00000610   1C008DE2           ADD      R0,SP,#+28
   \   00000614   ........           _BLF     ??append,??append??rA
   \   00000618   0020A0E3           MOV      R2,#+0
   \   0000061C   0110A0E3           MOV      R1,#+1
   \   00000620   84008DE2           ADD      R0,SP,#+132
   \   00000624   400E80E2           ADD      R0,R0,#+1024
   \   00000628   ........           _BLF     ??_Tidy,??_Tidy??rA
     94              Message += (AnsiString)ElementPtr->Name + ".\n";
   \   0000062C   441084E2           ADD      R1,R4,#+68
   \   00000630   9C0F8DE2           ADD      R0,SP,#+624
   \   00000634   ........           _BLF     ??string,??string??rA
   \   00000638   0520A0E1           MOV      R2,R5
   \   0000063C   9C1F8DE2           ADD      R1,SP,#+624
   \   00000640   950F8DE2           ADD      R0,SP,#+596
   \   00000644   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000648   0730A0E1           MOV      R3,R7
   \   0000064C   0020A0E3           MOV      R2,#+0
   \   00000650   951F8DE2           ADD      R1,SP,#+596
   \   00000654   1C008DE2           ADD      R0,SP,#+28
   \   00000658   ........           _BLF     ??append,??append??rA
   \   0000065C   0020A0E3           MOV      R2,#+0
   \   00000660   0110A0E3           MOV      R1,#+1
   \   00000664   950F8DE2           ADD      R0,SP,#+596
   \   00000668   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000066C   0020A0E3           MOV      R2,#+0
   \   00000670   0110A0E3           MOV      R1,#+1
   \   00000674   9C0F8DE2           ADD      R0,SP,#+624
   \   00000678   ........           _BLF     ??_Tidy,??_Tidy??rA
     95              HardwareSetupWarning(Message);
   \   0000067C   1C108DE2           ADD      R1,SP,#+28
   \   00000680   A30F8DE2           ADD      R0,SP,#+652
   \   00000684   ........           _BLF     ??string,??string??rA
   \   00000688   A30F8DE2           ADD      R0,SP,#+652
   \   0000068C   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000690   0020A0E3           MOV      R2,#+0
   \   00000694   0110A0E3           MOV      R1,#+1
   \   00000698   A30F8DE2           ADD      R0,SP,#+652
   \   0000069C   ........           _BLF     ??_Tidy,??_Tidy??rA
     96              return (false);
   \   000006A0   0020A0E3           MOV      R2,#+0
   \   000006A4   0110A0E3           MOV      R1,#+1
   \   000006A8   1C008DE2           ADD      R0,SP,#+28
   \                     ??Add_5:
   \   000006AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006B0   0000A0E3           MOV      R0,#+0
   \                     ??Add_7:
   \   000006B4   4ADE8DE2           ADD      SP,SP,#+1184
   \   000006B8   F047BDE8           POP      {R4-R10,LR}
   \   000006BC   1EFF2FE1           BX       LR               ;; return
   \                     ??Add_1:
   \   000006C0   ........           DC32     `?<Constant "TCU ">`
     97          }
     98          //---------------------------------------------------------------------------
     99          
    100          #ifndef ANCONF
    101          ///////////////////////////////////////////////////////////////
    102          //
    103          // Routines for the librarian
    104          //
    105          ///////////////////////////////////////////////////////////////
    106          

   \                                 In segment CODE, align 4, keep-with-next
    107          int  IOUnitZBHart::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
    108              int ErrorStatus = GETVAL_NO_ERR;
    109              switch ( ValueId ) {
    110              default:
    111                  ErrorStatus = IOUnitZBAna::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
    112                  break;
    113              }
    114              return (ErrorStatus);
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    115          }
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          int IOUnitZBHart::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    118              int Status = GETVAL_NO_ERR;
    119              switch ( ValueId ) {
    120              default:
    121                  Status = IOUnitZBAna::GetStringValue(ValueId, Index, MyString);
    122                  break;
    123              }
    124              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine20
    125          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int IOUnitZBHart::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3470DDE5           LDRB     R7,[SP, #+52]
   \   0000000C   38809DE5           LDR      R8,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    128              return (IOUnitZBAna::PutValue(ValueId, Index, NewValue, Local, UnitId));
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??string,??string??rA
   \   00000028   00012DE9           PUSH     {R8}
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   24D08DE2           ADD      SP,SP,#+36
   \   00000060   ........           B        ?Subroutine21
    129          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine21:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          int IOUnitZBHart::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    132              return (IOUnitZBAna::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine20
   \   00000008                      ;; // Fall through to label ?Subroutine20
    133          }
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          ValueList* IOUnitZBHart::GetValueInfoTable(int &Entries, int Index) {
    136              Entries = NELEMENTS(IOUnitZBHartValueList);
   \                     ??GetValueInfoTable:
   \   00000000   0D00A0E3           MOV      R0,#+13
   \   00000004   000081E5           STR      R0,[R1, #+0]
    137              return (IOUnitZBHartValueList);
   \   00000008   00009FE5           LDR      R0,??GetValueInfoTable_1  ;; ??IOUnitZBHartValueList
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTable_1:
   \   00000010   ........           DC32     ??IOUnitZBHartValueList
    138          }
    139          
    140          //////////////////////////////////////////////////
    141          //
    142          // Packets for IOUnitZBHart
    143          //
    144          //////////////////////////////////////////////////
    145              #pragma pack(push,1)
    146          struct mAHartMeasuredDataStruct {
    147              short FailCnt1;
    148              short FailCnt2;
    149              float Distance;
    150              float Level;
    151              float ADCurrent;
    152          };
    153          
    154              #pragma pack(pop)
    155          
    156          ///////////////////////////////////////////////////////////////
    157          //
    158          // Routines for communication
    159          //
    160          ///////////////////////////////////////////////////////////////
    161              #ifdef S2TXU

   \                                 In segment CODE, align 4, keep-with-next
    162          bool IOUnitZBHart::ANPRO10_IO_UnpackPacket(U8 *Buf) {
   \                     ??ANPRO10_IO_UnpackPacket:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0080A0E1           MOV      R8,R0
    163              ReceiveCnt++;
   \   0000000C   A45088E2           ADD      R5,R8,#+164
   \   00000010   4C0195E5           LDR      R0,[R5, #+332]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   4C0185E5           STR      R0,[R5, #+332]
    164              ANPRO10_PacketHeading *pPH = (ANPRO10_PacketHeading *)Buf;
    165              bool MyPacket = (pPH->txadr == this->IOAddress);
   \   00000020   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000024   FC1095E5           LDR      R1,[R5, #+252]
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   2A00001A           BNE      ??ANPRO10_IO_UnpackPacket_1
   \   00000030   0190A0E3           MOV      R9,#+1
   \   00000034   0190CDE5           STRB     R9,[SP, #+1]
    166              if ( MyPacket ) {
    167                  SetTimeStamp();
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           _BLF     ??SetTimeStamp,??SetTimeStamp??rA
    168                  Buf += sizeof(ANPRO10_PacketHeading);
    169                  U8 *EndPtr =  &Buf[pPH->nob];
   \   00000040   0510D4E5           LDRB     R1,[R4, #+5]
   \   00000044   0420D4E5           LDRB     R2,[R4, #+4]
   \   00000048   074084E2           ADD      R4,R4,#+7
    170                  ANPRO10_CommandHeading *pCH;
    171                  bool MoreCommands = true;
    172                  bool RecalcTanks  = false;
   \   0000004C   70BFA0E3           MOV      R11,#+448
   \   00000050   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000054   041081E0           ADD      R1,R1,R4
   \   00000058   0C108DE5           STR      R1,[SP, #+12]
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0010CDE5           STRB     R1,[SP, #+0]
    173                  do {
    174                      pCH = (ANPRO10_CommandHeading *)Buf;
   \                     ??ANPRO10_IO_UnpackPacket_2:
   \   00000064   04408DE5           STR      R4,[SP, #+4]
    175                      Buf += sizeof(ANPRO10_CommandHeading);  // ??
    176                      switch ( pCH->CommandNo ) {
   \   00000068   04009DE5           LDR      R0,[SP, #+4]
   \   0000006C   04109DE5           LDR      R1,[SP, #+4]
   \   00000070   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000074   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000078   044084E2           ADD      R4,R4,#+4
   \   0000007C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000080   01005013           CMPNE    R0,#+1
   \   00000084   D200000A           BEQ      ??ANPRO10_IO_UnpackPacket_3
   \   00000088   FA1F89E3           ORR      R1,R9,#0x3E8
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   1700000A           BEQ      ??ANPRO10_IO_UnpackPacket_4
   \   00000094   5A1081E2           ADD      R1,R1,#+90
   \   00000098   010050E1           CMP      R0,R1
   \   0000009C   3A00000A           BEQ      ??ANPRO10_IO_UnpackPacket_5
   \   000000A0   AA1081E2           ADD      R1,R1,#+170
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   B900000A           BEQ      ??ANPRO10_IO_UnpackPacket_6
   \   000000AC   1E1081E2           ADD      R1,R1,#+30
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   4600000A           BEQ      ??ANPRO10_IO_UnpackPacket_7
   \   000000B8   A51F81E3           ORR      R1,R1,#0x294
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   0800000A           BEQ      ??ANPRO10_IO_UnpackPacket_8
   \   000000C4   0A1081E2           ADD      R1,R1,#+10
   \   000000C8   010050E1           CMP      R0,R1
   \   000000CC   B700001A           BNE      ??ANPRO10_IO_UnpackPacket_9
    177                      case CMD_TXU_COMPRESSED_PACKET:
    178                          //Decompress(Size,Buf,Port);
    179                          break;
    180                      case CMD_REP_FLASH_PROG:
    181                          ProgrammingStatus = *Buf;
   \   000000D0   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000D4   CF00C5E5           STRB     R0,[R5, #+207]
   \   000000D8   B40000EA           B        ??ANPRO10_IO_UnpackPacket_9
   \                     ??ANPRO10_IO_UnpackPacket_1:
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   0110CDE5           STRB     R1,[SP, #+1]
   \   000000E4   BF0000EA           B        ??ANPRO10_IO_UnpackPacket_10
    182                          break;
    183                      case  CMD_REP_FLASH_ERASE:
    184                          FlashEraseStatus = *Buf;
   \                     ??ANPRO10_IO_UnpackPacket_8:
   \   000000E8   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000EC   CE00C5E5           STRB     R0,[R5, #+206]
   \   000000F0   AE0000EA           B        ??ANPRO10_IO_UnpackPacket_9
    185                          break;
    186                      case CMD_REP_STATUS:
    187                          {
    188                              ANPRO10_COMMAND_1001 *CardInfo = (ANPRO10_COMMAND_1001 *)Buf;
    189                              CardChannel       = CardInfo->CardChannel;
   \                     ??ANPRO10_IO_UnpackPacket_4:
   \   000000F4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000F8   B400C5E5           STRB     R0,[R5, #+180]
    190                              CardId            = CardInfo->CardId;
   \   000000FC   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000100   B500C5E5           STRB     R0,[R5, #+181]
    191                              CardAddress       = CardInfo->CardAddress;
   \   00000104   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000108   B600C5E5           STRB     R0,[R5, #+182]
    192                              UnitProgVersion   = CardInfo->UnitProgVersion;
   \   0000010C   0300D4E5           LDRB     R0,[R4, #+3]
   \   00000110   B700C5E5           STRB     R0,[R5, #+183]
    193                              ComVersion        = CardInfo->ComVersion;
   \   00000114   0400D4E5           LDRB     R0,[R4, #+4]
   \   00000118   B800C5E5           STRB     R0,[R5, #+184]
    194                              StoreVersion      = CardInfo->StoreVersion;
   \   0000011C   0500D4E5           LDRB     R0,[R4, #+5]
   \   00000120   B900C5E5           STRB     R0,[R5, #+185]
    195                              RxBufSize         = CardInfo->RxBufSize;
   \   00000124   0700D4E5           LDRB     R0,[R4, #+7]
   \   00000128   0610D4E5           LDRB     R1,[R4, #+6]
   \   0000012C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000130   BA0BC5E1           STRH     R0,[R5, #+186]
    196                              TxBufSize         = CardInfo->TxBufSize;
   \   00000134   0900D4E5           LDRB     R0,[R4, #+9]
   \   00000138   0810D4E5           LDRB     R1,[R4, #+8]
   \   0000013C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000140   BC0BC5E1           STRH     R0,[R5, #+188]
    197                              if ( CardInfo->ResetStatus ) {
   \   00000144   0A00D4E5           LDRB     R0,[R4, #+10]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0500000A           BEQ      ??ANPRO10_IO_UnpackPacket_11
    198                                  Restart         = true;
   \   00000150   0191C5E5           STRB     R9,[R5, #+257]
    199                                  ResetStatus     = CardInfo->ResetStatus;
   \   00000154   0A00D4E5           LDRB     R0,[R4, #+10]
   \   00000158   0001C5E5           STRB     R0,[R5, #+256]
    200                                  TotalUnitRestart++;
   \   0000015C   F00DD5E1           LDRSH    R0,[R5, #+208]
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   B00DC5E1           STRH     R0,[R5, #+208]
    201                              }
    202                              ProgamTypeRunning = CardInfo->ProgamTypeRunning;
   \                     ??ANPRO10_IO_UnpackPacket_11:
   \   00000168   0B00D4E5           LDRB     R0,[R4, #+11]
    203                          }
    204                          SendData(CMD_GENERIC_STATIC_DATA);
   \   0000016C   6610A0E3           MOV      R1,#+102
   \   00000170   BE00C5E5           STRB     R0,[R5, #+190]
   \   00000174   002095E5           LDR      R2,[R5, #+0]
   \   00000178   0800A0E1           MOV      R0,R8
   \   0000017C   402092E5           LDR      R2,[R2, #+64]
   \   00000180   0FE0A0E1           MOV      LR,PC
   \   00000184   12FF2FE1           BX       R2
   \   00000188   880000EA           B        ??ANPRO10_IO_UnpackPacket_9
    205                          break;
    206                      case CMD_REP_INT_DATA:
    207                          {
    208                              ANPRO10_COMMAND_1091 *CardInfo = (ANPRO10_COMMAND_1091 *)Buf;
    209                              CardVoltage  = CardInfo->InternalAD[0] / 1024.0 * 2.56 * 16.0;
   \                     ??ANPRO10_IO_UnpackPacket_5:
   \   0000018C   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000190   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000194   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000198   ........           _BLF     __ulongToDouble,??__ulongToDouble??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   4034A0E3           MOV      R3,#+1073741824
   \   000001A4   903883E3           ORR      R3,R3,#0x900000
   \   000001A8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000001AC   44229FE5           LDR      R2,??ANPRO10_IO_UnpackPacket_12  ;; 0x47ae147b
   \   000001B0   44329FE5           LDR      R3,??ANPRO10_IO_UnpackPacket_12+0x4  ;; 0x40047ae1
   \   000001B4   ........           _BLF     __dMul,??__dMul??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   4034A0E3           MOV      R3,#+1073741824
   \   000001C0   C03983E3           ORR      R3,R3,#0x300000
   \   000001C4   ........           _BLF     __dMul,??__dMul??rA
   \   000001C8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001CC   C00085E5           STR      R0,[R5, #+192]
   \   000001D0   760000EA           B        ??ANPRO10_IO_UnpackPacket_9
    210                          }
    211                          break;
    212                      case CMD_REP_HART_MDATA:
    213                          {
    214          
    215                              U8 TmpStatus    = Buf[0] >> 4;
   \                     ??ANPRO10_IO_UnpackPacket_7:
   \   000001D4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001D8   2002B0E1           LSRS     R0,R0,#+4
    216                              if ( TmpStatus ) {
    217                                  ResetStatus = TmpStatus;
   \   000001DC   0001C515           STRBNE   R0,[R5, #+256]
    218                                  Restart     = true;
   \   000001E0   7100001A           BNE      ??ANPRO10_IO_UnpackPacket_13
    219                              } else {
    220                                  RecalcTanks = true;
   \   000001E4   0090CDE5           STRB     R9,[SP, #+0]
    221                                  mAHartMeasuredDataStruct *MsrdData = (mAHartMeasuredDataStruct *)&Buf[1];
   \   000001E8   011084E2           ADD      R1,R4,#+1
   \   000001EC   08108DE5           STR      R1,[SP, #+8]
    222                                  for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   000001F0   0060A0E3           MOV      R6,#+0
   \   000001F4   1E0000EA           B        ??ANPRO10_IO_UnpackPacket_14
    223                                      FailCnt1[i] = MsrdData[i].FailCnt1;
    224                                      FailCnt2[i] = MsrdData[i].FailCnt2;
    225                                      mAValues[i] = MsrdData[i].ADCurrent;
    226                                      Distance[i] = MsrdData[i].Distance;
    227                                      Level[i]    = MsrdData[i].Level;
    228                                      PROIOComponent *CompPtr = IOComponent[i];
    229                                      if ( CompPtr ) {
    230                                          CompPtr->SetStatus((U8 *)Status[i]);
    231                                          switch ( CompPtr->Type ) {
    232                                          case C_AI_Radar_Hart:
    233                                              CompPtr->NewValue(Distance[i]);
    234                                              CompPtr->PutFloatValue(SVT_HART_MA, mAValues[i]); // Convert to Ampere
    235                                              break;
    236                                          default:
    237                                              CompPtr->NewValue(mAValues[i] / 1000.0); // Convert to Ampere
   \                     ??ANPRO10_IO_UnpackPacket_15:
   \   000001F8   0A009BE7           LDR      R0,[R11, +R10]
   \   000001FC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000200   F8319FE5           LDR      R3,??ANPRO10_IO_UnpackPacket_12+0x8  ;; 0x408f4000
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000020C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000210   A42097E5           LDR      R2,[R7, #+164]
   \   00000214   0010A0E1           MOV      R1,R0
   \   00000218   682092E5           LDR      R2,[R2, #+104]
   \   0000021C   0700A0E1           MOV      R0,R7
   \   00000220   0FE0A0E1           MOV      LR,PC
   \   00000224   12FF2FE1           BX       R2
    238                                              break;
    239                                          }
    240                                          //CompPtr->PutFloatValue(SVT_HART_STATUS,FailCnt1[i]);// Convert to Ampere
    241                                          CompPtr->Calculate();
   \                     ??ANPRO10_IO_UnpackPacket_16:
   \   00000228   A41097E5           LDR      R1,[R7, #+164]
   \   0000022C   0700A0E1           MOV      R0,R7
   \   00000230   601091E5           LDR      R1,[R1, #+96]
   \   00000234   0FE0A0E1           MOV      LR,PC
   \   00000238   11FF2FE1           BX       R1
    242                                          CompPtr->ActiveAlarms = CheckAlarms(CompPtr->AlarmSet, &CompPtr->MyHWFailure);
   \   0000023C   430F89E3           ORR      R0,R9,#0x10C
   \   00000240   071080E0           ADD      R1,R0,R7
   \   00000244   C00087E2           ADD      R0,R7,#+192
   \   00000248   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   0000024C   380087E5           STR      R0,[R7, #+56]
    243                                          CompPtr->SendData();
   \   00000250   A42097E5           LDR      R2,[R7, #+164]
   \   00000254   6510A0E3           MOV      R1,#+101
   \   00000258   402092E5           LDR      R2,[R2, #+64]
   \   0000025C   0700A0E1           MOV      R0,R7
   \   00000260   0FE0A0E1           MOV      LR,PC
   \   00000264   12FF2FE1           BX       R2
   \                     ??ANPRO10_IO_UnpackPacket_17:
   \   00000268   016086E2           ADD      R6,R6,#+1
   \   0000026C   0C0056E3           CMP      R6,#+12
   \   00000270   4E0000AA           BGE      ??ANPRO10_IO_UnpackPacket_9
   \                     ??ANPRO10_IO_UnpackPacket_14:
   \   00000274   860088E0           ADD      R0,R8,R6, LSL #+1
   \   00000278   891F80E2           ADD      R1,R0,#+548
   \   0000027C   08009DE5           LDR      R0,[SP, #+8]
   \   00000280   060280E0           ADD      R0,R0,R6, LSL #+4
   \   00000284   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000288   0030D0E5           LDRB     R3,[R0, #+0]
   \   0000028C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000290   B020C1E1           STRH     R2,[R1, #+0]
   \   00000294   0320D0E5           LDRB     R2,[R0, #+3]
   \   00000298   0230D0E5           LDRB     R3,[R0, #+2]
   \   0000029C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000002A0   B821C1E1           STRH     R2,[R1, #+24]
   \   000002A4   0010A0E3           MOV      R1,#+0
   \   000002A8   10208DE2           ADD      R2,SP,#+16
   \                     ??ANPRO10_IO_UnpackPacket_18:
   \   000002AC   0C3080E2           ADD      R3,R0,#+12
   \   000002B0   0330D1E7           LDRB     R3,[R1, +R3]
   \   000002B4   0230C1E7           STRB     R3,[R1, +R2]
   \   000002B8   011081E2           ADD      R1,R1,#+1
   \   000002BC   040051E3           CMP      R1,#+4
   \   000002C0   F9FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_18
   \   000002C4   10109DE5           LDR      R1,[SP, #+16]
   \   000002C8   06A188E0           ADD      R10,R8,R6, LSL #+2
   \   000002CC   0A108BE7           STR      R1,[R11, +R10]
   \   000002D0   0010A0E3           MOV      R1,#+0
   \   000002D4   14208DE2           ADD      R2,SP,#+20
   \                     ??ANPRO10_IO_UnpackPacket_19:
   \   000002D8   043080E2           ADD      R3,R0,#+4
   \   000002DC   0330D1E7           LDRB     R3,[R1, +R3]
   \   000002E0   0230C1E7           STRB     R3,[R1, +R2]
   \   000002E4   011081E2           ADD      R1,R1,#+1
   \   000002E8   040051E3           CMP      R1,#+4
   \   000002EC   F9FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_19
   \   000002F0   14109DE5           LDR      R1,[SP, #+20]
   \   000002F4   18208DE2           ADD      R2,SP,#+24
   \   000002F8   54128AE5           STR      R1,[R10, #+596]
   \   000002FC   0010A0E3           MOV      R1,#+0
   \                     ??ANPRO10_IO_UnpackPacket_20:
   \   00000300   083080E2           ADD      R3,R0,#+8
   \   00000304   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000308   0230C1E7           STRB     R3,[R1, +R2]
   \   0000030C   011081E2           ADD      R1,R1,#+1
   \   00000310   040051E3           CMP      R1,#+4
   \   00000314   F9FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_20
   \   00000318   18009DE5           LDR      R0,[SP, #+24]
   \   0000031C   84028AE5           STR      R0,[R10, #+644]
   \   00000320   F4719AE5           LDR      R7,[R10, #+500]
   \   00000324   000057E3           CMP      R7,#+0
   \   00000328   CEFFFF0A           BEQ      ??ANPRO10_IO_UnpackPacket_17
   \   0000032C   A42097E5           LDR      R2,[R7, #+164]
   \   00000330   080086E0           ADD      R0,R6,R8
   \   00000334   B411D0E5           LDRB     R1,[R0, #+436]
   \   00000338   642092E5           LDR      R2,[R2, #+100]
   \   0000033C   0700A0E1           MOV      R0,R7
   \   00000340   0FE0A0E1           MOV      LR,PC
   \   00000344   12FF2FE1           BX       R2
   \   00000348   A00097E5           LDR      R0,[R7, #+160]
   \   0000034C   5C10A0E3           MOV      R1,#+92
   \   00000350   801E81E3           ORR      R1,R1,#0x800
   \   00000354   010050E1           CMP      R0,R1
   \   00000358   A6FFFF1A           BNE      ??ANPRO10_IO_UnpackPacket_15
   \   0000035C   A42097E5           LDR      R2,[R7, #+164]
   \   00000360   54129AE5           LDR      R1,[R10, #+596]
   \   00000364   682092E5           LDR      R2,[R2, #+104]
   \   00000368   0700A0E1           MOV      R0,R7
   \   0000036C   0FE0A0E1           MOV      LR,PC
   \   00000370   12FF2FE1           BX       R2
   \   00000374   A43097E5           LDR      R3,[R7, #+164]
   \   00000378   0A209BE7           LDR      R2,[R11, +R10]
   \   0000037C   343093E5           LDR      R3,[R3, #+52]
   \   00000380   AF1F8BE2           ADD      R1,R11,#+700
   \   00000384   0700A0E1           MOV      R0,R7
   \   00000388   0FE0A0E1           MOV      LR,PC
   \   0000038C   13FF2FE1           BX       R3
   \   00000390   A4FFFFEA           B        ??ANPRO10_IO_UnpackPacket_16
    244                                      }
    245                                  }
    246                              }
    247                          }
    248                          break;
    249                      case CMD_REP_HART_FILTER:
    250                          break;
    251                      case CMD_REP_HART_SETUP:
    252                          {
    253                              U16 tmpPowerStatus = (Buf[1] << 8) | Buf[0];
    254                              if ( tmpPowerStatus != PowerStatus ) {
   \                     ??ANPRO10_IO_UnpackPacket_6:
   \   00000394   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000398   0010D4E5           LDRB     R1,[R4, #+0]
   \   0000039C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000003A0   BC1CD5E1           LDRH     R1,[R5, #+204]
   \   000003A4   010050E1           CMP      R0,R1
   \   000003A8   0000000A           BEQ      ??ANPRO10_IO_UnpackPacket_9
    255                                  Restart = true;
   \                     ??ANPRO10_IO_UnpackPacket_13:
   \   000003AC   0191C5E5           STRB     R9,[R5, #+257]
    256                              }
    257                          }
    258                          break;
    259                      case ECMD_NMDWOACK:
    260                      case ECMD_NMDRQACK:
    261                          MoreCommands = false;
    262                          break;
    263                      default:
    264                          break;
    265          
    266                      }
    267                      if ( MoreCommands ) {
    268                          Buf += pCH->ndb;
   \                     ??ANPRO10_IO_UnpackPacket_9:
   \   000003B0   04009DE5           LDR      R0,[SP, #+4]
   \   000003B4   04109DE5           LDR      R1,[SP, #+4]
   \   000003B8   0300D0E5           LDRB     R0,[R0, #+3]
   \   000003BC   0210D1E5           LDRB     R1,[R1, #+2]
   \   000003C0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000003C4   044080E0           ADD      R4,R0,R4
   \   000003C8   0C009DE5           LDR      R0,[SP, #+12]
   \   000003CC   000054E1           CMP      R4,R0
   \   000003D0   23FFFF3A           BCC      ??ANPRO10_IO_UnpackPacket_2
    269                      }
    270                  } while ( MoreCommands && (Buf < EndPtr) );
    271                  if ( RecalcTanks ) {
   \                     ??ANPRO10_IO_UnpackPacket_3:
   \   000003D4   0000DDE5           LDRB     R0,[SP, #+0]
   \   000003D8   000050E3           CMP      R0,#+0
   \   000003DC   0100000A           BEQ      ??ANPRO10_IO_UnpackPacket_10
    272                      RecalcTanks = false;
    273                      SetDataTime(IOUniquePROSet);
   \   000003E0   5F0F88E2           ADD      R0,R8,#+380
   \   000003E4   ........           _BLF     ??SetDataTime,??SetDataTime??rA
    274                  }
    275              }
    276              return (MyPacket);
   \                     ??ANPRO10_IO_UnpackPacket_10:
   \   000003E8   0100DDE5           LDRB     R0,[SP, #+1]
   \   000003EC   1CD08DE2           ADD      SP,SP,#+28
   \   000003F0   F04FBDE8           POP      {R4-R11,LR}
   \   000003F4   1EFF2FE1           BX       LR               ;; return
   \                     ??ANPRO10_IO_UnpackPacket_12:
   \   000003F8   7B14AE47           DC32     0x47ae147b
   \   000003FC   E17A0440           DC32     0x40047ae1
   \   00000400   00408F40           DC32     0x408f4000
    277          }
    278          

   \                                 In segment CODE, align 4, keep-with-next
    279          void IOUnitZBHart::SendToIO(U16 Command, void *Data, U16 Size, bool RequestAck) {
   \                     ??SendToIO:
   \   00000000   04402DE9           PUSH     {R2,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   1420DDE5           LDRB     R2,[SP, #+20]
    280              NetPacket Packet;
    281              Packet.Command    = Command;
   \   0000000C   B010CDE1           STRH     R1,[SP, #+0]
    282              Packet.RxAddress  = IOAddress;
   \   00000010   A0C190E5           LDR      R12,[R0, #+416]
    283              Packet.RxTypeId   = DEVICE_ZBHART;
    284              Packet.RequestAck = RequestAck;
   \   00000014   0620CDE5           STRB     R2,[SP, #+6]
   \   00000018   05C0CDE5           STRB     R12,[SP, #+5]
   \   0000001C   13C0A0E3           MOV      R12,#+19
   \   00000020   04C0CDE5           STRB     R12,[SP, #+4]
    285              Packet.Size       = Size;
   \   00000024   B230CDE1           STRH     R3,[SP, #+2]
    286              Packet.Data       = Data;
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   07208DE2           ADD      R2,SP,#+7
   \                     ??SendToIO_1:
   \   00000030   0C308DE2           ADD      R3,SP,#+12
   \   00000034   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000038   0230C1E7           STRB     R3,[R1, +R2]
   \   0000003C   011081E2           ADD      R1,R1,#+1
   \   00000040   040051E3           CMP      R1,#+4
   \   00000044   F9FFFFBA           BLT      ??SendToIO_1
    287              SendPacket(Packet);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   ........           _BLF     ??SendPacket,??SendPacket??rA
    288          }
   \   00000050   0F40BDE8           POP      {R0-R3,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    289          
    290          

   \                                 In segment CODE, align 4, keep-with-next
    291          void IOUnitZBHart::PowerOn(void) {
   \                     ??PowerOn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    292          #ifdef S2TXU
    293              SendToIO(CMD_SND_HART_SETUP, &PowerStatus, sizeof(PowerStatus), false);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   01002DE9           PUSH     {R0}
   \   00000010   A4C094E5           LDR      R12,[R4, #+164]
   \   00000014   0230A0E3           MOV      R3,#+2
   \   00000018   8CC09CE5           LDR      R12,[R12, #+140]
   \   0000001C   5C2F84E2           ADD      R2,R4,#+368
   \   00000020   4E1E83E3           ORR      R1,R3,#0x4E0
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   0FE0A0E1           MOV      LR,PC
   \   0000002C   1CFF2FE1           BX       R12
    294              PowerOnTime = RunningTime + POWER_ON_ZBANA_START_DELAY;
   \   00000030   ........           LDR      R0,??DataTable9  ;; RunningTime
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   050080E2           ADD      R0,R0,#+5
   \   0000003C   6C0184E5           STR      R0,[R4, #+364]
    295          #endif
    296          }
   \   00000040                      REQUIRE ?Subroutine19
   \   00000040                      ;; // Fall through to label ?Subroutine19

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   1140BDE8           POP      {R0,R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    297          

   \                                 In segment CODE, align 4, keep-with-next
    298          void IOUnitZBHart::RequestSetup(void) {
   \                     ??RequestSetup:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
    299          #ifdef S2TXU
    300              SendToIO(CMD_REQ_HART_SETUP, NULL, 0, false);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   01002DE9           PUSH     {R0}
   \   00000010   0020A0E1           MOV      R2,R0
   \   00000014   0C00A0E1           MOV      R0,R12
   \   00000018   A4C09CE5           LDR      R12,[R12, #+164]
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   8CC09CE5           LDR      R12,[R12, #+140]
   \   00000024   EC10A0E3           MOV      R1,#+236
   \   00000028   401E81E3           ORR      R1,R1,#0x400
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   1CFF2FE1           BX       R12
    301          #endif
    302          }
   \   00000034   0140BDE8           POP      {R0,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
    303          
    304          
    305          

   \                                 In segment CODE, align 4, keep-with-next
    306          void IOUnitZBHart::HandleIO(int Delay) {
   \                     ??HandleIO:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    307              time_t MyCurentTime = RunningTime;
   \   00000008   ........           LDR      R0,??DataTable9  ;; RunningTime
    308              if ( Restart ) {
   \   0000000C   A570A0E3           MOV      R7,#+165
   \   00000010   008090E5           LDR      R8,[R0, #+0]
   \   00000014   407F87E3           ORR      R7,R7,#0x100
   \   00000018   0400D7E7           LDRB     R0,[R7, +R4]
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1500000A           BEQ      ??HandleIO_1
    309                  Request(CMD_REQ_STATUS);
   \   00000028   FA1FA0E3           MOV      R1,#+1000
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??Request,??Request??rA
    310                  if ( ANPRO10_IO_Receive() ) {
   \   00000034   1E10A0E3           MOV      R1,#+30
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3C00000A           BEQ      ??HandleIO_2
    311                      SetFilters();
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       ??SetFilters
    312                      TSN_Delay(Delay);
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     OS_Delay,??OS_Delay??rA
    313                      PowerOn();
   \   00000058   A41094E5           LDR      R1,[R4, #+164]
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   841091E5           LDR      R1,[R1, #+132]
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   11FF2FE1           BX       R1
    314                      TSN_Delay(Delay);
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           _BLF     OS_Delay,??OS_Delay??rA
    315                      Restart = false;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   0400C7E7           STRB     R0,[R7, +R4]
   \   0000007C   2E0000EA           B        ??HandleIO_2
    316                  }
    317              } else if ( MyCurentTime > (PowerOnTime) ) {
   \                     ??HandleIO_1:
   \   00000080   6C0194E5           LDR      R0,[R4, #+364]
   \   00000084   080050E1           CMP      R0,R8
   \   00000088   2B0000AA           BGE      ??HandleIO_2
    318                  Request(CMD_REQ_HART_DATA);
   \   0000008C   0A10A0E3           MOV      R1,#+10
   \   00000090   501E81E3           ORR      R1,R1,#0x500
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           _BLF     ??Request,??Request??rA
    319                  ANPRO10_IO_Receive();
   \   0000009C   1E10A0E3           MOV      R1,#+30
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    320                  Request(CMD_REQ_ANA_DATA);
   \   000000A8   D810A0E3           MOV      R1,#+216
   \   000000AC   401E81E3           ORR      R1,R1,#0x400
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     ??Request,??Request??rA
    321                  ANPRO10_IO_Receive();
   \   000000B8   1E10A0E3           MOV      R1,#+30
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    322                  TSN_Delay(Delay);
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     OS_Delay,??OS_Delay??rA
    323                  if ( MyCurentTime > ReqStatusTime ) {
   \   000000CC   5E0FA0E3           MOV      R0,#+376
   \   000000D0   041090E7           LDR      R1,[R0, +R4]
   \   000000D4   080051E1           CMP      R1,R8
   \   000000D8   170000AA           BGE      ??HandleIO_2
    324                      ReqStatusTime = MyCurentTime + IO_STATUS_REQ_DELAY;
   \   000000DC   0F1088E2           ADD      R1,R8,#+15
   \   000000E0   041080E7           STR      R1,[R0, +R4]
    325                      Request(CMD_REQ_INT_DATA);
   \   000000E4   4210A0E3           MOV      R1,#+66
   \   000000E8   401E81E3           ORR      R1,R1,#0x400
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           _BLF     ??Request,??Request??rA
    326                      ANPRO10_IO_Receive();
   \   000000F4   1E10A0E3           MOV      R1,#+30
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    327                      TSN_Delay(Delay);
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   ........           _BLF     OS_Delay,??OS_Delay??rA
    328                      Request(CMD_REQ_STATUS);
   \   00000108   FA1FA0E3           MOV      R1,#+1000
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           _BLF     ??Request,??Request??rA
    329                      ANPRO10_IO_Receive();
   \   00000114   1E10A0E3           MOV      R1,#+30
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    330                      TSN_Delay(Delay);
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           _BLF     OS_Delay,??OS_Delay??rA
    331                      RequestSetup();
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       ??RequestSetup
    332                      ANPRO10_IO_Receive();
   \   00000130   1E10A0E3           MOV      R1,#+30
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    333                      /*
    334                      if ( ( !ActiveAlarms )
    335                           &&  (     ( UnitProgVersion != VERSION_ANZB_PROG )
    336                                     || ( ComVersion  != VERSION_ANZB_COMP )
    337                                     || ( StoreVersion!= VERSION_ANZB_EEPROM) ) ) {
    338                          UpdateProgram();
    339                      }
    340                      */
    341                  }
    342              }
    343              ActiveAlarms = CheckAlarms(AlarmSet);
   \                     ??HandleIO_2:
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   E40084E2           ADD      R0,R4,#+228
   \   00000144   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000148   380084E5           STR      R0,[R4, #+56]
    344              SetHWFailure(bool(ActiveAlarms));
   \   0000014C   380094E5           LDR      R0,[R4, #+56]
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   0110A013           MOVNE    R1,#+1
   \   00000158   0010A003           MOVEQ    R1,#+0
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           _BLF     ??SetHWFailure,??SetHWFailure??rA
    345              SendData();
   \   00000164   A42094E5           LDR      R2,[R4, #+164]
   \   00000168   6510A0E3           MOV      R1,#+101
   \   0000016C   402092E5           LDR      R2,[R2, #+64]
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   0FE0A0E1           MOV      LR,PC
   \   00000178   12FF2FE1           BX       R2
    346              TSN_Delay(Delay);
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           _BLF     OS_Delay,??OS_Delay??rA
    347          }
   \   00000184                      REQUIRE ?Subroutine21
   \   00000184                      ;; // Fall through to label ?Subroutine21
    348          
    349          

   \                                 In segment CODE, align 4, keep-with-next
    350          void IOUnitZBHart::SetFilters(void) {
   \                     ??SetFilters:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    351              U8 Filters[MAX_AN_ZBANA_CHANNELS];
    352          
    353              for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   0000000C   0050A0E3           MOV      R5,#+0
    354                  if ( IOComponent[i] ) {
   \                     ??SetFilters_1:
   \   00000010   051184E0           ADD      R1,R4,R5, LSL #+2
   \   00000014   10008DE2           ADD      R0,SP,#+16
   \   00000018   006085E0           ADD      R6,R5,R0
   \   0000001C   7D2FA0E3           MOV      R2,#+500
   \   00000020   010092E7           LDR      R0,[R2, +R1]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400000A           BEQ      ??SetFilters_2
    355                      Filters[i] = IOComponent[i]->GetFilter();
   \   0000002C   A41090E5           LDR      R1,[R0, #+164]
   \   00000030   5C1091E5           LDR      R1,[R1, #+92]
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   11FF2FE1           BX       R1
   \   0000003C   000000EA           B        ??SetFilters_3
    356                  } else {
    357                      Filters[i] = FILTER_DEFAULT;
   \                     ??SetFilters_2:
   \   00000040   0100A0E3           MOV      R0,#+1
   \                     ??SetFilters_3:
   \   00000044   0000C6E5           STRB     R0,[R6, #+0]
    358                  }
    359              }
   \   00000048   015085E2           ADD      R5,R5,#+1
   \   0000004C   0C0055E3           CMP      R5,#+12
   \   00000050   EEFFFFBA           BLT      ??SetFilters_1
    360              NetPacket Packet;
    361              Packet.Command    = CMD_SND_HART_FILTER;
   \   00000054   F610A0E3           MOV      R1,#+246
   \   00000058   401E81E3           ORR      R1,R1,#0x400
   \   0000005C   B010CDE1           STRH     R1,[SP, #+0]
    362              Packet.RxAddress  = IOAddress;
   \   00000060   A01194E5           LDR      R1,[R4, #+416]
    363              Packet.RxTypeId   = DEVICE_ZBHART;
    364              Packet.RequestAck = 0;
    365              Packet.Size       = sizeof(Filters);
    366              Packet.Data       = (U8 *)Filters;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0510CDE5           STRB     R1,[SP, #+5]
   \   0000006C   1310A0E3           MOV      R1,#+19
   \   00000070   0410CDE5           STRB     R1,[SP, #+4]
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   0610CDE5           STRB     R1,[SP, #+6]
   \   0000007C   0C10A0E3           MOV      R1,#+12
   \   00000080   B210CDE1           STRH     R1,[SP, #+2]
   \   00000084   10108DE2           ADD      R1,SP,#+16
   \   00000088   0C108DE5           STR      R1,[SP, #+12]
   \   0000008C   07108DE2           ADD      R1,SP,#+7
   \                     ??SetFilters_4:
   \   00000090   0C208DE2           ADD      R2,SP,#+12
   \   00000094   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000098   0120C0E7           STRB     R2,[R0, +R1]
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   040050E3           CMP      R0,#+4
   \   000000A4   F9FFFFBA           BLT      ??SetFilters_4
    367              SendPacket(Packet);
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??SendPacket,??SendPacket??rA
    368          }
   \   000000B4   1CD08DE2           ADD      SP,SP,#+28
   \   000000B8   7040BDE8           POP      {R4-R6,LR}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
    369          
    370              #endif

   \                                 In segment CODE, align 4, keep-with-next
    371          int IOUnitZBHart::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   13002DE9           PUSH     {R0,R1,R4}
   \   00000004   0130D1E5           LDRB     R3,[R1, #+1]
   \   00000008   00C0D1E5           LDRB     R12,[R1, #+0]
   \   0000000C   542F80E2           ADD      R2,R0,#+336
   \   00000010   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000014   653053E2           SUBS     R3,R3,#+101
   \   00000018   0200000A           BEQ      ??ReceiveData_1
   \   0000001C   013053E2           SUBS     R3,R3,#+1
   \   00000020   2A00000A           BEQ      ??ReceiveData_2
   \   00000024   500000EA           B        ??ReceiveData_3
    372              int ErrorStatus = E_OK;
    373              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    374              switch ( pCH->CommandNo ) {
    375              case CMD_GENERIC_REALTIME_DATA:
    376                  {
    377                      ANPRO10_COMMAND_2601  *pData = (ANPRO10_COMMAND_2601 *)data;
    378                      PowerStatus   = pData->PowerStatus;
   \                     ??ReceiveData_1:
   \   00000028   1130D1E5           LDRB     R3,[R1, #+17]
   \   0000002C   10C0D1E5           LDRB     R12,[R1, #+16]
   \   00000030   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000034   B032C2E1           STRH     R3,[R2, #+32]
    379                      FailCnt      = pData->FailCnt;
   \   00000038   0F30D1E5           LDRB     R3,[R1, #+15]
   \   0000003C   0EC0D1E5           LDRB     R12,[R1, #+14]
   \   00000040   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000044   0DC0D1E5           LDRB     R12,[R1, #+13]
   \   00000048   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   0000004C   0CC0D1E5           LDRB     R12,[R1, #+12]
   \   00000050   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000054   043082E5           STR      R3,[R2, #+4]
    380                      FailCntTotal = pData->FailCntTotal;
   \   00000058   0B30D1E5           LDRB     R3,[R1, #+11]
   \   0000005C   0AC0D1E5           LDRB     R12,[R1, #+10]
   \   00000060   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000064   09C0D1E5           LDRB     R12,[R1, #+9]
   \   00000068   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   0000006C   08C0D1E5           LDRB     R12,[R1, #+8]
   \   00000070   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000074   003082E5           STR      R3,[R2, #+0]
    381                      for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0DC0A0E1           MOV      R12,SP
    382                          mAValues[i] = pData->mAValues[i];
   \                     ??ReceiveData_4:
   \   00000080   0030A0E3           MOV      R3,#+0
   \                     ??ReceiveData_5:
   \   00000084   024181E0           ADD      R4,R1,R2, LSL #+2
   \   00000088   2A4084E2           ADD      R4,R4,#+42
   \   0000008C   0440D3E7           LDRB     R4,[R3, +R4]
   \   00000090   0C40C3E7           STRB     R4,[R3, +R12]
   \   00000094   013083E2           ADD      R3,R3,#+1
   \   00000098   040053E3           CMP      R3,#+4
   \   0000009C   F8FFFFBA           BLT      ??ReceiveData_5
   \   000000A0   00409DE5           LDR      R4,[SP, #+0]
   \   000000A4   023180E0           ADD      R3,R0,R2, LSL #+2
   \   000000A8   C04183E5           STR      R4,[R3, #+448]
    383                          Status[i] = pData->Status[i];
   \   000000AC   014082E0           ADD      R4,R2,R1
   \   000000B0   1E40D4E5           LDRB     R4,[R4, #+30]
   \   000000B4   003082E0           ADD      R3,R2,R0
    384                      }
   \   000000B8   012082E2           ADD      R2,R2,#+1
   \   000000BC   B441C3E5           STRB     R4,[R3, #+436]
   \   000000C0   0C0052E3           CMP      R2,#+12
   \   000000C4   EDFFFFBA           BLT      ??ReceiveData_4
    385                      ErrorStatus =  E_OK;
   \                     ??ReceiveData_6:
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   270000EA           B        ??ReceiveData_7
    386                  }
    387                  break;
    388              case CMD_GENERIC_STATIC_DATA :
    389                  {
    390                      ANPRO10_COMMAND_2602  *pData = (ANPRO10_COMMAND_2602 *)data;
    391                      CardChannel      = pData->CardChannel;
   \                     ??ReceiveData_2:
   \   000000D0   0800D1E5           LDRB     R0,[R1, #+8]
   \   000000D4   0800C2E5           STRB     R0,[R2, #+8]
    392                      CardId           = pData->CardId;
   \   000000D8   0900D1E5           LDRB     R0,[R1, #+9]
   \   000000DC   0900C2E5           STRB     R0,[R2, #+9]
    393                      CardAddress      = pData->CardAddress;
   \   000000E0   0A00D1E5           LDRB     R0,[R1, #+10]
   \   000000E4   0A00C2E5           STRB     R0,[R2, #+10]
    394                      UnitProgVersion  = pData->UnitProgVersion;
   \   000000E8   0B00D1E5           LDRB     R0,[R1, #+11]
   \   000000EC   0B00C2E5           STRB     R0,[R2, #+11]
    395                      ComVersion       = pData->ComVersion;
   \   000000F0   0C00D1E5           LDRB     R0,[R1, #+12]
   \   000000F4   0C00C2E5           STRB     R0,[R2, #+12]
    396                      StoreVersion     = pData->StoreVersion;
   \   000000F8   0D00D1E5           LDRB     R0,[R1, #+13]
   \   000000FC   0D00C2E5           STRB     R0,[R2, #+13]
    397                      RxBufSize        = pData->RxBufSize;
   \   00000100   0F00D1E5           LDRB     R0,[R1, #+15]
   \   00000104   0E30D1E5           LDRB     R3,[R1, #+14]
   \   00000108   000483E1           ORR      R0,R3,R0, LSL #+8
   \   0000010C   BE00C2E1           STRH     R0,[R2, #+14]
    398                      TxBufSize        = pData->TxBufSize;
   \   00000110   1100D1E5           LDRB     R0,[R1, #+17]
   \   00000114   1030D1E5           LDRB     R3,[R1, #+16]
   \   00000118   000483E1           ORR      R0,R3,R0, LSL #+8
   \   0000011C   B001C2E1           STRH     R0,[R2, #+16]
    399                      ResetStatus      = pData->ResetStatus;
   \   00000120   1200D1E5           LDRB     R0,[R1, #+18]
   \   00000124   5400C2E5           STRB     R0,[R2, #+84]
    400                      ProgamTypeRunning = pData->ProgamTypeRunning;
   \   00000128   1300D1E5           LDRB     R0,[R1, #+19]
   \   0000012C   1200C2E5           STRB     R0,[R2, #+18]
    401                      TotalUnitRestart = pData->TotalUnitRestart;
   \   00000130   1500D1E5           LDRB     R0,[R1, #+21]
   \   00000134   1430D1E5           LDRB     R3,[R1, #+20]
   \   00000138   000483E1           ORR      R0,R3,R0, LSL #+8
   \   0000013C   B402C2E1           STRH     R0,[R2, #+36]
    402                      CardVoltage      = pData->CardVoltage;
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   04308DE2           ADD      R3,SP,#+4
   \                     ??ReceiveData_8:
   \   00000148   164081E2           ADD      R4,R1,#+22
   \   0000014C   0440D0E7           LDRB     R4,[R0, +R4]
   \   00000150   0340C0E7           STRB     R4,[R0, +R3]
   \   00000154   010080E2           ADD      R0,R0,#+1
   \   00000158   040050E3           CMP      R0,#+4
   \   0000015C   F9FFFFBA           BLT      ??ReceiveData_8
   \   00000160   04009DE5           LDR      R0,[SP, #+4]
   \   00000164   140082E5           STR      R0,[R2, #+20]
   \   00000168   D6FFFFEA           B        ??ReceiveData_6
    403                      ErrorStatus =  E_OK;
    404                  }
    405                  break;
    406              default:
    407                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_3:
   \   0000016C   0100A0E3           MOV      R0,#+1
    408                  break;
    409              }
    410              return (ErrorStatus);
   \                     ??ReceiveData_7:
   \   00000170   1600BDE8           POP      {R1,R2,R4}
   \   00000174   1EFF2FE1           BX       LR               ;; return
    411          }
    412          

   \                                 In segment CODE, align 4, keep-with-next
    413          int IOUnitZBHart::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
    414              int ErrorStatus = E_OK;
    415              switch ( cmd ) {
   \   00000008   9C2080E2           ADD      R2,R0,#+156
   \   0000000C   0E30A0E3           MOV      R3,#+14
   \   00000010   FFC0A0E3           MOV      R12,#+255
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   651051E2           SUBS     R1,R1,#+101
   \   0000001C   0200000A           BEQ      ??SendData_1
   \   00000020   011051E2           SUBS     R1,R1,#+1
   \   00000024   3700000A           BEQ      ??SendData_2
   \   00000028   620000EA           B        ??SendData_3
    416              case CMD_GENERIC_REALTIME_DATA:
    417                  {
    418                      QueueANPRO10_COMMAND_2601 Cmd;
    419                      Cmd.TxInfo.Port        = NULL;
   \                     ??SendData_1:
   \   0000002C   20408DE5           STR      R4,[SP, #+32]
    420                      Cmd.TxInfo.rxAddr      = DEVICE_BROADCAST_ADDR;
   \   00000030   24C0CDE5           STRB     R12,[SP, #+36]
    421                      Cmd.TxInfo.rxId        = DEVICE_BROADCAST_TXU;
   \   00000034   2530CDE5           STRB     R3,[SP, #+37]
    422          
    423                      Cmd.Data.ObjectId      = IDNumber;
   \   00000038   001092E5           LDR      R1,[R2, #+0]
    424                      Cmd.Data.ndb           = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   5630A0E3           MOV      R3,#+86
   \   00000040   2A10CDE5           STRB     R1,[SP, #+42]
   \   00000044   2114A0E1           LSR      R1,R1,#+8
   \   00000048   2B10CDE5           STRB     R1,[SP, #+43]
   \   0000004C   2114A0E1           LSR      R1,R1,#+8
   \   00000050   2C10CDE5           STRB     R1,[SP, #+44]
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   2D10CDE5           STRB     R1,[SP, #+45]
   \   0000005C   B832CDE1           STRH     R3,[SP, #+40]
    425                      Cmd.Data.CommandNo     = CMD_GENERIC_REALTIME_DATA;
   \   00000060   6530A0E3           MOV      R3,#+101
   \   00000064   B632CDE1           STRH     R3,[SP, #+38]
    426                      Cmd.Data.PowerStatus   = PowerStatus;
   \   00000068   B43DD2E1           LDRH     R3,[R2, #+212]
   \   0000006C   B633CDE1           STRH     R3,[SP, #+54]
    427                      Cmd.Data.FailCnt      = FailCnt;
   \   00000070   B81092E5           LDR      R1,[R2, #+184]
   \   00000074   3210CDE5           STRB     R1,[SP, #+50]
   \   00000078   2114A0E1           LSR      R1,R1,#+8
   \   0000007C   3310CDE5           STRB     R1,[SP, #+51]
   \   00000080   2114A0E1           LSR      R1,R1,#+8
   \   00000084   3410CDE5           STRB     R1,[SP, #+52]
   \   00000088   2114A0E1           LSR      R1,R1,#+8
   \   0000008C   3510CDE5           STRB     R1,[SP, #+53]
    428                      Cmd.Data.FailCntTotal = FailCntTotal;
   \   00000090   B41092E5           LDR      R1,[R2, #+180]
   \   00000094   2E10CDE5           STRB     R1,[SP, #+46]
   \   00000098   2114A0E1           LSR      R1,R1,#+8
   \   0000009C   2F10CDE5           STRB     R1,[SP, #+47]
   \   000000A0   2114A0E1           LSR      R1,R1,#+8
   \   000000A4   3010CDE5           STRB     R1,[SP, #+48]
   \   000000A8   2114A0E1           LSR      R1,R1,#+8
   \   000000AC   3110CDE5           STRB     R1,[SP, #+49]
    429                      for ( int i = 0; i < MAX_AN_ZBANA_CHANNELS; i++ ) {
   \   000000B0   0010A0E3           MOV      R1,#+0
    430                          Cmd.Data.mAValues[i] = mAValues[i];
   \                     ??SendData_4:
   \   000000B4   013180E0           ADD      R3,R0,R1, LSL #+2
   \   000000B8   C03193E5           LDR      R3,[R3, #+448]
   \   000000BC   20208DE2           ADD      R2,SP,#+32
   \   000000C0   012182E0           ADD      R2,R2,R1, LSL #+2
   \   000000C4   303082E5           STR      R3,[R2, #+48]
    431                          Cmd.Data.Status[i] = Status[i];
   \   000000C8   003081E0           ADD      R3,R1,R0
   \   000000CC   B431D3E5           LDRB     R3,[R3, #+436]
   \   000000D0   20208DE2           ADD      R2,SP,#+32
   \   000000D4   022081E0           ADD      R2,R1,R2
   \   000000D8   2430C2E5           STRB     R3,[R2, #+36]
    432                      }
   \   000000DC   011081E2           ADD      R1,R1,#+1
   \   000000E0   0C0051E3           CMP      R1,#+12
   \   000000E4   F2FFFFBA           BLT      ??SendData_4
    433                      bool sent = ANPRO10SendNormal(&Cmd);
    434                      if ( !sent ) ErrorStatus =  E_QUEUE_FULL;
   \   000000E8   20008DE2           ADD      R0,SP,#+32
   \   000000EC   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0100001A           BNE      ??SendData_5
   \                     ??SendData_6:
   \   000000F8   0300A0E3           MOV      R0,#+3
   \   000000FC   2E0000EA           B        ??SendData_7
    435                      else ErrorStatus =  E_OK;
   \                     ??SendData_5:
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   2C0000EA           B        ??SendData_7
    436                  }
    437                  break;
    438              case CMD_GENERIC_STATIC_DATA:
    439                  {
    440                      QueueANPRO10_COMMAND_2602 Cmd;
    441                      Cmd.TxInfo.Port           = NULL;
   \                     ??SendData_2:
   \   00000108   00408DE5           STR      R4,[SP, #+0]
    442                      Cmd.TxInfo.rxAddr         = DEVICE_BROADCAST_ADDR;
   \   0000010C   04C0CDE5           STRB     R12,[SP, #+4]
    443                      Cmd.TxInfo.rxId           = DEVICE_BROADCAST_TXU;
   \   00000110   0530CDE5           STRB     R3,[SP, #+5]
    444                      Cmd.Data.ObjectId         = IDNumber;
   \   00000114   000092E5           LDR      R0,[R2, #+0]
    445                      Cmd.Data.ndb              = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000118   1610A0E3           MOV      R1,#+22
   \   0000011C   0A00CDE5           STRB     R0,[SP, #+10]
   \   00000120   2004A0E1           LSR      R0,R0,#+8
   \   00000124   0B00CDE5           STRB     R0,[SP, #+11]
   \   00000128   2004A0E1           LSR      R0,R0,#+8
   \   0000012C   0C00CDE5           STRB     R0,[SP, #+12]
   \   00000130   2004A0E1           LSR      R0,R0,#+8
   \   00000134   0D00CDE5           STRB     R0,[SP, #+13]
   \   00000138   B810CDE1           STRH     R1,[SP, #+8]
    446                      Cmd.Data.CommandNo        = CMD_GENERIC_STATIC_DATA;
   \   0000013C   6610A0E3           MOV      R1,#+102
   \   00000140   B610CDE1           STRH     R1,[SP, #+6]
    447                      Cmd.Data.CardChannel      = CardChannel;
   \   00000144   BC10D2E5           LDRB     R1,[R2, #+188]
    448                      Cmd.Data.CardId           = CardId;
    449                      Cmd.Data.CardAddress      = CardAddress;
    450                      Cmd.Data.UnitProgVersion  = UnitProgVersion;
    451                      Cmd.Data.ComVersion       = ComVersion;
    452                      Cmd.Data.StoreVersion     = StoreVersion;
    453                      Cmd.Data.RxBufSize        = RxBufSize;
    454                      Cmd.Data.TxBufSize        = TxBufSize;
    455                      Cmd.Data.ResetStatus      = ResetStatus;
    456                      Cmd.Data.ProgamTypeRunning = ProgamTypeRunning;
    457                      Cmd.Data.TotalUnitRestart =  TotalUnitRestart;
    458                      Cmd.Data.CardVoltage      = CardVoltage;
    459                      bool sent = ANPRO10SendNormal(&Cmd);
    460                      if ( !sent ) ErrorStatus =  E_QUEUE_FULL;
   \   00000148   0D00A0E1           MOV      R0,SP
   \   0000014C   0E10CDE5           STRB     R1,[SP, #+14]
   \   00000150   BD10D2E5           LDRB     R1,[R2, #+189]
   \   00000154   0F10CDE5           STRB     R1,[SP, #+15]
   \   00000158   BE10D2E5           LDRB     R1,[R2, #+190]
   \   0000015C   1010CDE5           STRB     R1,[SP, #+16]
   \   00000160   BF10D2E5           LDRB     R1,[R2, #+191]
   \   00000164   1110CDE5           STRB     R1,[SP, #+17]
   \   00000168   C010D2E5           LDRB     R1,[R2, #+192]
   \   0000016C   1210CDE5           STRB     R1,[SP, #+18]
   \   00000170   C110D2E5           LDRB     R1,[R2, #+193]
   \   00000174   1310CDE5           STRB     R1,[SP, #+19]
   \   00000178   B21CD2E1           LDRH     R1,[R2, #+194]
   \   0000017C   B411CDE1           STRH     R1,[SP, #+20]
   \   00000180   B41CD2E1           LDRH     R1,[R2, #+196]
   \   00000184   B611CDE1           STRH     R1,[SP, #+22]
   \   00000188   0811D2E5           LDRB     R1,[R2, #+264]
   \   0000018C   1810CDE5           STRB     R1,[SP, #+24]
   \   00000190   C610D2E5           LDRB     R1,[R2, #+198]
   \   00000194   1910CDE5           STRB     R1,[SP, #+25]
   \   00000198   B81DD2E1           LDRH     R1,[R2, #+216]
   \   0000019C   BA11CDE1           STRH     R1,[SP, #+26]
   \   000001A0   C81092E5           LDR      R1,[R2, #+200]
   \   000001A4   1C108DE5           STR      R1,[SP, #+28]
   \   000001A8   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   D2FFFF1A           BNE      ??SendData_5
   \   000001B4   CFFFFFEA           B        ??SendData_6
    461                      else ErrorStatus =  E_OK;
    462                  }
    463                  break;
    464              default:
    465                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_3:
   \   000001B8   0100A0E3           MOV      R0,#+1
    466                  break;
    467              }
    468              return (ErrorStatus);
   \                     ??SendData_7:
   \   000001BC   80D08DE2           ADD      SP,SP,#+128
   \   000001C0   1040BDE8           POP      {R4,LR}
   \   000001C4   1EFF2FE1           BX       LR               ;; return
    469          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IOUnitZBHartValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 379, 237, 4501, 24, 237, 4502, 380, 237, 4503, 381
   \              0000E8030000
   \              7B010000ED00
   \              000095110000
   \              18000000ED00
   \              000096110000
   \              7C010000ED00
   \              000097110000
   \              7D010000    
   \   00000034   ED0000009811       DC32 237, 4504, 382, 237, 4505, 383, 237, 4506, 384, 237, 4507, 385
   \              00007E010000
   \              ED0000009911
   \              00007F010000
   \              ED0000009A11
   \              000080010000
   \              ED0000009B11
   \              000081010000
   \   00000064   ED0000009F11       DC32 237, 4511, 386, 237, 4655, 387, 237, 4656, 388, 237, 4508, 389
   \              000082010000
   \              ED0000002F12
   \              000083010000
   \              ED0000003012
   \              000084010000
   \              ED0000009C11
   \              000085010000
   \   00000094   ED0000009D11       DC32 237, 4509
   \              0000        

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data IOUnitZBHart::__vtbl[37]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~IOUnitZBHart`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??SortAnalogInputs
   \              ............
   \   00000060   ............       DC32 ??SaveSettings, ??Calculate, ??CreateAlarms, ??WriteXML
   \              ............
   \              ........    
   \   00000070   ............       DC32 ??LCWriteXML, ??RefreshData, ??IsStaticValue
   \              ............
   \   0000007C   ............       DC32 ??ANPRO10_IO_UnpackPacket, ??Add, ??PowerOn, ??HandleIO
   \              ............
   \              ........    
   \   0000008C   ............       DC32 ??SendToIO, ??GetRequestNumber
   \              ....        
   \   00000094   5A4248617274       DC8 "ZBHart:"
   \              3A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TCU ">`:
   \   00000000   5443552000         DC8 "TCU "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   20636F6D2D70       DC8 " com-port "
   \              6F72742000  
   \   00000013   00                 DC8 0
   \   00000014   4368616E6E65       DC8 "Channel "
   \              6C2000      
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   206F6E20494F       DC8 " on IO "
   \              2000        
   \   00000028   20616464722E       DC8 " addr."
   \              00          
   \   0000002F   00                 DC8 0
   \   00000030   0A4368616E6E       DC8 "\012Channel allredy used.\012 Try to set sensor for "
   \              656C20616C6C
   \              726564792075
   \              7365642E0A20
   \              54727920746F
   \              207365742073
   \              656E736F7220
   \              666F722000  
   \   0000005F   00                 DC8 0
   \   00000060   2E0A204E6F74       DC8 2EH, 0AH, 20H, 4EH, 6FH, 74H, 20H, 6CH
   \              206C        
   \   00000068   6567616C205A       DC8 65H, 67H, 61H, 6CH, 20H, 5AH, 42H, 48H
   \              4248        
   \   00000070   617274204368       DC8 61H, 72H, 74H, 20H, 43H, 68H, 61H, 6EH
   \              616E        
   \   00000078   6E656C2E0A54       DC8 6EH, 65H, 6CH, 2EH, 0AH, 54H, 72H, 79H
   \              7279        
   \   00000080   20746F207365       DC8 20H, 74H, 6FH, 20H, 73H, 65H, 74H, 20H
   \              7420        
   \   00000088   73656E736F72       DC8 73H, 65H, 6EH, 73H, 6FH, 72H, 20H, 66H
   \              2066        
   \   00000090   6F722000           DC8 6FH, 72H, 20H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E0A00             DC8 ".\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs IOUnitZBHart &IOUnitZBHart::new IOUnitZBHart(PROIOComponent *, PRogramObject *)
   \                     `??new IOUnitZBHart`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   AD0FA0E3           MOV      R0,#+692
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new IOUnitZBHart_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??IOUnitZBHart
   \                     `??new IOUnitZBHart_1`:
   \   00000028   ........           B        ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; ??ObjectSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   04009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   ........           B        ?Subroutine19
   \                     ??__sti__routine_1:
   \   00000030   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     RunningTime
    470          #endif
    471          
    472          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     IOUnitZBHart::ANPRO10_IO_UnpackPacket(unsigned char *)
                                       64
     IOUnitZBHart::Add(PROIOComponent *, PRogramObject *)
                                     1216
     IOUnitZBHart::GetStringValue(int, int, AnsiString &)
                                        4
     IOUnitZBHart::GetValue(int, int, float &, int &, int &)
                                       16
     IOUnitZBHart::GetValueInfoTable(int &, int)
                                        0
     IOUnitZBHart::HandleIO(int)       24
     IOUnitZBHart::IOUnitZBHart(PROIOComponent *, PRogramObject *)
                                      148
     IOUnitZBHart::PowerOn()           12
     IOUnitZBHart::PutFloatValue(int, float)
                                        4
     IOUnitZBHart::PutValue(int, int, AnsiString, bool, int *)
                                       60
     IOUnitZBHart::ReceiveData(unsigned char *)
                                       12
     IOUnitZBHart::RequestSetup()       8
     IOUnitZBHart::SendData(unsigned short)
                                      136
     IOUnitZBHart::SendToIO(unsigned short, void *, unsigned short, bool)
                                       20
     IOUnitZBHart::SetFilters()        44
     IOUnitZBHart::new IOUnitZBHart(PROIOComponent *, PRogramObject *)
                                       12
     IOUnitZBHart::~IOUnitZBHart()     12
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     IOUnitZBHart::IOUnitZBHartValueList
                                     156
     IOUnitZBHart::ObjectSet          24
     IOUnitZBHart::IOUnitZBHart(PROIOComponent *, PRogramObject *)
                                     380
     IOUnitZBHart::~IOUnitZBHart()   108
     ?Subroutine18                     8
     IOUnitZBHart::Add(PROIOComponent *, PRogramObject *)
                                    1732
     IOUnitZBHart::GetValue(int, int, float &, int &, int &)
                                      32
     IOUnitZBHart::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine20                     8
     IOUnitZBHart::PutValue(int, int, AnsiString, bool, int *)
                                     100
     ?Subroutine21                     8
     IOUnitZBHart::PutFloatValue(int, float)
                                       8
     IOUnitZBHart::GetValueInfoTable(int &, int)
                                      20
     IOUnitZBHart::ANPRO10_IO_UnpackPacket(unsigned char *)
                                    1028
     IOUnitZBHart::SendToIO(unsigned short, void *, unsigned short, bool)
                                      88
     IOUnitZBHart::PowerOn()          64
     ?Subroutine19                     8
     IOUnitZBHart::RequestSetup()     60
     IOUnitZBHart::HandleIO(int)     388
     IOUnitZBHart::SetFilters()      192
     IOUnitZBHart::ReceiveData(unsigned char *)
                                     376
     IOUnitZBHart::SendData(unsigned short)
                                     456
     ?<Initializer for IOUnitZBHartValueList>
                                     156
     IOUnitZBHart::__vtbl            156
     ?<Constant "TCU ">              148
     ?<Constant ".\n">                 3
     IOUnitZBHart::new IOUnitZBHart(PROIOComponent *, PRogramObject *)
                                      44
     __sti__routine()                 52
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable7                      4
     ??DataTable9                      4
      Others                         812

 
 8 812 bytes in segment CODE
   319 bytes in segment DATA_C
   156 bytes in segment DATA_I
   156 bytes in segment DATA_ID
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    24 bytes in segment INITTAB
 
 5 192 bytes of CODE  memory (+ 3 648 bytes shared)
   475 bytes of CONST memory
   184 bytes of DATA  memory

Errors: none
Warnings: none
