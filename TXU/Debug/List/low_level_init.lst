##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:20:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\CStartup\low_level_init.c              #
#    Command line    =  D:\S2Prog\TXU\CStartup\low_level_init.c --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --dlib_config     #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\LIB\dl4tpainl8n.h" -I              #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\low_level_init.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\low_level_init.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\CStartup\low_level_init.c
      1          /**************************************************
      2           *
      3           * This module contains the function `__low_level_init', a function
      4           * that is called before the `main' function of the program.  Normally
      5           * low-level initializations - such as setting the prefered interrupt
      6           * level or setting the watchdog - can be performed here.
      7           *
      8           * Note that this function is called before the data segments are
      9           * initialized, this means that this function cannot rely on the
     10           * values of global or static variables.
     11           *
     12           * When this function returns zero, the startup code will inhibit the
     13           * initialization of the data segments. The result is faster startup,
     14           * the drawback is that neither global nor static data will be
     15           * initialized.
     16           *
     17           * Copyright 1999-2004 IAR Systems. All rights reserved.
     18           *
     19           * $Revision: 8621 $
     20           *
     21           **************************************************/
     22          
     23          #include "def.h"
     24          #include "2410addr.h"
     25          
     26          #ifdef __cplusplus
     27          extern "C" {
     28          #endif
     29          	extern void Timer_Start(int divider);
     30          
     31          #pragma language=extended
     32          
     33          	__interwork int __low_level_init(void);
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          	__interwork int __low_level_init(void)
     36          	{
   \                     __low_level_init:
   \   00000000   00402DE9           PUSH     {LR}
     37          		/*==================================*/
     38          		/*  Initialize hardware.            */
     39          		/*==================================*/
     40          
     41          		/*==================================*/
     42          		/* Choose if segment initialization */
     43          		/* should be done or not.           */
     44          		/* Return: 0 to omit seg_init       */
     45          		/*         1 to run seg_init        */
     46          		/*==================================*/
     47          		//return 1;
     48          #if (WATCHDOG == 1)
     49          	#ifdef ANBOOTLOADER
     50          		rWTCON  = 0x00008000;			// Disable the watchdog
     51          	#else
     52          	//rWTCON  = 0x00008000;			// Disable the watchdog
     53          	Timer_Start(3);
   \   00000004   0300A0E3           MOV      R0,#+3
   \   00000008   ........           _BLF     Timer_Start,??Timer_Start??rA
     54          	#endif
     55          #else
     56          		rWTCON  = 0x00008000;			// Disable the watchdog
     57          #endif
     58          
     59          		rBWSCON = 0x22d44444;			// Set SDRAM width to 32 bit for bank 6 and 7	, 8 bit and 1 waitstate for 1 to 4, 16 bit, 1 wait state, Using nBE on bank 5
   \   0000000C   54109FE5           LDR      R1,??__low_level_init_0  ;; 0x22d44444
   \   00000010   4804A0E3           MOV      R0,#+1207959552
   \   00000014   001080E5           STR      R1,[R0, #+0]
     60          
     61          /*
     62           Bank 5, set to Ethernet
     63           */
     64          	//rBANKCON5 =  0x0700;
     65          	//rBANKCON5 =  0x7ff0;      // hkim. slowest speed at the moment
     66              // Page 205 S3C2410 manual
     67              //           Tacs=11  Tcos=11   Tacc=111 Tcoh=11  Tcah=11     Tacp=11    PMC=00
     68              rBANKCON5 = (3<<13)  |(3<<11) | (7<<8) | (3 << 6) | (3 << 4) | ( 0<<2) | (0);
   \   00000018   180080E3           ORR      R0,R0,#0x18
   \   0000001C   F010A0E3           MOV      R1,#+240
   \   00000020   7F1C81E3           ORR      R1,R1,#0x7F00
   \   00000024   001080E5           STR      R1,[R0, #+0]
     69              //rBANKCON5 = (1<<13)  |(1<<11) | (5<<8) | (2 << 6) | (2 << 4) | ( 0<<2) | (0);
     70          /*
     71           Bank 6, set to SDRAM
     72           RAS to CAS delay; 0 = 2 clk, 1 = 3 clk, 2 = 4 clk
     73           Column address no; 0 = 8 bit, 1 = 9 bit, 2 = 10 bit
     74           */
     75          		rBANKCON6 =  (3<<15) |(0<<2) |(1);
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   600B80E3           ORR      R0,R0,#0x18000
   \   00000030   1C10A0E3           MOV      R1,#+28
   \   00000034   481481E3           ORR      R1,R1,#0x48000000
   \   00000038   ........           STR      R0,[R1], #+4
     76          /*
     77           Bank 7, set to SDRAM
     78           RAS to CAS delay; 0 = 2 clk, 1 = 3 clk, 2 = 4 clk
     79           Column address no; 0 = 8 bit, 1 = 9 bit, 2 = 10 bit
     80           */
     81          		rBANKCON7 =  (3<<15) |(0<<2) |(1);
   \   0000003C   000081E5           STR      R0,[R1, #+0]
     82          /*
     83          	rREFRESH =  (1<<23)  Enable refresh
     84          			|(0<<22)  0 = autorefresh, 1 = Self refresh
     85          			|(0<<20)  RAS pre charge time; 0=2 clk, 1=3clk, 2=4clk
     86          			|(0<<18)  RC min time; 0=4clk, 1=5 clk, 2=6clk, 3=7clk
     87          			|(0)       Refresh cnt; 2^11+1 -(90x15.6)
     88          */
     89          		rREFRESH =  (1<<23) |(0<<22) |(0<<20) |(0<<18) |(0);
   \   00000040   040081E3           ORR      R0,R1,#0x4
   \   00000044   8018A0E3           MOV      R1,#+8388608
   \   00000048   001080E5           STR      R1,[R0, #+0]
     90          #ifdef ANBOOTLOADER
     91          		rMRSRB6  =  (2<<4) ; // CAS latency; 0=1clk, 2=2clk, 3=3clk (USE 2!!)
     92          		rMRSRB7  =  (2<<4) ; // CAS latency; 0=1clk, 2=2clk, 3=3clk (USE 2!!)
     93          #endif
     94          		rINTMSK  = BIT_ALLMSK;
   \   0000004C   0800A0E3           MOV      R0,#+8
   \   00000050   4A0480E3           ORR      R0,R0,#0x4A000000
   \   00000054   0010E0E3           MVN      R1,#+0
   \   00000058   001080E5           STR      R1,[R0, #+0]
     95                          return 1;
   \   0000005C   0040BDE8           POP      {LR}
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   1EFF2FE1           BX       LR               ;; return
   \                     ??__low_level_init_0:
   \   00000068   4444D422           DC32     0x22d44444
     96          	}
     97          
     98          #pragma language=default
     99          
    100          #ifdef __cplusplus
    101          }
    102          #endif
    103          
    104          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     __low_level_init     4


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     __low_level_init  108
      Others            16

 
 124 bytes in segment CODE
 
 108 bytes of CODE memory (+ 16 bytes shared)

Errors: none
Warnings: none
