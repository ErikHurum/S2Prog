##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:17:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\TDUAlarmWindow.cpp                 #
#    Command line    =  D:\S2Prog\TXU\src\TDUAlarmWindow.cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TDUAlarmWindow.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TDUAlarmWindow.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\TDUAlarmWindow.cpp
      1          #include "TDUIncludes.h"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          TDUAlarmWindow::~TDUAlarmWindow(void)
      4          {
   \                     `?~TDUAlarmWindow`:
   \   00000000   00402DE9           PUSH     {LR}
      5          }
   \   00000004   ........           _BLF     `?~TDUPresentWin`,`?~TDUPresentWin??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          TDUAlarmWindow::TDUAlarmWindow(void)
   \                     ??TDUAlarmWindow:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
      8          {
   \   00000004   00519FE5           LDR      R5,??TDUAlarmWindow_1  ;; `?<Constant {{124, 108, 0}, {170, 93, 0}, {171,`
   \   00000008   4CD04DE2           SUB      SP,SP,#+76
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??TDUPresentWin,??TDUPresentWin??rA
   \   00000014   300085E2           ADD      R0,R5,#+48
   \   00000018   440084E5           STR      R0,[R4, #+68]
      9          	UserTouch = false;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   6610C4E5           STRB     R1,[R4, #+102]
     10          	TimerCount =0;
   \   00000028   5C0084E5           STR      R0,[R4, #+92]
     11          	CurrentPage = 0;
   \   0000002C   4C0084E5           STR      R0,[R4, #+76]
     12          	NumUnitsOnPage = 11;
   \   00000030   0B00A0E3           MOV      R0,#+11
   \   00000034   500084E5           STR      R0,[R4, #+80]
     13          	ListViewHandl = LISTVIEW_CreateAttached(WinHandl,TDU_ALARM_WIN,0);
   \   00000038   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   0000003C   0120A0E1           MOV      R2,R1
   \   00000040   6A10A0E3           MOV      R1,#+106
   \   00000044   801E81E3           ORR      R1,R1,#0x800
   \   00000048   ........           _BLF     LISTVIEW_CreateAttached,??LISTVIEW_CreateAttached??rA
   \   0000004C   B406C4E1           STRH     R0,[R4, #+100]
     14          	ListHeadHandl = LISTVIEW_GetHeader(ListViewHandl);
   \   00000050   ........           _BLF     LISTVIEW_GetHeader,??LISTVIEW_GetHeader??rA
   \   00000054   B206C4E1           STRH     R0,[R4, #+98]
     15          
     16          	WM_SetId(ListHeadHandl,GUI_ID_HEADER0);
   \   00000058   8460A0E3           MOV      R6,#+132
   \   0000005C   B06E86E3           ORR      R6,R6,#0xB00
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   ........           _BLF     WM_SetId,??WM_SetId??rA
     17          	{
     18          		HeaderInfo Header[]={
     19          			{ L_WORD124 ,108 ,GUI_TA_LEFT},	 // Location
     20          			{ L_WORD170 , 93 ,GUI_TA_LEFT},	 // Description
     21          			{ L_WORD171 , 40 ,GUI_TA_LEFT},	 // Raised
     22          			{ L_WORD172 , 40 ,GUI_TA_LEFT},	 // Reset
     23          		} ;
   \   00000068   8E11B5E8           LDM      R5!,{R1-R3,R7,R8,R12}
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   8E11A0E8           STM      R0!,{R1-R3,R7,R8,R12}
   \   00000074   8E1195E8           LDM      R5,{R1-R3,R7,R8,R12}
     24          
     25          		for ( int i=0; i< NELEMENTS(Header); i++ ) {
   \   00000078   0050A0E3           MOV      R5,#+0
   \   0000007C   8E1180E8           STM      R0,{R1-R3,R7,R8,R12}
     26          			AddToSKeyList(GUI_ID_HEADER0,i,Header[i].WordKey);
   \                     ??TDUAlarmWindow_2:
   \   00000080   0C00A0E3           MOV      R0,#+12
   \   00000084   1C108DE2           ADD      R1,SP,#+28
   \   00000088   901527E0           MLA      R7,R0,R5,R1
   \   0000008C   008097E5           LDR      R8,[R7, #+0]
   \   00000090   0520A0E1           MOV      R2,R5
   \   00000094   0830A0E1           MOV      R3,R8
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??AddToSKeyList,??AddToSKeyList??rA
     27          			LISTVIEW_AddColumn(ListViewHandl, Header[i].Width, FindDictionaryWord(Header[i].WordKey).c_str(), Header[i].Align);	// S
   \   000000A4   0810A0E1           MOV      R1,R8
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000B0   18009DE5           LDR      R0,[SP, #+24]
   \   000000B4   083097E5           LDR      R3,[R7, #+8]
   \   000000B8   041097E5           LDR      R1,[R7, #+4]
   \   000000BC   100050E3           CMP      R0,#+16
   \   000000C0   F406D4E1           LDRSH    R0,[R4, #+100]
   \   000000C4   04209D25           LDRCS    R2,[SP, #+4]
     28          		}
   \   000000C8   015085E2           ADD      R5,R5,#+1
   \   000000CC   04208D32           ADDCC    R2,SP,#+4
   \   000000D0   ........           _BLF     LISTVIEW_AddColumn,??LISTVIEW_AddColumn??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E4   040055E3           CMP      R5,#+4
   \   000000E8   E4FFFF3A           BCC      ??TDUAlarmWindow_2
     29          	}
     30          
     31          	/*
     32          	HEADER_SetTextAlign(ListHeadHandl,0,GUI_TA_LEFT);
     33          	HEADER_SetTextAlign(ListHeadHandl,1,GUI_TA_LEFT);
     34          	HEADER_SetTextAlign(ListHeadHandl,2,GUI_TA_LEFT);
     35          	HEADER_SetTextAlign(ListHeadHandl,3,GUI_TA_LEFT);
     36          	*/
     37          //    HEADER_SetTextAlign(ListHeadHandl,4,GUI_TA_LEFT);
     38          	SetListViewColor();
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       ??SetListViewColor
     39          	TableSetup();
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           BL       ??TableSetup
     40          }
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   4CD08DE2           ADD      SP,SP,#+76
   \   00000104   F041BDE8           POP      {R4-R8,LR}
   \   00000108   1EFF2FE1           BX       LR               ;; return
   \                     ??TDUAlarmWindow_1:
   \   0000010C   ........           DC32     `?<Constant {{124, 108, 0}, {170, 93, 0}, {171,`
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          void TDUAlarmWindow::SetListViewColor(void)
     43          {
   \                     ??SetListViewColor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     44          	LISTVIEW_SetBkColor(ListViewHandl  , 0, TDU_C_AL_BACK_ACKNOW);
   \   00000008   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     LISTVIEW_SetBkColor,??LISTVIEW_SetBkColor??rA
     45          	LISTVIEW_SetBkColor(ListViewHandl  , 1, TDU_C_AL_BACK_ACKNOW);
   \   00000018   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   ........           _BLF     LISTVIEW_SetBkColor,??LISTVIEW_SetBkColor??rA
     46          	LISTVIEW_SetBkColor(ListViewHandl  , 2, TDU_C_AL_BACK_ACKNOW);
   \   00000028   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   ........           _BLF     LISTVIEW_SetBkColor,??LISTVIEW_SetBkColor??rA
     47          	LISTVIEW_SetTextColor(ListViewHandl, 0, TDU_C_AL_TEXT_ACKNOW);
   \   00000038   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000003C   FF54E0E3           MVN      R5,#-16777216
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           _BLF     LISTVIEW_SetTextColor,??LISTVIEW_SetTextColor??rA
     48          	LISTVIEW_SetTextColor(ListViewHandl, 1, TDU_C_AL_TEXT_ACKNOW);
   \   0000004C   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   ........           _BLF     LISTVIEW_SetTextColor,??LISTVIEW_SetTextColor??rA
     49          	LISTVIEW_SetTextColor(ListViewHandl, 2, TDU_C_AL_TEXT_ACKNOW);
   \   0000005C   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0210A0E3           MOV      R1,#+2
   \   00000068   ........           _BLF     LISTVIEW_SetTextColor,??LISTVIEW_SetTextColor??rA
     50          	LISTVIEW_SetSel(ListViewHandl,-1);
   \   0000006C   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000070   FF1485E3           ORR      R1,R5,#0xFF000000
   \   00000074   ........           _BLF     LISTVIEW_SetSel,??LISTVIEW_SetSel??rA
     51          }
   \   00000078   3040BDE8           POP      {R4,R5,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void TDUAlarmWindow::TableSetup(void)
     54          {
   \                     ??TableSetup:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
     55          	for ( int Count=0; Count<NumUnitsOnPage; Count++ ) {
   \   0000000C   500094E5           LDR      R0,[R4, #+80]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   080000AA           BGE      ??TableSetup_1
   \   0000001C   0A0000EA           B        ??TableSetup_2
     56          		const char *tempString[] = {"", "", "", "", ""};
   \                     ??TableSetup_3:
   \   00000020   30109FE5           LDR      R1,??TableSetup_4  ;; `?<Constant {&"", &"", &"", &"", &""}>`
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   4C5091E8           LDM      R1,{R2,R3,R6,R12,LR}
     57          		LISTVIEW_AddRow(ListViewHandl,tempString);
   \   0000002C   0D10A0E1           MOV      R1,SP
     58          	}
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   4C5080E8           STM      R0,{R2,R3,R6,R12,LR}
   \   00000038   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000003C   ........           _BLF     LISTVIEW_AddRow,??LISTVIEW_AddRow??rA
   \                     ??TableSetup_1:
   \   00000040   500094E5           LDR      R0,[R4, #+80]
   \   00000044   000055E1           CMP      R5,R0
   \   00000048   F4FFFFBA           BLT      ??TableSetup_3
     59          }
   \                     ??TableSetup_2:
   \   0000004C   14D08DE2           ADD      SP,SP,#+20
   \   00000050   7040BDE8           POP      {R4-R6,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??TableSetup_4:
   \   00000058   ........           DC32     `?<Constant {&"", &"", &"", &"", &""}>`
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          void TDUAlarmWindow::SetButton(void)
     62          {
   \                     ??SetButton:
   \   00000000   10402DE9           PUSH     {R4,LR}
     63          	//bool EnableButtons[NUMBER_OF_BUTTONS] =
     64          	ButWindow->EnableButtons(true,true,false,true,true);
   \   00000004   48409FE5           LDR      R4,??SetButton_1  ;; ButWindow
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   01002DE9           PUSH     {R0}
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   ........           _BLF     ??EnableButtons,??EnableButtons??rA
     65          	ButWindow->ChangeButtonText(L_WORD87,L_WORD88,L_WORD237,L_WORD169,L_WORD18);
   \   00000028   1200A0E3           MOV      R0,#+18
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   A900A0E3           MOV      R0,#+169
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   ED30A0E3           MOV      R3,#+237
   \   00000040   5820A0E3           MOV      R2,#+88
   \   00000044   5710A0E3           MOV      R1,#+87
   \   00000048   ........           _BLF     ??ChangeButtonText,??ChangeButtonText??rA
     66          }
   \   0000004C   1F40BDE8           POP      {R0-R4,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     ??SetButton_1:
   \   00000054   ........           DC32     ButWindow
     67          
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          void TDUAlarmWindow::PWTimer(void)
     70          {
   \                     ??PWTimer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     71              if ( (AlarmBasic::PROActiveAlarmList.Changed & 1) || ( AlarmBasic::PROAcknowAlarmList.Changed & 1 ) ) {
   \   00000004   ........           LDR      R6,??DataTable6  ;; ??PROActiveAlarmList
   \   00000008   ........           LDR      R5,??DataTable4  ;; ??PROAcknowAlarmList
   \   0000000C   54D04DE2           SUB      SP,SP,#+84
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   140096E5           LDR      R0,[R6, #+20]
   \   00000018   010010E3           TST      R0,#0x1
   \   0000001C   14009505           LDREQ    R0,[R5, #+20]
   \   00000020   01001003           TSTEQ    R0,#0x1
   \   00000024   6300000A           BEQ      ??PWTimer_1
     72                  //int Align = GUI_TA_HCENTER;
     73                  AnsiString AlMsg;
   \   00000028   1C008DE2           ADD      R0,SP,#+28
   \   0000002C   ........           _BLF     ??AnsiString,??AnsiString??rA
     74                  AlarmBasic::PROActiveAlarmList.Protect();
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           _BLF     ??Protect,??Protect??rA
     75                  AlarmBasic::PROAcknowAlarmList.Protect();
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??Protect,??Protect??rA
     76                  if ( !AlarmBasic::PROActiveAlarmList.isEmpty() ) {
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1200001A           BNE      ??PWTimer_2
     77                      PRONode *TNode = AlarmBasic::PROActiveAlarmList.getHead();
   \   00000050   0600A0E1           MOV      R0,R6
   \                     ??PWTimer_3:
   \   00000054   ........           _BLF     ??getHead,??getHead??rA
     78                      TNode = TNode->getNext();
   \   00000058   ........           _BLF     ??getNext,??getNext??rA
     79                      AlarmBasic *TempElement = (AlarmBasic*)TNode->getElement();
   \   0000005C   ........           _BLF     ??getElement,??getElement??rA
     80                      AlMsg = TempElement->Get_CompleteMessage();
   \   00000060   A42090E5           LDR      R2,[R0, #+164]
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   5C2092E5           LDR      R2,[R2, #+92]
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   12FF2FE1           BX       R2
   \   00000074   48019FE5           LDR      R0,??PWTimer_4   ;; ??npos
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   003090E5           LDR      R3,[R0, #+0]
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   1C008DE2           ADD      R0,SP,#+28
   \   00000088   ........           _BLF     ??assign,??assign??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   1B0000EA           B        ??PWTimer_5
     81                  } else if ( !AlarmBasic::PROAcknowAlarmList.isEmpty() ) {
   \                     ??PWTimer_2:
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100001A           BNE      ??PWTimer_6
     82                      PRONode *TNode = AlarmBasic::PROAcknowAlarmList.getHead();
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   E7FFFFEA           B        ??PWTimer_3
     83                      TNode = TNode->getNext();
     84                      AlarmBasic *TempElement = (AlarmBasic*)TNode->getElement();
     85                      AlMsg = TempElement->Get_CompleteMessage();
     86                  } else {
     87                      AlMsg =  FindDictionaryWord(L_WORD173).c_str();	// No Alarm
   \                     ??PWTimer_6:
   \   000000B4   AD10A0E3           MOV      R1,#+173
   \   000000B8   38008DE2           ADD      R0,SP,#+56
   \   000000BC   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000C0   50009DE5           LDR      R0,[SP, #+80]
   \   000000C4   100050E3           CMP      R0,#+16
   \   000000C8   3C109D25           LDRCS    R1,[SP, #+60]
   \   000000CC   0D00A0E1           MOV      R0,SP
   \   000000D0   3C108D32           ADDCC    R1,SP,#+60
   \   000000D4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000D8   E4109FE5           LDR      R1,??PWTimer_4   ;; ??npos
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   003091E5           LDR      R3,[R1, #+0]
   \   000000E4   0010A0E1           MOV      R1,R0
   \   000000E8   1C008DE2           ADD      R0,SP,#+28
   \   000000EC   ........           _BLF     ??assign,??assign??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   0D00A0E1           MOV      R0,SP
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   38008DE2           ADD      R0,SP,#+56
     88                  }
     89                  AlarmBasic::PROActiveAlarmList.UnProtect();
     90                  AlarmBasic::PROAcknowAlarmList.UnProtect();
     91                  if ( AlMsg.Length()>20 ) {
   \                     ??PWTimer_5:
   \   0000010C   ........           LDR      R7,??DataTable5  ;; MainWindow
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   ........           _BLF     ??UnProtect,??UnProtect??rA
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           _BLF     ??UnProtect,??UnProtect??rA
   \   00000124   1C008DE2           ADD      R0,SP,#+28
   \   00000128   ........           _BLF     ??Length,??Length??rA
   \   0000012C   150050E3           CMP      R0,#+21
     92                      BUTTON_SetTextAlign(MainWindow->ButtonAlarm,GUI_TA_LEFT | GUI_TA_VCENTER);
     93                  } else {
     94                      BUTTON_SetTextAlign(MainWindow->ButtonAlarm,GUI_TA_HCENTER | GUI_TA_VCENTER);
   \   00000130   000097E5           LDR      R0,[R7, #+0]
   \   00000134   0C10A0A3           MOVGE    R1,#+12
   \   00000138   F005D0E1           LDRSH    R0,[R0, #+80]
   \   0000013C   0E10A0B3           MOVLT    R1,#+14
   \   00000140   ........           _BLF     BUTTON_SetTextAlign,??BUTTON_SetTextAlign??rA
     95                  }
     96                  BUTTON_SetText(MainWindow->ButtonAlarm, AlMsg.c_str());
   \   00000144   34009DE5           LDR      R0,[SP, #+52]
   \   00000148   100050E3           CMP      R0,#+16
   \   0000014C   000097E5           LDR      R0,[R7, #+0]
   \   00000150   20109D25           LDRCS    R1,[SP, #+32]
   \   00000154   F005D0E1           LDRSH    R0,[R0, #+80]
   \   00000158   20108D32           ADDCC    R1,SP,#+32
   \   0000015C   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
     97                  if ( CurrentWinID == TDU_ALARM_WIN ) {
   \   00000160   60009FE5           LDR      R0,??PWTimer_4+0x4  ;; CurrentWinID
   \   00000164   6A10A0E3           MOV      R1,#+106
   \   00000168   000090E5           LDR      R0,[R0, #+0]
   \   0000016C   801E81E3           ORR      R1,R1,#0x800
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   0B00001A           BNE      ??PWTimer_7
     98                      AlarmBasic::PROActiveAlarmList.Changed &= ~1;
   \   00000178   141096E5           LDR      R1,[R6, #+20]
   \   0000017C   0100E0E3           MVN      R0,#+1
   \   00000180   011000E0           AND      R1,R0,R1
   \   00000184   141086E5           STR      R1,[R6, #+20]
     99                      AlarmBasic::PROAcknowAlarmList.Changed &= ~1;
   \   00000188   141095E5           LDR      R1,[R5, #+20]
   \   0000018C   010000E0           AND      R0,R0,R1
   \   00000190   140085E5           STR      R0,[R5, #+20]
    100                      Paintnew();
   \   00000194   441094E5           LDR      R1,[R4, #+68]
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   041091E5           LDR      R1,[R1, #+4]
   \   000001A0   0FE0A0E1           MOV      LR,PC
   \   000001A4   11FF2FE1           BX       R1
    101                  }
    102              }
   \                     ??PWTimer_7:
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   1C008DE2           ADD      R0,SP,#+28
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
    103          }
   \                     ??PWTimer_1:
   \   000001B8   54D08DE2           ADD      SP,SP,#+84
   \   000001BC   F040BDE8           POP      {R4-R7,LR}
   \   000001C0   1EFF2FE1           BX       LR               ;; return
   \                     ??PWTimer_4:
   \   000001C4   ........           DC32     ??npos
   \   000001C8   ........           DC32     CurrentWinID

   \                                 In segment CODE, align 4, keep-with-next
    104          void TDUAlarmWindow::SetColours(int Line, AlarmBasic *AlElement)
    105          {
   \                     ??SetColours:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   70D04DE2           SUB      SP,SP,#+112
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0270A0E1           MOV      R7,R2
    106          	GUI_COLOR FgColor = TDU_C_AL_TEXT_ACKNOW;
    107          	GUI_COLOR BkColor = TDU_C_AL_BACK_ACKNOW;
    108          	switch ( AlElement->State ) {
   \   00000010   E000D7E5           LDRB     R0,[R7, #+224]
    109          	case AlarmBasic::AlActive: // We have the right state OK
    110          		FgColor = TDU_C_AL_TEXT_ACTIVE;
    111          		BkColor = TDU_C_AL_BACK_ACTIVE;
    112          		break;
    113          	case AlarmBasic::AlAknowledged:
    114          		//FgColor = TDU_C_AL_TEXT_ACTIVE;
    115          		//BkColor = TDU_C_AL_BACK_ACTIVE;
    116          		FgColor = TDU_C_AL_TEXT_ACKNOW;
    117          		BkColor = TDU_C_AL_BACK_ACKNOW;
    118          		break;
    119          	case AlarmBasic::AlIdle:
    120          		FgColor = TDU_C_AL_TEXT_ACKNOW;
    121          		BkColor = TDU_C_AL_BACK_ACKNOW;
    122          		break;
    123          	}
    124          	AnsiString Location  = AlElement->Get_Location();
   \   00000014   A42097E5           LDR      R2,[R7, #+164]
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   602092E5           LDR      R2,[R2, #+96]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010050E3           CMP      R0,#+1
   \   00000028   FF60A003           MOVEQ    R6,#+255
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   12FF2FE1           BX       R2
    125          	AnsiString Type          = AlElement->Get_Message();
   \   0000003C   A42097E5           LDR      R2,[R7, #+164]
   \   00000040   1C108DE2           ADD      R1,SP,#+28
   \   00000044   682092E5           LDR      R2,[R2, #+104]
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   0FE0A0E1           MOV      LR,PC
   \   00000050   12FF2FE1           BX       R2
    126          	AnsiString Raised        = AlElement->GetRisedTime();
   \   00000054   38108DE2           ADD      R1,SP,#+56
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     ??GetRisedTime,??GetRisedTime??rA
    127          	AnsiString Reset         = AlElement->GetResetTime();
   \   00000060   54108DE2           ADD      R1,SP,#+84
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     ??GetResetTime,??GetResetTime??rA
    128          	LISTVIEW_SetItemTextWithColor(ListViewHandl, 0, Line, Location.c_str(),FgColor, BkColor);
   \   0000006C   18009DE5           LDR      R0,[SP, #+24]
   \   00000070   FF74E0E3           MVN      R7,#-16777216
   \   00000074   100050E3           CMP      R0,#+16
   \   00000078   04309D25           LDRCS    R3,[SP, #+4]
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   04308D32           ADDCC    R3,SP,#+4
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    129          	LISTVIEW_SetItemTextWithColor(ListViewHandl, 1, Line, Type.c_str(),FgColor, BkColor);
   \   000000A0   3C009DE5           LDR      R0,[SP, #+60]
   \   000000A4   08D08DE2           ADD      SP,SP,#+8
   \   000000A8   100050E3           CMP      R0,#+16
   \   000000AC   20309D25           LDRCS    R3,[SP, #+32]
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   20308D32           ADDCC    R3,SP,#+32
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   0700A0E1           MOV      R0,R7
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   F406D4E1           LDRSH    R0,[R4, #+100]
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    130          	LISTVIEW_SetItemTextWithColor(ListViewHandl, 2, Line, Raised.c_str(),FgColor, BkColor);
   \   000000D4   58009DE5           LDR      R0,[SP, #+88]
   \   000000D8   08D08DE2           ADD      SP,SP,#+8
   \   000000DC   100050E3           CMP      R0,#+16
   \   000000E0   3C309D25           LDRCS    R3,[SP, #+60]
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   3C308D32           ADDCC    R3,SP,#+60
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   0700A0E1           MOV      R0,R7
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   F406D4E1           LDRSH    R0,[R4, #+100]
   \   000000FC   0520A0E1           MOV      R2,R5
   \   00000100   0210A0E3           MOV      R1,#+2
   \   00000104   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    131          	LISTVIEW_SetItemTextWithColor(ListViewHandl, 3, Line, Reset.c_str(),FgColor, BkColor);
   \   00000108   74009DE5           LDR      R0,[SP, #+116]
   \   0000010C   08D08DE2           ADD      SP,SP,#+8
   \   00000110   100050E3           CMP      R0,#+16
   \   00000114   58309D25           LDRCS    R3,[SP, #+88]
   \   00000118   0520A0E1           MOV      R2,R5
   \   0000011C   58308D32           ADDCC    R3,SP,#+88
   \   00000120   40002DE9           PUSH     {R6}
   \   00000124   80002DE9           PUSH     {R7}
   \   00000128   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000012C   0310A0E3           MOV      R1,#+3
   \   00000130   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    132          
    133          }
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   5C008DE2           ADD      R0,SP,#+92
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   40008DE2           ADD      R0,SP,#+64
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   24008DE2           ADD      R0,SP,#+36
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   08008DE2           ADD      R0,SP,#+8
   \   00000170   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000174   78D08DE2           ADD      SP,SP,#+120
   \   00000178   F040BDE8           POP      {R4-R7,LR}
   \   0000017C   1EFF2FE1           BX       LR               ;; return
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          void TDUAlarmWindow::Paintnew(void)
    136          {
   \                     ??Paintnew:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    137          	NumberOfUnits = AlarmBasic::PROActiveAlarmList.Size()+AlarmBasic::PROAcknowAlarmList.Size();
   \   00000004   ........           LDR      R9,??DataTable6  ;; ??PROActiveAlarmList
   \   00000008   ........           LDR      R5,??DataTable4  ;; ??PROAcknowAlarmList
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0900A0E1           MOV      R0,R9
   \   00000018   ........           _BLF     ??Size,??Size??rA
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           _BLF     ??Size,??Size??rA
   \   00000028   060080E0           ADD      R0,R0,R6
   \   0000002C   540084E5           STR      R0,[R4, #+84]
    138          	AlarmBasic::PROActiveAlarmList.Protect();
   \   00000030   0900A0E1           MOV      R0,R9
   \   00000034   ........           _BLF     ??Protect,??Protect??rA
    139          	int Cnt = 0;
   \   00000038   0060A0E3           MOV      R6,#+0
    140          	int LVCount = 0;
    141          	bool ChangedFlag = false;
   \   0000003C   0600A0E1           MOV      R0,R6
    142          	bool CorrectSide = false;
   \   00000040   0000CDE5           STRB     R0,[SP, #+0]
    143          	PageCount = NumberOfUnits/NumUnitsOnPage;
   \   00000044   502094E5           LDR      R2,[R4, #+80]
   \   00000048   543094E5           LDR      R3,[R4, #+84]
   \   0000004C   0070A0E3           MOV      R7,#+0
   \   00000050   0080A0E1           MOV      R8,R0
   \   00000054   0300A0E1           MOV      R0,R3
   \   00000058   0210A0E1           MOV      R1,R2
   \   0000005C   ........           _BLF     ??div32_a,??rA??div32_a
    144          	NumberOfUnitsLastPage = NumberOfUnits - PageCount*NumUnitsOnPage;
   \   00000060   920100E0           MUL      R0,R2,R1
   \   00000064   000053E0           SUBS     R0,R3,R0
   \   00000068   580084E5           STR      R0,[R4, #+88]
    145          	if ( NumberOfUnitsLastPage ) PageCount++;
   \   0000006C   01108112           ADDNE    R1,R1,#+1
   \   00000070   481084E5           STR      R1,[R4, #+72]
    146          
    147          	if ( !AlarmBasic::PROActiveAlarmList.isEmpty() ) {
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   2C00001A           BNE      ??Paintnew_1
    148          		int ActiveAlarmListSize = AlarmBasic::PROActiveAlarmList.Size();
   \   00000084   0900A0E1           MOV      R0,R9
   \   00000088   ........           _BLF     ??Size,??Size??rA
   \   0000008C   00A0A0E1           MOV      R10,R0
    149          		PRONode *TNode = AlarmBasic::PROActiveAlarmList.getHead();
   \   00000090   0900A0E1           MOV      R0,R9
   \   00000094   ........           _BLF     ??getHead,??getHead??rA
    150          		TNode = TNode->getNext();
   \   00000098   ........           _BLF     ??getNext,??getNext??rA
   \   0000009C   00B0A0E1           MOV      R11,R0
    151          		AlarmBasic *TempElement = (AlarmBasic*)TNode->getElement();
   \   000000A0   ........           _BLF     ??getElement,??getElement??rA
   \   000000A4   030000EA           B        ??Paintnew_2
    152          
    153          		for ( ; Cnt < NumUnitsOnPage*CurrentPage && Cnt < ActiveAlarmListSize; Cnt++ ) {
    154          			TNode = TNode->getNext();
   \                     ??Paintnew_3:
   \   000000A8   0B00A0E1           MOV      R0,R11
   \   000000AC   ........           _BLF     ??getNext,??getNext??rA
   \   000000B0   00B0A0E1           MOV      R11,R0
    155          		}
   \   000000B4   016086E2           ADD      R6,R6,#+1
   \                     ??Paintnew_2:
   \   000000B8   500094E5           LDR      R0,[R4, #+80]
   \   000000BC   4C1094E5           LDR      R1,[R4, #+76]
   \   000000C0   910000E0           MUL      R0,R1,R0
   \   000000C4   000056E1           CMP      R6,R0
   \   000000C8   0A0056B1           CMPLT    R6,R10
   \   000000CC   F5FFFFBA           BLT      ??Paintnew_3
    156          		if ( Cnt < ActiveAlarmListSize )CorrectSide = true;
   \   000000D0   0A0056E1           CMP      R6,R10
   \   000000D4   0110A0B3           MOVLT    R1,#+1
   \   000000D8   0010CDB5           STRBLT   R1,[SP, #+0]
   \   000000DC   010000BA           BLT      ??Paintnew_4
   \                     ??Paintnew_5:
   \   000000E0   0A0056E1           CMP      R6,R10
   \   000000E4   130000AA           BGE      ??Paintnew_1
    157          
    158          		for ( ;!ChangedFlag && Cnt<ActiveAlarmListSize;Cnt++ ) {
    159          			TempElement = (AlarmBasic*)TNode->getElement();
   \                     ??Paintnew_4:
   \   000000E8   0B00A0E1           MOV      R0,R11
   \   000000EC   ........           _BLF     ??getElement,??getElement??rA
   \   000000F0   0080A0E1           MOV      R8,R0
    160          			AlarmBasic::PROActiveAlarmList.UnProtect();
   \   000000F4   0900A0E1           MOV      R0,R9
   \   000000F8   ........           _BLF     ??UnProtect,??UnProtect??rA
    161          			SetColours(LVCount++,TempElement);
   \   000000FC   0820A0E1           MOV      R2,R8
   \   00000100   0710A0E1           MOV      R1,R7
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       ??SetColours
    162          			AlarmBasic::PROActiveAlarmList.Protect();
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   ........           _BLF     ??Protect,??Protect??rA
    163          			ChangedFlag = (bool)(AlarmBasic::PROActiveAlarmList.Changed & 1 );
   \   00000114   140099E5           LDR      R0,[R9, #+20]
   \   00000118   017087E2           ADD      R7,R7,#+1
   \   0000011C   018000E2           AND      R8,R0,#0x1
    164          			TNode = TNode->getNext();
   \   00000120   0B00A0E1           MOV      R0,R11
   \   00000124   ........           _BLF     ??getNext,??getNext??rA
   \   00000128   00B0A0E1           MOV      R11,R0
    165          		}
   \   0000012C   016086E2           ADD      R6,R6,#+1
   \   00000130   000058E3           CMP      R8,#+0
   \   00000134   E9FFFF0A           BEQ      ??Paintnew_5
    166          	}
    167          	AlarmBasic::PROActiveAlarmList.UnProtect();
   \                     ??Paintnew_1:
   \   00000138   0900A0E1           MOV      R0,R9
   \   0000013C   ........           _BLF     ??UnProtect,??UnProtect??rA
    168          	if ( !ChangedFlag ) {
   \   00000140   000058E3           CMP      R8,#+0
   \   00000144   6600001A           BNE      ??Paintnew_6
    169          		AlarmBasic::PROAcknowAlarmList.Protect();
   \   00000148   0500A0E1           MOV      R0,R5
   \   0000014C   ........           _BLF     ??Protect,??Protect??rA
    170          		int TotalListSize = AlarmBasic::PROActiveAlarmList.Size()+AlarmBasic::PROAcknowAlarmList.Size();
   \   00000150   0900A0E1           MOV      R0,R9
   \   00000154   ........           _BLF     ??Size,??Size??rA
   \   00000158   0080A0E1           MOV      R8,R0
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   ........           _BLF     ??Size,??Size??rA
   \   00000164   089080E0           ADD      R9,R0,R8
    171          		if ( !AlarmBasic::PROAcknowAlarmList.isEmpty() ) {
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   2A00001A           BNE      ??Paintnew_7
    172          			int AcknowAlarmListSize = AlarmBasic::PROAcknowAlarmList.Size();
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   ........           _BLF     ??Size,??Size??rA
    173          			PRONode *TNode = AlarmBasic::PROAcknowAlarmList.getHead();
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   ........           _BLF     ??getHead,??getHead??rA
    174          			TNode = TNode->getNext();
   \   00000188   ........           _BLF     ??getNext,??getNext??rA
   \   0000018C   00A0A0E1           MOV      R10,R0
    175          			AlarmBasic *TempElement = (AlarmBasic*)TNode->getElement();
   \   00000190   ........           _BLF     ??getElement,??getElement??rA
    176          
    177          			if ( !CorrectSide ) {
   \   00000194   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   0A00001A           BNE      ??Paintnew_8
   \   000001A0   030000EA           B        ??Paintnew_9
    178          				for ( ; Cnt < NumUnitsOnPage*CurrentPage && Cnt < TotalListSize; Cnt++ ) {
    179          					TNode = TNode->getNext();
   \                     ??Paintnew_10:
   \   000001A4   0A00A0E1           MOV      R0,R10
   \   000001A8   ........           _BLF     ??getNext,??getNext??rA
   \   000001AC   00A0A0E1           MOV      R10,R0
    180          				}
   \   000001B0   016086E2           ADD      R6,R6,#+1
   \                     ??Paintnew_9:
   \   000001B4   500094E5           LDR      R0,[R4, #+80]
   \   000001B8   4C1094E5           LDR      R1,[R4, #+76]
   \   000001BC   910000E0           MUL      R0,R1,R0
   \   000001C0   000056E1           CMP      R6,R0
   \   000001C4   090056B1           CMPLT    R6,R9
   \   000001C8   F5FFFFBA           BLT      ??Paintnew_10
   \                     ??Paintnew_8:
   \   000001CC   090056E1           CMP      R6,R9
   \   000001D0   130000AA           BGE      ??Paintnew_7
    181          			}
    182          
    183          			for ( ;!ChangedFlag && Cnt < TotalListSize; Cnt++ ) {
    184          				TempElement = (AlarmBasic*)TNode->getElement();
   \   000001D4   0A00A0E1           MOV      R0,R10
   \   000001D8   ........           _BLF     ??getElement,??getElement??rA
   \   000001DC   0080A0E1           MOV      R8,R0
    185          				AlarmBasic::PROAcknowAlarmList.UnProtect();
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   ........           _BLF     ??UnProtect,??UnProtect??rA
    186          				SetColours(LVCount++,TempElement);
   \   000001E8   0820A0E1           MOV      R2,R8
   \   000001EC   0710A0E1           MOV      R1,R7
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   ........           BL       ??SetColours
    187          				AlarmBasic::PROAcknowAlarmList.Protect();
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??Protect,??Protect??rA
    188          				ChangedFlag = (bool)(AlarmBasic::PROAcknowAlarmList.Changed & 1 );
   \   00000200   140095E5           LDR      R0,[R5, #+20]
   \   00000204   017087E2           ADD      R7,R7,#+1
   \   00000208   018000E2           AND      R8,R0,#0x1
    189          				TNode = TNode->getNext();
   \   0000020C   0A00A0E1           MOV      R0,R10
   \   00000210   ........           _BLF     ??getNext,??getNext??rA
   \   00000214   00A0A0E1           MOV      R10,R0
    190          			}
   \   00000218   016086E2           ADD      R6,R6,#+1
   \   0000021C   000058E3           CMP      R8,#+0
   \   00000220   E9FFFF0A           BEQ      ??Paintnew_8
    191          		}
    192          		AlarmBasic::PROAcknowAlarmList.UnProtect();
   \                     ??Paintnew_7:
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   ........           _BLF     ??UnProtect,??UnProtect??rA
   \   0000022C   500094E5           LDR      R0,[R4, #+80]
   \   00000230   000057E1           CMP      R7,R0
   \   00000234   2A0000AA           BGE      ??Paintnew_6
   \   00000238   2B5F8FE2           ADR      R5,??Paintnew_11  ;; ""
   \   0000023C   FF64E0E3           MVN      R6,#-16777216
    193          		for ( ;LVCount<NumUnitsOnPage;LVCount++ ) {
    194          			LISTVIEW_SetItemTextWithColor(ListViewHandl, 0, LVCount, "",TDU_C_AL_TEXT_ACKNOW, TDU_C_AL_BACK_ACKNOW);
   \                     ??Paintnew_12:
   \   00000240   0000A0E3           MOV      R0,#+0
   \   00000244   01002DE9           PUSH     {R0}
   \   00000248   0600A0E1           MOV      R0,R6
   \   0000024C   01002DE9           PUSH     {R0}
   \   00000250   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000254   0530A0E1           MOV      R3,R5
   \   00000258   0720A0E1           MOV      R2,R7
   \   0000025C   0010A0E3           MOV      R1,#+0
   \   00000260   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    195          			LISTVIEW_SetItemTextWithColor(ListViewHandl, 1, LVCount, "",TDU_C_AL_TEXT_ACKNOW, TDU_C_AL_BACK_ACKNOW);
   \   00000264   0000A0E3           MOV      R0,#+0
   \   00000268   01002DE9           PUSH     {R0}
   \   0000026C   0600A0E1           MOV      R0,R6
   \   00000270   01002DE9           PUSH     {R0}
   \   00000274   F406D4E1           LDRSH    R0,[R4, #+100]
   \   00000278   0530A0E1           MOV      R3,R5
   \   0000027C   0720A0E1           MOV      R2,R7
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    196          			LISTVIEW_SetItemTextWithColor(ListViewHandl, 2, LVCount, "",TDU_C_AL_TEXT_ACKNOW, TDU_C_AL_BACK_ACKNOW);
   \   00000288   0000A0E3           MOV      R0,#+0
   \   0000028C   01002DE9           PUSH     {R0}
   \   00000290   0600A0E1           MOV      R0,R6
   \   00000294   01002DE9           PUSH     {R0}
   \   00000298   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000029C   0530A0E1           MOV      R3,R5
   \   000002A0   0720A0E1           MOV      R2,R7
   \   000002A4   0210A0E3           MOV      R1,#+2
   \   000002A8   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    197          			LISTVIEW_SetItemTextWithColor(ListViewHandl, 3, LVCount, "",TDU_C_AL_TEXT_ACKNOW, TDU_C_AL_BACK_ACKNOW);
   \   000002AC   0000A0E3           MOV      R0,#+0
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   0600A0E1           MOV      R0,R6
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   F406D4E1           LDRSH    R0,[R4, #+100]
   \   000002C0   0530A0E1           MOV      R3,R5
   \   000002C4   0720A0E1           MOV      R2,R7
   \   000002C8   0310A0E3           MOV      R1,#+3
   \   000002CC   ........           _BLF     LISTVIEW_SetItemTextWithColor,??LISTVIEW_SetItemTextWithColor??rA
    198          		}
   \   000002D0   500094E5           LDR      R0,[R4, #+80]
   \   000002D4   017087E2           ADD      R7,R7,#+1
   \   000002D8   000057E1           CMP      R7,R0
   \   000002DC   20D08DE2           ADD      SP,SP,#+32
   \   000002E0   D6FFFFBA           BLT      ??Paintnew_12
    199          	}
    200          }
   \                     ??Paintnew_6:
   \   000002E4   F14FBDE8           POP      {R0,R4-R11,LR}
   \   000002E8   1EFF2FE1           BX       LR               ;; return
   \                     ??Paintnew_11:
   \   000002EC   00000000           DC8      "",+0,+0,+0
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          void TDUAlarmWindow::ButtonClicked(int ButtID)
    203          {
   \                     ??ButtonClicked:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    204          	switch ( ButtID ) {
   \   00000004   D0409FE5           LDR      R4,??ButtonClicked_2  ;; ??AlarmSilence
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   4C0092E5           LDR      R0,[R2, #+76]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   0150A0E3           MOV      R5,#+1
   \   00000018   D11041E2           SUB      R1,R1,#+209
   \   0000001C   801E41E2           SUB      R1,R1,#+2048
   \   00000020   040051E3           CMP      R1,#+4
   \   00000024   2600008A           BHI      ??ButtonClicked_3
   \   00000028   01CF8FE2           ADR      R12,??ButtonClicked_1
   \   0000002C   01C0DCE7           LDRB     R12,[R12, R1]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??ButtonClicked_1:
   \   00000034   01131A1C           DC8      +1,+19,+26,+28
   \   00000038   25000000           DC8      +37,+0,+0,+0
    205          	case TDU_BUTTON_ID_PW1:
    206          		if ( CurrentPage<=0 ) {
   \                     ??ButtonClicked_4:
   \   0000003C   010050E3           CMP      R0,#+1
    207          			//	CurrentPage = PageCount-1;
    208          			CurrentPage = 0;
   \   00000040   4C3082B5           STRLT    R3,[R2, #+76]
   \   00000044   010000BA           BLT      ??ButtonClicked_5
    209          		} else {
    210          			CurrentPage--;
   \   00000048   010040E2           SUB      R0,R0,#+1
   \                     ??ButtonClicked_6:
   \   0000004C   4C0082E5           STR      R0,[R2, #+76]
    211          		}
    212          		TimedOut = false;
   \                     ??ButtonClicked_5:
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   6000C2E5           STRB     R0,[R2, #+96]
    213          		TimerCount=50;
   \   00000058   3200A0E3           MOV      R0,#+50
   \   0000005C   5C0082E5           STR      R0,[R2, #+92]
    214          		Paintnew();
   \   00000060   441092E5           LDR      R1,[R2, #+68]
   \   00000064   0200A0E1           MOV      R0,R2
   \   00000068   041091E5           LDR      R1,[R1, #+4]
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   11FF2FE1           BX       R1
    215          		SetGuiEvent(PWEventHandl,1,&aTCB[1]);
   \   00000074   64109FE5           LDR      R1,??ButtonClicked_2+0x4  ;; aTCB + 64
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     OS_SignalEvent,??OS_SignalEvent??rA
   \   00000080   0F0000EA           B        ??ButtonClicked_3
   \                     ??ButtonClicked_7:
   \   00000084   481092E5           LDR      R1,[R2, #+72]
   \   00000088   011041E2           SUB      R1,R1,#+1
   \   0000008C   010050E1           CMP      R0,R1
    216          		break;
    217          	case TDU_BUTTON_ID_PW2:
    218          		if ( CurrentPage >= (PageCount-1) ) {
    219          //					CurrentPage = 0;
    220          			CurrentPage = (PageCount-1);
   \   00000090   4C1082A5           STRGE    R1,[R2, #+76]
   \   00000094   EDFFFFAA           BGE      ??ButtonClicked_5
    221          		} else {
    222          			CurrentPage++;
   \   00000098   010080E2           ADD      R0,R0,#+1
   \   0000009C   EAFFFFEA           B        ??ButtonClicked_6
    223          		}
    224          		TimedOut = false;
    225          		TimerCount=50;
    226          		Paintnew();
    227          		SetGuiEvent(PWEventHandl,1,&aTCB[1]);
    228          		break;
    229          	case TDU_BUTTON_ID_PW3:
    230          		AckAllButtonClicked();
   \                     ??ButtonClicked_8:
   \   000000A0   ........           _BLF     ??AckAll,??AckAll??rA
    231          		AlarmBasic::AlarmSilence = true;
   \   000000A4   050000EA           B        ??ButtonClicked_9
    232          		break;
    233          	case TDU_BUTTON_ID_PW4:
    234          		AckButtonClicked(AlarmBasic::LocalResetCnt++);
   \                     ??ButtonClicked_10:
   \   000000A8   34009FE5           LDR      R0,??ButtonClicked_2+0x8  ;; ??LocalResetCnt
   \   000000AC   001090E5           LDR      R1,[R0, #+0]
   \   000000B0   013081E2           ADD      R3,R1,#+1
   \   000000B4   003080E5           STR      R3,[R0, #+0]
   \   000000B8   0200A0E1           MOV      R0,R2
   \   000000BC   ........           BL       ??AckButtonClicked
    235          		AlarmBasic::AlarmSilence = true;
   \                     ??ButtonClicked_9:
   \   000000C0   0050C4E5           STRB     R5,[R4, #+0]
   \                     ??ButtonClicked_3:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR
    236          		break;
    237          	case TDU_BUTTON_ID_PW5:
    238          		MainWindow->SetPreviousWindow();
   \                     ??ButtonClicked_11:
   \   000000CC   ........           LDR      R0,??DataTable5  ;; MainWindow
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??SetPreviousWindow,??SetPreviousWindow??rA
    239          		break;
    240          	}
    241          }
   \                     ??ButtonClicked_12:
   \   000000D8   F9FFFFEA           B        ??ButtonClicked_3
   \                     ??ButtonClicked_2:
   \   000000DC   ........           DC32     ??AlarmSilence
   \   000000E0   ........           DC32     aTCB + 64
   \   000000E4   ........           DC32     ??LocalResetCnt
    242          

   \                                 In segment CODE, align 4, keep-with-next
    243          void TDUAlarmWindow::AckAllButtonClicked(void)
    244          {
   \                     ??AckAllButtonClicked:
   \   00000000   00402DE9           PUSH     {LR}
    245          	AlarmBasic::AckAll();
   \   00000004   ........           _BLF     ??AckAll,??AckAll??rA
    246          }
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    247          

   \                                 In segment CODE, align 4, keep-with-next
    248          void TDUAlarmWindow::AckButtonClicked(int ButtID)
    249          {
   \                     ??AckButtonClicked:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    250             // AnsiString Text2;
    251          	AlarmBasic::PROActiveAlarmList.Protect();
   \   00000004   ........           LDR      R4,??DataTable6  ;; ??PROActiveAlarmList
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??Protect,??Protect??rA
    252          	if ( !AlarmBasic::PROActiveAlarmList.isEmpty() ) {
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   2400001A           BNE      ??AckButtonClicked_1
    253          		AlarmBasic *TempElement;
    254          		PRONode *TNode = AlarmBasic::PROActiveAlarmList.getHead();
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??getHead,??getHead??rA
    255          		TNode = TNode->getNext();
   \   0000002C   ........           _BLF     ??getNext,??getNext??rA
   \   00000030   0060A0E1           MOV      R6,R0
    256          		int ListSize = AlarmBasic::PROActiveAlarmList.Size();
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??Size,??Size??rA
   \   0000003C   0070A0E1           MOV      R7,R0
    257          		int index = 0;
   \   00000040   0080A0E3           MOV      R8,#+0
   \   00000044   030000EA           B        ??AckButtonClicked_2
    258          		while ( index<ButtID && index<ListSize ) {
    259          			index++;
   \                     ??AckButtonClicked_3:
   \   00000048   018088E2           ADD      R8,R8,#+1
    260          			TNode = TNode->getNext();
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??getNext,??getNext??rA
   \   00000054   0060A0E1           MOV      R6,R0
    261          		}
   \                     ??AckButtonClicked_2:
   \   00000058   050058E1           CMP      R8,R5
   \   0000005C   070058B1           CMPLT    R8,R7
   \   00000060   F8FFFFBA           BLT      ??AckButtonClicked_3
    262          		if ( index<ListSize ) {
   \   00000064   070058E1           CMP      R8,R7
   \   00000068   120000AA           BGE      ??AckButtonClicked_1
    263                      //  We located the alarm
    264                      TempElement = (AlarmBasic*)TNode->getElement();
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           _BLF     ??getElement,??getElement??rA
    265          
    266          			if ( Master || AlarmCriticalComFailure::ComFailure )
   \   00000074   4C109FE5           LDR      R1,??AckButtonClicked_4  ;; ??ComFailure
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   48009FE5           LDR      R0,??AckButtonClicked_4+0x4  ;; Master
   \   00000080   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000084   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000088   000091E1           ORRS     R0,R1,R0
   \   0000008C   0200000A           BEQ      ??AckButtonClicked_5
    267          				TempElement->MoveAlarmToAknowledge();
   \   00000090   0200A0E1           MOV      R0,R2
   \   00000094   ........           _BLF     ??MoveAlarmToAknowledge,??MoveAlarmToAknowledge??rA
   \   00000098   060000EA           B        ??AckButtonClicked_1
    268          			else
    269          				TempElement->SendData(CMD_PRO_ALARM_ACK);
   \                     ??AckButtonClicked_5:
   \   0000009C   0200A0E1           MOV      R0,R2
   \   000000A0   A42092E5           LDR      R2,[R2, #+164]
   \   000000A4   B910A0E3           MOV      R1,#+185
   \   000000A8   402092E5           LDR      R2,[R2, #+64]
   \   000000AC   B01E81E3           ORR      R1,R1,#0xB00
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   12FF2FE1           BX       R2
    270          		}
    271          	}
    272          	AlarmBasic::PROActiveAlarmList.UnProtect();
   \                     ??AckButtonClicked_1:
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           _BLF     ??UnProtect,??UnProtect??rA
    273          }
   \   000000C0   F041BDE8           POP      {R4-R8,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return
   \                     ??AckButtonClicked_4:
   \   000000C8   ........           DC32     ??ComFailure
   \   000000CC   ........           DC32     Master
    274          

   \                                 In segment CODE, align 4, keep-with-next
    275          void TDUAlarmWindow::cbEventHandler(WM_MESSAGE * pMsg)
    276          {
   \                     ??cbEventHandler:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0160A0E1           MOV      R6,R1
    277          	//WM_HWIN hWin = pMsg->hWin;
    278          	switch ( pMsg->MsgId ) {
   \   00000008   001096E5           LDR      R1,[R6, #+0]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   F600D6E1           LDRSH    R0,[R6, #+6]
   \   00000014   0150A0E3           MOV      R5,#+1
   \   00000018   011041E2           SUB      R1,R1,#+1
   \   0000001C   400E51E3           CMP      R1,#+1024
   \   00000020   1D02008A           BHI      ??cbEventHandler_2
   \   00000024   022F8FE2           ADR      R2,??cbEventHandler_1
   \   00000028   8110A0E1           MOV      R1,R1, LSL #+1
   \   0000002C   B12092E1           LDRH     R2,[R2, R1]
   \   00000030   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??cbEventHandler_1:
   \   00000034   0C0219021902       DC16     +524,+537,+537,+537
   \              1902        
   \   0000003C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000044   190219021902       DC16     +537,+537,+537,+512
   \              0002        
   \   0000004C   000219020E02       DC16     +512,+537,+526,+537
   \              1902        
   \   00000054   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000005C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000064   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000006C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000074   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000007C   190204021902       DC16     +537,+516,+537,+537
   \              1902        
   \   00000084   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000008C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000094   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000009C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000000FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000104   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000010C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000114   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000011C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000124   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000012C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000134   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000013C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000144   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000014C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000154   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000015C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000164   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000016C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000174   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000017C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000184   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000018C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000194   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000019C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000001FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000204   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000020C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000214   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000021C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000224   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000022C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000234   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000023C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000244   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000024C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000254   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000025C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000264   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000026C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000274   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000027C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000284   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000028C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000294   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000029C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000002FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000304   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000030C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000314   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000031C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000324   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000032C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000334   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000033C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000344   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000034C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000354   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000035C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000364   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000036C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000374   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000037C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000384   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000038C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000394   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000039C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000003FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000404   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000040C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000414   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000041C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000424   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000042C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000434   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000043C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000444   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000044C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000454   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000045C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000464   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000046C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000474   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000047C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000484   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000048C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000494   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000049C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000004FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000504   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000050C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000514   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000051C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000524   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000052C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000534   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000053C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000544   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000054C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000554   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000055C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000564   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000056C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000574   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000057C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000584   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000058C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000594   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000059C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000005FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000604   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000060C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000614   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000061C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000624   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000062C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000634   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000063C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000644   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000064C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000654   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000065C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000664   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000066C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000674   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000067C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000684   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000068C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000694   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000069C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000006FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000704   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000070C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000714   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000071C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000724   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000072C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000734   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000073C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000744   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000074C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000754   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000075C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000764   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000076C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000774   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000077C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000784   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000078C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000794   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000079C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007A4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007AC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007B4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007BC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007C4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007CC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007D4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007DC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007E4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007EC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007F4   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   000007FC   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000804   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000080C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000814   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000081C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000824   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   0000082C   190219021902       DC16     +537,+537,+537,+537
   \              1902        
   \   00000834   16020000           DC16     +534,+0
    279          	int NCode, Id;
    280          	case WM_TOUCH:
    281          		{
    282          			Id    = WM_GetId(pMsg->hWinSrc);
    283          			NCode = pMsg->Data.v;
    284          			switch ( Id ) {
   \                     ??cbEventHandler_3:
   \   00000838   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   0000083C   010050E3           CMP      R0,#+1
   \   00000840   0800001A           BNE      ??cbEventHandler_4
    285          			case 1:
    286          				UserTouch = true;
   \   00000844   060000EA           B        ??cbEventHandler_5
    287          				break;
    288          			}
    289          		}
    290          		break;
    291          	case WM_TOUCH_CHILD:
    292          		{
    293          			Id    = WM_GetId(pMsg->hWinSrc);
    294          			NCode = pMsg->Data.v;
    295          			switch ( Id ) {
    296          			case 1:
    297          				UserTouch = true;
    298          				break;
    299          			}
    300          		}
    301          		break;
    302          	case WM_NOTIFY_PARENT:
    303          		{
    304          			Id    = WM_GetId(pMsg->hWinSrc);
   \                     ??cbEventHandler_6:
   \   00000848   ........           _BLF     WM_GetId,??WM_GetId??rA
    305          			NCode = pMsg->Data.v;
    306          			switch ( NCode ) {
   \   0000084C   080096E5           LDR      R0,[R6, #+8]
   \   00000850   010050E3           CMP      R0,#+1
   \   00000854   0300001A           BNE      ??cbEventHandler_4
    307          			case WM_NOTIFICATION_CLICKED:
    308          //					case WM_NOTIFICATION_RELEASED:		/* React only if released */
    309          				{
    310          					LISTVIEW_SetSel(ListViewHandl,-1);
   \   00000858   F406D4E1           LDRSH    R0,[R4, #+100]
   \   0000085C   001065E2           RSB      R1,R5,#+0
   \   00000860   ........           _BLF     LISTVIEW_SetSel,??LISTVIEW_SetSel??rA
    311          					UserTouch = true;
   \                     ??cbEventHandler_5:
   \   00000864   6650C4E5           STRB     R5,[R4, #+102]
   \                     ??cbEventHandler_4:
   \   00000868   7040BDE8           POP      {R4-R6,LR}
   \   0000086C   1EFF2FE1           BX       LR
    312          				}
    313          				break;
    314          			case WM_NOTIFICATION_VALUE_CHANGED:
    315          				{
    316          /*							if ( XScrollPos != SCROLLBAR_GetValue(ScrollHandl) ) {
    317          								XScrollPos = SCROLLBAR_GetValue(ScrollHandl);
    318          								WM_MoveTo(MainWinHandl,0,0-XScrollPos*LineHeight+2*LineHeight);
    319          							}
    320          */}
    321          				break;
    322          			}
    323          		}
    324          		break;
    325          	case WM_PAINT:
    326          		CurrentPage = 0;
   \                     ??cbEventHandler_7:
   \   00000870   0000A0E3           MOV      R0,#+0
   \   00000874   4C0084E5           STR      R0,[R4, #+76]
    327          		Paintnew();
   \   00000878   441094E5           LDR      R1,[R4, #+68]
   \   0000087C   0400A0E1           MOV      R0,R4
   \   00000880   041091E5           LDR      R1,[R1, #+4]
   \   00000884   0FE0A0E1           MOV      LR,PC
   \   00000888   11FF2FE1           BX       R1
   \   0000088C   F5FFFFEA           B        ??cbEventHandler_4
    328          		break;
    329          	case MESSAGE_LANGUAGE_CHANGE:
    330          		UpdateLanguage();
   \                     ??cbEventHandler_8:
   \   00000890   0400A0E1           MOV      R0,R4
   \   00000894   ........           _BLF     ??UpdateLanguage,??UpdateLanguage??rA
   \   00000898   F2FFFFEA           B        ??cbEventHandler_4
    331          		break;
    332          	case WM_CREATE:
    333          		break;
    334          	default:
    335          		WM_DefaultProc(pMsg);
   \                     ??cbEventHandler_2:
   \   0000089C   0600A0E1           MOV      R0,R6
   \   000008A0   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
    336          	}
    337          }
   \                     ??cbEventHandler_9:
   \   000008A4   EFFFFFEA           B        ??cbEventHandler_4

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{124, 108, 0}, {170, 93, 0}, {171,`:
   \   00000000   7C0000006C00       DC32 124, 108, 0, 170, 93, 0, 171, 40, 0, 172, 40, 0
   \              000000000000
   \              AA0000005D00
   \              000000000000
   \              AB0000002800
   \              000000000000
   \              AC0000002800
   \              000000000000
   \   __vtbl_entry const __data TDUAlarmWindow::__vtbl[3]
   \                     ??__vtbl:
   \   00000030   ............       DC32 ??SetButton, ??Paintnew, ??cbEventHandler
   \              ............

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {&"", &"", &"", &"", &""}>`:
   \   00000000   ............       DC32 `?<Constant "">`, `?<Constant "">`, `?<Constant "">`
   \              ............
   \   0000000C   ............       DC32 `?<Constant "">`, `?<Constant "">`
   \              ....        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TDUAlarmWindow &TDUAlarmWindow::new TDUAlarmWindow()
   \                     `??new TDUAlarmWindow`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   7000A0E3           MOV      R0,#+112
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TDUAlarmWindow_1`
   \   00000014   ........           BL       ??TDUAlarmWindow
   \                     `??new TDUAlarmWindow_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TDUAlarmWindow::delete ~TDUAlarmWindow(TDUAlarmWindow *)
   \                     `??delete ~TDUAlarmWindow`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TDUAlarmWindow_1`
   \   0000000C   ........           _BLF     `?~TDUPresentWin`,`?~TDUPresentWin??rA`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TDUAlarmWindow_1`:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??PROAcknowAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     MainWindow

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TDUAlarmWindow::AckAllButtonClicked()
                                        4
     TDUAlarmWindow::AckButtonClicked(int)
                                       24
     TDUAlarmWindow::ButtonClicked(int)
                                       12
     TDUAlarmWindow::PWTimer()        104
     TDUAlarmWindow::Paintnew()        72
     TDUAlarmWindow::SetButton()       24
     TDUAlarmWindow::SetColours(int, AlarmBasic *)
                                      140
     TDUAlarmWindow::SetListViewColor()
                                       12
     TDUAlarmWindow::TDUAlarmWindow()
                                      100
     TDUAlarmWindow::TableSetup()      36
     TDUAlarmWindow::cbEventHandler(WM_MESSAGE *)
                                       16
     TDUAlarmWindow::delete ~TDUAlarmWindow(TDUAlarmWindow *)
                                        8
     TDUAlarmWindow::new TDUAlarmWindow()
                                        4
     TDUAlarmWindow::~TDUAlarmWindow()
                                        4
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     TDUAlarmWindow::~TDUAlarmWindow()
                                      16
     TDUAlarmWindow::TDUAlarmWindow()
                                     272
     TDUAlarmWindow::SetListViewColor()
                                     128
     TDUAlarmWindow::TableSetup()     92
     TDUAlarmWindow::SetButton()      88
     TDUAlarmWindow::PWTimer()       460
     TDUAlarmWindow::SetColours(int, AlarmBasic *)
                                     384
     TDUAlarmWindow::Paintnew()      752
     TDUAlarmWindow::ButtonClicked(int)
                                     232
     TDUAlarmWindow::AckAllButtonClicked()
                                      16
     TDUAlarmWindow::AckButtonClicked(int)
                                     208
     TDUAlarmWindow::cbEventHandler(WM_MESSAGE *)
                                    2216
     ?<Constant {{124, 108, 0}, {170, 93, 0}, {171,
                                      60
     ?<Constant "">                    1
     ?<Constant {&"", &"", &"", &"", &""}>
                                      20
     TDUAlarmWindow::new TDUAlarmWindow()
                                      32
     TDUAlarmWindow::delete ~TDUAlarmWindow(TDUAlarmWindow *)
                                      32
     __sti__routine()                  4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
      Others                         556

 
 5 496 bytes in segment CODE
    81 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 4 948 bytes of CODE  memory (+ 552 bytes shared)
    81 bytes of CONST memory

Errors: none
Warnings: none
