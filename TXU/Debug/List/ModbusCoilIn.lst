##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusCoilIn.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusCoilIn.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusCoilIn.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusCoilIn.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusCoilIn.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_4
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_5:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_6
   \                     ??_Insert_4:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_7
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_6
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_6
   \                     ??_Insert_7:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_6
   \   00000060   F0FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_6:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_9
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_10
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_8
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_11
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_11:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_6
   \                     ??_Insert_10:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_8
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_12
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_12:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_4
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_5
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_6
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_9
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_18
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_19
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_20
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_23
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          ///////////////////////////////////////////////////////////////////////
      8          //
      9          //  WagoIn object routines
     10          //
     11          ///////////////////////////////////////////////////////////////////////
     12          

   \                                 In segment DATA_Z, align 4, align-sorted
     13          set<PRogramObjectBase *>ModbusCoilIn::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          ModbusCoilIn::ModbusCoilIn(bool pIsCreatedFromMultiple) {
   \                     ??ModbusCoilIn:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
     16              ModbusSet.insert(this);
   \   00000004   ........           LDR      R7,??DataTable1  ;; ??ModbusSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   ........           _BLF     ??ModbusCoil,??ModbusCoil??rA
   \   00000014   A8009FE5           LDR      R0,??ModbusCoilIn_1  ;; ??__vtbl
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0710A0E1           MOV      R1,R7
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??insert_1,??insert??rA
     17              if ( pIsCreatedFromMultiple ) {
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0F00000A           BEQ      ??ModbusCoilIn_2
     18                  unsigned newIDNumber    = (C_PRO_MODBUS_COIL_IN << 16) + ModbusSet.size() + 0x1000;
   \   00000038   100097E5           LDR      R0,[R7, #+16]
   \   0000003C   AF16A0E3           MOV      R1,#+183500800
   \   00000040   811A81E3           ORR      R1,R1,#0x81000
   \   00000044   007081E0           ADD      R7,R1,R0
     19          
     20                  if ( FindPROFromIDNumber(newIDNumber) ) {
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700000A           BEQ      ??ModbusCoilIn_3
     21                      do {
     22                          newIDNumber++;
   \                     ??ModbusCoilIn_4:
   \   0000005C   017087E2           ADD      R7,R7,#+1
     23                      }while ( FindPROFromIDNumber(newIDNumber) );
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F9FFFF1A           BNE      ??ModbusCoilIn_4
     24                  }
     25                  IDNumber 		  = newIDNumber;
   \   00000074   000000EA           B        ??ModbusCoilIn_3
     26              } else {
     27                  IDNumber 		  = 0;
   \                     ??ModbusCoilIn_2:
   \   00000078   0070A0E3           MOV      R7,#+0
   \                     ??ModbusCoilIn_3:
   \   0000007C   9C7084E5           STR      R7,[R4, #+156]
     28              }
     29              DefaultId         	  = false;
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   9401C4E5           STRB     R0,[R4, #+404]
     30              Type                  = C_PRO_MODBUS_COIL_IN;
   \   00000088   F800A0E3           MOV      R0,#+248
   \   0000008C   A00E80E3           ORR      R0,R0,#0xA00
   \   00000090   A00084E5           STR      R0,[R4, #+160]
     31              AlarmPtr              = NULL;
   \   00000094   846184E5           STR      R6,[R4, #+388]
     32              ObjectPtr             = NULL;
   \   00000098   886184E5           STR      R6,[R4, #+392]
     33              RefIDNumber           = 0;
   \   0000009C   906184E5           STR      R6,[R4, #+400]
     34              ValueKey              = 0;
   \   000000A0   8C6184E5           STR      R6,[R4, #+396]
     35              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   000000A4   7851C4E5           STRB     R5,[R4, #+376]
     36              AutoReset             = false;
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   9501C4E5           STRB     R0,[R4, #+405]
     37              NotInitiated          = true;
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   9601C4E5           STRB     R0,[R4, #+406]
     38          }
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   000000C0   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusCoilIn_1:
   \   000000C4   ........           DC32     ??__vtbl
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          ModbusCoilIn::~ModbusCoilIn() {
   \                     `?~ModbusCoilIn`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~ModbusCoilIn_1`
     41          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~ModbusCoil`,`?~ModbusCoil??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~ModbusCoilIn_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusCoilIn_1`:
   \   0000002C   ........           B        ?Subroutine17

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   ........           DC32     `?<Constant "Created by ModbusMult...">`
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the Configuration
     45          //
     46          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     47          AnsiString ModbusCoilIn::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   77DF4DE2           SUB      SP,SP,#+476
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     48              AnsiString LocalString = ModbusObject::MakeConfigString();
     49          
     50              if ( DefaultId ) {
   \   00000010   04659FE5           LDR      R6,??MakeConfigString_2  ;; TabStr1
   \   00000014   04759FE5           LDR      R7,??MakeConfigString_2+0x4  ;; `?<Constant "0x%0x">`
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000020   9401D4E5           LDRB     R0,[R4, #+404]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   3200000A           BEQ      ??MakeConfigString_3
     51                  AnsiString ObjectIdStr;
   \   0000002C   70008DE2           ADD      R0,SP,#+112
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
     52                  ObjectIdStr.cat_sprintf("0x%0x", IDNumber);
   \   00000034   9C3094E5           LDR      R3,[R4, #+156]
   \   00000038   0720A0E1           MOV      R2,R7
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   70008DE2           ADD      R0,SP,#+112
   \   00000044   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
     53                  LocalString += TabStr1 + KeyWord(C_OBJECT_ID) + (AnsiString)ObjectIdStr;
   \   00000058   70108DE2           ADD      R1,SP,#+112
   \   0000005C   8C008DE2           ADD      R0,SP,#+140
   \   00000060   ........           _BLF     ??string,??string??rA
   \   00000064   D110A0E3           MOV      R1,#+209
   \   00000068   38008DE2           ADD      R0,SP,#+56
   \   0000006C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000070   38208DE2           ADD      R2,SP,#+56
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   54008DE2           ADD      R0,SP,#+84
   \   0000007C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000080   8C208DE2           ADD      R2,SP,#+140
   \   00000084   54108DE2           ADD      R1,SP,#+84
   \   00000088   1C008DE2           ADD      R0,SP,#+28
   \   0000008C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000090   ........           LDR      R0,??DataTable9  ;; ??npos
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   003090E5           LDR      R3,[R0, #+0]
   \   0000009C   1C108DE2           ADD      R1,SP,#+28
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           _BLF     ??append,??append??rA
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   8C008DE2           ADD      R0,SP,#+140
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   54008DE2           ADD      R0,SP,#+84
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   38008DE2           ADD      R0,SP,#+56
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     54              }
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   70008DE2           ADD      R0,SP,#+112
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
     55              if ( RefIDNumber ) {
   \                     ??MakeConfigString_3:
   \   000000F8   900194E5           LDR      R0,[R4, #+400]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   3200000A           BEQ      ??MakeConfigString_4
     56                  AnsiString ObjectIdStr;
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           _BLF     ??AnsiString,??AnsiString??rA
     57                  ObjectIdStr.cat_sprintf("0x%0x", RefIDNumber);
   \   0000010C   903194E5           LDR      R3,[R4, #+400]
   \   00000110   0720A0E1           MOV      R2,R7
   \   00000114   70108DE2           ADD      R1,SP,#+112
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   70008DE2           ADD      R0,SP,#+112
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
     58                  LocalString += TabStr1 + KeyWord(C_REF_OBJECT_ID) + (AnsiString)ObjectIdStr;
   \   00000130   0D10A0E1           MOV      R1,SP
   \   00000134   1C008DE2           ADD      R0,SP,#+28
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   D410A0E3           MOV      R1,#+212
   \   00000140   54008DE2           ADD      R0,SP,#+84
   \   00000144   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000148   54208DE2           ADD      R2,SP,#+84
   \   0000014C   0610A0E1           MOV      R1,R6
   \   00000150   38008DE2           ADD      R0,SP,#+56
   \   00000154   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000158   1C208DE2           ADD      R2,SP,#+28
   \   0000015C   38108DE2           ADD      R1,SP,#+56
   \   00000160   8C008DE2           ADD      R0,SP,#+140
   \   00000164   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000168   ........           LDR      R0,??DataTable9  ;; ??npos
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   003090E5           LDR      R3,[R0, #+0]
   \   00000174   8C108DE2           ADD      R1,SP,#+140
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   ........           _BLF     ??append,??append??rA
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   8C008DE2           ADD      R0,SP,#+140
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   1C008DE2           ADD      R0,SP,#+28
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   38008DE2           ADD      R0,SP,#+56
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   54008DE2           ADD      R0,SP,#+84
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              }
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   0D00A0E1           MOV      R0,SP
   \   000001CC   ........           _BLF     ??_Tidy,??_Tidy??rA
     60              if ( ValueKey ) {
   \                     ??MakeConfigString_4:
   \   000001D0   8C1194E5           LDR      R1,[R4, #+396]
   \   000001D4   000051E3           CMP      R1,#+0
   \   000001D8   2200000A           BEQ      ??MakeConfigString_5
     61                  LocalString += TabStr1 + KeyWord(C_VALUE_KEY) + ValueKeyWord(ValueKey);
   \   000001DC   38008DE2           ADD      R0,SP,#+56
   \   000001E0   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   000001E4   D510A0E3           MOV      R1,#+213
   \   000001E8   54008DE2           ADD      R0,SP,#+84
   \   000001EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001F0   54208DE2           ADD      R2,SP,#+84
   \   000001F4   0610A0E1           MOV      R1,R6
   \   000001F8   1C008DE2           ADD      R0,SP,#+28
   \   000001FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000200   38208DE2           ADD      R2,SP,#+56
   \   00000204   1C108DE2           ADD      R1,SP,#+28
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   ........           LDR      R0,??DataTable9  ;; ??npos
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   003090E5           LDR      R3,[R0, #+0]
   \   0000021C   0D10A0E1           MOV      R1,SP
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           _BLF     ??append,??append??rA
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   0D00A0E1           MOV      R0,SP
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   38008DE2           ADD      R0,SP,#+56
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   1C008DE2           ADD      R0,SP,#+28
   \   00000254   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   54008DE2           ADD      R0,SP,#+84
   \   00000264   ........           _BLF     ??_Tidy,??_Tidy??rA
     62              }
     63              LocalString += TabStr1 + KeyWord(C_PRO_NAME) + Name;
   \                     ??MakeConfigString_5:
   \   00000268   1510A0E3           MOV      R1,#+21
   \   0000026C   501E81E3           ORR      R1,R1,#0x500
   \   00000270   E0008DE2           ADD      R0,SP,#+224
   \   00000274   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000278   E0208DE2           ADD      R2,SP,#+224
   \   0000027C   0610A0E1           MOV      R1,R6
   \   00000280   C4008DE2           ADD      R0,SP,#+196
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   442084E2           ADD      R2,R4,#+68
   \   0000028C   C4108DE2           ADD      R1,SP,#+196
   \   00000290   A8008DE2           ADD      R0,SP,#+168
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   ........           LDR      R0,??DataTable9  ;; ??npos
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   007090E5           LDR      R7,[R0, #+0]
   \   000002A4   A8108DE2           ADD      R1,SP,#+168
   \   000002A8   0730A0E1           MOV      R3,R7
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   ........           _BLF     ??append,??append??rA
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   A8008DE2           ADD      R0,SP,#+168
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   0020A0E3           MOV      R2,#+0
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   C4008DE2           ADD      R0,SP,#+196
   \   000002D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   0110A0E3           MOV      R1,#+1
   \   000002DC   E0008DE2           ADD      R0,SP,#+224
   \   000002E0   ........           _BLF     ??_Tidy,??_Tidy??rA
     64              LocalString += TabStr1 + KeyWord(C_DESCRIPTION) + Description;
   \   000002E4   CC10A0E3           MOV      R1,#+204
   \   000002E8   4D0F8DE2           ADD      R0,SP,#+308
   \   000002EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002F0   4D2F8DE2           ADD      R2,SP,#+308
   \   000002F4   0610A0E1           MOV      R1,R6
   \   000002F8   460F8DE2           ADD      R0,SP,#+280
   \   000002FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000300   7C2084E2           ADD      R2,R4,#+124
   \   00000304   461F8DE2           ADD      R1,SP,#+280
   \   00000308   FC008DE2           ADD      R0,SP,#+252
   \   0000030C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000310   0730A0E1           MOV      R3,R7
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   FC108DE2           ADD      R1,SP,#+252
   \   0000031C   0500A0E1           MOV      R0,R5
   \   00000320   ........           _BLF     ??append,??append??rA
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   FC008DE2           ADD      R0,SP,#+252
   \   00000330   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   0110A0E3           MOV      R1,#+1
   \   0000033C   460F8DE2           ADD      R0,SP,#+280
   \   00000340   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000344   0020A0E3           MOV      R2,#+0
   \   00000348   0110A0E3           MOV      R1,#+1
   \   0000034C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000350   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000354   7C1194E5           LDR      R1,[R4, #+380]
   \   00000358   000051E3           CMP      R1,#+0
   \   0000035C   2300000A           BEQ      ??MakeConfigString_6
     65              if ( AlarmDelay ) {
     66                  LocalString += TabStr1 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay;
   \   00000360   0D00A0E1           MOV      R0,SP
   \   00000364   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000368   0080A0E1           MOV      R8,R0
   \   0000036C   A810A0E3           MOV      R1,#+168
   \   00000370   701E81E3           ORR      R1,R1,#0x700
   \   00000374   1C008DE2           ADD      R0,SP,#+28
   \   00000378   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000037C   1C208DE2           ADD      R2,SP,#+28
   \   00000380   0610A0E1           MOV      R1,R6
   \   00000384   54008DE2           ADD      R0,SP,#+84
   \   00000388   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000038C   0820A0E1           MOV      R2,R8
   \   00000390   54108DE2           ADD      R1,SP,#+84
   \   00000394   38008DE2           ADD      R0,SP,#+56
   \   00000398   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000039C   0730A0E1           MOV      R3,R7
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   38108DE2           ADD      R1,SP,#+56
   \   000003A8   0500A0E1           MOV      R0,R5
   \   000003AC   ........           _BLF     ??append,??append??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   38008DE2           ADD      R0,SP,#+56
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0110A0E3           MOV      R1,#+1
   \   000003C8   0D00A0E1           MOV      R0,SP
   \   000003CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0110A0E3           MOV      R1,#+1
   \   000003D8   54008DE2           ADD      R0,SP,#+84
   \   000003DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0110A0E3           MOV      R1,#+1
   \   000003E8   1C008DE2           ADD      R0,SP,#+28
   \   000003EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     67              }
     68              LocalString += TabStr1 + KeyWord(NormalState);
   \                     ??MakeConfigString_6:
   \   000003F0   801194E5           LDR      R1,[R4, #+384]
   \   000003F4   5B0F8DE2           ADD      R0,SP,#+364
   \   000003F8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003FC   5B2F8DE2           ADD      R2,SP,#+364
   \   00000400   0610A0E1           MOV      R1,R6
   \   00000404   540F8DE2           ADD      R0,SP,#+336
   \   00000408   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000040C   0730A0E1           MOV      R3,R7
   \   00000410   0020A0E3           MOV      R2,#+0
   \   00000414   541F8DE2           ADD      R1,SP,#+336
   \   00000418   0500A0E1           MOV      R0,R5
   \   0000041C   ........           _BLF     ??append,??append??rA
   \   00000420   0020A0E3           MOV      R2,#+0
   \   00000424   0110A0E3           MOV      R1,#+1
   \   00000428   540F8DE2           ADD      R0,SP,#+336
   \   0000042C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000430   0020A0E3           MOV      R2,#+0
   \   00000434   0110A0E3           MOV      R1,#+1
   \   00000438   5B0F8DE2           ADD      R0,SP,#+364
   \   0000043C   ........           _BLF     ??_Tidy,??_Tidy??rA
     69              if ( AutoReset ) {
   \   00000440   9501D4E5           LDRB     R0,[R4, #+405]
   \   00000444   000050E3           CMP      R0,#+0
   \   00000448   1300000A           BEQ      ??MakeConfigString_7
     70                  LocalString += TabStr1 + KeyWord(C_AUTORESET);
   \   0000044C   F210A0E3           MOV      R1,#+242
   \   00000450   1C008DE2           ADD      R0,SP,#+28
   \   00000454   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000458   1C208DE2           ADD      R2,SP,#+28
   \   0000045C   0610A0E1           MOV      R1,R6
   \   00000460   0D00A0E1           MOV      R0,SP
   \   00000464   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000468   0730A0E1           MOV      R3,R7
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0D10A0E1           MOV      R1,SP
   \   00000474   0500A0E1           MOV      R0,R5
   \   00000478   ........           _BLF     ??append,??append??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   0D00A0E1           MOV      R0,SP
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0110A0E3           MOV      R1,#+1
   \   00000494   1C008DE2           ADD      R0,SP,#+28
   \   00000498   ........           _BLF     ??_Tidy,??_Tidy??rA
     71              }
     72              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \                     ??MakeConfigString_7:
   \   0000049C   6110A0E3           MOV      R1,#+97
   \   000004A0   901E81E3           ORR      R1,R1,#0x900
   \   000004A4   700F8DE2           ADD      R0,SP,#+448
   \   000004A8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004AC   702F8DE2           ADD      R2,SP,#+448
   \   000004B0   0610A0E1           MOV      R1,R6
   \   000004B4   690F8DE2           ADD      R0,SP,#+420
   \   000004B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004BC   60209FE5           LDR      R2,??MakeConfigString_2+0x8  ;; CrLfStr
   \   000004C0   691F8DE2           ADD      R1,SP,#+420
   \   000004C4   620F8DE2           ADD      R0,SP,#+392
   \   000004C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004CC   0730A0E1           MOV      R3,R7
   \   000004D0   0020A0E3           MOV      R2,#+0
   \   000004D4   621F8DE2           ADD      R1,SP,#+392
   \   000004D8   0500A0E1           MOV      R0,R5
   \   000004DC   ........           _BLF     ??append,??append??rA
   \   000004E0   0020A0E3           MOV      R2,#+0
   \   000004E4   0110A0E3           MOV      R1,#+1
   \   000004E8   620F8DE2           ADD      R0,SP,#+392
   \   000004EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   0110A0E3           MOV      R1,#+1
   \   000004F8   690F8DE2           ADD      R0,SP,#+420
   \   000004FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0110A0E3           MOV      R1,#+1
   \   00000508   700F8DE2           ADD      R0,SP,#+448
   \   0000050C   ........           _BLF     ??_Tidy,??_Tidy??rA
     73          
     74              return (LocalString);
   \   00000510   77DF8DE2           ADD      SP,SP,#+476
   \   00000514   F041BDE8           POP      {R4-R8,LR}
   \   00000518   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   0000051C   ........           DC32     TabStr1
   \   00000520   ........           DC32     `?<Constant "0x%0x">`
   \   00000524   ........           DC32     CrLfStr
     75          }
     76          //---------------------------------------------------------------------------
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          bool ModbusCoilIn::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04E2DE9           PUSH     {R4-R7,R9-R11,LR}
     79              int ErrorLine = 0;
     80              bool NoError = true;
     81              if ( ModbusObject::LoadConfigString(ConfigString) ) {
   \   00000004   20969FE5           LDR      R9,??LoadConfigString_2+0x4  ;; `?<Constant "Modbus Coil In">`
   \   00000008   5FDF4DE2           SUB      SP,SP,#+380
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0160A0E3           MOV      R6,#+1
   \   00000020   01A0A0E3           MOV      R10,#+1
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   4801000A           BEQ      ??LoadConfigString_3
     82                  int Key;
     83                  do {
     84                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   CC108DE2           ADD      R1,SP,#+204
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000048   00009DE5           LDR      R0,[SP, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0B00000A           BEQ      ??LoadConfigString_5
     85                      if ( ErrorLine ) {
     86                          if ( ErrorLine != EOF ) {
   \   00000054   010070E3           CMN      R0,#+1
   \   00000058   3301000A           BEQ      ??LoadConfigString_6
     87                              GiveConfigWarning("Modbus Coil In", ErrorLine);
   \   0000005C   0910A0E1           MOV      R1,R9
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000068   00109DE5           LDR      R1,[SP, #+0]
   \   0000006C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   290100EA           B        ??LoadConfigString_6
     88                          }
     89                      } else {
     90                          Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   00000084   CC108DE2           ADD      R1,SP,#+204
   \   00000088   B0008DE2           ADD      R0,SP,#+176
   \   0000008C   ........           _BLF     ??string,??string??rA
   \   00000090   B0008DE2           ADD      R0,SP,#+176
   \   00000094   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000098   0070A0E1           MOV      R7,R0
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   B0008DE2           ADD      R0,SP,#+176
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
     91                          switch ( Key ) {
   \   000000AC   CC0057E3           CMP      R7,#+204
   \   000000B0   7800000A           BEQ      ??LoadConfigString_8
   \   000000B4   D10057E3           CMP      R7,#+209
   \   000000B8   9300000A           BEQ      ??LoadConfigString_9
   \   000000BC   D40057E3           CMP      R7,#+212
   \   000000C0   1001000A           BEQ      ??LoadConfigString_10
   \   000000C4   D50057E3           CMP      R7,#+213
   \   000000C8   2C00000A           BEQ      ??LoadConfigString_11
   \   000000CC   F20057E3           CMP      R7,#+242
   \   000000D0   8B00000A           BEQ      ??LoadConfigString_12
   \   000000D4   FA0F57E3           CMP      R7,#+1000
   \   000000D8   EA10A013           MOVNE    R1,#+234
   \   000000DC   C01F8113           ORRNE    R1,R1,#0x300
   \   000000E0   01005711           CMPNE    R7,R1
   \   000000E4   0F01000A           BEQ      ??LoadConfigString_13
   \   000000E8   1510A0E3           MOV      R1,#+21
   \   000000EC   501E81E3           ORR      R1,R1,#0x500
   \   000000F0   010057E1           CMP      R7,R1
   \   000000F4   5300000A           BEQ      ??LoadConfigString_14
   \   000000F8   6C10A0E3           MOV      R1,#+108
   \   000000FC   701E81E3           ORR      R1,R1,#0x700
   \   00000100   010057E1           CMP      R7,R1
   \   00000104   02108113           ORRNE    R1,R1,#0x2
   \   00000108   01005711           CMPNE    R7,R1
   \   0000010C   0501000A           BEQ      ??LoadConfigString_13
   \   00000110   311081E2           ADD      R1,R1,#+49
   \   00000114   010057E1           CMP      R7,R1
   \   00000118   02108112           ADDNE    R1,R1,#+2
   \   0000011C   01005711           CMPNE    R7,R1
   \   00000120   6F00000A           BEQ      ??LoadConfigString_15
   \   00000124   071081E2           ADD      R1,R1,#+7
   \   00000128   010057E1           CMP      R7,R1
   \   0000012C   6E00000A           BEQ      ??LoadConfigString_16
   \   00000130   961E86E3           ORR      R1,R6,#0x960
   \   00000134   010057E1           CMP      R7,R1
   \   00000138   4000000A           BEQ      ??LoadConfigString_17
     92                          default:
     93                              GiveConfigWarning("Modbus Coil In", InputKeyWord, ConfigString.LineCount);
   \   0000013C   CC108DE2           ADD      R1,SP,#+204
   \   00000140   430F8DE2           ADD      R0,SP,#+268
   \   00000144   ........           _BLF     ??string,??string??rA
   \   00000148   0910A0E1           MOV      R1,R9
   \   0000014C   4A0F8DE2           ADD      R0,SP,#+296
   \   00000150   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000154   1C2095E5           LDR      R2,[R5, #+28]
   \   00000158   431F8DE2           ADD      R1,SP,#+268
   \   0000015C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   430F8DE2           ADD      R0,SP,#+268
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0610A0E1           MOV      R1,R6
   \   00000178   4A0F8DE2           ADD      R0,SP,#+296
   \   0000017C   BEFFFFEA           B        ??LoadConfigString_7
     94                              break;
     95                          case C_VALUE_KEY        :
     96                              {
     97                                  AnsiString tempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_11:
   \   00000180   0030A0E3           MOV      R3,#+0
   \   00000184   0D20A0E1           MOV      R2,SP
   \   00000188   20108DE2           ADD      R1,SP,#+32
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           _BLF     ??NextWord,??NextWord??rA
     98                                  NoError = !ErrorLine;
   \   00000194   00009DE5           LDR      R0,[SP, #+0]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   01A0A003           MOVEQ    R10,#+1
   \   000001A0   00A0A013           MOVNE    R10,#+0
     99                                  if ( NoError ) {
   \   000001A4   00005AE3           CMP      R10,#+0
   \   000001A8   2000000A           BEQ      ??LoadConfigString_18
    100                                      ValueKey = FindValueConfigKey(tempStr);
   \   000001AC   20108DE2           ADD      R1,SP,#+32
   \   000001B0   04008DE2           ADD      R0,SP,#+4
   \   000001B4   ........           _BLF     ??string,??string??rA
   \   000001B8   04008DE2           ADD      R0,SP,#+4
   \   000001BC   ........           _BLF     ??FindValueConfigKey,??FindValueConfigKey??rA
   \   000001C0   8C0184E5           STR      R0,[R4, #+396]
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   04008DE2           ADD      R0,SP,#+4
   \   000001D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    101                                      if ( ValueKey == NOT_FOUND ) {
   \   000001D4   8C0194E5           LDR      R0,[R4, #+396]
   \   000001D8   010070E3           CMN      R0,#+1
   \   000001DC   1300001A           BNE      ??LoadConfigString_18
    102                                          ErrorLine = ConfigString.LineCount;
   \   000001E0   1C1095E5           LDR      R1,[R5, #+28]
    103                                          NoError = false;
    104                                          GiveConfigWarning("Modbus coil value", tempStr, ConfigString.LineCount);
   \   000001E4   40008DE2           ADD      R0,SP,#+64
   \   000001E8   00108DE5           STR      R1,[SP, #+0]
   \   000001EC   20108DE2           ADD      R1,SP,#+32
   \   000001F0   ........           _BLF     ??string,??string??rA
   \   000001F4   101089E2           ADD      R1,R9,#+16
   \   000001F8   5C008DE2           ADD      R0,SP,#+92
   \   000001FC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000200   1C2095E5           LDR      R2,[R5, #+28]
   \   00000204   00A0A0E3           MOV      R10,#+0
   \   00000208   40108DE2           ADD      R1,SP,#+64
   \   0000020C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0610A0E1           MOV      R1,R6
   \   00000218   40008DE2           ADD      R0,SP,#+64
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0A20A0E1           MOV      R2,R10
   \   00000224   0610A0E1           MOV      R1,R6
   \   00000228   5C008DE2           ADD      R0,SP,#+92
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
    105                                      }
    106                                  }
    107                              }
   \                     ??LoadConfigString_18:
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   20008DE2           ADD      R0,SP,#+32
   \   0000023C   8EFFFFEA           B        ??LoadConfigString_7
    108                              break;
    109                          case C_PRO_END_COMMON   :
    110                          case C_PRO_END          :
    111                          case C_CTRL_END_COMMON  :
    112                          case C_CTRL_END         :
    113                              NoError = false;
    114                              break;
    115                          case C_MODBUS_END       :
    116                              Key = C_MODBUS_END;
   \                     ??LoadConfigString_17:
   \   00000240   0170A0E1           MOV      R7,R1
   \   00000244   B80000EA           B        ??LoadConfigString_6
    117                              break;
    118                          case C_PRO_NAME         :
    119                              Name = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_14:
   \   00000248   0030A0E3           MOV      R3,#+0
   \   0000024C   0D20A0E1           MOV      R2,SP
   \   00000250   511F8DE2           ADD      R1,SP,#+324
   \   00000254   0500A0E1           MOV      R0,R5
   \   00000258   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000025C   ........           LDR      R0,??DataTable9  ;; ??npos
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   003090E5           LDR      R3,[R0, #+0]
   \   00000268   511F8DE2           ADD      R1,SP,#+324
   \   0000026C   440084E2           ADD      R0,R4,#+68
   \   00000270   ........           _BLF     ??assign,??assign??rA
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   0110A0E3           MOV      R1,#+1
   \   0000027C   510F8DE2           ADD      R0,SP,#+324
   \   00000280   ........           _BLF     ??_Tidy,??_Tidy??rA
    120                              NoError = !ErrorLine;
   \   00000284   00009DE5           LDR      R0,[SP, #+0]
   \   00000288   000050E3           CMP      R0,#+0
   \   0000028C   A500001A           BNE      ??LoadConfigString_13
   \                     ??LoadConfigString_19:
   \   00000290   01A0A0E3           MOV      R10,#+1
   \   00000294   A40000EA           B        ??LoadConfigString_6
    121                              break;
    122                          case C_DESCRIPTION      :
    123                              Description = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_8:
   \   00000298   0030A0E3           MOV      R3,#+0
   \   0000029C   0D20A0E1           MOV      R2,SP
   \   000002A0   581F8DE2           ADD      R1,SP,#+352
   \   000002A4   0500A0E1           MOV      R0,R5
   \   000002A8   ........           _BLF     ??NextWord,??NextWord??rA
   \   000002AC   ........           LDR      R0,??DataTable9  ;; ??npos
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   003090E5           LDR      R3,[R0, #+0]
   \   000002B8   581F8DE2           ADD      R1,SP,#+352
   \   000002BC   7C0084E2           ADD      R0,R4,#+124
   \   000002C0   ........           _BLF     ??assign,??assign??rA
   \   000002C4   0020A0E3           MOV      R2,#+0
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   580F8DE2           ADD      R0,SP,#+352
   \   000002D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    124                              NoError = !ErrorLine;
   \                     ??LoadConfigString_20:
   \   000002D4   00009DE5           LDR      R0,[SP, #+0]
   \   000002D8   000050E3           CMP      R0,#+0
   \   000002DC   9100001A           BNE      ??LoadConfigString_13
   \   000002E0   EAFFFFEA           B        ??LoadConfigString_19
    125                              break;
    126                          case C_CTRL_NS_POWERED  :
    127                          case C_CTRL_NS_UNPOWERED:
    128                              NormalState = Key;
   \                     ??LoadConfigString_15:
   \   000002E4   807184E5           STR      R7,[R4, #+384]
   \   000002E8   8F0000EA           B        ??LoadConfigString_6
    129                              break;
    130                          case C_CTRL_AL_DELAY:
    131                              AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_16:
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0D10A0E1           MOV      R1,SP
   \   000002F4   0500A0E1           MOV      R0,R5
   \   000002F8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002FC   7C0184E5           STR      R0,[R4, #+380]
    132                              NoError = !ErrorLine;
   \   00000300   F3FFFFEA           B        ??LoadConfigString_20
    133                              break;
    134                          case C_AUTORESET    :
    135                              AutoReset = true;
   \                     ??LoadConfigString_12:
   \   00000304   9561C4E5           STRB     R6,[R4, #+405]
   \   00000308   870000EA           B        ??LoadConfigString_6
    136                              break;
    137                          case C_OBJECT_ID    :
    138                              {
    139                                  unsigned tmpIDNumber    = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_9:
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0D10A0E1           MOV      R1,SP
   \   00000314   0500A0E1           MOV      R0,R5
   \   00000318   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    140                                  if ( NoError ) {
   \   0000031C   00005AE3           CMP      R10,#+0
   \   00000320   7200000A           BEQ      ??LoadConfigString_21
    141                                      DefaultId   = true;
   \   00000324   9461C4E5           STRB     R6,[R4, #+404]
    142                                      tmpIDNumber = CheckAndCorrectId(tmpIDNumber);
   \   00000328   ........           _BLF     ??CheckAndCorrectId,??CheckAndCorrectId??rA
   \   0000032C   00B0A0E1           MOV      R11,R0
    143                                      unsigned ObjTypeId = tmpIDNumber >> 16;
    144                                      if (  ObjTypeId != C_PRO_MODBUS_COIL_IN )  {
   \   00000330   BCAF8FE2           ADR      R10,??LoadConfigString_2  ;; "!"
   \   00000334   F800A0E3           MOV      R0,#+248
   \   00000338   A00E80E3           ORR      R0,R0,#0xA00
   \   0000033C   2B0850E1           CMP      R0,R11, LSR #+16
   \   00000340   2300000A           BEQ      ??LoadConfigString_22
    145                                          // Check that object ID type is correct
    146                                          tmpIDNumber = (C_PRO_MODBUS_COIL_IN << 16) | (tmpIDNumber & 0xffff);
   \   00000344   0B08A0E1           LSL      R0,R11,#+16
   \   00000348   8016A0E3           MOV      R1,#+134217728
   \   0000034C   BE1781E3           ORR      R1,R1,#0x2F80000
   \   00000350   20B881E1           ORR      R11,R1,R0, LSR #+16
    147                                          GiveConfigWarning("Modbus CoilIn IDNumber Error, Line " + AnsiString(ConfigString.LineCount) + "!");
   \   00000354   1C1095E5           LDR      R1,[R5, #+28]
   \   00000358   5C008DE2           ADD      R0,SP,#+92
   \   0000035C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000360   0020A0E1           MOV      R2,R0
   \   00000364   241089E2           ADD      R1,R9,#+36
   \   00000368   40008DE2           ADD      R0,SP,#+64
   \   0000036C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000370   0A20A0E1           MOV      R2,R10
   \   00000374   40108DE2           ADD      R1,SP,#+64
   \   00000378   20008DE2           ADD      R0,SP,#+32
   \   0000037C   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000380   20108DE2           ADD      R1,SP,#+32
   \   00000384   04008DE2           ADD      R0,SP,#+4
   \   00000388   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000038C   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   04008DE2           ADD      R0,SP,#+4
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0610A0E1           MOV      R1,R6
   \   000003A8   20008DE2           ADD      R0,SP,#+32
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0610A0E1           MOV      R1,R6
   \   000003B8   40008DE2           ADD      R0,SP,#+64
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0610A0E1           MOV      R1,R6
   \   000003C8   5C008DE2           ADD      R0,SP,#+92
   \   000003CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D0   450000EA           B        ??LoadConfigString_23
    148                                      } else {
    149                                          if ( FindPROFromIDNumber(tmpIDNumber) ) {
   \                     ??LoadConfigString_22:
   \   000003D4   0010A0E3           MOV      R1,#+0
   \   000003D8   0B00A0E1           MOV      R0,R11
   \   000003DC   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000003E0   000050E3           CMP      R0,#+0
   \   000003E4   4000000A           BEQ      ??LoadConfigString_23
    150                                              unsigned tmpOrgIDNumber = tmpIDNumber;
   \   000003E8   3CB08DE5           STR      R11,[SP, #+60]
    151                                              do {
    152                                                  ++tmpIDNumber;
   \                     ??LoadConfigString_24:
   \   000003EC   01B08BE2           ADD      R11,R11,#+1
    153                                              }while ( FindPROFromIDNumber(tmpIDNumber) );
   \   000003F0   0010A0E3           MOV      R1,#+0
   \   000003F4   0B00A0E1           MOV      R0,R11
   \   000003F8   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000003FC   000050E3           CMP      R0,#+0
   \   00000400   F9FFFF1A           BNE      ??LoadConfigString_24
    154                                              AnsiString IdNumStr;
   \   00000404   94008DE2           ADD      R0,SP,#+148
   \   00000408   ........           _BLF     ??AnsiString,??AnsiString??rA
    155                                              IdNumStr.cat_sprintf("CoilIn IDNumber changed from 0x%0X to 0x%0X", tmpOrgIDNumber, tmpIDNumber);
   \   0000040C   0B00A0E1           MOV      R0,R11
   \   00000410   01002DE9           PUSH     {R0}
   \   00000414   40309DE5           LDR      R3,[SP, #+64]
   \   00000418   482089E2           ADD      R2,R9,#+72
   \   0000041C   44108DE2           ADD      R1,SP,#+68
   \   00000420   98008DE2           ADD      R0,SP,#+152
   \   00000424   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   44008DE2           ADD      R0,SP,#+68
   \   00000434   ........           _BLF     ??_Tidy,??_Tidy??rA
    156                                              GiveConfigWarning("Modbus CoilIn duplicate IDNumber line " + AnsiString(ConfigString.LineCount) + "!");
   \   00000438   1C1095E5           LDR      R1,[R5, #+28]
   \   0000043C   F4008DE2           ADD      R0,SP,#+244
   \   00000440   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000444   0020A0E1           MOV      R2,R0
   \   00000448   741089E2           ADD      R1,R9,#+116
   \   0000044C   60008DE2           ADD      R0,SP,#+96
   \   00000450   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000454   0A20A0E1           MOV      R2,R10
   \   00000458   60108DE2           ADD      R1,SP,#+96
   \   0000045C   08008DE2           ADD      R0,SP,#+8
   \   00000460   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000464   08108DE2           ADD      R1,SP,#+8
   \   00000468   24008DE2           ADD      R0,SP,#+36
   \   0000046C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000470   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0610A0E1           MOV      R1,R6
   \   0000047C   24008DE2           ADD      R0,SP,#+36
   \   00000480   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000484   0020A0E3           MOV      R2,#+0
   \   00000488   0610A0E1           MOV      R1,R6
   \   0000048C   08008DE2           ADD      R0,SP,#+8
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000494   0020A0E3           MOV      R2,#+0
   \   00000498   0610A0E1           MOV      R1,R6
   \   0000049C   60008DE2           ADD      R0,SP,#+96
   \   000004A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A4   0020A0E3           MOV      R2,#+0
   \   000004A8   0610A0E1           MOV      R1,R6
   \   000004AC   F4008DE2           ADD      R0,SP,#+244
   \   000004B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    157                                              GiveConfigWarning(IdNumStr);
   \   000004B4   98108DE2           ADD      R1,SP,#+152
   \   000004B8   7C008DE2           ADD      R0,SP,#+124
   \   000004BC   ........           _BLF     ??string,??string??rA
   \   000004C0   7C008DE2           ADD      R0,SP,#+124
   \   000004C4   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   000004C8   0020A0E3           MOV      R2,#+0
   \   000004CC   0610A0E1           MOV      R1,R6
   \   000004D0   7C008DE2           ADD      R0,SP,#+124
   \   000004D4   ........           _BLF     ??_Tidy,??_Tidy??rA
    158                                          } else {}
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0610A0E1           MOV      R1,R6
   \   000004E0   98008DE2           ADD      R0,SP,#+152
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E8   04D08DE2           ADD      SP,SP,#+4
    159                                      }
    160                                      IDNumber = tmpIDNumber;
   \                     ??LoadConfigString_23:
   \   000004EC   9CB084E5           STR      R11,[R4, #+156]
    161                                  }
    162                              }
    163                              DefaultId = false;
   \                     ??LoadConfigString_21:
   \   000004F0   0000A0E3           MOV      R0,#+0
   \   000004F4   9401C4E5           STRB     R0,[R4, #+404]
    164                              NoError = !ErrorLine;
   \   000004F8   00009DE5           LDR      R0,[SP, #+0]
   \   000004FC   000050E3           CMP      R0,#+0
   \   00000500   0800001A           BNE      ??LoadConfigString_13
   \   00000504   61FFFFEA           B        ??LoadConfigString_19
    165                              break;
    166          
    167                          case C_REF_OBJECT_ID:
    168                              RefIDNumber = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_10:
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0D10A0E1           MOV      R1,SP
   \   00000510   0500A0E1           MOV      R0,R5
   \   00000514   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000518   900184E5           STR      R0,[R4, #+400]
    169                              NoError = !ErrorLine;
   \   0000051C   00009DE5           LDR      R0,[SP, #+0]
   \   00000520   000050E3           CMP      R0,#+0
   \   00000524   59FFFF0A           BEQ      ??LoadConfigString_19
   \                     ??LoadConfigString_13:
   \   00000528   00A0A0E3           MOV      R10,#+0
    170                              break;
    171                          }
    172                      }
    173                  }while ( NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END) );
   \                     ??LoadConfigString_6:
   \   0000052C   0020A0E3           MOV      R2,#+0
   \   00000530   0110A0E3           MOV      R1,#+1
   \   00000534   CC008DE2           ADD      R0,SP,#+204
   \   00000538   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000053C   00005AE3           CMP      R10,#+0
   \   00000540   3400000A           BEQ      ??LoadConfigString_25
   \   00000544   00009DE5           LDR      R0,[SP, #+0]
   \   00000548   010070E3           CMN      R0,#+1
   \   0000054C   960E8613           ORRNE    R0,R6,#0x960
   \   00000550   00005711           CMPNE    R7,R0
   \   00000554   B6FEFF1A           BNE      ??LoadConfigString_4
    174              }
    175              if ( NoError ) {
    176                  if ( !IsCreatedFromMultiple ) {
   \                     ??LoadConfigString_3:
   \   00000558   7801D4E5           LDRB     R0,[R4, #+376]
   \   0000055C   000050E3           CMP      R0,#+0
   \   00000560   2C00001A           BNE      ??LoadConfigString_25
    177                      if ( !RefIDNumber ) {
   \   00000564   900194E5           LDR      R0,[R4, #+400]
   \   00000568   000050E3           CMP      R0,#+0
   \   0000056C   1900001A           BNE      ??LoadConfigString_26
    178                          AlarmPtr  = new AlarmModbusInCoil(this, Name, Description);
   \   00000570   7C1084E2           ADD      R1,R4,#+124
   \   00000574   20008DE2           ADD      R0,SP,#+32
   \   00000578   ........           _BLF     ??string,??string??rA
   \   0000057C   441084E2           ADD      R1,R4,#+68
   \   00000580   04008DE2           ADD      R0,SP,#+4
   \   00000584   ........           _BLF     ??string,??string??rA
   \   00000588   20208DE2           ADD      R2,SP,#+32
   \   0000058C   04108DE2           ADD      R1,SP,#+4
   \   00000590   0400A0E1           MOV      R0,R4
   \   00000594   ........           _BLF     `??new AlarmModbusInCoil`,`??new AlarmModbusInCoil??rA`
   \   00000598   840184E5           STR      R0,[R4, #+388]
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   20008DE2           ADD      R0,SP,#+32
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005AC   0020A0E3           MOV      R2,#+0
   \   000005B0   0610A0E1           MOV      R1,R6
   \   000005B4   04008DE2           ADD      R0,SP,#+4
   \   000005B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    179                          AlarmSet.insert(AlarmPtr);
   \   000005BC   842194E5           LDR      R2,[R4, #+388]
   \   000005C0   E41084E2           ADD      R1,R4,#+228
   \   000005C4   E8008DE2           ADD      R0,SP,#+232
   \   000005C8   ........           _BLF     ??insert_2,??insert??rA_1
    180                          AddAlarms(CompleteAlarmInfoList);
   \   000005CC   FC1084E2           ADD      R1,R4,#+252
   \   000005D0   0400A0E1           MOV      R0,R4
   \   000005D4   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    181                      }
    182                      ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, RefIDNumber);
   \                     ??LoadConfigString_26:
   \   000005D8   0000A0E3           MOV      R0,#+0
   \   000005DC   01002DE9           PUSH     {R0}
   \   000005E0   900194E5           LDR      R0,[R4, #+400]
   \   000005E4   01002DE9           PUSH     {R0}
   \   000005E8   700194E5           LDR      R0,[R4, #+368]
   \   000005EC   01002DE9           PUSH     {R0}
   \   000005F0   A03094E5           LDR      R3,[R4, #+160]
   \   000005F4   6C2194E5           LDR      R2,[R4, #+364]
   \   000005F8   681194E5           LDR      R1,[R4, #+360]
   \   000005FC   640194E5           LDR      R0,[R4, #+356]
   \   00000600   FF2002E2           AND      R2,R2,#0xFF
   \   00000604   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000608   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000060C   FF0000E2           AND      R0,R0,#0xFF
   \   00000610   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   00000614   0CD08DE2           ADD      SP,SP,#+12
    183                  }
    184              }
    185              return (NoError);
   \                     ??LoadConfigString_25:
   \   00000618   0A00A0E1           MOV      R0,R10
   \   0000061C   5FDF8DE2           ADD      SP,SP,#+380
   \   00000620   F04EBDE8           POP      {R4-R7,R9-R11,LR}
   \   00000624   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   00000628   21000000           DC8      "!",+0,+0
   \   0000062C   ........           DC32     `?<Constant "Modbus Coil In">`
    186          }
    187          
    188          

   \                                 In segment CODE, align 4, keep-with-next
    189          void ModbusCoilIn::SetProList(void) {
   \                     ??SetProList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    190              if ( RefIDNumber ) {
   \   0000000C   900194E5           LDR      R0,[R4, #+400]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3500000A           BEQ      ??SetProList_1
    191                  ObjectPtr = FindPROFromIDNumber(RefIDNumber);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000020   880184E5           STR      R0,[R4, #+392]
    192                  if ( ObjectPtr ) {
   \   00000024   5E5FA0E3           MOV      R5,#+376
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0900000A           BEQ      ??SetProList_2
    193                      if ( IsCreatedFromMultiple ) {
   \   00000030   0410D5E7           LDRB     R1,[R5, +R4]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   2C00000A           BEQ      ??SetProList_1
    194                          Name = ObjectPtr->Name;
   \   0000003C   ........           LDR      R1,??DataTable9  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003091E5           LDR      R3,[R1, #+0]
   \   00000048   441080E2           ADD      R1,R0,#+68
   \   0000004C   440084E2           ADD      R0,R4,#+68
   \   00000050   ........           _BLF     ??assign,??assign??rA
   \   00000054   250000EA           B        ??SetProList_1
    195                      }
    196                  } else {
    197                      AnsiString InfoStr;
   \                     ??SetProList_2:
   \   00000058   38008DE2           ADD      R0,SP,#+56
   \   0000005C   ........           _BLF     ??AnsiString,??AnsiString??rA
    198                      if ( IsCreatedFromMultiple ) {
   \   00000060   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000064   ........           LDR      R2,??Subroutine17_0  ;; `?<Constant "Created by ModbusMult...">`
   \   00000068   903194E5           LDR      R3,[R4, #+400]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400000A           BEQ      ??SetProList_3
    199                          InfoStr.cat_sprintf("Created by ModbusMultiple(Line number %i): ModbusCoilIn RefIDNumber %i (0x%0x) is incorrect", LineNumber, RefIDNumber, RefIDNumber);
   \   00000074   0300A0E1           MOV      R0,R3
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   08002DE9           PUSH     {R3}
   \   00000080   043094E5           LDR      R3,[R4, #+4]
   \   00000084   040000EA           B        ??SetProList_4
    200                      } else {
    201                          InfoStr.cat_sprintf("ModbusCoilIn RefIDNumber %i (0x%0x) is incorrect. Line Number %i", RefIDNumber, RefIDNumber, LineNumber);
   \                     ??SetProList_3:
   \   00000088   040094E5           LDR      R0,[R4, #+4]
   \   0000008C   5C2082E2           ADD      R2,R2,#+92
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   0300A0E1           MOV      R0,R3
   \   00000098   01002DE9           PUSH     {R0}
   \                     ??SetProList_4:
   \   0000009C   08108DE2           ADD      R1,SP,#+8
   \   000000A0   40008DE2           ADD      R0,SP,#+64
   \   000000A4   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   08008DE2           ADD      R0,SP,#+8
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8
    202                      }
    203                      GiveConfigWarning(InfoStr);
   \   000000BC   38108DE2           ADD      R1,SP,#+56
   \   000000C0   1C008DE2           ADD      R0,SP,#+28
   \   000000C4   ........           _BLF     ??string,??string??rA
   \   000000C8   1C008DE2           ADD      R0,SP,#+28
   \   000000CC   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    204          
    205          
    206                  }
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   38008DE2           ADD      R0,SP,#+56
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
    207                  // PRogramObjectBase::FindObject(RefIDNumber);
    208              }
    209          }
   \                     ??SetProList_1:
   \   000000F0   54D08DE2           ADD      SP,SP,#+84
   \   000000F4                      REQUIRE ?Subroutine17
   \   000000F4                      ;; // Fall through to label ?Subroutine17
    210          //---------------------------------------------------------------------------
    211          
    212          

   \                                 In segment CODE, align 4, keep-with-next
    213          void ModbusCoilIn::Update(void) {
   \                     ??Update:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    214              ModbusUnit *tmpPtr = FindUnit();
   \   00000008   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   0000000C   0060B0E1           MOVS     R6,R0
    215              if ( tmpPtr ) {
   \   00000010   4F00000A           BEQ      ??Update_1
    216          #if defined (ANWIN) || defined (ANTDUSIM)
    217                  if ( NotInitiated ) {
    218          #elif S2TXU
    219                  if ( NotInitiated && OS_Time > 30000 ) {
   \   00000014   9601D5E5           LDRB     R0,[R5, #+406]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0B00000A           BEQ      ??Update_2
   \   00000020   34019FE5           LDR      R0,??Update_3    ;; OS_Time
   \   00000024   3110A0E3           MOV      R1,#+49
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   751C81E3           ORR      R1,R1,#0x7500
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   050000BA           BLT      ??Update_2
    220          #endif
    221                      NotInitiated = false;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   9601C5E5           STRB     R0,[R5, #+406]
    222                      InitiateCoils(tmpPtr);
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       ??InitiateCoils
   \   0000004C   400000EA           B        ??Update_1
    223                  } else {
   \                     ??Update_2:
   \   00000050   740BA0E3           MOV      R0,#+118784
   \   00000054   9D0F80E3           ORR      R0,R0,#0x274
   \   00000058   064080E0           ADD      R4,R0,R6
   \   0000005C   0400A0E1           MOV      R0,R4
    224                      tmpPtr->AccessDigitalSema.Acquire();
   \   00000060   ........           _BLF     ??Acquire,??Acquire??rA
    225                      if ( tmpPtr->HasNewDigitalValue(Channel) ) {
   \   00000064   5C7FA0E3           MOV      R7,#+368
   \   00000068   051097E7           LDR      R1,[R7, +R5]
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           _BLF     ??HasNewDigitalValue,??HasNewDigitalValue??rA
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   3300000A           BEQ      ??Update_4
    226                          bool tmpIsActive = tmpPtr->GetCoilIn(Channel);
   \   0000007C   051097E7           LDR      R1,[R7, +R5]
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   ........           _BLF     ??GetCoilIn,??GetCoilIn??rA
   \   00000088   0080A0E1           MOV      R8,R0
    227                          switch ( NormalState ) {
   \   0000008C   800195E5           LDR      R0,[R5, #+384]
   \   00000090   9F10A0E3           MOV      R1,#+159
   \   00000094   701E81E3           ORR      R1,R1,#0x700
   \   00000098   010050E1           CMP      R0,R1
    228                          case C_CTRL_NS_UNPOWERED:
    229                              break;
    230                          case C_CTRL_NS_POWERED  :
    231                              tmpIsActive = !tmpIsActive;
   \   0000009C   01802802           EOREQ    R8,R8,#0x1
    232                              break;
    233                          }
    234                          IsActive = tmpIsActive;
   \   000000A0   099087E3           ORR      R9,R7,#0x9
   \   000000A4   0580C9E7           STRB     R8,[R9, +R5]
    235                          if ( AlarmPtr ) {
   \   000000A8   841195E5           LDR      R1,[R5, #+388]
   \   000000AC   000051E3           CMP      R1,#+0
   \   000000B0   0500000A           BEQ      ??Update_5
    236                              AlarmPtr->Check();
   \   000000B4   0100A0E1           MOV      R0,R1
   \   000000B8   A41091E5           LDR      R1,[R1, #+164]
   \   000000BC   641091E5           LDR      R1,[R1, #+100]
   \   000000C0   0FE0A0E1           MOV      LR,PC
   \   000000C4   11FF2FE1           BX       R1
   \   000000C8   1F0000EA           B        ??Update_4
    237                          } else if ( ObjectPtr ) {
   \                     ??Update_5:
   \   000000CC   880195E5           LDR      R0,[R5, #+392]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   1C00000A           BEQ      ??Update_4
    238                              ObjectPtr->SetTimeStamp();
   \   000000D8   ........           _BLF     ??SetTimeStamp,??SetTimeStamp??rA
    239                              if (tmpPtr->IsNewDigitalInput(Channel,IsActive)) {
   \   000000DC   0520D9E7           LDRB     R2,[R9, +R5]
   \   000000E0   051097E7           LDR      R1,[R7, +R5]
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   ........           _BLF     ??IsNewDigitalInput,??IsNewDigitalInput??rA
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0800000A           BEQ      ??Update_6
    240                                  ObjectPtr->PutBitValue(ValueKey, 0, IsActive);
   \   000000F4   88C195E5           LDR      R12,[R5, #+392]
   \   000000F8   0530D9E7           LDRB     R3,[R9, +R5]
   \   000000FC   8C1195E5           LDR      R1,[R5, #+396]
   \   00000100   0C00A0E1           MOV      R0,R12
   \   00000104   A4C09CE5           LDR      R12,[R12, #+164]
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   38C09CE5           LDR      R12,[R12, #+56]
   \   00000110   0FE0A0E1           MOV      LR,PC
   \   00000114   1CFF2FE1           BX       R12
    241                              }
    242                              if ( AutoReset && tmpIsActive ) {
   \                     ??Update_6:
   \   00000118   9501D5E5           LDRB     R0,[R5, #+405]
   \   0000011C   051097E7           LDR      R1,[R7, +R5]
   \   00000120   000018E1           TST      R8,R0
   \   00000124   0500000A           BEQ      ??Update_7
    243                                  tmpPtr->SetInCoil(Channel, 0);
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0600A0E1           MOV      R0,R6
   \   00000130   ........           _BLF     ??SetInCoil,??SetInCoil??rA
    244                                  tmpPtr->SetPreviousState(Channel,false);
   \   00000134   051097E7           LDR      R1,[R7, +R5]
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   000000EA           B        ??Update_8
    245                              }else{
    246                                  tmpPtr->SetPreviousState(Channel,IsActive);
   \                     ??Update_7:
   \   00000140   0520D9E7           LDRB     R2,[R9, +R5]
   \                     ??Update_8:
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   ........           _BLF     ??SetPreviousState,??SetPreviousState??rA
    247                              }
    248                          }
    249                      }
    250                      tmpPtr->AccessDigitalSema.Release();
   \                     ??Update_4:
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           _BLF     ??Release,??Release??rA
    251                  }
    252              }
    253          }
   \                     ??Update_1:
   \   00000154   F043BDE8           POP      {R4-R9,LR}
   \   00000158   1EFF2FE1           BX       LR               ;; return
   \                     ??Update_3:
   \   0000015C   ........           DC32     OS_Time
    254          

   \                                 In segment CODE, align 4, keep-with-next
    255          ModbusCoilIn& ModbusCoilIn::operator = (ModbusCoilIn Src) {
   \                     `??operator=`:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    256              Name          = Src.Name;
   \   00000008   ........           LDR      R0,??DataTable9  ;; ??npos
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0630A0E1           MOV      R3,R6
   \   0000001C   441085E2           ADD      R1,R5,#+68
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??assign,??assign??rA
    257              Description   = Src.Description;
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   7C1085E2           ADD      R1,R5,#+124
   \   00000034   7C0084E2           ADD      R0,R4,#+124
   \   00000038   ........           _BLF     ??assign,??assign??rA
    258          
    259              IPAddress     = Src.IPAddress;
   \   0000003C   520FA0E3           MOV      R0,#+328
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   051080E0           ADD      R1,R0,R5
   \   0000004C   040080E0           ADD      R0,R0,R4
   \   00000050   ........           _BLF     ??assign,??assign??rA
    260              TCUAddress    = Src.TCUAddress;
   \   00000054   590FA0E3           MOV      R0,#+356
   \   00000058   051090E7           LDR      R1,[R0, +R5]
   \   0000005C   041080E7           STR      R1,[R0, +R4]
    261              TCUPortNo     = Src.TCUPortNo;
   \   00000060   5A1FA0E3           MOV      R1,#+360
   \   00000064   052091E7           LDR      R2,[R1, +R5]
   \   00000068   042081E7           STR      R2,[R1, +R4]
    262              Address       = Src.Address;
   \   0000006C   5B1FA0E3           MOV      R1,#+364
   \   00000070   052091E7           LDR      R2,[R1, +R5]
   \   00000074   042081E7           STR      R2,[R1, +R4]
    263              Channel       = Src.Channel;
   \   00000078   5C1FA0E3           MOV      R1,#+368
   \   0000007C   052091E7           LDR      R2,[R1, +R5]
   \   00000080   042081E7           STR      R2,[R1, +R4]
    264          
    265              AlarmDelay    = Src.AlarmDelay;
   \   00000084   5F1FA0E3           MOV      R1,#+380
   \   00000088   052091E7           LDR      R2,[R1, +R5]
   \   0000008C   042081E7           STR      R2,[R1, +R4]
    266              NormalState   = Src.NormalState;
   \   00000090   601FA0E3           MOV      R1,#+384
   \   00000094   052091E7           LDR      R2,[R1, +R5]
   \   00000098   042081E7           STR      R2,[R1, +R4]
    267          
    268              AlarmPtr      = Src.AlarmPtr;
   \   0000009C   841195E5           LDR      R1,[R5, #+388]
   \   000000A0   841184E5           STR      R1,[R4, #+388]
    269              ObjectPtr     = Src.ObjectPtr;
   \   000000A4   881195E5           LDR      R1,[R5, #+392]
   \   000000A8   881184E5           STR      R1,[R4, #+392]
    270              ValueKey      = Src.ValueKey;
   \   000000AC   8C1195E5           LDR      R1,[R5, #+396]
   \   000000B0   8C1184E5           STR      R1,[R4, #+396]
    271              RefIDNumber   = Src.RefIDNumber;
   \   000000B4   901195E5           LDR      R1,[R5, #+400]
   \   000000B8   901184E5           STR      R1,[R4, #+400]
    272              DefaultId     = Src.DefaultId;
   \   000000BC   9411D5E5           LDRB     R1,[R5, #+404]
   \   000000C0   9411C4E5           STRB     R1,[R4, #+404]
    273              AutoReset     = Src.AutoReset;
   \   000000C4   9511D5E5           LDRB     R1,[R5, #+405]
   \   000000C8   9511C4E5           STRB     R1,[R4, #+405]
    274          
    275          
    276              if ( (TCUAddress == CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU) ) {
   \   000000CC   34109FE5           LDR      R1,`??operator=_1`  ;; CurrentDeviceAddress
   \   000000D0   040090E7           LDR      R0,[R0, +R4]
   \   000000D4   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000D8   010050E1           CMP      R0,R1
   \   000000DC   28009F05           LDREQ    R0,`??operator=_1`+0x4  ;; CurrentDeviceId
   \   000000E0   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   000000E4   20005003           CMPEQ    R0,#+32
   \   000000E8   0300001A           BNE      `??operator=_2`
    277                  MyModbusSet.insert(this);
   \   000000EC   1C109FE5           LDR      R1,`??operator=_1`+0x8  ;; ??MyModbusSet
   \   000000F0   0420A0E1           MOV      R2,R4
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           _BLF     ??insert,??insert??rA_2
    278              }
    279              return *this;
   \                     `??operator=_2`:
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000104   1EFF2FE1           BX       LR               ;; return
   \                     `??operator=_1`:
   \   00000108   ........           DC32     CurrentDeviceAddress
   \   0000010C   ........           DC32     CurrentDeviceId
   \   00000110   ........           DC32     ??MyModbusSet
    280          }
    281          

   \                                 In segment CODE, align 4, keep-with-next
    282          void ModbusCoilIn::UpdateFromMultiple(unsigned pIdNumber, int pChannel) {
   \                     ??UpdateFromMultiple:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0040A0E1           MOV      R4,R0
    283              Channel +=  pChannel;
   \   0000000C   5C5FA0E3           MOV      R5,#+368
   \   00000010   040095E7           LDR      R0,[R5, +R4]
    284              RefIDNumber  = pIdNumber;
    285              if ( !RefIDNumber ) {
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   000082E0           ADD      R0,R2,R0
   \   0000001C   040085E7           STR      R0,[R5, +R4]
   \   00000020   901184E5           STR      R1,[R4, #+400]
   \   00000024   1900001A           BNE      ??UpdateFromMultiple_1
    286                  AlarmPtr  = new AlarmModbusInCoil(this, Name, Description);
   \   00000028   7C1084E2           ADD      R1,R4,#+124
   \   0000002C   1C008DE2           ADD      R0,SP,#+28
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   441084E2           ADD      R1,R4,#+68
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   1C208DE2           ADD      R2,SP,#+28
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     `??new AlarmModbusInCoil`,`??new AlarmModbusInCoil??rA`
   \   00000050   840184E5           STR      R0,[R4, #+388]
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   1C008DE2           ADD      R0,SP,#+28
   \   00000060   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
    287                  AlarmSet.insert(AlarmPtr);
   \   00000074   842194E5           LDR      R2,[R4, #+388]
   \   00000078   E41084E2           ADD      R1,R4,#+228
   \   0000007C   38008DE2           ADD      R0,SP,#+56
   \   00000080   ........           _BLF     ??insert_2,??insert??rA_1
    288                  AddAlarms(CompleteAlarmInfoList);
   \   00000084   FC1084E2           ADD      R1,R4,#+252
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    289              }
    290              ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, RefIDNumber);
   \                     ??UpdateFromMultiple_1:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   900194E5           LDR      R0,[R4, #+400]
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   040095E7           LDR      R0,[R5, +R4]
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   A03094E5           LDR      R3,[R4, #+160]
   \   000000AC   6C2194E5           LDR      R2,[R4, #+364]
   \   000000B0   681194E5           LDR      R1,[R4, #+360]
   \   000000B4   640194E5           LDR      R0,[R4, #+356]
   \   000000B8   FF2002E2           AND      R2,R2,#0xFF
   \   000000BC   0118A0E1           MOV      R1,R1, LSL #+16
   \   000000C0   2118A0E1           MOV      R1,R1, LSR #+16
   \   000000C4   FF0000E2           AND      R0,R0,#0xFF
   \   000000C8   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    291          
    292          }
   \   000000CC   4CD08DE2           ADD      SP,SP,#+76
   \   000000D0   ........           B        ?Subroutine17
    293          

   \                                 In segment CODE, align 4, keep-with-next
    294          int ModbusCoilIn::GetObjectId(void) {
    295              return RefIDNumber;
   \                     ??GetObjectId:
   \   00000000   900190E5           LDR      R0,[R0, #+400]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    296          }
    297          

   \                                 In segment CODE, align 4, keep-with-next
    298          AnsiString ModbusCoilIn::GetValueKey(void) {
   \                     ??GetValueKey:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    299              if ( ValueKey == SVT_NOT_DEFINED ) {
   \   00000008   8C1190E5           LDR      R1,[R0, #+396]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0300001A           BNE      ??GetValueKey_1
    300                  return "Not defined";
   \   00000014   14109FE5           LDR      R1,??GetValueKey_2  ;; `?<Constant "Not defined">`
   \   00000018   0200A0E1           MOV      R0,R2
   \   0000001C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000020   010000EA           B        ??GetValueKey_3
    301              }
    302              return ValueKeyWord(ValueKey);
   \                     ??GetValueKey_1:
   \   00000024   0200A0E1           MOV      R0,R2
   \   00000028   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \                     ??GetValueKey_3:
   \   0000002C   ........           B        ?Subroutine18
   \                     ??GetValueKey_2:
   \   00000030   ........           DC32     `?<Constant "Not defined">`
    303          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine18_0:
   \   00000008   ........           DC32     `?<Constant "Status">`
    304          

   \                                 In segment CODE, align 4, keep-with-next
    305          AnsiString ModbusCoilIn::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000   0100A0E1           MOV      R0,R1
    306              return "Status";
   \   00000004   ........           LDR      R1,??Subroutine18_0  ;; `?<Constant "Status">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000010                      REQUIRE ?Subroutine18
   \   00000010                      ;; // Fall through to label ?Subroutine18
    307          }
    308          
    309          

   \                                 In segment CODE, align 4, keep-with-next
    310          AnsiString ModbusCoilIn::GetRegisterValue(void) {
   \                     ??GetRegisterValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    311              AnsiString Result;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
    312              if ( AlarmPtr ) {
   \   00000018   842194E5           LDR      R2,[R4, #+388]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0900000A           BEQ      ??GetRegisterValue_1
    313                  Result = LibGetValue(SVT_AL_STATE, AlarmPtr);
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   4310A0E3           MOV      R1,#+67
   \   0000002C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000038   ........           LDR      R0,??DataTable12  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   180000EA           B        ??GetRegisterValue_2
    314              } else {
    315                  //Result = LibGetValue(ValueKey, ObjectPtr);
    316                  ModbusUnit *tmpPtr = FindUnit();
   \                     ??GetRegisterValue_1:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??FindUnit,??FindUnit??rA
    317                  if ( tmpPtr ) {
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0D00000A           BEQ      ??GetRegisterValue_3
    318                      if ( tmpPtr->GetCoilIn(Channel) ) {
   \   0000005C   701194E5           LDR      R1,[R4, #+368]
   \   00000060   ........           _BLF     ??GetCoilIn,??GetCoilIn??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0700000A           BEQ      ??GetRegisterValue_4
    319                          Result = "On";
   \   0000006C   171F8FE2           ADR      R1,??GetRegisterValue_5  ;; "On"
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   003090E5           LDR      R3,[R0, #+0]
   \   00000088   080000EA           B        ??GetRegisterValue_2
    320                      } else {
    321                          Result = "Off";
   \                     ??GetRegisterValue_4:
   \   0000008C   101F8FE2           ADR      R1,??GetRegisterValue_5+0x4  ;; "Off"
   \   00000090   000000EA           B        ??GetRegisterValue_6
    322                      }
    323                  } else {
    324                      Result = "Error";
   \                     ??GetRegisterValue_3:
   \   00000094   3C109FE5           LDR      R1,??GetRegisterValue_5+0x8  ;; `?<Constant "Error">`
   \                     ??GetRegisterValue_6:
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000A0   ........           LDR      R1,??DataTable12  ;; ??npos
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   003091E5           LDR      R3,[R1, #+0]
   \   000000AC   0010A0E1           MOV      R1,R0
   \                     ??GetRegisterValue_2:
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           _BLF     ??assign,??assign??rA
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    325                  }
    326              }
    327              return Result;
   \   000000C8   1CD08DE2           ADD      SP,SP,#+28
   \   000000CC   ........           B        ?Subroutine17
   \                     ??GetRegisterValue_5:
   \   000000D0   4F6E0000           DC8      "On",+0
   \   000000D4   4F666600           DC8      "Off"
   \   000000D8   ........           DC32     `?<Constant "Error">`
    328          }
    329          

   \                                 In segment CODE, align 4, keep-with-next
    330          AlarmBasic* ModbusCoilIn::GetAlarmPtr(void) {
    331              return (AlarmBasic *)AlarmPtr;
   \                     ??GetAlarmPtr:
   \   00000000   840190E5           LDR      R0,[R0, #+388]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    332          }
    333          /////////////////////////////////////////////////////////////////////////////////////
    334          

   \                                 In segment CODE, align 4, keep-with-next
    335          void ModbusCoilIn::InitiateCoils(ModbusUnit *UnitPtr) {
   \                     ??InitiateCoils:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    336              if ( ObjectPtr ) {
   \   00000008   88C194E5           LDR      R12,[R4, #+392]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   00005CE3           CMP      R12,#+0
   \   00000014   0F00000A           BEQ      ??InitiateCoils_1
    337                  bool tmpIsActive;
    338                  ObjectPtr->GetBitValue(ValueKey, 0, tmpIsActive);
   \   00000018   8C1194E5           LDR      R1,[R4, #+396]
   \   0000001C   0C00A0E1           MOV      R0,R12
   \   00000020   A4C09CE5           LDR      R12,[R12, #+164]
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   2CC09CE5           LDR      R12,[R12, #+44]
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0FE0A0E1           MOV      LR,PC
   \   00000034   1CFF2FE1           BX       R12
    339                  if ( AutoReset  ) {
   \   00000038   9511D4E5           LDRB     R1,[R4, #+405]
   \   0000003C   5C0FA0E3           MOV      R0,#+368
   \   00000040   000051E3           CMP      R1,#+0
    340                      UnitPtr->InitInCoil(Channel, 0);
    341                  } else {
    342                      UnitPtr->InitInCoil(Channel, tmpIsActive);
   \   00000044   0020DD05           LDRBEQ   R2,[SP, #+0]
   \   00000048   041090E7           LDR      R1,[R0, +R4]
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   0020A013           MOVNE    R2,#+0
   \   00000054   ........           _BLF     ??InitInCoil,??InitInCoil??rA
    343                  }
    344              }
    345          
    346          }
   \                     ??InitiateCoils_1:
   \   00000058   3140BDE8           POP      {R0,R4,R5,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    347          
    348          

   \                                 In segment CODE, align 4, keep-with-next
    349          void  ModbusCoilIn::SetCoil(bool newState) {
   \                     ??SetCoil:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    350              ModbusUnit *tmpPtr = FindUnit();
   \   0000000C   ........           _BLF     ??FindUnit,??FindUnit??rA
    351              if ( tmpPtr   ) {
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      ??SetCoil_1
    352                  tmpPtr->SetInCoil(Channel, newState);
   \   00000018   701194E5           LDR      R1,[R4, #+368]
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   ........           _BLF     ??SetInCoil,??SetInCoil??rA
    353              }
    354          }
   \                     ??SetCoil_1:
   \   00000024   ........           B        ?Subroutine17

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Modbus Coil In">`:
   \   00000000   4D6F64627573       DC8 "Modbus Coil In"
   \              20436F696C20
   \              496E00      
   \   0000000F   00                 DC8 0
   \   00000010   4D6F64627573       DC8 "Modbus coil value"
   \              20636F696C20
   \              76616C756500
   \   00000022   0000               DC8 0, 0
   \   00000024   4D6F64627573       DC8 "Modbus CoilIn IDNumber Error, Line "
   \              20436F696C49
   \              6E2049444E75
   \              6D6265722045
   \              72726F722C20
   \              4C696E652000
   \   00000048   436F696C496E       DC8 "CoilIn IDNumber changed from 0x%0X to 0x%0X"
   \              2049444E756D
   \              626572206368
   \              616E67656420
   \              66726F6D2030
   \              782530582074
   \              6F2030782530
   \              5800        
   \   00000074   4D6F64627573       DC8 "Modbus CoilIn duplicate IDNumber line "
   \              20436F696C49
   \              6E206475706C
   \              696361746520
   \              49444E756D62
   \              6572206C696E
   \              652000      
   \   0000009B   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2100               DC8 "!"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   65284C696E65       DC8 65H, 28H, 4CH, 69H, 6EH, 65H, 20H, 6EH
   \              206E        
   \   00000020   756D62657220       DC8 75H, 6DH, 62H, 65H, 72H, 20H, 25H, 69H
   \              2569        
   \   00000028   293A204D6F64       DC8 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000030   73436F696C49       DC8 73H, 43H, 6FH, 69H, 6CH, 49H, 6EH, 20H
   \              6E20        
   \   00000038   52656649444E       DC8 52H, 65H, 66H, 49H, 44H, 4EH, 75H, 6DH
   \              756D        
   \   00000040   626572202569       DC8 62H, 65H, 72H, 20H, 25H, 69H, 20H, 28H
   \              2028        
   \   00000048   307825307829       DC8 30H, 78H, 25H, 30H, 78H, 29H, 20H, 69H
   \              2069        
   \   00000050   7320696E636F       DC8 73H, 20H, 69H, 6EH, 63H, 6FH, 72H, 72H
   \              7272        
   \   00000058   65637400           DC8 65H, 63H, 74H, 0
   \   0000005C   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 43H, 6FH
   \              436F        
   \   00000064   696C496E2052       DC8 69H, 6CH, 49H, 6EH, 20H, 52H, 65H, 66H
   \              6566        
   \   0000006C   49444E756D62       DC8 49H, 44H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              6572        
   \   00000074   202569202830       DC8 20H, 25H, 69H, 20H, 28H, 30H, 78H, 25H
   \              7825        
   \   0000007C   307829206973       DC8 30H, 78H, 29H, 20H, 69H, 73H, 20H, 69H
   \              2069        
   \   00000084   6E636F727265       DC8 6EH, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              6374        
   \   0000008C   2E204C696E65       DC8 2EH, 20H, 4CH, 69H, 6EH, 65H, 20H, 4EH
   \              204E        
   \   00000094   756D62657220       DC8 75H, 6DH, 62H, 65H, 72H, 20H, 25H, 69H
   \              2569        
   \   0000009C   00                 DC8 0
   \   0000009D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Not defined">`:
   \   00000000   4E6F74206465       DC8 "Not defined"
   \              66696E656400

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Status">`:
   \   00000000   537461747573       DC8 "Status"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4F6E00             DC8 "On"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4F666600           DC8 "Off"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error">`:
   \   00000000   4572726F7200       DC8 "Error"
   \   00000006   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoilIn &ModbusCoilIn::new ModbusCoilIn(bool)
   \                     `??new ModbusCoilIn`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   660FA0E3           MOV      R0,#+408
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusCoilIn_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusCoilIn
   \                     `??new ModbusCoilIn_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??npos
    355          
    356          
    357          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusCoilIn::GetAlarmPtr()        0
     ModbusCoilIn::GetObjectId()        0
     ModbusCoilIn::GetRegisterType()
                                        4
     ModbusCoilIn::GetRegisterValue()
                                       40
     ModbusCoilIn::GetValueKey()        4
     ModbusCoilIn::InitiateCoils(ModbusUnit *)
                                       16
     ModbusCoilIn::LoadConfigString(TSNConfigString &)
                                      428
     ModbusCoilIn::MakeConfigString(int)
                                      500
     ModbusCoilIn::ModbusCoilIn(bool)
                                       28
     ModbusCoilIn::SetCoil(bool)       12
     ModbusCoilIn::SetProList()       104
     ModbusCoilIn::Update()            28
     ModbusCoilIn::UpdateFromMultiple(unsigned int, int)
                                       88
     ModbusCoilIn::new ModbusCoilIn(bool)
                                        8
     ModbusCoilIn::operator=(ModbusCoilIn)
                                       24
     ModbusCoilIn::~ModbusCoilIn()     12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     ModbusCoilIn::ModbusSet          24
     ModbusCoilIn::ModbusCoilIn(bool)
                                     200
     ModbusCoilIn::~ModbusCoilIn()    48
     ?Subroutine17                    12
     ModbusCoilIn::MakeConfigString(int)
                                    1320
     ModbusCoilIn::LoadConfigString(TSNConfigString &)
                                    1584
     ModbusCoilIn::SetProList()      244
     ModbusCoilIn::Update()          352
     ModbusCoilIn::operator=(ModbusCoilIn)
                                     276
     ModbusCoilIn::UpdateFromMultiple(unsigned int, int)
                                     212
     ModbusCoilIn::GetObjectId()       8
     ModbusCoilIn::GetValueKey()      52
     ?Subroutine18                    12
     ModbusCoilIn::GetRegisterType()
                                      16
     ModbusCoilIn::GetRegisterValue()
                                     220
     ModbusCoilIn::GetAlarmPtr()       8
     ModbusCoilIn::InitiateCoils(ModbusUnit *)
                                      96
     ModbusCoilIn::SetCoil(bool)      40
     ?<Constant "0x%0x">               8
     ?<Constant "Modbus Coil In">    156
     ?<Constant "!">                   2
     ?<Constant "Created by ModbusMult...">
                                     160
     ?<Constant "Not defined">        12
     ?<Constant "Status">              8
     ?<Constant "On">                  3
     ?<Constant "Off">                 4
     ?<Constant "Error">               8
     __sti__routine()                 56
     ModbusCoilIn::new ModbusCoilIn(bool)
                                      40
     ??DataTable1                      4
     ??DataTable9                      4
     ??DataTable12                     4
      Others                         992

 
 7 628 bytes in segment CODE
   533 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 4 812 bytes of CODE  memory (+ 2 832 bytes shared)
   533 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
