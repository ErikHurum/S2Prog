##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:04 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmTCMLowSpeed.Cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmTCMLowSpeed.Cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmTCMLowSpeed.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmTCMLowSpeed.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmTCMLowSpeed.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmTCMLowSpeed::~AlarmTCMLowSpeed()
   \                     `?~AlarmTCMLowSpeed`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmTCMLowSpeed_1`
   \   00000014   0100000A           BEQ      `?~AlarmTCMLowSpeed_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmTCMLowSpeed_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmTCMLowSpeed_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmTCMLowSpeed_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmTCMLowSpeed::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmTCMLowSpeed::AlarmTCMLowSpeed(PRogramObjectBase *PROPtr) : AlarmBasic(PROPtr) {
   \                     ??AlarmTCMLowSpeed:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   80009FE5           LDR      R0,??AlarmTCMLowSpeed_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     12              NumberOfAlarmSettings++;
   \   00000018   7C009FE5           LDR      R0,??AlarmTCMLowSpeed_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     13              PROPointer          = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     14              PROTCMPtr           = (PROTankWashingMachine *)PROPtr;
   \   0000002C   EC5084E5           STR      R5,[R4, #+236]
     15              IDNumber            = (ID_AL_TWM_LOW_SPEED << 16) + NumberOfAlarmSettings;
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   8016A0E3           MOV      R1,#+134217728
   \   00000038   FA1781E3           ORR      R1,R1,#0x3E80000
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
     16              Type                = ID_AL_TWM_LOW_SPEED;
   \   00000044   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     17              Enable              = false;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   E200C4E5           STRB     R0,[R4, #+226]
     18              Locked              = false;
   \   00000054   E800C4E5           STRB     R0,[R4, #+232]
     19              CanDisableOnly      = true;
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   EA00C4E5           STRB     R0,[R4, #+234]
     20              Limit				= MIN_TWM_SPEED;
   \   00000060   38009FE5           LDR      R0,??AlarmTCMLowSpeed_1+0x8  ;; 0x3e4ccccd
   \   00000064   E40084E5           STR      R0,[R4, #+228]
     21              Deadband            = 0.1;
   \   00000068   800840E2           SUB      R0,R0,#+8388608
   \   0000006C   BC0084E5           STR      R0,[R4, #+188]
     22              MessageKey          = L_WORD1116;   // Low speed
   \   00000070   5C00A0E3           MOV      R0,#+92
   \   00000074   400E80E3           ORR      R0,R0,#0x400
   \   00000078   B80084E5           STR      R0,[R4, #+184]
     23              TPCMessageKey       = L_WORD1117;   // LoSpd
   \   0000007C   010080E3           ORR      R0,R0,#0x1
   \   00000080   B40084E5           STR      R0,[R4, #+180]
     24              PreviousEnable      = Enable;
   \   00000084   E200D4E5           LDRB     R0,[R4, #+226]
   \   00000088   CC00C4E5           STRB     R0,[R4, #+204]
     25          }
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   3040BDE8           POP      {R4,R5,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmTCMLowSpeed_1:
   \   00000098   ........           DC32     ??__vtbl
   \   0000009C   ........           DC32     ??NumberOfAlarmSettings
   \   000000A0   CDCC4C3E           DC32     0x3e4ccccd
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void AlarmTCMLowSpeed::Check(void) {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     28              float Val = PROTCMPtr->Speed;
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
     29              int Status = AL_STAT_IN_DEADBAND;
   \   0000000C   0260A0E3           MOV      R6,#+2
   \   00000010   5C5190E5           LDR      R5,[R0, #+348]
     30              if ( PROTCMPtr->IsNewData ) {
   \   00000014   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0700000A           BEQ      ??Check_1
     31                  if ( Val > Limit + Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC0094E5           LDR      R0,[R4, #+188]
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   ........           _BLF     __fLess,??__fLess??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??Check_2
     32                      Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000040   0060A0E3           MOV      R6,#+0
   \   00000044   040000EA           B        ??Check_3
     33                  } else if ( Val <= Limit ) {
   \                     ??Check_2:
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000054   000050E3           CMP      R0,#+0
     34                      Status = AL_STAT_IN_ALARM;
   \   00000058   0160A013           MOVNE    R6,#+1
     35                  }
     36              } else {
     37                  Status = AL_STAT_IN_NORMAL;
     38              }
     39              UpdateAlarm(Status);
   \                     ??Check_3:
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     40          }
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     41          
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the librarian for input
     45          //
     46          ///////////////////////////////////////////////////////////////
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          int AlarmTCMLowSpeed::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7890DDE5           LDRB     R9,[SP, #+120]
   \   0000000C   7C409DE5           LDR      R4,[SP, #+124]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0280A0E1           MOV      R8,R2
   \   0000001C   0360A0E1           MOV      R6,R3
     49              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
     50              switch ( ValueId ) {
   \   0000002C   3210A0E3           MOV      R1,#+50
   \   00000030   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000034   010057E1           CMP      R7,R1
   \   00000038   2A00000A           BEQ      ??PutValue_3
   \   0000003C   0C1081E3           ORR      R1,R1,#0xC
   \   00000040   010057E1           CMP      R7,R1
   \   00000044   6500001A           BNE      ??PutValue_4
     51              case SVT_AL_ENABLE:
     52                  if ( Locked && !CanDisableOnly ) {
   \   00000048   E800D5E5           LDRB     R0,[R5, #+232]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0500000A           BEQ      ??PutValue_5
   \   00000054   EA00D5E5           LDRB     R0,[R5, #+234]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0200001A           BNE      ??PutValue_5
     53                      Status = E_NO_INPUT_PERMISSION;
   \                     ??PutValue_6:
   \   00000060   2A10A0E3           MOV      R1,#+42
   \   00000064   00108DE5           STR      R1,[SP, #+0]
   \   00000068   740000EA           B        ??PutValue_7
     54                  } else {
     55                      int Key = FindConfigKey(NewValue);
   \                     ??PutValue_5:
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   08008DE2           ADD      R0,SP,#+8
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   D8019FE5           LDR      R0,??PutValue_8  ;; ??npos
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   003090E5           LDR      R3,[R0, #+0]
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   08008DE2           ADD      R0,SP,#+8
   \   00000090   ........           _BLF     ??assign,??assign??rA
   \   00000094   08008DE2           ADD      R0,SP,#+8
   \   00000098   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000009C   0060A0E1           MOV      R6,R0
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   08008DE2           ADD      R0,SP,#+8
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     56                      switch ( Key ) {
   \   000000B0   646046E2           SUB      R6,R6,#+100
   \   000000B4   050056E3           CMP      R6,#+5
   \   000000B8   6000008A           BHI      ??PutValue_7
   \   000000BC   010F8FE2           ADR      R0,??PutValue_1
   \   000000C0   0600D0E7           LDRB     R0,[R0, R6]
   \   000000C4   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   000000C8   01050105           DC8      +1,+5,+1,+5
   \   000000CC   01050000           DC8      +1,+5,+0,+0
     57                      case C_ON		:
     58                      case C_OPEN		:
     59                      case C_ENABLE	:
     60                          SetEnable(EnableTrue);
   \                     ??PutValue_9:
   \   000000D0   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_10:
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     ??SetEnable,??SetEnable??rA
   \   000000DC   570000EA           B        ??PutValue_7
     61                          break;
     62                      case C_OFF		:
     63                      case C_CLOSE	:
     64                      case C_DISABLE	:
     65                          SetEnable(EnableFalse);
   \                     ??PutValue_11:
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   FAFFFFEA           B        ??PutValue_10
     66                          break;
     67                      } //switch ( Key )
     68                  }
     69                  break;
     70              case SVT_AL_LIMIT:
     71                  if ( Locked  ) {
   \                     ??PutValue_3:
   \   000000E8   E800D5E5           LDRB     R0,[R5, #+232]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   DAFFFF1A           BNE      ??PutValue_6
     72                      Status = E_NO_INPUT_PERMISSION;
     73                  } else {
     74                      float OrgLimit = Limit;
   \   000000F4   E47095E5           LDR      R7,[R5, #+228]
     75                      float Value = ConvertToSi(NewValue, ValUnitId = REVOLUTIONS_UNIT, Status, MIN_TWM_SPEED, MAX_TWM_SPEED, MIN_TWM_SPEED);
   \   000000F8   1B10A0E3           MOV      R1,#+27
   \   000000FC   04108DE5           STR      R1,[SP, #+4]
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   08008DE2           ADD      R0,SP,#+8
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000110   44019FE5           LDR      R0,??PutValue_8  ;; ??npos
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   003090E5           LDR      R3,[R0, #+0]
   \   0000011C   0610A0E1           MOV      R1,R6
   \   00000120   08008DE2           ADD      R0,SP,#+8
   \   00000124   ........           _BLF     ??assign,??assign??rA
   \   00000128   30019FE5           LDR      R0,??PutValue_8+0x4  ;; 0xffffffff9999999a
   \   0000012C   30119FE5           LDR      R1,??PutValue_8+0x8  ;; 0x3fc99999
   \   00000130   03002DE9           PUSH     {R0,R1}
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   4014A0E3           MOV      R1,#+1073741824
   \   0000013C   901981E3           ORR      R1,R1,#0x240000
   \   00000140   03002DE9           PUSH     {R0,R1}
   \   00000144   14019FE5           LDR      R0,??PutValue_8+0x4  ;; 0xffffffff9999999a
   \   00000148   14119FE5           LDR      R1,??PutValue_8+0x8  ;; 0x3fc99999
   \   0000014C   03002DE9           PUSH     {R0,R1}
   \   00000150   18208DE2           ADD      R2,SP,#+24
   \   00000154   20008DE2           ADD      R0,SP,#+32
   \   00000158   0800BDE8           POP      {R3}
   \   0000015C   1B10A0E3           MOV      R1,#+27
   \   00000160   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000164   0060A0E1           MOV      R6,R0
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   1C008DE2           ADD      R0,SP,#+28
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
     76                      if ( Status == E_NO_ERR ) {
   \   00000178   14009DE5           LDR      R0,[SP, #+20]
   \   0000017C   14D08DE2           ADD      SP,SP,#+20
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   2D00001A           BNE      ??PutValue_7
     77                          Limit = Value;
   \   00000188   E46085E5           STR      R6,[R5, #+228]
     78                          if ( Status == E_NO_ERR ) {
     79                              SetModifiedFlag();
   \   0000018C   A41095E5           LDR      R1,[R5, #+164]
   \   00000190   0500A0E1           MOV      R0,R5
   \   00000194   541091E5           LDR      R1,[R1, #+84]
   \   00000198   0FE0A0E1           MOV      LR,PC
   \   0000019C   11FF2FE1           BX       R1
     80                              if ( Limit != OrgLimit ) {
   \   000001A0   E40095E5           LDR      R0,[R5, #+228]
   \   000001A4   0710A0E1           MOV      R1,R7
   \   000001A8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   2200000A           BEQ      ??PutValue_7
     81                                  LogEvent("New limit");
   \   000001B4   AC109FE5           LDR      R1,??PutValue_8+0xC  ;; `?<Constant "New limit">`
   \   000001B8   40008DE2           ADD      R0,SP,#+64
   \   000001BC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001C0   0010A0E1           MOV      R1,R0
   \   000001C4   0500A0E1           MOV      R0,R5
   \   000001C8   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   40008DE2           ADD      R0,SP,#+64
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   170000EA           B        ??PutValue_7
     82                              }
     83                          }
     84                      }
     85                  }
     86                  break;
     87              default:
     88                  Status = AlarmBasic::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_4:
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0010A0E3           MOV      R1,#+0
   \   000001E8   24008DE2           ADD      R0,SP,#+36
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F0   64009FE5           LDR      R0,??PutValue_8  ;; ??npos
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   003090E5           LDR      R3,[R0, #+0]
   \   000001FC   0610A0E1           MOV      R1,R6
   \   00000200   24008DE2           ADD      R0,SP,#+36
   \   00000204   ........           _BLF     ??assign,??assign??rA
   \   00000208   04008DE2           ADD      R0,SP,#+4
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   00022DE9           PUSH     {R9}
   \   00000214   2C308DE2           ADD      R3,SP,#+44
   \   00000218   0820A0E1           MOV      R2,R8
   \   0000021C   0710A0E1           MOV      R1,R7
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000228   08008DE5           STR      R0,[SP, #+8]
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   2C008DE2           ADD      R0,SP,#+44
   \   00000238   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000023C   08D08DE2           ADD      SP,SP,#+8
     89                  break;
     90              } // switch ( ValueId )
     91              if ( UnitId ) {
   \                     ??PutValue_7:
   \   00000240   000054E3           CMP      R4,#+0
     92                  *UnitId = ValUnitId;
   \   00000244   04009D15           LDRNE    R0,[SP, #+4]
   \   00000248   00008415           STRNE    R0,[R4, #+0]
     93              }
     94              return (Status);
   \   0000024C   00009DE5           LDR      R0,[SP, #+0]
   \   00000250   5CD08DE2           ADD      SP,SP,#+92
   \   00000254   F043BDE8           POP      {R4-R9,LR}
   \   00000258   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_8:
   \   0000025C   ........           DC32     ??npos
   \   00000260   9A999999           DC32     0xffffffff9999999a
   \   00000264   9999C93F           DC32     0x3fc99999
   \   00000268   ........           DC32     `?<Constant "New limit">`
     95          }
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          int  AlarmTCMLowSpeed::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     98              int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     99              switch ( ValueId ) {
   \   00000010   1B60A0E3           MOV      R6,#+27
   \   00000014   0270A0E3           MOV      R7,#+2
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    100              case SVT_AL_LIMIT:
    101                  MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    102                  DecPnt     = 2;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    103                  Unit       = REVOLUTIONS_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    104                  if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    105                      Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    106                  }
    107                  break;
    108              case SVT_AL_VALUE:
    109                  MyRetValue = PROTCMPtr->Speed;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   5C0190E5           LDR      R0,[R0, #+348]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    110                  DecPnt     = 2;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    111                  Unit       = REVOLUTIONS_UNIT;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    112                  break;
    113              default:
    114                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    115                  break;
    116              }
    117              return (Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    118          }
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          int AlarmTCMLowSpeed::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    121              int Status = GETVAL_NO_ERR;
    122              //switch ( ValueId ) {
    123              //	default:
    124              Status = AlarmBasic::GetStringValue(ValueId, Index, MyString);
    125              //		break;
    126              //}
    127              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
    128          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    129          

   \                                 In segment CODE, align 4, keep-with-next
    130          int AlarmTCMLowSpeed::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    131              int Status = E_NO_ERR;
    132              //switch ( ValueId ) {
    133              //   default:
    134              Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    135              //     break;
    136              //}
    137              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
    138          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmTCMLowSpeed &AlarmTCMLowSpeed::new AlarmTCMLowSpeed(PRogramObjectBase *)
   \                     `??new AlarmTCMLowSpeed`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmTCMLowSpeed_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmTCMLowSpeed
   \                     `??new AlarmTCMLowSpeed_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    139          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmTCMLowSpeed::AlarmTCMLowSpeed(PRogramObjectBase *)
                                       12
     AlarmTCMLowSpeed::Check()         20
     AlarmTCMLowSpeed::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmTCMLowSpeed::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmTCMLowSpeed::PutFloatValue(int, float)
                                        4
     AlarmTCMLowSpeed::PutValue(int, int, AnsiString, bool, int *)
                                      144
     AlarmTCMLowSpeed::new AlarmTCMLowSpeed(PRogramObjectBase *)
                                        8
     AlarmTCMLowSpeed::~AlarmTCMLowSpeed()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmTCMLowSpeed::~AlarmTCMLowSpeed()
                                      56
     AlarmTCMLowSpeed::NumberOfAlarmSettings
                                       4
     AlarmTCMLowSpeed::AlarmTCMLowSpeed(PRogramObjectBase *)
                                     164
     AlarmTCMLowSpeed::Check()       112
     AlarmTCMLowSpeed::PutValue(int, int, AnsiString, bool, int *)
                                     620
     AlarmTCMLowSpeed::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmTCMLowSpeed::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AlarmTCMLowSpeed::PutFloatValue(int, float)
                                       8
     ?<Constant "New limit">          12
     AlarmTCMLowSpeed::new AlarmTCMLowSpeed(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         404

 
 1 444 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 120 bytes of CODE  memory (+ 340 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
