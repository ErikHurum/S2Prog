##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHartSensorShortCircuit.cpp #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHartSensorShortCircuit.cpp #
#                        --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D       #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHartSensorShortCircuit #
#                       .lst                                                 #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHartSensorShortCircuit. #
#                       r79                                                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHartSensorShortCircuit.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
      8          AlarmHartSensorShortCircuit::~AlarmHartSensorShortCircuit(void)
      9          {
   \                     `?~AlarmHartSensorShortCircuit`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHartSensorShortCircuit_1`
     10          }
   \   00000014   0100000A           BEQ      `?~AlarmHartSensorShortCircuit_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHartSensorShortCircuit_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHartSensorShortCircuit_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHartSensorShortCircuit_1`:
   \   00000030   ........           B        ?Subroutine9

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine9_0:
   \   00000008   ........           DC32     ??__vtbl
   \   0000000C   ........           DC32     ??NumberOfAlarms
     11          

   \                                 In segment DATA_Z, align 4, align-sorted
     12          unsigned AlarmHartSensorShortCircuit::NumberOfAlarms=0;
   \                     ??NumberOfAlarms:
   \   00000000                      DS8 4
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          AlarmHartSensorShortCircuit::AlarmHartSensorShortCircuit(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmHartSensorShortCircuit:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     15          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??Subroutine9_0  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     16          	NumberOfAlarms++;
   \   00000018   ........           LDR      R0,??Subroutine9_0+0x4  ;; ??NumberOfAlarms
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     17          	PROPointer      = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     18          	IDNumber        = (ID_AL_SNS_HART_SHORT_CIRCUIT << 16)+NumberOfAlarms;
   \   0000002C   C006A0E3           MOV      R0,#+201326592
   \   00000030   920880E3           ORR      R0,R0,#0x920000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     19          	Type            = ID_AL_SNS_HART_SHORT_CIRCUIT;
   \   0000003C   9200A0E3           MOV      R0,#+146
   \   00000040   C00E80E3           ORR      R0,R0,#0xC00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     20          	Limit           = true;
   \   00000048   FE05A0E3           MOV      R0,#+1065353216
   \   0000004C   E40084E5           STR      R0,[R4, #+228]
     21          	Deadband        = 0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   BC0084E5           STR      R0,[R4, #+188]
     22          	MessageKey      = L_WORD543;		// ShortCircuit
   \   00000058   1F00A0E3           MOV      R0,#+31
   \   0000005C   800F80E3           ORR      R0,R0,#0x200
   \   00000060   B80084E5           STR      R0,[R4, #+184]
     23          	TPCMessageKey   = L_WORD540;		// HWErr
   \   00000064   870FA0E3           MOV      R0,#+540
   \   00000068   B40084E5           STR      R0,[R4, #+180]
     24          	Count           = 0;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   EC0084E5           STR      R0,[R4, #+236]
     25          	IsHWAlarm       = true;
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   CE00C4E5           STRB     R0,[R4, #+206]
     26          }
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080                      REQUIRE ?Subroutine9
   \   00000080                      ;; // Fall through to label ?Subroutine9
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void AlarmHartSensorShortCircuit::Check(void)
     29          {
   \                     ??Check:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     30          
     31          	int Status = AL_STAT_IN_DEADBAND;
     32          	if ( ((AnalogInput*)PROPointer)->Failure & HART_STATUS_SHORT_CIRCUIT_BIT ){
   \   00000008   C40094E5           LDR      R0,[R4, #+196]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   3801D0E5           LDRB     R0,[R0, #+312]
   \   00000014   020010E3           TST      R0,#0x2
     33          		Status = AL_STAT_IN_ALARM;
   \   00000018   0150A013           MOVNE    R5,#+1
   \   0000001C   0500001A           BNE      ??Check_1
     34          	} else {
     35                  if ( TSNElapsedTicks(LastActiveTime) > 10000 ) {
   \   00000020   C00094E5           LDR      R0,[R4, #+192]
   \   00000024   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000028   1110A0E3           MOV      R1,#+17
   \   0000002C   9C1D81E3           ORR      R1,R1,#0x2700
   \   00000030   010050E1           CMP      R0,R1
     36                      Status = AL_STAT_IN_NORMAL;
   \   00000034   0050A0A3           MOVGE    R5,#+0
     37                  }
     38          	}
     39          	UpdateAlarm(Status);
   \                     ??Check_1:
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     40          }
   \   00000044   ........           B        ?Subroutine9
     41          
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the librarian for input
     45          //
     46          ///////////////////////////////////////////////////////////////
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          int AlarmHartSensorShortCircuit::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     49          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     50          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     51          	switch ( ValueId ) {
   \   00000028   3210A0E3           MOV      R1,#+50
   \   0000002C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000030   010055E1           CMP      R5,R1
     52          		case SVT_AL_LIMIT:
     53          			Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A50A003           MOVEQ    R5,#+42
   \   00000038   1E00000A           BEQ      ??PutValue_2
     54          			break;
     55          		default:
     56          			Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   80009FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           _BLF     ??assign,??assign??rA
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   00012DE9           PUSH     {R8}
   \   00000070   0C308DE2           ADD      R3,SP,#+12
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000084   0050A0E1           MOV      R5,R0
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0C008DE2           ADD      R0,SP,#+12
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
     57          			break;
     58          	}
     59          	if ( Status==E_NO_ERR ) {
   \   00000098   000055E3           CMP      R5,#+0
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   \   000000A0   0400001A           BNE      ??PutValue_2
     60          		SetModifiedFlag();
   \   000000A4   A41094E5           LDR      R1,[R4, #+164]
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   541091E5           LDR      R1,[R1, #+84]
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   11FF2FE1           BX       R1
     61          	}
     62          	if (UnitId) {
   \                     ??PutValue_2:
   \   000000B8   000059E3           CMP      R9,#+0
     63          		*UnitId = ValUnitId;
   \   000000BC   00009D15           LDRNE    R0,[SP, #+0]
   \   000000C0   00008915           STRNE    R0,[R9, #+0]
     64          	}
     65          	return(Status);
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   20D08DE2           ADD      SP,SP,#+32
   \   000000CC   F043BDE8           POP      {R4-R9,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_3:
   \   000000D4   ........           DC32     ??npos
     66          }
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          int  AlarmHartSensorShortCircuit::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     69          {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
     70          	int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     71          	switch ( ValueId ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   323041E2           SUB      R3,R1,#+50
   \   0000001C   8C3D43E2           SUB      R3,R3,#+8960
   \   00000020   010053E3           CMP      R3,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   01CF8FE2           ADR      R12,??GetValue_1
   \   0000002C   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     72          		case SVT_AL_LIMIT:
     73          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     74          			DecPnt     = 0;
   \   00000040   008085E5           STR      R8,[R5, #+0]
     75          			Unit       = NO_UNIT;
   \   00000044   008086E5           STR      R8,[R6, #+0]
   \   00000048   080000EA           B        ??GetValue_6
     76          			break;
     77          		case SVT_AL_VALUE:
     78          			MyRetValue = float(Count);
   \                     ??GetValue_7:
   \   0000004C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000050   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000054   F8FFFFEA           B        ??GetValue_5
     79          			DecPnt     = 0;
     80          			Unit       = NO_UNIT;
     81          			break;
     82          		default:
     83          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   40002DE9           PUSH     {R6}
   \   0000005C   20002DE9           PUSH     {R5}
   \   00000060   0430A0E1           MOV      R3,R4
   \   00000064   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   08D08DE2           ADD      SP,SP,#+8
     84          			break;
     85          	}
     86          	return(Status);
   \                     ??GetValue_6:
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   F041BDE8           POP      {R4-R8,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
     87          }
     88          
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int AlarmHartSensorShortCircuit::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     91          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     92          	int Status = GETVAL_NO_ERR;
     93          	//switch ( ValueId ) {
     94          	//	default:
     95          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     96          	//		break;
     97          	//}
     98          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine10
     99          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          int AlarmHartSensorShortCircuit::PutFloatValue( int ValueId, float NewValue)
    102          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    103          	int Status= E_NO_ERR;
    104          	//switch ( ValueId ) {
    105          	//   default:
    106          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    107          	//     break;
    108          	//}
    109          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    110          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHartSensorShortCircuit &AlarmHartSensorShortCircuit::new AlarmHartSensorShortCircuit(PRogramObjectBase *)
   \                     `??new AlarmHartSensorShortCircuit`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmHartSensorShortCircuit_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmHartSensorShortCircuit
   \                     `??new AlarmHartSensorShortCircuit_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    111          
    112          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHartSensorShortCircuit::AlarmHartSensorShortCircuit(PRogramObjectBase *)
                                       12
     AlarmHartSensorShortCircuit::Check()
                                       12
     AlarmHartSensorShortCircuit::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmHartSensorShortCircuit::GetValue(int, int, float &, int &, int &)
                                       32
     AlarmHartSensorShortCircuit::PutFloatValue(int, float)
                                        4
     AlarmHartSensorShortCircuit::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AlarmHartSensorShortCircuit::new AlarmHartSensorShortCircuit(PRogramObjectBase *)
                                        8
     AlarmHartSensorShortCircuit::~AlarmHartSensorShortCircuit()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmHartSensorShortCircuit::~AlarmHartSensorShortCircuit()
                                      52
     ?Subroutine9                     16
     AlarmHartSensorShortCircuit::NumberOfAlarms
                                       4
     AlarmHartSensorShortCircuit::AlarmHartSensorShortCircuit(PRogramObjectBase *)
                                     128
     AlarmHartSensorShortCircuit::Check()
                                      72
     AlarmHartSensorShortCircuit::PutValue(int, int, AnsiString, bool, int *)
                                     216
     AlarmHartSensorShortCircuit::GetValue(int, int, float &, int &, int &)
                                     124
     AlarmHartSensorShortCircuit::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine10                     8
     AlarmHartSensorShortCircuit::PutFloatValue(int, float)
                                       8
     AlarmHartSensorShortCircuit::new AlarmHartSensorShortCircuit(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         324

 
 872 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 684 bytes of CODE  memory (+ 204 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
