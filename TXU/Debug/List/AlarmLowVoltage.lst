##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLowVoltage.Cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLowVoltage.Cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLowVoltage.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLowVoltage.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLowVoltage.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowVoltage::~AlarmLowVoltage()
   \                     `?~AlarmLowVoltage`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLowVoltage_1`
   \   00000014   0100000A           BEQ      `?~AlarmLowVoltage_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLowVoltage_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLowVoltage_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLowVoltage_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLowVoltage::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          
     11          // This constructor is not to be used for this type of alarm

   \                                 In segment CODE, align 4, keep-with-next
     12          AlarmLowVoltage::AlarmLowVoltage(PRogramObjectBase *PROPtr, float Lim):AlarmBasic(PROPtr)
   \                     ??AlarmLowVoltage:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0250A0E1           MOV      R5,R2
     13          {
   \   00000010   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000014   64009FE5           LDR      R0,??AlarmLowVoltage_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     14          	PROPointer = PROPtr;
     15          	NumberOfAlarmSettings++;
   \   0000001C   60009FE5           LDR      R0,??AlarmLowVoltage_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000020   C46084E5           STR      R6,[R4, #+196]
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
     16          	IDNumber =  (ID_AL_LOW_VOLTAGE << 16)+NumberOfAlarmSettings;
   \   00000030   B006A0E3           MOV      R0,#+184549376
   \   00000034   DE0880E3           ORR      R0,R0,#0xDE0000
   \   00000038   010080E0           ADD      R0,R0,R1
   \   0000003C   9C0084E5           STR      R0,[R4, #+156]
     17          	Type     = ID_AL_LOW_VOLTAGE;
   \   00000040   DE00A0E3           MOV      R0,#+222
   \   00000044   B00E80E3           ORR      R0,R0,#0xB00
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     18          	Limit    = Lim;
     19          	Deadband = 0.1;
   \   0000004C   34009FE5           LDR      R0,??AlarmLowVoltage_1+0x8  ;; 0x3dcccccd
   \   00000050   E45084E5           STR      R5,[R4, #+228]
   \   00000054   BC0084E5           STR      R0,[R4, #+188]
     20          	MessageKey      = L_WORD526;	// Low Voltage
   \   00000058   0E00A0E3           MOV      R0,#+14
   \   0000005C   800F80E3           ORR      R0,R0,#0x200
   \   00000060   B80084E5           STR      R0,[R4, #+184]
     21          	TPCMessageKey   = L_WORD527;	// LVolt
   \   00000064   010080E3           ORR      R0,R0,#0x1
   \   00000068   B40084E5           STR      R0,[R4, #+180]
     22          	IsHWAlarm       = true;
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   CE00C4E5           STRB     R0,[R4, #+206]
     23          }
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   7040BDE8           POP      {R4-R6,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLowVoltage_1:
   \   00000080   ........           DC32     ??__vtbl
   \   00000084   ........           DC32     ??NumberOfAlarmSettings
   \   00000088   CDCCCC3D           DC32     0x3dcccccd
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AlarmLowVoltage::Check(void)
     26          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     27          	float Val = ((AIVoltageSensor*)PROPointer)->Calculate();
   \   00000008   C41094E5           LDR      R1,[R4, #+196]
     28          	int Status = AL_STAT_IN_DEADBAND;
   \   0000000C   0260A0E3           MOV      R6,#+2
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   A41091E5           LDR      R1,[R1, #+164]
   \   00000018   601091E5           LDR      R1,[R1, #+96]
   \   0000001C   0FE0A0E1           MOV      LR,PC
   \   00000020   11FF2FE1           BX       R1
     29          	if ( Val > Limit + Deadband ) {
   \   00000024   E47094E5           LDR      R7,[R4, #+228]
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   BC0094E5           LDR      R0,[R4, #+188]
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   ........           _BLF     __fLess,??__fLess??rA
   \   00000040   000050E3           CMP      R0,#+0
     30          		Status = AL_STAT_IN_NORMAL;
   \   00000044   0060A013           MOVNE    R6,#+0
   \   00000048   0400001A           BNE      ??Check_1
     31          	} else if ( Val <= Limit ) {
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     32          		Status = AL_STAT_IN_ALARM;
   \   0000005C   0160A013           MOVNE    R6,#+1
     33          	}
     34          	UpdateAlarm(Status);
   \                     ??Check_1:
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     35          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     36          
     37          ///////////////////////////////////////////////////////////////
     38          //
     39          // Routines for the librarian
     40          //
     41          ///////////////////////////////////////////////////////////////
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          int AlarmLowVoltage::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     44          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   5C90DDE5           LDRB     R9,[SP, #+92]
   \   00000010   60409DE5           LDR      R4,[SP, #+96]
   \   00000014   0170A0E1           MOV      R7,R1
     45          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     46          	if (Locked) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0280A0E1           MOV      R8,R2
   \   0000002C   0360A0E1           MOV      R6,R3
   \   00000030   000050E3           CMP      R0,#+0
     47          		Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A10A013           MOVNE    R1,#+42
   \   00000038   00108D15           STRNE    R1,[SP, #+0]
   \   0000003C   4F00001A           BNE      ??PutValue_2
     48          	} else switch ( ValueId ) {
   \   00000040   3210A0E3           MOV      R1,#+50
   \   00000044   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000048   010057E1           CMP      R7,R1
   \   0000004C   2B00001A           BNE      ??PutValue_3
     49          			case SVT_AL_LIMIT:
     50          				{
     51          					float Value = ConvertToSi(NewValue, ValUnitId=VOLTAGE_UNIT, Status,0.0 ,((AIVoltageSensor*)PROPointer)->Calculate(),0.0);
   \   00000050   C41095E5           LDR      R1,[R5, #+196]
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   A41091E5           LDR      R1,[R1, #+164]
   \   0000005C   601091E5           LDR      R1,[R1, #+96]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   1210A0E3           MOV      R1,#+18
   \   00000070   04108DE5           STR      R1,[SP, #+4]
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   08008DE2           ADD      R0,SP,#+8
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0C019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   003090E5           LDR      R3,[R0, #+0]
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   08008DE2           ADD      R0,SP,#+8
   \   00000098   ........           _BLF     ??assign,??assign??rA
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   0010A0E1           MOV      R1,R0
   \   000000A4   03002DE9           PUSH     {R0,R1}
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000B0   03002DE9           PUSH     {R0,R1}
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   0010A0E1           MOV      R1,R0
   \   000000BC   03002DE9           PUSH     {R0,R1}
   \   000000C0   18208DE2           ADD      R2,SP,#+24
   \   000000C4   20008DE2           ADD      R0,SP,#+32
   \   000000C8   0800BDE8           POP      {R3}
   \   000000CC   1210A0E3           MOV      R1,#+18
   \   000000D0   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000D4   0060A0E1           MOV      R6,R0
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   1C008DE2           ADD      R0,SP,#+28
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     52          					if ( Status== E_NO_ERR ) {
   \   000000E8   14009DE5           LDR      R0,[SP, #+20]
   \   000000EC   14D08DE2           ADD      SP,SP,#+20
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1900001A           BNE      ??PutValue_5
     53          						Limit = Value;
   \   000000F8   E46085E5           STR      R6,[R5, #+228]
   \   000000FC   170000EA           B        ??PutValue_5
     54          					}
     55          				}
     56          				break;
     57          			default:
     58          				Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   24008DE2           ADD      R0,SP,#+36
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000110   80009FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   003090E5           LDR      R3,[R0, #+0]
   \   0000011C   0610A0E1           MOV      R1,R6
   \   00000120   24008DE2           ADD      R0,SP,#+36
   \   00000124   ........           _BLF     ??assign,??assign??rA
   \   00000128   04008DE2           ADD      R0,SP,#+4
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   00022DE9           PUSH     {R9}
   \   00000134   2C308DE2           ADD      R3,SP,#+44
   \   00000138   0820A0E1           MOV      R2,R8
   \   0000013C   0710A0E1           MOV      R1,R7
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000148   08008DE5           STR      R0,[SP, #+8]
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   2C008DE2           ADD      R0,SP,#+44
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000015C   08D08DE2           ADD      SP,SP,#+8
     59          				break;
     60          		}
     61          	if ( Status==E_NO_ERR) {
   \                     ??PutValue_5:
   \   00000160   00009DE5           LDR      R0,[SP, #+0]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0400001A           BNE      ??PutValue_2
     62          		SetModifiedFlag();
   \   0000016C   A41095E5           LDR      R1,[R5, #+164]
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   541091E5           LDR      R1,[R1, #+84]
   \   00000178   0FE0A0E1           MOV      LR,PC
   \   0000017C   11FF2FE1           BX       R1
     63          	}
     64          	if (UnitId) {
   \                     ??PutValue_2:
   \   00000180   000054E3           CMP      R4,#+0
     65          		*UnitId = ValUnitId;
   \   00000184   04009D15           LDRNE    R0,[SP, #+4]
   \   00000188   00008415           STRNE    R0,[R4, #+0]
     66          	}
     67          	return(Status);
   \   0000018C   00009DE5           LDR      R0,[SP, #+0]
   \   00000190   40D08DE2           ADD      SP,SP,#+64
   \   00000194   ........           B        ?Subroutine8
   \                     ??PutValue_4:
   \   00000198   ........           DC32     ??npos
     68          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          int  AlarmLowVoltage::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     71          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C609DE5           LDR      R6,[SP, #+28]
   \   00000008   20709DE5           LDR      R7,[SP, #+32]
   \   0000000C   0350A0E1           MOV      R5,R3
     72          	int Status = GETVAL_NO_ERR;
   \   00000010   0040A0E3           MOV      R4,#+0
     73          	switch ( ValueId ) {
   \   00000014   1280A0E3           MOV      R8,#+18
   \   00000018   0190A0E3           MOV      R9,#+1
   \   0000001C   323041E2           SUB      R3,R1,#+50
   \   00000020   8C3D43E2           SUB      R3,R3,#+8960
   \   00000024   010053E3           CMP      R3,#+1
   \   00000028   0F00008A           BHI      ??GetValue_3
   \   0000002C   01CF8FE2           ADR      R12,??GetValue_1
   \   00000030   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000034   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000038   00050000           DC8      +0,+5,+0,+0
     74          		case SVT_AL_LIMIT:
     75          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   0000003C   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   00000040   000085E5           STR      R0,[R5, #+0]
     76          			DecPnt     = 1;
   \   00000044   009086E5           STR      R9,[R6, #+0]
     77          			Unit       = VOLTAGE_UNIT;
   \   00000048   008087E5           STR      R8,[R7, #+0]
   \   0000004C   0C0000EA           B        ??GetValue_6
     78          			break;
     79          		case SVT_AL_VALUE:
     80          			MyRetValue = ((AIVoltageSensor*)PROPointer)->Calculate();
   \                     ??GetValue_7:
   \   00000050   C41090E5           LDR      R1,[R0, #+196]
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   A41091E5           LDR      R1,[R1, #+164]
   \   0000005C   601091E5           LDR      R1,[R1, #+96]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
   \   00000068   F4FFFFEA           B        ??GetValue_5
     81          			DecPnt     = 1;
     82          			Unit       = VOLTAGE_UNIT;
     83          			break;
     84          		default:
     85          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   0000006C   80002DE9           PUSH     {R7}
   \   00000070   40002DE9           PUSH     {R6}
   \   00000074   0530A0E1           MOV      R3,R5
   \   00000078   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   0000007C   0040A0E1           MOV      R4,R0
   \   00000080   08D08DE2           ADD      SP,SP,#+8
     86          			break;
     87          	}
     88          	return(Status);
   \                     ??GetValue_6:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088                      REQUIRE ?Subroutine8
   \   00000088                      ;; // Fall through to label ?Subroutine8
     89          }
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          int AlarmLowVoltage::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     92          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     93          	int Status = GETVAL_NO_ERR;
     94          	//switch ( ValueId ) {
     95          	//	default:
     96          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     97          	//		break;
     98          	//}
     99          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine9
    100          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          int AlarmLowVoltage::PutFloatValue( int ValueId, float NewValue)
    103          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    104          	int Status= E_NO_ERR;
    105          	//switch ( ValueId ) {
    106          	//   default:
    107          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    108          	//     break;
    109          	//}
    110          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine9
   \   00000008                      ;; // Fall through to label ?Subroutine9
    111          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowVoltage &AlarmLowVoltage::new AlarmLowVoltage(PRogramObjectBase *, float)
   \                     `??new AlarmLowVoltage`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   EC00A0E3           MOV      R0,#+236
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AlarmLowVoltage_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AlarmLowVoltage
   \                     `??new AlarmLowVoltage_1`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    112          
    113          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLowVoltage::AlarmLowVoltage(PRogramObjectBase *, float)
                                       16
     AlarmLowVoltage::Check()          20
     AlarmLowVoltage::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLowVoltage::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLowVoltage::PutFloatValue(int, float)
                                        4
     AlarmLowVoltage::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmLowVoltage::new AlarmLowVoltage(PRogramObjectBase *, float)
                                       12
     AlarmLowVoltage::~AlarmLowVoltage()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLowVoltage::~AlarmLowVoltage()
                                      56
     AlarmLowVoltage::NumberOfAlarmSettings
                                       4
     AlarmLowVoltage::AlarmLowVoltage(PRogramObjectBase *, float)
                                     140
     AlarmLowVoltage::Check()        116
     AlarmLowVoltage::PutValue(int, int, AnsiString, bool, int *)
                                     412
     ?Subroutine8                      8
     AlarmLowVoltage::GetValue(int, int, float &, int &, int &)
                                     136
     AlarmLowVoltage::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine9                      8
     AlarmLowVoltage::PutFloatValue(int, float)
                                       8
     AlarmLowVoltage::new AlarmLowVoltage(PRogramObjectBase *, float)
                                      48
     __sti__routine()                  4
      Others                         356

 
 1 172 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 896 bytes of CODE  memory (+ 292 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
