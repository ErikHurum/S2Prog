##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:17:21 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\SCADCard.cpp                    #
#    Command line    =  D:\S2Prog\Shared\Src\SCADCard.cpp --fpu None -D      #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\SCADCard.lst                #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\SCADCard.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\SCADCard.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_I, align 4, align-sorted
      9          ValueList SCADCard::SCAdCardValueList[] = {
   \                     ??SCAdCardValueList:
   \   00000000                      DS8 108
   \   0000006C                      REQUIRE `?<Initializer for SCAdCardValueList>`
     10              { L_WORD304, L_WORD237, SVT_BLANK },                               //   {"Unused"       ,"",SVT_BLANK},
     11              { L_WORD24, L_WORD237, SVT_IO_PROG_VERSION },                     //   {"ProgVersion"  ,"",SVT_IO_PROG_VERSION},
     12              { L_WORD390, L_WORD237, SVT_IO_SERIAL_NUMBER },                    //   {"Serial Number","",SVT_IO_SERIAL_NUMBER},
     13              { L_WORD126, L_WORD237, SVT_IO_CAL_GAIN },                         //   {"Gain"         ,"",SVT_IO_CAL_GAIN},
     14              { L_WORD384, L_WORD237, SVT_IO_RESET_STATUS },                     //   {"Reset Status" ,"",SVT_IO_RESET_STATUS},
     15              { L_WORD391, L_WORD237, SVT_IO_UNIT_STATUS },                      //   {"Unit status"  ,"",SVT_IO_UNIT_STATUS},
     16              { L_WORD392, L_WORD237, SVT_IO_CARD_STATUS },                      //   {"Card status"  ,"",SVT_IO_CARD_STATUS},
     17              { L_WORD386, L_WORD237, SVT_IO_FAIL_CNT_CHK },                     //   {"Fail cnt chk" ,"",SVT_IO_FAIL_CNT_CHK},
     18              { L_WORD387, L_WORD237, SVT_IO_FAIL_CNT_TOT },                     //   {"Fail cnt tot" ,"",SVT_IO_FAIL_CNT_TOT},
     19          };
     20          
     21          #define SGCNV_DEFAULT_FILTER 2
     22          

   \                                 In segment DATA_C, align 4, align-sorted
     23          const int SCADCard::EEPromInfo[4] = { L_WORD486, L_WORD161, L_WORD487, L_WORD488 }; //" None","OK","Err","NoUs"
   \                     ??EEPromInfo:
   \   00000000   E6010000A100       DC32 486, 161, 487, 488
   \              0000E7010000
   \              E8010000    
     24          const int SCADCard::ADSensorType[AD_SNS_TYPES] = { L_WORD485, L_WORD338, L_WORD489, L_WORD490 }; //"Unknown","Temp","Other","Press"
   \                     ??ADSensorType:
   \   00000010   E50100005201       DC32 485, 338, 489, 490
   \              0000E9010000
   \              EA010000    
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          SCADCard::SCADCard(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr, IOUnit *IOModulePtr) : SignalConverter(IOCompPtr, ElementPtr, IOModulePtr) {
   \                     ??SCADCard:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   04749FE5           LDR      R7,??SCADCard_1+0x8  ;; ??__vtbl
   \   00000008   C4D04DE2           SUB      SP,SP,#+196
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   ........           _BLF     ??SignalConverter,??SignalConverter??rA
     27              IDNumber = (C_SC_ADCARD << 16) + ObjectSet.size();
   \   00000018   F4039FE5           LDR      R0,??SCADCard_1+0xC  ;; ??ObjectSet + 16
   \   0000001C   9C6084E2           ADD      R6,R4,#+156
   \   00000020   087086E5           STR      R7,[R6, #+8]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   8016A0E3           MOV      R1,#+134217728
   \   0000002C   841981E3           ORR      R1,R1,#0x210000
   \   00000030   000081E0           ADD      R0,R1,R0
   \   00000034   000086E5           STR      R0,[R6, #+0]
     28              Type = C_SC_ADCARD;
   \   00000038   2108A0E1           MOV      R0,R1, LSR #+16
   \   0000003C   040086E5           STR      R0,[R6, #+4]
     29              IsFirstTime = true;
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   B401C6E5           STRB     R0,[R6, #+436]
     30              RxBufSize = 0;
   \   00000048   0080A0E3           MOV      R8,#+0
   \   0000004C   3D82C6E5           STRB     R8,[R6, #+573]
     31              TxBufSize = 0;
   \   00000050   3E82C6E5           STRB     R8,[R6, #+574]
   \   00000054   B70F84E2           ADD      R0,R4,#+732
   \   00000058   B080C0E1           STRH     R8,[R0, #+0]
     32              CalNull = 0;
     33              EEPromGain = 1.0;
   \   0000005C   FE15A0E3           MOV      R1,#+1065353216
   \   00000060   041080E5           STR      R1,[R0, #+4]
     34              RequestADConfig = 2;
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   AC0186E5           STR      R0,[R6, #+428]
     35              RequestRawCnt = 0;
   \   0000006C   B08186E5           STR      R8,[R6, #+432]
     36              hasForcedPressureSensor = false;
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   F411C6E5           STRB     R1,[R6, #+500]
     37              HasPressureSensor = false;
   \   00000078   3B12C6E5           STRB     R1,[R6, #+571]
     38              FilterDegreeOther = SGCNV_DEFAULT_FILTER;
   \   0000007C   3C02C6E5           STRB     R0,[R6, #+572]
     39              memset((void *)&ADConfigData, 0, sizeof(ADConfigData));
   \   00000080   3820A0E3           MOV      R2,#+56
   \   00000084   9100A0E3           MOV      R0,#+145
   \   00000088   800F80E3           ORR      R0,R0,#0x200
   \   0000008C   040080E0           ADD      R0,R0,R4
   \   00000090   ........           _BLF     memset,??memset??rA
     40              for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000094   0800A0E1           MOV      R0,R8
     41                  ADConfigData[i].CalError = false;
   \                     ??SCADCard_2:
   \   00000098   001184E0           ADD      R1,R4,R0, LSL #+2
   \   0000009C   9422D1E5           LDRB     R2,[R1, #+660]
   \   000000A0   9332D1E5           LDRB     R3,[R1, #+659]
     42                  ADConfigData[i].ConvError = false;
     43                  ADConfigData[i].PCSensor = 0;
     44                  ADConfigData[i].UsePCSetUp = false;
     45                  ADConfigData[i].FoundSensor = 0;
     46                  ADConfigData[i].NewSensor = false;
     47                  ADConfigData[i].EEP_PCStatus = 0;
     48                  ADConfigData[i].EEPUsePCData = false;
     49                  ADConfigData[i].EEPromStatus = AD_EEPROM_OK;
     50              }
   \   000000A4   010080E2           ADD      R0,R0,#+1
   \   000000A8   0E0050E3           CMP      R0,#+14
   \   000000AC   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000B0   9232D1E5           LDRB     R3,[R1, #+658]
   \   000000B4   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000B8   9132D1E5           LDRB     R3,[R1, #+657]
   \   000000BC   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000C0   0220C2E3           BIC      R2,R2,#0x2
   \   000000C4   9122C1E5           STRB     R2,[R1, #+657]
   \   000000C8   2224A0E1           LSR      R2,R2,#+8
   \   000000CC   9222C1E5           STRB     R2,[R1, #+658]
   \   000000D0   2224A0E1           LSR      R2,R2,#+8
   \   000000D4   9322C1E5           STRB     R2,[R1, #+659]
   \   000000D8   2224A0E1           LSR      R2,R2,#+8
   \   000000DC   9422C1E5           STRB     R2,[R1, #+660]
   \   000000E0   9422D1E5           LDRB     R2,[R1, #+660]
   \   000000E4   9332D1E5           LDRB     R3,[R1, #+659]
   \   000000E8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000EC   9232D1E5           LDRB     R3,[R1, #+658]
   \   000000F0   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000F4   9132D1E5           LDRB     R3,[R1, #+657]
   \   000000F8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000FC   0120C2E3           BIC      R2,R2,#0x1
   \   00000100   9122C1E5           STRB     R2,[R1, #+657]
   \   00000104   2224A0E1           LSR      R2,R2,#+8
   \   00000108   9222C1E5           STRB     R2,[R1, #+658]
   \   0000010C   2224A0E1           LSR      R2,R2,#+8
   \   00000110   9322C1E5           STRB     R2,[R1, #+659]
   \   00000114   2224A0E1           LSR      R2,R2,#+8
   \   00000118   9422C1E5           STRB     R2,[R1, #+660]
   \   0000011C   9422D1E5           LDRB     R2,[R1, #+660]
   \   00000120   9332D1E5           LDRB     R3,[R1, #+659]
   \   00000124   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000128   9232D1E5           LDRB     R3,[R1, #+658]
   \   0000012C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000130   9132D1E5           LDRB     R3,[R1, #+657]
   \   00000134   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000138   0C20C2E3           BIC      R2,R2,#0xC
   \   0000013C   9122C1E5           STRB     R2,[R1, #+657]
   \   00000140   2224A0E1           LSR      R2,R2,#+8
   \   00000144   9222C1E5           STRB     R2,[R1, #+658]
   \   00000148   2224A0E1           LSR      R2,R2,#+8
   \   0000014C   9322C1E5           STRB     R2,[R1, #+659]
   \   00000150   2224A0E1           LSR      R2,R2,#+8
   \   00000154   9422C1E5           STRB     R2,[R1, #+660]
   \   00000158   9422D1E5           LDRB     R2,[R1, #+660]
   \   0000015C   9332D1E5           LDRB     R3,[R1, #+659]
   \   00000160   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000164   9232D1E5           LDRB     R3,[R1, #+658]
   \   00000168   022483E1           ORR      R2,R3,R2, LSL #+8
   \   0000016C   9132D1E5           LDRB     R3,[R1, #+657]
   \   00000170   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000174   1020C2E3           BIC      R2,R2,#0x10
   \   00000178   9122C1E5           STRB     R2,[R1, #+657]
   \   0000017C   2224A0E1           LSR      R2,R2,#+8
   \   00000180   9222C1E5           STRB     R2,[R1, #+658]
   \   00000184   2224A0E1           LSR      R2,R2,#+8
   \   00000188   9322C1E5           STRB     R2,[R1, #+659]
   \   0000018C   2224A0E1           LSR      R2,R2,#+8
   \   00000190   9422C1E5           STRB     R2,[R1, #+660]
   \   00000194   9422D1E5           LDRB     R2,[R1, #+660]
   \   00000198   9332D1E5           LDRB     R3,[R1, #+659]
   \   0000019C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001A0   9232D1E5           LDRB     R3,[R1, #+658]
   \   000001A4   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001A8   9132D1E5           LDRB     R3,[R1, #+657]
   \   000001AC   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001B0   6020C2E3           BIC      R2,R2,#0x60
   \   000001B4   9122C1E5           STRB     R2,[R1, #+657]
   \   000001B8   2224A0E1           LSR      R2,R2,#+8
   \   000001BC   9222C1E5           STRB     R2,[R1, #+658]
   \   000001C0   2224A0E1           LSR      R2,R2,#+8
   \   000001C4   9322C1E5           STRB     R2,[R1, #+659]
   \   000001C8   2224A0E1           LSR      R2,R2,#+8
   \   000001CC   9422C1E5           STRB     R2,[R1, #+660]
   \   000001D0   9422D1E5           LDRB     R2,[R1, #+660]
   \   000001D4   9332D1E5           LDRB     R3,[R1, #+659]
   \   000001D8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001DC   9232D1E5           LDRB     R3,[R1, #+658]
   \   000001E0   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001E4   9132D1E5           LDRB     R3,[R1, #+657]
   \   000001E8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001EC   8020C2E3           BIC      R2,R2,#0x80
   \   000001F0   9122C1E5           STRB     R2,[R1, #+657]
   \   000001F4   2224A0E1           LSR      R2,R2,#+8
   \   000001F8   9222C1E5           STRB     R2,[R1, #+658]
   \   000001FC   2224A0E1           LSR      R2,R2,#+8
   \   00000200   9322C1E5           STRB     R2,[R1, #+659]
   \   00000204   2224A0E1           LSR      R2,R2,#+8
   \   00000208   9422C1E5           STRB     R2,[R1, #+660]
   \   0000020C   9422D1E5           LDRB     R2,[R1, #+660]
   \   00000210   9332D1E5           LDRB     R3,[R1, #+659]
   \   00000214   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000218   9232D1E5           LDRB     R3,[R1, #+658]
   \   0000021C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000220   9132D1E5           LDRB     R3,[R1, #+657]
   \   00000224   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000228   702EC2E3           BIC      R2,R2,#0x700
   \   0000022C   9122C1E5           STRB     R2,[R1, #+657]
   \   00000230   2224A0E1           LSR      R2,R2,#+8
   \   00000234   9222C1E5           STRB     R2,[R1, #+658]
   \   00000238   2224A0E1           LSR      R2,R2,#+8
   \   0000023C   9322C1E5           STRB     R2,[R1, #+659]
   \   00000240   2224A0E1           LSR      R2,R2,#+8
   \   00000244   9422C1E5           STRB     R2,[R1, #+660]
   \   00000248   9422D1E5           LDRB     R2,[R1, #+660]
   \   0000024C   9332D1E5           LDRB     R3,[R1, #+659]
   \   00000250   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000254   9232D1E5           LDRB     R3,[R1, #+658]
   \   00000258   022483E1           ORR      R2,R3,R2, LSL #+8
   \   0000025C   9132D1E5           LDRB     R3,[R1, #+657]
   \   00000260   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000264   802EC2E3           BIC      R2,R2,#0x800
   \   00000268   9122C1E5           STRB     R2,[R1, #+657]
   \   0000026C   2224A0E1           LSR      R2,R2,#+8
   \   00000270   9222C1E5           STRB     R2,[R1, #+658]
   \   00000274   2224A0E1           LSR      R2,R2,#+8
   \   00000278   9322C1E5           STRB     R2,[R1, #+659]
   \   0000027C   2224A0E1           LSR      R2,R2,#+8
   \   00000280   9422C1E5           STRB     R2,[R1, #+660]
   \   00000284   9422D1E5           LDRB     R2,[R1, #+660]
   \   00000288   9332D1E5           LDRB     R3,[R1, #+659]
   \   0000028C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000290   9232D1E5           LDRB     R3,[R1, #+658]
   \   00000294   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000298   9132D1E5           LDRB     R3,[R1, #+657]
   \   0000029C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000002A0   F02CC2E3           BIC      R2,R2,#0xF000
   \   000002A4   402D82E3           ORR      R2,R2,#0x1000
   \   000002A8   9122C1E5           STRB     R2,[R1, #+657]
   \   000002AC   2224A0E1           LSR      R2,R2,#+8
   \   000002B0   9222C1E5           STRB     R2,[R1, #+658]
   \   000002B4   2224A0E1           LSR      R2,R2,#+8
   \   000002B8   9322C1E5           STRB     R2,[R1, #+659]
   \   000002BC   2224A0E1           LSR      R2,R2,#+8
   \   000002C0   9422C1E5           STRB     R2,[R1, #+660]
   \   000002C4   73FFFFBA           BLT      ??SCADCard_2
     51              for ( int i = 0; i < MAX_WASHTRACK_CHANNELS; i++ ) {
   \   000002C8   0000A0E3           MOV      R0,#+0
   \   000002CC   0020A0E1           MOV      R2,R0
     52                  IOComponentWT[i] = NULL;
   \                     ??SCADCard_3:
   \   000002D0   001184E0           ADD      R1,R4,R0, LSL #+2
   \   000002D4   E48281E5           STR      R8,[R1, #+740]
     53                  WashTrackCnt[i] = 0;
   \   000002D8   688281E5           STR      R8,[R1, #+616]
     54                  WashTrackNoMoveCnt[i] = 0;
   \   000002DC   588281E5           STR      R8,[R1, #+600]
     55                  WashTrackSpeed[i] = 0.0;
   \   000002E0   782281E5           STR      R2,[R1, #+632]
     56              }
   \   000002E4   010080E2           ADD      R0,R0,#+1
   \   000002E8   040050E3           CMP      R0,#+4
   \   000002EC   F7FFFFBA           BLT      ??SCADCard_3
     57              for ( int i = 0; i < MAX_LEVEL_SWITCH_CHANNELS; i++ ) {
   \   000002F0   0000A0E3           MOV      R0,#+0
     58                  LevelSwitch[i] = 0;
   \                     ??SCADCard_4:
   \   000002F4   041080E0           ADD      R1,R0,R4
   \   000002F8   8822C1E5           STRB     R2,[R1, #+648]
     59              }
   \   000002FC   010080E2           ADD      R0,R0,#+1
   \   00000300   080050E3           CMP      R0,#+8
   \   00000304   FAFFFFBA           BLT      ??SCADCard_4
     60          
     61              Name = "ADCard[" + (AnsiString)IOModulePtr->IOAddress + ":" + (AnsiString)(IOChannel + 1) + "]";
   \   00000308   E00096E5           LDR      R0,[R6, #+224]
   \   0000030C   011080E2           ADD      R1,R0,#+1
   \   00000310   A8008DE2           ADD      R0,SP,#+168
   \   00000314   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000318   A01195E5           LDR      R1,[R5, #+416]
   \   0000031C   0060A0E1           MOV      R6,R0
   \   00000320   8C008DE2           ADD      R0,SP,#+140
   \   00000324   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000328   0020A0E1           MOV      R2,R0
   \   0000032C   941087E2           ADD      R1,R7,#+148
   \   00000330   54008DE2           ADD      R0,SP,#+84
   \   00000334   ........           _BLF     `??operator+_1`,`??operator+??rA`
   \   00000338   322F8FE2           ADR      R2,??SCADCard_1  ;; ":"
   \   0000033C   54108DE2           ADD      R1,SP,#+84
   \   00000340   38008DE2           ADD      R0,SP,#+56
   \   00000344   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   00000348   0620A0E1           MOV      R2,R6
   \   0000034C   38108DE2           ADD      R1,SP,#+56
   \   00000350   1C008DE2           ADD      R0,SP,#+28
   \   00000354   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   00000358   2B2F8FE2           ADR      R2,??SCADCard_1+0x4  ;; "]"
   \   0000035C   1C108DE2           ADD      R1,SP,#+28
   \   00000360   0D00A0E1           MOV      R0,SP
   \   00000364   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   00000368   0D10A0E1           MOV      R1,SP
   \   0000036C   70008DE2           ADD      R0,SP,#+112
   \   00000370   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000374   ........           LDR      R1,??DataTable12  ;; ??npos
   \   00000378   0020A0E3           MOV      R2,#+0
   \   0000037C   003091E5           LDR      R3,[R1, #+0]
   \   00000380   0010A0E1           MOV      R1,R0
   \   00000384   440084E2           ADD      R0,R4,#+68
   \   00000388   ........           _BLF     ??assign,??assign??rA
   \   0000038C   0820A0E1           MOV      R2,R8
   \   00000390   0110A0E3           MOV      R1,#+1
   \   00000394   70008DE2           ADD      R0,SP,#+112
   \   00000398   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000039C   0820A0E1           MOV      R2,R8
   \   000003A0   0110A0E3           MOV      R1,#+1
   \   000003A4   0D00A0E1           MOV      R0,SP
   \   000003A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003AC   0820A0E1           MOV      R2,R8
   \   000003B0   0110A0E3           MOV      R1,#+1
   \   000003B4   1C008DE2           ADD      R0,SP,#+28
   \   000003B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003BC   0820A0E1           MOV      R2,R8
   \   000003C0   0110A0E3           MOV      R1,#+1
   \   000003C4   A8008DE2           ADD      R0,SP,#+168
   \   000003C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003CC   0820A0E1           MOV      R2,R8
   \   000003D0   0110A0E3           MOV      R1,#+1
   \   000003D4   38008DE2           ADD      R0,SP,#+56
   \   000003D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003DC   0820A0E1           MOV      R2,R8
   \   000003E0   0110A0E3           MOV      R1,#+1
   \   000003E4   54008DE2           ADD      R0,SP,#+84
   \   000003E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003EC   0820A0E1           MOV      R2,R8
   \   000003F0   0110A0E3           MOV      R1,#+1
   \   000003F4   8C008DE2           ADD      R0,SP,#+140
   \   000003F8   ........           _BLF     ??_Tidy,??_Tidy??rA
     62          }
   \   000003FC   0400A0E1           MOV      R0,R4
   \   00000400   C4D08DE2           ADD      SP,SP,#+196
   \   00000404   ........           B        ?Subroutine27
   \                     ??SCADCard_1:
   \   00000408   3A000000           DC8      ":",+0,+0
   \   0000040C   5D000000           DC8      "]",+0,+0
   \   00000410   ........           DC32     ??__vtbl
   \   00000414   ........           DC32     ??ObjectSet + 16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          SCADCard::~SCADCard(void) {
   \                     `?~SCADCard`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~SCADCard_1`
     65          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~SignalConverter`,`?~SignalConverter??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~SCADCard_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~SCADCard_1`:
   \   0000002C   ........           B        ?Subroutine28

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     66          //---------------------------------------------------------------------------
     67          
     68          
     69          
     70          ///////////////////////////////////////////////////////////////
     71          //
     72          // Routines for the librarian
     73          //
     74          ///////////////////////////////////////////////////////////////
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          int SCADCard::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
     77              int Status = GETVAL_NO_ERR;
     78              switch ( ValueId ) {
   \   00000004   00A09DE5           LDR      R10,[SP, #+0]
   \   00000008   28509DE5           LDR      R5,[SP, #+40]
   \   0000000C   2C609DE5           LDR      R6,[SP, #+44]
   \   00000010   0340A0E1           MOV      R4,R3
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   821080E0           ADD      R1,R0,R2, LSL #+1
   \   0000001C   841F81E2           ADD      R1,R1,#+528
   \   00000020   023180E0           ADD      R3,R0,R2, LSL #+2
   \   00000024   B7CF80E2           ADD      R12,R0,#+732
   \   00000028   56EF80E2           ADD      LR,R0,#+344
   \   0000002C   769FA0E3           MOV      R9,#+472
   \   00000030   0080A0E3           MOV      R8,#+0
   \   00000034   B6B0A0E3           MOV      R11,#+182
   \   00000038   40BE8BE3           ORR      R11,R11,#0x400
   \   0000003C   0B005AE1           CMP      R10,R11
   \   00000040   4200000A           BEQ      ??GetValue_2
   \   00000044   01B08BE3           ORR      R11,R11,#0x1
   \   00000048   0B005AE1           CMP      R10,R11
   \   0000004C   2100000A           BEQ      ??GetValue_3
   \   00000050   B8BF89E2           ADD      R11,R9,#+736
   \   00000054   0B005AE1           CMP      R10,R11
   \   00000058   2900000A           BEQ      ??GetValue_4
   \   0000005C   01B08BE3           ORR      R11,R11,#0x1
   \   00000060   0B005AE1           CMP      R10,R11
   \   00000064   2E00000A           BEQ      ??GetValue_5
   \   00000068   36B08BE2           ADD      R11,R11,#+54
   \   0000006C   0B005AE1           CMP      R10,R11
   \   00000070   4200000A           BEQ      ??GetValue_6
   \   00000074   4F0E5AE3           CMP      R10,#+1264
   \   00000078   3900000A           BEQ      ??GetValue_7
   \   0000007C   02B08BE2           ADD      R11,R11,#+2
   \   00000080   0B005AE1           CMP      R10,R11
   \   00000084   2A00000A           BEQ      ??GetValue_8
   \   00000088   99B0A0E3           MOV      R11,#+153
   \   0000008C   44BD8BE3           ORR      R11,R11,#0x1100
   \   00000090   0B005AE1           CMP      R10,R11
   \   00000094   3D00000A           BEQ      ??GetValue_9
   \   00000098   01B08BE2           ADD      R11,R11,#+1
   \   0000009C   0B005AE1           CMP      R10,R11
   \   000000A0   4000000A           BEQ      ??GetValue_10
   \   000000A4   01B08BE3           ORR      R11,R11,#0x1
   \   000000A8   0B005AE1           CMP      R10,R11
   \   000000AC   4700000A           BEQ      ??GetValue_11
   \   000000B0   03B08BE2           ADD      R11,R11,#+3
   \   000000B4   0B005AE1           CMP      R10,R11
   \   000000B8   4600000A           BEQ      ??GetValue_12
   \   000000BC   8DB08BE2           ADD      R11,R11,#+141
   \   000000C0   0B005AE1           CMP      R10,R11
   \   000000C4   3900000A           BEQ      ??GetValue_13
   \   000000C8   01B08BE2           ADD      R11,R11,#+1
   \   000000CC   0B005AE1           CMP      R10,R11
   \   000000D0   3900000A           BEQ      ??GetValue_14
   \   000000D4   4D0000EA           B        ??GetValue_15
     79              case SVT_IO_CH_WT_SPEED :
     80                  if ( Index < MAX_WASHTRACK_CHANNELS ) {
   \                     ??GetValue_3:
   \   000000D8   040052E3           CMP      R2,#+4
   \   000000DC   060000AA           BGE      ??GetValue_16
     81                      MyRetValue = WashTrackSpeed[Index];
   \   000000E0   780293E5           LDR      R0,[R3, #+632]
   \   000000E4   000084E5           STR      R0,[R4, #+0]
     82                      DecPnt = 1;
   \   000000E8   0100A0E3           MOV      R0,#+1
   \   000000EC   000085E5           STR      R0,[R5, #+0]
     83                      Unit = REVOLUTIONS_UNIT;
   \   000000F0   1B00A0E3           MOV      R0,#+27
   \   000000F4   000086E5           STR      R0,[R6, #+0]
   \   000000F8   4B0000EA           B        ??GetValue_17
     84                  } else {
     85                      Status = GETVAL_ERROR;
   \                     ??GetValue_16:
   \   000000FC   0470A0E3           MOV      R7,#+4
   \   00000100   490000EA           B        ??GetValue_17
     86                  }
     87                  break;
     88              case SVT_IO_CH_WT_COUNT :
     89                  if ( Index < MAX_WASHTRACK_CHANNELS ) {
   \                     ??GetValue_4:
   \   00000104   040052E3           CMP      R2,#+4
   \   00000108   FBFFFFAA           BGE      ??GetValue_16
     90                      MyRetValue = WashTrackCnt[Index];
   \   0000010C   680293E5           LDR      R0,[R3, #+616]
   \                     ??GetValue_18:
   \   00000110   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \                     ??GetValue_19:
   \   00000114   000084E5           STR      R0,[R4, #+0]
     91                      DecPnt = 0;
   \   00000118   008085E5           STR      R8,[R5, #+0]
     92                      Unit = NO_UNIT;
   \                     ??GetValue_20:
   \   0000011C   008086E5           STR      R8,[R6, #+0]
   \   00000120   410000EA           B        ??GetValue_17
     93                  } else {
     94                      Status = GETVAL_ERROR;
     95                  }
     96                  break;
     97              case SVT_IO_CH_LEVEL_SWITCH  :
     98                  if ( Index < MAX_LEVEL_SWITCH_CHANNELS ) {
   \                     ??GetValue_5:
   \   00000124   080052E3           CMP      R2,#+8
   \   00000128   F3FFFFAA           BGE      ??GetValue_16
     99                      MyRetValue = MsrdValues[Index];
   \   0000012C   030099E7           LDR      R0,[R9, +R3]
   \   00000130   F7FFFFEA           B        ??GetValue_19
    100                      DecPnt = 0;
    101                      Unit = NO_UNIT;
    102                  } else {
    103                      Status = GETVAL_ERROR;
    104                  }
    105                  break;
    106              case SVT_IO_CH_VALUE :
    107                  if ( Index < MAX_AN_SGCNV_CHANNELS ) {
   \                     ??GetValue_8:
   \   00000134   0E0052E3           CMP      R2,#+14
   \   00000138   EFFFFFAA           BGE      ??GetValue_16
    108                      MyRetValue = MsrdValues[Index];
   \   0000013C   030099E7           LDR      R0,[R9, +R3]
   \   00000140   000084E5           STR      R0,[R4, #+0]
    109                      DecPnt = 3;
   \   00000144   0300A0E3           MOV      R0,#+3
   \   00000148   000085E5           STR      R0,[R5, #+0]
    110                      Unit = NO_UNIT;
   \                     ??GetValue_21:
   \   0000014C   F2FFFFEA           B        ??GetValue_20
    111                  } else {
    112                      Status = GETVAL_ERROR;
    113                  }
    114                  break;
    115              case SVT_IO_CH_STATUS :
    116                  if ( Index < MAX_AN_SGCNV_CHANNELS ) {
   \                     ??GetValue_2:
   \   00000150   0E0052E3           CMP      R2,#+14
   \   00000154   E8FFFFAA           BGE      ??GetValue_16
    117                      MyRetValue = *((U16 *)&ADConfigData[Index]);
   \   00000158   B90089E2           ADD      R0,R9,#+185
   \   0000015C   B30090E1           LDRH     R0,[R0, +R3]
   \   00000160   EAFFFFEA           B        ??GetValue_18
    118                      DecPnt = 0;
    119                      Unit = NO_UNIT;
    120                  } else {
    121                      Status = GETVAL_ERROR;
    122                  }
    123                  break;
    124              case SVT_IO_CH_CAL_VAL :
    125                  if ( Index < MAX_AN_SGCNV_CHANNELS ) {
   \                     ??GetValue_7:
   \   00000164   0E0052E3           CMP      R2,#+14
   \   00000168   E3FFFFAA           BGE      ??GetValue_16
    126                      MyRetValue = CalValues[Index];
   \   0000016C   B000D1E1           LDRH     R0,[R1, #+0]
   \   00000170   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \                     ??GetValue_22:
   \   00000174   000084E5           STR      R0,[R4, #+0]
    127                      DecPnt = 0;
   \   00000178   008085E5           STR      R8,[R5, #+0]
    128                      Unit = NO_UNIT;
   \   0000017C   E6FFFFEA           B        ??GetValue_20
    129                  } else {
    130                      Status = GETVAL_ERROR;
    131                  }
    132                  break;
    133              case SVT_IO_CH_RAW_VAL :
    134                  if ( Index < MAX_AN_SGCNV_CHANNELS ) {
   \                     ??GetValue_6:
   \   00000180   0E0052E3           CMP      R2,#+14
   \   00000184   DCFFFFAA           BGE      ??GetValue_16
    135                      MyRetValue = RawValues[Index];
   \   00000188   BC01D1E1           LDRH     R0,[R1, #+28]
   \   0000018C   DFFFFFEA           B        ??GetValue_18
    136                      DecPnt = 0;
    137                      Unit = NO_UNIT;
    138                  } else {
    139                      Status = GETVAL_ERROR;
    140                  }
    141                  break;
    142              case SVT_IO_RXBUF_SIZE:
    143                  MyRetValue = RxBufSize;
   \                     ??GetValue_9:
   \   00000190   8101DEE5           LDRB     R0,[LR, #+385]
   \                     ??GetValue_23:
   \   00000194   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000198   000084E5           STR      R0,[R4, #+0]
    144                  DecPnt = 0;
   \   0000019C   008085E5           STR      R8,[R5, #+0]
    145                  Unit = NO_UNIT;
   \   000001A0   008086E5           STR      R8,[R6, #+0]
   \   000001A4   200000EA           B        ??GetValue_17
    146                  break;
    147              case SVT_IO_TXBUF_SIZE:
    148                  MyRetValue = TxBufSize;
   \                     ??GetValue_10:
   \   000001A8   8201DEE5           LDRB     R0,[LR, #+386]
   \   000001AC   D7FFFFEA           B        ??GetValue_18
    149                  DecPnt = 0;
    150                  Unit = NO_UNIT;
    151                  break;
    152              case SVT_IO_CAL_NULL:
    153                  MyRetValue = CalNull;
   \                     ??GetValue_13:
   \   000001B0   F000DCE1           LDRSH    R0,[R12, #+0]
   \   000001B4   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000001B8   EDFFFFEA           B        ??GetValue_22
    154                  DecPnt = 0;
    155                  Unit = NO_UNIT;
    156                  break;
    157              case SVT_IO_CAL_GAIN:
    158                  MyRetValue = EEPromGain;
   \                     ??GetValue_14:
   \   000001BC   04009CE5           LDR      R0,[R12, #+4]
   \   000001C0   000084E5           STR      R0,[R4, #+0]
    159                  DecPnt = 6;
   \   000001C4   0600A0E3           MOV      R0,#+6
   \   000001C8   000085E5           STR      R0,[R5, #+0]
    160                  Unit = NO_UNIT;
   \   000001CC   D2FFFFEA           B        ??GetValue_20
    161                  break;
    162              case SVT_IO_RESET_STATUS:
    163                  MyRetValue = Restart;
   \                     ??GetValue_11:
   \   000001D0   0000DEE5           LDRB     R0,[LR, #+0]
   \   000001D4   EEFFFFEA           B        ??GetValue_23
    164                  DecPnt = 0;
    165                  Unit = NO_UNIT;
    166                  break;
    167              case SVT_IO_NEW_SENSOR:
    168                  {
    169                      bool NSns = false;
   \                     ??GetValue_12:
   \   000001D8   0010A0E3           MOV      R1,#+0
    170                      for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   000001DC   0120A0E1           MOV      R2,R1
    171                          NSns |= ADConfigData[i].NewSensor;
   \                     ??GetValue_24:
   \   000001E0   000051E3           CMP      R1,#+0
   \   000001E4   02118000           ADDEQ    R1,R0,R2, LSL #+2
   \   000001E8   9112D105           LDRBEQ   R1,[R1, #+657]
    172                      }
   \   000001EC   012082E2           ADD      R2,R2,#+1
   \   000001F0   80001103           TSTEQ    R1,#0x80
   \   000001F4   0110A013           MOVNE    R1,#+1
   \   000001F8   0010A003           MOVEQ    R1,#+0
   \   000001FC   0E0052E3           CMP      R2,#+14
   \   00000200   F6FFFFBA           BLT      ??GetValue_24
    173                      MyRetValue = (float)NSns;
   \   00000204   0100A0E1           MOV      R0,R1
   \   00000208   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000020C   C0FFFFEA           B        ??GetValue_19
    174                  }
    175                  DecPnt = 0;
    176                  Unit = NO_UNIT;
    177                  break;
    178              default:
    179                  Status = SignalConverter::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_15:
   \   00000210   40002DE9           PUSH     {R6}
   \   00000214   20002DE9           PUSH     {R5}
   \   00000218   0430A0E1           MOV      R3,R4
   \   0000021C   0A10A0E1           MOV      R1,R10
   \   00000220   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000224   0070A0E1           MOV      R7,R0
   \   00000228   08D08DE2           ADD      SP,SP,#+8
    180                  break;
    181              }
    182              return (Status);
   \                     ??GetValue_17:
   \   0000022C   0700A0E1           MOV      R0,R7
   \   00000230   F24FBDE8           POP      {R1,R4-R11,LR}
   \   00000234   1EFF2FE1           BX       LR               ;; return
    183          }
    184          

   \                                 In segment CODE, align 4, keep-with-next
    185          int SCADCard::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00C0A0E1           MOV      R12,R0
    186              int Status = GETVAL_NO_ERR;
    187              switch ( ValueId ) {
   \   00000004   B4049FE5           LDR      R0,??GetStringValue_2  ;; SizeofStatusText
   \   00000008   F0452DE9           PUSH     {R4-R8,R10,LR}
   \   0000000C   B0E49FE5           LDR      LR,??GetStringValue_2+0x4  ;; ??EEPromInfo
   \   00000010   46DF4DE2           SUB      SP,SP,#+280
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   A8149FE5           LDR      R1,??GetStringValue_2+0x8  ;; StatusText
   \   0000001C   0250A0E1           MOV      R5,R2
   \   00000020   002090E5           LDR      R2,[R0, #+0]
   \   00000024   0370A0E1           MOV      R7,R3
   \   00000028   0060A0E3           MOV      R6,#+0
   \   0000002C   05318CE0           ADD      R3,R12,R5, LSL #+2
   \   00000030   E40F8FE2           ADR      R0,??GetStringValue_3  ;; ""
   \   00000034   688FA0E3           MOV      R8,#+416
   \   00000038   D3AF88E2           ADD      R10,R8,#+844
   \   0000003C   0A0054E1           CMP      R4,R10
   \   00000040   2500000A           BEQ      ??GetStringValue_4
   \   00000044   01A08AE3           ORR      R10,R10,#0x1
   \   00000048   0A0054E1           CMP      R4,R10
   \   0000004C   3C00000A           BEQ      ??GetStringValue_5
   \   00000050   01A08AE2           ADD      R10,R10,#+1
   \   00000054   0A0054E1           CMP      R4,R10
   \   00000058   4B00000A           BEQ      ??GetStringValue_6
   \   0000005C   02A0A0E3           MOV      R10,#+2
   \   00000060   48AD8AE3           ORR      R10,R10,#0x1200
   \   00000064   0A0054E1           CMP      R4,R10
   \   00000068   5300000A           BEQ      ??GetStringValue_7
   \   0000006C   01A08AE3           ORR      R10,R10,#0x1
   \   00000070   0A0054E1           CMP      R4,R10
   \   00000074   7B00000A           BEQ      ??GetStringValue_8
   \   00000078   01A08AE2           ADD      R10,R10,#+1
   \   0000007C   0A0054E1           CMP      R4,R10
   \   00000080   6100000A           BEQ      ??GetStringValue_9
   \   00000084   01A08AE3           ORR      R10,R10,#0x1
   \   00000088   0A0054E1           CMP      R4,R10
   \   0000008C   DF00000A           BEQ      ??GetStringValue_10
   \   00000090   01A08AE2           ADD      R10,R10,#+1
   \   00000094   0A0054E1           CMP      R4,R10
   \   00000098   B800000A           BEQ      ??GetStringValue_11
   \   0000009C   01A08AE3           ORR      R10,R10,#0x1
   \   000000A0   0A0054E1           CMP      R4,R10
   \   000000A4   C800000A           BEQ      ??GetStringValue_12
   \   000000A8   01A08AE2           ADD      R10,R10,#+1
   \   000000AC   0A0054E1           CMP      R4,R10
   \   000000B0   E700000A           BEQ      ??GetStringValue_13
   \   000000B4   01A08AE3           ORR      R10,R10,#0x1
   \   000000B8   0A0054E1           CMP      R4,R10
   \   000000BC   9C00000A           BEQ      ??GetStringValue_14
   \   000000C0   01A08AE2           ADD      R10,R10,#+1
   \   000000C4   0A0054E1           CMP      R4,R10
   \   000000C8   8800000A           BEQ      ??GetStringValue_15
   \   000000CC   01A08AE3           ORR      R10,R10,#0x1
   \   000000D0   0A0054E1           CMP      R4,R10
   \   000000D4   7500000A           BEQ      ??GetStringValue_16
   \   000000D8   EE0000EA           B        ??GetStringValue_17
    188              case SVT_IO_CH_NAME :
    189                  {
    190                      PROIOComponent *IOCPtr = IOComponent[Index];
   \                     ??GetStringValue_4:
   \   000000DC   034098E7           LDR      R4,[R8, +R3]
    191                      if ( IOCPtr ) {
   \   000000E0   000054E3           CMP      R4,#+0
   \   000000E4   0800000A           BEQ      ??GetStringValue_18
    192                          Status = IOCPtr->GetStringValue(SVT_AI_PRONAME, 0, MyString);
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   A44094E5           LDR      R4,[R4, #+164]
   \   000000F0   0730A0E1           MOV      R3,R7
   \   000000F4   284094E5           LDR      R4,[R4, #+40]
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   31104AE2           SUB      R1,R10,#+49
   \                     ??GetStringValue_19:
   \   00000100   0FE0A0E1           MOV      LR,PC
   \   00000104   14FF2FE1           BX       R4
   \   00000108   E70000EA           B        ??GetStringValue_20
    193                      } else {
    194                          MyString = "";
   \                     ??GetStringValue_18:
   \   0000010C   0010A0E1           MOV      R1,R0
   \   00000110   0D00A0E1           MOV      R0,SP
   \   00000114   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000118   ........           LDR      R1,??DataTable12  ;; ??npos
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   003091E5           LDR      R3,[R1, #+0]
   \   00000124   0010A0E1           MOV      R1,R0
   \                     ??GetStringValue_21:
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   ........           _BLF     ??assign,??assign??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   0D00A0E1           MOV      R0,SP
   \                     ??GetStringValue_22:
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000140   DA0000EA           B        ??GetStringValue_23
    195                      }
    196                  }
    197                  break;
    198              case SVT_IO_CH_LOCATION :
    199                  {
    200                      PROIOComponent *IOCPtr = IOComponent[Index];
   \                     ??GetStringValue_5:
   \   00000144   034098E7           LDR      R4,[R8, +R3]
    201                      if ( IOCPtr ) {
   \   00000148   000054E3           CMP      R4,#+0
   \   0000014C   0600000A           BEQ      ??GetStringValue_24
    202                          Status = IOCPtr->GetStringValue(SVT_AI_LOCATION, 0, MyString);
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   A44094E5           LDR      R4,[R4, #+164]
   \   00000158   0730A0E1           MOV      R3,R7
   \   0000015C   284094E5           LDR      R4,[R4, #+40]
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   34104AE2           SUB      R1,R10,#+52
   \   00000168   E4FFFFEA           B        ??GetStringValue_19
    203                      } else {
    204                          MyString = "";
   \                     ??GetStringValue_24:
   \   0000016C   0010A0E1           MOV      R1,R0
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000178   0010A0E1           MOV      R1,R0
   \   0000017C   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   003090E5           LDR      R3,[R0, #+0]
   \   00000188   E6FFFFEA           B        ??GetStringValue_21
    205                      }
    206                  }
    207                  break;
    208              case SVT_IO_CH_TYPE_TEXT :
    209                  {
    210                      PROIOComponent *IOCPtr = IOComponent[Index];
   \                     ??GetStringValue_6:
   \   0000018C   034098E7           LDR      R4,[R8, +R3]
    211                      if ( IOCPtr ) {
   \   00000190   000054E3           CMP      R4,#+0
   \   00000194   DCFFFF0A           BEQ      ??GetStringValue_18
    212                          Status = IOCPtr->GetStringValue(SVT_AI_TYPE_TEXT, 0, MyString);
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   A44094E5           LDR      R4,[R4, #+164]
   \   000001A0   0730A0E1           MOV      R3,R7
   \   000001A4   284094E5           LDR      R4,[R4, #+40]
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   3D104AE2           SUB      R1,R10,#+61
   \   000001B0   0FE0A0E1           MOV      LR,PC
   \   000001B4   14FF2FE1           BX       R4
   \   000001B8   BB0000EA           B        ??GetStringValue_20
    213                      } else {
    214                          MyString = "";
    215                      }
    216                  }
    217                  break;
    218              case SVT_IO_CH_CONV_ERROR :
    219                  MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_ERROR_STAT, ADConfigData[Index].ConvError);
   \                     ??GetStringValue_7:
   \   000001BC   9102D3E5           LDRB     R0,[R3, #+657]
   \   000001C0   0730A0E3           MOV      R3,#+7
   \   000001C4   010010E3           TST      R0,#0x1
   \   000001C8   0100A013           MOVNE    R0,#+1
   \   000001CC   0000A003           MOVEQ    R0,#+0
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   20008DE2           ADD      R0,SP,#+32
   \   000001D8   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   000001DC   ........           LDR      R0,??DataTable12  ;; ??npos
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   003090E5           LDR      R3,[R0, #+0]
   \   000001E8   20108DE2           ADD      R1,SP,#+32
   \   000001EC   0700A0E1           MOV      R0,R7
   \   000001F0   ........           _BLF     ??assign,??assign??rA
   \   000001F4   0620A0E1           MOV      R2,R6
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   20008DE2           ADD      R0,SP,#+32
   \                     ??GetStringValue_25:
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   04D08DE2           ADD      SP,SP,#+4
   \   00000208   A80000EA           B        ??GetStringValue_23
    220                  break;
    221              case SVT_IO_CH_CNV_CAL_ERROR:
    222                  {
    223                      bool ADStatus = ADConfigData[Index].ConvError;
   \                     ??GetStringValue_9:
   \   0000020C   9102D3E5           LDRB     R0,[R3, #+657]
   \   00000210   010010E3           TST      R0,#0x1
   \   00000214   0100A013           MOVNE    R0,#+1
   \   00000218   0000A003           MOVEQ    R0,#+0
    224                      ADStatus |= ADConfigData[Index].CalError;
   \   0000021C   000050E3           CMP      R0,#+0
   \   00000220   9102D305           LDRBEQ   R0,[R3, #+657]
    225                      MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_ERROR_STAT, ADStatus);
   \   00000224   0730A0E3           MOV      R3,#+7
   \   00000228   02001003           TSTEQ    R0,#0x2
   \   0000022C   0100A013           MOVNE    R0,#+1
   \   00000230   0000A003           MOVEQ    R0,#+0
   \   00000234   01002DE9           PUSH     {R0}
   \   00000238   04008DE2           ADD      R0,SP,#+4
   \   0000023C   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000240   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   003090E5           LDR      R3,[R0, #+0]
   \   0000024C   04108DE2           ADD      R1,SP,#+4
   \   00000250   0700A0E1           MOV      R0,R7
   \   00000254   ........           _BLF     ??assign,??assign??rA
   \   00000258   0620A0E1           MOV      R2,R6
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   04008DE2           ADD      R0,SP,#+4
   \   00000264   E5FFFFEA           B        ??GetStringValue_25
    226                  }
    227                  break;
    228              case SVT_IO_CH_CAL_ERROR :
    229                  MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_ERROR_STAT, ADConfigData[Index].CalError);
   \                     ??GetStringValue_8:
   \   00000268   9102D3E5           LDRB     R0,[R3, #+657]
   \   0000026C   0730A0E3           MOV      R3,#+7
   \   00000270   020010E3           TST      R0,#0x2
   \   00000274   0100A013           MOVNE    R0,#+1
   \   00000278   0000A003           MOVEQ    R0,#+0
   \   0000027C   01002DE9           PUSH     {R0}
   \   00000280   3C008DE2           ADD      R0,SP,#+60
   \   00000284   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000288   ........           LDR      R0,??DataTable12  ;; ??npos
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   003090E5           LDR      R3,[R0, #+0]
   \   00000294   3C108DE2           ADD      R1,SP,#+60
   \   00000298   0700A0E1           MOV      R0,R7
   \   0000029C   ........           _BLF     ??assign,??assign??rA
   \   000002A0   0620A0E1           MOV      R2,R6
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   3C008DE2           ADD      R0,SP,#+60
   \                     ??GetStringValue_26:
   \   000002AC   D3FFFFEA           B        ??GetStringValue_25
    230                  break;
    231              case SVT_IO_CH_EEP_SNS_STAT :
    232                  MyString = FindDictionaryWord(EEPromInfo[ADConfigData[Index].EEPromStatus]);
   \                     ??GetStringValue_16:
   \   000002B0   9202D3E5           LDRB     R0,[R3, #+658]
   \   000002B4   0004A0E1           LSL      R0,R0,#+8
   \   000002B8   2006A0E1           LSR      R0,R0,#+12
   \   000002BC   00119EE7           LDR      R1,[LR, +R0, LSL #+2]
   \   000002C0   54008DE2           ADD      R0,SP,#+84
   \   000002C4   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000002C8   ........           LDR      R0,??DataTable12  ;; ??npos
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   003090E5           LDR      R3,[R0, #+0]
   \   000002D4   54108DE2           ADD      R1,SP,#+84
   \   000002D8   0700A0E1           MOV      R0,R7
   \   000002DC   ........           _BLF     ??assign,??assign??rA
   \   000002E0   0620A0E1           MOV      R2,R6
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   54008DE2           ADD      R0,SP,#+84
   \   000002EC   92FFFFEA           B        ??GetStringValue_22
    233                  break;
    234              case SVT_IO_CH_EEP_PC_STAT :
    235                  MyString = FindDictionaryWord(EEPromInfo[ADConfigData[Index].EEP_PCStatus]);
   \                     ??GetStringValue_15:
   \   000002F0   9202D3E5           LDRB     R0,[R3, #+658]
   \   000002F4   701EA0E3           MOV      R1,#+1792
   \   000002F8   000401E0           AND      R0,R1,R0, LSL #+8
   \   000002FC   2004A0E1           LSR      R0,R0,#+8
   \   00000300   00119EE7           LDR      R1,[LR, +R0, LSL #+2]
   \   00000304   70008DE2           ADD      R0,SP,#+112
   \   00000308   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000030C   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   003090E5           LDR      R3,[R0, #+0]
   \   00000318   70108DE2           ADD      R1,SP,#+112
   \   0000031C   0700A0E1           MOV      R0,R7
   \   00000320   ........           _BLF     ??assign,??assign??rA
   \   00000324   0620A0E1           MOV      R2,R6
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   70008DE2           ADD      R0,SP,#+112
   \                     ??GetStringValue_27:
   \   00000330   81FFFFEA           B        ??GetStringValue_22
    236                  break;
    237              case SVT_IO_CH_EEP_USE_PCDATA:
    238                  MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_NO_YES, ADConfigData[Index].EEPUsePCData);
   \                     ??GetStringValue_14:
   \   00000334   9202D3E5           LDRB     R0,[R3, #+658]
   \   00000338   803EA0E3           MOV      R3,#+2048
   \   0000033C   000413E1           TST      R3,R0, LSL #+8
   \   00000340   0100A013           MOVNE    R0,#+1
   \   00000344   0000A003           MOVEQ    R0,#+0
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0430A0E3           MOV      R3,#+4
   \   00000350   90008DE2           ADD      R0,SP,#+144
   \   00000354   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000358   ........           LDR      R0,??DataTable12  ;; ??npos
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   003090E5           LDR      R3,[R0, #+0]
   \   00000364   90108DE2           ADD      R1,SP,#+144
   \   00000368   0700A0E1           MOV      R0,R7
   \   0000036C   ........           _BLF     ??assign,??assign??rA
   \   00000370   0620A0E1           MOV      R2,R6
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   90008DE2           ADD      R0,SP,#+144
   \   0000037C   9FFFFFEA           B        ??GetStringValue_25
    239                  break;
    240              case SVT_IO_CH_USE_PC_SETUP :
    241                  MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_NO_YES, ADConfigData[Index].UsePCSetUp);
   \                     ??GetStringValue_11:
   \   00000380   9102D3E5           LDRB     R0,[R3, #+657]
   \   00000384   0430A0E3           MOV      R3,#+4
   \   00000388   100010E3           TST      R0,#0x10
   \   0000038C   0100A013           MOVNE    R0,#+1
   \   00000390   0000A003           MOVEQ    R0,#+0
   \   00000394   01002DE9           PUSH     {R0}
   \   00000398   AC008DE2           ADD      R0,SP,#+172
   \   0000039C   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   000003A0   ........           LDR      R0,??DataTable12  ;; ??npos
   \   000003A4   0020A0E3           MOV      R2,#+0
   \   000003A8   003090E5           LDR      R3,[R0, #+0]
   \   000003AC   AC108DE2           ADD      R1,SP,#+172
   \   000003B0   0700A0E1           MOV      R0,R7
   \   000003B4   ........           _BLF     ??assign,??assign??rA
   \   000003B8   0620A0E1           MOV      R2,R6
   \   000003BC   0110A0E3           MOV      R1,#+1
   \   000003C0   AC008DE2           ADD      R0,SP,#+172
   \   000003C4   8DFFFFEA           B        ??GetStringValue_25
   \                     ??GetStringValue_3:
   \   000003C8   00000000           DC8      "",+0,+0,+0
    242                  break;
    243              case SVT_IO_CH_AD_SENSOR :
    244                  MyString = FindDictionaryWord(ADSensorType[ADConfigData[Index].FoundSensor]);
   \                     ??GetStringValue_12:
   \   000003CC   9102D3E5           LDRB     R0,[R3, #+657]
   \   000003D0   600000E2           AND      R0,R0,#0x60
   \   000003D4   A002A0E1           LSR      R0,R0,#+5
   \   000003D8   00018EE0           ADD      R0,LR,R0, LSL #+2
   \   000003DC   101090E5           LDR      R1,[R0, #+16]
   \   000003E0   C4008DE2           ADD      R0,SP,#+196
   \   000003E4   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000003E8   ........           LDR      R0,??DataTable12  ;; ??npos
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   003090E5           LDR      R3,[R0, #+0]
   \   000003F4   C4108DE2           ADD      R1,SP,#+196
   \   000003F8   0700A0E1           MOV      R0,R7
   \   000003FC   ........           _BLF     ??assign,??assign??rA
   \   00000400   0620A0E1           MOV      R2,R6
   \   00000404   0110A0E3           MOV      R1,#+1
   \   00000408   C4008DE2           ADD      R0,SP,#+196
   \   0000040C   4AFFFFEA           B        ??GetStringValue_22
    245                  break;
    246              case SVT_IO_CH_FROM_PC_SENSOR :
    247                  MyString = FindDictionaryWord(ADSensorType[ADConfigData[Index].PCSensor]);
   \                     ??GetStringValue_10:
   \   00000410   9102D3E5           LDRB     R0,[R3, #+657]
   \   00000414   0C0000E2           AND      R0,R0,#0xC
   \   00000418   2001A0E1           LSR      R0,R0,#+2
   \   0000041C   00018EE0           ADD      R0,LR,R0, LSL #+2
   \   00000420   101090E5           LDR      R1,[R0, #+16]
   \   00000424   E0008DE2           ADD      R0,SP,#+224
   \   00000428   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000042C   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000430   0020A0E3           MOV      R2,#+0
   \   00000434   003090E5           LDR      R3,[R0, #+0]
   \   00000438   E0108DE2           ADD      R1,SP,#+224
   \   0000043C   0700A0E1           MOV      R0,R7
   \   00000440   ........           _BLF     ??assign,??assign??rA
   \   00000444   0620A0E1           MOV      R2,R6
   \   00000448   0110A0E3           MOV      R1,#+1
   \   0000044C   E0008DE2           ADD      R0,SP,#+224
   \   00000450   39FFFFEA           B        ??GetStringValue_22
    248                  break;
    249              case SVT_IO_CH_NEW_SENSOR :
    250                  MyString = LibGetText(StatusText, SizeofStatusText, ST_TXT_NO_YES, ADConfigData[Index].NewSensor);
   \                     ??GetStringValue_13:
   \   00000454   9102D3E5           LDRB     R0,[R3, #+657]
   \   00000458   0430A0E3           MOV      R3,#+4
   \   0000045C   A003B0E1           LSRS     R0,R0,#+7
   \   00000460   0100A013           MOVNE    R0,#+1
   \   00000464   01002DE9           PUSH     {R0}
   \   00000468   400F8DE2           ADD      R0,SP,#+256
   \   0000046C   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000470   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   003090E5           LDR      R3,[R0, #+0]
   \   0000047C   401F8DE2           ADD      R1,SP,#+256
   \   00000480   0700A0E1           MOV      R0,R7
   \   00000484   ........           _BLF     ??assign,??assign??rA
   \   00000488   0620A0E1           MOV      R2,R6
   \   0000048C   0110A0E3           MOV      R1,#+1
   \   00000490   400F8DE2           ADD      R0,SP,#+256
   \   00000494   59FFFFEA           B        ??GetStringValue_25
    251                  break;
    252              default:
    253                  Status = SignalConverter::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_17:
   \   00000498   0730A0E1           MOV      R3,R7
   \   0000049C   0520A0E1           MOV      R2,R5
   \   000004A0   0410A0E1           MOV      R1,R4
   \   000004A4   0C00A0E1           MOV      R0,R12
   \   000004A8   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \                     ??GetStringValue_20:
   \   000004AC   0060A0E1           MOV      R6,R0
    254                  break;
    255              }
    256          
    257              return (Status);
   \                     ??GetStringValue_23:
   \   000004B0   0600A0E1           MOV      R0,R6
   \   000004B4   46DF8DE2           ADD      SP,SP,#+280
   \   000004B8   F045BDE8           POP      {R4-R8,R10,LR}
   \   000004BC   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_2:
   \   000004C0   ........           DC32     SizeofStatusText
   \   000004C4   ........           DC32     ??EEPromInfo
   \   000004C8   ........           DC32     StatusText
    258          }
    259          

   \                                 In segment CODE, align 4, keep-with-next
    260          int SCADCard::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3470DDE5           LDRB     R7,[SP, #+52]
   \   0000000C   38809DE5           LDR      R8,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    261              return (SignalConverter::PutValue(ValueId, Index, NewValue, Local, UnitId));
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??string,??string??rA
   \   00000028   00012DE9           PUSH     {R8}
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   24D08DE2           ADD      SP,SP,#+36
   \   00000060                      REQUIRE ?Subroutine27
   \   00000060                      ;; // Fall through to label ?Subroutine27
    262          }
    263          

   \                                 In segment CODE, align 4, keep-with-next
    264          int SCADCard::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    265              return (SignalConverter::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine29
    266          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    267          

   \                                 In segment CODE, align 4, keep-with-next
    268          ValueList* SCADCard::GetValueInfoTable(int &Entries, int Index) {
    269              Entries = NELEMENTS(SCAdCardValueList);
   \                     ??GetValueInfoTable:
   \   00000000   0900A0E3           MOV      R0,#+9
   \   00000004   000081E5           STR      R0,[R1, #+0]
    270              return (SCAdCardValueList);
   \   00000008   00009FE5           LDR      R0,??GetValueInfoTable_1  ;; ??SCAdCardValueList
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTable_1:
   \   00000010   ........           DC32     ??SCAdCardValueList
    271          }
    272          
    273          // For communication
    274          

   \                                 In segment CODE, align 4, keep-with-next
    275          void SCADCard::SetHWFailure(bool Failure) {
   \                     ??SetHWFailure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    276              if ( Failure ) {
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0F00000A           BEQ      ??SetHWFailure_1
    277                  for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000010   0050A0E3           MOV      R5,#+0
    278                      PROIOComponent *CompPtr = IOComponent[i];
   \                     ??SetHWFailure_2:
   \   00000014   050184E0           ADD      R0,R4,R5, LSL #+2
   \   00000018   A02190E5           LDR      R2,[R0, #+416]
    279                      if ( CompPtr ) {
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0700000A           BEQ      ??SetHWFailure_3
    280                          CompPtr->HWFailure = true;
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   0C01C2E5           STRB     R0,[R2, #+268]
    281                          CompPtr->SendData();
   \   0000002C   0200A0E1           MOV      R0,R2
   \   00000030   A42092E5           LDR      R2,[R2, #+164]
   \   00000034   6510A0E3           MOV      R1,#+101
   \   00000038   402092E5           LDR      R2,[R2, #+64]
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   12FF2FE1           BX       R2
    282                      }
    283                  }
   \                     ??SetHWFailure_3:
   \   00000044   015085E2           ADD      R5,R5,#+1
   \   00000048   0E0055E3           CMP      R5,#+14
   \   0000004C   F0FFFFBA           BLT      ??SetHWFailure_2
    284              }
    285          }
   \                     ??SetHWFailure_1:
   \   00000050                      REQUIRE ?Subroutine28
   \   00000050                      ;; // Fall through to label ?Subroutine28
    286          
    287          #ifdef S2TXU

   \                                 In segment CODE, align 4, keep-with-next
    288          int SCADCard::AddCommand(U8 *BufPtr, U8 Command, U8 Size, U8 *Data) {
   \                     ??AddCommand:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0100A0E1           MOV      R0,R1
   \   00000008   08109DE5           LDR      R1,[SP, #+8]
   \   0000000C   0340A0E1           MOV      R4,R3
    289              BufPtr[0] = Command;
   \   00000010   0020C0E5           STRB     R2,[R0, #+0]
    290              BufPtr[1] = Size;
   \   00000014   0140C0E5           STRB     R4,[R0, #+1]
    291          
    292              memcpy(&BufPtr[2], Data, Size);
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   020080E2           ADD      R0,R0,#+2
   \   00000020   ........           _BLF     memcpy,??memcpy??rA
    293              return (Size + 2);
   \   00000024   020084E2           ADD      R0,R4,#+2
   \   00000028   ........           B        ??Subroutine25_0
    294          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   ........           _BLF     memcpy,??memcpy??rA
   \   00000004   0D10A0E1           MOV      R1,SP
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     ??SendPacket,??SendPacket??rA
   \   00000010   60D08DE2           ADD      SP,SP,#+96
   \                     ??Subroutine25_0:
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
    295          
    296          

   \                                 In segment CODE, align 4, keep-with-next
    297          void SCADCard::SendToAD(U8 Command, U8 Size, U8 *Data) {
   \                     ??SendToAD:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   60D04DE2           SUB      SP,SP,#+96
   \   00000008   0040A0E1           MOV      R4,R0
    298              NetPacket Packet;
    299              ANPRO10_Command_1160_Single ADData;
    300              Packet.Command = CMD_SND_RS4_ADBUF;
   \   0000000C   88C0A0E3           MOV      R12,#+136
   \   00000010   40CE8CE3           ORR      R12,R12,#0x400
   \   00000014   B0C0CDE1           STRH     R12,[SP, #+0]
    301              Packet.RxAddress = IOAddress;
   \   00000018   78C194E5           LDR      R12,[R4, #+376]
    302              Packet.RxTypeId = DEVICE_ZB485;
    303              Packet.RequestAck = 0;
    304              Packet.Size = sizeof(ADData) - sizeof(ADData.Data) + Size;
    305              Packet.Data = (U8 *)&ADData;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   05C0CDE5           STRB     R12,[SP, #+5]
   \   00000024   10C0A0E3           MOV      R12,#+16
   \   00000028   04C0CDE5           STRB     R12,[SP, #+4]
   \   0000002C   00C0A0E3           MOV      R12,#+0
   \   00000030   06C0CDE5           STRB     R12,[SP, #+6]
   \   00000034   04C082E2           ADD      R12,R2,#+4
   \   00000038   B2C0CDE1           STRH     R12,[SP, #+2]
   \   0000003C   10C08DE2           ADD      R12,SP,#+16
   \   00000040   0CC08DE5           STR      R12,[SP, #+12]
   \   00000044   07C08DE2           ADD      R12,SP,#+7
   \                     ??SendToAD_2:
   \   00000048   0CE08DE2           ADD      LR,SP,#+12
   \   0000004C   0EE0D0E7           LDRB     LR,[R0, +LR]
   \   00000050   0CE0C0E7           STRB     LR,[R0, +R12]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   040050E3           CMP      R0,#+4
   \   0000005C   F9FFFFBA           BLT      ??SendToAD_2
    306          
    307              ADData.Channel = IOChannel;
   \   00000060   7CC194E5           LDR      R12,[R4, #+380]
    308              ADData.Cmd = Command;
   \   00000064   1210CDE5           STRB     R1,[SP, #+18]
    309              ADData.Size = Packet.Size - 2; // Notice this one!!!
   \   00000068   B210DDE1           LDRH     R1,[SP, #+2]
   \   0000006C   10C0CDE5           STRB     R12,[SP, #+16]
    310              ADData.DSize = Size;
   \   00000070   1320CDE5           STRB     R2,[SP, #+19]
   \   00000074   FE1081E2           ADD      R1,R1,#+254
   \   00000078   1110CDE5           STRB     R1,[SP, #+17]
    311              memcpy(ADData.Data, Data, Size);
   \   0000007C   0310A0E1           MOV      R1,R3
   \   00000080   14008DE2           ADD      R0,SP,#+20
   \   00000084   ........           B        ?Subroutine25
    312              SendPacket(Packet);
    313          }
    314          
    315          

   \                                 In segment CODE, align 4, keep-with-next
    316          void SCADCard::SendToAD(U8 Size, U8 *Data) {
   \                     ??SendToAD_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   60D04DE2           SUB      SP,SP,#+96
   \   00000008   0040A0E1           MOV      R4,R0
    317              NetPacket Packet;
    318              ANPRO10_Command_1160 ADData;
    319              Packet.Command = CMD_SND_RS4_ADBUF;
   \   0000000C   8830A0E3           MOV      R3,#+136
   \   00000010   403E83E3           ORR      R3,R3,#0x400
   \   00000014   B030CDE1           STRH     R3,[SP, #+0]
    320              Packet.RxAddress = IOAddress;
   \   00000018   783194E5           LDR      R3,[R4, #+376]
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   0530CDE5           STRB     R3,[SP, #+5]
    321              Packet.RxTypeId = DEVICE_ZB485;
   \   00000024   1030A0E3           MOV      R3,#+16
   \   00000028   0430CDE5           STRB     R3,[SP, #+4]
    322              Packet.RequestAck = 0;
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0630CDE5           STRB     R3,[SP, #+6]
    323              Packet.Size = sizeof(ADData) - sizeof(ADData.Data) + Size;
   \   00000034   023081E2           ADD      R3,R1,#+2
   \   00000038   B230CDE1           STRH     R3,[SP, #+2]
    324              Packet.Data = (U8 *)&ADData;
   \   0000003C   10308DE2           ADD      R3,SP,#+16
   \   00000040   0C308DE5           STR      R3,[SP, #+12]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   07308DE2           ADD      R3,SP,#+7
   \                     ??SendToAD_3:
   \   0000004C   0CC08DE2           ADD      R12,SP,#+12
   \   00000050   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000054   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000058   012082E2           ADD      R2,R2,#+1
   \   0000005C   040052E3           CMP      R2,#+4
   \   00000060   F9FFFFBA           BLT      ??SendToAD_3
    325          
    326              ADData.Channel = IOChannel;
   \   00000064   7C3194E5           LDR      R3,[R4, #+380]
    327              ADData.Size = Packet.Size - 2; // Notice this one!!!
    328              memcpy(ADData.Data, Data, Size);
   \   00000068   0120A0E1           MOV      R2,R1
   \   0000006C   1030CDE5           STRB     R3,[SP, #+16]
   \   00000070   B230DDE1           LDRH     R3,[SP, #+2]
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   12008DE2           ADD      R0,SP,#+18
   \   0000007C   FE3083E2           ADD      R3,R3,#+254
   \   00000080   1130CDE5           STRB     R3,[SP, #+17]
   \   00000084                      REQUIRE ?Subroutine25
   \   00000084                      ;; // Fall through to label ?Subroutine25
    329              SendPacket(Packet);
    330          }
    331          
    332              #define IO_DELAY 5000

   \                                 In segment CODE, align 4, keep-with-next
    333          void SCADCard::SendGainAndOffset(void) {
   \                     ??SendGainAndOffset:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   48D04DE2           SUB      SP,SP,#+72
   \   00000008   0040A0E1           MOV      R4,R0
    334              AdjustPacket AdjustData[MAX_AN_SGCNV_CHANNELS];
    335              int Cnt = 0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    336              for ( int Ch = 0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
   \   00000010   0060A0E3           MOV      R6,#+0
    337                  if ( IOComponent[Ch] ) {
   \                     ??SendGainAndOffset_2:
   \   00000014   060184E0           ADD      R0,R4,R6, LSL #+2
   \   00000018   681FA0E3           MOV      R1,#+416
   \   0000001C   002091E7           LDR      R2,[R1, +R0]
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   2300000A           BEQ      ??SendGainAndOffset_3
    338                      switch ( IOComponent[Ch]->Type ) {
   \   00000028   A02092E5           LDR      R2,[R2, #+160]
   \   0000002C   5E2042E2           SUB      R2,R2,#+94
   \   00000030   802E42E2           SUB      R2,R2,#+2048
   \   00000034   0A0052E3           CMP      R2,#+10
   \   00000038   1E00008A           BHI      ??SendGainAndOffset_3
   \   0000003C   013F8FE2           ADR      R3,??SendGainAndOffset_1
   \   00000040   0230D3E7           LDRB     R3,[R3, R2]
   \   00000044   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??SendGainAndOffset_1:
   \   00000048   02021B1B           DC8      +2,+2,+27,+27
   \   0000004C   1B1B1B1B           DC8      +27,+27,+27,+27
   \   00000050   1B1B0200           DC8      +27,+27,+2,+0
    339                      case C_AI_WashTrackSensor :
    340                          break;
    341                      case C_AI_Pt100 :
    342                      case C_AI_Pt1000 :
    343                      case C_AI_TEMP_AD590 :
    344                          {
    345                              AITempSensor *SnsPtr = (AITempSensor *)IOComponent[Ch];
    346                              short Offset = short(SnsPtr->GetCableCorrection() * 10 + 0.5);
   \                     ??SendGainAndOffset_4:
   \   00000054   000091E7           LDR      R0,[R1, +R0]
   \   00000058   ........           _BLF     ??GetCableCorrection,??GetCableCorrection??rA
   \   0000005C   4014A0E3           MOV      R1,#+1073741824
   \   00000060   481781E3           ORR      R1,R1,#0x1200000
   \   00000064   ........           _BLF     __fMul,??__fMul??rA
   \   00000068   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   C035A0E3           MOV      R3,#+805306368
   \   00000074   FE3683E3           ORR      R3,R3,#0xFE00000
   \   00000078   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000007C   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000080   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000084   4008B0E1           MOVS     R0,R0, ASR #+16
    347                              if ( Offset ) {
   \   00000088   0A00000A           BEQ      ??SendGainAndOffset_3
    348                                  AdjustData[Cnt].ChNo = Ch;
   \   0000008C   051185E0           ADD      R1,R5,R5, LSL #+2
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   021081E0           ADD      R1,R1,R2
   \   00000098   0060C1E5           STRB     R6,[R1, #+0]
    349                                  AdjustData[Cnt].GainHigh = 0;
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0320C1E5           STRB     R2,[R1, #+3]
    350                                  AdjustData[Cnt].GainLow = 0;
   \   000000A4   0420C1E5           STRB     R2,[R1, #+4]
    351                                  AdjustData[Cnt].OffsetHigh = Offset >> 8;
   \   000000A8   4024A0E1           ASR      R2,R0,#+8
   \   000000AC   0120C1E5           STRB     R2,[R1, #+1]
    352                                  AdjustData[Cnt].OffsetLow = Offset & 0xFF;
   \   000000B0   0200C1E5           STRB     R0,[R1, #+2]
    353                                  Cnt++;
   \   000000B4   015085E2           ADD      R5,R5,#+1
    354                              }    // End if
    355                          }
    356                          break;
    357                      } // End switch
    358                  }   // End If IO-component
    359              } // End for loop
   \                     ??SendGainAndOffset_3:
   \   000000B8   016086E2           ADD      R6,R6,#+1
   \   000000BC   0E0056E3           CMP      R6,#+14
   \   000000C0   D3FFFFBA           BLT      ??SendGainAndOffset_2
    360              if ( Cnt ) {
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   0800000A           BEQ      ??SendGainAndOffset_5
    361                  SendToAD(ANP1_SND_OFF_GAIN, Cnt * sizeof(AdjustPacket), (U8 *)AdjustData);
   \   000000CC   0D30A0E1           MOV      R3,SP
   \   000000D0   052185E0           ADD      R2,R5,R5, LSL #+2
   \   000000D4   FF2002E2           AND      R2,R2,#0xFF
   \   000000D8   1310A0E3           MOV      R1,#+19
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           BL       ??SendToAD
    362                  OS_Delay(IO_DELAY);
   \   000000E4   8800A0E3           MOV      R0,#+136
   \   000000E8   4C0D80E3           ORR      R0,R0,#0x1300
   \   000000EC   ........           _BLF     OS_Delay,??OS_Delay??rA
    363              }
    364          }
   \                     ??SendGainAndOffset_5:
   \   000000F0   48D08DE2           ADD      SP,SP,#+72
   \   000000F4                      REQUIRE ?Subroutine26
   \   000000F4                      ;; // Fall through to label ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    365          
    366              #define DUMMY_PRESS_CHANNEL 13
    367              #define SETUP_BUF_SIZE      15
    368          

   \                                 In segment CODE, align 4, keep-with-next
    369          void SCADCard::InitSensorTypes(bool ForceDummyPress) {
   \                     ??InitSensorTypes:
   \   00000000   30002DE9           PUSH     {R4,R5}
    370              // Must check all the channels to be sure that we don't skip a pressure sensor
    371              for ( int Ch = 0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0140A0E3           MOV      R4,#+1
    372                  unsigned SnsType;
    373                  PROIOComponent *AIPtr = IOComponent[Ch];
   \                     ??InitSensorTypes_1:
   \   0000000C   023180E0           ADD      R3,R0,R2, LSL #+2
   \   00000010   A03193E5           LDR      R3,[R3, #+416]
    374                  if ( AIPtr ) {
   \   00000014   00C0A0E3           MOV      R12,#+0
   \   00000018   000053E3           CMP      R3,#+0
   \   0000001C   1F00000A           BEQ      ??InitSensorTypes_2
    375                      switch ( AIPtr->Type ) {
   \   00000020   A03093E5           LDR      R3,[R3, #+160]
   \   00000024   3E50A0E3           MOV      R5,#+62
   \   00000028   805E85E3           ORR      R5,R5,#0x800
   \   0000002C   050053E1           CMP      R3,R5
   \   00000030   01508513           ORRNE    R5,R5,#0x1
   \   00000034   05005311           CMPNE    R3,R5
   \   00000038   15508512           ADDNE    R5,R5,#+21
   \   0000003C   05005311           CMPNE    R3,R5
   \   00000040   1000000A           BEQ      ??InitSensorTypes_3
   \   00000044   0A5085E3           ORR      R5,R5,#0xA
   \   00000048   050053E1           CMP      R3,R5
   \   0000004C   01508513           ORRNE    R5,R5,#0x1
   \   00000050   05005311           CMPNE    R3,R5
   \   00000054   0900000A           BEQ      ??InitSensorTypes_4
   \   00000058   095085E2           ADD      R5,R5,#+9
   \   0000005C   050053E1           CMP      R3,R5
   \   00000060   0C00000A           BEQ      ??InitSensorTypes_5
   \   00000064   015085E3           ORR      R5,R5,#0x1
   \   00000068   050053E1           CMP      R3,R5
   \   0000006C   0800000A           BEQ      ??InitSensorTypes_6
   \   00000070   0B5085E2           ADD      R5,R5,#+11
   \   00000074   050053E1           CMP      R3,R5
   \   00000078   0600000A           BEQ      ??InitSensorTypes_5
   \   0000007C   0B0000EA           B        ??InitSensorTypes_7
    376                      case C_AI_Pt100 :
    377                      case C_AI_Pt1000 :
    378                          SnsType = AD_TEMP_SNS;
   \                     ??InitSensorTypes_4:
   \   00000080   01C0A0E3           MOV      R12,#+1
   \   00000084   090000EA           B        ??InitSensorTypes_7
    379                          break;
    380                      case C_AI_1728 :
    381                      case C_AI_P906_0110 :
    382                      case C_AI_P906_0111 :
    383                          SnsType = AD_PRESS_SNS;
   \                     ??InitSensorTypes_3:
   \   00000088   03C0A0E3           MOV      R12,#+3
    384                          HasPressureSensor = true;
   \   0000008C   D742C0E5           STRB     R4,[R0, #+727]
   \   00000090   060000EA           B        ??InitSensorTypes_7
    385                          break;
    386                      case C_AI_LeSw_ADCard :
    387                          FilterDegreeOther = 0;
   \                     ??InitSensorTypes_6:
   \   00000094   D8C2C0E5           STRB     R12,[R0, #+728]
    388                          SnsType = AD_OTHER_SNS;
    389                          break;
    390                      case C_AI_INCLINOMETER :
    391                      case C_AI_TEMP_AD590 :
    392                          SnsType = AD_OTHER_SNS;
   \                     ??InitSensorTypes_5:
   \   00000098   02C0A0E3           MOV      R12,#+2
   \   0000009C   030000EA           B        ??InitSensorTypes_7
    393                          break;
    394                      default :
    395                          // This is an error in sensor object!!!
    396                          SnsType = AD_NO_SNS;
    397                          break;
    398                      }
    399                  } else if ( (Ch == DUMMY_PRESS_CHANNEL) && !HasPressureSensor ) {
   \                     ??InitSensorTypes_2:
   \   000000A0   0D0052E3           CMP      R2,#+13
   \   000000A4   D732D005           LDRBEQ   R3,[R0, #+727]
   \   000000A8   00005303           CMPEQ    R3,#+0
    400                      SnsType = AD_PRESS_SNS;
   \   000000AC   03C0A003           MOVEQ    R12,#+3
    401                  } else {
    402                      SnsType = AD_NO_SNS; //AD_NO_SNS;
    403                  }
    404                  SensorType[Ch] = SnsType;
   \                     ??InitSensorTypes_7:
   \   000000B0   003082E0           ADD      R3,R2,R0
   \   000000B4   C9C2C3E5           STRB     R12,[R3, #+713]
    405              }
   \   000000B8   012082E2           ADD      R2,R2,#+1
   \   000000BC   0E0052E3           CMP      R2,#+14
   \   000000C0   D1FFFFBA           BLT      ??InitSensorTypes_1
    406              if ( ForceDummyPress ) {
   \   000000C4   000051E3           CMP      R1,#+0
   \   000000C8   0600000A           BEQ      ??InitSensorTypes_8
    407                  for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i += 2 ) {
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   0330A0E3           MOV      R3,#+3
    408                      SensorType[i] = AD_PRESS_SNS;
   \                     ??InitSensorTypes_9:
   \   000000D4   002081E0           ADD      R2,R1,R0
   \   000000D8   C932C2E5           STRB     R3,[R2, #+713]
    409                  }
   \   000000DC   021081E2           ADD      R1,R1,#+2
   \   000000E0   0E0051E3           CMP      R1,#+14
   \   000000E4   FAFFFFBA           BLT      ??InitSensorTypes_9
    410              }
    411          }
   \                     ??InitSensorTypes_8:
   \   000000E8   3000BDE8           POP      {R4,R5}
   \   000000EC   1EFF2FE1           BX       LR               ;; return
    412          
    413          
    414          

   \                                 In segment CODE, align 4, keep-with-next
    415          bool SCADCard::Correct_AD_Config(void) {
   \                     ??Correct_AD_Config:
   \   00000000   1F402DE9           PUSH     {R0-R4,LR}
    416              bool CfgDiffer = false;
   \   00000004   0040A0E3           MOV      R4,#+0
    417              // Must check all the channels to be sure that we don't skip a pressure sensor
    418              for ( int Ch = 0; !CfgDiffer && Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
    419                  CfgDiffer |= (SensorType[Ch] != ADConfigData[Ch].PCSensor);
   \                     ??Correct_AD_Config_1:
   \   00000010   003082E0           ADD      R3,R2,R0
   \   00000014   C932D3E5           LDRB     R3,[R3, #+713]
   \   00000018   02C180E0           ADD      R12,R0,R2, LSL #+2
   \   0000001C   91C2DCE5           LDRB     R12,[R12, #+657]
    420              }
   \   00000020   012082E2           ADD      R2,R2,#+1
   \   00000024   0CC00CE2           AND      R12,R12,#0xC
   \   00000028   2C0153E1           CMP      R3,R12, LSR #+2
   \   0000002C   0140A013           MOVNE    R4,#+1
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0200001A           BNE      ??Correct_AD_Config_2
   \   00000038   0E0052E3           CMP      R2,#+14
   \   0000003C   0E0000AA           BGE      ??Correct_AD_Config_3
   \   00000040   F2FFFFEA           B        ??Correct_AD_Config_1
    421          
    422              if ( CfgDiffer ) {
    423                  U8 SnsSetUpBuf[SETUP_BUF_SIZE];
    424                  for ( int Ch = 0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
   \                     ??Correct_AD_Config_2:
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0D30A0E1           MOV      R3,SP
    425                      SnsSetUpBuf[Ch] = (SensorType[Ch] | AD_USE_PC_INFO) << 2;
   \                     ??Correct_AD_Config_4:
   \   0000004C   00C082E0           ADD      R12,R2,R0
   \   00000050   C9C2DCE5           LDRB     R12,[R12, #+713]
   \   00000054   04C08CE3           ORR      R12,R12,#0x4
   \   00000058   0CC1A0E1           LSL      R12,R12,#+2
   \   0000005C   03C0C2E7           STRB     R12,[R2, +R3]
    426                  }
   \   00000060   012082E2           ADD      R2,R2,#+1
   \   00000064   0E0052E3           CMP      R2,#+14
   \   00000068   F7FFFFBA           BLT      ??Correct_AD_Config_4
    427                  SnsSetUpBuf[14] = 1;     // Flag that this information shall be used
   \   0000006C   0E10CDE5           STRB     R1,[SP, #+14]
    428                                           // Send configuration to the AD card
    429                  SendToAD(ANP1_SND_SET_UP, SETUP_BUF_SIZE, (U8 *)SnsSetUpBuf);
   \   00000070   0F20A0E3           MOV      R2,#+15
   \   00000074   1410A0E3           MOV      R1,#+20
   \   00000078   ........           BL       ??SendToAD
    430              }
    431              return CfgDiffer;
   \                     ??Correct_AD_Config_3:
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   10D08DE2           ADD      SP,SP,#+16
   \   00000084   ........           B        ??Subroutine25_0
    432          }
    433          

   \                                 In segment CODE, align 4, keep-with-next
    434          void SCADCard::GetADConfigInfo(void) {
   \                     ??GetADConfigInfo:
   \   00000000   00402DE9           PUSH     {LR}
    435              SendToAD(ANP1_REQ_CONFIG, 0, NULL);
   \   00000004   0030A0E3           MOV      R3,#+0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   1110A0E3           MOV      R1,#+17
   \   00000010   ........           BL       ??SendToAD
    436          }
   \   00000014                      REQUIRE ?Subroutine29
   \   00000014                      ;; // Fall through to label ?Subroutine29
    437          

   \                                 In segment CODE, align 4, keep-with-next
    438          bool SCADCard::ExtraADSetUp(void) {
   \                     ??ExtraADSetUp:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    439              U8 TxBuf[BUF_SIZE];
    440              int Size = 0;
    441              //Size += AddCommand(TxBuf, ANP1_REQ_CONFIG, 0, NULL);
    442              if ( !HasPressureSensor ) {
   \   0000000C   D702D4E5           LDRB     R0,[R4, #+727]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0A00001A           BNE      ??ExtraADSetUp_1
    443                  // Change temperature conversion time
    444                  U8 ScanDelay = 1;   // Seconds temp scan delay
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0010CDE5           STRB     R1,[SP, #+0]
    445                  Size += AddCommand(TxBuf, ANP1_SND_TBTR, sizeof(ScanDelay), &ScanDelay);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0130A0E3           MOV      R3,#+1
   \   00000030   1520A0E3           MOV      R2,#+21
   \   00000034   08108DE2           ADD      R1,SP,#+8
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       ??AddCommand
   \   00000040   0050A0E1           MOV      R5,R0
   \   00000044   04D08DE2           ADD      SP,SP,#+4
    446              }
    447              if ( FilterDegreeOther != SGCNV_DEFAULT_FILTER ) {
   \                     ??ExtraADSetUp_1:
   \   00000048   D802D4E5           LDRB     R0,[R4, #+728]
   \   0000004C   020050E3           CMP      R0,#+2
   \   00000050   1100000A           BEQ      ??ExtraADSetUp_2
    448                  // Change filters    Default is 5,2,2, Press,Tmp,Other
    449                  U8 Filter[3] = { 5, 2, FilterDegreeOther }; // Seconds pressure.
   \   00000054   68109FE5           LDR      R1,??ExtraADSetUp_3  ;; `?<Constant {(unsigned char)'\\005', (unsigned c`
   \   00000058   01008DE2           ADD      R0,SP,#+1
   \   0000005C   0020D1E5           LDRB     R2,[R1, #0]
    450                  Size += AddCommand(TxBuf, ANP1_SND_FILTER, sizeof(Filter), Filter);
   \   00000060   0330A0E3           MOV      R3,#+3
   \   00000064   0020C0E5           STRB     R2,[R0, #+0]
   \   00000068   0120D1E5           LDRB     R2,[R1, #+1]
   \   0000006C   0120C0E5           STRB     R2,[R0, #+1]
   \   00000070   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000074   0220C0E5           STRB     R2,[R0, #+2]
   \   00000078   D812D4E5           LDRB     R1,[R4, #+728]
   \   0000007C   1A20A0E3           MOV      R2,#+26
   \   00000080   0310CDE5           STRB     R1,[SP, #+3]
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   08108DE2           ADD      R1,SP,#+8
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       ??AddCommand
   \   00000094   055080E0           ADD      R5,R0,R5
   \   00000098   04D08DE2           ADD      SP,SP,#+4
    451              }
    452              SendToAD(Size, TxBuf);
   \                     ??ExtraADSetUp_2:
   \   0000009C   04208DE2           ADD      R2,SP,#+4
   \   000000A0   FF1005E2           AND      R1,R5,#0xFF
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       ??SendToAD_1
    453              return bool(Size);
   \   000000AC   000055E3           CMP      R5,#+0
   \   000000B0   54D08DE2           ADD      SP,SP,#+84
   \   000000B4   3040BDE8           POP      {R4,R5,LR}
   \   000000B8   0100A013           MOVNE    R0,#+1
   \   000000BC   0000A003           MOVEQ    R0,#+0
   \   000000C0   1EFF2FE1           BX       LR               ;; return
   \                     ??ExtraADSetUp_3:
   \   000000C4   ........           DC32     `?<Constant {(unsigned char)'\\005', (unsigned c`
    454          }
    455              #define ADC_ERROR_VALUE     53249
    456              #define ADC_CAL_ERROR_VAL1  32768
    457              #define ADC_CAL_ERROR_VAL2  32769

   \                                 In segment CODE, align 4, keep-with-next
    458          bool SCADCard::ANPRO10_IO_UnpackPacket(U8 *Buf) {
   \                     ??ANPRO10_IO_UnpackPacket:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   45DF4DE2           SUB      SP,SP,#+276
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0020CDE5           STRB     R2,[SP, #+0]
    459              bool MoreCommands = true;
    460              bool RecalcTanks = false;
    461              ANPRO10_PacketHeading *pPH = (ANPRO10_PacketHeading *)Buf;
    462              U8 *EndPtr = &Buf[pPH->nob];
   \   00000010   0520D1E5           LDRB     R2,[R1, #+5]
   \   00000014   0430D1E5           LDRB     R3,[R1, #+4]
   \   00000018   0040A0E1           MOV      R4,R0
    463          
    464              Buf += sizeof(ANPRO10_PacketHeading);
   \   0000001C   075081E2           ADD      R5,R1,#+7
   \   00000020   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000024   012082E0           ADD      R2,R2,R1
   \   00000028   08208DE5           STR      R2,[SP, #+8]
    465          
    466              volatile ANPRO10_CommandHeading *pCH;
    467              bool MyPacket = (pPH->txadr == this->IOAddress);
   \   0000002C   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000030   781194E5           LDR      R1,[R4, #+376]
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   2300001A           BNE      ??ANPRO10_IO_UnpackPacket_1
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0110CDE5           STRB     R1,[SP, #+1]
    468              if ( MyPacket ) {
    469                  do {
    470                      pCH = (ANPRO10_CommandHeading *)Buf;
   \                     ??ANPRO10_IO_UnpackPacket_2:
   \   00000044   04508DE5           STR      R5,[SP, #+4]
    471                      Buf += sizeof(ANPRO10_CommandHeading);  // ??
   \   00000048   04009DE5           LDR      R0,[SP, #+4]
   \   0000004C   045085E2           ADD      R5,R5,#+4
   \   00000050   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000054   04109DE5           LDR      R1,[SP, #+4]
   \   00000058   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000005C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000060   01005013           CMPNE    R0,#+1
   \   00000064   9D01000A           BEQ      ??ANPRO10_IO_UnpackPacket_3
   \   00000068   7510A0E3           MOV      R1,#+117
   \   0000006C   401E81E3           ORR      R1,R1,#0x400
   \   00000070   010050E1           CMP      R0,R1
   \   00000074   8D00000A           BEQ      ??ANPRO10_IO_UnpackPacket_4
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   5E01000A           BEQ      ??ANPRO10_IO_UnpackPacket_5
   \   00000084   131081E2           ADD      R1,R1,#+19
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0300000A           BEQ      ??ANPRO10_IO_UnpackPacket_6
   \   00000090   131081E2           ADD      R1,R1,#+19
   \   00000094   010050E1           CMP      R0,R1
   \   00000098   0E00000A           BEQ      ??ANPRO10_IO_UnpackPacket_7
   \   0000009C   860100EA           B        ??ANPRO10_IO_UnpackPacket_8
    472                      switch ( pCH->CommandNo ) {
    473                      case CMD_REP_RS4_ADBUF:
    474                          {
    475                              //bool DataIsValid = (bool)Buf[0];
    476                              U8 Ch = Buf[1];
    477                              SignalConverter *SConverter = FindSignalConverter(Ch);
   \                     ??ANPRO10_IO_UnpackPacket_6:
   \   000000A0   0110D5E5           LDRB     R1,[R5, #+1]
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           _BLF     ??FindSignalConverter,??FindSignalConverter??rA
   \   000000AC   0020B0E1           MOVS     R2,R0
    478                              if ( SConverter ) {
   \   000000B0   8101000A           BEQ      ??ANPRO10_IO_UnpackPacket_8
    479                                  SConverter->GetEEPromData(&Buf[2]);
   \   000000B4   A42090E5           LDR      R2,[R0, #+164]
   \   000000B8   021085E2           ADD      R1,R5,#+2
   \   000000BC   8C2092E5           LDR      R2,[R2, #+140]
   \   000000C0   0FE0A0E1           MOV      LR,PC
   \   000000C4   12FF2FE1           BX       R2
   \   000000C8   7B0100EA           B        ??ANPRO10_IO_UnpackPacket_8
    480                              }
    481                          }
   \                     ??ANPRO10_IO_UnpackPacket_1:
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   0110CDE5           STRB     R1,[SP, #+1]
   \   000000D4   860100EA           B        ??ANPRO10_IO_UnpackPacket_9
    482                          break;
    483                      case CMD_SND_RS4_WHBUF:
    484                          {
    485                              SgCnvWHDataStruct &MsrdData = *(SgCnvWHDataStruct *)Buf;
    486                              // Know where we start. We must start with the current count from AN-SGCNV
    487          
    488                              for ( int i = 0; i < MAX_WASHTRACK_CHANNELS; i++ ) {
   \                     ??ANPRO10_IO_UnpackPacket_7:
   \   000000D8   0070A0E3           MOV      R7,#+0
    489                                  if ( SoftwareVersion >= 12 ) {
   \                     ??ANPRO10_IO_UnpackPacket_10:
   \   000000DC   5C0194E5           LDR      R0,[R4, #+348]
   \   000000E0   87B085E0           ADD      R11,R5,R7, LSL #+1
   \   000000E4   87A085E0           ADD      R10,R5,R7, LSL #+1
   \   000000E8   076184E0           ADD      R6,R4,R7, LSL #+2
   \   000000EC   0C0050E3           CMP      R0,#+12
   \   000000F0   3100003A           BCC      ??ANPRO10_IO_UnpackPacket_11
    490                                      float Counter = MsrdData.Counter[i];
   \   000000F4   0100DAE5           LDRB     R0,[R10, #+1]
   \   000000F8   0010DBE5           LDRB     R1,[R11, #+0]
   \   000000FC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000100   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
    491                                      if ( MsrdData.Ticks && Counter > 1.0 ) {
   \   00000104   0A10D5E5           LDRB     R1,[R5, #+10]
   \   00000108   0920D5E5           LDRB     R2,[R5, #+9]
   \   0000010C   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   00000110   2300000A           BEQ      ??ANPRO10_IO_UnpackPacket_12
   \   00000114   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000118   0080A0E1           MOV      R8,R0
   \   0000011C   0190A0E1           MOV      R9,R1
   \   00000120   0120A0E3           MOV      R2,#+1
   \   00000124   C035A0E3           MOV      R3,#+805306368
   \   00000128   FF3683E3           ORR      R3,R3,#0xFF00000
   \   0000012C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   1A00000A           BEQ      ??ANPRO10_IO_UnpackPacket_12
    492                                          WashTrackCnt[i]  += MsrdData.Counter[i];
   \   00000138   0110DAE5           LDRB     R1,[R10, #+1]
   \   0000013C   0020DBE5           LDRB     R2,[R11, #+0]
   \   00000140   680296E5           LDR      R0,[R6, #+616]
    493                                          WashTrackSpeed[i] = 60000.0 / 4.0 * Counter / float(MsrdData.Ticks); // 4 pulses per rotation
   \   00000144   0930A0E1           MOV      R3,R9
   \   00000148   011482E1           ORR      R1,R2,R1, LSL #+8
   \   0000014C   000081E0           ADD      R0,R1,R0
   \   00000150   A8159FE5           LDR      R1,??ANPRO10_IO_UnpackPacket_13  ;; 0x40cd4c00
   \   00000154   680286E5           STR      R0,[R6, #+616]
   \   00000158   0000A0E3           MOV      R0,#+0
   \   0000015C   0820A0E1           MOV      R2,R8
   \   00000160   ........           _BLF     __dMul,??__dMul??rA
   \   00000164   0080A0E1           MOV      R8,R0
   \   00000168   0A00D5E5           LDRB     R0,[R5, #+10]
   \   0000016C   0190A0E1           MOV      R9,R1
   \   00000170   0910D5E5           LDRB     R1,[R5, #+9]
   \   00000174   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000178   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000017C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000180   0020A0E1           MOV      R2,R0
   \   00000184   0130A0E1           MOV      R3,R1
   \   00000188   0800A0E1           MOV      R0,R8
   \   0000018C   0910A0E1           MOV      R1,R9
   \   00000190   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000194   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??ANPRO10_IO_UnpackPacket_14:
   \   00000198   780286E5           STR      R0,[R6, #+632]
    494                                          WashTrackNoMoveCnt[i] = 0;
   \   0000019C   0000A0E3           MOV      R0,#+0
   \   000001A0   150000EA           B        ??ANPRO10_IO_UnpackPacket_15
    495                                      } else {
    496                                          if ( WashTrackNoMoveCnt[i] > 2 ) {
   \                     ??ANPRO10_IO_UnpackPacket_12:
   \   000001A4   580296E5           LDR      R0,[R6, #+600]
   \   000001A8   030050E3           CMP      R0,#+3
   \   000001AC   1100003A           BCC      ??ANPRO10_IO_UnpackPacket_16
    497                                              WashTrackSpeed[i] = 0.0;
   \                     ??ANPRO10_IO_UnpackPacket_17:
   \   000001B0   0000A0E3           MOV      R0,#+0
   \   000001B4   780286E5           STR      R0,[R6, #+632]
   \   000001B8   100000EA           B        ??ANPRO10_IO_UnpackPacket_18
    498                                          } else {
    499                                              WashTrackNoMoveCnt[i]++;
    500                                          }
    501                                      }
    502                                  } else {
    503                                      // Avoid divide by zero. ElapsedTicks shold never be 0 anyway
    504                                      // Can only detect that the machine moves, but not the speed
    505                                      if ( WashTrackCnt[i] != MsrdData.Counter[i] ) {
   \                     ??ANPRO10_IO_UnpackPacket_11:
   \   000001BC   0110DAE5           LDRB     R1,[R10, #+1]
   \   000001C0   0020DBE5           LDRB     R2,[R11, #+0]
   \   000001C4   680296E5           LDR      R0,[R6, #+616]
   \   000001C8   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000001CC   010050E1           CMP      R0,R1
   \   000001D0   0500000A           BEQ      ??ANPRO10_IO_UnpackPacket_19
    506                                          WashTrackCnt[i] = MsrdData.Counter[i];
   \   000001D4   0100DAE5           LDRB     R0,[R10, #+1]
   \   000001D8   000482E1           ORR      R0,R2,R0, LSL #+8
   \   000001DC   680286E5           STR      R0,[R6, #+616]
    507                                          WashTrackSpeed[i] = 100.0;
   \   000001E0   4004A0E3           MOV      R0,#+1073741824
   \   000001E4   B20780E3           ORR      R0,R0,#0x2C80000
   \   000001E8   EAFFFFEA           B        ??ANPRO10_IO_UnpackPacket_14
    508                                          WashTrackNoMoveCnt[i] = 0;
    509                                      } else {
    510                                          if ( WashTrackNoMoveCnt[i] > 4 ) {
   \                     ??ANPRO10_IO_UnpackPacket_19:
   \   000001EC   580296E5           LDR      R0,[R6, #+600]
   \   000001F0   050050E3           CMP      R0,#+5
   \   000001F4   EDFFFF2A           BCS      ??ANPRO10_IO_UnpackPacket_17
    511                                              WashTrackSpeed[i] = 0.0;
    512                                          } else {
    513                                              WashTrackNoMoveCnt[i]++;
   \                     ??ANPRO10_IO_UnpackPacket_16:
   \   000001F8   010080E2           ADD      R0,R0,#+1
   \                     ??ANPRO10_IO_UnpackPacket_15:
   \   000001FC   580286E5           STR      R0,[R6, #+600]
    514                                          }
    515                                      }
    516                                  }
    517                                  if ( IOComponentWT[i] ) {
   \                     ??ANPRO10_IO_UnpackPacket_18:
   \   00000200   E40296E5           LDR      R0,[R6, #+740]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   1800000A           BEQ      ??ANPRO10_IO_UnpackPacket_20
    518                                      IOComponentWT[i]->NewValue(WashTrackSpeed[i]);
   \   0000020C   A42090E5           LDR      R2,[R0, #+164]
   \   00000210   781296E5           LDR      R1,[R6, #+632]
   \   00000214   682092E5           LDR      R2,[R2, #+104]
   \   00000218   0FE0A0E1           MOV      LR,PC
   \   0000021C   12FF2FE1           BX       R2
    519                                      IOComponentWT[i]->ActiveAlarms = CheckAlarms(IOComponentWT[i]->AlarmSet, &IOComponentWT[i]->MyHWFailure);
   \   00000220   E41296E5           LDR      R1,[R6, #+740]
   \   00000224   0D00A0E3           MOV      R0,#+13
   \   00000228   400F80E3           ORR      R0,R0,#0x100
   \   0000022C   011080E0           ADD      R1,R0,R1
   \   00000230   E40296E5           LDR      R0,[R6, #+740]
   \   00000234   C00080E2           ADD      R0,R0,#+192
   \   00000238   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   0000023C   E41296E5           LDR      R1,[R6, #+740]
   \   00000240   380081E5           STR      R0,[R1, #+56]
    520                                      IOComponentWT[i]->Calculate();
   \   00000244   E40296E5           LDR      R0,[R6, #+740]
   \   00000248   A41090E5           LDR      R1,[R0, #+164]
   \   0000024C   601091E5           LDR      R1,[R1, #+96]
   \   00000250   0FE0A0E1           MOV      LR,PC
   \   00000254   11FF2FE1           BX       R1
    521                                      IOComponentWT[i]->SendData();
   \   00000258   E40296E5           LDR      R0,[R6, #+740]
   \   0000025C   6510A0E3           MOV      R1,#+101
   \   00000260   A42090E5           LDR      R2,[R0, #+164]
   \   00000264   402092E5           LDR      R2,[R2, #+64]
   \   00000268   0FE0A0E1           MOV      LR,PC
   \   0000026C   12FF2FE1           BX       R2
    522                                  }
    523                              }
   \                     ??ANPRO10_IO_UnpackPacket_20:
   \   00000270   017087E2           ADD      R7,R7,#+1
   \   00000274   040057E3           CMP      R7,#+4
   \   00000278   97FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_10
    524          
    525                              for ( int i = 0; i < MAX_LEVEL_SWITCH_CHANNELS; i++ ) {
   \   0000027C   0000A0E3           MOV      R0,#+0
   \   00000280   030000EA           B        ??ANPRO10_IO_UnpackPacket_21
    526                                  LevelSwitch[i] = (MsrdData.LevelSwitch >> i) & 0x01;
   \                     ??ANPRO10_IO_UnpackPacket_22:
   \   00000284   8822C1E5           STRB     R2,[R1, #+648]
   \   00000288   010080E2           ADD      R0,R0,#+1
   \   0000028C   080050E3           CMP      R0,#+8
   \   00000290   090100AA           BGE      ??ANPRO10_IO_UnpackPacket_8
   \                     ??ANPRO10_IO_UnpackPacket_21:
   \   00000294   0810D5E5           LDRB     R1,[R5, #+8]
   \   00000298   5110A0E1           ASR      R1,R1,R0
   \   0000029C   010011E3           TST      R1,#0x1
   \   000002A0   041080E0           ADD      R1,R0,R4
   \   000002A4   0020A003           MOVEQ    R2,#+0
   \   000002A8   0120A013           MOVNE    R2,#+1
   \   000002AC   F4FFFFEA           B        ??ANPRO10_IO_UnpackPacket_22
    527                              }
    528                          }
    529                          break;
    530                      case CMD_REP_RS4_MDATA:
    531                          {
    532                              SgCnvMeasuredDataStruct &MsrdData = *(SgCnvMeasuredDataStruct *)Buf;
    533                              if ( MsrdData.IOChannel == IOChannel ) {
   \                     ??ANPRO10_IO_UnpackPacket_4:
   \   000002B0   0000D5E5           LDRB     R0,[R5, #+0]
   \   000002B4   7C1194E5           LDR      R1,[R4, #+380]
   \   000002B8   010050E1           CMP      R0,R1
   \   000002BC   FE00001A           BNE      ??ANPRO10_IO_UnpackPacket_8
    534                                  IOUnitZB485 &ZB485Module = *(IOUnitZB485 *)IOModule;
    535                                  IOUnitStatus = MsrdData.IOUnitStatus;
   \   000002C0   0110D5E5           LDRB     R1,[R5, #+1]
   \   000002C4   686194E5           LDR      R6,[R4, #+360]
   \   000002C8   610FA0E3           MOV      R0,#+388
   \   000002CC   0410C0E7           STRB     R1,[R0, +R4]
    536                                  U8 TmpStatus = IOUnitStatus >> 4;
   \   000002D0   2172B0E1           LSRS     R7,R1,#+4
    537                                  if ( TmpStatus ) {
    538                                      ZB485Module.ResetStatus = TmpStatus;
   \   000002D4   A471C615           STRBNE   R7,[R6, #+420]
    539                                      ZB485Module.Restart = true;
   \   000002D8   0100A013           MOVNE    R0,#+1
   \   000002DC   A501C615           STRBNE   R0,[R6, #+421]
    540                                  }
    541                                  FailCnt = MsrdData.FailCnt;
   \   000002E0   0300D5E5           LDRB     R0,[R5, #+3]
   \   000002E4   0210D5E5           LDRB     R1,[R5, #+2]
    542                                  FailCntTotal = MsrdData.FailCntTotal;
    543                                  SoftwareVersion = MsrdData.TargetStatusSWVer;
    544                                  SCAddress = MsrdData.TargetStatusAddress & 0x7f;
    545                                  Restart = (bool)(MsrdData.TargetStatusAddress >> 7);
   \   000002E8   568FA0E3           MOV      R8,#+344
   \   000002EC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002F0   540184E5           STR      R0,[R4, #+340]
   \   000002F4   0500D5E5           LDRB     R0,[R5, #+5]
   \   000002F8   0410D5E5           LDRB     R1,[R5, #+4]
   \   000002FC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000300   500184E5           STR      R0,[R4, #+336]
   \   00000304   0600D5E5           LDRB     R0,[R5, #+6]
    546                                  ActiveAlarms = CheckAlarms(AlarmSet);
   \   00000308   0010A0E3           MOV      R1,#+0
   \   0000030C   5C0184E5           STR      R0,[R4, #+348]
   \   00000310   0700D5E5           LDRB     R0,[R5, #+7]
   \   00000314   7F0000E2           AND      R0,R0,#0x7F
   \   00000318   800184E5           STR      R0,[R4, #+384]
   \   0000031C   0700D5E5           LDRB     R0,[R5, #+7]
   \   00000320   800010E3           TST      R0,#0x80
   \   00000324   0100A013           MOVNE    R0,#+1
   \   00000328   0000A003           MOVEQ    R0,#+0
   \   0000032C   0400C8E7           STRB     R0,[R8, +R4]
   \   00000330   E40084E2           ADD      R0,R4,#+228
   \   00000334   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000338   380084E5           STR      R0,[R4, #+56]
    547                                  if ( !Restart ) {
   \   0000033C   0400D8E7           LDRB     R0,[R8, +R4]
   \   00000340   000050E3           CMP      R0,#+0
   \   00000344   DC00001A           BNE      ??ANPRO10_IO_UnpackPacket_8
    548                                      if ( !ActiveAlarms && !TmpStatus ) {
   \   00000348   380094E5           LDR      R0,[R4, #+56]
   \   0000034C   000050E3           CMP      R0,#+0
   \   00000350   00005703           CMPEQ    R7,#+0
   \   00000354   9900001A           BNE      ??ANPRO10_IO_UnpackPacket_23
    549                                          U8 TxBuf[2 * BUF_SIZE];
    550                                          int Size = 0;
    551                                          RecalcTanks = true;
   \   00000358   0110A0E3           MOV      R1,#+1
   \   0000035C   0010CDE5           STRB     R1,[SP, #+0]
   \   00000360   3820A0E3           MOV      R2,#+56
   \   00000364   A40F81E3           ORR      R0,R1,#0x290
   \   00000368   041080E0           ADD      R1,R0,R4
   \   0000036C   B0008DE2           ADD      R0,SP,#+176
    552                                          ConfigPacket tmpADConfigData[MAX_AN_SGCNV_CHANNELS];
    553                                          memcpy((void *)&tmpADConfigData, (void *)&ADConfigData, sizeof(tmpADConfigData));
   \   00000370   ........           _BLF     memcpy,??memcpy??rA
    554                                          for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000374   00A0A0E3           MOV      R10,#+0
   \   00000378   768FA0E3           MOV      R8,#+472
    555                                              ((U8 *)&ADConfigData[i])[0] = MsrdData.Channel[i].Status1;
   \                     ??ANPRO10_IO_UnpackPacket_24:
   \   0000037C   0610A0E3           MOV      R1,#+6
   \   00000380   915A20E0           MLA      R0,R1,R10,R5
   \   00000384   0810D0E5           LDRB     R1,[R0, #+8]
   \   00000388   0AB184E0           ADD      R11,R4,R10, LSL #+2
    556                                              ((U8 *)&ADConfigData[i])[1] = MsrdData.Channel[i].Status2;
    557                                              // Check channel status eeprom setup, (Refreshed on AN485 every 15 sec.
    558                                              // Check sensor type and parameters, if fault, download sensor type
    559                                              // and sensor parameters
    560                                              MsrdValues[i] = MsrdData.Channel[i].MsrdValue;
   \   0000038C   0C208DE2           ADD      R2,SP,#+12
   \   00000390   9112CBE5           STRB     R1,[R11, #+657]
   \   00000394   0910D0E5           LDRB     R1,[R0, #+9]
   \   00000398   9212CBE5           STRB     R1,[R11, #+658]
   \   0000039C   0010A0E3           MOV      R1,#+0
   \                     ??ANPRO10_IO_UnpackPacket_25:
   \   000003A0   0A3080E2           ADD      R3,R0,#+10
   \   000003A4   0330D1E7           LDRB     R3,[R1, +R3]
   \   000003A8   0230C1E7           STRB     R3,[R1, +R2]
   \   000003AC   011081E2           ADD      R1,R1,#+1
   \   000003B0   040051E3           CMP      R1,#+4
   \   000003B4   F9FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_25
   \   000003B8   0C009DE5           LDR      R0,[SP, #+12]
   \   000003BC   0B0088E7           STR      R0,[R8, +R11]
    561                                              PROIOComponent *CompPtr = IOComponent[i];
   \   000003C0   A0919BE5           LDR      R9,[R11, #+416]
    562                                              if ( CompPtr ) {
   \   000003C4   000059E3           CMP      R9,#+0
   \   000003C8   6600000A           BEQ      ??ANPRO10_IO_UnpackPacket_26
    563                                                  //int Test = ADConfigData[i].EEPromStatus;
    564          #ifdef S2TXU
    565                                                  int Index = IOChannel / 4;
   \   000003CC   7C0194E5           LDR      R0,[R4, #+380]
    566                                                  int DownloadEEPROMTime = abs(OS_Time - ZB485Module.DownloadEEPROMTime[Index]);
    567                                                  switch ( CompPtr->Type ) {
   \   000003D0   3EC0A0E3           MOV      R12,#+62
   \   000003D4   C010A0E1           ASR      R1,R0,#+1
   \   000003D8   210F80E0           ADD      R0,R0,R1, LSR #+30
   \   000003DC   ........           LDR      R1,??DataTable14  ;; OS_Time
   \   000003E0   4001A0E1           ASR      R0,R0,#+2
   \   000003E4   002091E5           LDR      R2,[R1, #+0]
   \   000003E8   000186E0           ADD      R0,R6,R0, LSL #+2
   \   000003EC   AC3190E5           LDR      R3,[R0, #+428]
   \   000003F0   80CE8CE3           ORR      R12,R12,#0x800
   \   000003F4   032052E0           SUBS     R2,R2,R3
   \   000003F8   A03099E5           LDR      R3,[R9, #+160]
   \   000003FC   00206242           RSBMI    R2,R2,#+0
   \   00000400   0C0053E1           CMP      R3,R12
   \   00000404   01C08C13           ORRNE    R12,R12,#0x1
   \   00000408   0C005311           CMPNE    R3,R12
   \   0000040C   15C08C12           ADDNE    R12,R12,#+21
   \   00000410   0C005311           CMPNE    R3,R12
    568                                                  case C_AI_1728 :
    569                                                  case C_AI_P906_0110 :
    570                                                  case C_AI_P906_0111 :
    571                                                      if ( (!ADConfigData[i].CalError && !ADConfigData[i].ConvError && !ADConfigData[i].EEPUsePCData && (ADConfigData[i].EEP_PCStatus != 0x1))
    572                                                           && (DownloadEEPROMTime > IO_DELAY) ) {
   \   00000414   9132DB05           LDRBEQ   R3,[R11, #+657]
   \   00000418   02001303           TSTEQ    R3,#0x2
   \   0000041C   9132DB05           LDRBEQ   R3,[R11, #+657]
   \   00000420   01001303           TSTEQ    R3,#0x1
   \   00000424   9232DB05           LDRBEQ   R3,[R11, #+658]
   \   00000428   80CEA003           MOVEQ    R12,#+2048
   \   0000042C   03340C00           ANDEQ    R3,R12,R3, LSL #+8
   \   00000430   A335B001           LSRSEQ   R3,R3,#+11
   \   00000434   1F00001A           BNE      ??ANPRO10_IO_UnpackPacket_27
   \   00000438   9232DBE5           LDRB     R3,[R11, #+658]
   \   0000043C   70CEA0E3           MOV      R12,#+1792
   \   00000440   03340CE0           AND      R3,R12,R3, LSL #+8
   \   00000444   2334A0E1           LSR      R3,R3,#+8
   \   00000448   010053E3           CMP      R3,#+1
   \   0000044C   1900000A           BEQ      ??ANPRO10_IO_UnpackPacket_27
   \   00000450   8930A0E3           MOV      R3,#+137
   \   00000454   4C3D83E3           ORR      R3,R3,#0x1300
   \   00000458   030052E1           CMP      R2,R3
   \   0000045C   150000BA           BLT      ??ANPRO10_IO_UnpackPacket_27
    573                                                          switch ( ADConfigData[i].EEPromStatus ) {
   \   00000460   9222DBE5           LDRB     R2,[R11, #+658]
   \   00000464   0224A0E1           LSL      R2,R2,#+8
   \   00000468   2226A0E1           LSR      R2,R2,#+12
   \   0000046C   020052E3           CMP      R2,#+2
   \   00000470   1000001A           BNE      ??ANPRO10_IO_UnpackPacket_27
    574                                                          case AD_EEPROM_OK :
    575                                                          case AD_NOT_USED :
    576                                                          case AD_NO_EEPROM :
    577                                                              break;
    578                                                          case AD_EEPROM_ERROR:
    579                                                              {
    580          
    581                                                                  AIPressSensor_mV &SnsPtr = *(AIPressSensor_mV *)CompPtr;
    582                                                                  ZB485Module.DownloadEEPROMTime[Index] = OS_Time;
   \   00000474   001091E5           LDR      R1,[R1, #+0]
   \   00000478   AC1180E5           STR      R1,[R0, #+428]
    583                                                                  // Check that our sensor has EEProm
    584                                                                  // When user input of cal data, this logic must be improved
    585                                                                  U8 EEPData[EEPROM_SIZE + 2] = { i };     // Reference AN_PRO1. Command 18
   \   0000047C   E8A0CDE5           STRB     R10,[SP, #+232]
    586                                                                  SnsPtr.PackSensorData(&EEPData[1]);
   \   00000480   E9108DE2           ADD      R1,SP,#+233
   \   00000484   0900A0E1           MOV      R0,R9
   \   00000488   ........           _BLF     ??PackSensorData,??PackSensorData??rA
    587                                                                  EEPData[41] = 1;   // Use data from the PC
   \   0000048C   0110A0E3           MOV      R1,#+1
   \   00000490   1111CDE5           STRB     R1,[SP, #+273]
    588                                                                  Size += AddCommand(TxBuf, ANP1_SND_EEP_DATA, EEPROM_SIZE + 2, EEPData);
   \   00000494   E8008DE2           ADD      R0,SP,#+232
   \   00000498   01002DE9           PUSH     {R0}
   \   0000049C   2A30A0E3           MOV      R3,#+42
   \   000004A0   1220A0E3           MOV      R2,#+18
   \   000004A4   14108DE2           ADD      R1,SP,#+20
   \   000004A8   0400A0E1           MOV      R0,R4
   \   000004AC   ........           BL       ??AddCommand
   \   000004B0   077080E0           ADD      R7,R0,R7
   \   000004B4   04D08DE2           ADD      SP,SP,#+4
    589                                                              }
    590                                                              break;
    591                                                          }
    592                                                      }
    593                                                      break;
    594                                                  default:
    595                                                      break;
    596                                                  }
    597          #endif
    598                                                  if ( ((SensorType[i] == ADConfigData[i].PCSensor)/*&& ADConfigData[i].UsePCSetUp*/)
    599                                                       || (SensorType[i] == ADConfigData[i].FoundSensor) ) {
   \                     ??ANPRO10_IO_UnpackPacket_27:
   \   000004B8   04008AE0           ADD      R0,R10,R4
   \   000004BC   C902D0E5           LDRB     R0,[R0, #+713]
   \   000004C0   9112DBE5           LDRB     R1,[R11, #+657]
   \   000004C4   0C1001E2           AND      R1,R1,#0xC
   \   000004C8   210150E1           CMP      R0,R1, LSR #+2
   \   000004CC   0500000A           BEQ      ??ANPRO10_IO_UnpackPacket_28
   \   000004D0   04008AE0           ADD      R0,R10,R4
   \   000004D4   C902D0E5           LDRB     R0,[R0, #+713]
   \   000004D8   9112DBE5           LDRB     R1,[R11, #+657]
   \   000004DC   601001E2           AND      R1,R1,#0x60
   \   000004E0   A10250E1           CMP      R0,R1, LSR #+5
   \   000004E4   1D00001A           BNE      ??ANPRO10_IO_UnpackPacket_29
    600                                                      CompPtr->SetStatus((U8 *)&ADConfigData[i]);
   \                     ??ANPRO10_IO_UnpackPacket_28:
   \   000004E8   A42099E5           LDR      R2,[R9, #+164]
   \   000004EC   B90088E2           ADD      R0,R8,#+185
   \   000004F0   642092E5           LDR      R2,[R2, #+100]
   \   000004F4   0B1080E0           ADD      R1,R0,R11
   \   000004F8   0900A0E1           MOV      R0,R9
   \   000004FC   0FE0A0E1           MOV      LR,PC
   \   00000500   12FF2FE1           BX       R2
    601                                                      CompPtr->NewValue(MsrdValues[i]);
   \   00000504   0B1098E7           LDR      R1,[R8, +R11]
   \   00000508   A42099E5           LDR      R2,[R9, #+164]
   \   0000050C   0900A0E1           MOV      R0,R9
   \   00000510   682092E5           LDR      R2,[R2, #+104]
   \   00000514   0FE0A0E1           MOV      LR,PC
   \   00000518   12FF2FE1           BX       R2
    602                                                      CompPtr->ActiveAlarms = CheckAlarms(CompPtr->AlarmSet, &CompPtr->MyHWFailure);
   \   0000051C   CB0048E2           SUB      R0,R8,#+203
   \   00000520   091080E0           ADD      R1,R0,R9
   \   00000524   C00089E2           ADD      R0,R9,#+192
   \   00000528   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   0000052C   380089E5           STR      R0,[R9, #+56]
    603                                                      CompPtr->Calculate();
   \   00000530   A41099E5           LDR      R1,[R9, #+164]
   \   00000534   0900A0E1           MOV      R0,R9
   \   00000538   601091E5           LDR      R1,[R1, #+96]
   \   0000053C   0FE0A0E1           MOV      LR,PC
   \   00000540   11FF2FE1           BX       R1
    604                                                      CompPtr->SendData();
   \   00000544   A42099E5           LDR      R2,[R9, #+164]
   \   00000548   6510A0E3           MOV      R1,#+101
   \   0000054C   402092E5           LDR      R2,[R2, #+64]
   \   00000550   0900A0E1           MOV      R0,R9
   \   00000554   0FE0A0E1           MOV      LR,PC
   \   00000558   12FF2FE1           BX       R2
   \   0000055C   010000EA           B        ??ANPRO10_IO_UnpackPacket_26
    605                                                  } else {
    606                                                      RequestADConfig = 3;
   \                     ??ANPRO10_IO_UnpackPacket_29:
   \   00000560   0300A0E3           MOV      R0,#+3
   \   00000564   480284E5           STR      R0,[R4, #+584]
    607                                                  }
    608                                              }
    609                                          }
   \                     ??ANPRO10_IO_UnpackPacket_26:
   \   00000568   01A08AE2           ADD      R10,R10,#+1
   \   0000056C   0E005AE3           CMP      R10,#+14
   \   00000570   81FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_24
    610                                          if ( Size ) {
   \   00000574   000057E3           CMP      R7,#+0
   \   00000578   0300000A           BEQ      ??ANPRO10_IO_UnpackPacket_30
    611                                              SendToAD(Size, TxBuf);
   \   0000057C   10208DE2           ADD      R2,SP,#+16
   \   00000580   FF1007E2           AND      R1,R7,#0xFF
   \   00000584   0400A0E1           MOV      R0,R4
   \   00000588   ........           BL       ??SendToAD_1
    612                                          }
    613                                          if ( memcmp((void *)&ADConfigData, &tmpADConfigData, sizeof(ADConfigData)) ) {
   \                     ??ANPRO10_IO_UnpackPacket_30:
   \   0000058C   3820A0E3           MOV      R2,#+56
   \   00000590   B0108DE2           ADD      R1,SP,#+176
   \   00000594   B90088E2           ADD      R0,R8,#+185
   \   00000598   040080E0           ADD      R0,R0,R4
   \   0000059C   ........           _BLF     memcmp,??memcmp??rA
   \   000005A0   000050E3           CMP      R0,#+0
   \   000005A4   0500000A           BEQ      ??ANPRO10_IO_UnpackPacket_23
    614                                              SendData(CMD_GENERIC_STATIC_DATA);
   \   000005A8   A42094E5           LDR      R2,[R4, #+164]
   \   000005AC   6610A0E3           MOV      R1,#+102
   \   000005B0   402092E5           LDR      R2,[R2, #+64]
   \   000005B4   0400A0E1           MOV      R0,R4
   \   000005B8   0FE0A0E1           MOV      LR,PC
   \   000005BC   12FF2FE1           BX       R2
    615                                          }
    616                                      }
    617                                      SetHWFailure((bool)ActiveAlarms);
   \                     ??ANPRO10_IO_UnpackPacket_23:
   \   000005C0   380094E5           LDR      R0,[R4, #+56]
   \   000005C4   A42094E5           LDR      R2,[R4, #+164]
   \   000005C8   000050E3           CMP      R0,#+0
   \   000005CC   842092E5           LDR      R2,[R2, #+132]
   \   000005D0   0110A013           MOVNE    R1,#+1
   \   000005D4   0010A003           MOVEQ    R1,#+0
   \   000005D8   0400A0E1           MOV      R0,R4
   \   000005DC   0FE0A0E1           MOV      LR,PC
   \   000005E0   12FF2FE1           BX       R2
    618                                      SendData();
   \   000005E4   A42094E5           LDR      R2,[R4, #+164]
   \   000005E8   6510A0E3           MOV      R1,#+101
   \   000005EC   402092E5           LDR      R2,[R2, #+64]
   \   000005F0   0400A0E1           MOV      R0,R4
   \   000005F4   0FE0A0E1           MOV      LR,PC
   \   000005F8   12FF2FE1           BX       R2
   \   000005FC   2E0000EA           B        ??ANPRO10_IO_UnpackPacket_8
    619                                  }
    620                              }
    621                          }
    622                          break;
    623                      case CMD_REP_RS4_RDATA:
    624                          {
    625                              SgCnvRawDataStruct &MsrdData = *(SgCnvRawDataStruct *)Buf;
    626                              if ( MsrdData.IOChannel == IOChannel ) {
   \                     ??ANPRO10_IO_UnpackPacket_5:
   \   00000600   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000604   7C1194E5           LDR      R1,[R4, #+380]
   \   00000608   010050E1           CMP      R0,R1
   \   0000060C   2A00001A           BNE      ??ANPRO10_IO_UnpackPacket_8
    627                                  int ErrCnt = 0;
   \   00000610   0000A0E3           MOV      R0,#+0
    628                                  for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000614   0010A0E3           MOV      R1,#+0
    629                                      RawValues[i] = MsrdData.Channel[i][0];
   \                     ??ANPRO10_IO_UnpackPacket_31:
   \   00000618   013185E0           ADD      R3,R5,R1, LSL #+2
   \   0000061C   0260D3E5           LDRB     R6,[R3, #+2]
   \   00000620   0170D3E5           LDRB     R7,[R3, #+1]
   \   00000624   812084E0           ADD      R2,R4,R1, LSL #+1
   \   00000628   842F82E2           ADD      R2,R2,#+528
   \   0000062C   066487E1           ORR      R6,R7,R6, LSL #+8
   \   00000630   BC61C2E1           STRH     R6,[R2, #+28]
    630                                      CalValues[i] = MsrdData.Channel[i][1];
   \   00000634   0460D3E5           LDRB     R6,[R3, #+4]
   \   00000638   0330D3E5           LDRB     R3,[R3, #+3]
    631                                      if ( (RawValues[i] == ADC_ERROR_VALUE) || (CalValues[i] == ADC_CAL_ERROR_VAL1) || (CalValues[i] == ADC_CAL_ERROR_VAL2) ) {
    632                                          ErrCnt++;
    633                                      }
    634                                  }
   \   0000063C   011081E2           ADD      R1,R1,#+1
   \   00000640   063483E1           ORR      R3,R3,R6, LSL #+8
   \   00000644   B030C2E1           STRH     R3,[R2, #+0]
   \   00000648   BC31D2E1           LDRH     R3,[R2, #+28]
   \   0000064C   0160A0E3           MOV      R6,#+1
   \   00000650   D06C86E3           ORR      R6,R6,#0xD000
   \   00000654   060053E1           CMP      R3,R6
   \   00000658   B030D211           LDRHNE   R3,[R2, #+0]
   \   0000065C   800C5313           CMPNE    R3,#+32768
   \   00000660   B020D211           LDRHNE   R2,[R2, #+0]
   \   00000664   503CC613           BICNE    R3,R6,#0x5000
   \   00000668   03005211           CMPNE    R2,R3
   \   0000066C   01008002           ADDEQ    R0,R0,#+1
   \   00000670   0E0051E3           CMP      R1,#+14
   \   00000674   E7FFFFBA           BLT      ??ANPRO10_IO_UnpackPacket_31
    635                                  // If Error count > 6 we must assume the ADC don't work
    636                                  if ( ErrCnt > 6 ) {
   \   00000678   070050E3           CMP      R0,#+7
   \   0000067C   060000BA           BLT      ??ANPRO10_IO_UnpackPacket_32
    637                                      InitSensorTypes(true);
   \   00000680   0110A0E3           MOV      R1,#+1
   \   00000684   0400A0E1           MOV      R0,R4
   \   00000688   ........           BL       ??InitSensorTypes
    638                                      hasForcedPressureSensor = true;
   \   0000068C   0100A0E3           MOV      R0,#+1
   \   00000690   9002C4E5           STRB     R0,[R4, #+656]
    639                                      ForcePowerOff = true;
   \   00000694   8501C4E5           STRB     R0,[R4, #+389]
   \   00000698   070000EA           B        ??ANPRO10_IO_UnpackPacket_8
    640                                  } else {
    641                                      if ( hasForcedPressureSensor ) {
   \                     ??ANPRO10_IO_UnpackPacket_32:
   \   0000069C   9002D4E5           LDRB     R0,[R4, #+656]
   \   000006A0   000050E3           CMP      R0,#+0
   \   000006A4   0400000A           BEQ      ??ANPRO10_IO_UnpackPacket_8
    642                                          InitSensorTypes(false);
   \   000006A8   0010A0E3           MOV      R1,#+0
   \   000006AC   0400A0E1           MOV      R0,R4
   \   000006B0   ........           BL       ??InitSensorTypes
    643                                          hasForcedPressureSensor = false;
   \   000006B4   0000A0E3           MOV      R0,#+0
   \   000006B8   9002C4E5           STRB     R0,[R4, #+656]
    644                                      }
    645                                  }
    646                              }
    647                          }
    648                          break;
    649                          //case CMD_REP_RS4_CDATA:
    650                      case ECMD_NMDWOACK:
    651                      case ECMD_NMDRQACK:
    652                          MoreCommands = false;
    653                          break;
    654                      default:
    655                          break;
    656          
    657                      }
    658                      if ( MoreCommands ) {
    659                          Buf += pCH->ndb;
   \                     ??ANPRO10_IO_UnpackPacket_8:
   \   000006BC   04009DE5           LDR      R0,[SP, #+4]
   \   000006C0   0300D0E5           LDRB     R0,[R0, #+3]
   \   000006C4   04109DE5           LDR      R1,[SP, #+4]
   \   000006C8   0210D1E5           LDRB     R1,[R1, #+2]
   \   000006CC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000006D0   055080E0           ADD      R5,R0,R5
   \   000006D4   08009DE5           LDR      R0,[SP, #+8]
   \   000006D8   000055E1           CMP      R5,R0
   \   000006DC   58FEFF3A           BCC      ??ANPRO10_IO_UnpackPacket_2
    660                      }
    661                  }while ( MoreCommands && (Buf < EndPtr) );
    662                  if ( RecalcTanks ) {
   \                     ??ANPRO10_IO_UnpackPacket_3:
   \   000006E0   0000DDE5           LDRB     R0,[SP, #+0]
   \   000006E4   000050E3           CMP      R0,#+0
   \   000006E8   0100000A           BEQ      ??ANPRO10_IO_UnpackPacket_9
    663                      SetDataTime(UniquePROList);
   \   000006EC   620F84E2           ADD      R0,R4,#+392
   \   000006F0   ........           _BLF     ??SetDataTime,??SetDataTime??rA
    664                  }
    665              }
    666              return (MyPacket);       // We came from ObjectSet
   \                     ??ANPRO10_IO_UnpackPacket_9:
   \   000006F4   0100DDE5           LDRB     R0,[SP, #+1]
   \   000006F8   45DF8DE2           ADD      SP,SP,#+276
   \   000006FC   ........           B        ?Subroutine30
   \                     ??ANPRO10_IO_UnpackPacket_13:
   \   00000700   004CCD40           DC32     0x40cd4c00
    667                                       //return true;
    668          
    669          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    670          

   \                                 In segment CODE, align 4, keep-with-next
    671          void SCADCard::GetEEPromData(U8 *DataPtr) {
   \                     ??GetEEPromData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0020A0E1           MOV      R2,R0
    672              U8 Ch = *DataPtr++;
   \   00000008   ........           LDRB     R0,[R1], #+1
    673              if ( Ch == MAX_AN_SGCNV_CHANNELS ) {
   \   0000000C   0E0050E3           CMP      R0,#+14
   \   00000010   0E00001A           BNE      ??GetEEPromData_1
    674                  SerialNumber = DataPtr[0] | (DataPtr[1] << 8) | (DataPtr[2] << 16) | (DataPtr[3] << 24);
   \   00000014   0000D1E5           LDRB     R0,[R1, #+0]
   \   00000018   0130D1E5           LDRB     R3,[R1, #+1]
   \   0000001C   030480E1           ORR      R0,R0,R3, LSL #+8
   \   00000020   0230D1E5           LDRB     R3,[R1, #+2]
   \   00000024   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000028   030880E1           ORR      R0,R0,R3, LSL #+16
   \   0000002C   010C80E1           ORR      R0,R0,R1, LSL #+24
   \   00000030   600182E5           STR      R0,[R2, #+352]
    675                  SendData(CMD_GENERIC_STATIC_DATA);
   \   00000034   0200A0E1           MOV      R0,R2
   \   00000038   A42092E5           LDR      R2,[R2, #+164]
   \   0000003C   6610A0E3           MOV      R1,#+102
   \   00000040   402092E5           LDR      R2,[R2, #+64]
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
   \   0000004C   550000EA           B        ??GetEEPromData_2
    676              } else if ( Ch < MAX_AN_SGCNV_CHANNELS ) {
   \                     ??GetEEPromData_1:
   \   00000050   5400002A           BCS      ??GetEEPromData_2
   \   00000054   000182E0           ADD      R0,R2,R0, LSL #+2
   \   00000058   9222D0E5           LDRB     R2,[R0, #+658]
   \   0000005C   803EA0E3           MOV      R3,#+2048
   \   00000060   022403E0           AND      R2,R3,R2, LSL #+8
   \   00000064   A225B0E1           LSRS     R2,R2,#+11
   \   00000068   9222D005           LDRBEQ   R2,[R0, #+658]
   \   0000006C   0224A001           LSLEQ    R2,R2,#+8
   \   00000070   2226A001           LSREQ    R2,R2,#+12
   \   00000074   01005203           CMPEQ    R2,#+1
   \   00000078   4A00001A           BNE      ??GetEEPromData_2
    677                  if ( !ADConfigData[Ch].EEPUsePCData && ADConfigData[Ch].EEPromStatus == AD_EEPROM_OK ) {
    678                      PROIOComponent *CompPtr = IOComponent[Ch];
   \   0000007C   A04190E5           LDR      R4,[R0, #+416]
    679                      if ( CompPtr ) {
   \   00000080   000054E3           CMP      R4,#+0
   \   00000084   4700000A           BEQ      ??GetEEPromData_2
    680                          switch ( CompPtr->Type ) {
   \   00000088   A02094E5           LDR      R2,[R4, #+160]
   \   0000008C   3E3083E3           ORR      R3,R3,#0x3E
   \   00000090   030052E1           CMP      R2,R3
   \   00000094   01308313           ORRNE    R3,R3,#0x1
   \   00000098   03005211           CMPNE    R2,R3
   \   0000009C   15308312           ADDNE    R3,R3,#+21
   \   000000A0   03005211           CMPNE    R2,R3
   \   000000A4   3F00001A           BNE      ??GetEEPromData_2
    681                          case C_AI_1728 :
    682                          case C_AI_P906_0110 :
    683                          case C_AI_P906_0111 :
    684                              {
    685                                  U8 OKPacket = 0;
   \   000000A8   0020A0E3           MOV      R2,#+0
    686                                  for ( int i = 1; i < 8; i++ ) {
   \   000000AC   0130A0E3           MOV      R3,#+1
    687                                      OKPacket |= DataPtr[i];
   \                     ??GetEEPromData_3:
   \   000000B0   01C0D3E7           LDRB     R12,[R3, +R1]
    688                                  }
   \   000000B4   013083E2           ADD      R3,R3,#+1
   \   000000B8   080053E3           CMP      R3,#+8
   \   000000BC   02208CE1           ORR      R2,R12,R2
   \   000000C0   FAFFFFBA           BLT      ??GetEEPromData_3
    689                                  if ( OKPacket ) {
   \   000000C4   022CB0E1           LSLS     R2,R2,#+24
   \   000000C8   3600000A           BEQ      ??GetEEPromData_2
    690                                      OKPacket = 0;
   \   000000CC   0020A0E3           MOV      R2,#+0
    691                                      for ( int i = 1; i < 8; i++ ) {
   \   000000D0   0130A0E3           MOV      R3,#+1
    692                                          if ( DataPtr[i] != 0xff ) {
   \                     ??GetEEPromData_4:
   \   000000D4   01C0D3E7           LDRB     R12,[R3, +R1]
    693                                              OKPacket++;
    694                                          }
    695                                      }
   \   000000D8   013083E2           ADD      R3,R3,#+1
   \   000000DC   FF005CE3           CMP      R12,#+255
   \   000000E0   01208212           ADDNE    R2,R2,#+1
   \   000000E4   FF200212           ANDNE    R2,R2,#0xFF
   \   000000E8   080053E3           CMP      R3,#+8
   \   000000EC   F8FFFFBA           BLT      ??GetEEPromData_4
    696                                      if ( OKPacket ) {
   \   000000F0   000052E3           CMP      R2,#+0
   \   000000F4   2B00000A           BEQ      ??GetEEPromData_2
    697                                          // Make one additional check
    698                                          OKPacket = 0;    // Changed in Ulsan EHS 16/1/1
   \   000000F8   0020A0E3           MOV      R2,#+0
    699                                          for ( int i = 10; i < 20; i++ ) {
   \   000000FC   0A30A0E3           MOV      R3,#+10
    700                                              OKPacket |= DataPtr[i];
   \                     ??GetEEPromData_5:
   \   00000100   01C0D3E7           LDRB     R12,[R3, +R1]
    701                                          }
   \   00000104   013083E2           ADD      R3,R3,#+1
   \   00000108   140053E3           CMP      R3,#+20
   \   0000010C   02208CE1           ORR      R2,R12,R2
   \   00000110   FAFFFFBA           BLT      ??GetEEPromData_5
    702                                          if ( OKPacket ) {
   \   00000114   022CB0E1           LSLS     R2,R2,#+24
   \   00000118   1200000A           BEQ      ??GetEEPromData_6
    703                                              AIPressSensor_mV *SnsPtr = (AIPressSensor_mV *)CompPtr;
    704                                              if ( SnsPtr->UnpackSensorData(DataPtr) ) {
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           _BLF     ??UnpackSensorData,??UnpackSensorData??rA
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   1E00000A           BEQ      ??GetEEPromData_2
    705                                                  SnsPtr->SendData(CMD_GENERIC_STATIC_DATA);
   \   0000012C   A42094E5           LDR      R2,[R4, #+164]
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   402092E5           LDR      R2,[R2, #+64]
    706                                                  if ( OS_IsTask(&SaveConfigTaskHandle) ) {
   \   00000138   6C409FE5           LDR      R4,??GetEEPromData_7  ;; SaveConfigTaskHandle
   \   0000013C   6610A0E3           MOV      R1,#+102
   \   00000140   0FE0A0E1           MOV      LR,PC
   \   00000144   12FF2FE1           BX       R2
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     OS_IsTask,??OS_IsTask??rA
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   1300000A           BEQ      ??GetEEPromData_2
    707                                                      OS_SignalEvent(FLASH_WRITE_CONFIG_DELAY, &SaveConfigTaskHandle);
   \   00000158   0410A0E1           MOV      R1,R4
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   ........           _BLF     OS_SignalEvent,??OS_SignalEvent??rA
   \   00000164   0F0000EA           B        ??GetEEPromData_2
    708                                                  }
    709                                              }
    710                                          } else {
    711                                              ADConfigData[Ch].EEPromStatus = AD_EEPROM_ERROR;
   \                     ??GetEEPromData_6:
   \   00000168   9412D0E5           LDRB     R1,[R0, #+660]
   \   0000016C   9322D0E5           LDRB     R2,[R0, #+659]
   \   00000170   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000174   9222D0E5           LDRB     R2,[R0, #+658]
   \   00000178   011482E1           ORR      R1,R2,R1, LSL #+8
   \   0000017C   9122D0E5           LDRB     R2,[R0, #+657]
   \   00000180   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000184   F01CC1E3           BIC      R1,R1,#0xF000
   \   00000188   801D81E3           ORR      R1,R1,#0x2000
   \   0000018C   9112C0E5           STRB     R1,[R0, #+657]
   \   00000190   2114A0E1           LSR      R1,R1,#+8
   \   00000194   9212C0E5           STRB     R1,[R0, #+658]
   \   00000198   2114A0E1           LSR      R1,R1,#+8
   \   0000019C   9312C0E5           STRB     R1,[R0, #+659]
   \   000001A0   2114A0E1           LSR      R1,R1,#+8
   \   000001A4   9412C0E5           STRB     R1,[R0, #+660]
    712                                          }
    713                                      }
    714                                  }
    715                              }
    716                              break;
    717                          default:
    718                              break;
    719                          }
    720                      }
    721                  }
    722              }
    723          }
   \                     ??GetEEPromData_2:
   \   000001A8   ........           B        ??Subroutine25_0
   \                     ??GetEEPromData_7:
   \   000001AC   ........           DC32     SaveConfigTaskHandle
    724          
    725          

   \                                 In segment CODE, align 4, keep-with-next
    726          void SCADCard::RequestMeasuredData(int DataType) {
   \                     ??RequestMeasuredData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    727              NetPacket Packet;
    728              volatile U8 Data[2] = { (U8)DataType, (U8)IOChannel };
   \   00000008   0010CDE5           STRB     R1,[SP, #+0]
   \   0000000C   7C2190E5           LDR      R2,[R0, #+380]
    729              Packet.Command = CMD_REQ_RS4_DATA;
    730              Packet.RxAddress = IOAddress;
    731              Packet.RxTypeId = DEVICE_ZB485;
    732              Packet.RequestAck = 0;
    733              Packet.Size = 2;
    734              Packet.Data = (U8 *)Data;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0120CDE5           STRB     R2,[SP, #+1]
   \   00000018   7420A0E3           MOV      R2,#+116
   \   0000001C   402E82E3           ORR      R2,R2,#0x400
   \   00000020   B420CDE1           STRH     R2,[SP, #+4]
   \   00000024   782190E5           LDR      R2,[R0, #+376]
   \   00000028   0920CDE5           STRB     R2,[SP, #+9]
   \   0000002C   1020A0E3           MOV      R2,#+16
   \   00000030   0820CDE5           STRB     R2,[SP, #+8]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0A20CDE5           STRB     R2,[SP, #+10]
   \   0000003C   0220A0E3           MOV      R2,#+2
   \   00000040   B620CDE1           STRH     R2,[SP, #+6]
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   10208DE5           STR      R2,[SP, #+16]
   \   0000004C   0B208DE2           ADD      R2,SP,#+11
   \                     ??RequestMeasuredData_1:
   \   00000050   10308DE2           ADD      R3,SP,#+16
   \   00000054   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000058   0230C1E7           STRB     R3,[R1, +R2]
   \   0000005C   011081E2           ADD      R1,R1,#+1
   \   00000060   040051E3           CMP      R1,#+4
   \   00000064   F9FFFFBA           BLT      ??RequestMeasuredData_1
    735              SendPacket(Packet);
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   ........           _BLF     ??SendPacket,??SendPacket??rA
    736          }
   \   00000070   14D08DE2           ADD      SP,SP,#+20
   \   00000074   ........           B        ?Subroutine29
    737          

   \                                 In segment CODE, align 4, keep-with-next
    738          bool SCADCard::HandleCard(int Delay) {
   \                     ??HandleCard:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    739              bool ReceivedAnswer = false;
    740          
    741              int Index = IOChannel / 4;
    742              IOUnitZB485 &ZB485Module = *(IOUnitZB485 *)IOModule;
    743              int *DownloadTime = &ZB485Module.DownloadEEPROMTime[Index];
    744              if ( abs(OS_Time - *DownloadTime) > IO_DELAY ) {
   \   00000004   ........           LDR      R9,??DataTable14  ;; OS_Time
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   7C0194E5           LDR      R0,[R4, #+380]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   C010A0E1           ASR      R1,R0,#+1
   \   00000018   210F80E0           ADD      R0,R0,R1, LSR #+30
   \   0000001C   681194E5           LDR      R1,[R4, #+360]
   \   00000020   4001A0E1           ASR      R0,R0,#+2
   \   00000024   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000028   6B8F80E2           ADD      R8,R0,#+428
   \   0000002C   000099E5           LDR      R0,[R9, #+0]
   \   00000030   001098E5           LDR      R1,[R8, #+0]
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   010050E0           SUBS     R0,R0,R1
   \   00000040   00006042           RSBMI    R0,R0,#+0
   \   00000044   01A0A0E3           MOV      R10,#+1
   \   00000048   8910A0E3           MOV      R1,#+137
   \   0000004C   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   5B0000BA           BLT      ??HandleCard_2
    745                  if ( Restart ) {
   \   00000058   56BFA0E3           MOV      R11,#+344
   \   0000005C   0400DBE7           LDRB     R0,[R11, +R4]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0C00000A           BEQ      ??HandleCard_3
    746                      if ( IsFirstTime ) {
   \   00000068   5002D4E5           LDRB     R0,[R4, #+592]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400000A           BEQ      ??HandleCard_4
    747                          IsFirstTime = false;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   5002C4E5           STRB     R0,[R4, #+592]
    748                          InitSensorTypes();
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   ........           BL       ??InitSensorTypes
    749                      }
    750                      // Should ask for sensor info for all channels here
    751                      // Should set up filters and sensor cable length etc
    752                      //SendGainAndOffset(); // EHSMark We don't use
    753                      RequestADConfig = 2;
   \                     ??HandleCard_4:
   \   00000088   0200A0E3           MOV      R0,#+2
   \   0000008C   480284E5           STR      R0,[R4, #+584]
    754                      Restart = false;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   0400CBE7           STRB     R0,[R11, +R4]
   \   00000098   4D0000EA           B        ??HandleCard_5
    755                      // Download setup, Sensor types
    756                      // Download filters
    757                      // Use packet 1160
    758                      // Can not download to any other card next 2 seconds
    759                  } else if ( NewSensor ) {
   \                     ??HandleCard_3:
   \   0000009C   560F8AE3           ORR      R0,R10,#0x158
   \   000000A0   0410D0E7           LDRB     R1,[R0, +R4]
   \   000000A4   000051E3           CMP      R1,#+0
    760                      NewSensor = false;
   \   000000A8   0010A013           MOVNE    R1,#+0
   \   000000AC   0410C017           STRBNE   R1,[R0, +R4]
   \   000000B0   4700001A           BNE      ??HandleCard_5
    761                      // Should ask for sensor info for all channels here
    762                  } else { // The normal place
    763                      RequestMeasuredData(0);
   \   000000B4   A42094E5           LDR      R2,[R4, #+164]
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   882092E5           LDR      R2,[R2, #+136]
   \   000000C0   0FE0A0E1           MOV      LR,PC
   \   000000C4   12FF2FE1           BX       R2
    764          
    765                      if ( ANPRO10_IO_Receive(200) ) {
   \   000000C8   C810A0E3           MOV      R1,#+200
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   3000000A           BEQ      ??HandleCard_6
    766                          if ( RequestADConfig ) {
   \   000000DC   480294E5           LDR      R0,[R4, #+584]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   1A00000A           BEQ      ??HandleCard_7
    767                              bool AddDelay = true;
    768                              switch ( RequestADConfig ) {
   \   000000E8   480294E5           LDR      R0,[R4, #+584]
   \   000000EC   010040E2           SUB      R0,R0,#+1
   \   000000F0   020050E3           CMP      R0,#+2
   \   000000F4   0C00008A           BHI      ??HandleCard_8
   \   000000F8   011F8FE2           ADR      R1,??HandleCard_1
   \   000000FC   0010D1E7           LDRB     R1,[R1, R0]
   \   00000100   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HandleCard_1:
   \   00000104   06030000           DC8      +6,+3,+0,+0
    769                              case 3:
    770                                  AddDelay = Correct_AD_Config();
   \                     ??HandleCard_9:
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           BL       ??Correct_AD_Config
   \   00000110   040000EA           B        ??HandleCard_10
    771                                  break;
    772                              case 2:
    773                                  GetADConfigInfo();
   \                     ??HandleCard_11:
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       ??GetADConfigInfo
   \   0000011C   040000EA           B        ??HandleCard_12
    774                                  break;
    775                              case 1:
    776                                  AddDelay = ExtraADSetUp();
   \                     ??HandleCard_13:
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           BL       ??ExtraADSetUp
   \                     ??HandleCard_10:
   \   00000128   00A0A0E1           MOV      R10,R0
    777                                  break;
    778                              }
    779                              if ( AddDelay ) {
   \                     ??HandleCard_8:
   \   0000012C   00005AE3           CMP      R10,#+0
   \   00000130   0300000A           BEQ      ??HandleCard_14
    780                                  *DownloadTime = OS_Time;
   \                     ??HandleCard_12:
   \   00000134   000099E5           LDR      R0,[R9, #+0]
   \   00000138   000088E5           STR      R0,[R8, #+0]
    781                                  OS_Delay(Delay);
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   ........           _BLF     OS_Delay,??OS_Delay??rA
    782                              }
    783                              RequestADConfig--;
   \                     ??HandleCard_14:
   \   00000144   480294E5           LDR      R0,[R4, #+584]
   \   00000148   010040E2           SUB      R0,R0,#+1
   \   0000014C   480284E5           STR      R0,[R4, #+584]
   \   00000150   1F0000EA           B        ??HandleCard_5
    784                          } else if ( RequestRawCnt++ >= 5 ) {
   \                     ??HandleCard_7:
   \   00000154   4C0294E5           LDR      R0,[R4, #+588]
   \   00000158   011080E2           ADD      R1,R0,#+1
   \   0000015C   4C1284E5           STR      R1,[R4, #+588]
   \   00000160   050050E3           CMP      R0,#+5
   \   00000164   1A0000BA           BLT      ??HandleCard_5
    785                              RequestRawCnt = 0;
   \   00000168   4C6284E5           STR      R6,[R4, #+588]
    786                              OS_Delay(Delay);
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   ........           _BLF     OS_Delay,??OS_Delay??rA
    787                              RequestMeasuredData(1);
   \   00000174   A42094E5           LDR      R2,[R4, #+164]
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   882092E5           LDR      R2,[R2, #+136]
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   0FE0A0E1           MOV      LR,PC
   \   00000188   12FF2FE1           BX       R2
    788                              ReceivedAnswer = ANPRO10_IO_Receive();
   \   0000018C   1E10A0E3           MOV      R1,#+30
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
   \   00000198   0070A0E1           MOV      R7,R0
   \   0000019C   0C0000EA           B        ??HandleCard_5
    789                          }
    790                      } else {
    791                          // Be sure that we set HWFailure when no communication
    792                          SetHWFailure((bool)ActiveAlarms);
   \                     ??HandleCard_6:
   \   000001A0   380094E5           LDR      R0,[R4, #+56]
   \   000001A4   A42094E5           LDR      R2,[R4, #+164]
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   842092E5           LDR      R2,[R2, #+132]
   \   000001B0   00A0A003           MOVEQ    R10,#+0
   \   000001B4   0A10A0E1           MOV      R1,R10
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   0FE0A0E1           MOV      LR,PC
   \   000001C0   12FF2FE1           BX       R2
   \   000001C4   020000EA           B        ??HandleCard_5
    793                      }
    794                  }
    795              } else {
    796                  OS_Delay(Delay);
   \                     ??HandleCard_2:
   \   000001C8   0500A0E1           MOV      R0,R5
   \   000001CC   ........           _BLF     OS_Delay,??OS_Delay??rA
    797                  ReceivedAnswer = true;
   \   000001D0   0170A0E3           MOV      R7,#+1
    798              }
    799          
    800              return (ReceivedAnswer);
   \                     ??HandleCard_5:
   \   000001D4   0700A0E1           MOV      R0,R7
   \   000001D8                      REQUIRE ?Subroutine30
   \   000001D8                      ;; // Fall through to label ?Subroutine30
    801          }
    802          #endif
    803          

   \                                 In segment CODE, align 4, keep-with-next
    804          int SCADCard::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   F7402DE9           PUSH     {R0-R2,R4-R7,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0110D4E5           LDRB     R1,[R4, #+1]
   \   0000000C   0020D4E5           LDRB     R2,[R4, #+0]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   540F85E2           ADD      R0,R5,#+336
   \   00000018   011482E1           ORR      R1,R2,R1, LSL #+8
   \   0000001C   651051E2           SUBS     R1,R1,#+101
   \   00000020   0200000A           BEQ      ??ReceiveData_1
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   5E00000A           BEQ      ??ReceiveData_2
   \   0000002C   7D0000EA           B        ??ReceiveData_3
    805              int ErrorStatus = E_OK;
    806              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    807              switch ( pCH->CommandNo ) {
    808              case CMD_GENERIC_REALTIME_DATA:
    809                  {
    810                      ANPRO10_COMMAND_2620 *pData = (ANPRO10_COMMAND_2620 *)data;
    811                      FailCnt = pData->FailCnt;
   \                     ??ReceiveData_1:
   \   00000030   0F10D4E5           LDRB     R1,[R4, #+15]
   \   00000034   0E20D4E5           LDRB     R2,[R4, #+14]
    812                      FailCntTotal = pData->FailCntTotal;
    813                      for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000038   0060A0E3           MOV      R6,#+0
   \   0000003C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000040   0D20D4E5           LDRB     R2,[R4, #+13]
   \   00000044   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000048   0C20D4E5           LDRB     R2,[R4, #+12]
   \   0000004C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000050   041080E5           STR      R1,[R0, #+4]
   \   00000054   0B10D4E5           LDRB     R1,[R4, #+11]
   \   00000058   0A20D4E5           LDRB     R2,[R4, #+10]
   \   0000005C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000060   0920D4E5           LDRB     R2,[R4, #+9]
   \   00000064   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000068   0820D4E5           LDRB     R2,[R4, #+8]
   \   0000006C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000070   001080E5           STR      R1,[R0, #+0]
    814                          MsrdValues[i] = pData->MsrdValues[i];
   \                     ??ReceiveData_4:
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   060184E0           ADD      R0,R4,R6, LSL #+2
   \   0000007C   0D20A0E1           MOV      R2,SP
   \                     ??ReceiveData_5:
   \   00000080   103080E2           ADD      R3,R0,#+16
   \   00000084   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000088   0230C1E7           STRB     R3,[R1, +R2]
   \   0000008C   011081E2           ADD      R1,R1,#+1
   \   00000090   040051E3           CMP      R1,#+4
   \   00000094   F9FFFFBA           BLT      ??ReceiveData_5
   \   00000098   00109DE5           LDR      R1,[SP, #+0]
   \   0000009C   067185E0           ADD      R7,R5,R6, LSL #+2
   \   000000A0   D81187E5           STR      R1,[R7, #+472]
    815                          CalValues[i] = pData->CalValues[i];
   \   000000A4   862084E0           ADD      R2,R4,R6, LSL #+1
   \   000000A8   4930D2E5           LDRB     R3,[R2, #+73]
   \   000000AC   48C0D2E5           LDRB     R12,[R2, #+72]
   \   000000B0   861085E0           ADD      R1,R5,R6, LSL #+1
   \   000000B4   841F81E2           ADD      R1,R1,#+528
   \   000000B8   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   000000BC   B030C1E1           STRH     R3,[R1, #+0]
    816                          RawValues[i] = pData->RawValues[i];
   \   000000C0   6530D2E5           LDRB     R3,[R2, #+101]
   \   000000C4   6420D2E5           LDRB     R2,[R2, #+100]
   \   000000C8   032482E1           ORR      R2,R2,R3, LSL #+8
   \   000000CC   BC21C1E1           STRH     R2,[R1, #+28]
    817                          memcpy((void *)&ADConfigData[i], &pData->ADConfigData[i], sizeof(ConfigPacket));
   \   000000D0   0420A0E3           MOV      R2,#+4
   \   000000D4   801080E2           ADD      R1,R0,#+128
   \   000000D8   9100A0E3           MOV      R0,#+145
   \   000000DC   800F80E3           ORR      R0,R0,#0x200
   \   000000E0   070080E0           ADD      R0,R0,R7
   \   000000E4   ........           _BLF     memcpy,??memcpy??rA
    818                          PROIOComponent *CompPtr = IOComponent[i];
   \   000000E8   A02197E5           LDR      R2,[R7, #+416]
    819                          if ( CompPtr ) {
   \   000000EC   000052E3           CMP      R2,#+0
   \   000000F0   0700000A           BEQ      ??ReceiveData_6
    820                              CompPtr->SetStatus((U8 *)&ADConfigData[i]);
   \   000000F4   9100A0E3           MOV      R0,#+145
   \   000000F8   800F80E3           ORR      R0,R0,#0x200
   \   000000FC   071080E0           ADD      R1,R0,R7
   \   00000100   0200A0E1           MOV      R0,R2
   \   00000104   A42092E5           LDR      R2,[R2, #+164]
   \   00000108   642092E5           LDR      R2,[R2, #+100]
   \   0000010C   0FE0A0E1           MOV      LR,PC
   \   00000110   12FF2FE1           BX       R2
    821                          }
    822                      }
   \                     ??ReceiveData_6:
   \   00000114   016086E2           ADD      R6,R6,#+1
   \   00000118   0E0056E3           CMP      R6,#+14
   \   0000011C   D4FFFFBA           BLT      ??ReceiveData_4
    823                      for ( int i = 0; i < MAX_WASHTRACK_CHANNELS; i++ ) {
   \   00000120   0000A0E3           MOV      R0,#+0
    824                          WashTrackSpeed[i]   = pData->Speed[i];
   \                     ??ReceiveData_7:
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   04208DE2           ADD      R2,SP,#+4
   \                     ??ReceiveData_8:
   \   0000012C   003184E0           ADD      R3,R4,R0, LSL #+2
   \   00000130   B83083E2           ADD      R3,R3,#+184
   \   00000134   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000138   0230C1E7           STRB     R3,[R1, +R2]
   \   0000013C   011081E2           ADD      R1,R1,#+1
   \   00000140   040051E3           CMP      R1,#+4
   \   00000144   F8FFFFBA           BLT      ??ReceiveData_8
   \   00000148   04209DE5           LDR      R2,[SP, #+4]
   \   0000014C   001185E0           ADD      R1,R5,R0, LSL #+2
   \   00000150   782281E5           STR      R2,[R1, #+632]
    825                          WashTrackCnt[i]     = pData->WashTrackCnt[i];
   \   00000154   802084E0           ADD      R2,R4,R0, LSL #+1
   \   00000158   CA30D2E5           LDRB     R3,[R2, #+202]
   \   0000015C   C920D2E5           LDRB     R2,[R2, #+201]
    826                      }
   \   00000160   010080E2           ADD      R0,R0,#+1
   \   00000164   040050E3           CMP      R0,#+4
   \   00000168   032482E1           ORR      R2,R2,R3, LSL #+8
   \   0000016C   682281E5           STR      R2,[R1, #+616]
   \   00000170   EBFFFFBA           BLT      ??ReceiveData_7
    827                      for ( int i = 0; i < MAX_LEVEL_SWITCH_CHANNELS; i++ ) {
   \   00000174   0000A0E3           MOV      R0,#+0
    828                          LevelSwitch[i] = (pData->LevelSwitches >> i) & 0x01;
   \                     ??ReceiveData_9:
   \   00000178   C810D4E5           LDRB     R1,[R4, #+200]
   \   0000017C   5110A0E1           ASR      R1,R1,R0
   \   00000180   010011E3           TST      R1,#0x1
   \   00000184   051080E0           ADD      R1,R0,R5
   \   00000188   0120A013           MOVNE    R2,#+1
   \   0000018C   0020A003           MOVEQ    R2,#+0
   \   00000190   8822C1E5           STRB     R2,[R1, #+648]
    829                      }
   \   00000194   010080E2           ADD      R0,R0,#+1
   \   00000198   080050E3           CMP      R0,#+8
   \   0000019C   F5FFFFBA           BLT      ??ReceiveData_9
    830                      ErrorStatus = E_OK;
   \                     ??ReceiveData_10:
   \   000001A0   0000A0E3           MOV      R0,#+0
   \   000001A4   200000EA           B        ??ReceiveData_11
    831                  }
    832                  break;
    833              case CMD_GENERIC_STATIC_DATA:
    834                  {
    835                      ANPRO10_COMMAND_2621 *pData = (ANPRO10_COMMAND_2621 *)data;
    836                      SoftwareVersion = pData->SoftwareVersion;
   \                     ??ReceiveData_2:
   \   000001A8   0910D4E5           LDRB     R1,[R4, #+9]
   \   000001AC   0820D4E5           LDRB     R2,[R4, #+8]
   \   000001B0   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000001B4   0C1080E5           STR      R1,[R0, #+12]
    837                      RxBufSize = pData->RxBufSize;
   \   000001B8   0A10D4E5           LDRB     R1,[R4, #+10]
   \   000001BC   8911C0E5           STRB     R1,[R0, #+393]
    838                      TxBufSize = pData->TxBufSize;
   \   000001C0   0C10D4E5           LDRB     R1,[R4, #+12]
   \   000001C4   8A11C0E5           STRB     R1,[R0, #+394]
   \   000001C8   0F20D4E5           LDRB     R2,[R4, #+15]
   \   000001CC   0E30D4E5           LDRB     R3,[R4, #+14]
   \   000001D0   B71F85E2           ADD      R1,R5,#+732
   \   000001D4   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001D8   B020C1E1           STRH     R2,[R1, #+0]
    839                      CalNull = pData->CalNull;
    840                      SerialNumber = pData->SerialNumber;
   \   000001DC   1320D4E5           LDRB     R2,[R4, #+19]
   \   000001E0   1230D4E5           LDRB     R3,[R4, #+18]
   \   000001E4   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001E8   1130D4E5           LDRB     R3,[R4, #+17]
   \   000001EC   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001F0   1030D4E5           LDRB     R3,[R4, #+16]
   \   000001F4   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000001F8   102080E5           STR      R2,[R0, #+16]
    841                      EEPromGain = pData->EEPromGain;
   \   000001FC   0000A0E3           MOV      R0,#+0
   \   00000200   08208DE2           ADD      R2,SP,#+8
   \                     ??ReceiveData_12:
   \   00000204   143084E2           ADD      R3,R4,#+20
   \   00000208   0330D0E7           LDRB     R3,[R0, +R3]
   \   0000020C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000210   010080E2           ADD      R0,R0,#+1
   \   00000214   040050E3           CMP      R0,#+4
   \   00000218   F9FFFFBA           BLT      ??ReceiveData_12
   \   0000021C   08009DE5           LDR      R0,[SP, #+8]
   \   00000220   040081E5           STR      R0,[R1, #+4]
   \   00000224   DDFFFFEA           B        ??ReceiveData_10
    842                      ErrorStatus = E_OK;
    843                  }
    844                  break;
    845          
    846              default:
    847                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_3:
   \   00000228   0100A0E3           MOV      R0,#+1
    848                  break;
    849              }
    850              return (ErrorStatus);
   \                     ??ReceiveData_11:
   \   0000022C   FE40BDE8           POP      {R1-R7,LR}
   \   00000230   1EFF2FE1           BX       LR               ;; return
    851          }
    852          

   \                                 In segment CODE, align 4, keep-with-next
    853          int SCADCard::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0040A0E1           MOV      R4,R0
    854              int ErrorStatus = E_OK;
    855              switch ( cmd ) {
   \   0000000C   9C0084E2           ADD      R0,R4,#+156
   \   00000010   0E20A0E3           MOV      R2,#+14
   \   00000014   FF30A0E3           MOV      R3,#+255
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   651051E2           SUBS     R1,R1,#+101
   \   00000020   0200000A           BEQ      ??SendData_1
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   6500000A           BEQ      ??SendData_2
   \   0000002C   910000EA           B        ??SendData_3
    856              case CMD_GENERIC_REALTIME_DATA:
    857                  {
    858                      QueueANPRO10_COMMAND_2620 Cmd;
    859                      Cmd.TxInfo.Port = NULL;
   \                     ??SendData_1:
   \   00000030   24508DE5           STR      R5,[SP, #+36]
    860                      Cmd.TxInfo.rxAddr = DEVICE_BROADCAST_ADDR;
   \   00000034   2830CDE5           STRB     R3,[SP, #+40]
    861                      Cmd.TxInfo.rxId = DEVICE_BROADCAST_TXU;
   \   00000038   2920CDE5           STRB     R2,[SP, #+41]
    862                      Cmd.Data.ObjectId = IDNumber;
   \   0000003C   001090E5           LDR      R1,[R0, #+0]
    863                      Cmd.Data.ndb = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000040   CD20A0E3           MOV      R2,#+205
   \   00000044   2E10CDE5           STRB     R1,[SP, #+46]
   \   00000048   2114A0E1           LSR      R1,R1,#+8
   \   0000004C   2F10CDE5           STRB     R1,[SP, #+47]
   \   00000050   2114A0E1           LSR      R1,R1,#+8
   \   00000054   3010CDE5           STRB     R1,[SP, #+48]
   \   00000058   2114A0E1           LSR      R1,R1,#+8
   \   0000005C   3110CDE5           STRB     R1,[SP, #+49]
   \   00000060   BC22CDE1           STRH     R2,[SP, #+44]
    864                      Cmd.Data.CommandNo = CMD_GENERIC_REALTIME_DATA;
   \   00000064   6520A0E3           MOV      R2,#+101
   \   00000068   BA22CDE1           STRH     R2,[SP, #+42]
    865                      Cmd.Data.FailCnt = FailCnt;
   \   0000006C   B81090E5           LDR      R1,[R0, #+184]
    866                      Cmd.Data.FailCntTotal = FailCntTotal;
    867                      for ( int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
   \   00000070   0060A0E3           MOV      R6,#+0
   \   00000074   3610CDE5           STRB     R1,[SP, #+54]
   \   00000078   2114A0E1           LSR      R1,R1,#+8
   \   0000007C   3710CDE5           STRB     R1,[SP, #+55]
   \   00000080   2114A0E1           LSR      R1,R1,#+8
   \   00000084   3810CDE5           STRB     R1,[SP, #+56]
   \   00000088   2114A0E1           LSR      R1,R1,#+8
   \   0000008C   3910CDE5           STRB     R1,[SP, #+57]
   \   00000090   B40090E5           LDR      R0,[R0, #+180]
   \   00000094   3200CDE5           STRB     R0,[SP, #+50]
   \   00000098   2004A0E1           LSR      R0,R0,#+8
   \   0000009C   3300CDE5           STRB     R0,[SP, #+51]
   \   000000A0   2004A0E1           LSR      R0,R0,#+8
   \   000000A4   3400CDE5           STRB     R0,[SP, #+52]
   \   000000A8   2004A0E1           LSR      R0,R0,#+8
   \   000000AC   3500CDE5           STRB     R0,[SP, #+53]
    868                          Cmd.Data.MsrdValues[i] = MsrdValues[i];
   \                     ??SendData_4:
   \   000000B0   060184E0           ADD      R0,R4,R6, LSL #+2
   \   000000B4   D82190E5           LDR      R2,[R0, #+472]
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   20208DE5           STR      R2,[SP, #+32]
   \   000000C0   24208DE2           ADD      R2,SP,#+36
   \   000000C4   063182E0           ADD      R3,R2,R6, LSL #+2
   \   000000C8   162083E2           ADD      R2,R3,#+22
   \                     ??SendData_5:
   \   000000CC   20C08DE2           ADD      R12,SP,#+32
   \   000000D0   0CC0D1E7           LDRB     R12,[R1, +R12]
   \   000000D4   02C0C1E7           STRB     R12,[R1, +R2]
   \   000000D8   011081E2           ADD      R1,R1,#+1
   \   000000DC   040051E3           CMP      R1,#+4
   \   000000E0   F9FFFFBA           BLT      ??SendData_5
    869                          Cmd.Data.CalValues[i] = CalValues[i];
   \   000000E4   861084E0           ADD      R1,R4,R6, LSL #+1
   \   000000E8   841F81E2           ADD      R1,R1,#+528
   \   000000EC   B0C0D1E1           LDRH     R12,[R1, #+0]
   \   000000F0   24208DE2           ADD      R2,SP,#+36
   \   000000F4   862082E0           ADD      R2,R2,R6, LSL #+1
   \   000000F8   BEC4C2E1           STRH     R12,[R2, #+78]
    870                          Cmd.Data.RawValues[i] = RawValues[i];
   \   000000FC   BC11D1E1           LDRH     R1,[R1, #+28]
    871                          memcpy((void *)&Cmd.Data.ADConfigData[i], (void *)&ADConfigData[i], sizeof(ConfigPacket));
    872                      }
   \   00000100   016086E2           ADD      R6,R6,#+1
   \   00000104   BA16C2E1           STRH     R1,[R2, #+106]
   \   00000108   0420A0E3           MOV      R2,#+4
   \   0000010C   9110A0E3           MOV      R1,#+145
   \   00000110   801F81E3           ORR      R1,R1,#0x200
   \   00000114   001081E0           ADD      R1,R1,R0
   \   00000118   860083E2           ADD      R0,R3,#+134
   \   0000011C   ........           _BLF     memcpy,??memcpy??rA
   \   00000120   0E0056E3           CMP      R6,#+14
   \   00000124   E1FFFFBA           BLT      ??SendData_4
    873                      for ( int i = 0; i < MAX_WASHTRACK_CHANNELS; i++ ) {
   \   00000128   0000A0E3           MOV      R0,#+0
    874                          Cmd.Data.Speed[i]        = WashTrackSpeed[i];
   \                     ??SendData_6:
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   002184E0           ADD      R2,R4,R0, LSL #+2
   \                     ??SendData_7:
   \   00000134   9E6F82E2           ADD      R6,R2,#+632
   \   00000138   0660D1E7           LDRB     R6,[R1, +R6]
   \   0000013C   24308DE2           ADD      R3,SP,#+36
   \   00000140   003183E0           ADD      R3,R3,R0, LSL #+2
   \   00000144   BE3083E2           ADD      R3,R3,#+190
   \   00000148   0360C1E7           STRB     R6,[R1, +R3]
   \   0000014C   011081E2           ADD      R1,R1,#+1
   \   00000150   040051E3           CMP      R1,#+4
   \   00000154   F6FFFFBA           BLT      ??SendData_7
    875                          Cmd.Data.WashTrackCnt[i] = WashTrackCnt[i];
   \   00000158   681292E5           LDR      R1,[R2, #+616]
   \   0000015C   24208DE2           ADD      R2,SP,#+36
   \   00000160   802082E0           ADD      R2,R2,R0, LSL #+1
   \   00000164   CF10C2E5           STRB     R1,[R2, #+207]
   \   00000168   2114A0E1           LSR      R1,R1,#+8
   \   0000016C   D010C2E5           STRB     R1,[R2, #+208]
    876                      }
   \   00000170   010080E2           ADD      R0,R0,#+1
   \   00000174   040050E3           CMP      R0,#+4
   \   00000178   EBFFFFBA           BLT      ??SendData_6
    877                      U8 LevelSwitchState = 0;
    878                      for ( int i = 0; i < MAX_LEVEL_SWITCH_CHANNELS; i++ ) {
   \   0000017C   0000A0E3           MOV      R0,#+0
    879                          LevelSwitchState |= LevelSwitch[i] << i;
   \                     ??SendData_8:
   \   00000180   041080E0           ADD      R1,R0,R4
   \   00000184   8812D1E5           LDRB     R1,[R1, #+648]
   \   00000188   1110A0E1           LSL      R1,R1,R0
   \   0000018C   055081E1           ORR      R5,R1,R5
   \   00000190   FF5005E2           AND      R5,R5,#0xFF
    880                      }
   \   00000194   010080E2           ADD      R0,R0,#+1
   \   00000198   080050E3           CMP      R0,#+8
   \   0000019C   F7FFFFBA           BLT      ??SendData_8
    881                      Cmd.Data.LevelSwitches = LevelSwitchState;
   \   000001A0   F250CDE5           STRB     R5,[SP, #+242]
    882                      bool sent = ANPRO10SendNormal(&Cmd);
    883                      if ( !sent ) ErrorStatus = E_QUEUE_FULL;
   \   000001A4   24008DE2           ADD      R0,SP,#+36
   \   000001A8   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   0100001A           BNE      ??SendData_9
   \                     ??SendData_10:
   \   000001B4   0300A0E3           MOV      R0,#+3
   \   000001B8   2F0000EA           B        ??SendData_11
    884                      else ErrorStatus = E_OK;
   \                     ??SendData_9:
   \   000001BC   0000A0E3           MOV      R0,#+0
   \   000001C0   2D0000EA           B        ??SendData_11
    885                  }
    886                  break;
    887              case CMD_GENERIC_STATIC_DATA:
    888                  {
    889                      QueueANPRO10_COMMAND_2621 Cmd;
    890                      Cmd.TxInfo.Port = NULL;
   \                     ??SendData_2:
   \   000001C4   00508DE5           STR      R5,[SP, #+0]
    891                      Cmd.TxInfo.rxAddr = DEVICE_BROADCAST_ADDR;
   \   000001C8   0430CDE5           STRB     R3,[SP, #+4]
    892                      Cmd.TxInfo.rxId = DEVICE_BROADCAST_TXU;
   \   000001CC   0520CDE5           STRB     R2,[SP, #+5]
    893                      Cmd.Data.ObjectId = IDNumber;
   \   000001D0   001090E5           LDR      R1,[R0, #+0]
    894                      Cmd.Data.ndb = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   000001D4   1420A0E3           MOV      R2,#+20
   \   000001D8   0A10CDE5           STRB     R1,[SP, #+10]
   \   000001DC   2114A0E1           LSR      R1,R1,#+8
   \   000001E0   0B10CDE5           STRB     R1,[SP, #+11]
   \   000001E4   2114A0E1           LSR      R1,R1,#+8
   \   000001E8   0C10CDE5           STRB     R1,[SP, #+12]
   \   000001EC   2114A0E1           LSR      R1,R1,#+8
   \   000001F0   0D10CDE5           STRB     R1,[SP, #+13]
   \   000001F4   B820CDE1           STRH     R2,[SP, #+8]
    895                      Cmd.Data.CommandNo = CMD_GENERIC_STATIC_DATA;
   \   000001F8   6620A0E3           MOV      R2,#+102
   \   000001FC   B620CDE1           STRH     R2,[SP, #+6]
    896          
    897                      Cmd.Data.SoftwareVersion = SoftwareVersion;
   \   00000200   C02090E5           LDR      R2,[R0, #+192]
    898                      Cmd.Data.RxBufSize = RxBufSize;
    899                      Cmd.Data.TxBufSize = TxBufSize;
   \   00000204   B71F84E2           ADD      R1,R4,#+732
   \   00000208   BE20CDE1           STRH     R2,[SP, #+14]
   \   0000020C   3D22D0E5           LDRB     R2,[R0, #+573]
   \   00000210   B021CDE1           STRH     R2,[SP, #+16]
   \   00000214   3E22D0E5           LDRB     R2,[R0, #+574]
   \   00000218   B221CDE1           STRH     R2,[SP, #+18]
   \   0000021C   B030D1E1           LDRH     R3,[R1, #+0]
    900                      Cmd.Data.CalNull = CalNull;
    901                      Cmd.Data.SerialNumber = SerialNumber;
    902                      Cmd.Data.EEPromGain = EEPromGain;
   \   00000220   1A208DE2           ADD      R2,SP,#+26
   \   00000224   B431CDE1           STRH     R3,[SP, #+20]
   \   00000228   C40090E5           LDR      R0,[R0, #+196]
   \   0000022C   1600CDE5           STRB     R0,[SP, #+22]
   \   00000230   2004A0E1           LSR      R0,R0,#+8
   \   00000234   1700CDE5           STRB     R0,[SP, #+23]
   \   00000238   2004A0E1           LSR      R0,R0,#+8
   \   0000023C   1800CDE5           STRB     R0,[SP, #+24]
   \   00000240   2004A0E1           LSR      R0,R0,#+8
   \   00000244   1900CDE5           STRB     R0,[SP, #+25]
   \   00000248   0000A0E3           MOV      R0,#+0
   \                     ??SendData_12:
   \   0000024C   043081E2           ADD      R3,R1,#+4
   \   00000250   0330D0E7           LDRB     R3,[R0, +R3]
   \   00000254   0230C0E7           STRB     R3,[R0, +R2]
   \   00000258   010080E2           ADD      R0,R0,#+1
   \   0000025C   040050E3           CMP      R0,#+4
   \   00000260   F9FFFFBA           BLT      ??SendData_12
    903          
    904                      bool sent = ANPRO10SendNormal(&Cmd);
    905                      if ( !sent ) ErrorStatus = E_QUEUE_FULL;
   \   00000264   0D00A0E1           MOV      R0,SP
   \   00000268   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   0000026C   000050E3           CMP      R0,#+0
   \   00000270   CFFFFF0A           BEQ      ??SendData_10
    906                      else ErrorStatus = E_OK;
   \   00000274   D0FFFFEA           B        ??SendData_9
    907                  }
    908                  break;
    909              default:
    910                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??SendData_3:
   \   00000278   0100A0E3           MOV      R0,#+1
    911                  break;
    912              }
    913              return (ErrorStatus);
   \                     ??SendData_11:
   \   0000027C   FCD08DE2           ADD      SP,SP,#+252
   \   00000280   ........           B        ?Subroutine26
    914          }
    915          
    916          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    917          bool SCADCard::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr) {
   \                     ??Add:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   AADF4DE2           SUB      SP,SP,#+680
    918              bool SensorAdded = false;
    919              switch ( IOCompPtr->Type ) {
   \   00000008   A0979FE5           LDR      R9,??Add_1       ;; `?<Constant "TCU ">`
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   083197E5           LDR      R3,[R7, #+264]
   \   00000014   A0A097E5           LDR      R10,[R7, #+160]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0250A0E1           MOV      R5,R2
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   031184E0           ADD      R1,R4,R3, LSL #+2
   \   00000028   EB8F8FE2           ADR      R8,??Add_2       ;; ".\n"
   \   0000002C   620FA0E3           MOV      R0,#+392
   \   00000030   7FB0A0E3           MOV      R11,#+127
   \   00000034   80BE8BE3           ORR      R11,R11,#0x800
   \   00000038   0B005AE1           CMP      R10,R11
   \   0000003C   F600001A           BNE      ??Add_3
    920              case C_AI_WashTrackSensor:
    921                  if ( IOCompPtr->ADCardChannel >= 0 && IOCompPtr->ADCardChannel < MAX_WASHTRACK_CHANNELS ) {
   \   00000040   000053E3           CMP      R3,#+0
   \   00000044   DE00004A           BMI      ??Add_4
   \   00000048   040053E3           CMP      R3,#+4
   \   0000004C   DC0000AA           BGE      ??Add_4
    922                      if ( IOComponentWT[IOCompPtr->ADCardChannel] ) {
   \   00000050   E43291E5           LDR      R3,[R1, #+740]
   \   00000054   000053E3           CMP      R3,#+0
   \   00000058   E000000A           BEQ      ??Add_5
    923                          AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
   \   0000005C   F41097E5           LDR      R1,[R7, #+244]
   \   00000060   8E0F8DE2           ADD      R0,SP,#+568
   \   00000064   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000068   00A0A0E1           MOV      R10,R0
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   24008DE2           ADD      R0,SP,#+36
   \   00000074   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000078   0A20A0E1           MOV      R2,R10
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   5D0F8DE2           ADD      R0,SP,#+372
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   00000088   5D1F8DE2           ADD      R1,SP,#+372
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   5D0F8DE2           ADD      R0,SP,#+372
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   0620A0E1           MOV      R2,R6
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   8E0F8DE2           ADD      R0,SP,#+568
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   24008DE2           ADD      R0,SP,#+36
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    924                          Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
   \   000000C4   F81097E5           LDR      R1,[R7, #+248]
   \   000000C8   800F8DE2           ADD      R0,SP,#+512
   \   000000CC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000D0   00A0A0E1           MOV      R10,R0
   \   000000D4   081089E2           ADD      R1,R9,#+8
   \   000000D8   870F8DE2           ADD      R0,SP,#+540
   \   000000DC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   0A20A0E1           MOV      R2,R10
   \   000000E8   4F0F8DE2           ADD      R0,SP,#+316
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   000000F0   0820A0E1           MOV      R2,R8
   \   000000F4   4F1F8DE2           ADD      R1,SP,#+316
   \   000000F8   560F8DE2           ADD      R0,SP,#+344
   \   000000FC   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   00000100   ........           LDR      R0,??DataTable16  ;; ??npos
   \   00000104   0620A0E1           MOV      R2,R6
   \   00000108   00A090E5           LDR      R10,[R0, #+0]
   \   0000010C   561F8DE2           ADD      R1,SP,#+344
   \   00000110   0A30A0E1           MOV      R3,R10
   \   00000114   0D00A0E1           MOV      R0,SP
   \   00000118   ........           _BLF     ??append,??append??rA
   \   0000011C   0620A0E1           MOV      R2,R6
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   560F8DE2           ADD      R0,SP,#+344
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   0620A0E1           MOV      R2,R6
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   4F0F8DE2           ADD      R0,SP,#+316
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0620A0E1           MOV      R2,R6
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   800F8DE2           ADD      R0,SP,#+512
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000014C   0620A0E1           MOV      R2,R6
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   870F8DE2           ADD      R0,SP,#+540
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
    925                          Message += (AnsiString)"WT Channel " + (AnsiString)(IOCompPtr->ADCardChannel + 1);
   \   0000015C   080197E5           LDR      R0,[R7, #+264]
   \   00000160   011080E2           ADD      R1,R0,#+1
   \   00000164   9C0F8DE2           ADD      R0,SP,#+624
   \   00000168   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000016C   00B0A0E1           MOV      R11,R0
   \   00000170   141089E2           ADD      R1,R9,#+20
   \   00000174   A30F8DE2           ADD      R0,SP,#+652
   \   00000178   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000017C   0B20A0E1           MOV      R2,R11
   \   00000180   0010A0E1           MOV      R1,R0
   \   00000184   480F8DE2           ADD      R0,SP,#+288
   \   00000188   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000018C   0A30A0E1           MOV      R3,R10
   \   00000190   0620A0E1           MOV      R2,R6
   \   00000194   481F8DE2           ADD      R1,SP,#+288
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   ........           _BLF     ??append,??append??rA
   \   000001A0   0620A0E1           MOV      R2,R6
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   480F8DE2           ADD      R0,SP,#+288
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   0620A0E1           MOV      R2,R6
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   9C0F8DE2           ADD      R0,SP,#+624
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   0620A0E1           MOV      R2,R6
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   A30F8DE2           ADD      R0,SP,#+652
   \   000001CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    926                          Message += (AnsiString)" on ADCard on channel" + (AnsiString)(IOCompPtr->IOChannel + 1);
   \   000001D0   040197E5           LDR      R0,[R7, #+260]
   \   000001D4   011080E2           ADD      R1,R0,#+1
   \   000001D8   950F8DE2           ADD      R0,SP,#+596
   \   000001DC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001E0   0070A0E1           MOV      R7,R0
   \   000001E4   201089E2           ADD      R1,R9,#+32
   \   000001E8   790F8DE2           ADD      R0,SP,#+484
   \   000001EC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001F0   0720A0E1           MOV      R2,R7
   \   000001F4   0010A0E1           MOV      R1,R0
   \   000001F8   410F8DE2           ADD      R0,SP,#+260
   \   000001FC   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   00000200   0A30A0E1           MOV      R3,R10
   \   00000204   0620A0E1           MOV      R2,R6
   \   00000208   411F8DE2           ADD      R1,SP,#+260
   \   0000020C   0D00A0E1           MOV      R0,SP
   \   00000210   ........           _BLF     ??append,??append??rA
   \   00000214   0620A0E1           MOV      R2,R6
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   410F8DE2           ADD      R0,SP,#+260
   \   00000220   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000224   0620A0E1           MOV      R2,R6
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   950F8DE2           ADD      R0,SP,#+596
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000234   0620A0E1           MOV      R2,R6
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   790F8DE2           ADD      R0,SP,#+484
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
    927                          Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
   \   00000244   781194E5           LDR      R1,[R4, #+376]
   \   00000248   6B0F8DE2           ADD      R0,SP,#+428
   \   0000024C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000250   741194E5           LDR      R1,[R4, #+372]
   \   00000254   0070A0E1           MOV      R7,R0
   \   00000258   94008DE2           ADD      R0,SP,#+148
   \   0000025C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000260   381089E2           ADD      R1,R9,#+56
   \   00000264   720F8DE2           ADD      R0,SP,#+456
   \   00000268   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000026C   94208DE2           ADD      R2,SP,#+148
   \   00000270   0010A0E1           MOV      R1,R0
   \   00000274   B0008DE2           ADD      R0,SP,#+176
   \   00000278   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000027C   402089E2           ADD      R2,R9,#+64
   \   00000280   B0108DE2           ADD      R1,SP,#+176
   \   00000284   CC008DE2           ADD      R0,SP,#+204
   \   00000288   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000028C   0720A0E1           MOV      R2,R7
   \   00000290   CC108DE2           ADD      R1,SP,#+204
   \   00000294   E8008DE2           ADD      R0,SP,#+232
   \   00000298   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000029C   0A30A0E1           MOV      R3,R10
   \   000002A0   0620A0E1           MOV      R2,R6
   \   000002A4   E8108DE2           ADD      R1,SP,#+232
   \   000002A8   0D00A0E1           MOV      R0,SP
   \   000002AC   ........           _BLF     ??append,??append??rA
   \   000002B0   0620A0E1           MOV      R2,R6
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   E8008DE2           ADD      R0,SP,#+232
   \   000002BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C0   0620A0E1           MOV      R2,R6
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   6B0F8DE2           ADD      R0,SP,#+428
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   0620A0E1           MOV      R2,R6
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   CC008DE2           ADD      R0,SP,#+204
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E0   0620A0E1           MOV      R2,R6
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   B0008DE2           ADD      R0,SP,#+176
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F0   0620A0E1           MOV      R2,R6
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   94008DE2           ADD      R0,SP,#+148
   \   000002FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000300   0620A0E1           MOV      R2,R6
   \   00000304   0110A0E3           MOV      R1,#+1
   \   00000308   720F8DE2           ADD      R0,SP,#+456
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
    928                          Message += (AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
   \   00000310   481089E2           ADD      R1,R9,#+72
   \   00000314   640F8DE2           ADD      R0,SP,#+400
   \   00000318   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000031C   0A30A0E1           MOV      R3,R10
   \   00000320   0620A0E1           MOV      R2,R6
   \   00000324   0010A0E1           MOV      R1,R0
   \   00000328   0D00A0E1           MOV      R0,SP
   \   0000032C   ........           _BLF     ??append,??append??rA
   \   00000330   0620A0E1           MOV      R2,R6
   \   00000334   0110A0E3           MOV      R1,#+1
   \   00000338   640F8DE2           ADD      R0,SP,#+400
   \   0000033C   ........           _BLF     ??_Tidy,??_Tidy??rA
    929                          Message += (AnsiString)ElementPtr->Name + ".\n";
   \   00000340   441085E2           ADD      R1,R5,#+68
   \   00000344   5C008DE2           ADD      R0,SP,#+92
   \   00000348   ........           _BLF     ??string,??string??rA
   \   0000034C   0820A0E1           MOV      R2,R8
   \   00000350   5C108DE2           ADD      R1,SP,#+92
   \   00000354   78008DE2           ADD      R0,SP,#+120
   \   00000358   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000035C   0A30A0E1           MOV      R3,R10
   \   00000360   0620A0E1           MOV      R2,R6
   \   00000364   78108DE2           ADD      R1,SP,#+120
   \   00000368   0D00A0E1           MOV      R0,SP
   \   0000036C   ........           _BLF     ??append,??append??rA
   \   00000370   0620A0E1           MOV      R2,R6
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   78008DE2           ADD      R0,SP,#+120
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0620A0E1           MOV      R2,R6
   \   00000384   0110A0E3           MOV      R1,#+1
   \   00000388   5C008DE2           ADD      R0,SP,#+92
   \   0000038C   ........           _BLF     ??_Tidy,??_Tidy??rA
    930                          HardwareSetupWarning(Message);
   \   00000390   0D10A0E1           MOV      R1,SP
   \   00000394   40008DE2           ADD      R0,SP,#+64
   \   00000398   ........           _BLF     ??string,??string??rA
   \   0000039C   40008DE2           ADD      R0,SP,#+64
   \   000003A0   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   000003A4   0620A0E1           MOV      R2,R6
   \   000003A8   0110A0E3           MOV      R1,#+1
   \   000003AC   40008DE2           ADD      R0,SP,#+64
   \   000003B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    931                          SensorAdded = false;
    932                      } else {
   \   000003B4   0620A0E1           MOV      R2,R6
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   0D00A0E1           MOV      R0,SP
   \                     ??Add_6:
   \   000003C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    933                          SensorAdded = true;
    934                          IOComponentWT[IOCompPtr->ADCardChannel] = IOCompPtr;
    935                          pair<set<PRogramObject *>::iterator, bool> Ret;
    936                          Ret = UniquePROList.insert(ElementPtr);
    937          
    938                          if ( Ret.second ) {
    939                              AddAlarms(ElementPtr->CompleteAlarmInfoList);
    940                          }
    941          
    942                          //((AnalogInput*)IOCompPtr)->SetPROPtr(ElementPtr);
    943                          IOCompPtr->AddIOMdulePtr((ANPRO10Object *)this);
    944                      }
    945                  }
    946                  break;
    947              default:
    948                  if ( IOCompPtr->ADCardChannel >= 0 && IOCompPtr->ADCardChannel < MAX_AN_SGCNV_CHANNELS ) {
    949                      if ( IOComponent[IOCompPtr->ADCardChannel] ) {
    950                          AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
    951                          Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
    952                          Message += (AnsiString)"Channel " + (AnsiString)(IOCompPtr->ADCardChannel + 1);
    953                          Message += (AnsiString)" on ADCard on channel" + (AnsiString)(IOCompPtr->IOChannel + 1);
    954                          Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
    955                          Message += (AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
    956                          Message += (AnsiString)ElementPtr->Name + ".\n";
    957                          HardwareSetupWarning(Message);
    958                          SensorAdded = false;
    959                      } else {
    960                          SensorAdded = true;
    961                          IOComponent[IOCompPtr->ADCardChannel] = IOCompPtr;
    962                          pair<set<PRogramObject *>::iterator, bool> Ret;
    963                          Ret = UniquePROList.insert(ElementPtr);
    964          
    965                          if ( Ret.second ) {
    966                              AddAlarms(ElementPtr->CompleteAlarmInfoList);
    967                          }
    968          
    969                          //((AnalogInput*)IOCompPtr)->SetPROPtr(ElementPtr);
    970                          IOCompPtr->AddIOMdulePtr((ANPRO10Object *)this);
    971                      }
    972                  }
    973                  break;
    974              }
    975              ElementPtr->MergeChildUserRights(this);
   \                     ??Add_4:
   \   000003C4   0410A0E1           MOV      R1,R4
   \   000003C8   0500A0E1           MOV      R0,R5
   \   000003CC   ........           _BLF     ??MergeChildUserRights,??MergeChildUserRights??rA
    976              return (SensorAdded);
   \   000003D0   0600A0E1           MOV      R0,R6
   \   000003D4   AADF8DE2           ADD      SP,SP,#+680
   \   000003D8   ........           B        ?Subroutine30
   \                     ??Add_2:
   \   000003DC   2E0A0000           DC8      ".\n",+0
   \                     ??Add_5:
   \   000003E0   0160A0E3           MOV      R6,#+1
   \   000003E4   E47281E5           STR      R7,[R1, #+740]
   \                     ??Add_7:
   \   000003E8   041080E0           ADD      R1,R0,R4
   \   000003EC   1C008DE2           ADD      R0,SP,#+28
   \   000003F0   ........           _BLF     ??insert,??insert??rA
   \   000003F4   2000DDE5           LDRB     R0,[SP, #+32]
   \   000003F8   000050E3           CMP      R0,#+0
   \   000003FC   0200000A           BEQ      ??Add_8
   \   00000400   FC1085E2           ADD      R1,R5,#+252
   \   00000404   0400A0E1           MOV      R0,R4
   \   00000408   ........           _BLF     ??AddAlarms,??AddAlarms??rA
   \                     ??Add_8:
   \   0000040C   0410A0E1           MOV      R1,R4
   \   00000410   0700A0E1           MOV      R0,R7
   \   00000414   ........           _BLF     ??AddIOMdulePtr,??AddIOMdulePtr??rA
   \   00000418   E9FFFFEA           B        ??Add_4
   \                     ??Add_3:
   \   0000041C   000053E3           CMP      R3,#+0
   \   00000420   E7FFFF4A           BMI      ??Add_4
   \   00000424   0E0053E3           CMP      R3,#+14
   \   00000428   E5FFFFAA           BGE      ??Add_4
   \   0000042C   683FA0E3           MOV      R3,#+416
   \   00000430   01A093E7           LDR      R10,[R3, +R1]
   \   00000434   00005AE3           CMP      R10,#+0
   \   00000438   D900000A           BEQ      ??Add_9
   \   0000043C   F41097E5           LDR      R1,[R7, #+244]
   \   00000440   5C008DE2           ADD      R0,SP,#+92
   \   00000444   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000448   00A0A0E1           MOV      R10,R0
   \   0000044C   0910A0E1           MOV      R1,R9
   \   00000450   40008DE2           ADD      R0,SP,#+64
   \   00000454   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000458   0A20A0E1           MOV      R2,R10
   \   0000045C   0010A0E1           MOV      R1,R0
   \   00000460   0D00A0E1           MOV      R0,SP
   \   00000464   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   00000468   0D10A0E1           MOV      R1,SP
   \   0000046C   24008DE2           ADD      R0,SP,#+36
   \   00000470   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0110A0E3           MOV      R1,#+1
   \   0000047C   0D00A0E1           MOV      R0,SP
   \   00000480   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000484   0620A0E1           MOV      R2,R6
   \   00000488   0110A0E3           MOV      R1,#+1
   \   0000048C   5C008DE2           ADD      R0,SP,#+92
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000494   0620A0E1           MOV      R2,R6
   \   00000498   0110A0E3           MOV      R1,#+1
   \   0000049C   40008DE2           ADD      R0,SP,#+64
   \   000004A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A4   F81097E5           LDR      R1,[R7, #+248]
   \   000004A8   CC008DE2           ADD      R0,SP,#+204
   \   000004AC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000004B0   00A0A0E1           MOV      R10,R0
   \   000004B4   081089E2           ADD      R1,R9,#+8
   \   000004B8   B0008DE2           ADD      R0,SP,#+176
   \   000004BC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000004C0   0A20A0E1           MOV      R2,R10
   \   000004C4   0010A0E1           MOV      R1,R0
   \   000004C8   94008DE2           ADD      R0,SP,#+148
   \   000004CC   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   000004D0   0820A0E1           MOV      R2,R8
   \   000004D4   94108DE2           ADD      R1,SP,#+148
   \   000004D8   78008DE2           ADD      R0,SP,#+120
   \   000004DC   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   000004E0   ........           LDR      R0,??DataTable16  ;; ??npos
   \   000004E4   0620A0E1           MOV      R2,R6
   \   000004E8   00A090E5           LDR      R10,[R0, #+0]
   \   000004EC   78108DE2           ADD      R1,SP,#+120
   \   000004F0   0A30A0E1           MOV      R3,R10
   \   000004F4   24008DE2           ADD      R0,SP,#+36
   \   000004F8   ........           _BLF     ??append,??append??rA
   \   000004FC   0620A0E1           MOV      R2,R6
   \   00000500   0110A0E3           MOV      R1,#+1
   \   00000504   78008DE2           ADD      R0,SP,#+120
   \   00000508   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000050C   0620A0E1           MOV      R2,R6
   \   00000510   0110A0E3           MOV      R1,#+1
   \   00000514   94008DE2           ADD      R0,SP,#+148
   \   00000518   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000051C   0620A0E1           MOV      R2,R6
   \   00000520   0110A0E3           MOV      R1,#+1
   \   00000524   CC008DE2           ADD      R0,SP,#+204
   \   00000528   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000052C   0620A0E1           MOV      R2,R6
   \   00000530   0110A0E3           MOV      R1,#+1
   \   00000534   B0008DE2           ADD      R0,SP,#+176
   \   00000538   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000053C   080197E5           LDR      R0,[R7, #+264]
   \   00000540   011080E2           ADD      R1,R0,#+1
   \   00000544   480F8DE2           ADD      R0,SP,#+288
   \   00000548   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000054C   00B0A0E1           MOV      R11,R0
   \   00000550   781089E2           ADD      R1,R9,#+120
   \   00000554   410F8DE2           ADD      R0,SP,#+260
   \   00000558   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000055C   0B20A0E1           MOV      R2,R11
   \   00000560   0010A0E1           MOV      R1,R0
   \   00000564   E8008DE2           ADD      R0,SP,#+232
   \   00000568   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000056C   0A30A0E1           MOV      R3,R10
   \   00000570   0620A0E1           MOV      R2,R6
   \   00000574   E8108DE2           ADD      R1,SP,#+232
   \   00000578   24008DE2           ADD      R0,SP,#+36
   \   0000057C   ........           _BLF     ??append,??append??rA
   \   00000580   0620A0E1           MOV      R2,R6
   \   00000584   0110A0E3           MOV      R1,#+1
   \   00000588   E8008DE2           ADD      R0,SP,#+232
   \   0000058C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000590   0620A0E1           MOV      R2,R6
   \   00000594   0110A0E3           MOV      R1,#+1
   \   00000598   480F8DE2           ADD      R0,SP,#+288
   \   0000059C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A0   0620A0E1           MOV      R2,R6
   \   000005A4   0110A0E3           MOV      R1,#+1
   \   000005A8   410F8DE2           ADD      R0,SP,#+260
   \   000005AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B0   040197E5           LDR      R0,[R7, #+260]
   \   000005B4   011080E2           ADD      R1,R0,#+1
   \   000005B8   5D0F8DE2           ADD      R0,SP,#+372
   \   000005BC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000005C0   0070A0E1           MOV      R7,R0
   \   000005C4   201089E2           ADD      R1,R9,#+32
   \   000005C8   560F8DE2           ADD      R0,SP,#+344
   \   000005CC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000005D0   0720A0E1           MOV      R2,R7
   \   000005D4   0010A0E1           MOV      R1,R0
   \   000005D8   4F0F8DE2           ADD      R0,SP,#+316
   \   000005DC   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   000005E0   0A30A0E1           MOV      R3,R10
   \   000005E4   0620A0E1           MOV      R2,R6
   \   000005E8   4F1F8DE2           ADD      R1,SP,#+316
   \   000005EC   24008DE2           ADD      R0,SP,#+36
   \   000005F0   ........           _BLF     ??append,??append??rA
   \   000005F4   0620A0E1           MOV      R2,R6
   \   000005F8   0110A0E3           MOV      R1,#+1
   \   000005FC   4F0F8DE2           ADD      R0,SP,#+316
   \   00000600   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000604   0620A0E1           MOV      R2,R6
   \   00000608   0110A0E3           MOV      R1,#+1
   \   0000060C   5D0F8DE2           ADD      R0,SP,#+372
   \   00000610   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000614   0620A0E1           MOV      R2,R6
   \   00000618   0110A0E3           MOV      R1,#+1
   \   0000061C   560F8DE2           ADD      R0,SP,#+344
   \   00000620   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000624   781194E5           LDR      R1,[R4, #+376]
   \   00000628   9C0F8DE2           ADD      R0,SP,#+624
   \   0000062C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000630   741194E5           LDR      R1,[R4, #+372]
   \   00000634   0070A0E1           MOV      R7,R0
   \   00000638   790F8DE2           ADD      R0,SP,#+484
   \   0000063C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000640   381089E2           ADD      R1,R9,#+56
   \   00000644   950F8DE2           ADD      R0,SP,#+596
   \   00000648   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000064C   792F8DE2           ADD      R2,SP,#+484
   \   00000650   0010A0E1           MOV      R1,R0
   \   00000654   720F8DE2           ADD      R0,SP,#+456
   \   00000658   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000065C   402089E2           ADD      R2,R9,#+64
   \   00000660   721F8DE2           ADD      R1,SP,#+456
   \   00000664   6B0F8DE2           ADD      R0,SP,#+428
   \   00000668   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000066C   0720A0E1           MOV      R2,R7
   \   00000670   6B1F8DE2           ADD      R1,SP,#+428
   \   00000674   640F8DE2           ADD      R0,SP,#+400
   \   00000678   ........           _BLF     `??operator+`,`??operator+??rA_2`
   \   0000067C   0A30A0E1           MOV      R3,R10
   \   00000680   0620A0E1           MOV      R2,R6
   \   00000684   641F8DE2           ADD      R1,SP,#+400
   \   00000688   24008DE2           ADD      R0,SP,#+36
   \   0000068C   ........           _BLF     ??append,??append??rA
   \   00000690   0620A0E1           MOV      R2,R6
   \   00000694   0110A0E3           MOV      R1,#+1
   \   00000698   640F8DE2           ADD      R0,SP,#+400
   \   0000069C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006A0   0620A0E1           MOV      R2,R6
   \   000006A4   0110A0E3           MOV      R1,#+1
   \   000006A8   9C0F8DE2           ADD      R0,SP,#+624
   \   000006AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006B0   0620A0E1           MOV      R2,R6
   \   000006B4   0110A0E3           MOV      R1,#+1
   \   000006B8   6B0F8DE2           ADD      R0,SP,#+428
   \   000006BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006C0   0620A0E1           MOV      R2,R6
   \   000006C4   0110A0E3           MOV      R1,#+1
   \   000006C8   720F8DE2           ADD      R0,SP,#+456
   \   000006CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006D0   0620A0E1           MOV      R2,R6
   \   000006D4   0110A0E3           MOV      R1,#+1
   \   000006D8   790F8DE2           ADD      R0,SP,#+484
   \   000006DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006E0   0620A0E1           MOV      R2,R6
   \   000006E4   0110A0E3           MOV      R1,#+1
   \   000006E8   950F8DE2           ADD      R0,SP,#+596
   \   000006EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006F0   481089E2           ADD      R1,R9,#+72
   \   000006F4   A30F8DE2           ADD      R0,SP,#+652
   \   000006F8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000006FC   0A30A0E1           MOV      R3,R10
   \   00000700   0620A0E1           MOV      R2,R6
   \   00000704   0010A0E1           MOV      R1,R0
   \   00000708   24008DE2           ADD      R0,SP,#+36
   \   0000070C   ........           _BLF     ??append,??append??rA
   \   00000710   0620A0E1           MOV      R2,R6
   \   00000714   0110A0E3           MOV      R1,#+1
   \   00000718   A30F8DE2           ADD      R0,SP,#+652
   \   0000071C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000720   441085E2           ADD      R1,R5,#+68
   \   00000724   870F8DE2           ADD      R0,SP,#+540
   \   00000728   ........           _BLF     ??string,??string??rA
   \   0000072C   0820A0E1           MOV      R2,R8
   \   00000730   871F8DE2           ADD      R1,SP,#+540
   \   00000734   800F8DE2           ADD      R0,SP,#+512
   \   00000738   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000073C   0A30A0E1           MOV      R3,R10
   \   00000740   0620A0E1           MOV      R2,R6
   \   00000744   801F8DE2           ADD      R1,SP,#+512
   \   00000748   24008DE2           ADD      R0,SP,#+36
   \   0000074C   ........           _BLF     ??append,??append??rA
   \   00000750   0620A0E1           MOV      R2,R6
   \   00000754   0110A0E3           MOV      R1,#+1
   \   00000758   800F8DE2           ADD      R0,SP,#+512
   \   0000075C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000760   0620A0E1           MOV      R2,R6
   \   00000764   0110A0E3           MOV      R1,#+1
   \   00000768   870F8DE2           ADD      R0,SP,#+540
   \   0000076C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000770   24108DE2           ADD      R1,SP,#+36
   \   00000774   8E0F8DE2           ADD      R0,SP,#+568
   \   00000778   ........           _BLF     ??string,??string??rA
   \   0000077C   8E0F8DE2           ADD      R0,SP,#+568
   \   00000780   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000784   0620A0E1           MOV      R2,R6
   \   00000788   0110A0E3           MOV      R1,#+1
   \   0000078C   8E0F8DE2           ADD      R0,SP,#+568
   \   00000790   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000794   0620A0E1           MOV      R2,R6
   \   00000798   0110A0E3           MOV      R1,#+1
   \   0000079C   24008DE2           ADD      R0,SP,#+36
   \   000007A0   06FFFFEA           B        ??Add_6
   \                     ??Add_9:
   \   000007A4   0160A0E3           MOV      R6,#+1
   \   000007A8   017083E7           STR      R7,[R3, +R1]
   \   000007AC   0DFFFFEA           B        ??Add_7
   \                     ??Add_1:
   \   000007B0   ........           DC32     `?<Constant "TCU ">`
    977          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SCAdCardValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 24, 237, 4502, 390, 237, 4650, 126, 237, 4652, 384
   \              0000E8030000
   \              18000000ED00
   \              000096110000
   \              86010000ED00
   \              00002A120000
   \              7E000000ED00
   \              00002C120000
   \              80010000    
   \   00000034   ED0000009B11       DC32 237, 4507, 391, 237, 4653, 392, 237, 4654, 386, 237, 4655, 387
   \              000087010000
   \              ED0000002D12
   \              000088010000
   \              ED0000002E12
   \              000082010000
   \              ED0000002F12
   \              000083010000
   \   00000064   ED0000003012       DC32 237, 4656
   \              0000        

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data SCADCard::__vtbl[37]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~SCADCard`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??SortAnalogInputs
   \              ............
   \   00000060   ............       DC32 ??SaveSettings, ??Calculate, ??CreateAlarms, ??WriteXML
   \              ............
   \              ........    
   \   00000070   ............       DC32 ??LCWriteXML, ??RefreshData, ??IsStaticValue
   \              ............
   \   0000007C   ............       DC32 ??ANPRO10_IO_UnpackPacket, ??Add, ??SetHWFailure
   \              ............
   \   00000088   ............       DC32 ??RequestMeasuredData, ??GetEEPromData, ??HandleCard
   \              ............
   \   00000094   414443617264       DC8 "ADCard["
   \              5B00        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A00               DC8 ":"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5D00               DC8 "]"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant {(unsigned char)'\\005', (unsigned c`:
   \   00000000   050200             DC8 5, 2, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TCU ">`:
   \   00000000   5443552000         DC8 "TCU "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   20636F6D2D70       DC8 " com-port "
   \              6F72742000  
   \   00000013   00                 DC8 0
   \   00000014   575420436861       DC8 "WT Channel "
   \              6E6E656C2000
   \   00000020   206F6E204144       DC8 " on ADCard on channel"
   \              43617264206F
   \              6E206368616E
   \              6E656C00    
   \   00000036   0000               DC8 0, 0
   \   00000038   206F6E20494F       DC8 " on IO "
   \              2000        
   \   00000040   20616464722E       DC8 " addr."
   \              00          
   \   00000047   00                 DC8 0
   \   00000048   0A4368616E6E       DC8 "\012Channel allredy used.\012 Try to set sensor for "
   \              656C20616C6C
   \              726564792075
   \              7365642E0A20
   \              54727920746F
   \              207365742073
   \              656E736F7220
   \              666F722000  
   \   00000077   00                 DC8 0
   \   00000078   4368616E6E65       DC8 "Channel "
   \              6C2000      
   \   00000081   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E0A00             DC8 ".\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SCADCard &SCADCard::new SCADCard(PROIOComponent *, PRogramObject *, IOUnit *)
   \                     `??new SCADCard`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   BD0FA0E3           MOV      R0,#+756
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new SCADCard_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??SCADCard
   \                     `??new SCADCard_1`:
   \   00000030   ........           B        ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     OS_Time

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??npos
    978          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     SCADCard::ANPRO10_IO_UnpackPacket(unsigned char *)
                                      316
     SCADCard::Add(PROIOComponent *, PRogramObject *)
                                      716
     SCADCard::AddCommand(unsigned char *, unsigned char, unsigned char, unsigned char *)
                                        8
     SCADCard::Correct_AD_Config()     24
     SCADCard::ExtraADSetUp()         100
     SCADCard::GetADConfigInfo()        4
     SCADCard::GetEEPromData(unsigned char *)
                                        8
     SCADCard::GetStringValue(int, int, AnsiString &)
                                      316
     SCADCard::GetValue(int, int, float &, int &, int &)
                                       48
     SCADCard::GetValueInfoTable(int &, int)
                                        0
     SCADCard::HandleCard(int)         36
     SCADCard::InitSensorTypes(bool)
                                        8
     SCADCard::PutFloatValue(int, float)
                                        4
     SCADCard::PutValue(int, int, AnsiString, bool, int *)
                                       60
     SCADCard::ReceiveData(unsigned char *)
                                       32
     SCADCard::RequestMeasuredData(int)
                                       24
     SCADCard::SCADCard(PROIOComponent *, PRogramObject *, IOUnit *)
                                      220
     SCADCard::SendData(unsigned short)
                                      268
     SCADCard::SendGainAndOffset()     88
     SCADCard::SendToAD(unsigned char, unsigned char *)
                                      104
     SCADCard::SendToAD(unsigned char, unsigned char, unsigned char *)
                                      104
     SCADCard::SetHWFailure(bool)      12
     SCADCard::new SCADCard(PROIOComponent *, PRogramObject *, IOUnit *)
                                       16
     SCADCard::~SCADCard()             12
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     SCADCard::SCAdCardValueList     108
     SCADCard::EEPromInfo             32
     SCADCard::SCADCard(PROIOComponent *, PRogramObject *, IOUnit *)
                                    1048
     ?Subroutine27                     8
     SCADCard::~SCADCard()            48
     ?Subroutine28                     8
     SCADCard::GetValue(int, int, float &, int &, int &)
                                     568
     SCADCard::GetStringValue(int, int, AnsiString &)
                                    1228
     SCADCard::PutValue(int, int, AnsiString, bool, int *)
                                      96
     SCADCard::PutFloatValue(int, float)
                                      12
     ?Subroutine29                     8
     SCADCard::GetValueInfoTable(int &, int)
                                      20
     SCADCard::SetHWFailure(bool)     80
     SCADCard::AddCommand(unsigned char *, unsigned char, unsigned char, unsigned char *)
                                      44
     ?Subroutine25                    28
     SCADCard::SendToAD(unsigned char, unsigned char, unsigned char *)
                                     136
     SCADCard::SendToAD(unsigned char, unsigned char *)
                                     132
     SCADCard::SendGainAndOffset()   244
     ?Subroutine26                     8
     SCADCard::InitSensorTypes(bool)
                                     240
     SCADCard::Correct_AD_Config()   136
     SCADCard::GetADConfigInfo()      20
     SCADCard::ExtraADSetUp()        200
     SCADCard::ANPRO10_IO_UnpackPacket(unsigned char *)
                                    1796
     ?Subroutine30                     8
     SCADCard::GetEEPromData(unsigned char *)
                                     432
     SCADCard::RequestMeasuredData(int)
                                     120
     SCADCard::HandleCard(int)       472
     SCADCard::ReceiveData(unsigned char *)
                                     564
     SCADCard::SendData(unsigned short)
                                     644
     SCADCard::Add(PROIOComponent *, PRogramObject *)
                                    1972
     ?<Initializer for SCAdCardValueList>
                                     108
     SCADCard::__vtbl                156
     ?<Constant ":">                   2
     ?<Constant "]">                   2
     ?<Constant "">                    1
     ?<Constant {(unsigned char)'\005', (unsigned c
                                       3
     ?<Constant "TCU ">              132
     ?<Constant ".\n">                 3
     SCADCard::new SCADCard(PROIOComponent *, PRogramObject *, IOUnit *)
                                      52
     __sti__routine()                  4
     ??DataTable12                     4
     ??DataTable14                     4
     ??DataTable16                     4
      Others                         824

 
 12 488 bytes in segment CODE
    331 bytes in segment DATA_C
    108 bytes in segment DATA_I
    108 bytes in segment DATA_ID
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 10 392 bytes of CODE  memory (+ 2 112 bytes shared)
    439 bytes of CONST memory
    108 bytes of DATA  memory

Errors: none
Warnings: none
