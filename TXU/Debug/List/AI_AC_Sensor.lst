##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AI_AC_Sensor.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\AI_AC_Sensor.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AI_AC_Sensor.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AI_AC_Sensor.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AI_AC_Sensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          
      8          //---------------------------------------------------------------------------
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          AI_AC_Sensor::AI_AC_Sensor(void)
   \                     ??AI_AC_Sensor:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     11          {
   \   00000008   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   0000000C   58009FE5           LDR      R0,??AI_AC_Sensor_1  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     12              Type                        = C_AI_FUSE;
   \   00000014   8D00A0E3           MOV      R0,#+141
   \   00000018   800E80E3           ORR      R0,R0,#0x800
   \   0000001C   A00084E5           STR      R0,[R4, #+160]
     13              BasicSensorType             = AI_SENSOR_AC_AVALABLE;
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   100184E5           STR      R0,[R4, #+272]
     14              BasicSensorTypeWord         = L_WORD897;    //AC
   \   00000028   8100A0E3           MOV      R0,#+129
   \   0000002C   C00F80E3           ORR      R0,R0,#0x300
   \   00000030   140184E5           STR      R0,[R4, #+276]
     15              Location                    = C_AI_LOC_AC_OK;
   \   00000034   EF00A0E3           MOV      R0,#+239
   \   00000038   800E80E3           ORR      R0,R0,#0x800
   \   0000003C   280184E5           STR      R0,[R4, #+296]
     16              AlarmAC_Voltage *FuseAlPtr  = new AlarmAC_Voltage( this);
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `??new AlarmAC_Voltage`,`??new AlarmAC_Voltage??rA`
     17              AlarmSet.insert(FuseAlPtr);
   \   00000048   0020A0E1           MOV      R2,R0
   \   0000004C   C01084E2           ADD      R1,R4,#+192
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??insert,??insert??rA
     18              HasVoltage                  = true;
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   6401C4E5           STRB     R0,[R4, #+356]
     19          }
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   1640BDE8           POP      {R1,R2,R4,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??AI_AC_Sensor_1:
   \   0000006C   ........           DC32     ??__vtbl
     20          //---------------------------------------------------------------------------
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          AI_AC_Sensor::~AI_AC_Sensor(void)
     23          {
   \                     `?~AI_AC_Sensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AI_AC_Sensor_1`
     24          
     25          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AI_AC_Sensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AI_AC_Sensor_1`:
   \   0000002C   ........           B        ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     26          //---------------------------------------------------------------------------
     27          
     28          ///////////////////////////////////////////////////////////////
     29          //
     30          // Routines for the librarian for input
     31          //
     32          ///////////////////////////////////////////////////////////////
     33          
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          int AI_AC_Sensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     36          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3880DDE5           LDRB     R8,[SP, #+56]
   \   0000000C   3C909DE5           LDR      R9,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     37              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
     38              switch ( ValueId ) {
     39              case SVT_AI_OFFSET   :
     40              case SVT_AI_CALC_VAL :
     41              default:
     42                  ValUnitId = NO_UNIT;
     43                  Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000030   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??assign,??assign??rA
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   00012DE9           PUSH     {R8}
   \   00000054   08308DE2           ADD      R3,SP,#+8
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000068   0050A0E1           MOV      R5,R0
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   08008DE2           ADD      R0,SP,#+8
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
     44                  break;
     45              }
     46              if ( Status==E_NO_ERR ) {
   \   0000007C   000055E3           CMP      R5,#+0
   \   00000080   08D08DE2           ADD      SP,SP,#+8
   \   00000084   0400001A           BNE      ??PutValue_2
     47                  SetModifiedFlag();
   \   00000088   A41094E5           LDR      R1,[R4, #+164]
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   541091E5           LDR      R1,[R1, #+84]
   \   00000094   0FE0A0E1           MOV      LR,PC
   \   00000098   11FF2FE1           BX       R1
     48              }
     49              if ( UnitId ) {
   \                     ??PutValue_2:
   \   0000009C   000059E3           CMP      R9,#+0
     50                  *UnitId = ValUnitId;
   \   000000A0   0000A013           MOVNE    R0,#+0
   \   000000A4   00008915           STRNE    R0,[R9, #+0]
     51              }
     52              return(Status);
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   1CD08DE2           ADD      SP,SP,#+28
   \   000000B0   F043BDE8           POP      {R4-R9,LR}
   \   000000B4   1EFF2FE1           BX       LR               ;; return
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          int  AI_AC_Sensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     56          {
   \                     ??GetValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   14009DE5           LDR      R0,[SP, #+20]
   \   0000000C   0340A0E1           MOV      R4,R3
   \   00000010   18309DE5           LDR      R3,[SP, #+24]
     57              int Status = GETVAL_NO_ERR;
   \   00000014   0050A0E3           MOV      R5,#+0
     58              switch ( ValueId ) {
   \   00000018   00E0A0E3           MOV      LR,#+0
   \   0000001C   B56041E2           SUB      R6,R1,#+181
   \   00000020   406E46E2           SUB      R6,R6,#+1024
   \   00000024   030056E3           CMP      R6,#+3
   \   00000028   1000008A           BHI      ??GetValue_3
   \   0000002C   017F8FE2           ADR      R7,??GetValue_1
   \   00000030   0670D7E7           LDRB     R7,[R7, R6]
   \   00000034   07F18FE0           ADD      PC,PC,R7, LSL #+2
   \                     ??GetValue_1:
   \   00000038   000D0D05           DC8      +0,+13,+13,+5
     59              case SVT_AI_OFFSET   :
     60                  Unit       = NO_UNIT;
   \                     ??GetValue_4:
   \   0000003C   00E083E5           STR      LR,[R3, #+0]
     61                  DecPnt     = 0;
   \   00000040   00E080E5           STR      LR,[R0, #+0]
     62                  MyRetValue = Offset;
   \   00000044   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_5:
   \   00000048   000084E5           STR      R0,[R4, #+0]
   \   0000004C   0E0000EA           B        ??GetValue_6
     63                  break;
     64              case SVT_AI_CALC_VAL :
     65                  Unit       = NO_UNIT;
   \                     ??GetValue_7:
   \   00000050   00E083E5           STR      LR,[R3, #+0]
     66                  DecPnt     = 0;
   \   00000054   00E080E5           STR      LR,[R0, #+0]
     67                  MyRetValue = Calculate();
   \   00000058   A4109CE5           LDR      R1,[R12, #+164]
   \   0000005C   0C00A0E1           MOV      R0,R12
   \   00000060   601091E5           LDR      R1,[R1, #+96]
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   11FF2FE1           BX       R1
   \   0000006C   F5FFFFEA           B        ??GetValue_5
     68                  break;
     69              default:
     70                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000070   08002DE9           PUSH     {R3}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0430A0E1           MOV      R3,R4
   \   0000007C   0C00A0E1           MOV      R0,R12
   \   00000080   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000084   0050A0E1           MOV      R5,R0
   \   00000088   08D08DE2           ADD      SP,SP,#+8
     71                  break;
     72              }
     73              return(Status);
   \                     ??GetValue_6:
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          int AI_AC_Sensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     77          {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
     78              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
     79              switch ( ValueId ) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0D00001A           BNE      ??GetStringValue_2
     80              case SVT_AI_UNIT:
     81                  MyString = GetUnitName(NO_UNIT);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000024   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign,??assign??rA
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   010000EA           B        ??GetStringValue_3
     82                  break;
     83              default:
     84                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
     85                  break;
     86              }
     87              return(Status);
   \                     ??GetStringValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1CD08DE2           ADD      SP,SP,#+28
   \   00000060                      REQUIRE ?Subroutine11
   \   00000060                      ;; // Fall through to label ?Subroutine11
     88          }
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int AI_AC_Sensor::PutFloatValue( int ValueId, float NewValue)
     91          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
     92              return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
     93          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     94          
     95          

   \                                 In segment CODE, align 4, keep-with-next
     96          void AI_AC_Sensor::NewValue(float NewValue)
     97          {
   \                     ??NewValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     98          #ifndef ANCONF
     99              FilteredValue = NewValue;
   \   00000008   441184E5           STR      R1,[R4, #+324]
    100              CalcValue     = NewValue;
   \   0000000C   481184E5           STR      R1,[R4, #+328]
    101              ResultOK      = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3601C4E5           STRB     R0,[R4, #+310]
    102              HWFailure     = false;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0C01C4E5           STRB     R0,[R4, #+268]
    103          
    104              if ( CurrentDeviceId == DEVICE_TCU ) {
   \   00000020   34009FE5           LDR      R0,??NewValue_1  ;; CurrentDeviceId
   \   00000024   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000028   200050E3           CMP      R0,#+32
   \   0000002C   0800001A           BNE      ??NewValue_2
    105                  CheckAlarms(AlarmSet);
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   C00084E2           ADD      R0,R4,#+192
   \   00000038   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    106                  SendData();
   \   0000003C   A42094E5           LDR      R2,[R4, #+164]
   \   00000040   6510A0E3           MOV      R1,#+101
   \   00000044   402092E5           LDR      R2,[R2, #+64]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   0FE0A0E1           MOV      LR,PC
   \   00000050   12FF2FE1           BX       R2
    107              }
    108          #endif
    109          }
   \                     ??NewValue_2:
   \   00000054   1040BDE8           POP      {R4,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??NewValue_1:
   \   0000005C   ........           DC32     CurrentDeviceId
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          float AI_AC_Sensor::Calculate(void)
    112          {
    113              ResultOK  = true;
   \                     ??Calculate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   3611C0E5           STRB     R1,[R0, #+310]
    114              CalcValue = FilteredValue;
   \   00000008   441190E5           LDR      R1,[R0, #+324]
   \   0000000C   481180E5           STR      R1,[R0, #+328]
    115              return(CalcValue);
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1EFF2FE1           BX       LR               ;; return
    116          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AI_AC_Sensor &AI_AC_Sensor::new AI_AC_Sensor()
   \                     `??new AI_AC_Sensor`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5A0FA0E3           MOV      R0,#+360
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AI_AC_Sensor_1`
   \   00000014   ........           BL       ??AI_AC_Sensor
   \                     `??new AI_AC_Sensor_1`:
   \   00000018   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??npos
    117          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AI_AC_Sensor::AI_AC_Sensor()      16
     AI_AC_Sensor::Calculate()          0
     AI_AC_Sensor::GetStringValue(int, int, AnsiString &)
                                       40
     AI_AC_Sensor::GetValue(int, int, float &, int &, int &)
                                       28
     AI_AC_Sensor::NewValue(float)      8
     AI_AC_Sensor::PutFloatValue(int, float)
                                        4
     AI_AC_Sensor::PutValue(int, int, AnsiString, bool, int *)
                                       64
     AI_AC_Sensor::new AI_AC_Sensor()
                                        4
     AI_AC_Sensor::~AI_AC_Sensor()     12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     AI_AC_Sensor::AI_AC_Sensor()    112
     AI_AC_Sensor::~AI_AC_Sensor()    48
     ?Subroutine11                     8
     AI_AC_Sensor::PutValue(int, int, AnsiString, bool, int *)
                                     184
     AI_AC_Sensor::GetValue(int, int, float &, int &, int &)
                                     152
     AI_AC_Sensor::GetStringValue(int, int, AnsiString &)
                                      96
     AI_AC_Sensor::PutFloatValue(int, float)
                                       8
     ?Subroutine10                     8
     AI_AC_Sensor::NewValue(float)    96
     AI_AC_Sensor::Calculate()        24
     AI_AC_Sensor::new AI_AC_Sensor()
                                      28
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         404

 
 1 960 bytes in segment CODE
   132 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 776 bytes of CODE  memory (+ 1 188 bytes shared)
 132 bytes of CONST memory

Errors: none
Warnings: none
