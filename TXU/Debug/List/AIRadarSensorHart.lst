##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIRadarSensorHart.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AIRadarSensorHart.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIRadarSensorHart.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIRadarSensorHart.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIRadarSensorHart.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIRadarSensorHart::AIRadarSensorHart(void) : AIRadarSensor(C_AI_Radar_Hart) {
   \                     ??AIRadarSensorHart:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   5C10A0E3           MOV      R1,#+92
   \   0000000C   801E81E3           ORR      R1,R1,#0x800
   \   00000010   ........           _BLF     ??AIRadarSensor,??AIRadarSensor??rA
   \   00000014   38009FE5           LDR      R0,??AIRadarSensorHart_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     10              BasicSensorType     = AI_SENSOR_RADAR;
   \   0000001C   0300A0E3           MOV      R0,#+3
   \   00000020   100184E5           STR      R0,[R4, #+272]
     11              BasicSensorTypeWord = L_WORD600; //Rad
   \   00000024   960FA0E3           MOV      R0,#+600
   \   00000028   140184E5           STR      R0,[R4, #+276]
     12              Location            = C_AI_LOC_DECK;
   \   0000002C   EA00A0E3           MOV      R0,#+234
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   280184E5           STR      R0,[R4, #+296]
     13              IOType              = C_IO_MODBUS;
   \   00000038   D00040E2           SUB      R0,R0,#+208
   \   0000003C   FC0084E5           STR      R0,[R4, #+252]
     14              HartValue           = 0.0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   640184E5           STR      R0,[R4, #+356]
     15          }
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   1040BDE8           POP      {R4,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     ??AIRadarSensorHart_1:
   \   00000054   ........           DC32     ??__vtbl
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          AIRadarSensorHart::~AIRadarSensorHart(void) {
   \                     `?~AIRadarSensorHart`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIRadarSensorHart_1`
     18          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AIRadarSensor`,`?~AIRadarSensor??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIRadarSensorHart_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIRadarSensorHart_1`:
   \   0000002C   ........           B        ?Subroutine16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     19          
     20          
     21          //---------------------------------------------------------------------------
     22          
     23          ///////////////////////////////////////////////////////////////
     24          //
     25          // Routines for the Configuration
     26          //
     27          ///////////////////////////////////////////////////////////////
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          AnsiString AIRadarSensorHart::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     30              AnsiString LocalString = TabStrX(1, ExtraTabs) + KeyWord(Type) + CrLfStr;
   \   00000004   80719FE5           LDR      R7,??MakeConfigString_2  ;; CrLfStr
   \   00000008   FCD04DE2           SUB      SP,SP,#+252
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   A01094E5           LDR      R1,[R4, #+160]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   54008DE2           ADD      R0,SP,#+84
   \   00000020   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   38008DE2           ADD      R0,SP,#+56
   \   00000030   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000034   54208DE2           ADD      R2,SP,#+84
   \   00000038   38108DE2           ADD      R1,SP,#+56
   \   0000003C   1C008DE2           ADD      R0,SP,#+28
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   1C108DE2           ADD      R1,SP,#+28
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   1C008DE2           ADD      R0,SP,#+28
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   54008DE2           ADD      R0,SP,#+84
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   38008DE2           ADD      R0,SP,#+56
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
     31              LocalString += AnalogInput::MakeConfigString();     //common
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   70108DE2           ADD      R1,SP,#+112
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000B0   ........           LDR      R0,??DataTable2  ;; ??npos
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   004090E5           LDR      R4,[R0, #+0]
   \   000000BC   70108DE2           ADD      R1,SP,#+112
   \   000000C0   0430A0E1           MOV      R3,R4
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     ??append,??append??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   70008DE2           ADD      R0,SP,#+112
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     32              LocalString += TabStrX(1, ExtraTabs) + KeyWord(C_AI_END) + CrLfStr;
   \   000000DC   9810A0E3           MOV      R1,#+152
   \   000000E0   801E81E3           ORR      R1,R1,#0x800
   \   000000E4   E0008DE2           ADD      R0,SP,#+224
   \   000000E8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000EC   0620A0E1           MOV      R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C4008DE2           ADD      R0,SP,#+196
   \   000000F8   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   000000FC   E0208DE2           ADD      R2,SP,#+224
   \   00000100   C4108DE2           ADD      R1,SP,#+196
   \   00000104   A8008DE2           ADD      R0,SP,#+168
   \   00000108   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000010C   0720A0E1           MOV      R2,R7
   \   00000110   A8108DE2           ADD      R1,SP,#+168
   \   00000114   8C008DE2           ADD      R0,SP,#+140
   \   00000118   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000011C   0430A0E1           MOV      R3,R4
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   8C108DE2           ADD      R1,SP,#+140
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   ........           _BLF     ??append,??append??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   8C008DE2           ADD      R0,SP,#+140
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   A8008DE2           ADD      R0,SP,#+168
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   E0008DE2           ADD      R0,SP,#+224
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   C4008DE2           ADD      R0,SP,#+196
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
     33              LocalString += CrLfStr;
   \   00000170   0430A0E1           MOV      R3,R4
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0710A0E1           MOV      R1,R7
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           _BLF     ??append,??append??rA
     34          
     35          	return (LocalString);
   \   00000184   FCD08DE2           ADD      SP,SP,#+252
   \   00000188   ........           B        ?Subroutine17
   \                     ??MakeConfigString_2:
   \   0000018C   ........           DC32     CrLfStr
     36          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   0000000C   4D62503F           DC32     0x3f50624d
     37          //---------------------------------------------------------------------------
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          bool AIRadarSensorHart::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     40              bool NoError = true;
     41              int ErrorLine = 0;
     42              int Key;
     43              AnsiString PROName = "Radar(Hart)";
   \   00000004   B4729FE5           LDR      R7,??LoadConfigString_4+0x4  ;; `?<Constant "Radar(Hart)">`
   \   00000008   A0D04DE2           SUB      SP,SP,#+160
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0710A0E1           MOV      R1,R7
   \   00000020   44008DE2           ADD      R0,SP,#+68
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
     44              if (PROPtr)   PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000028   498FA0E3           MOV      R8,#+292
   \   0000002C   040098E7           LDR      R0,[R8, +R4]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1500000A           BEQ      ??LoadConfigString_5
   \   00000038   0C1087E2           ADD      R1,R7,#+12
   \   0000003C   28008DE2           ADD      R0,SP,#+40
   \   00000040   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   040098E7           LDR      R0,[R8, +R4]
   \   0000004C   442080E2           ADD      R2,R0,#+68
   \   00000050   0C008DE2           ADD      R0,SP,#+12
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   ........           LDR      R0,??DataTable2  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   003090E5           LDR      R3,[R0, #+0]
   \   00000064   0C108DE2           ADD      R1,SP,#+12
   \   00000068   44008DE2           ADD      R0,SP,#+68
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   28008DE2           ADD      R0,SP,#+40
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
     45              PROName += ":\n";
   \                     ??LoadConfigString_5:
   \   00000090   897F8FE2           ADR      R7,??LoadConfigString_4  ;; ":\n"
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           _BLF     strlen,??strlen??rA
   \   0000009C   0020A0E1           MOV      R2,R0
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   44008DE2           ADD      R0,SP,#+68
   \   000000A8   ........           _BLF     ??append_1,??append??rA_1
   \   000000AC   0070E0E3           MVN      R7,#+0
     46              do {
     47                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_6:
   \   000000B0   0030A0E3           MOV      R3,#+0
   \   000000B4   0D20A0E1           MOV      R2,SP
   \   000000B8   28108DE2           ADD      R1,SP,#+40
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           _BLF     ??NextWord,??NextWord??rA
     48                  if (ErrorLine) {
   \   000000C4   00009DE5           LDR      R0,[SP, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0B00000A           BEQ      ??LoadConfigString_7
     49          			if (ErrorLine != EOF) {
   \   000000D0   070050E1           CMP      R0,R7
   \   000000D4   2F00000A           BEQ      ??LoadConfigString_8
     50                          GiveConfigWarning(PROName, ErrorLine);
   \   000000D8   44108DE2           ADD      R1,SP,#+68
   \   000000DC   0C008DE2           ADD      R0,SP,#+12
   \   000000E0   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000E4   00109DE5           LDR      R1,[SP, #+0]
   \   000000E8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0C008DE2           ADD      R0,SP,#+12
   \                     ??LoadConfigString_9:
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   250000EA           B        ??LoadConfigString_8
     51                      }
     52                  } else {
     53                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_7:
   \   00000100   28108DE2           ADD      R1,SP,#+40
   \   00000104   0C008DE2           ADD      R0,SP,#+12
   \   00000108   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000010C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000110   0060A0E1           MOV      R6,R0
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   0C008DE2           ADD      R0,SP,#+12
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
     54                      switch (Key) {
   \   00000124   980046E2           SUB      R0,R6,#+152
   \   00000128   800E40E2           SUB      R0,R0,#+2048
   \   0000012C   010050E3           CMP      R0,#+1
   \   00000130   0300008A           BHI      ??LoadConfigString_10
   \   00000134   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000138   0010D1E7           LDRB     R1,[R1, R0]
   \   0000013C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000140   15120000           DC8      +21,+18,+0,+0
     55                      default:
     56                          GiveConfigWarning(PROName, InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_10:
   \   00000144   28108DE2           ADD      R1,SP,#+40
   \   00000148   68008DE2           ADD      R0,SP,#+104
   \   0000014C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000150   0080A0E1           MOV      R8,R0
   \   00000154   44108DE2           ADD      R1,SP,#+68
   \   00000158   84008DE2           ADD      R0,SP,#+132
   \   0000015C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000160   1C2095E5           LDR      R2,[R5, #+28]
   \   00000164   0810A0E1           MOV      R1,R8
   \   00000168   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   68008DE2           ADD      R0,SP,#+104
   \   00000178   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0110A0E3           MOV      R1,#+1
   \   00000184   84008DE2           ADD      R0,SP,#+132
   \   00000188   DAFFFFEA           B        ??LoadConfigString_9
     57                          break;
     58                      case C_AI_START_COMMON:
     59                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_11:
   \   0000018C   0510A0E1           MOV      R1,R5
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   ........           _BLF     ??LoadConfigString_3,??LoadConfigString??rA
     60                          break;
     61                      case C_AI_END:
     62                          break;
     63                      }
     64                  }
     65              }while (NoError && (ErrorLine != EOF) && (Key != C_AI_END));
   \                     ??LoadConfigString_8:
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   28008DE2           ADD      R0,SP,#+40
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   00009DE5           LDR      R0,[SP, #+0]
   \   000001AC   070050E1           CMP      R0,R7
   \   000001B0   9800A013           MOVNE    R0,#+152
   \   000001B4   800E8013           ORRNE    R0,R0,#0x800
   \   000001B8   00005611           CMPNE    R6,R0
   \   000001BC   BBFFFF1A           BNE      ??LoadConfigString_6
     66              if (!MinRange && !MaxRange) {
   \   000001C0   575FA0E3           MOV      R5,#+348
   \   000001C4   041095E7           LDR      R1,[R5, +R4]
   \   000001C8   0000A0E3           MOV      R0,#+0
   \   000001CC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001D0   000050E3           CMP      R0,#+0
   \   000001D4   0400001A           BNE      ??LoadConfigString_12
   \   000001D8   601194E5           LDR      R1,[R4, #+352]
   \   000001DC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001E0   000050E3           CMP      R0,#+0
     67                  MinRange = Distance;
   \   000001E4   2C019405           LDREQ    R0,[R4, #+300]
   \   000001E8   04008507           STREQ    R0,[R5, +R4]
     68              }
     69          
     70              switch (IOType) {
   \                     ??LoadConfigString_12:
   \   000001EC   FC0094E5           LDR      R0,[R4, #+252]
   \   000001F0   190040E2           SUB      R0,R0,#+25
   \   000001F4   800E40E2           SUB      R0,R0,#+2048
   \   000001F8   010050E3           CMP      R0,#+1
   \   000001FC   2000008A           BHI      ??LoadConfigString_13
   \   00000200   011F8FE2           ADR      R1,??LoadConfigString_2
   \   00000204   0010D1E7           LDRB     R1,[R1, R0]
   \   00000208   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_2:
   \   0000020C   000F0000           DC8      +0,+15,+0,+0
     71              case C_IO_AN_ZBHART:
     72                  {
     73                      AlarmmAmpShortCircuit *ShortCircuitPtr  = new AlarmmAmpShortCircuit(this);
   \                     ??LoadConfigString_14:
   \   00000210   0400A0E1           MOV      R0,R4
   \   00000214   ........           _BLF     `??new AlarmmAmpShortCircuit`,`??new AlarmmAmpShortCircuit??rA`
   \   00000218   0050A0E1           MOV      R5,R0
     74                      AlarmmAmpOpenLoop     *OpenLoopPtr      = new AlarmmAmpOpenLoop(this);
   \   0000021C   0010A0E3           MOV      R1,#+0
   \   00000220   0400A0E1           MOV      R0,R4
   \   00000224   ........           _BLF     `??new AlarmmAmpOpenLoop`,`??new AlarmmAmpOpenLoop??rA`
   \   00000228   0060A0E1           MOV      R6,R0
     75                      AlarmSet.insert(ShortCircuitPtr);
   \   0000022C   0520A0E1           MOV      R2,R5
   \   00000230   C01084E2           ADD      R1,R4,#+192
   \   00000234   04008DE2           ADD      R0,SP,#+4
   \   00000238   ........           _BLF     ??insert,??insert??rA
     76                      AlarmSet.insert(OpenLoopPtr);
   \   0000023C   0620A0E1           MOV      R2,R6
   \   00000240   C01084E2           ADD      R1,R4,#+192
   \   00000244   60008DE2           ADD      R0,SP,#+96
   \   00000248   0C0000EA           B        ??LoadConfigString_15
     77                  }
     78                  break;
     79              case C_IO_MODBUS:
     80                  {
     81                      AlarmHartSensorShortCircuit *AlShortCircuitPtr  = new AlarmHartSensorShortCircuit(this);
   \                     ??LoadConfigString_16:
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           _BLF     `??new AlarmHartSensorShortCircuit`,`??new AlarmHartSensorShortCircuit??rA`
   \   00000254   0050A0E1           MOV      R5,R0
     82                      AlarmHartSensorOpenLoop     *AlOpenLoopPtr      = new AlarmHartSensorOpenLoop(this);
   \   00000258   0400A0E1           MOV      R0,R4
   \   0000025C   ........           _BLF     `??new AlarmHartSensorOpenLoop`,`??new AlarmHartSensorOpenLoop??rA`
   \   00000260   0060A0E1           MOV      R6,R0
     83                      AlarmSet.insert(AlShortCircuitPtr);
   \   00000264   0520A0E1           MOV      R2,R5
   \   00000268   C01084E2           ADD      R1,R4,#+192
   \   0000026C   60008DE2           ADD      R0,SP,#+96
   \   00000270   ........           _BLF     ??insert,??insert??rA
     84                      AlarmSet.insert(AlOpenLoopPtr);
   \   00000274   0620A0E1           MOV      R2,R6
   \   00000278   C01084E2           ADD      R1,R4,#+192
   \   0000027C   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_15:
   \   00000280   ........           _BLF     ??insert,??insert??rA
     85                  }
     86                  break;
     87              }
     88              AlarmHartSensorComError     *AlHartComErrPtr    = new AlarmHartSensorComError(this);
   \                     ??LoadConfigString_13:
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     `??new AlarmHartSensorComError`,`??new AlarmHartSensorComError??rA`
     89              AlarmSet.insert(AlHartComErrPtr);
   \   0000028C   0020A0E1           MOV      R2,R0
   \   00000290   C01084E2           ADD      R1,R4,#+192
   \   00000294   04008DE2           ADD      R0,SP,#+4
   \   00000298   ........           _BLF     ??insert,??insert??rA
     90              return (NoError);
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   44008DE2           ADD      R0,SP,#+68
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   A0D08DE2           ADD      SP,SP,#+160
   \   000002B0   F041BDE8           POP      {R4-R8,LR}
   \   000002B4   0100A0E3           MOV      R0,#+1
   \   000002B8   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_4:
   \   000002BC   3A0A0000           DC8      ":\n",+0
   \   000002C0   ........           DC32     `?<Constant "Radar(Hart)">`
     91          }
     92          ///////////////////////////////////////////////////////////////
     93          //
     94          // Routines for the librarian for input
     95          //
     96          ///////////////////////////////////////////////////////////////
     97          
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          int AIRadarSensorHart::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7480DDE5           LDRB     R8,[SP, #+116]
   \   0000000C   78509DE5           LDR      R5,[SP, #+120]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    100              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
    101              switch (ValueId) {
   \   0000002C   B50046E2           SUB      R0,R6,#+181
   \   00000030   400E40E2           SUB      R0,R0,#+1024
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   3100008A           BHI      ??PutValue_3
   \   0000003C   012F8FE2           ADR      R2,??PutValue_1
   \   00000040   0020D2E7           LDRB     R2,[R2, R0]
   \   00000044   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   00000048   002E2E1C           DC8      +0,+46,+46,+28
    102              case SVT_AI_OFFSET   :
    103                  Offset = ConvertToSi(NewValue, ValUnitId = LENGTH_UNIT, Status, -5.0, 50.0, Offset);
   \                     ??PutValue_4:
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   04208DE5           STR      R2,[SP, #+4]
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000005C   0060A0E1           MOV      R6,R0
   \   00000060   507FA0E3           MOV      R7,#+320
   \   00000064   040097E7           LDR      R0,[R7, +R4]
   \   00000068   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000006C   03002DE9           PUSH     {R0,R1}
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   4014A0E3           MOV      R1,#+1073741824
   \   00000078   491881E3           ORR      R1,R1,#0x490000
   \   0000007C   03002DE9           PUSH     {R0,R1}
   \   00000080   C014A0E3           MOV      R1,#-1073741824
   \   00000084   501981E3           ORR      R1,R1,#0x140000
   \   00000088   03002DE9           PUSH     {R0,R1}
   \   0000008C   18208DE2           ADD      R2,SP,#+24
   \   00000090   0800BDE8           POP      {R3}
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000A0   040087E7           STR      R0,[R7, +R4]
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   14D08DE2           ADD      SP,SP,#+20
   \   000000B8   210000EA           B        ??PutValue_5
    104                  break;
    105              case SVT_AI_CALC_VAL :
    106                  Status = AdjustSensor(NewValue, ValUnitId = LENGTH_UNIT, 0.0, 50.0, Local);
   \                     ??PutValue_6:
   \   000000BC   0120A0E3           MOV      R2,#+1
   \   000000C0   04208DE5           STR      R2,[SP, #+4]
   \   000000C4   24008DE2           ADD      R0,SP,#+36
   \   000000C8   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000CC   00012DE9           PUSH     {R8}
   \   000000D0   4014A0E3           MOV      R1,#+1073741824
   \   000000D4   921781E3           ORR      R1,R1,#0x2480000
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   0030A0E3           MOV      R3,#+0
   \   000000E0   0120A0E3           MOV      R2,#+1
   \   000000E4   0010A0E1           MOV      R1,R0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   000000F0   08008DE5           STR      R0,[SP, #+8]
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   2C008DE2           ADD      R0,SP,#+44
   \   00000100   0D0000EA           B        ??PutValue_7
    107                  break;
    108              default:
    109                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   00000104   40008DE2           ADD      R0,SP,#+64
   \   00000108   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000010C   0030A0E1           MOV      R3,R0
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   00012DE9           PUSH     {R8}
   \   0000011C   0720A0E1           MOV      R2,R7
   \   00000120   0610A0E1           MOV      R1,R6
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   0000012C   08008DE5           STR      R0,[SP, #+8]
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   48008DE2           ADD      R0,SP,#+72
   \                     ??PutValue_7:
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000140   08D08DE2           ADD      SP,SP,#+8
    110                  break;
    111              }
    112              if (Status == E_NO_ERR) {
   \                     ??PutValue_5:
   \   00000144   00009DE5           LDR      R0,[SP, #+0]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0400001A           BNE      ??PutValue_8
    113                  SetModifiedFlag();
   \   00000150   A41094E5           LDR      R1,[R4, #+164]
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   541091E5           LDR      R1,[R1, #+84]
   \   0000015C   0FE0A0E1           MOV      LR,PC
   \   00000160   11FF2FE1           BX       R1
    114              }
    115              if (UnitId) {
   \                     ??PutValue_8:
   \   00000164   000055E3           CMP      R5,#+0
    116                  *UnitId = ValUnitId;
   \   00000168   04009D15           LDRNE    R0,[SP, #+4]
   \   0000016C   00008515           STRNE    R0,[R5, #+0]
    117              }
    118              return (Status);
   \   00000170   00009DE5           LDR      R0,[SP, #+0]
   \   00000174   5CD08DE2           ADD      SP,SP,#+92
   \   00000178   F041BDE8           POP      {R4-R8,LR}
   \   0000017C   1EFF2FE1           BX       LR               ;; return
    119          }
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int  AIRadarSensorHart::GetValue(int ValueId, int Index, float& MyRetValue, int& DecPnt, int& Unit) {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20509DE5           LDR      R5,[SP, #+32]
   \   00000008   24609DE5           LDR      R6,[SP, #+36]
   \   0000000C   00C0A0E1           MOV      R12,R0
    122              int Status = GETVAL_NO_ERR;
   \   00000010   3801DCE5           LDRB     R0,[R12, #+312]
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   0180A0E3           MOV      R8,#+1
   \   00000020   0390A0E3           MOV      R9,#+3
   \   00000024   00A0A0E3           MOV      R10,#+0
   \   00000028   7BE0A0E3           MOV      LR,#+123
   \   0000002C   40EE8EE3           ORR      LR,LR,#0x400
   \   00000030   0E0051E1           CMP      R1,LR
   \   00000034   2100000A           BEQ      ??GetValue_2
   \   00000038   01E08EE2           ADD      LR,LR,#+1
   \   0000003C   0E0051E1           CMP      R1,LR
   \   00000040   2000000A           BEQ      ??GetValue_3
   \   00000044   01E08EE3           ORR      LR,LR,#0x1
   \   00000048   0E0051E1           CMP      R1,LR
   \   0000004C   0C00000A           BEQ      ??GetValue_4
   \   00000050   01E08EE2           ADD      LR,LR,#+1
   \   00000054   0E0051E1           CMP      R1,LR
   \   00000058   0F00000A           BEQ      ??GetValue_5
   \   0000005C   01E08EE3           ORR      LR,LR,#0x1
   \   00000060   0E0051E1           CMP      R1,LR
   \   00000064   0E00000A           BEQ      ??GetValue_6
   \   00000068   36E08EE2           ADD      LR,LR,#+54
   \   0000006C   0E0051E1           CMP      R1,LR
   \   00000070   0D00000A           BEQ      ??GetValue_7
   \   00000074   03E08EE2           ADD      LR,LR,#+3
   \   00000078   0E0051E1           CMP      R1,LR
   \   0000007C   1700000A           BEQ      ??GetValue_8
   \   00000080   1C0000EA           B        ??GetValue_9
    123              switch (ValueId) {
    124              case SVT_HART_STATUS :
    125                  MyRetValue = Failure & HART_STATUS_COM_ERROR_BIT;
   \                     ??GetValue_4:
   \   00000084   010000E2           AND      R0,R0,#0x1
   \                     ??GetValue_10:
   \   00000088   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000008C   000084E5           STR      R0,[R4, #+0]
    126                  DecPnt     = 0;
   \   00000090   00A085E5           STR      R10,[R5, #+0]
    127                  Unit       = NO_UNIT;
   \   00000094   00A086E5           STR      R10,[R6, #+0]
   \   00000098   1C0000EA           B        ??GetValue_11
    128                  break;
    129              case SVT_HART_OPEN_LOOP :
    130                  MyRetValue = Failure & HART_STATUS_OPEN_LOOP_BIT;
   \                     ??GetValue_5:
   \   0000009C   040000E2           AND      R0,R0,#0x4
   \   000000A0   F8FFFFEA           B        ??GetValue_10
    131                  DecPnt     = 0;
    132                  Unit       = NO_UNIT;
    133                  break;
    134              case SVT_HART_SHORT_CIRCUIT :
    135                  MyRetValue = Failure & SVT_HART_SHORT_CIRCUIT;
   \                     ??GetValue_6:
   \   000000A4   00000EE0           AND      R0,LR,R0
   \   000000A8   F6FFFFEA           B        ??GetValue_10
    136                  DecPnt     = 0;
    137                  Unit       = NO_UNIT;
    138                  break;
    139              case SVT_AI_OFFSET   :
    140                  MyRetValue = Offset;
   \                     ??GetValue_7:
   \   000000AC   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_12:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
    141                  DecPnt     = 3;
   \   000000B4   009085E5           STR      R9,[R5, #+0]
    142                  Unit       = LENGTH_UNIT;
   \   000000B8   008086E5           STR      R8,[R6, #+0]
   \   000000BC   130000EA           B        ??GetValue_11
    143                  break;
    144              case SVT_HART_RADAR  :
    145                  MyRetValue = HartValue;
   \                     ??GetValue_2:
   \   000000C0   64019CE5           LDR      R0,[R12, #+356]
   \   000000C4   F9FFFFEA           B        ??GetValue_12
    146                  DecPnt     = 3;
    147                  Unit       = LENGTH_UNIT;
    148                  break;
    149              case SVT_HART_MA:
    150                  MyRetValue = FilteredValue;
   \                     ??GetValue_3:
   \   000000C8   44019CE5           LDR      R0,[R12, #+324]
   \   000000CC   000084E5           STR      R0,[R4, #+0]
    151                  DecPnt     = 3;
   \   000000D0   009085E5           STR      R9,[R5, #+0]
    152                  Unit       = CURRENT_UNIT;
   \   000000D4   1100A0E3           MOV      R0,#+17
   \   000000D8   000086E5           STR      R0,[R6, #+0]
   \   000000DC   0B0000EA           B        ??GetValue_11
    153                  break;
    154              case SVT_AI_CALC_VAL :
    155                  MyRetValue = Calculate();
   \                     ??GetValue_8:
   \   000000E0   A4109CE5           LDR      R1,[R12, #+164]
   \   000000E4   0C00A0E1           MOV      R0,R12
   \   000000E8   601091E5           LDR      R1,[R1, #+96]
   \   000000EC   0FE0A0E1           MOV      LR,PC
   \   000000F0   11FF2FE1           BX       R1
   \   000000F4   EDFFFFEA           B        ??GetValue_12
    156                  DecPnt     = 3;
    157                  Unit       = LENGTH_UNIT;
    158                  break;
    159              default:
    160                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_9:
   \   000000F8   40002DE9           PUSH     {R6}
   \   000000FC   20002DE9           PUSH     {R5}
   \   00000100   0C00A0E1           MOV      R0,R12
   \   00000104   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000108   0070A0E1           MOV      R7,R0
   \   0000010C   08D08DE2           ADD      SP,SP,#+8
    161                  break;
    162              }
    163              return (Status);
   \                     ??GetValue_11:
   \   00000110   0700A0E1           MOV      R0,R7
   \   00000114   F047BDE8           POP      {R4-R10,LR}
   \   00000118   1EFF2FE1           BX       LR               ;; return
    164          }
    165          

   \                                 In segment CODE, align 4, keep-with-next
    166          int AIRadarSensorHart::GetStringValue(int ValueId, int Index, AnsiString& MyString) {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    167              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    168              switch (ValueId) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0D00001A           BNE      ??GetStringValue_2
    169              case SVT_AI_UNIT:
    170                  MyString = GetUnitName(LENGTH_UNIT);
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000024   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign,??assign??rA
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   010000EA           B        ??GetStringValue_3
    171                  break;
    172              default:
    173                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
    174                  break;
    175              }
    176              return (Status);
   \                     ??GetStringValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1CD08DE2           ADD      SP,SP,#+28
   \   00000060                      REQUIRE ?Subroutine16
   \   00000060                      ;; // Fall through to label ?Subroutine16
    177          }
    178          

   \                                 In segment CODE, align 4, keep-with-next
    179          int AIRadarSensorHart::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0200A0E1           MOV      R0,R2
    180              int Status = E_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    181              switch (ValueId) {
   \   00000010   4E6FA0E3           MOV      R6,#+312
   \   00000014   0470D6E7           LDRB     R7,[R6, +R4]
   \   00000018   7B2041E2           SUB      R2,R1,#+123
   \   0000001C   402E42E2           SUB      R2,R2,#+1024
   \   00000020   040052E3           CMP      R2,#+4
   \   00000024   3000008A           BHI      ??PutFloatValue_3
   \   00000028   013F8FE2           ADR      R3,??PutFloatValue_1
   \   0000002C   0230D3E7           LDRB     R3,[R3, R2]
   \   00000030   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000034   0801220E           DC8      +8,+1,+34,+14
   \   00000038   18000000           DC8      +24,+0,+0,+0
    182              case SVT_HART_MA:
    183                  FilteredValue = NewValue*CNV_MILIAMP_TO_AMP;
   \                     ??PutFloatValue_4:
   \   0000003C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000040   ........           LDR      R2,??Subroutine17_0  ;; 0xffffffffd2f1a9fc
   \   00000044   ........           LDR      R3,??Subroutine17_0+0x4  ;; 0x3f50624d
   \   00000048   ........           _BLF     __dMul,??__dMul??rA
   \   0000004C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000050   440184E5           STR      R0,[R4, #+324]
   \   00000054   280000EA           B        ??PutFloatValue_5
    184                  break;
    185              case SVT_HART_RADAR:
    186                  HartValue     = NewValue;
   \                     ??PutFloatValue_6:
   \   00000058   640184E5           STR      R0,[R4, #+356]
    187                   // HartComErr alarm is triggered by Failure status active. So HWFailure is based on mA alarms and HartComError
    188                  ActiveAlarms = CheckAlarms(AlarmSet, &HWFailure);
   \   0000005C   431F84E2           ADD      R1,R4,#+268
   \   00000060   C00084E2           ADD      R0,R4,#+192
   \   00000064   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000068   380084E5           STR      R0,[R4, #+56]
   \   0000006C   220000EA           B        ??PutFloatValue_5
    189                 break;
    190              case SVT_HART_OPEN_LOOP:
    191                  if (NewValue) {
   \                     ??PutFloatValue_7:
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0400D6E7           LDRB     R0,[R6, +R4]
   \   00000080   FB000002           ANDEQ    R0,R0,#0xFB
    192                      // 0x0xfe as mask to ignore possible Hart com fault
    193                      Failure &= 0xfe;
    194                      Failure |= HART_STATUS_OPEN_LOOP_BIT;
   \   00000084   FE000012           ANDNE    R0,R0,#0xFE
   \   00000088   0400C617           STRBNE   R0,[R6, +R4]
   \   0000008C   04008013           ORRNE    R0,R0,#0x4
   \                     ??PutFloatValue_8:
   \   00000090   0400C6E7           STRB     R0,[R6, +R4]
   \   00000094   180000EA           B        ??PutFloatValue_5
    195                  }else{
    196                      Failure &= (~HART_STATUS_OPEN_LOOP_BIT)&0xff;
    197                  }
    198                  break;
    199              case SVT_HART_SHORT_CIRCUIT:
    200                  if (NewValue) {
   \                     ??PutFloatValue_9:
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0200000A           BEQ      ??PutFloatValue_10
    201                      // 0x0xfe as mask to ignore possible Hart com fault
    202                      Failure &= 0xfe;
    203                      Failure |= HART_STATUS_SHORT_CIRCUIT_BIT;
   \   000000A8   FE0007E2           AND      R0,R7,#0xFE
   \   000000AC   020080E3           ORR      R0,R0,#0x2
   \   000000B0   F6FFFFEA           B        ??PutFloatValue_8
    204                  }else{
    205                      Failure &= (~HART_STATUS_SHORT_CIRCUIT_BIT)&0xff;
   \                     ??PutFloatValue_10:
   \   000000B4   0400D6E7           LDRB     R0,[R6, +R4]
   \   000000B8   FD0000E2           AND      R0,R0,#0xFD
   \   000000BC   F3FFFFEA           B        ??PutFloatValue_8
    206                  }
    207                  break;
    208              case SVT_HART_STATUS:
    209                  if (NewValue) {
   \                     ??PutFloatValue_11:
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0300000A           BEQ      ??PutFloatValue_12
    210                      // Do not set if HART_STATUS_OPEN_LOOP_BIT or HART_STATUS_SHORT_CIRCUIT_BIT are active
    211                      if (!(Failure & (HART_STATUS_OPEN_LOOP_BIT | HART_STATUS_SHORT_CIRCUIT_BIT))) {
   \   000000D0   060017E3           TST      R7,#0x6
   \   000000D4   0800001A           BNE      ??PutFloatValue_5
    212                          Failure |= HART_STATUS_COM_ERROR_BIT;
   \   000000D8   010087E3           ORR      R0,R7,#0x1
   \   000000DC   EBFFFFEA           B        ??PutFloatValue_8
    213                      }
    214                  }else{
    215                      Failure &= 0xfe;
   \                     ??PutFloatValue_12:
   \   000000E0   0400D6E7           LDRB     R0,[R6, +R4]
   \   000000E4   FE0000E2           AND      R0,R0,#0xFE
   \   000000E8   E8FFFFEA           B        ??PutFloatValue_8
    216                  }
    217                  break;
    218              default:
    219                  Status = AnalogInput::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_3:
   \   000000EC   0020A0E1           MOV      R2,R0
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           _BLF     ??PutFloatValue_2,??PutFloatValue??rA
   \   000000F8   0050A0E1           MOV      R5,R0
    220                  break;
    221              }
    222              return (Status);
   \                     ??PutFloatValue_5:
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100                      REQUIRE ?Subroutine17
   \   00000100                      ;; // Fall through to label ?Subroutine17
    223          
    224          }
    225          
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          int AIRadarSensorHart::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   07402DE9           PUSH     {R0-R2,LR}
    228              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    229              switch (pCH->CommandNo) {
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000010   652052E2           SUBS     R2,R2,#+101
   \   00000014   0200000A           BEQ      ??ReceiveData_2
   \   00000018   012052E2           SUBS     R2,R2,#+1
   \   0000001C   3000000A           BEQ      ??ReceiveData_3
   \   00000020   310000EA           B        ??ReceiveData_4
    230              case CMD_GENERIC_REALTIME_DATA:
    231                  {
    232                      ANPRO10_COMMAND_2520  *pData = (ANPRO10_COMMAND_2520 *)data;
    233                      HWFailure       = pData->HWFailure;
   \                     ??ReceiveData_2:
   \   00000024   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000028   0C21C0E5           STRB     R2,[R0, #+268]
    234                      MyHWFailure     = pData->MyHWFailure;
   \   0000002C   0920D1E5           LDRB     R2,[R1, #+9]
   \   00000030   0D21C0E5           STRB     R2,[R0, #+269]
    235                      ResultOK        = pData->ResultOK;
   \   00000034   0A20D1E5           LDRB     R2,[R1, #+10]
   \   00000038   3621C0E5           STRB     R2,[R0, #+310]
    236                      Failure         = pData->Failure;
   \   0000003C   0B20D1E5           LDRB     R2,[R1, #+11]
   \   00000040   3821C0E5           STRB     R2,[R0, #+312]
    237                      ActiveAlarms    = pData->ActiveAlarms;
   \   00000044   0F20D1E5           LDRB     R2,[R1, #+15]
   \   00000048   0E30D1E5           LDRB     R3,[R1, #+14]
   \   0000004C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000050   0D30D1E5           LDRB     R3,[R1, #+13]
   \   00000054   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000058   0C30D1E5           LDRB     R3,[R1, #+12]
   \   0000005C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000060   382080E5           STR      R2,[R0, #+56]
    238                      FilteredValue   = pData->FilteredValue;
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0D30A0E1           MOV      R3,SP
   \                     ??ReceiveData_5:
   \   0000006C   14C081E2           ADD      R12,R1,#+20
   \   00000070   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000074   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000078   012082E2           ADD      R2,R2,#+1
   \   0000007C   040052E3           CMP      R2,#+4
   \   00000080   F9FFFFBA           BLT      ??ReceiveData_5
   \   00000084   00209DE5           LDR      R2,[SP, #+0]
    239                      CalcValue       = pData->CalcValue;
   \   00000088   04308DE2           ADD      R3,SP,#+4
   \   0000008C   442180E5           STR      R2,[R0, #+324]
   \   00000090   0020A0E3           MOV      R2,#+0
   \                     ??ReceiveData_6:
   \   00000094   10C081E2           ADD      R12,R1,#+16
   \   00000098   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   0000009C   03C0C2E7           STRB     R12,[R2, +R3]
   \   000000A0   012082E2           ADD      R2,R2,#+1
   \   000000A4   040052E3           CMP      R2,#+4
   \   000000A8   F9FFFFBA           BLT      ??ReceiveData_6
   \   000000AC   04209DE5           LDR      R2,[SP, #+4]
    240                      HartValue       = pData->HartValue;
   \   000000B0   08308DE2           ADD      R3,SP,#+8
   \   000000B4   482180E5           STR      R2,[R0, #+328]
   \   000000B8   0020A0E3           MOV      R2,#+0
   \                     ??ReceiveData_7:
   \   000000BC   18C081E2           ADD      R12,R1,#+24
   \   000000C0   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   000000C4   03C0C2E7           STRB     R12,[R2, +R3]
   \   000000C8   012082E2           ADD      R2,R2,#+1
   \   000000CC   040052E3           CMP      R2,#+4
   \   000000D0   F9FFFFBA           BLT      ??ReceiveData_7
   \   000000D4   08109DE5           LDR      R1,[SP, #+8]
   \   000000D8   641180E5           STR      R1,[R0, #+356]
    241                  }
    242                  return (E_OK);
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   020000EA           B        ??ReceiveData_8
    243              case CMD_GENERIC_STATIC_DATA:
    244                  return AnalogInput::ReceiveData(data);
   \                     ??ReceiveData_3:
   \   000000E4   ........           _BLF     ??ReceiveData_1,??ReceiveData??rA
   \   000000E8   000000EA           B        ??ReceiveData_8
    245              default:
    246                  return (E_UNKNOWN_COMMAND);
   \                     ??ReceiveData_4:
   \   000000EC   0100A0E3           MOV      R0,#+1
   \                     ??ReceiveData_8:
   \   000000F0   0E40BDE8           POP      {R1-R3,LR}
   \   000000F4   1EFF2FE1           BX       LR               ;; return
    247              };
    248          }

   \                                 In segment CODE, align 4, keep-with-next
    249          int AIRadarSensorHart::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    250              switch (cmd) {
   \   00000008   652051E2           SUBS     R2,R1,#+101
   \   0000000C   0200000A           BEQ      ??SendData_2
   \   00000010   012052E2           SUBS     R2,R2,#+1
   \   00000014   4000000A           BEQ      ??SendData_3
   \   00000018   410000EA           B        ??SendData_4
    251              case CMD_GENERIC_REALTIME_DATA:
    252                  {
    253                      QueueANPRO10_COMMAND_2520  Cmd;
    254                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_2:
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    255                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000024   FF20A0E3           MOV      R2,#+255
   \   00000028   0420CDE5           STRB     R2,[SP, #+4]
    256                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   0000002C   0E20A0E3           MOV      R2,#+14
   \   00000030   0520CDE5           STRB     R2,[SP, #+5]
    257          
    258                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000034   6520A0E3           MOV      R2,#+101
   \   00000038   B620CDE1           STRH     R2,[SP, #+6]
    259                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   1820A0E3           MOV      R2,#+24
   \   00000040   B820CDE1           STRH     R2,[SP, #+8]
    260                      Cmd.Data.ObjectId       = IDNumber;
   \   00000044   9C1090E5           LDR      R1,[R0, #+156]
   \   00000048   0A10CDE5           STRB     R1,[SP, #+10]
   \   0000004C   2114A0E1           LSR      R1,R1,#+8
   \   00000050   0B10CDE5           STRB     R1,[SP, #+11]
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   0C10CDE5           STRB     R1,[SP, #+12]
   \   0000005C   2114A0E1           LSR      R1,R1,#+8
   \   00000060   0D10CDE5           STRB     R1,[SP, #+13]
    261                      Cmd.Data.HWFailure      = HWFailure;
   \   00000064   0C21D0E5           LDRB     R2,[R0, #+268]
   \   00000068   0E20CDE5           STRB     R2,[SP, #+14]
    262                      Cmd.Data.MyHWFailure    = MyHWFailure;
   \   0000006C   0D21D0E5           LDRB     R2,[R0, #+269]
   \   00000070   0F20CDE5           STRB     R2,[SP, #+15]
    263                      Cmd.Data.Failure        = Failure;
   \   00000074   3821D0E5           LDRB     R2,[R0, #+312]
   \   00000078   1120CDE5           STRB     R2,[SP, #+17]
    264                      Cmd.Data.ActiveAlarms   = ActiveAlarms;
   \   0000007C   381090E5           LDR      R1,[R0, #+56]
    265                      Cmd.Data.FilteredValue  = FilteredValue;
   \   00000080   1A208DE2           ADD      R2,SP,#+26
   \   00000084   1210CDE5           STRB     R1,[SP, #+18]
   \   00000088   2114A0E1           LSR      R1,R1,#+8
   \   0000008C   1310CDE5           STRB     R1,[SP, #+19]
   \   00000090   2114A0E1           LSR      R1,R1,#+8
   \   00000094   1410CDE5           STRB     R1,[SP, #+20]
   \   00000098   2114A0E1           LSR      R1,R1,#+8
   \   0000009C   1510CDE5           STRB     R1,[SP, #+21]
   \   000000A0   0010A0E3           MOV      R1,#+0
   \                     ??SendData_5:
   \   000000A4   513F80E2           ADD      R3,R0,#+324
   \   000000A8   0330D1E7           LDRB     R3,[R1, +R3]
   \   000000AC   0230C1E7           STRB     R3,[R1, +R2]
   \   000000B0   011081E2           ADD      R1,R1,#+1
   \   000000B4   040051E3           CMP      R1,#+4
   \   000000B8   F9FFFFBA           BLT      ??SendData_5
    266                      Cmd.Data.CalcValue      = CalcValue;
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   16208DE2           ADD      R2,SP,#+22
   \                     ??SendData_6:
   \   000000C4   523F80E2           ADD      R3,R0,#+328
   \   000000C8   0330D1E7           LDRB     R3,[R1, +R3]
   \   000000CC   0230C1E7           STRB     R3,[R1, +R2]
   \   000000D0   011081E2           ADD      R1,R1,#+1
   \   000000D4   040051E3           CMP      R1,#+4
   \   000000D8   F9FFFFBA           BLT      ??SendData_6
    267                      Cmd.Data.HartValue      = HartValue;
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   1E208DE2           ADD      R2,SP,#+30
   \                     ??SendData_7:
   \   000000E4   593F80E2           ADD      R3,R0,#+356
   \   000000E8   0330D1E7           LDRB     R3,[R1, +R3]
   \   000000EC   0230C1E7           STRB     R3,[R1, +R2]
   \   000000F0   011081E2           ADD      R1,R1,#+1
   \   000000F4   040051E3           CMP      R1,#+4
   \   000000F8   F9FFFFBA           BLT      ??SendData_7
    268                      Cmd.Data.ResultOK       = ResultOK;
   \   000000FC   3601D0E5           LDRB     R0,[R0, #+310]
   \   00000100   1000CDE5           STRB     R0,[SP, #+16]
    269          
    270                      bool sent = ANPRO10SendNormal(&Cmd);
    271                      if (!sent) return (E_QUEUE_FULL);
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0000A013           MOVNE    R0,#+0
   \   00000114   0300A003           MOVEQ    R0,#+3
   \   00000118   020000EA           B        ??SendData_8
    272                      else return (E_OK);
    273                  }
    274              case CMD_GENERIC_STATIC_DATA:
    275                  return AnalogInput::SendData(cmd);
   \                     ??SendData_3:
   \   0000011C   ........           _BLF     ??SendData_1,??SendData??rA
   \   00000120   000000EA           B        ??SendData_8
    276              default:
    277                  return (E_UNKNOWN_COMMAND);
   \                     ??SendData_4:
   \   00000124   0100A0E3           MOV      R0,#+1
   \                     ??SendData_8:
   \   00000128   24D08DE2           ADD      SP,SP,#+36
   \   0000012C                      REQUIRE ?Subroutine15
   \   0000012C                      ;; // Fall through to label ?Subroutine15
    278              };
    279          
    280          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    281          

   \                                 In segment CODE, align 4, keep-with-next
    282          float AIRadarSensorHart::Calculate(void) {
   \                     ??Calculate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    283              if (CanCalculate() && !Failure) {
   \   00000008   525FA0E3           MOV      R5,#+328
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1100000A           BEQ      ??Calculate_1
   \   00000018   3801D4E5           LDRB     R0,[R4, #+312]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0E00001A           BNE      ??Calculate_1
    284                  // This value should be checked for alarm
    285                  float RawCalcValue = Gain * HartValue - Offset;
   \   00000024   3C1194E5           LDR      R1,[R4, #+316]
   \   00000028   640194E5           LDR      R0,[R4, #+356]
   \   0000002C   ........           _BLF     __fMul,??__fMul??rA
   \   00000030   401194E5           LDR      R1,[R4, #+320]
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   0060A0E1           MOV      R6,R0
    286                  if (RawCalcValue < 0.0) {
   \   0000003C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   ........           _BLF     __dLess,??__dLess??rA
   \   0000004C   000050E3           CMP      R0,#+0
    287                      RawCalcValue = 0.0;
   \   00000050   0060A013           MOVNE    R6,#+0
    288                  }
    289                  CalcValue = RawCalcValue;
   \   00000054   046085E7           STR      R6,[R5, +R4]
    290                  ResultOK  = true;
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   3601C4E5           STRB     R0,[R4, #+310]
    291          
    292              }
    293              return (CalcValue);
   \                     ??Calculate_1:
   \   00000060   040095E7           LDR      R0,[R5, +R4]
   \   00000064   7040BDE8           POP      {R4-R6,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    294          
    295          }
    296          
    297          

   \                                 In segment CODE, align 4, keep-with-next
    298          void AIRadarSensorHart::SetNewStatus(bool NewStatus) {
    299              Failure = NewStatus;
   \                     ??SetNewStatus:
   \   00000000   3811C0E5           STRB     R1,[R0, #+312]
    300          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    301          

   \                                 In segment CODE, align 4, keep-with-next
    302          void AIRadarSensorHart::NewValue(float NewValue) {
    303              HWFailure = false;
   \                     ??NewValue:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0C21C0E5           STRB     R2,[R0, #+268]
    304              HartValue = NewValue;
   \   00000008   641180E5           STR      R1,[R0, #+356]
    305          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Radar(Hart)">`:
   \   00000000   526164617228       DC8 "Radar(Hart)"
   \              486172742900
   \   0000000C   2C20666F7220       DC8 ", for "
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIRadarSensorHart &AIRadarSensorHart::new AIRadarSensorHart()
   \                     `??new AIRadarSensorHart`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5A0FA0E3           MOV      R0,#+360
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AIRadarSensorHart_1`
   \   00000014   ........           BL       ??AIRadarSensorHart
   \                     `??new AIRadarSensorHart_1`:
   \   00000018   ........           B        ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIRadarSensorHart::AIRadarSensorHart()
                                        8
     AIRadarSensorHart::Calculate()    16
     AIRadarSensorHart::GetStringValue(int, int, AnsiString &)
                                       40
     AIRadarSensorHart::GetValue(int, int, float &, int &, int &)
                                       40
     AIRadarSensorHart::LoadConfigString(TSNConfigString &)
                                      184
     AIRadarSensorHart::MakeConfigString(int)
                                      272
     AIRadarSensorHart::NewValue(float)
                                        0
     AIRadarSensorHart::PutFloatValue(int, float)
                                       20
     AIRadarSensorHart::PutValue(int, int, AnsiString, bool, int *)
                                      140
     AIRadarSensorHart::ReceiveData(unsigned char *)
                                       16
     AIRadarSensorHart::SendData(unsigned short)
                                       40
     AIRadarSensorHart::SetNewStatus(bool)
                                        0
     AIRadarSensorHart::new AIRadarSensorHart()
                                        4
     AIRadarSensorHart::~AIRadarSensorHart()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AIRadarSensorHart::AIRadarSensorHart()
                                      88
     AIRadarSensorHart::~AIRadarSensorHart()
                                      48
     ?Subroutine16                     8
     AIRadarSensorHart::MakeConfigString(int)
                                     400
     ?Subroutine17                    16
     AIRadarSensorHart::LoadConfigString(TSNConfigString &)
                                     708
     AIRadarSensorHart::PutValue(int, int, AnsiString, bool, int *)
                                     384
     AIRadarSensorHart::GetValue(int, int, float &, int &, int &)
                                     284
     AIRadarSensorHart::GetStringValue(int, int, AnsiString &)
                                      96
     AIRadarSensorHart::PutFloatValue(int, float)
                                     256
     AIRadarSensorHart::ReceiveData(unsigned char *)
                                     248
     AIRadarSensorHart::SendData(unsigned short)
                                     300
     ?Subroutine15                     8
     AIRadarSensorHart::Calculate()  108
     AIRadarSensorHart::SetNewStatus(bool)
                                       8
     AIRadarSensorHart::NewValue(float)
                                      16
     ?<Constant "Radar(Hart)">        20
     ?<Constant ":\n">                 3
     AIRadarSensorHart::new AIRadarSensorHart()
                                      28
     __sti__routine()                  4
     ??DataTable2                      4
      Others                         820

 
 4 836 bytes in segment CODE
   155 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 3 016 bytes of CODE  memory (+ 1 824 bytes shared)
   155 bytes of CONST memory

Errors: none
Warnings: none
