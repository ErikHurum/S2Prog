##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmCriticalComFailure.cpp     #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmCriticalComFailure.cpp     #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmCriticalComFailure.lst #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmCriticalComFailure.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmCriticalComFailure.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          // ANPRO10
      9          AlarmCriticalComFailure *AlarmCriticalComFailure::CriticalComAlarm=NULL;
     10          
     11          bool AlarmCriticalComFailure::ComFailure = false;
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          AlarmCriticalComFailure::~AlarmCriticalComFailure(void)
     14          {
   \                     `?~AlarmCriticalComFailure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0C00000A           BEQ      `?~AlarmCriticalComFailure_1`
     15          }
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   F00084E2           ADD      R0,R4,#+240
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   0200000A           BEQ      `?~AlarmCriticalComFailure_2`
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmCriticalComFailure_2`:
   \   00000038   010015E3           TST      R5,#0x1
   \   0000003C   0100000A           BEQ      `?~AlarmCriticalComFailure_1`
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmCriticalComFailure_1`:
   \   00000048                      REQUIRE ?Subroutine16
   \   00000048                      ;; // Fall through to label ?Subroutine16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??CriticalComAlarm:
   \   00000000                      DS8 4
     16          
     17          unsigned AlarmCriticalComFailure::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000004                      DS8 4

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     ??ComFailure:
   \   00000000                      DS8 1
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          AlarmCriticalComFailure::AlarmCriticalComFailure(AnsiString Nam, float Lim):AlarmBasic(NULL)
   \                     ??AlarmCriticalComFailure:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     20          {
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   74009FE5           LDR      R0,??AlarmCriticalComFailure_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   F00084E2           ADD      R0,R4,#+240
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
     21              CriticalComAlarm = this;
   \   00000028   68009FE5           LDR      R0,??AlarmCriticalComFailure_1+0x4  ;; ??CriticalComAlarm
     22              NumberOfAlarmSettings++;
     23              IDNumber   = (ID_AL_CRITICAL_COM_ERR << 16)+NumberOfAlarmSettings;
     24              Type       = ID_AL_CRITICAL_COM_ERR;
     25              Name       = Nam;
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   004080E5           STR      R4,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   041080E5           STR      R1,[R0, #+4]
   \   00000040   C006A0E3           MOV      R0,#+201326592
   \   00000044   9E0880E3           ORR      R0,R0,#0x9E0000
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   9C0084E5           STR      R0,[R4, #+156]
   \   00000050   9E00A0E3           MOV      R0,#+158
   \   00000054   C00E80E3           ORR      R0,R0,#0xC00
   \   00000058   A00084E5           STR      R0,[R4, #+160]
   \   0000005C   38009FE5           LDR      R0,??AlarmCriticalComFailure_1+0x8  ;; ??npos
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   F00084E2           ADD      R0,R4,#+240
   \   0000006C   ........           _BLF     ??assign,??assign??rA
     26              Limit      = Lim;
   \   00000070   E46084E5           STR      R6,[R4, #+228]
     27              LastSyncTime = clock();
   \   00000074   ........           _BLF     clock,??clock??rA
   \   00000078   EC0084E5           STR      R0,[R4, #+236]
     28              MessageKey   = L_WORD501; //ComFault
   \   0000007C   F500A0E3           MOV      R0,#+245
   \   00000080   400F80E3           ORR      R0,R0,#0x100
   \   00000084   B80084E5           STR      R0,[R4, #+184]
     29          
     30          }
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   7040BDE8           POP      {R4-R6,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmCriticalComFailure_1:
   \   00000094   ........           DC32     ??__vtbl
   \   00000098   ........           DC32     ??CriticalComAlarm
   \   0000009C   ........           DC32     ??npos
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          void AlarmCriticalComFailure::AddAlarm(void)
     33          {
   \                     ??AddAlarm:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     34              // Should use a semaphore??
     35              AlarmNo    = ++AlarmBasic::CurrentAlarmNo;
   \   00000008   3C009FE5           LDR      R0,??AddAlarm_1  ;; ??CurrentAlarmNo
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   C81084E5           STR      R1,[R4, #+200]
     36              State      = AlActive;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   E000C4E5           STRB     R0,[R4, #+224]
     37              Time_Rised = time(NULL);
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           _BLF     time,??time??rA
   \   0000002C   D00084E5           STR      R0,[R4, #+208]
     38              AlarmSilence = false;   // For Buzzer, Flash, Siren, ....
   \   00000030   ........           LDR      R0,??DataTable1  ;; ??AlarmSilence
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0010C0E5           STRB     R1,[R0, #+0]
     39              PROActiveAlarmList.insertInOrder(this);
   \   0000003C   0C009FE5           LDR      R0,??AddAlarm_1+0x4  ;; ??PROActiveAlarmList
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   ........           _BLF     ??insertInOrder,??insertInOrder??rA
     40              //RBMARK program error log
     41          }
   \   00000048   ........           B        ?Subroutine17
   \                     ??AddAlarm_1:
   \   0000004C   ........           DC32     ??CurrentAlarmNo
   \   00000050   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   ........           DC32     ??PROAcknowAlarmList

   \                                 In segment CODE, align 4, keep-with-next
     42          void AlarmCriticalComFailure::RemoveAlarm(void)
     43          {
   \                     ??RemoveAlarm:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     44              State            = AlIdle;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   E000C4E5           STRB     R0,[R4, #+224]
     45              Time_Disappeared = time(NULL);
   \   00000010   ........           _BLF     time,??time??rA
   \   00000014   D80084E5           STR      R0,[R4, #+216]
     46              PROAcknowAlarmList.removeNode(this);
   \   00000018   ........           LDR      R0,??Subroutine17_0  ;; ??PROAcknowAlarmList
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   ........           _BLF     ??removeNode,??removeNode??rA
     47              //RBMARK program error log
     48          }
   \   00000024                      REQUIRE ?Subroutine17
   \   00000024                      ;; // Fall through to label ?Subroutine17
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          void AlarmCriticalComFailure::Check(void)
     51          {
   \                     ??Check:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     52          
     53              float ElapsedTime = float(TSNElapsedTicks(LastSyncTime));
     54              if ( ElapsedTime >= Limit ) {
     55                  OutsideLimit = true;
     56              } else {
     57                  OutsideLimit = false;
     58              }
     59              switch ( State ) {
   \   00000004   CC909FE5           LDR      R9,??Check_2     ;; ??ComFailure
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   EC0094E5           LDR      R0,[R4, #+236]
   \   00000010   0170A0E3           MOV      R7,#+1
   \   00000014   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000018   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000001C   E46094E5           LDR      R6,[R4, #+228]
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   E970C415           STRBNE   R7,[R4, #+233]
   \   00000034   E900C405           STRBEQ   R0,[R4, #+233]
   \   00000038   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000003C   020050E3           CMP      R0,#+2
   \   00000040   2300008A           BHI      ??Check_3
   \   00000044   011F8FE2           ADR      R1,??Check_1
   \   00000048   0010D1E7           LDRB     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??Check_1:
   \   00000050   0D000200           DC8      +13,+0,+2,+0
     60              case AlActive       :
     61                  ComFailure = true;
   \                     ??Check_4:
   \   00000054   0070C9E5           STRB     R7,[R9, #+0]
   \   00000058   1D0000EA           B        ??Check_3
     62                  // Only user action
     63                  break;
     64              case AlAknowledged  :
     65                  if ( ElapsedTime < Limit ) {
   \                     ??Check_5:
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   ........           _BLF     __fLess,??__fLess??rA
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   F8FFFF0A           BEQ      ??Check_4
     66                      RemoveAlarm();
   \   00000070   A41094E5           LDR      R1,[R4, #+164]
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   701091E5           LDR      R1,[R1, #+112]
   \   0000007C   0FE0A0E1           MOV      LR,PC
   \   00000080   11FF2FE1           BX       R1
     67                  }
     68                  ComFailure = true;
   \   00000084   F2FFFFEA           B        ??Check_4
     69                  break;
     70              case AlIdle         :
     71                  if ( OutsideLimit ) {
   \                     ??Check_6:
   \   00000088   E900D4E5           LDRB     R0,[R4, #+233]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0E00000A           BEQ      ??Check_7
     72                      GiveRelayDutyMessage(0,RELAY_MSG_ON,0,0);
   \   00000094   0030A0E3           MOV      R3,#+0
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   0200A0E1           MOV      R0,R2
   \   000000A4   ........           _BLF     ??GiveRelayDutyMessage,??GiveRelayDutyMessage??rA
     73                      AlarmSilence = false;
   \   000000A8   ........           LDR      R0,??DataTable1  ;; ??AlarmSilence
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0010C0E5           STRB     R1,[R0, #+0]
     74                      AlarmBasic::SetAllToIdle();
   \   000000B4   ........           _BLF     ??SetAllToIdle,??SetAllToIdle??rA
     75                      AddAlarm();
   \   000000B8   A41094E5           LDR      R1,[R4, #+164]
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   6C1091E5           LDR      R1,[R1, #+108]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   11FF2FE1           BX       R1
     76                      ComFailure = true;
   \   000000CC   E0FFFFEA           B        ??Check_4
     77                  } else {
     78                      ComFailure = false;
   \                     ??Check_7:
   \   000000D0   0000C9E5           STRB     R0,[R9, #+0]
     79                  }
     80                  break;
     81              }
     82          }
   \                     ??Check_3:
   \   000000D4   ........           B        ?Subroutine18
   \                     ??Check_2:
   \   000000D8   ........           DC32     ??ComFailure

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine18_0:
   \   00000008   00408F40           DC32     0x408f4000
     83          
     84          
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void AlarmCriticalComFailure::SyncReceived(void)
     87          {
   \                     ??SyncReceived:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     88              LastSyncTime = clock();
   \   00000008   ........           _BLF     clock,??clock??rA
   \   0000000C   EC0084E5           STR      R0,[R4, #+236]
     89          }
   \   00000010   ........           B        ?Subroutine17
     90          
     91          
     92          ///////////////////////////////////////////////////////////////
     93          //
     94          // Routines for the librarian for input
     95          //
     96          ///////////////////////////////////////////////////////////////
     97          
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          AnsiString AlarmCriticalComFailure::Get_CompleteMessage(void)
    100          {
   \                     ??Get_CompleteMessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    101              return(Name + " " + Get_Message());
   \   0000000C   A42094E5           LDR      R2,[R4, #+164]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   682092E5           LDR      R2,[R2, #+104]
   \   00000018   38108DE2           ADD      R1,SP,#+56
   \   0000001C   0FE0A0E1           MOV      LR,PC
   \   00000020   12FF2FE1           BX       R2
   \   00000024   172F8FE2           ADR      R2,??Get_CompleteMessage_1  ;; " "
   \   00000028   F01084E2           ADD      R1,R4,#+240
   \   0000002C   1C008DE2           ADD      R0,SP,#+28
   \   00000030   ........           _BLF     `??operator+_1`,`??operator+??rA`
   \   00000034   38208DE2           ADD      R2,SP,#+56
   \   00000038   1C108DE2           ADD      R1,SP,#+28
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   38008DE2           ADD      R0,SP,#+56
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   1C008DE2           ADD      R0,SP,#+28
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   54D08DE2           ADD      SP,SP,#+84
   \   00000084   ........           B        ?Subroutine16
   \                     ??Get_CompleteMessage_1:
   \   00000088   20000000           DC8      " ",+0,+0
    102          }
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          AnsiString AlarmCriticalComFailure::Get_Location(void)
    105          {
   \                     ??Get_Location:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    106              return(Name);
   \   00000008   F01080E2           ADD      R1,R0,#+240
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   ........           _BLF     ??string,??string??rA
   \   00000014   ........           B        ?Subroutine19
    107          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    108          
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          int AlarmCriticalComFailure::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    111          {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3870DDE5           LDRB     R7,[SP, #+56]
   \   0000000C   3C809DE5           LDR      R8,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    112              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
    113              switch ( ValueId ) {
   \   00000028   3220A0E3           MOV      R2,#+50
   \   0000002C   8C2D82E3           ORR      R2,R2,#0x2300
   \   00000030   020055E1           CMP      R5,R2
    114              case SVT_AL_LIMIT:
    115                  Status = E_NOT_ADJUSTABLE;
   \   00000034   2950A003           MOVEQ    R5,#+41
   \   00000038   1600000A           BEQ      ??PutValue_2
    116                  break;
    117              default:
    118                  Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??string,??string??rA
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   80002DE9           PUSH     {R7}
   \   00000050   0C308DE2           ADD      R3,SP,#+12
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0C008DE2           ADD      R0,SP,#+12
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
    119                  break;
    120              }
    121              if ( Status==E_NO_ERR ) {
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
   \   00000080   0400001A           BNE      ??PutValue_2
    122                  SetModifiedFlag();
   \   00000084   A41094E5           LDR      R1,[R4, #+164]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   541091E5           LDR      R1,[R1, #+84]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
    123              }
    124              if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000098   000058E3           CMP      R8,#+0
    125                  *UnitId = ValUnitId;
   \   0000009C   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A0   00008815           STRNE    R0,[R8, #+0]
    126              }
    127              return(Status);
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   20D08DE2           ADD      SP,SP,#+32
   \   000000AC   F041BDE8           POP      {R4-R8,LR}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
    128          }
    129          

   \                                 In segment CODE, align 4, keep-with-next
    130          int  AlarmCriticalComFailure::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    131          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   0340A0E1           MOV      R4,R3
    132              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
    133              switch ( ValueId ) {
   \   00000014   0190A0E3           MOV      R9,#+1
   \   00000018   0080A0E3           MOV      R8,#+0
   \   0000001C   323041E2           SUB      R3,R1,#+50
   \   00000020   8C3D43E2           SUB      R3,R3,#+8960
   \   00000024   010053E3           CMP      R3,#+1
   \   00000028   1000008A           BHI      ??GetValue_3
   \   0000002C   01CF8FE2           ADR      R12,??GetValue_1
   \   00000030   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000034   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000038   00050000           DC8      +0,+5,+0,+0
    134              case SVT_AL_LIMIT:
    135                  MyRetValue = (float)Limit;
   \                     ??GetValue_4:
   \   0000003C   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   00000040   000084E5           STR      R0,[R4, #+0]
    136                  DecPnt     = 1;
   \   00000044   009085E5           STR      R9,[R5, #+0]
    137                  Unit       = NO_UNIT;
   \   00000048   008086E5           STR      R8,[R6, #+0]
   \   0000004C   0D0000EA           B        ??GetValue_6
    138                  break;
    139              case SVT_AL_VALUE:
    140                  // This does not work
    141                  MyRetValue = TSNElapsedTicks(LastSyncTime)/MSEC_TO_SEC;
   \                     ??GetValue_7:
   \   00000050   EC0090E5           LDR      R0,[R0, #+236]
   \   00000054   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000058   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   0000005C   ........           LDR      R3,??Subroutine18_0  ;; 0x408f4000
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000068   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000006C   F3FFFFEA           B        ??GetValue_5
    142                  DecPnt     = 1;
    143                  Unit       = NO_UNIT;
    144                  break;
    145              default:
    146                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000070   40002DE9           PUSH     {R6}
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   0430A0E1           MOV      R3,R4
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   0070A0E1           MOV      R7,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    147                  break;
    148              }
    149              return(Status);
   \                     ??GetValue_6:
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C                      REQUIRE ?Subroutine18
   \   0000008C                      ;; // Fall through to label ?Subroutine18
    150          }
    151          
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          int AlarmCriticalComFailure::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    154          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    155              int Status = GETVAL_NO_ERR;
    156              //switch ( ValueId ) {
    157              //  default:
    158              Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    159              //      break;
    160              //}
    161              return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008                      REQUIRE ?Subroutine19
   \   00000008                      ;; // Fall through to label ?Subroutine19
    162          }
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          int AlarmCriticalComFailure::PutFloatValue( int ValueId, float NewValue)
    165          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    166              int Status= E_NO_ERR;
    167              //switch ( ValueId ) {
    168              //   default:
    169              Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    170              //     break;
    171              //}
    172              return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine19
    173          }
    174          
    175          
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          int AlarmCriticalComFailure::ReceiveData(U8* data)
    178          {
    179              return E_OK;
   \                     ??ReceiveData:
   \   00000000   ........           B        ?Subroutine20
    180          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    181          
    182          // This function is typically called from AddAlarm, RemoveAlarm and MoveAlarmToAcknovledge (on Master)
    183          // every time alarmstate changes. In addition it is also called from cyclic alarmupdate routine.

   \                                 In segment CODE, align 4, keep-with-next
    184          int AlarmCriticalComFailure::SendData(U16 cmd)
    185          {
    186              return(E_OK);
   \                     ??SendData:
   \   00000000                      REQUIRE ?Subroutine20
   \   00000000                      ;; // Fall through to label ?Subroutine20

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmCriticalComFailure &AlarmCriticalComFailure::new AlarmCriticalComFailure(AnsiString, float)
   \                     `??new AlarmCriticalComFailure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   430FA0E3           MOV      R0,#+268
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AlarmCriticalComFailure_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AlarmCriticalComFailure
   \                     `??new AlarmCriticalComFailure_1`:
   \   00000028   ........           B        ?Subroutine16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??AlarmSilence
    187          }
    188          
    189          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmCriticalComFailure::AddAlarm()
                                        8
     AlarmCriticalComFailure::AlarmCriticalComFailure(AnsiString, float)
                                       16
     AlarmCriticalComFailure::Check()
                                       28
     AlarmCriticalComFailure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmCriticalComFailure::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmCriticalComFailure::Get_CompleteMessage()
                                       96
     AlarmCriticalComFailure::Get_Location()
                                        4
     AlarmCriticalComFailure::PutFloatValue(int, float)
                                        4
     AlarmCriticalComFailure::PutValue(int, int, AnsiString, bool, int *)
                                       64
     AlarmCriticalComFailure::ReceiveData(unsigned char *)
                                        0
     AlarmCriticalComFailure::RemoveAlarm()
                                        8
     AlarmCriticalComFailure::SendData(unsigned short)
                                        0
     AlarmCriticalComFailure::SyncReceived()
                                        8
     AlarmCriticalComFailure::new AlarmCriticalComFailure(AnsiString, float)
                                       12
     AlarmCriticalComFailure::~AlarmCriticalComFailure()
                                       12
     __sti__routine()                   0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     AlarmCriticalComFailure::~AlarmCriticalComFailure()
                                      72
     ?Subroutine16                     8
     AlarmCriticalComFailure::CriticalComAlarm
                                       8
     AlarmCriticalComFailure::ComFailure
                                       1
     AlarmCriticalComFailure::AlarmCriticalComFailure(AnsiString, float)
                                     160
     AlarmCriticalComFailure::AddAlarm()
                                      84
     ?Subroutine17                    12
     AlarmCriticalComFailure::RemoveAlarm()
                                      36
     AlarmCriticalComFailure::Check()
                                     220
     ?Subroutine18                    12
     AlarmCriticalComFailure::SyncReceived()
                                      20
     AlarmCriticalComFailure::Get_CompleteMessage()
                                     140
     AlarmCriticalComFailure::Get_Location()
                                      24
     ?Subroutine19                     8
     AlarmCriticalComFailure::PutValue(int, int, AnsiString, bool, int *)
                                     180
     AlarmCriticalComFailure::GetValue(int, int, float &, int &, int &)
                                     140
     AlarmCriticalComFailure::GetStringValue(int, int, AnsiString &)
                                       8
     AlarmCriticalComFailure::PutFloatValue(int, float)
                                      12
     AlarmCriticalComFailure::ReceiveData(unsigned char *)
                                       4
     ?Subroutine20                     8
     AlarmCriticalComFailure::SendData(unsigned short)
                                       0
     ?<Constant " ">                   2
     __sti__routine()                  4
     AlarmCriticalComFailure::new AlarmCriticalComFailure(AnsiString, float)
                                      44
     ??DataTable1                      4
      Others                         568

 
 1 880 bytes in segment CODE
   118 bytes in segment DATA_C
     9 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 204 bytes of CODE  memory (+ 692 bytes shared)
   118 bytes of CONST memory
     9 bytes of DATA  memory

Errors: none
Warnings: none
