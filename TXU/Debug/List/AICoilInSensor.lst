##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AICoilInSensor.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\AICoilInSensor.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AICoilInSensor.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AICoilInSensor.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AICoilInSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_1,??append??rA_1
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AiCoilInSensor::AiCoilInSensor(int SnsType)
   \                     ??AiCoilInSensor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     10          {
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   10009FE5           LDR      R0,??AiCoilInSensor_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     11          	Type = SnsType;
   \   0000001C   A05084E5           STR      R5,[R4, #+160]
     12          }
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??AiCoilInSensor_1:
   \   0000002C   ........           DC32     ??__vtbl
     13          //---------------------------------------------------------------------------
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AiCoilInSensor::~AiCoilInSensor(void)
     16          {
   \                     `?~AiCoilInSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AiCoilInSensor_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AiCoilInSensor_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AiCoilInSensor_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     18          //---------------------------------------------------------------------------
     19          ///////////////////////////////////////////////////////////////
     20          //
     21          // Routines for the Configuration
     22          //
     23          ///////////////////////////////////////////////////////////////
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          AnsiString AiCoilInSensor::MakeConfigString(int ExtraTabs)
     26          {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   E0D04DE2           SUB      SP,SP,#+224
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     27          	AnsiString TabStr1= AnsiString::StringOfChar('\t',1+ExtraTabs);
   \   00000014   012096E2           ADDS     R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     28          	AnsiString LocalString;
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     29          	LocalString +=TabStr1+KeyWord(Type)+CrLfStr;
   \   0000002C   A01094E5           LDR      R1,[R4, #+160]
   \   00000030   70008DE2           ADD      R0,SP,#+112
   \   00000034   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000038   70208DE2           ADD      R2,SP,#+112
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   8C008DE2           ADD      R0,SP,#+140
   \   00000044   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000048   A0209FE5           LDR      R2,??MakeConfigString_1  ;; CrLfStr
   \   0000004C   8C108DE2           ADD      R1,SP,#+140
   \   00000050   A8008DE2           ADD      R0,SP,#+168
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   A8108DE2           ADD      R1,SP,#+168
   \   0000005C   0500B0E1           MOVS     R0,R5
   \   00000060   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000064   A8008DE2           ADD      R0,SP,#+168
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   8C008DE2           ADD      R0,SP,#+140
   \   00000070   ........           _BLF     `?~string`,`?~string??rA`
   \   00000074   70008DE2           ADD      R0,SP,#+112
   \   00000078   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     30          
     31          	LocalString +=TabStr1+KeyWord(C_AI_END)+CrLfStr;
   \   0000007C   9810A0E3           MOV      R1,#+152
   \   00000080   801E81E3           ORR      R1,R1,#0x800
   \   00000084   1C008DE2           ADD      R0,SP,#+28
   \   00000088   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000008C   1C208DE2           ADD      R2,SP,#+28
   \   00000090   0D10B0E1           MOVS     R1,SP
   \   00000094   38008DE2           ADD      R0,SP,#+56
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   4C209FE5           LDR      R2,??MakeConfigString_1  ;; CrLfStr
   \   000000A0   38108DE2           ADD      R1,SP,#+56
   \   000000A4   54008DE2           ADD      R0,SP,#+84
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   54108DE2           ADD      R1,SP,#+84
   \   000000B0   0500B0E1           MOVS     R0,R5
   \   000000B4   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000B8   54008DE2           ADD      R0,SP,#+84
   \   000000BC   ........           _BLF     `?~string`,`?~string??rA`
   \   000000C0   38008DE2           ADD      R0,SP,#+56
   \   000000C4   ........           _BLF     `?~string`,`?~string??rA`
   \   000000C8   1C008DE2           ADD      R0,SP,#+28
   \   000000CC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     32          	LocalString += CrLfStr;
   \   000000D0   18109FE5           LDR      R1,??MakeConfigString_1  ;; CrLfStr
   \   000000D4   0500B0E1           MOVS     R0,R5
   \   000000D8   ........           _BLF     `??operator+=`,`??operator+=??rA`
     33          
     34          	return(LocalString);
   \   000000DC   0D00B0E1           MOVS     R0,SP
   \   000000E0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000E4   E0D08DE2           ADD      SP,SP,#+224      ;; stack cleaning
   \   000000E8   7040BDE8           POP      {R4-R6,LR}
   \   000000EC   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_1:
   \   000000F0   ........           DC32     CrLfStr
     35          	//ConfigString.AddString(LocalString);
     36          }
     37          //---------------------------------------------------------------------------
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          bool AiCoilInSensor::LoadConfigString(TSNConfigString &ConfigString)
     40          {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     41          	bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0060B0E1           MOVS     R6,R0
     42          	int ErrorLine=0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     43          	int Key;
     44          	do {
     45          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20B0E1           MOVS     R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0500B0E1           MOVS     R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     46          		if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A00000A           BEQ      ??LoadConfigString_4
     47          			if ( ErrorLine != EOF ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   2900000A           BEQ      ??LoadConfigString_5
     48          				GiveConfigWarning("Voltage level switch sensor",ErrorLine);
   \   0000004C   DC109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Voltage level switch ...">`
   \   00000050   74008DE2           ADD      R0,SP,#+116
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   74008DE2           ADD      R0,SP,#+116
   \   00000064   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000068   210000EA           B        ??LoadConfigString_5
     49          			}
     50          		} else {
     51          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   58008DE2           ADD      R0,SP,#+88
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   58008DE2           ADD      R0,SP,#+88
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     52          			switch ( Key ) {
   \   00000088   0700B0E1           MOVS     R0,R7
   \   0000008C   980040E2           SUB      R0,R0,#+152
   \   00000090   800E40E2           SUB      R0,R0,#+2048
   \   00000094   010050E3           CMP      R0,#+1
   \   00000098   0300008A           BHI      ??LoadConfigString_7
   \   0000009C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000000A0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000000A8   120F0000           DC8      +18,+15,+0,+0
     53          			default:
     54          				GiveConfigWarning("Voltage level switch sensor",InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_7:
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   3C008DE2           ADD      R0,SP,#+60
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   0080B0E1           MOVS     R8,R0
   \   000000BC   6C109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Voltage level switch ...">`
   \   000000C0   20008DE2           ADD      R0,SP,#+32
   \   000000C4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000C8   1C2095E5           LDR      R2,[R5, #+28]
   \   000000CC   0810B0E1           MOVS     R1,R8
   \   000000D0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000000D4   3C008DE2           ADD      R0,SP,#+60
   \   000000D8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000E4   020000EA           B        ??LoadConfigString_5
     55          				break;
     56          			case C_AI_START_COMMON:
     57          				AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_8:
   \   000000E8   0510B0E1           MOVS     R1,R5
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     58          				break;
     59          			case C_AI_END:
     60          				break;
     61          			}
     62          		}
     63          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_5:
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000FC   000056E3           CMP      R6,#+0
   \   00000100   0600000A           BEQ      ??LoadConfigString_9
   \   00000104   00009DE5           LDR      R0,[SP, #+0]
   \   00000108   010070E3           CMN      R0,#+1
   \   0000010C   0300000A           BEQ      ??LoadConfigString_9
   \   00000110   9800A0E3           MOV      R0,#+152
   \   00000114   800E80E3           ORR      R0,R0,#0x800
   \   00000118   000057E1           CMP      R7,R0
   \   0000011C   BFFFFF1A           BNE      ??LoadConfigString_3
     64          	return(NoError);
   \                     ??LoadConfigString_9:
   \   00000120   0600B0E1           MOVS     R0,R6
   \   00000124   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   00000128   F041BDE8           POP      {R4-R8,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_6:
   \   00000130   ........           DC32     `?<Constant "Voltage level switch ...">`
     65          }
     66          //---------------------------------------------------------------------------
     67          
     68          
     69          ///////////////////////////////////////////////////////////////
     70          //
     71          // Routines for the librarian for input
     72          //
     73          ///////////////////////////////////////////////////////////////
     74          
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          int AiCoilInSensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     77          {
   \                     ??PutValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   4080DDE5           LDRB     R8,[SP, #+64]
   \   0000001C   44909DE5           LDR      R9,[SP, #+68]
     78          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00A0B0E1           MOVS     R10,R0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
     79          	switch ( ValueId ) {
     80          	case SVT_AI_OFFSET   :
     81          	case SVT_AI_CALC_VAL :
     82          	default:
     83          		Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000030   0710B0E1           MOVS     R1,R7
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0810B0E1           MOVS     R1,R8
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   0030B0E1           MOVS     R3,R0
   \   00000050   0620B0E1           MOVS     R2,R6
   \   00000054   0510B0E1           MOVS     R1,R5
   \   00000058   0400B0E1           MOVS     R0,R4
   \   0000005C   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   00A0B0E1           MOVS     R10,R0
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     84          		break;
     85          	}
     86          	if ( Status==E_NO_ERR ) {
   \   00000070   00005AE3           CMP      R10,#+0
   \   00000074   0500001A           BNE      ??PutValue_2
     87          		SetModifiedFlag();
   \   00000078   A40094E5           LDR      R0,[R4, #+164]
   \   0000007C   541090E2           ADDS     R1,R0,#+84
   \   00000080   0400B0E1           MOVS     R0,R4
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   0FE0A0E1           MOV      LR,PC
   \   0000008C   11FF2FE1           BX       R1
     88          	}
     89          	if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000090   000059E3           CMP      R9,#+0
   \   00000094   0100000A           BEQ      ??PutValue_3
     90          		*UnitId = ValUnitId;
   \   00000098   00009DE5           LDR      R0,[SP, #+0]
   \   0000009C   000089E5           STR      R0,[R9, #+0]
     91          	}
     92          	return(Status);
   \                     ??PutValue_3:
   \   000000A0   0A00B0E1           MOVS     R0,R10
   \   000000A4   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000A8   F047BDE8           POP      {R4-R10,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
     93          }
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          int  AiCoilInSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     96          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
     97          	int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
     98          	switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1600008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00131307           DC8      +0,+19,+19,+7
     99          	case SVT_AI_OFFSET      :
    100          		MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
    101          		DecPnt     = 0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   000088E5           STR      R0,[R8, #+0]
    102          		Unit       = NO_UNIT;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   000089E5           STR      R0,[R9, #+0]
   \   00000060   160000EA           B        ??GetValue_5
    103          		break;
    104          	case SVT_AI_CALC_VAL    :
    105          		MyRetValue = Calculate();
   \                     ??GetValue_6:
   \   00000064   A40094E5           LDR      R0,[R4, #+164]
   \   00000068   601090E2           ADDS     R1,R0,#+96
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   11FF2FE1           BX       R1
   \   0000007C   000087E5           STR      R0,[R7, #+0]
    106          		DecPnt     = 0;
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   000088E5           STR      R0,[R8, #+0]
    107          		Unit       = NO_UNIT;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   000089E5           STR      R0,[R9, #+0]
   \   00000090   0A0000EA           B        ??GetValue_5
    108          		break;
    109          	default:
    110          		Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000094   0900B0E1           MOVS     R0,R9
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0800B0E1           MOVS     R0,R8
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0730B0E1           MOVS     R3,R7
   \   000000A8   0620B0E1           MOVS     R2,R6
   \   000000AC   0510B0E1           MOVS     R1,R5
   \   000000B0   0400B0E1           MOVS     R0,R4
   \   000000B4   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   00A0B0E1           MOVS     R10,R0
    111          		break;
    112          	}
    113          	return(Status);
   \                     ??GetValue_5:
   \   000000C0   0A00B0E1           MOVS     R0,R10
   \   000000C4   F047BDE8           POP      {R4-R10,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    114          }
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int AiCoilInSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    117          {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
    118          	int Status = GETVAL_NO_ERR;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0080B0E1           MOVS     R8,R0
    119          	switch ( ValueId ) {
    120          	default:
    121          		Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \   0000001C   0730B0E1           MOVS     R3,R7
   \   00000020   0620B0E1           MOVS     R2,R6
   \   00000024   0510B0E1           MOVS     R1,R5
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000030   0080B0E1           MOVS     R8,R0
    122          		break;
    123          	}
    124          	return(Status);
   \   00000034   0800B0E1           MOVS     R0,R8
   \   00000038   F041BDE8           POP      {R4-R8,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    125          }
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int AiCoilInSensor::PutFloatValue( int ValueId, float NewValue)
    128          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    129          	return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    130          }
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          void AiCoilInSensor::SetNewStatus(bool NewStatus)
    133          {
   \                     ??SetNewStatus:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    134              HWFailure     = false;
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0C01C4E5           STRB     R0,[R4, #+268]
    135          	FilteredValue = float(NewStatus);
   \   00000014   0500B0E1           MOVS     R0,R5
   \   00000018   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000001C   440184E5           STR      R0,[R4, #+324]
    136          }
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    137          

   \                                 In segment CODE, align 4, keep-with-next
    138          float AiCoilInSensor::Calculate(void)
    139          {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    140          	if ( CanCalculate() ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1400000A           BEQ      ??Calculate_1
    141          		float tmpCalcValue = Gain*FilteredValue-Offset;
   \   00000018   3C1194E5           LDR      R1,[R4, #+316]
   \   0000001C   440194E5           LDR      R0,[R4, #+324]
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   401194E5           LDR      R1,[R4, #+320]
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   0050B0E1           MOVS     R5,R0
    142          		if ( tmpCalcValue ) {
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??Calculate_2
    143          			CalcValue = LEVELSWITCH_ON;
   \   00000044   FE05A0E3           MOV      R0,#+1065353216
   \   00000048   480184E5           STR      R0,[R4, #+328]
    144          			Failure   = false;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   3801C4E5           STRB     R0,[R4, #+312]
   \   00000054   0D0000EA           B        ??Calculate_3
    145          		} else {
    146          			CalcValue = LEVELSWITCH_OFF;
   \                     ??Calculate_2:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   480184E5           STR      R0,[R4, #+328]
    147          			Failure   = false;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   3801C4E5           STRB     R0,[R4, #+312]
   \   00000068   080000EA           B        ??Calculate_3
    148          	   }
    149          	} else {
    150          		if ( Enable ) {
   \                     ??Calculate_1:
   \   0000006C   3401D4E5           LDRB     R0,[R4, #+308]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0300000A           BEQ      ??Calculate_4
    151          			CalcValue = LEVELSWITCH_HW_ERROR;
   \   00000078   4004A0E3           MOV      R0,#+1073741824
   \   0000007C   400880E3           ORR      R0,R0,#0x400000
   \   00000080   480184E5           STR      R0,[R4, #+328]
   \   00000084   010000EA           B        ??Calculate_3
    152          		} else {
    153          			CalcValue = LEVELSWITCH_OFF;
   \                     ??Calculate_4:
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   480184E5           STR      R0,[R4, #+328]
    154          		}
    155          	}
    156          	return(CalcValue);
   \                     ??Calculate_3:
   \   00000090   480194E5           LDR      R0,[R4, #+328]
   \   00000094   3040BDE8           POP      {R4,R5,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
    157          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Voltage level switch ...">`:
   \   00000000   566F6C746167       DC8 "Voltage level switch sensor"
   \              65206C657665
   \              6C2073776974
   \              63682073656E
   \              736F7200    

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AiCoilInSensor &AiCoilInSensor::new AiCoilInSensor(int)
   \                     `??new AiCoilInSensor`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   590FA0E3           MOV      R0,#+356
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      `??new AiCoilInSensor_1`
   \   00000018   0410B0E1           MOVS     R1,R4
   \   0000001C   ........           BL       ??AiCoilInSensor
   \   00000020   000000EA           B        `??new AiCoilInSensor_2`
   \                     `??new AiCoilInSensor_1`:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     `??new AiCoilInSensor_2`:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1
    158          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AiCoilInSensor::AiCoilInSensor(int)
                                       12
     AiCoilInSensor::Calculate()       12
     AiCoilInSensor::GetStringValue(int, int, AnsiString &)
                                       24
     AiCoilInSensor::GetValue(int, int, float &, int &, int &)
                                       40
     AiCoilInSensor::LoadConfigString(TSNConfigString &)
                                      168
     AiCoilInSensor::MakeConfigString(int)
                                      240
     AiCoilInSensor::PutFloatValue(int, float)
                                       16
     AiCoilInSensor::PutValue(int, int, AnsiString, bool, int *)
                                       72
     AiCoilInSensor::SetNewStatus(bool)
                                       12
     AiCoilInSensor::new AiCoilInSensor(int)
                                        8
     AiCoilInSensor::~AiCoilInSensor()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _String_val::_String_val(char_allocator)
                                       12
     __sti__routine()                   0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     operator+(string const &, string const &)
                                       44
     string::append(string const &)    12
     string::operator+=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator+=(string const &)
                                      32
     string::append(string const &)   48
     operator+(string const &, string const &)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AiCoilInSensor::AiCoilInSensor(int)
                                      48
     AiCoilInSensor::~AiCoilInSensor()
                                      56
     AiCoilInSensor::MakeConfigString(int)
                                     244
     AiCoilInSensor::LoadConfigString(TSNConfigString &)
                                     308
     AiCoilInSensor::PutValue(int, int, AnsiString, bool, int *)
                                     176
     AiCoilInSensor::GetValue(int, int, float &, int &, int &)
                                     204
     AiCoilInSensor::GetStringValue(int, int, AnsiString &)
                                      64
     AiCoilInSensor::PutFloatValue(int, float)
                                      40
     AiCoilInSensor::SetNewStatus(bool)
                                      40
     AiCoilInSensor::Calculate()     156
     ?<Constant "Voltage level switch ...">
                                      28
     AiCoilInSensor::new AiCoilInSensor(int)
                                      48
     __sti__routine()                208
      Others                         608

 
 2 396 bytes in segment CODE
   164 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 596 bytes of CODE  memory (+ 816 bytes shared)
   164 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
