##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:45 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIFloatSensor_mA.cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AIFloatSensor_mA.cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIFloatSensor_mA.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIFloatSensor_mA.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIFloatSensor_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs size_t char_traits::length(char const *)
   \                     ??length:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     strlen,??strlen??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
   \                     ??_AllocHolder:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(char const *)
   \                     `??operator+=_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append_1,??append??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_4    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_4:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(char const *)
   \                     ??append_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??length,??length??rA
   \   00000014   0020B0E1           MOVS     R2,R0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_3,??append??rA_3
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Backward_copier<float, true>::_Copy(float const *, float const *, float *)
   \                     ??_Copy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_backward_opt(float const *, float const *, float *)
   \                     ??_Copy_backward_opt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy,??_Copy??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_backward_opt(float *, float *, float *)
   \                     ??_Copy_backward_opt_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_backward_opt,??_Copy_backward_opt??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *copy_backward(float *, float *, float *)
   \                     ??copy_backward:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_backward_opt_1,??_Copy_backward_opt??rA_1
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Allocator<void>::deallocate(void *)
   \                     ??deallocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<float>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void allocator<float>::deallocate(float *, unsigned int)
   \                     ??deallocate_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0500B0E1           MOVS     R0,R5
   \   00000014   ........           _BLF     ??deallocate,??deallocate??rA
   \   00000018   7040BDE8           POP      {R4-R6,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * allocator<float>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0410A0E3           MOV      R1,#+4
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<float>::max_size() const
   \                     ??max_size:
   \   00000000   C024E0E3           MVN      R2,#-1073741824
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_1
   \                     ??max_size_2:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_1:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
   \                     ??_Copy_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copy(float const *, float const *, float *)
   \                     ??_Uninit_copy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_1,??_Copy??rA_1
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copy(float const *, float const *, float *, allocator<float> &)
   \                     ??_Uninit_copy_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0620B0E1           MOVS     R2,R6
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Uninit_copy,??_Uninit_copy??rA
   \   00000024   F040BDE8           POP      {R4-R7,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
   \                     ??_Uninitialized_copy:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0730B0E1           MOVS     R3,R7
   \   00000018   0620B0E1           MOVS     R2,R6
   \   0000001C   0510B0E1           MOVS     R1,R5
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Uninit_copy_1,??_Uninit_copy??rA_1
   \   00000028   F040BDE8           POP      {R4-R7,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
   \                     ??_Uninitialized_fill_n:
   \                     ??_Uninitialized_fill_n_1:
   \   00000000   000051E3           CMP      R1,#+0
   \   00000004   0400000A           BEQ      ??_Uninitialized_fill_n_2
   \   00000008   00C092E5           LDR      R12,[R2, #+0]
   \   0000000C   00C080E5           STR      R12,[R0, #+0]
   \   00000010   011051E2           SUBS     R1,R1,#+1
   \   00000014   040090E2           ADDS     R0,R0,#+4
   \   00000018   F8FFFFEA           B        ??_Uninitialized_fill_n_1
   \                     ??_Uninitialized_fill_n_2:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Vector_value<allocator<void>>::_Vector_value()
   \                     ??_Vector_value:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_AllocHolder,??_AllocHolder??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   041080E5           STR      R1,[R0, #+4]
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   081080E5           STR      R1,[R0, #+8]
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_ToBptr(void *)
   \                     ??_ToBptr:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Bfirst() const
   \                     ??_Bfirst:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Blast() const
   \                     ??_Blast:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Bend() const
   \                     ??_Bend:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Bsize() const
   \                     ??_Bsize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Blast,??_Blast??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   0000001C   000055E0           SUBS     R0,R5,R0
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Bcapacity() const
   \                     ??_Bcapacity:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bend,??_Bend??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   0000001C   000055E0           SUBS     R0,R5,R0
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Capacity<4U>() const
   \                     ??_Capacity:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bcapacity,??_Bcapacity??rA
   \   00000010   2001B0E1           LSRS     R0,R0,#+2
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Size<4U>() const
   \                     ??_Size:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bsize,??_Bsize??rA
   \   00000010   2001B0E1           LSRS     R0,R0,#+2
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Xlen() const
   \                     ??_Xlen:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Vector_impl<float, allocator<float>>::_Vector_impl()
   \                     ??_Vector_impl:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Vector_value,??_Vector_value??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Altyval() const
   \                     ??_Altyval:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval_1,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_EraseAll()
   \                     ??_EraseAll:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   0000001C   0520B0E1           MOVS     R2,R5
   \   00000020   0010B0E1           MOVS     R1,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Destroy,??_Destroy??rA
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   040084E5           STR      R0,[R4, #+4]
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1200000A           BEQ      ??_Tidy0_1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_EraseAll,??_EraseAll??rA
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Mytyend,??_Mytyend??rA
   \   00000028   0050B0E1           MOVS     R5,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   00000034   0060B0E1           MOVS     R6,R0
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   00000040   0070B0E1           MOVS     R7,R0
   \   00000044   0D10B0E1           MOVS     R1,SP
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   ........           _BLF     ??_Altyval,??_Altyval??rA
   \   00000050   2501B0E1           LSRS     R0,R5,#+2
   \   00000054   262150E0           SUBS     R2,R0,R6, LSR #+2
   \   00000058   0710B0E1           MOVS     R1,R7
   \   0000005C   0D00B0E1           MOVS     R0,SP
   \   00000060   ........           _BLF     ??deallocate_1,??deallocate??rA_1
   \                     ??_Tidy0_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
   \                     ??_Destroy:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   002096E5           LDR      R2,[R6, #+0]
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Insert0,??_Insert0??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
   \                     ??_Insert_n:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   000097E5           LDR      R0,[R7, #+0]
   \   00000018   0080B0E1           MOVS     R8,R0
   \   0000001C   0830B0E1           MOVS     R3,R8
   \   00000020   0620B0E1           MOVS     R2,R6
   \   00000024   0510B0E1           MOVS     R1,R5
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Insert_n0,??_Insert_n0??rA
   \   00000030   F041BDE8           POP      {R4-R8,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back(float const &)
   \                     ??_Push_back:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   001095E5           LDR      R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytyfirst() const
   \                     ??_Mytyfirst:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytylast() const
   \                     ??_Mytylast:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytyend() const
   \                     ??_Mytyend:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0280B0E1           MOVS     R8,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??capacity,??capacity??rA
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   0000002C   01108DE2           ADD      R1,SP,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??size,??size??rA
   \   00000040   0060B0E1           MOVS     R6,R0
   \   00000044   000058E3           CMP      R8,#+0
   \   00000048   4A00000A           BEQ      ??_Make_room_1
   \   0000004C   0D00B0E1           MOVS     R0,SP
   \   00000050   ........           _BLF     ??max_size,??max_size??rA
   \   00000054   060050E0           SUBS     R0,R0,R6
   \   00000058   080050E1           CMP      R0,R8
   \   0000005C   0200002A           BCS      ??_Make_room_2
   \   00000060   0400B0E1           MOVS     R0,R4
   \   00000064   ........           _BLF     ??_Xlen,??_Xlen??rA
   \   00000068   420000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   0000006C   060098E0           ADDS     R0,R8,R6
   \   00000070   000057E1           CMP      R7,R0
   \   00000074   3000002A           BCS      ??_Make_room_3
   \   00000078   0D00B0E1           MOVS     R0,SP
   \   0000007C   ........           _BLF     ??max_size,??max_size??rA
   \   00000080   A70050E0           SUBS     R0,R0,R7, LSR #+1
   \   00000084   070050E1           CMP      R0,R7
   \   00000088   0100002A           BCS      ??_Make_room_4
   \   0000008C   0070A0E3           MOV      R7,#+0
   \   00000090   000000EA           B        ??_Make_room_5
   \                     ??_Make_room_4:
   \   00000094   A77097E0           ADDS     R7,R7,R7, LSR #+1
   \                     ??_Make_room_5:
   \   00000098   060098E0           ADDS     R0,R8,R6
   \   0000009C   000057E1           CMP      R7,R0
   \   000000A0   0100002A           BCS      ??_Make_room_6
   \   000000A4   060098E0           ADDS     R0,R8,R6
   \   000000A8   0070B0E1           MOVS     R7,R0
   \                     ??_Make_room_6:
   \   000000AC   0710B0E1           MOVS     R1,R7
   \   000000B0   0D00B0E1           MOVS     R0,SP
   \   000000B4   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   000000B8   0090B0E1           MOVS     R9,R0
   \   000000BC   04908DE5           STR      R9,[SP, #+4]
   \   000000C0   0400B0E1           MOVS     R0,R4
   \   000000C4   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   000000C8   0930B0E1           MOVS     R3,R9
   \   000000CC   0520B0E1           MOVS     R2,R5
   \   000000D0   0010B0E1           MOVS     R1,R0
   \   000000D4   0400B0E1           MOVS     R0,R4
   \   000000D8   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   000000DC   00A0B0E1           MOVS     R10,R0
   \   000000E0   0400A0E3           MOV      R0,#+4
   \   000000E4   90A821E0           MLA      R1,R0,R8,R10
   \   000000E8   01B0B0E1           MOVS     R11,R1
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   000000F4   0020B0E1           MOVS     R2,R0
   \   000000F8   0B30B0E1           MOVS     R3,R11
   \   000000FC   0510B0E1           MOVS     R1,R5
   \   00000100   0400B0E1           MOVS     R0,R4
   \   00000104   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   00000108   04008DE5           STR      R0,[SP, #+4]
   \   0000010C   088096E0           ADDS     R8,R6,R8
   \   00000110   0400B0E1           MOVS     R0,R4
   \   00000114   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000118   0400A0E3           MOV      R0,#+4
   \   0000011C   909721E0           MLA      R1,R0,R7,R9
   \   00000120   081084E5           STR      R1,[R4, #+8]
   \   00000124   0400A0E3           MOV      R0,#+4
   \   00000128   909821E0           MLA      R1,R0,R8,R9
   \   0000012C   041084E5           STR      R1,[R4, #+4]
   \   00000130   009084E5           STR      R9,[R4, #+0]
   \   00000134   0A50B0E1           MOVS     R5,R10
   \   00000138   0E0000EA           B        ??_Make_room_1
   \                     ??_Make_room_3:
   \   0000013C   0400B0E1           MOVS     R0,R4
   \   00000140   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000144   0090B0E1           MOVS     R9,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000150   0010B0E1           MOVS     R1,R0
   \   00000154   0400A0E3           MOV      R0,#+4
   \   00000158   909822E0           MLA      R2,R0,R8,R9
   \   0000015C   0500B0E1           MOVS     R0,R5
   \   00000160   ........           _BLF     ??copy_backward,??copy_backward??rA
   \   00000164   0490A0E3           MOV      R9,#+4
   \   00000168   0400B0E1           MOVS     R0,R4
   \   0000016C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000170   990820E0           MLA      R0,R9,R8,R0
   \   00000174   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   00000178   0500B0E1           MOVS     R0,R5
   \   0000017C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000180   F04FBDE8           POP      {R4-R11,LR}
   \   00000184   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_impl<float, allocator<float>>::size() const
   \                     ??size:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Size,??_Size??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_impl<float, allocator<float>>::capacity() const
   \                     ??capacity:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Capacity,??_Capacity??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
   \                     ??_Insert0:
   \   00000000   F4402DE9           PUSH     {R2,R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100001A           BNE      ??_Insert0_1
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   050000EA           B        ??_Insert0_2
   \                     ??_Insert0_1:
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??_ToBptr,??_ToBptr??rA
   \   00000028   0070B0E1           MOVS     R7,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   00000034   000057E0           SUBS     R0,R7,R0
   \                     ??_Insert0_2:
   \   00000038   0060B0E1           MOVS     R6,R0
   \   0000003C   0D30B0E1           MOVS     R3,SP
   \   00000040   0120A0E3           MOV      R2,#+1
   \   00000044   0510B0E1           MOVS     R1,R5
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   ........           _BLF     ??_Insert_n,??_Insert_n??rA
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   00000058   000096E0           ADDS     R0,R6,R0
   \   0000005C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000060   F040BDE8           POP      {R4-R7,LR}
   \   00000064   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
   \                     ??_Insert_n0:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0620B0E1           MOVS     R2,R6
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000024   0050B0E1           MOVS     R5,R0
   \   00000028   0730B0E1           MOVS     R3,R7
   \   0000002C   0620B0E1           MOVS     R2,R6
   \   00000030   0510B0E1           MOVS     R1,R5
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Ufill,??_Ufill??rA
   \   0000003C   F040BDE8           POP      {R4-R7,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0800002A           BCS      ??_Push_back0_1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000020   00309DE5           LDR      R3,[SP, #+0]
   \   00000024   0120A0E3           MOV      R2,#+1
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Ufill,??_Ufill??rA
   \   00000034   040084E5           STR      R0,[R4, #+4]
   \   00000038   050000EA           B        ??_Push_back0_2
   \                     ??_Push_back0_1:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   0D20B0E1           MOVS     R2,SP
   \   0000004C   0400B0E1           MOVS     R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA
   \                     ??_Push_back0_2:
   \   00000054   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000058   1040BDE8           POP      {R4,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void * _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
   \                     ??_Ufill:
   \   00000000   78402DE9           PUSH     {R3-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   01108DE2           ADD      R1,SP,#+1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0D00B0E1           MOVS     R0,SP
   \   00000028   ........           _BLF     ??allocator,??allocator??rA_1
   \   0000002C   0D30B0E1           MOVS     R3,SP
   \   00000030   04208DE2           ADD      R2,SP,#+4
   \   00000034   0610B0E1           MOVS     R1,R6
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Uninitialized_fill_n,??_Uninitialized_fill_n??rA
   \   00000040   0410A0E3           MOV      R1,#+4
   \   00000044   915620E0           MLA      R0,R1,R6,R5
   \   00000048   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000004C   7040BDE8           POP      {R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
   \                     ??_Ucopy:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   01108DE2           ADD      R1,SP,#+1
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   00000024   01108DE2           ADD      R1,SP,#+1
   \   00000028   0D00B0E1           MOVS     R0,SP
   \   0000002C   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000030   0D30B0E1           MOVS     R3,SP
   \   00000034   0720B0E1           MOVS     R2,R7
   \   00000038   0610B0E1           MOVS     R1,R6
   \   0000003C   0500B0E1           MOVS     R0,R5
   \   00000040   ........           _BLF     ??_Uninitialized_copy,??_Uninitialized_copy??rA
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   F040BDE8           POP      {R4-R7,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<float>::vector()
   \                     ??vector:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Vector_impl,??_Vector_impl??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<float>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * vector<float>::begin()
   \                     ??begin:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int vector<float>::size() const
   \                     ??size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Size,??_Size??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool vector<float>::empty() const
   \                     ??empty:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??size_1,??size??rA_1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100001A           BNE      ??empty_1
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   000000EA           B        ??empty_2
   \                     ??empty_1:
   \   00000020   0000A0E3           MOV      R0,#+0
   \                     ??empty_2:
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float & vector<float>::operator[](unsigned int)
   \                     `??operator[]`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0460A0E3           MOV      R6,#+4
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??begin,??begin??rA
   \   00000018   960520E0           MLA      R0,R6,R5,R0
   \   0000001C   7040BDE8           POP      {R4-R6,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void vector<float>::push_back(float)
   \                     ??push_back:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Push_back,??_Push_back??rA
   \   00000014   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void vector<float>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIFloatSensor_mA::AIFloatSensor_mA(void)
   \                     ??AIFloatSensor_mA:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     10          {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000010   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   590F94E2           ADDS     R0,R4,#+356
   \   0000001C   ........           _BLF     ??vector,??vector??rA
   \   00000020   5C0F94E2           ADDS     R0,R4,#+368
   \   00000024   ........           _BLF     ??vector,??vector??rA
     11              Type                = C_AI_Float_4_20mA;
   \   00000028   5D00A0E3           MOV      R0,#+93
   \   0000002C   800E80E3           ORR      R0,R0,#0x800
   \   00000030   A00084E5           STR      R0,[R4, #+160]
     12              BasicSensorType     = AI_SENSOR_FLOAT;
   \   00000034   0400A0E3           MOV      R0,#+4
   \   00000038   100184E5           STR      R0,[R4, #+272]
     13              BasicSensorTypeWord = L_WORD947;//Float
   \   0000003C   B300A0E3           MOV      R0,#+179
   \   00000040   C00F80E3           ORR      R0,R0,#0x300
   \   00000044   140184E5           STR      R0,[R4, #+276]
     14              Location            = C_AI_LOC_DECK;
   \   00000048   EA00A0E3           MOV      R0,#+234
   \   0000004C   800E80E3           ORR      R0,R0,#0x800
   \   00000050   280184E5           STR      R0,[R4, #+296]
     15          }
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   1040BDE8           POP      {R4,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          AIFloatSensor_mA::~AIFloatSensor_mA(void)
     18          {
   \                     `?~AIFloatSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0C00000A           BEQ      `?~AIFloatSensor_mA_1`
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     19          }
   \   0000001C   5C0F94E2           ADDS     R0,R4,#+368
   \   00000020   ........           _BLF     `?~vector`,`?~vector??rA`
   \   00000024   590F94E2           ADDS     R0,R4,#+356
   \   00000028   ........           _BLF     `?~vector`,`?~vector??rA`
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000038   010015E3           TST      R5,#0x1
   \   0000003C   0100000A           BEQ      `?~AIFloatSensor_mA_1`
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIFloatSensor_mA_1`:
   \   00000048   3040BDE8           POP      {R4,R5,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
     20          
     21          
     22          ///////////////////////////////////////////////////////////////
     23          //
     24          // Routines for the Configuration
     25          //
     26          ///////////////////////////////////////////////////////////////
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          AnsiString AIFloatSensor_mA::MakeConfigString(int ExtraTabs)
     29          {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   93DF4DE2           SUB      SP,SP,#+588
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0290B0E1           MOVS     R9,R2
     30              AnsiString LocalString =TabStrX(1,ExtraTabs)+KeyWord(Type)+CrLfStr;
   \   00000014   A01094E5           LDR      R1,[R4, #+160]
   \   00000018   700F8DE2           ADD      R0,SP,#+448
   \   0000001C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000020   0920B0E1           MOVS     R2,R9
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   770F8DE2           ADD      R0,SP,#+476
   \   0000002C   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000030   702F8DE2           ADD      R2,SP,#+448
   \   00000034   771F8DE2           ADD      R1,SP,#+476
   \   00000038   7E0F8DE2           ADD      R0,SP,#+504
   \   0000003C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000040   1C239FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000044   7E1F8DE2           ADD      R1,SP,#+504
   \   00000048   850F8DE2           ADD      R0,SP,#+532
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   851F8DE2           ADD      R1,SP,#+532
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   0000005C   850F8DE2           ADD      R0,SP,#+532
   \   00000060   ........           _BLF     `?~string`,`?~string??rA`
   \   00000064   7E0F8DE2           ADD      R0,SP,#+504
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   700F8DE2           ADD      R0,SP,#+448
   \   00000070   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000074   770F8DE2           ADD      R0,SP,#+476
   \   00000078   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     31              LocalString += AnalogInput::MakeConfigString();     //common
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   691F8DE2           ADD      R1,SP,#+420
   \   00000084   0400B0E1           MOVS     R0,R4
   \   00000088   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000008C   691F8DE2           ADD      R1,SP,#+420
   \   00000090   0500B0E1           MOVS     R0,R5
   \   00000094   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000098   690F8DE2           ADD      R0,SP,#+420
   \   0000009C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     32              {
     33                  LocalString +=TabStr2+KeyWord(C_AI_CAL_DATA)+CrLfStr;
   \   000000A0   B510A0E3           MOV      R1,#+181
   \   000000A4   801E81E3           ORR      R1,R1,#0x800
   \   000000A8   E0008DE2           ADD      R0,SP,#+224
   \   000000AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B0   E0208DE2           ADD      R2,SP,#+224
   \   000000B4   AC129FE5           LDR      R1,??MakeConfigString_2+0x4  ;; TabStr2
   \   000000B8   FC008DE2           ADD      R0,SP,#+252
   \   000000BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C0   9C229FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   000000C4   FC108DE2           ADD      R1,SP,#+252
   \   000000C8   460F8DE2           ADD      R0,SP,#+280
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   461F8DE2           ADD      R1,SP,#+280
   \   000000D4   0500B0E1           MOVS     R0,R5
   \   000000D8   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000DC   460F8DE2           ADD      R0,SP,#+280
   \   000000E0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000E4   FC008DE2           ADD      R0,SP,#+252
   \   000000E8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000EC   E0008DE2           ADD      R0,SP,#+224
   \   000000F0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     34                  for ( unsigned ind=0; ind< AmpPcnt.size(); ind++ ) {
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   0060B0E1           MOVS     R6,R0
   \                     ??MakeConfigString_3:
   \   000000FC   5C0F94E2           ADDS     R0,R4,#+368
   \   00000100   ........           _BLF     ??size_1,??size??rA_1
   \   00000104   000056E1           CMP      R6,R0
   \   00000108   5F00002A           BCS      ??MakeConfigString_4
     35                      float Percent = AmpPcnt[ind]*100.0;
   \   0000010C   0610B0E1           MOVS     R1,R6
   \   00000110   5C0F94E2           ADDS     R0,R4,#+368
   \   00000114   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000120   0020A0E1           MOV      R2,R0
   \   00000124   0130A0E1           MOV      R3,R1
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   4014A0E3           MOV      R1,#+1073741824
   \   00000130   591881E3           ORR      R1,R1,#0x590000
   \   00000134   ........           _BLF     __dMul,??__dMul??rA
   \   00000138   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000013C   00B0B0E1           MOVS     R11,R0
     36                      float CalVal  = AmpCal[ind]*1000.0;
   \   00000140   0610B0E1           MOVS     R1,R6
   \   00000144   590F94E2           ADDS     R0,R4,#+356
   \   00000148   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000154   0020A0E1           MOV      R2,R0
   \   00000158   0130A0E1           MOV      R3,R1
   \   0000015C   0000A0E3           MOV      R0,#+0
   \   00000160   ........           LDR      R1,??DataTable5  ;; 0x408f4000
   \   00000164   ........           _BLF     __dMul,??__dMul??rA
   \   00000168   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000016C   00A0B0E1           MOVS     R10,R0
     37          
     38                      LocalString +=TabStr3+FloatToAnsiString(AmpPcnt[ind]*100.0,5,1);
   \   00000170   0610B0E1           MOVS     R1,R6
   \   00000174   5C0F94E2           ADDS     R0,R4,#+368
   \   00000178   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   0000017C   0130A0E3           MOV      R3,#+1
   \   00000180   0520A0E3           MOV      R2,#+5
   \   00000184   0280B0E1           MOVS     R8,R2
   \   00000188   0370B0E1           MOVS     R7,R3
   \   0000018C   000090E5           LDR      R0,[R0, #+0]
   \   00000190   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000194   0020A0E1           MOV      R2,R0
   \   00000198   0130A0E1           MOV      R3,R1
   \   0000019C   0000A0E3           MOV      R0,#+0
   \   000001A0   4014A0E3           MOV      R1,#+1073741824
   \   000001A4   591881E3           ORR      R1,R1,#0x590000
   \   000001A8   ........           _BLF     __dMul,??__dMul??rA
   \   000001AC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001B0   0010B0E1           MOVS     R1,R0
   \   000001B4   0730B0E1           MOVS     R3,R7
   \   000001B8   0820B0E1           MOVS     R2,R8
   \   000001BC   54008DE2           ADD      R0,SP,#+84
   \   000001C0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001C4   54208DE2           ADD      R2,SP,#+84
   \   000001C8   9C119FE5           LDR      R1,??MakeConfigString_2+0x8  ;; TabStr3
   \   000001CC   70008DE2           ADD      R0,SP,#+112
   \   000001D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001D4   70108DE2           ADD      R1,SP,#+112
   \   000001D8   0500B0E1           MOVS     R0,R5
   \   000001DC   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000001E0   70008DE2           ADD      R0,SP,#+112
   \   000001E4   ........           _BLF     `?~string`,`?~string??rA`
   \   000001E8   54008DE2           ADD      R0,SP,#+84
   \   000001EC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     39                      LocalString +=TabStr1+FloatToAnsiString(AmpCal[ind]*1000.0,5,1)+CrLfStr;
   \   000001F0   0610B0E1           MOVS     R1,R6
   \   000001F4   590F94E2           ADDS     R0,R4,#+356
   \   000001F8   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   000001FC   0130A0E3           MOV      R3,#+1
   \   00000200   0520A0E3           MOV      R2,#+5
   \   00000204   0280B0E1           MOVS     R8,R2
   \   00000208   0370B0E1           MOVS     R7,R3
   \   0000020C   000090E5           LDR      R0,[R0, #+0]
   \   00000210   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000214   0020A0E1           MOV      R2,R0
   \   00000218   0130A0E1           MOV      R3,R1
   \   0000021C   0000A0E3           MOV      R0,#+0
   \   00000220   ........           LDR      R1,??DataTable5  ;; 0x408f4000
   \   00000224   ........           _BLF     __dMul,??__dMul??rA
   \   00000228   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000022C   0010B0E1           MOVS     R1,R0
   \   00000230   0730B0E1           MOVS     R3,R7
   \   00000234   0820B0E1           MOVS     R2,R8
   \   00000238   0D00B0E1           MOVS     R0,SP
   \   0000023C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000240   0D20B0E1           MOVS     R2,SP
   \   00000244   24119FE5           LDR      R1,??MakeConfigString_2+0xC  ;; TabStr1
   \   00000248   1C008DE2           ADD      R0,SP,#+28
   \   0000024C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000250   0C219FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000254   1C108DE2           ADD      R1,SP,#+28
   \   00000258   38008DE2           ADD      R0,SP,#+56
   \   0000025C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000260   38108DE2           ADD      R1,SP,#+56
   \   00000264   0500B0E1           MOVS     R0,R5
   \   00000268   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   0000026C   38008DE2           ADD      R0,SP,#+56
   \   00000270   ........           _BLF     `?~string`,`?~string??rA`
   \   00000274   1C008DE2           ADD      R0,SP,#+28
   \   00000278   ........           _BLF     `?~string`,`?~string??rA`
   \   0000027C   0D00B0E1           MOVS     R0,SP
   \   00000280   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     40                  }
   \   00000284   016096E2           ADDS     R6,R6,#+1
   \   00000288   9BFFFFEA           B        ??MakeConfigString_3
     41                  LocalString +=TabStr2+KeyWord(C_T_TABLE_END)+CrLfStr;;
   \                     ??MakeConfigString_4:
   \   0000028C   9E10A0E3           MOV      R1,#+158
   \   00000290   501E81E3           ORR      R1,R1,#0x500
   \   00000294   8C008DE2           ADD      R0,SP,#+140
   \   00000298   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000029C   8C208DE2           ADD      R2,SP,#+140
   \   000002A0   C0109FE5           LDR      R1,??MakeConfigString_2+0x4  ;; TabStr2
   \   000002A4   A8008DE2           ADD      R0,SP,#+168
   \   000002A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002AC   B0209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   000002B0   A8108DE2           ADD      R1,SP,#+168
   \   000002B4   C4008DE2           ADD      R0,SP,#+196
   \   000002B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002BC   C4108DE2           ADD      R1,SP,#+196
   \   000002C0   0500B0E1           MOVS     R0,R5
   \   000002C4   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000002C8   C4008DE2           ADD      R0,SP,#+196
   \   000002CC   ........           _BLF     `?~string`,`?~string??rA`
   \   000002D0   A8008DE2           ADD      R0,SP,#+168
   \   000002D4   ........           _BLF     `?~string`,`?~string??rA`
   \   000002D8   8C008DE2           ADD      R0,SP,#+140
   \   000002DC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     42              }
     43              LocalString +=TabStrX(1,ExtraTabs)+KeyWord(C_AI_END)+CrLfStr;
   \   000002E0   9810A0E3           MOV      R1,#+152
   \   000002E4   801E81E3           ORR      R1,R1,#0x800
   \   000002E8   4D0F8DE2           ADD      R0,SP,#+308
   \   000002EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002F0   0920B0E1           MOVS     R2,R9
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   540F8DE2           ADD      R0,SP,#+336
   \   000002FC   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000300   4D2F8DE2           ADD      R2,SP,#+308
   \   00000304   541F8DE2           ADD      R1,SP,#+336
   \   00000308   5B0F8DE2           ADD      R0,SP,#+364
   \   0000030C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000310   4C209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000314   5B1F8DE2           ADD      R1,SP,#+364
   \   00000318   620F8DE2           ADD      R0,SP,#+392
   \   0000031C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000320   621F8DE2           ADD      R1,SP,#+392
   \   00000324   0500B0E1           MOVS     R0,R5
   \   00000328   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   0000032C   620F8DE2           ADD      R0,SP,#+392
   \   00000330   ........           _BLF     `?~string`,`?~string??rA`
   \   00000334   5B0F8DE2           ADD      R0,SP,#+364
   \   00000338   ........           _BLF     `?~string`,`?~string??rA`
   \   0000033C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000340   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000344   540F8DE2           ADD      R0,SP,#+336
   \   00000348   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     44              LocalString += CrLfStr;
   \   0000034C   10109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   00000350   0500B0E1           MOVS     R0,R5
   \   00000354   ........           _BLF     `??operator+=`,`??operator+=??rA`
     45          
     46              return(LocalString);
   \   00000358   93DF8DE2           ADD      SP,SP,#+588      ;; stack cleaning
   \   0000035C   F04FBDE8           POP      {R4-R11,LR}
   \   00000360   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000364   ........           DC32     CrLfStr
   \   00000368   ........           DC32     TabStr2
   \   0000036C   ........           DC32     TabStr3
   \   00000370   ........           DC32     TabStr1
     47          }
     48          //---------------------------------------------------------------------------
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          bool AIFloatSensor_mA::LoadConfigString(TSNConfigString &ConfigString)
     51          {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   F4D04DE2           SUB      SP,SP,#+244
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     52              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0090B0E1           MOVS     R9,R0
     53              int ErrorLine=0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     54              int Key;
     55              AnsiString PROName = "Float sensor";
   \   00000020   54139FE5           LDR      R1,??LoadConfigString_2+0x4  ;; `?<Constant "Float sensor">`
   \   00000024   14008DE2           ADD      R0,SP,#+20
   \   00000028   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
     56              if ( PROPtr )   PROName +=(AnsiString)", for "+PROPtr->Name;
   \   0000002C   240194E5           LDR      R0,[R4, #+292]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0E00000A           BEQ      ??LoadConfigString_3
   \   00000038   40139FE5           LDR      R1,??LoadConfigString_2+0x8  ;; `?<Constant ", for ">`
   \   0000003C   D8008DE2           ADD      R0,SP,#+216
   \   00000040   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   240194E5           LDR      R0,[R4, #+292]
   \   0000004C   442090E2           ADDS     R2,R0,#+68
   \   00000050   4C008DE2           ADD      R0,SP,#+76
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   4C108DE2           ADD      R1,SP,#+76
   \   0000005C   14008DE2           ADD      R0,SP,#+20
   \   00000060   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000064   4C008DE2           ADD      R0,SP,#+76
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   D8008DE2           ADD      R0,SP,#+216
   \   00000070   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     57              PROName += ":\n";
   \                     ??LoadConfigString_3:
   \   00000074   BF1F8FE2           ADR      R1,??LoadConfigString_2  ;; ":\n"
   \   00000078   14008DE2           ADD      R0,SP,#+20
   \   0000007C   ........           _BLF     `??operator+=_1`,`??operator+=??rA_1`
     58              do {
     59                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   0D20B0E1           MOVS     R2,SP
   \   00000088   30108DE2           ADD      R1,SP,#+48
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??NextWord,??NextWord??rA
     60                  if ( ErrorLine ) {
   \   00000094   00009DE5           LDR      R0,[SP, #+0]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0A00000A           BEQ      ??LoadConfigString_5
     61                      if ( ErrorLine != EOF ) {
   \   000000A0   00009DE5           LDR      R0,[SP, #+0]
   \   000000A4   010070E3           CMN      R0,#+1
   \   000000A8   9400000A           BEQ      ??LoadConfigString_6
     62                          GiveConfigWarning(PROName,ErrorLine);
   \   000000AC   14108DE2           ADD      R1,SP,#+20
   \   000000B0   BC008DE2           ADD      R0,SP,#+188
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   00109DE5           LDR      R1,[SP, #+0]
   \   000000BC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000C0   BC008DE2           ADD      R0,SP,#+188
   \   000000C4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000C8   8C0000EA           B        ??LoadConfigString_6
     63                      }
     64                  } else {
     65                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   000000CC   30108DE2           ADD      R1,SP,#+48
   \   000000D0   A0008DE2           ADD      R0,SP,#+160
   \   000000D4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000D8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000DC   0080B0E1           MOVS     R8,R0
   \   000000E0   A0008DE2           ADD      R0,SP,#+160
   \   000000E4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     66                      switch ( Key ) {
   \   000000E8   0800B0E1           MOVS     R0,R8
   \   000000EC   9810A0E3           MOV      R1,#+152
   \   000000F0   801E81E3           ORR      R1,R1,#0x800
   \   000000F4   010050E1           CMP      R0,R1
   \   000000F8   8000000A           BEQ      ??LoadConfigString_6
   \   000000FC   9910A0E3           MOV      R1,#+153
   \   00000100   801E81E3           ORR      R1,R1,#0x800
   \   00000104   010050E1           CMP      R0,R1
   \   00000108   1200000A           BEQ      ??LoadConfigString_7
   \   0000010C   B510A0E3           MOV      R1,#+181
   \   00000110   801E81E3           ORR      R1,R1,#0x800
   \   00000114   010050E1           CMP      R0,R1
   \   00000118   1200000A           BEQ      ??LoadConfigString_8
     67                      default:
     68                          GiveConfigWarning(PROName,InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_9:
   \   0000011C   30108DE2           ADD      R1,SP,#+48
   \   00000120   84008DE2           ADD      R0,SP,#+132
   \   00000124   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   14108DE2           ADD      R1,SP,#+20
   \   00000130   68008DE2           ADD      R0,SP,#+104
   \   00000134   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000138   1C2095E5           LDR      R2,[R5, #+28]
   \   0000013C   0610B0E1           MOVS     R1,R6
   \   00000140   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000144   84008DE2           ADD      R0,SP,#+132
   \   00000148   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000014C   68008DE2           ADD      R0,SP,#+104
   \   00000150   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000154   690000EA           B        ??LoadConfigString_6
     69                          break;
     70                      case C_AI_START_COMMON:
     71                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_7:
   \   00000158   0510B0E1           MOVS     R1,R5
   \   0000015C   0400B0E1           MOVS     R0,R4
   \   00000160   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000164   650000EA           B        ??LoadConfigString_6
     72                          break;
     73                      case C_AI_CAL_DATA:
     74                          do {
     75                              float Percent = ConfigString.ReadDouble(ErrorLine,C_T_TABLE_END);
   \                     ??LoadConfigString_8:
   \   00000168   9E20A0E3           MOV      R2,#+158
   \   0000016C   502E82E3           ORR      R2,R2,#0x500
   \   00000170   0D10B0E1           MOVS     R1,SP
   \   00000174   0500B0E1           MOVS     R0,R5
   \   00000178   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000017C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000180   0070B0E1           MOVS     R7,R0
     76                              float mAmp;
     77                              if ( !ErrorLine ) {
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   0600001A           BNE      ??LoadConfigString_10
     78                                  mAmp = ConfigString.ReadDouble(ErrorLine,C_T_TABLE_END);
   \   00000190   9E20A0E3           MOV      R2,#+158
   \   00000194   502E82E3           ORR      R2,R2,#0x500
   \   00000198   0D10B0E1           MOVS     R1,SP
   \   0000019C   0500B0E1           MOVS     R0,R5
   \   000001A0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001A4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001A8   0060B0E1           MOVS     R6,R0
     79                              }
     80                              if ( !ErrorLine ) {
   \                     ??LoadConfigString_10:
   \   000001AC   00009DE5           LDR      R0,[SP, #+0]
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   1200001A           BNE      ??LoadConfigString_11
     81                                  AmpPcnt.push_back(Percent/100.0);
   \   000001B8   0700B0E1           MOVS     R0,R7
   \   000001BC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   4034A0E3           MOV      R3,#+1073741824
   \   000001C8   593883E3           ORR      R3,R3,#0x590000
   \   000001CC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000001D0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001D4   0010B0E1           MOVS     R1,R0
   \   000001D8   5C0F94E2           ADDS     R0,R4,#+368
   \   000001DC   ........           _BLF     ??push_back,??push_back??rA
     82                                  AmpCal.push_back(mAmp/1000.0);
   \   000001E0   0600B0E1           MOVS     R0,R6
   \   000001E4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   ........           LDR      R3,??DataTable5  ;; 0x408f4000
   \   000001F0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000001F4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001F8   0010B0E1           MOVS     R1,R0
   \   000001FC   590F94E2           ADDS     R0,R4,#+356
   \   00000200   ........           _BLF     ??push_back,??push_back??rA
     83                              }
     84                          } while ( !ErrorLine );
   \                     ??LoadConfigString_11:
   \   00000204   00009DE5           LDR      R0,[SP, #+0]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   D5FFFF0A           BEQ      ??LoadConfigString_8
     85                          if ( ErrorLine == END_FOUND ) {
   \   00000210   00009DE5           LDR      R0,[SP, #+0]
   \   00000214   020070E3           CMN      R0,#+2
   \   00000218   3800001A           BNE      ??LoadConfigString_6
     86                              // End found, Permitted in this case, so ErrorStatus set to 0
     87                              ErrorLine = 0;
   \   0000021C   0010A0E3           MOV      R1,#+0
   \   00000220   00108DE5           STR      R1,[SP, #+0]
     88                              if ( AmpPcnt.empty() || AmpCal.empty() ) {
   \   00000224   5C0F94E2           ADDS     R0,R4,#+368
   \   00000228   ........           _BLF     ??empty,??empty??rA
   \   0000022C   000050E3           CMP      R0,#+0
   \   00000230   0300001A           BNE      ??LoadConfigString_12
   \   00000234   590F94E2           ADDS     R0,R4,#+356
   \   00000238   ........           _BLF     ??empty,??empty??rA
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   2E00000A           BEQ      ??LoadConfigString_6
     89                                  float Percent[2] = {0.0,100.0};
   \                     ??LoadConfigString_12:
   \   00000244   04008DE2           ADD      R0,SP,#+4
   \   00000248   34119FE5           LDR      R1,??LoadConfigString_2+0xC  ;; `?<Constant {(0.0F), (100.0F)}>`
   \   0000024C   002091E5           LDR      R2,[R1, #0]
   \   00000250   002080E5           STR      R2,[R0, #+0]
   \   00000254   042091E5           LDR      R2,[R1, #+4]
   \   00000258   042080E5           STR      R2,[R0, #+4]
     90                                  float mAmp[2]    = {4.0,20.0};
   \   0000025C   0C008DE2           ADD      R0,SP,#+12
   \   00000260   20119FE5           LDR      R1,??LoadConfigString_2+0x10  ;; `?<Constant {(4.0F), (20.0F)}>`
   \   00000264   002091E5           LDR      R2,[R1, #0]
   \   00000268   002080E5           STR      R2,[R0, #+0]
   \   0000026C   042091E5           LDR      R2,[R1, #+4]
   \   00000270   042080E5           STR      R2,[R0, #+4]
     91                                  AmpPcnt.clear();
   \   00000274   5C0F94E2           ADDS     R0,R4,#+368
   \   00000278   ........           _BLF     ??clear,??clear??rA
     92                                  AmpCal.clear();
   \   0000027C   590F94E2           ADDS     R0,R4,#+356
   \   00000280   ........           _BLF     ??clear,??clear??rA
     93                                  for ( int i=0; i < 2; i++ ) {
   \   00000284   0000A0E3           MOV      R0,#+0
   \   00000288   0060B0E1           MOVS     R6,R0
   \                     ??LoadConfigString_13:
   \   0000028C   020056E3           CMP      R6,#+2
   \   00000290   1A0000AA           BGE      ??LoadConfigString_6
     94                                      AmpPcnt.push_back(Percent[i]/100.0);
   \   00000294   0400A0E3           MOV      R0,#+4
   \   00000298   04108DE2           ADD      R1,SP,#+4
   \   0000029C   901621E0           MLA      R1,R0,R6,R1
   \   000002A0   000091E5           LDR      R0,[R1, #+0]
   \   000002A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   4034A0E3           MOV      R3,#+1073741824
   \   000002B0   593883E3           ORR      R3,R3,#0x590000
   \   000002B4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000002B8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002BC   0010B0E1           MOVS     R1,R0
   \   000002C0   5C0F94E2           ADDS     R0,R4,#+368
   \   000002C4   ........           _BLF     ??push_back,??push_back??rA
     95                                      AmpCal.push_back(mAmp[i]/1000.0);
   \   000002C8   0400A0E3           MOV      R0,#+4
   \   000002CC   0C108DE2           ADD      R1,SP,#+12
   \   000002D0   901621E0           MLA      R1,R0,R6,R1
   \   000002D4   000091E5           LDR      R0,[R1, #+0]
   \   000002D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   ........           LDR      R3,??DataTable5  ;; 0x408f4000
   \   000002E4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000002E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002EC   0010B0E1           MOVS     R1,R0
   \   000002F0   590F94E2           ADDS     R0,R4,#+356
   \   000002F4   ........           _BLF     ??push_back,??push_back??rA
     96                                  }
   \   000002F8   016096E2           ADDS     R6,R6,#+1
   \   000002FC   E2FFFFEA           B        ??LoadConfigString_13
     97                              }
     98                          }
     99                          break;
    100                      case C_AI_END:
    101                          break;
    102                      }
    103                  }
    104              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_6:
   \   00000300   30008DE2           ADD      R0,SP,#+48
   \   00000304   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000308   000059E3           CMP      R9,#+0
   \   0000030C   0600000A           BEQ      ??LoadConfigString_14
   \   00000310   00009DE5           LDR      R0,[SP, #+0]
   \   00000314   010070E3           CMN      R0,#+1
   \   00000318   0300000A           BEQ      ??LoadConfigString_14
   \   0000031C   9800A0E3           MOV      R0,#+152
   \   00000320   800E80E3           ORR      R0,R0,#0x800
   \   00000324   000058E1           CMP      R8,R0
   \   00000328   54FFFF1A           BNE      ??LoadConfigString_4
    105              if (!MinRange && !MaxRange) {
   \                     ??LoadConfigString_14:
   \   0000032C   5C1194E5           LDR      R1,[R4, #+348]
   \   00000330   0000A0E3           MOV      R0,#+0
   \   00000334   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000338   000050E3           CMP      R0,#+0
   \   0000033C   0600001A           BNE      ??LoadConfigString_15
   \   00000340   601194E5           LDR      R1,[R4, #+352]
   \   00000344   0000A0E3           MOV      R0,#+0
   \   00000348   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000034C   000050E3           CMP      R0,#+0
   \   00000350   0100001A           BNE      ??LoadConfigString_15
    106                  MinRange = Distance;
   \   00000354   2C0194E5           LDR      R0,[R4, #+300]
   \   00000358   5C0184E5           STR      R0,[R4, #+348]
    107              }
    108              return(NoError);
   \                     ??LoadConfigString_15:
   \   0000035C   14008DE2           ADD      R0,SP,#+20
   \   00000360   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000364   0900B0E1           MOVS     R0,R9
   \   00000368   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000036C   F4D08DE2           ADD      SP,SP,#+244      ;; stack cleaning
   \   00000370   F043BDE8           POP      {R4-R9,LR}
   \   00000374   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   00000378   3A0A0000           DC8      ":\n",+0
   \   0000037C   ........           DC32     `?<Constant "Float sensor">`
   \   00000380   ........           DC32     `?<Constant ", for ">`
   \   00000384   ........           DC32     `?<Constant {(0.0F), (100.0F)}>`
   \   00000388   ........           DC32     `?<Constant {(4.0F), (20.0F)}>`
    109          }
    110          //---------------------------------------------------------------------------
    111          
    112          ///////////////////////////////////////////////////////////////
    113          //
    114          // Routines for the librarian for input
    115          //
    116          ///////////////////////////////////////////////////////////////
    117          
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          int AIFloatSensor_mA::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    120          {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   01A0B0E1           MOVS     R10,R1
   \   00000010   02B0B0E1           MOVS     R11,R2
   \   00000014   0390B0E1           MOVS     R9,R3
   \   00000018   8050DDE5           LDRB     R5,[SP, #+128]
   \   0000001C   84609DE5           LDR      R6,[SP, #+132]
    121              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
    122              switch ( ValueId ) {
   \   00000030   0A00B0E1           MOVS     R0,R10
   \   00000034   B50040E2           SUB      R0,R0,#+181
   \   00000038   400E40E2           SUB      R0,R0,#+1024
   \   0000003C   030050E3           CMP      R0,#+3
   \   00000040   3200008A           BHI      ??PutValue_3
   \   00000044   011F8FE2           ADR      R1,??PutValue_1
   \   00000048   0010D1E7           LDRB     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000050   002F2F1B           DC8      +0,+47,+47,+27
    123              case SVT_AI_OFFSET   :
    124                  Offset = ConvertToSi(NewValue, ValUnitId=LENGTH_UNIT, Status,-5.0 ,50.0,Offset);
   \                     ??PutValue_4:
   \   00000054   0170A0E3           MOV      R7,#+1
   \   00000058   04708DE5           STR      R7,[SP, #+4]
   \   0000005C   0910B0E1           MOVS     R1,R9
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000068   0080B0E1           MOVS     R8,R0
   \   0000006C   400194E5           LDR      R0,[R4, #+320]
   \   00000070   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   4014A0E3           MOV      R1,#+1073741824
   \   00000080   491881E3           ORR      R1,R1,#0x490000
   \   00000084   03002DE9           PUSH     {R0,R1}
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   C014A0E3           MOV      R1,#-1073741824
   \   00000090   501981E3           ORR      R1,R1,#0x140000
   \   00000094   03002DE9           PUSH     {R0,R1}
   \   00000098   18208DE2           ADD      R2,SP,#+24
   \   0000009C   0710B0E1           MOVS     R1,R7
   \   000000A0   0800B0E1           MOVS     R0,R8
   \   000000A4   0800BDE8           POP      {R3}
   \   000000A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000AC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000B0   400184E5           STR      R0,[R4, #+320]
   \   000000B4   40008DE2           ADD      R0,SP,#+64
   \   000000B8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000BC   230000EA           B        ??PutValue_5
    125                  break;
    126              case SVT_AI_CALC_VAL :
    127                  Status = AdjustSensor(NewValue, ValUnitId=LENGTH_UNIT, 0.0 ,50.0,Local);
   \                     ??PutValue_6:
   \   000000C0   0170A0E3           MOV      R7,#+1
   \   000000C4   04708DE5           STR      R7,[SP, #+4]
   \   000000C8   0910B0E1           MOVS     R1,R9
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000D4   0510B0E1           MOVS     R1,R5
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   4014A0E3           MOV      R1,#+1073741824
   \   000000E0   921781E3           ORR      R1,R1,#0x2480000
   \   000000E4   02002DE9           PUSH     {R1}
   \   000000E8   0030A0E3           MOV      R3,#+0
   \   000000EC   0720B0E1           MOVS     R2,R7
   \   000000F0   0010B0E1           MOVS     R1,R0
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   000000FC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000100   00008DE5           STR      R0,[SP, #+0]
   \   00000104   24008DE2           ADD      R0,SP,#+36
   \   00000108   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000010C   0F0000EA           B        ??PutValue_5
    128                  break;
    129              default:
    130                  Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   00000110   0910B0E1           MOVS     R1,R9
   \   00000114   08008DE2           ADD      R0,SP,#+8
   \   00000118   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000011C   0030B0E1           MOVS     R3,R0
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0500B0E1           MOVS     R0,R5
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0B20B0E1           MOVS     R2,R11
   \   00000134   0A10B0E1           MOVS     R1,R10
   \   00000138   0400B0E1           MOVS     R0,R4
   \   0000013C   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000140   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000144   00008DE5           STR      R0,[SP, #+0]
   \   00000148   08008DE2           ADD      R0,SP,#+8
   \   0000014C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    131                  break;
    132              }
    133              if ( Status==E_NO_ERR ) {
   \                     ??PutValue_5:
   \   00000150   00009DE5           LDR      R0,[SP, #+0]
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   0500001A           BNE      ??PutValue_7
    134                  SetModifiedFlag();
   \   0000015C   A40094E5           LDR      R0,[R4, #+164]
   \   00000160   541090E2           ADDS     R1,R0,#+84
   \   00000164   0400B0E1           MOVS     R0,R4
   \   00000168   001091E5           LDR      R1,[R1, #+0]
   \   0000016C   0FE0A0E1           MOV      LR,PC
   \   00000170   11FF2FE1           BX       R1
    135              }
    136              if ( UnitId ) {
   \                     ??PutValue_7:
   \   00000174   000056E3           CMP      R6,#+0
   \   00000178   0100000A           BEQ      ??PutValue_8
    137                  *UnitId = ValUnitId;
   \   0000017C   04009DE5           LDR      R0,[SP, #+4]
   \   00000180   000086E5           STR      R0,[R6, #+0]
    138              }
    139              return(Status);
   \                     ??PutValue_8:
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   0000018C   F04FBDE8           POP      {R4-R11,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
    140          }
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          int  AIFloatSensor_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    143          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
    144              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
    145              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1600008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00131307           DC8      +0,+19,+19,+7
    146              case SVT_AI_OFFSET   :
    147                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
    148                  DecPnt     = 3;
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   000088E5           STR      R0,[R8, #+0]
    149                  Unit       = LENGTH_UNIT;
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   000089E5           STR      R0,[R9, #+0]
   \   00000060   160000EA           B        ??GetValue_5
    150                  break;
    151              case SVT_AI_CALC_VAL :
    152                  MyRetValue = Calculate();
   \                     ??GetValue_6:
   \   00000064   A40094E5           LDR      R0,[R4, #+164]
   \   00000068   601090E2           ADDS     R1,R0,#+96
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   11FF2FE1           BX       R1
   \   0000007C   000087E5           STR      R0,[R7, #+0]
    153                  DecPnt     = 3;
   \   00000080   0300A0E3           MOV      R0,#+3
   \   00000084   000088E5           STR      R0,[R8, #+0]
    154                  Unit       = LENGTH_UNIT;
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   000089E5           STR      R0,[R9, #+0]
   \   00000090   0A0000EA           B        ??GetValue_5
    155                  break;
    156              default:
    157                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000094   0900B0E1           MOVS     R0,R9
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0800B0E1           MOVS     R0,R8
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0730B0E1           MOVS     R3,R7
   \   000000A8   0620B0E1           MOVS     R2,R6
   \   000000AC   0510B0E1           MOVS     R1,R5
   \   000000B0   0400B0E1           MOVS     R0,R4
   \   000000B4   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   00A0B0E1           MOVS     R10,R0
    158                  break;
    159              }
    160              return(Status);
   \                     ??GetValue_5:
   \   000000C0   0A00B0E1           MOVS     R0,R10
   \   000000C4   F047BDE8           POP      {R4-R10,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    161          }
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          int AIFloatSensor_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    164          {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    165              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
    166              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
    167              case SVT_AI_UNIT:
    168                  MyString = GetUnitName(LENGTH_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
    169                  break;
    170              default:
    171                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
    172                  break;
    173              }
    174              return(Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    175          }
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          int AIFloatSensor_mA::PutFloatValue( int ValueId, float NewValue)
    178          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    179              return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    180          }
    181          
    182          //////////////////////////////////////////////////////////////////
    183          //
    184          // Sensor calculations
    185          //
    186          //////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    187          float AIFloatSensor_mA::Calculate(void)
    188          {
   \                     ??Calculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    189          	if ( CanCalculate() ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0900000A           BEQ      ??Calculate_1
    190          		CalcValue = Gain*Get_Level(FilteredValue) - Offset;
   \   00000018   441194E5           LDR      R1,[R4, #+324]
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           BL       ??Get_Level
   \   00000024   3C1194E5           LDR      R1,[R4, #+316]
   \   00000028   ........           _BLF     __fMul,??__fMul??rA
   \   0000002C   401194E5           LDR      R1,[R4, #+320]
   \   00000030   ........           _BLF     __fSub,??__fSub??rA
   \   00000034   480184E5           STR      R0,[R4, #+328]
    191          		ResultOK  = true;
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   3601C4E5           STRB     R0,[R4, #+310]
    192          	}
    193          	return(CalcValue);
   \                     ??Calculate_1:
   \   00000040   480194E5           LDR      R0,[R4, #+328]
   \   00000044   1040BDE8           POP      {R4,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
    194          }

   \                                 In segment CODE, align 4, keep-with-next
    195          float AIFloatSensor_mA::Get_Percent(float Amp)
    196          {
   \                     ??Get_Percent:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    197              int Index = 1;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0060B0E1           MOVS     R6,R0
    198              int LastI = AmpCal.size()-1;
   \   00000014   590F94E2           ADDS     R0,R4,#+356
   \   00000018   ........           _BLF     ??size_1,??size??rA_1
   \   0000001C   010050E2           SUBS     R0,R0,#+1
   \   00000020   0070B0E1           MOVS     R7,R0
    199              while ( ( Index < LastI ) && ( Amp >AmpCal[Index] ) )    Index++;
   \                     ??Get_Percent_1:
   \   00000024   070056E1           CMP      R6,R7
   \   00000028   090000AA           BGE      ??Get_Percent_2
   \   0000002C   0610B0E1           MOVS     R1,R6
   \   00000030   590F94E2           ADDS     R0,R4,#+356
   \   00000034   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   0510B0E1           MOVS     R1,R5
   \   00000040   ........           _BLF     __fLess,??__fLess??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0100000A           BEQ      ??Get_Percent_2
   \   0000004C   016096E2           ADDS     R6,R6,#+1
   \   00000050   F3FFFFEA           B        ??Get_Percent_1
    200          
    201              return(IntPol1stDeg(AmpCal[Index-1],AmpCal[Index],AmpPcnt[Index-1],AmpPcnt[Index],Amp));
   \                     ??Get_Percent_2:
   \   00000054   0610B0E1           MOVS     R1,R6
   \   00000058   5C0F94E2           ADDS     R0,R4,#+368
   \   0000005C   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   011056E2           SUBS     R1,R6,#+1
   \   00000068   5C0F94E2           ADDS     R0,R4,#+368
   \   0000006C   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000070   0090B0E1           MOVS     R9,R0
   \   00000074   0610B0E1           MOVS     R1,R6
   \   00000078   590F94E2           ADDS     R0,R4,#+356
   \   0000007C   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000080   00A0B0E1           MOVS     R10,R0
   \   00000084   011056E2           SUBS     R1,R6,#+1
   \   00000088   590F94E2           ADDS     R0,R4,#+356
   \   0000008C   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000090   0510B0E1           MOVS     R1,R5
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   003098E5           LDR      R3,[R8, #+0]
   \   0000009C   002099E5           LDR      R2,[R9, #+0]
   \   000000A0   00109AE5           LDR      R1,[R10, #+0]
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000AC   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000B0   F047BDE8           POP      {R4-R10,LR}
   \   000000B4   1EFF2FE1           BX       LR               ;; return
    202          }
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          float AIFloatSensor_mA::Get_Level(float Amp)
    205          {
   \                     ??Get_Level:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    206              float  Percent= Get_Percent(Amp);
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           BL       ??Get_Percent
   \   00000018   0060B0E1           MOVS     R6,R0
    207              return((MaxRange-MinRange)*Percent+MinRange);
   \   0000001C   600194E5           LDR      R0,[R4, #+352]
   \   00000020   5C1194E5           LDR      R1,[R4, #+348]
   \   00000024   ........           _BLF     __fSub,??__fSub??rA
   \   00000028   0610B0E1           MOVS     R1,R6
   \   0000002C   ........           _BLF     __fMul,??__fMul??rA
   \   00000030   5C1194E5           LDR      R1,[R4, #+348]
   \   00000034   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000038   7040BDE8           POP      {R4-R6,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    208          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Float sensor">`:
   \   00000000   466C6F617420       DC8 "Float sensor"
   \              73656E736F72
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", for ">`:
   \   00000000   2C20666F7220       DC8 ", for "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (100.0F)}>`:
   \   00000000   000000000000       DC32 0H, 42C80000H
   \              C842        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(4.0F), (20.0F)}>`:
   \   00000000   000080400000       DC32 40800000H, 41A00000H
   \              A041        

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIFloatSensor_mA &AIFloatSensor_mA::new AIFloatSensor_mA()
   \                     `??new AIFloatSensor_mA`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5F0FA0E3           MOV      R0,#+380
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      `??new AIFloatSensor_mA_1`
   \   00000014   ........           BL       ??AIFloatSensor_mA
   \   00000018   000000EA           B        `??new AIFloatSensor_mA_2`
   \                     `??new AIFloatSensor_mA_1`:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     `??new AIFloatSensor_mA_2`:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   00408F40           DC32     0x408f4000
    209          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIFloatSensor_mA::AIFloatSensor_mA()
                                        8
     AIFloatSensor_mA::Calculate()      8
     AIFloatSensor_mA::GetStringValue(int, int, AnsiString &)
                                       52
     AIFloatSensor_mA::GetValue(int, int, float &, int &, int &)
                                       40
     AIFloatSensor_mA::Get_Level(float)
                                       16
     AIFloatSensor_mA::Get_Percent(float)
                                       36
     AIFloatSensor_mA::LoadConfigString(TSNConfigString &)
                                      272
     AIFloatSensor_mA::MakeConfigString(int)
                                      624
     AIFloatSensor_mA::PutFloatValue(int, float)
                                       16
     AIFloatSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                      152
     AIFloatSensor_mA::new AIFloatSensor_mA()
                                        4
     AIFloatSensor_mA::~AIFloatSensor_mA()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _Allocator<void>::deallocate(void *)
                                        8
     _Backward_copier<float, true>::_Copy(float const *, float const *, float *)
                                       16
     _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
                                        0
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _Copy_backward_opt(float *, float *, float *)
                                       16
     _Copy_backward_opt(float const *, float const *, float *)
                                       16
     _String_val::_String_val(char_allocator)
                                       12
     _Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
                                       16
     _Uninit_copy(float const *, float const *, float *)
                                       16
     _Uninit_copy(float const *, float const *, float *, allocator<float> &)
                                       20
     _Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
                                       20
     _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
                                        0
     _Vector_impl<float, allocator<float>>::_Altyval() const
                                       16
     _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
                                        0
     _Vector_impl<float, allocator<float>>::_EraseAll()
                                       12
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
                                       24
     _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
                                       24
     _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
                                       20
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       44
     _Vector_impl<float, allocator<float>>::_Mytyend() const
                                        0
     _Vector_impl<float, allocator<float>>::_Mytyfirst() const
                                        0
     _Vector_impl<float, allocator<float>>::_Mytylast() const
                                        0
     _Vector_impl<float, allocator<float>>::_Push_back(float const &)
                                       12
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                       12
     _Vector_impl<float, allocator<float>>::_Tidy()
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                       24
     _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
                                       24
     _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
                                       24
     _Vector_impl<float, allocator<float>>::_Vector_impl()
                                        8
     _Vector_impl<float, allocator<float>>::capacity() const
                                        8
     _Vector_impl<float, allocator<float>>::size() const
                                        8
     _Vector_value<allocator<void>>::_Bcapacity() const
                                       12
     _Vector_value<allocator<void>>::_Bend() const
                                        0
     _Vector_value<allocator<void>>::_Bfirst() const
                                        0
     _Vector_value<allocator<void>>::_Blast() const
                                        0
     _Vector_value<allocator<void>>::_Bsize() const
                                       12
     _Vector_value<allocator<void>>::_Capacity<4U>() const
                                        8
     _Vector_value<allocator<void>>::_Size<4U>() const
                                        8
     _Vector_value<allocator<void>>::_ToBptr(void *)
                                        0
     _Vector_value<allocator<void>>::_Vector_value()
                                        8
     _Vector_value<allocator<void>>::_Xlen() const
                                        0
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0
     allocator<float>::allocate(unsigned int)
                                       12
     allocator<float>::allocator(allocator<void> const &)
                                        0
     allocator<float>::deallocate(float *, unsigned int)
                                       16
     allocator<float>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     char_traits::length(char const *)
                                        8
     copy_backward(float *, float *, float *)
                                       16
     operator+(string const &, string const &)
                                       44
     string::append(char const *)      12
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(char const *)
                                       12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8
     vector<float>::begin()             0
     vector<float>::clear()             8
     vector<float>::empty() const       8
     vector<float>::operator[](unsigned int)
                                       16
     vector<float>::push_back(float)
                                       12
     vector<float>::size() const        8
     vector<float>::vector()            8
     vector<float>::~vector()           8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_traits::length(char const *)
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
                                       4
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::operator+=(char const *)
                                      32
     string::append(string const &)   48
     string::append(char const *)     44
     string::assign(string const &)   48
     _Backward_copier<float, true>::_Copy(float const *, float const *, float *)
                                      40
     _Copy_backward_opt(float const *, float const *, float *)
                                      40
     _Copy_backward_opt(float *, float *, float *)
                                      40
     copy_backward(float *, float *, float *)
                                      40
     _Allocator<void>::allocate(unsigned int)
                                      24
     _Allocator<void>::deallocate(void *)
                                      24
     allocator<float>::allocator(allocator<void> const &)
                                       4
     allocator<float>::deallocate(float *, unsigned int)
                                      32
     allocator<float>::allocate(unsigned int)
                                      32
     allocator<float>::max_size() const
                                      28
     allocator<void>::allocator()      4
     _Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
                                      40
     _Uninit_copy(float const *, float const *, float *)
                                      40
     _Uninit_copy(float const *, float const *, float *, allocator<float> &)
                                      44
     _Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
                                      48
     _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
                                      32
     _Vector_value<allocator<void>>::_Vector_value()
                                      28
     _Vector_value<allocator<void>>::_Zero()
                                      28
     _Vector_value<allocator<void>>::_ToBptr(void *)
                                       4
     _Vector_value<allocator<void>>::_Bfirst() const
                                       8
     _Vector_value<allocator<void>>::_Blast() const
                                       8
     _Vector_value<allocator<void>>::_Bend() const
                                       8
     _Vector_value<allocator<void>>::_Bsize() const
                                      40
     _Vector_value<allocator<void>>::_Bcapacity() const
                                      40
     _Vector_value<allocator<void>>::_Capacity<4U>() const
                                      28
     _Vector_value<allocator<void>>::_Size<4U>() const
                                      28
     _Vector_value<allocator<void>>::_Xlen() const
                                       4
     _Vector_impl<float, allocator<float>>::_Vector_impl()
                                      28
     _Vector_impl<float, allocator<float>>::_Altyval() const
                                      52
     _Vector_impl<float, allocator<float>>::_EraseAll()
                                      60
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                     112
     _Vector_impl<float, allocator<float>>::_Tidy()
                                      32
     _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
                                       4
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      40
     _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
                                      56
     _Vector_impl<float, allocator<float>>::_Push_back(float const &)
                                      32
     _Vector_impl<float, allocator<float>>::_Mytyfirst() const
                                       8
     _Vector_impl<float, allocator<float>>::_Mytylast() const
                                       8
     _Vector_impl<float, allocator<float>>::_Mytyend() const
                                       8
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     392
     _Vector_impl<float, allocator<float>>::size() const
                                      24
     _Vector_impl<float, allocator<float>>::capacity() const
                                      24
     _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
                                     104
     _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
                                      68
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      96
     _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
                                      84
     _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
                                      80
     vector<float>::vector()          36
     vector<float>::~vector()         24
     vector<float>::begin()            8
     vector<float>::size() const      24
     vector<float>::empty() const     44
     vector<float>::operator[](unsigned int)
                                      36
     vector<float>::push_back(float)
                                      32
     vector<float>::clear()           24
     operator+(string const &, string const &)
                                      72
     AnsiString::~AnsiString()        16
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIFloatSensor_mA::AIFloatSensor_mA()
                                      96
     AIFloatSensor_mA::~AIFloatSensor_mA()
                                      80
     AIFloatSensor_mA::MakeConfigString(int)
                                     884
     AIFloatSensor_mA::LoadConfigString(TSNConfigString &)
                                     908
     AIFloatSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                     404
     AIFloatSensor_mA::GetValue(int, int, float &, int &, int &)
                                     204
     AIFloatSensor_mA::GetStringValue(int, int, AnsiString &)
                                     120
     AIFloatSensor_mA::PutFloatValue(int, float)
                                      40
     AIFloatSensor_mA::Calculate()    76
     AIFloatSensor_mA::Get_Percent(float)
                                     184
     AIFloatSensor_mA::Get_Level(float)
                                      64
     ?<Constant "Float sensor">       16
     ?<Constant ", for ">              8
     ?<Constant ":\n">                 3
     ?<Constant {(0.0F), (100.0F)}>    8
     ?<Constant {(4.0F), (20.0F)}>     8
     __sti__routine()                208
     AIFloatSensor_mA::new AIFloatSensor_mA()
                                      40
     ??DataTable1                      4
     ??DataTable5                      4
      Others                        1572

 
 7 620 bytes in segment CODE
   179 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 3 320 bytes of CODE  memory (+ 4 316 bytes shared)
   179 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
