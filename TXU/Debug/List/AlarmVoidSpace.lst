##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmVoidSpace.Cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmVoidSpace.Cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmVoidSpace.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmVoidSpace.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmVoidSpace.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmVoidSpace::~AlarmVoidSpace()
   \                     `?~AlarmVoidSpace`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmVoidSpace_1`
   \   00000014   0100000A           BEQ      `?~AlarmVoidSpace_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmVoidSpace_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmVoidSpace_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmVoidSpace_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmVoidSpace::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmVoidSpace::AlarmVoidSpace(PRogramObjectBase *PROPtr,float Lim, bool Lock):AlarmBasic(PROPtr)
   \                     ??AlarmVoidSpace:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     12          {
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   60009FE5           LDR      R0,??AlarmVoidSpace_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer      = PROPtr;
     14          	PROVoidSpacePtr =(PROVoidSpace*)PROPtr;
     15          
     16          	Locked              = Lock;
     17          	Limit               = Lim;
     18          	NumberOfAlarmSettings++;
   \   00000020   5C009FE5           LDR      R0,??AlarmVoidSpace_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   C45084E5           STR      R5,[R4, #+196]
   \   00000028   EC5084E5           STR      R5,[R4, #+236]
   \   0000002C   E870C4E5           STRB     R7,[R4, #+232]
   \   00000030   E46084E5           STR      R6,[R4, #+228]
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
     19          	IDNumber            =  (ID_AL_VOIDSPACE << 16)+NumberOfAlarmSettings;
   \   00000040   8006A0E3           MOV      R0,#+134217728
   \   00000044   F90780E3           ORR      R0,R0,#0x3E40000
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   9C0084E5           STR      R0,[R4, #+156]
     20          	Type                = ID_AL_VOIDSPACE;
   \   00000050   E400A0E3           MOV      R0,#+228
   \   00000054   B00E80E3           ORR      R0,R0,#0xB00
   \   00000058   A00084E5           STR      R0,[R4, #+160]
     21          	Deadband            = 0.1;
   \   0000005C   24009FE5           LDR      R0,??AlarmVoidSpace_1+0x8  ;; 0x3dcccccd
   \   00000060   BC0084E5           STR      R0,[R4, #+188]
     22          	MessageKey          = L_WORD648; // Leakage
   \   00000064   A20FA0E3           MOV      R0,#+648
   \   00000068   B80084E5           STR      R0,[R4, #+184]
     23          	TPCMessageKey       = L_WORD649; // Leak
   \   0000006C   010080E3           ORR      R0,R0,#0x1
   \   00000070   B40084E5           STR      R0,[R4, #+180]
     24          }
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   F040BDE8           POP      {R4-R7,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmVoidSpace_1:
   \   00000080   ........           DC32     ??__vtbl
   \   00000084   ........           DC32     ??NumberOfAlarmSettings
   \   00000088   CDCCCC3D           DC32     0x3dcccccd
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          void AlarmVoidSpace::Check(void)
     27          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     28          	int Status = AL_STAT_IN_DEADBAND;
     29          	if ( PROVoidSpacePtr->HasLevelSensors ) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   3212D0E5           LDRB     R1,[R0, #+562]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0900000A           BEQ      ??Check_1
     30          		float Level = PROVoidSpacePtr->Level;
   \   0000001C   A46290E5           LDR      R6,[R0, #+676]
     31          		if ( Level < Limit - Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC1094E5           LDR      R1,[R4, #+188]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     __fLess,??__fLess??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??Check_2
     32          			Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000044   0050A0E3           MOV      R5,#+0
   \   00000048   040000EA           B        ??Check_3
     33          		} else if ( Level >= Limit ) {
   \                     ??Check_2:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     34          			Status = AL_STAT_IN_ALARM;
   \   0000005C   0150A013           MOVNE    R5,#+1
     35          		}
     36          	} else {
     37          		Status = AL_STAT_IN_NORMAL;
     38          	}
     39          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     40          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     41          
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the librarian for input
     45          //
     46          ///////////////////////////////////////////////////////////////
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          int AlarmVoidSpace::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     49          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C90DDE5           LDRB     R9,[SP, #+92]
   \   0000000C   60809DE5           LDR      R8,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     50          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
     51          	switch ( ValueId ) {
   \   0000002C   3210A0E3           MOV      R1,#+50
   \   00000030   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   2100001A           BNE      ??PutValue_2
     52          		case SVT_AL_LIMIT:
     53          			Limit = ConvertToSi(NewValue, ValUnitId=LENGTH_UNIT, Status,0.0 ,PROVoidSpacePtr->DBotUllRefPnt,Limit);
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   08008DE2           ADD      R0,SP,#+8
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   04019FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   08008DE2           ADD      R0,SP,#+8
   \   00000068   ........           _BLF     ??assign,??assign??rA
   \   0000006C   E40094E5           LDR      R0,[R4, #+228]
   \   00000070   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   EC0094E5           LDR      R0,[R4, #+236]
   \   0000007C   500290E5           LDR      R0,[R0, #+592]
   \   00000080   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000084   03002DE9           PUSH     {R0,R1}
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   0010A0E1           MOV      R1,R0
   \   00000090   03002DE9           PUSH     {R0,R1}
   \   00000094   18208DE2           ADD      R2,SP,#+24
   \   00000098   20008DE2           ADD      R0,SP,#+32
   \   0000009C   0800BDE8           POP      {R3}
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000A8   E40084E5           STR      R0,[R4, #+228]
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   1C008DE2           ADD      R0,SP,#+28
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   14D08DE2           ADD      SP,SP,#+20
   \   000000C0   170000EA           B        ??PutValue_4
     54          			break;
     55          		default:
     56          			Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_2:
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   84009FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   003090E5           LDR      R3,[R0, #+0]
   \   000000E0   0710A0E1           MOV      R1,R7
   \   000000E4   24008DE2           ADD      R0,SP,#+36
   \   000000E8   ........           _BLF     ??assign,??assign??rA
   \   000000EC   04008DE2           ADD      R0,SP,#+4
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   00022DE9           PUSH     {R9}
   \   000000F8   2C308DE2           ADD      R3,SP,#+44
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   0510A0E1           MOV      R1,R5
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000010C   08008DE5           STR      R0,[SP, #+8]
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   2C008DE2           ADD      R0,SP,#+44
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000120   08D08DE2           ADD      SP,SP,#+8
     57          			break;
     58          	}
     59          	if ( Status==E_NO_ERR ) {
   \                     ??PutValue_4:
   \   00000124   00009DE5           LDR      R0,[SP, #+0]
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0400001A           BNE      ??PutValue_5
     60          		SetModifiedFlag();
   \   00000130   A41094E5           LDR      R1,[R4, #+164]
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   541091E5           LDR      R1,[R1, #+84]
   \   0000013C   0FE0A0E1           MOV      LR,PC
   \   00000140   11FF2FE1           BX       R1
     61          	}
     62          	if (UnitId) {
   \                     ??PutValue_5:
   \   00000144   000058E3           CMP      R8,#+0
     63          		*UnitId = ValUnitId;
   \   00000148   04009D15           LDRNE    R0,[SP, #+4]
   \   0000014C   00008815           STRNE    R0,[R8, #+0]
     64          	}
     65          	return(Status);
   \   00000150   00009DE5           LDR      R0,[SP, #+0]
   \   00000154   40D08DE2           ADD      SP,SP,#+64
   \   00000158   F043BDE8           POP      {R4-R9,LR}
   \   0000015C   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_3:
   \   00000160   ........           DC32     ??npos
     66          }
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          int  AlarmVoidSpace::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     69          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     70          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     71          	switch ( ValueId ) {
   \   00000010   0160A0E3           MOV      R6,#+1
   \   00000014   0270A0E3           MOV      R7,#+2
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     72          		case SVT_AL_LIMIT:
     73          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000083E5           STR      R0,[R3, #+0]
     74          			DecPnt     = 2;
   \   00000040   007084E5           STR      R7,[R4, #+0]
     75          			Unit       = LENGTH_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
   \   00000048   070000EA           B        ??GetValue_6
     76          			break;
     77          		case SVT_AL_VALUE:
     78          			MyRetValue = PROVoidSpacePtr->Level;
   \                     ??GetValue_7:
   \   0000004C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000050   A40290E5           LDR      R0,[R0, #+676]
   \   00000054   F8FFFFEA           B        ??GetValue_5
     79          			DecPnt     = 2;
     80          			Unit       = LENGTH_UNIT;
     81          			break;
     82          		default:
     83          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   20002DE9           PUSH     {R5}
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000064   00C0A0E1           MOV      R12,R0
   \   00000068   08D08DE2           ADD      SP,SP,#+8
     84          			break;
     85          	}
     86          	return(Status);
   \                     ??GetValue_6:
   \   0000006C   F043BDE8           POP      {R4-R9,LR}
   \   00000070   0C00A0E1           MOV      R0,R12
   \   00000074   1EFF2FE1           BX       LR               ;; return
     87          }
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          int AlarmVoidSpace::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     90          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     91          	int Status = GETVAL_NO_ERR;
     92          	//switch ( ValueId ) {
     93          	//	default:
     94          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     95          	//		break;
     96          	//}
     97          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
     98          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          int AlarmVoidSpace::PutFloatValue( int ValueId, float NewValue)
    101          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    102          	int Status= E_NO_ERR;
    103          	//switch ( ValueId ) {
    104          	//   default:
    105          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    106          	//     break;
    107          	//}
    108          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
    109          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmVoidSpace &AlarmVoidSpace::new AlarmVoidSpace(PRogramObjectBase *, float, bool)
   \                     `??new AlarmVoidSpace`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmVoidSpace_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmVoidSpace
   \                     `??new AlarmVoidSpace_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    110          
    111          
    112          
    113          
    114          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmVoidSpace::AlarmVoidSpace(PRogramObjectBase *, float, bool)
                                       20
     AlarmVoidSpace::Check()           24
     AlarmVoidSpace::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmVoidSpace::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmVoidSpace::PutFloatValue(int, float)
                                        4
     AlarmVoidSpace::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmVoidSpace::new AlarmVoidSpace(PRogramObjectBase *, float, bool)
                                       16
     AlarmVoidSpace::~AlarmVoidSpace()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmVoidSpace::~AlarmVoidSpace()
                                      56
     AlarmVoidSpace::NumberOfAlarmSettings
                                       4
     AlarmVoidSpace::AlarmVoidSpace(PRogramObjectBase *, float, bool)
                                     140
     AlarmVoidSpace::Check()         116
     AlarmVoidSpace::PutValue(int, int, AnsiString, bool, int *)
                                     356
     AlarmVoidSpace::GetValue(int, int, float &, int &, int &)
                                     120
     AlarmVoidSpace::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AlarmVoidSpace::PutFloatValue(int, float)
                                       8
     AlarmVoidSpace::new AlarmVoidSpace(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         356

 
 1 100 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 824 bytes of CODE  memory (+ 292 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
