##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNUart.cpp                     #
#    Command line    =  D:\S2Prog\Shared\Src\TSNUart.cpp --fpu None -D       #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNUart.lst                 #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNUart.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNUart.cpp
      1          #ifdef ANBOOTLOADER
      2              #include "RTOS.h"
      3              #include "ANPro10Inc.h"
      4          #else
      5              #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_6  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_6:
   \   0000003C   ........           DC32     ??npos
      6              #pragma hdrstop
      7          #endif
      8          //---------------------------------------------------------------------------
      9          #define  TX_DELAY       50
     10          

   \                                 In segment DATA_Z, align 4, align-sorted
     11          TSNUart *TSNUart::Channels[MAX_COM_PORTS] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };
   \                     ??Channels:
   \   00000000                      DS8 28
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          TSNUart::TSNUart(int PortNum, unsigned BdRate, unsigned WrdLength, unsigned StpBits, char Prty, unsigned BufSize, int Dev, int HWProt, int SWProt, bool IsMstr, int MaxTimeChar, bool Relax, int LogP, int LogE) {
   \                     ??TSNUart:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   3C809DE5           LDR      R8,[SP, #+60]
   \   00000008   40909DE5           LDR      R9,[SP, #+64]
   \   0000000C   44A09DE5           LDR      R10,[SP, #+68]
   \   00000010   48B0DDE5           LDRB     R11,[SP, #+72]
   \   00000014   4C509DE5           LDR      R5,[SP, #+76]
   \   00000018   54609DE5           LDR      R6,[SP, #+84]
   \   0000001C   58709DE5           LDR      R7,[SP, #+88]
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000028   DC0084E5           STR      R0,[R4, #+220]
   \   0000002C   840084E2           ADD      R0,R4,#+132
   \   00000030   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     14              PortNumber              = PortNum;
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
     15              BaudRate                = BdRate;
     16              WordLength              = WrdLength;
     17              StopBits                = StpBits;
     18              Parity                  = Prty;
     19              BufferSize              = BufSize;
     20              IsMaster                = IsMstr;
     21              Device                  = Dev;
     22              HWProtocol              = HWProt;
     23              SWProtocol              = SWProt;
     24              Delay                   = 0;
     25              Relaxed                 = false;
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   800084E5           STR      R0,[R4, #+128]
   \   00000040   04009DE5           LDR      R0,[SP, #+4]
     26              TimeOut                 = 0;
     27              MaxTimeBetweenChar      = MaxTimeChar;
     28              LogTime                 = LogP;
     29              LogEntries              = LogE;
     30              ModbusCmdInputStatus    = MBUS_CMD_READ_COIL_STATUS;
     31              ModbusCmdInputRegister  = MBUS_CMD_READ_INPUT_REGISTER;
     32              RxTimeOut       		= 0;
     33              switch (Device) {
   \   00000044   612048E2           SUB      R2,R8,#+97
   \   00000048   AC0084E5           STR      R0,[R4, #+172]
   \   0000004C   08009DE5           LDR      R0,[SP, #+8]
   \   00000050   7C2D42E2           SUB      R2,R2,#+7936
   \   00000054   B00084E5           STR      R0,[R4, #+176]
   \   00000058   30009DE5           LDR      R0,[SP, #+48]
   \   0000005C   110052E3           CMP      R2,#+17
   \   00000060   B40084E5           STR      R0,[R4, #+180]
   \   00000064   3400DDE5           LDRB     R0,[SP, #+52]
   \   00000068   C000C4E5           STRB     R0,[R4, #+192]
   \   0000006C   38009DE5           LDR      R0,[SP, #+56]
   \   00000070   180084E5           STR      R0,[R4, #+24]
   \   00000074   30B0C4E5           STRB     R11,[R4, #+48]
   \   00000078   A88084E5           STR      R8,[R4, #+168]
   \   0000007C   A09084E5           STR      R9,[R4, #+160]
   \   00000080   A4A084E5           STR      R10,[R4, #+164]
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   4C0084E5           STR      R0,[R4, #+76]
   \   0000008C   5810C4E5           STRB     R1,[R4, #+88]
   \   00000090   500084E5           STR      R0,[R4, #+80]
   \   00000094   545084E5           STR      R5,[R4, #+84]
   \   00000098   606084E5           STR      R6,[R4, #+96]
   \   0000009C   647084E5           STR      R7,[R4, #+100]
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   680084E5           STR      R0,[R4, #+104]
   \   000000A8   0400A0E3           MOV      R0,#+4
   \   000000AC   1200008A           BHI      ??TSNUart_3
   \   000000B0   013F8FE2           ADR      R3,??TSNUart_1
   \   000000B4   0230D3E7           LDRB     R3,[R3, R2]
   \   000000B8   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??TSNUart_1:
   \   000000BC   0604060F           DC8      +6,+4,+6,+15
   \   000000C0   0F09090F           DC8      +15,+9,+9,+15
   \   000000C4   0B0F0F0F           DC8      +11,+15,+15,+15
   \   000000C8   0F0F0F0F           DC8      +15,+15,+15,+15
   \   000000CC   0F0D0000           DC8      +15,+13,+0,+0
     34              case C_UART_DEVICE_PC     :
     35                  RxTimeOut       = 5 * 60000;
   \                     ??TSNUart_4:
   \   000000D0   491AA0E3           MOV      R1,#+299008
   \   000000D4   F81F81E3           ORR      R1,R1,#0x3E0
     36                  BaudRate = DEFAULT_BAUDRATE;
     37                  break;
     38              case C_UART_DEVICE_TDU    :
     39                  BaudRate = DEFAULT_BAUDRATE;
   \                     ??TSNUart_5:
   \   000000D8   402BA0E3           MOV      R2,#+65536
   \   000000DC   C22C82E3           ORR      R2,R2,#0xC200
   \   000000E0   040000EA           B        ??TSNUart_6
     40                  break;
     41              case C_UART_DEVICE_TCU    :
     42                  BaudRate = DEFAULT_BAUDRATE;
     43                  break;
     44              case C_UART_DEVICE_ANPRO3 :
     45              case C_UART_DEVICE_ANPRO10:
     46              case C_UART_DEVICE_SAAB   :
     47                  break;
     48              case C_UART_DEVICE_ZB     :
     49              case C_UART_DEVICE_ZB_RED :
     50                  BaudRate = 38400;
   \                     ??TSNUart_7:
   \   000000E4   962CA0E3           MOV      R2,#+38400
   \   000000E8   020000EA           B        ??TSNUart_6
     51                  break;
     52              case C_UART_DEVICE_MODICON_MASTER_TCP   :
     53              case C_UART_DEVICE_MODICON_SLAVE_TCP    :
     54              case C_UART_DEVICE_MODICON_MASTER       :
     55              case C_UART_DEVICE_MODICON_SLAVE        :
     56              case C_UART_DEVICE_MODBUS_MASTER        :
     57              case C_UART_DEVICE_MODBUS_SLAVE         :
     58              case C_UART_DEVICE_MODBUS_SLAVE_INV     :
     59              case C_UART_DEVICE_MODBUS_SLAVE_TCP     :
     60                  break;
     61              case C_UART_DEVICE_MODBUS_MASTER_INV:
     62                  ModbusCmdInputRegister = MBUS_CMD_READ_HOLDING_REGISTER;
   \                     ??TSNUart_8:
   \   000000EC   0300A0E3           MOV      R0,#+3
   \   000000F0   010000EA           B        ??TSNUart_3
     63                  break;
     64              case C_UART_DEVICE_TPC:
     65                  BaudRate = 9600;
   \                     ??TSNUart_9:
   \   000000F4   962DA0E3           MOV      R2,#+9600
   \                     ??TSNUart_6:
   \   000000F8   AC2084E5           STR      R2,[R4, #+172]
   \                     ??TSNUart_3:
   \   000000FC   6C0084E5           STR      R0,[R4, #+108]
   \   00000100   341084E5           STR      R1,[R4, #+52]
     66                  break;
     67              }
     68              Initiate();
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           BL       ??Initiate
     69              //TSNUart::Channels[PortNumber] = this;
     70          }
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   FE4FBDE8           POP      {R1-R11,LR}
   \   00000114   1EFF2FE1           BX       LR               ;; return
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          TSNUart::TSNUart(void) {
   \                     ??TSNUart_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   0000000C   DC0084E5           STR      R0,[R4, #+220]
   \   00000010   840084E2           ADD      R0,R4,#+132
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     73          #if defined (ANWIN) || defined(ANFLASH)
     74              BufferSize      = 10 * 64 * 1024;
     75          #else
     76              BufferSize      = 32 * 1024;
   \   00000018   800CA0E3           MOV      R0,#+32768
   \   0000001C   180084E5           STR      R0,[R4, #+24]
     77          #endif
     78              PortNumber         = 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   800084E5           STR      R0,[R4, #+128]
     79              BaudRate           = 9600;
   \   00000028   961DA0E3           MOV      R1,#+9600
   \   0000002C   AC1084E5           STR      R1,[R4, #+172]
     80              WordLength         = 8;
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   B01084E5           STR      R1,[R4, #+176]
     81              StopBits           = 1;
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   B41084E5           STR      R1,[R4, #+180]
     82              Parity             = 'N';
   \   00000040   4E10A0E3           MOV      R1,#+78
   \   00000044   C010C4E5           STRB     R1,[R4, #+192]
     83              IsMaster           = false;
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   3010C4E5           STRB     R1,[R4, #+48]
     84              Device             = C_UART_DEVICE_PC;
   \   00000050   6210A0E3           MOV      R1,#+98
   \   00000054   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000058   A81084E5           STR      R1,[R4, #+168]
     85              HWProtocol         = C_UART_HWPRO;
   \   0000005C   181041E2           SUB      R1,R1,#+24
   \   00000060   A01084E5           STR      R1,[R4, #+160]
     86              SWProtocol         = C_UART_SWPRO;
   \   00000064   0A1081E2           ADD      R1,R1,#+10
   \   00000068   A41084E5           STR      R1,[R4, #+164]
     87              LogTime            = 0;
   \   0000006C   600084E5           STR      R0,[R4, #+96]
     88              LogEntries         = 0;
   \   00000070   640084E5           STR      R0,[R4, #+100]
     89          
     90              Delay              = 0;
   \   00000074   4C0084E5           STR      R0,[R4, #+76]
     91              Relaxed            = false;
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   5810C4E5           STRB     R1,[R4, #+88]
     92              TimeOut            = 0;
   \   00000080   500084E5           STR      R0,[R4, #+80]
     93              MaxTimeBetweenChar = 0;
   \   00000084   540084E5           STR      R0,[R4, #+84]
     94              Initiate();
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       ??Initiate
     95          }
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094                      REQUIRE ?Subroutine30
   \   00000094                      ;; // Fall through to label ?Subroutine30

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          TSNUart::~TSNUart(void) {
   \                     `?~TSNUart`:
   \   00000000   00402DE9           PUSH     {LR}
     98          }
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   840080E2           ADD      R0,R0,#+132
   \   00000010   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000014                      REQUIRE ?Subroutine32
   \   00000014                      ;; // Fall through to label ?Subroutine32

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          void TSNUart::Initiate(void) {
    101              RxCnt               = 0;
   \                     ??Initiate:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   BC1080E5           STR      R1,[R0, #+188]
    102              TxCnt               = 0;
   \   00000008   B81080E5           STR      R1,[R0, #+184]
    103              RxByteCnt           = 0;
   \   0000000C   CC1080E5           STR      R1,[R0, #+204]
    104              TxByteCnt           = 0;
   \   00000010   D01080E5           STR      R1,[R0, #+208]
    105              RxBytePerSecond     = 0;
   \   00000014   D41080E5           STR      R1,[R0, #+212]
    106              TxBytePerSecond     = 0;
   \   00000018   D81080E5           STR      R1,[R0, #+216]
    107              TxTaskPtr           = NULL;
   \   0000001C   3C1080E5           STR      R1,[R0, #+60]
    108              SystemMatch         = false;   // EHSMark, must be fixed. What if multiple TDUs
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   C220C0E5           STRB     R2,[R0, #+194]
    109              RxFIFOSize          = 1;
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   202080E5           STR      R2,[R0, #+32]
    110              TxFIFOSize          = 1;
   \   00000030   1C2080E5           STR      R2,[R0, #+28]
    111              EventMask           = 0;
    112              TxDataPtr           = NULL;
    113              TxDataPos           = 0;
    114              TxDataSize          = 0;
    115          #ifdef S2TXU
    116              LastRxTime          = (int)OS_Time;
   \   00000034   ........           LDR      R2,??DataTable2  ;; OS_Time
   \   00000038   3810C0E5           STRB     R1,[R0, #+56]
   \   0000003C   281080E5           STR      R1,[R0, #+40]
   \   00000040   401080E5           STR      R1,[R0, #+64]
   \   00000044   2C1080E5           STR      R1,[R0, #+44]
   \   00000048   002092E5           LDR      R2,[R2, #+0]
   \   0000004C   482080E5           STR      R2,[R0, #+72]
    117          #else
    118              LastRxTime          = 0;
    119          #endif
    120              TxRequest           = false;
   \   00000050   0120A0E1           MOV      R2,R1
   \   00000054   4520C0E5           STRB     R2,[R0, #+69]
    121              ProtocolState       = pNew_Sync;
   \   00000058   0420A0E3           MOV      R2,#+4
   \   0000005C   4420C0E5           STRB     R2,[R0, #+68]
    122              TransactionNumber   = 0;
   \   00000060   5C1080E5           STR      R1,[R0, #+92]
    123          }
   \   00000064   1EFF2FE1           BX       LR               ;; return
    124          // Dummy function, never used

   \                                 In segment CODE, align 4, keep-with-next
    125          void TSNUart::EnableInt(void) {
    126          
    127          }
   \                     ??EnableInt:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    128          /*******************************************************************************
    129          *
    130          * Tsn16550IntWr - handle a transmitter interrupt
    131          *
    132          * This routine handles write interrupts from the UART. It reads a character
    133          * and puts it in the transmit holding register of the device for transfer.
    134          *
    135          * If there are no more characters to transmit, transmission is disabled by
    136          * clearing the transmit interrupt enable bit in the IER(int enable register).
    137          *
    138          * RETURNS: N/A
    139          *
    140          */
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          void TSNUart::Transmit(void) {
    143          }
   \                     ??Transmit:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          void TSNUart::ActivateTx(void) {
    146          }
   \                     ??ActivateTx:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    147          

   \                                 In segment CODE, align 4, keep-with-next
    148          void TSNUart::DeactivateTx(void) {
    149          }
   \                     ??DeactivateTx:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          void TSNUart::ActivateIfTxRequest(void) {
   \                     ??ActivateIfTxRequest:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    152              if (TxRequest) {
   \   00000008   4500D4E5           LDRB     R0,[R4, #+69]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1500000A           BEQ      ??ActivateIfTxRequest_1
    153                  int RetryCnt = 0;
   \   00000014   0050A0E3           MOV      R5,#+0
    154                  bool CanSend = false;
    155                  do {
    156                      TSN_Delay(5 * CurrentDeviceAddress);   // Was 2
   \                     ??ActivateIfTxRequest_2:
   \   00000018   54009FE5           LDR      R0,??ActivateIfTxRequest_3  ;; CurrentDeviceAddress
   \   0000001C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000020   000180E0           ADD      R0,R0,R0, LSL #+2
   \   00000024   ........           _BLF     OS_Delay,??OS_Delay??rA
    157                      switch (ProtocolState) {
   \   00000028   4400D4E5           LDRB     R0,[R4, #+68]
   \   0000002C   010050E2           SUBS     R0,R0,#+1
   \   00000030   0200000A           BEQ      ??ActivateIfTxRequest_4
   \   00000034   040040E2           SUB      R0,R0,#+4
   \   00000038   020050E3           CMP      R0,#+2
   \   0000003C   0300008A           BHI      ??ActivateIfTxRequest_5
    158                      case pData:
    159                      case pHeading:
    160                      case pInRx:
    161                      case pSync:
    162                          CanSend = false;
   \                     ??ActivateIfTxRequest_4:
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   015080E2           ADD      R5,R0,#+1
   \   00000048   030050E3           CMP      R0,#+3
   \   0000004C   F1FFFFBA           BLT      ??ActivateIfTxRequest_2
    163                          break;
    164                      default:
    165                          CanSend = true;
    166                          break;
    167                      }
    168                  }while (!CanSend && RetryCnt++ < 3);
    169                  TxRequest   = false;
   \                     ??ActivateIfTxRequest_5:
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   4500C4E5           STRB     R0,[R4, #+69]
    170                  ActivateTx();
   \   00000058   DC1094E5           LDR      R1,[R4, #+220]
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   141091E5           LDR      R1,[R1, #+20]
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   11FF2FE1           BX       R1
    171              }
    172          }
   \                     ??ActivateIfTxRequest_1:
   \   0000006C   3040BDE8           POP      {R4,R5,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??ActivateIfTxRequest_3:
   \   00000074   ........           DC32     CurrentDeviceAddress
    173          
    174          /*******************************************************************************
    175          *
    176          * Tsn16550IntRd - handle a  receiver interrupt
    177          *
    178          * This routine handles read interrupts from the UART.
    179          *
    180          * RETURNS: N/A
    181          *
    182          */
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          void TSNUart::Receive(void) {
    185          }
   \                     ??Receive_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    186          

   \                                 In segment CODE, align 4, keep-with-next
    187          void TSNUart::ClearRxBuffer(void) {
    188          
    189          }
   \                     ??ClearRxBuffer:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    190          
    191          /*******************************************************************************
    192          *
    193          * Tsn16550Int - handle a receiver/transmitter interrupt
    194          *
    195          * This routine handles four sources of interrupts from the UART. They are
    196          * prioritized in the following order by the Interrupt Identification Register:
    197          * Receiver Line Status, Received Data Ready, Transmit Holding Register Empty
    198          * and Modem Status.
    199          *
    200          * If there is another character to be transmitted, it sends it.  If
    201          * not, or if a device has never been created for this channel, just
    202          * disable the interrupt.
    203          * When a modem status interrupt occurs, the transmit interrupt is enabled if
    204          * the CTS signal is TRUE.
    205          *
    206          * RETURNS: N/A
    207          */
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          void TSNUart::HandleInterrupt(void) {
    210          }
   \                     ??HandleInterrupt:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    211          

   \                                 In segment CODE, align 4, keep-with-next
    212          bool TSNUart::Send(U8 *MyData, int Size, char EventMsk, bool Wait) {
    213              return (false);
   \                     ??Send:
   \   00000000   ........           B        ?Subroutine33
    214          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    215          
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          bool TSNUart::Receive(U8 *MyData, int Size, int TimeOut) {
    218          
    219          //  return(bool)!OS_GetMailTimed(&RxBuf,(char*)MyData,TimeOut);
    220              return (false);
   \                     ??Receive:
   \   00000000                      REQUIRE ?Subroutine33
   \   00000000                      ;; // Fall through to label ?Subroutine33
    221          }
    222          

   \                                 In segment CODE, align 4, keep-with-next
    223          void TSNUart::SetTaskPtr(TSN_TASK *TaskPtr) {
    224              TxTaskPtr = TaskPtr;
   \                     ??SetTaskPtr:
   \   00000000   3C1080E5           STR      R1,[R0, #+60]
    225          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          TSN_TASK* TSNUart::GetTaskPtr(void) {
    228              return ((TSN_TASK *)TxTaskPtr);
   \                     ??GetTaskPtr:
   \   00000000   3C0090E5           LDR      R0,[R0, #+60]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    229          }
    230          

   \                                 In segment CODE, align 4, keep-with-next
    231          void TSNUart::SetProtocolState(ComState PState) {
    232              ProtocolState = PState;
   \                     ??SetProtocolState:
   \   00000000   4410C0E5           STRB     R1,[R0, #+68]
    233          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    234          
    235          
    236          /*
    237          bool TSNUart::Configurate(int Key)
    238          {
    239              return true;
    240          }
    241          */
    242          /*
    243              This is required because object are not konwn in ISR
    244          */
    245          extern "C"
    246          {

   \                                 In segment CODE, align 4, keep-with-next
    247          void HandleUARTInterrupt(int Port) {
   \                     HandleUARTInterrupt:
   \   00000000   24109FE5           LDR      R1,??HandleUARTInterrupt_0  ;; ??Channels
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0400000A           BEQ      ??HandleUARTInterrupt_1
    248              if (TSNUart::Channels[Port]) {
    249                  TSNUart::Channels[Port]->HandleInterrupt();
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   DC1091E5           LDR      R1,[R1, #+220]
   \   0000001C   201091E5           LDR      R1,[R1, #+32]
   \   00000020   0FE0A0E1           MOV      LR,PC
   \   00000024   11FF2FE1           BX       R1
    250              }
    251          }
   \                     ??HandleUARTInterrupt_1:
   \   00000028   ........           B        ?Subroutine32
   \                     ??HandleUARTInterrupt_0:
   \   0000002C   ........           DC32     ??Channels
    252          }
    253          
    254          ///////////////////////////////////////////////////////////////////
    255          ///////////////////////////////////////////////////////////////////
    256          //
    257          //  Not used in bootloader
    258          //
    259          ///////////////////////////////////////////////////////////////////
    260          ///////////////////////////////////////////////////////////////////
    261          #ifndef ANBOOTLOADER
    262          
    263          ///////////////////////////////////////////////////////////////
    264          //
    265          // Routines for the Configuration
    266          //
    267          ///////////////////////////////////////////////////////////////
    268          

   \                                 In segment CODE, align 4, keep-with-next
    269          AnsiString TSNUart::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    270              AnsiString LocalString;
    271              LocalString += TabStr1 + KeyWord(C_UART) + CrLfStr;
   \   00000004   1C6D9FE5           LDR      R6,??MakeConfigString_1  ;; TabStr1
   \   00000008   1C7D9FE5           LDR      R7,??MakeConfigString_1+0x4  ;; CrLfStr
   \   0000000C   73DF4DE2           SUB      SP,SP,#+460
   \   00000010   40DE4DE2           SUB      SP,SP,#+1024
   \   00000014   0040A0E1           MOV      R4,R0
    272              LocalString += TabStr2 + KeyWord(C_UART_PORTNUMBER) + (AnsiString)PortNumber + CrLfStr;
   \   00000018   109D9FE5           LDR      R9,??MakeConfigString_1+0x8  ;; TabStr2
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000028   7D1DA0E3           MOV      R1,#+8000
   \   0000002C   C4008DE2           ADD      R0,SP,#+196
   \   00000030   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000034   C4208DE2           ADD      R2,SP,#+196
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   A8008DE2           ADD      R0,SP,#+168
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   A8108DE2           ADD      R1,SP,#+168
   \   0000004C   8C008DE2           ADD      R0,SP,#+140
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   D80C9FE5           LDR      R0,??MakeConfigString_1+0xC  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   008090E5           LDR      R8,[R0, #+0]
   \   00000060   8C108DE2           ADD      R1,SP,#+140
   \   00000064   0830A0E1           MOV      R3,R8
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   8C008DE2           ADD      R0,SP,#+140
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   A8008DE2           ADD      R0,SP,#+168
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   C4008DE2           ADD      R0,SP,#+196
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A0   801094E5           LDR      R1,[R4, #+128]
   \   000000A4   540E8DE2           ADD      R0,SP,#+1344
   \   000000A8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000AC   00A0A0E1           MOV      R10,R0
   \   000000B0   4210A0E3           MOV      R1,#+66
   \   000000B4   7C1D81E3           ORR      R1,R1,#0x1F00
   \   000000B8   4D0F8DE2           ADD      R0,SP,#+308
   \   000000BC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C0   4D2F8DE2           ADD      R2,SP,#+308
   \   000000C4   0910A0E1           MOV      R1,R9
   \   000000C8   460F8DE2           ADD      R0,SP,#+280
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   0A20A0E1           MOV      R2,R10
   \   000000D4   461F8DE2           ADD      R1,SP,#+280
   \   000000D8   FC008DE2           ADD      R0,SP,#+252
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   0720A0E1           MOV      R2,R7
   \   000000E4   FC108DE2           ADD      R1,SP,#+252
   \   000000E8   E0008DE2           ADD      R0,SP,#+224
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   E0108DE2           ADD      R1,SP,#+224
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   E0008DE2           ADD      R0,SP,#+224
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   FC008DE2           ADD      R0,SP,#+252
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   540E8DE2           ADD      R0,SP,#+1344
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   460F8DE2           ADD      R0,SP,#+280
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
    273              LocalString += TabStr2 + KeyWord(C_UART_BAUDRATE) + (AnsiString)BaudRate + CrLfStr;
   \   00000154   AC1094E5           LDR      R1,[R4, #+172]
   \   00000158   570F8DE2           ADD      R0,SP,#+348
   \   0000015C   400E80E2           ADD      R0,R0,#+1024
   \   00000160   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   00000164   00A0A0E1           MOV      R10,R0
   \   00000168   4310A0E3           MOV      R1,#+67
   \   0000016C   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000170   690F8DE2           ADD      R0,SP,#+420
   \   00000174   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000178   692F8DE2           ADD      R2,SP,#+420
   \   0000017C   0910A0E1           MOV      R1,R9
   \   00000180   620F8DE2           ADD      R0,SP,#+392
   \   00000184   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000188   0A20A0E1           MOV      R2,R10
   \   0000018C   621F8DE2           ADD      R1,SP,#+392
   \   00000190   5B0F8DE2           ADD      R0,SP,#+364
   \   00000194   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000198   0720A0E1           MOV      R2,R7
   \   0000019C   5B1F8DE2           ADD      R1,SP,#+364
   \   000001A0   540F8DE2           ADD      R0,SP,#+336
   \   000001A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001A8   0830A0E1           MOV      R3,R8
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   541F8DE2           ADD      R1,SP,#+336
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   ........           _BLF     ??append,??append??rA
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   540F8DE2           ADD      R0,SP,#+336
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   5B0F8DE2           ADD      R0,SP,#+364
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   570F8DE2           ADD      R0,SP,#+348
   \   000001E8   400E80E2           ADD      R0,R0,#+1024
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   620F8DE2           ADD      R0,SP,#+392
   \   000001FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   690F8DE2           ADD      R0,SP,#+420
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
    274              LocalString += TabStr2 + KeyWord(C_UART_PARITY) + TabStr1 + (AnsiString)Parity + CrLfStr;
   \   00000210   C010D4E5           LDRB     R1,[R4, #+192]
   \   00000214   5E0F8DE2           ADD      R0,SP,#+376
   \   00000218   400E80E2           ADD      R0,R0,#+1024
   \   0000021C   ........           _BLF     ??AnsiString_4,??AnsiString??rA_3
   \   00000220   00A0A0E1           MOV      R10,R0
   \   00000224   4410A0E3           MOV      R1,#+68
   \   00000228   7C1D81E3           ORR      R1,R1,#0x1F00
   \   0000022C   8C0F8DE2           ADD      R0,SP,#+560
   \   00000230   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000234   8C2F8DE2           ADD      R2,SP,#+560
   \   00000238   0910A0E1           MOV      R1,R9
   \   0000023C   850F8DE2           ADD      R0,SP,#+532
   \   00000240   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000244   0620A0E1           MOV      R2,R6
   \   00000248   851F8DE2           ADD      R1,SP,#+532
   \   0000024C   7E0F8DE2           ADD      R0,SP,#+504
   \   00000250   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000254   0A20A0E1           MOV      R2,R10
   \   00000258   7E1F8DE2           ADD      R1,SP,#+504
   \   0000025C   770F8DE2           ADD      R0,SP,#+476
   \   00000260   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000264   0720A0E1           MOV      R2,R7
   \   00000268   771F8DE2           ADD      R1,SP,#+476
   \   0000026C   700F8DE2           ADD      R0,SP,#+448
   \   00000270   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000274   0830A0E1           MOV      R3,R8
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   701F8DE2           ADD      R1,SP,#+448
   \   00000280   0500A0E1           MOV      R0,R5
   \   00000284   ........           _BLF     ??append,??append??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   700F8DE2           ADD      R0,SP,#+448
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   770F8DE2           ADD      R0,SP,#+476
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   5E0F8DE2           ADD      R0,SP,#+376
   \   000002B4   400E80E2           ADD      R0,R0,#+1024
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   7E0F8DE2           ADD      R0,SP,#+504
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   850F8DE2           ADD      R0,SP,#+532
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   8C0F8DE2           ADD      R0,SP,#+560
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
    275              LocalString += TabStr2 + KeyWord(C_UART_STOPBITS) + (AnsiString)StopBits + CrLfStr;
   \   000002EC   B41094E5           LDR      R1,[R4, #+180]
   \   000002F0   650F8DE2           ADD      R0,SP,#+404
   \   000002F4   400E80E2           ADD      R0,R0,#+1024
   \   000002F8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   000002FC   00A0A0E1           MOV      R10,R0
   \   00000300   4510A0E3           MOV      R1,#+69
   \   00000304   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000308   A80F8DE2           ADD      R0,SP,#+672
   \   0000030C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000310   A82F8DE2           ADD      R2,SP,#+672
   \   00000314   0910A0E1           MOV      R1,R9
   \   00000318   A10F8DE2           ADD      R0,SP,#+644
   \   0000031C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000320   0A20A0E1           MOV      R2,R10
   \   00000324   A11F8DE2           ADD      R1,SP,#+644
   \   00000328   9A0F8DE2           ADD      R0,SP,#+616
   \   0000032C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000330   0720A0E1           MOV      R2,R7
   \   00000334   9A1F8DE2           ADD      R1,SP,#+616
   \   00000338   930F8DE2           ADD      R0,SP,#+588
   \   0000033C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000340   0830A0E1           MOV      R3,R8
   \   00000344   0020A0E3           MOV      R2,#+0
   \   00000348   931F8DE2           ADD      R1,SP,#+588
   \   0000034C   0500A0E1           MOV      R0,R5
   \   00000350   ........           _BLF     ??append,??append??rA
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   0110A0E3           MOV      R1,#+1
   \   0000035C   930F8DE2           ADD      R0,SP,#+588
   \   00000360   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   9A0F8DE2           ADD      R0,SP,#+616
   \   00000370   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   650F8DE2           ADD      R0,SP,#+404
   \   00000380   400E80E2           ADD      R0,R0,#+1024
   \   00000384   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000388   0020A0E3           MOV      R2,#+0
   \   0000038C   0110A0E3           MOV      R1,#+1
   \   00000390   A10F8DE2           ADD      R0,SP,#+644
   \   00000394   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0110A0E3           MOV      R1,#+1
   \   000003A0   A80F8DE2           ADD      R0,SP,#+672
   \   000003A4   ........           _BLF     ??_Tidy,??_Tidy??rA
    276              LocalString += TabStr2 + KeyWord(C_UART_WORDLENGTH) + (AnsiString)WordLength + CrLfStr;
   \   000003A8   B01094E5           LDR      R1,[R4, #+176]
   \   000003AC   5B0E8DE2           ADD      R0,SP,#+1456
   \   000003B0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   000003B4   00A0A0E1           MOV      R10,R0
   \   000003B8   4610A0E3           MOV      R1,#+70
   \   000003BC   7C1D81E3           ORR      R1,R1,#0x1F00
   \   000003C0   C40F8DE2           ADD      R0,SP,#+784
   \   000003C4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003C8   C42F8DE2           ADD      R2,SP,#+784
   \   000003CC   0910A0E1           MOV      R1,R9
   \   000003D0   BD0F8DE2           ADD      R0,SP,#+756
   \   000003D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D8   0A20A0E1           MOV      R2,R10
   \   000003DC   BD1F8DE2           ADD      R1,SP,#+756
   \   000003E0   B60F8DE2           ADD      R0,SP,#+728
   \   000003E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E8   0720A0E1           MOV      R2,R7
   \   000003EC   B61F8DE2           ADD      R1,SP,#+728
   \   000003F0   AF0F8DE2           ADD      R0,SP,#+700
   \   000003F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F8   0830A0E1           MOV      R3,R8
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   AF1F8DE2           ADD      R1,SP,#+700
   \   00000404   0500A0E1           MOV      R0,R5
   \   00000408   ........           _BLF     ??append,??append??rA
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0110A0E3           MOV      R1,#+1
   \   00000414   AF0F8DE2           ADD      R0,SP,#+700
   \   00000418   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0110A0E3           MOV      R1,#+1
   \   00000424   B60F8DE2           ADD      R0,SP,#+728
   \   00000428   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000042C   0020A0E3           MOV      R2,#+0
   \   00000430   0110A0E3           MOV      R1,#+1
   \   00000434   5B0E8DE2           ADD      R0,SP,#+1456
   \   00000438   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000043C   0020A0E3           MOV      R2,#+0
   \   00000440   0110A0E3           MOV      R1,#+1
   \   00000444   BD0F8DE2           ADD      R0,SP,#+756
   \   00000448   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0110A0E3           MOV      R1,#+1
   \   00000454   C40F8DE2           ADD      R0,SP,#+784
   \   00000458   ........           _BLF     ??_Tidy,??_Tidy??rA
    277          //  LocalString +=(AnsiString) floorf"\t\t"+KeyWord(C_UART_UARTTYPE)+(AnsiString)UartType+CrLfStr;
    278              LocalString += TabStr2 + KeyWord(C_UART_HWPRO) + KeyWord(HWProtocol) + CrLfStr;
   \   0000045C   A01094E5           LDR      R1,[R4, #+160]
   \   00000460   E70F8DE2           ADD      R0,SP,#+924
   \   00000464   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000468   4A10A0E3           MOV      R1,#+74
   \   0000046C   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000470   E00F8DE2           ADD      R0,SP,#+896
   \   00000474   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000478   E02F8DE2           ADD      R2,SP,#+896
   \   0000047C   0910A0E1           MOV      R1,R9
   \   00000480   D90F8DE2           ADD      R0,SP,#+868
   \   00000484   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000488   E72F8DE2           ADD      R2,SP,#+924
   \   0000048C   D91F8DE2           ADD      R1,SP,#+868
   \   00000490   D20F8DE2           ADD      R0,SP,#+840
   \   00000494   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000498   0720A0E1           MOV      R2,R7
   \   0000049C   D21F8DE2           ADD      R1,SP,#+840
   \   000004A0   CB0F8DE2           ADD      R0,SP,#+812
   \   000004A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A8   0830A0E1           MOV      R3,R8
   \   000004AC   0020A0E3           MOV      R2,#+0
   \   000004B0   CB1F8DE2           ADD      R1,SP,#+812
   \   000004B4   0500A0E1           MOV      R0,R5
   \   000004B8   ........           _BLF     ??append,??append??rA
   \   000004BC   0020A0E3           MOV      R2,#+0
   \   000004C0   0110A0E3           MOV      R1,#+1
   \   000004C4   CB0F8DE2           ADD      R0,SP,#+812
   \   000004C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004CC   0020A0E3           MOV      R2,#+0
   \   000004D0   0110A0E3           MOV      R1,#+1
   \   000004D4   D20F8DE2           ADD      R0,SP,#+840
   \   000004D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004DC   0020A0E3           MOV      R2,#+0
   \   000004E0   0110A0E3           MOV      R1,#+1
   \   000004E4   E70F8DE2           ADD      R0,SP,#+924
   \   000004E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004EC   0020A0E3           MOV      R2,#+0
   \   000004F0   0110A0E3           MOV      R1,#+1
   \   000004F4   D90F8DE2           ADD      R0,SP,#+868
   \   000004F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004FC   0020A0E3           MOV      R2,#+0
   \   00000500   0110A0E3           MOV      R1,#+1
   \   00000504   E00F8DE2           ADD      R0,SP,#+896
   \   00000508   ........           _BLF     ??_Tidy,??_Tidy??rA
    279              LocalString += TabStr2 + KeyWord(C_UART_SWPRO) + KeyWord(SWProtocol) + CrLfStr;
   \   0000050C   A41094E5           LDR      R1,[R4, #+164]
   \   00000510   28008DE2           ADD      R0,SP,#+40
   \   00000514   400E80E2           ADD      R0,R0,#+1024
   \   00000518   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000051C   5410A0E3           MOV      R1,#+84
   \   00000520   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000524   0C008DE2           ADD      R0,SP,#+12
   \   00000528   400E80E2           ADD      R0,R0,#+1024
   \   0000052C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000530   0C208DE2           ADD      R2,SP,#+12
   \   00000534   402E82E2           ADD      R2,R2,#+1024
   \   00000538   0910A0E1           MOV      R1,R9
   \   0000053C   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000540   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000544   28208DE2           ADD      R2,SP,#+40
   \   00000548   402E82E2           ADD      R2,R2,#+1024
   \   0000054C   FC1F8DE2           ADD      R1,SP,#+1008
   \   00000550   F50F8DE2           ADD      R0,SP,#+980
   \   00000554   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000558   0720A0E1           MOV      R2,R7
   \   0000055C   F51F8DE2           ADD      R1,SP,#+980
   \   00000560   EE0F8DE2           ADD      R0,SP,#+952
   \   00000564   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000568   0830A0E1           MOV      R3,R8
   \   0000056C   0020A0E3           MOV      R2,#+0
   \   00000570   EE1F8DE2           ADD      R1,SP,#+952
   \   00000574   0500A0E1           MOV      R0,R5
   \   00000578   ........           _BLF     ??append,??append??rA
   \   0000057C   0020A0E3           MOV      R2,#+0
   \   00000580   0110A0E3           MOV      R1,#+1
   \   00000584   EE0F8DE2           ADD      R0,SP,#+952
   \   00000588   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000058C   0020A0E3           MOV      R2,#+0
   \   00000590   0110A0E3           MOV      R1,#+1
   \   00000594   F50F8DE2           ADD      R0,SP,#+980
   \   00000598   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   28008DE2           ADD      R0,SP,#+40
   \   000005A8   400E80E2           ADD      R0,R0,#+1024
   \   000005AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B0   0020A0E3           MOV      R2,#+0
   \   000005B4   0110A0E3           MOV      R1,#+1
   \   000005B8   FC0F8DE2           ADD      R0,SP,#+1008
   \   000005BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C0   0020A0E3           MOV      R2,#+0
   \   000005C4   0110A0E3           MOV      R1,#+1
   \   000005C8   0C008DE2           ADD      R0,SP,#+12
   \   000005CC   400E80E2           ADD      R0,R0,#+1024
   \   000005D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    280              LocalString += TabStr2 + KeyWord(C_UART_DEVICE) + TabStr1 + KeyWord(Device) + CrLfStr;
   \   000005D4   A81094E5           LDR      R1,[R4, #+168]
   \   000005D8   4D0E8DE2           ADD      R0,SP,#+1232
   \   000005DC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005E0   6010A0E3           MOV      R1,#+96
   \   000005E4   7C1D81E3           ORR      R1,R1,#0x1F00
   \   000005E8   B4008DE2           ADD      R0,SP,#+180
   \   000005EC   400E80E2           ADD      R0,R0,#+1024
   \   000005F0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005F4   B4208DE2           ADD      R2,SP,#+180
   \   000005F8   402E82E2           ADD      R2,R2,#+1024
   \   000005FC   0910A0E1           MOV      R1,R9
   \   00000600   98008DE2           ADD      R0,SP,#+152
   \   00000604   400E80E2           ADD      R0,R0,#+1024
   \   00000608   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000060C   0620A0E1           MOV      R2,R6
   \   00000610   98108DE2           ADD      R1,SP,#+152
   \   00000614   401E81E2           ADD      R1,R1,#+1024
   \   00000618   7C008DE2           ADD      R0,SP,#+124
   \   0000061C   400E80E2           ADD      R0,R0,#+1024
   \   00000620   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000624   4D2E8DE2           ADD      R2,SP,#+1232
   \   00000628   7C108DE2           ADD      R1,SP,#+124
   \   0000062C   401E81E2           ADD      R1,R1,#+1024
   \   00000630   460E8DE2           ADD      R0,SP,#+1120
   \   00000634   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000638   0720A0E1           MOV      R2,R7
   \   0000063C   461E8DE2           ADD      R1,SP,#+1120
   \   00000640   44008DE2           ADD      R0,SP,#+68
   \   00000644   400E80E2           ADD      R0,R0,#+1024
   \   00000648   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000064C   0830A0E1           MOV      R3,R8
   \   00000650   0020A0E3           MOV      R2,#+0
   \   00000654   44108DE2           ADD      R1,SP,#+68
   \   00000658   401E81E2           ADD      R1,R1,#+1024
   \   0000065C   0500A0E1           MOV      R0,R5
   \   00000660   ........           _BLF     ??append,??append??rA
   \   00000664   0020A0E3           MOV      R2,#+0
   \   00000668   0110A0E3           MOV      R1,#+1
   \   0000066C   44008DE2           ADD      R0,SP,#+68
   \   00000670   400E80E2           ADD      R0,R0,#+1024
   \   00000674   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000678   0020A0E3           MOV      R2,#+0
   \   0000067C   0110A0E3           MOV      R1,#+1
   \   00000680   460E8DE2           ADD      R0,SP,#+1120
   \   00000684   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000688   0020A0E3           MOV      R2,#+0
   \   0000068C   0110A0E3           MOV      R1,#+1
   \   00000690   4D0E8DE2           ADD      R0,SP,#+1232
   \   00000694   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000698   0020A0E3           MOV      R2,#+0
   \   0000069C   0110A0E3           MOV      R1,#+1
   \   000006A0   7C008DE2           ADD      R0,SP,#+124
   \   000006A4   400E80E2           ADD      R0,R0,#+1024
   \   000006A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006AC   0020A0E3           MOV      R2,#+0
   \   000006B0   0110A0E3           MOV      R1,#+1
   \   000006B4   98008DE2           ADD      R0,SP,#+152
   \   000006B8   400E80E2           ADD      R0,R0,#+1024
   \   000006BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006C0   0020A0E3           MOV      R2,#+0
   \   000006C4   0110A0E3           MOV      R1,#+1
   \   000006C8   B4008DE2           ADD      R0,SP,#+180
   \   000006CC   400E80E2           ADD      R0,R0,#+1024
   \   000006D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    281              if (Delay) {
   \   000006D4   4C1094E5           LDR      R1,[R4, #+76]
   \   000006D8   000051E3           CMP      R1,#+0
   \   000006DC   2A00000A           BEQ      ??MakeConfigString_2
    282                  LocalString += TabStr2 + KeyWord(C_DELAY) + (AnsiString)Delay + CrLfStr;
   \   000006E0   70008DE2           ADD      R0,SP,#+112
   \   000006E4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000006E8   00A0A0E1           MOV      R10,R0
   \   000006EC   E310A0E3           MOV      R1,#+227
   \   000006F0   0D00A0E1           MOV      R0,SP
   \   000006F4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000006F8   0D20A0E1           MOV      R2,SP
   \   000006FC   0910A0E1           MOV      R1,R9
   \   00000700   1C008DE2           ADD      R0,SP,#+28
   \   00000704   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000708   0A20A0E1           MOV      R2,R10
   \   0000070C   1C108DE2           ADD      R1,SP,#+28
   \   00000710   38008DE2           ADD      R0,SP,#+56
   \   00000714   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000718   0720A0E1           MOV      R2,R7
   \   0000071C   38108DE2           ADD      R1,SP,#+56
   \   00000720   54008DE2           ADD      R0,SP,#+84
   \   00000724   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000728   0830A0E1           MOV      R3,R8
   \   0000072C   0020A0E3           MOV      R2,#+0
   \   00000730   54108DE2           ADD      R1,SP,#+84
   \   00000734   0500A0E1           MOV      R0,R5
   \   00000738   ........           _BLF     ??append,??append??rA
   \   0000073C   0020A0E3           MOV      R2,#+0
   \   00000740   0110A0E3           MOV      R1,#+1
   \   00000744   54008DE2           ADD      R0,SP,#+84
   \   00000748   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000074C   0020A0E3           MOV      R2,#+0
   \   00000750   0110A0E3           MOV      R1,#+1
   \   00000754   38008DE2           ADD      R0,SP,#+56
   \   00000758   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000075C   0020A0E3           MOV      R2,#+0
   \   00000760   0110A0E3           MOV      R1,#+1
   \   00000764   70008DE2           ADD      R0,SP,#+112
   \   00000768   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000076C   0020A0E3           MOV      R2,#+0
   \   00000770   0110A0E3           MOV      R1,#+1
   \   00000774   1C008DE2           ADD      R0,SP,#+28
   \   00000778   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000077C   0020A0E3           MOV      R2,#+0
   \   00000780   0110A0E3           MOV      R1,#+1
   \   00000784   0D00A0E1           MOV      R0,SP
   \   00000788   ........           _BLF     ??_Tidy,??_Tidy??rA
    283              }
    284              if (Relaxed) {
   \                     ??MakeConfigString_2:
   \   0000078C   5800D4E5           LDRB     R0,[R4, #+88]
   \   00000790   000050E3           CMP      R0,#+0
   \   00000794   1B00000A           BEQ      ??MakeConfigString_3
    285                  LocalString += TabStr2 + KeyWord(C_RELAXED) + CrLfStr;
   \   00000798   E410A0E3           MOV      R1,#+228
   \   0000079C   38008DE2           ADD      R0,SP,#+56
   \   000007A0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000007A4   38208DE2           ADD      R2,SP,#+56
   \   000007A8   0910A0E1           MOV      R1,R9
   \   000007AC   1C008DE2           ADD      R0,SP,#+28
   \   000007B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000007B4   0720A0E1           MOV      R2,R7
   \   000007B8   1C108DE2           ADD      R1,SP,#+28
   \   000007BC   0D00A0E1           MOV      R0,SP
   \   000007C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000007C4   0830A0E1           MOV      R3,R8
   \   000007C8   0020A0E3           MOV      R2,#+0
   \   000007CC   0D10A0E1           MOV      R1,SP
   \   000007D0   0500A0E1           MOV      R0,R5
   \   000007D4   ........           _BLF     ??append,??append??rA
   \   000007D8   0020A0E3           MOV      R2,#+0
   \   000007DC   0110A0E3           MOV      R1,#+1
   \   000007E0   0D00A0E1           MOV      R0,SP
   \   000007E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007E8   0020A0E3           MOV      R2,#+0
   \   000007EC   0110A0E3           MOV      R1,#+1
   \   000007F0   1C008DE2           ADD      R0,SP,#+28
   \   000007F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007F8   0020A0E3           MOV      R2,#+0
   \   000007FC   0110A0E3           MOV      R1,#+1
   \   00000800   38008DE2           ADD      R0,SP,#+56
   \   00000804   ........           _BLF     ??_Tidy,??_Tidy??rA
    286              }
    287              if (TimeOut) {
   \                     ??MakeConfigString_3:
   \   00000808   501094E5           LDR      R1,[R4, #+80]
   \   0000080C   000051E3           CMP      R1,#+0
   \   00000810   2A00000A           BEQ      ??MakeConfigString_4
    288                  LocalString += TabStr2 + KeyWord(C_TIMEOUT) + (AnsiString)TimeOut + CrLfStr;
   \   00000814   70008DE2           ADD      R0,SP,#+112
   \   00000818   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   0000081C   00A0A0E1           MOV      R10,R0
   \   00000820   E510A0E3           MOV      R1,#+229
   \   00000824   54008DE2           ADD      R0,SP,#+84
   \   00000828   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000082C   54208DE2           ADD      R2,SP,#+84
   \   00000830   0910A0E1           MOV      R1,R9
   \   00000834   0D00A0E1           MOV      R0,SP
   \   00000838   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000083C   0A20A0E1           MOV      R2,R10
   \   00000840   0D10A0E1           MOV      R1,SP
   \   00000844   1C008DE2           ADD      R0,SP,#+28
   \   00000848   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000084C   0720A0E1           MOV      R2,R7
   \   00000850   1C108DE2           ADD      R1,SP,#+28
   \   00000854   38008DE2           ADD      R0,SP,#+56
   \   00000858   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000085C   0830A0E1           MOV      R3,R8
   \   00000860   0020A0E3           MOV      R2,#+0
   \   00000864   38108DE2           ADD      R1,SP,#+56
   \   00000868   0500A0E1           MOV      R0,R5
   \   0000086C   ........           _BLF     ??append,??append??rA
   \   00000870   0020A0E3           MOV      R2,#+0
   \   00000874   0110A0E3           MOV      R1,#+1
   \   00000878   38008DE2           ADD      R0,SP,#+56
   \   0000087C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000880   0020A0E3           MOV      R2,#+0
   \   00000884   0110A0E3           MOV      R1,#+1
   \   00000888   1C008DE2           ADD      R0,SP,#+28
   \   0000088C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000890   0020A0E3           MOV      R2,#+0
   \   00000894   0110A0E3           MOV      R1,#+1
   \   00000898   70008DE2           ADD      R0,SP,#+112
   \   0000089C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008A0   0020A0E3           MOV      R2,#+0
   \   000008A4   0110A0E3           MOV      R1,#+1
   \   000008A8   0D00A0E1           MOV      R0,SP
   \   000008AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008B0   0020A0E3           MOV      R2,#+0
   \   000008B4   0110A0E3           MOV      R1,#+1
   \   000008B8   54008DE2           ADD      R0,SP,#+84
   \   000008BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    289              }
    290              if (MaxTimeBetweenChar) {
   \                     ??MakeConfigString_4:
   \   000008C0   541094E5           LDR      R1,[R4, #+84]
   \   000008C4   000051E3           CMP      R1,#+0
   \   000008C8   2B00000A           BEQ      ??MakeConfigString_5
    291                  LocalString += TabStr2 + KeyWord(C_UART_MAX_TIME_BETWEEN_CHAR) + (AnsiString)MaxTimeBetweenChar + CrLfStr;
   \   000008CC   70008DE2           ADD      R0,SP,#+112
   \   000008D0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000008D4   00A0A0E1           MOV      R10,R0
   \   000008D8   4810A0E3           MOV      R1,#+72
   \   000008DC   7C1D81E3           ORR      R1,R1,#0x1F00
   \   000008E0   54008DE2           ADD      R0,SP,#+84
   \   000008E4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000008E8   54208DE2           ADD      R2,SP,#+84
   \   000008EC   0910A0E1           MOV      R1,R9
   \   000008F0   38008DE2           ADD      R0,SP,#+56
   \   000008F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000008F8   0A20A0E1           MOV      R2,R10
   \   000008FC   38108DE2           ADD      R1,SP,#+56
   \   00000900   1C008DE2           ADD      R0,SP,#+28
   \   00000904   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000908   0720A0E1           MOV      R2,R7
   \   0000090C   1C108DE2           ADD      R1,SP,#+28
   \   00000910   0D00A0E1           MOV      R0,SP
   \   00000914   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000918   0830A0E1           MOV      R3,R8
   \   0000091C   0020A0E3           MOV      R2,#+0
   \   00000920   0D10A0E1           MOV      R1,SP
   \   00000924   0500A0E1           MOV      R0,R5
   \   00000928   ........           _BLF     ??append,??append??rA
   \   0000092C   0020A0E3           MOV      R2,#+0
   \   00000930   0110A0E3           MOV      R1,#+1
   \   00000934   0D00A0E1           MOV      R0,SP
   \   00000938   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000093C   0020A0E3           MOV      R2,#+0
   \   00000940   0110A0E3           MOV      R1,#+1
   \   00000944   1C008DE2           ADD      R0,SP,#+28
   \   00000948   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000094C   0020A0E3           MOV      R2,#+0
   \   00000950   0110A0E3           MOV      R1,#+1
   \   00000954   70008DE2           ADD      R0,SP,#+112
   \   00000958   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000095C   0020A0E3           MOV      R2,#+0
   \   00000960   0110A0E3           MOV      R1,#+1
   \   00000964   38008DE2           ADD      R0,SP,#+56
   \   00000968   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000096C   0020A0E3           MOV      R2,#+0
   \   00000970   0110A0E3           MOV      R1,#+1
   \   00000974   54008DE2           ADD      R0,SP,#+84
   \   00000978   ........           _BLF     ??_Tidy,??_Tidy??rA
    292              }
    293              if (LogTime) {
   \                     ??MakeConfigString_5:
   \   0000097C   600094E5           LDR      R0,[R4, #+96]
   \   00000980   000050E3           CMP      R0,#+0
   \   00000984   2C00000A           BEQ      ??MakeConfigString_6
    294                  LocalString += TabStr2 + KeyWord(C_LOG_PERIOD) + (AnsiString)(LogTime / 1000) + CrLfStr;
   \   00000988   FA1FA0E3           MOV      R1,#+1000
   \   0000098C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000990   70008DE2           ADD      R0,SP,#+112
   \   00000994   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000998   00A0A0E1           MOV      R10,R0
   \   0000099C   E610A0E3           MOV      R1,#+230
   \   000009A0   54008DE2           ADD      R0,SP,#+84
   \   000009A4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000009A8   54208DE2           ADD      R2,SP,#+84
   \   000009AC   0910A0E1           MOV      R1,R9
   \   000009B0   0D00A0E1           MOV      R0,SP
   \   000009B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009B8   0A20A0E1           MOV      R2,R10
   \   000009BC   0D10A0E1           MOV      R1,SP
   \   000009C0   1C008DE2           ADD      R0,SP,#+28
   \   000009C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009C8   0720A0E1           MOV      R2,R7
   \   000009CC   1C108DE2           ADD      R1,SP,#+28
   \   000009D0   38008DE2           ADD      R0,SP,#+56
   \   000009D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009D8   0830A0E1           MOV      R3,R8
   \   000009DC   0020A0E3           MOV      R2,#+0
   \   000009E0   38108DE2           ADD      R1,SP,#+56
   \   000009E4   0500A0E1           MOV      R0,R5
   \   000009E8   ........           _BLF     ??append,??append??rA
   \   000009EC   0020A0E3           MOV      R2,#+0
   \   000009F0   0110A0E3           MOV      R1,#+1
   \   000009F4   38008DE2           ADD      R0,SP,#+56
   \   000009F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009FC   0020A0E3           MOV      R2,#+0
   \   00000A00   0110A0E3           MOV      R1,#+1
   \   00000A04   1C008DE2           ADD      R0,SP,#+28
   \   00000A08   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A0C   0020A0E3           MOV      R2,#+0
   \   00000A10   0110A0E3           MOV      R1,#+1
   \   00000A14   70008DE2           ADD      R0,SP,#+112
   \   00000A18   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A1C   0020A0E3           MOV      R2,#+0
   \   00000A20   0110A0E3           MOV      R1,#+1
   \   00000A24   0D00A0E1           MOV      R0,SP
   \   00000A28   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A2C   0020A0E3           MOV      R2,#+0
   \   00000A30   0110A0E3           MOV      R1,#+1
   \   00000A34   54008DE2           ADD      R0,SP,#+84
   \   00000A38   ........           _BLF     ??_Tidy,??_Tidy??rA
    295              }
    296              if (LogEntries) {
   \                     ??MakeConfigString_6:
   \   00000A3C   641094E5           LDR      R1,[R4, #+100]
   \   00000A40   000051E3           CMP      R1,#+0
   \   00000A44   2A00000A           BEQ      ??MakeConfigString_7
    297                  LocalString += TabStr2 + KeyWord(C_LOG_ENTRIES) + (AnsiString)LogEntries + CrLfStr;
   \   00000A48   70008DE2           ADD      R0,SP,#+112
   \   00000A4C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000A50   00A0A0E1           MOV      R10,R0
   \   00000A54   E710A0E3           MOV      R1,#+231
   \   00000A58   54008DE2           ADD      R0,SP,#+84
   \   00000A5C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000A60   54208DE2           ADD      R2,SP,#+84
   \   00000A64   0910A0E1           MOV      R1,R9
   \   00000A68   38008DE2           ADD      R0,SP,#+56
   \   00000A6C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A70   0A20A0E1           MOV      R2,R10
   \   00000A74   38108DE2           ADD      R1,SP,#+56
   \   00000A78   1C008DE2           ADD      R0,SP,#+28
   \   00000A7C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A80   0720A0E1           MOV      R2,R7
   \   00000A84   1C108DE2           ADD      R1,SP,#+28
   \   00000A88   0D00A0E1           MOV      R0,SP
   \   00000A8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A90   0830A0E1           MOV      R3,R8
   \   00000A94   0020A0E3           MOV      R2,#+0
   \   00000A98   0D10A0E1           MOV      R1,SP
   \   00000A9C   0500A0E1           MOV      R0,R5
   \   00000AA0   ........           _BLF     ??append,??append??rA
   \   00000AA4   0020A0E3           MOV      R2,#+0
   \   00000AA8   0110A0E3           MOV      R1,#+1
   \   00000AAC   0D00A0E1           MOV      R0,SP
   \   00000AB0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AB4   0020A0E3           MOV      R2,#+0
   \   00000AB8   0110A0E3           MOV      R1,#+1
   \   00000ABC   1C008DE2           ADD      R0,SP,#+28
   \   00000AC0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AC4   0020A0E3           MOV      R2,#+0
   \   00000AC8   0110A0E3           MOV      R1,#+1
   \   00000ACC   70008DE2           ADD      R0,SP,#+112
   \   00000AD0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AD4   0020A0E3           MOV      R2,#+0
   \   00000AD8   0110A0E3           MOV      R1,#+1
   \   00000ADC   38008DE2           ADD      R0,SP,#+56
   \   00000AE0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AE4   0020A0E3           MOV      R2,#+0
   \   00000AE8   0110A0E3           MOV      R1,#+1
   \   00000AEC   54008DE2           ADD      R0,SP,#+84
   \   00000AF0   ........           _BLF     ??_Tidy,??_Tidy??rA
    298              }
    299              if (ModbusCmdInputRegister != MBUS_CMD_READ_INPUT_REGISTER) {
   \                     ??MakeConfigString_7:
   \   00000AF4   6C1094E5           LDR      R1,[R4, #+108]
   \   00000AF8   040051E3           CMP      R1,#+4
   \   00000AFC   2B00000A           BEQ      ??MakeConfigString_8
    300                  LocalString += TabStr2 + KeyWord(C_MODBUS_CMD_INP_REG) + (AnsiString)ModbusCmdInputRegister + CrLfStr;
   \   00000B00   70008DE2           ADD      R0,SP,#+112
   \   00000B04   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000B08   00A0A0E1           MOV      R10,R0
   \   00000B0C   7310A0E3           MOV      R1,#+115
   \   00000B10   901E81E3           ORR      R1,R1,#0x900
   \   00000B14   54008DE2           ADD      R0,SP,#+84
   \   00000B18   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000B1C   54208DE2           ADD      R2,SP,#+84
   \   00000B20   0910A0E1           MOV      R1,R9
   \   00000B24   0D00A0E1           MOV      R0,SP
   \   00000B28   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B2C   0A20A0E1           MOV      R2,R10
   \   00000B30   0D10A0E1           MOV      R1,SP
   \   00000B34   1C008DE2           ADD      R0,SP,#+28
   \   00000B38   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B3C   0720A0E1           MOV      R2,R7
   \   00000B40   1C108DE2           ADD      R1,SP,#+28
   \   00000B44   38008DE2           ADD      R0,SP,#+56
   \   00000B48   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B4C   0830A0E1           MOV      R3,R8
   \   00000B50   0020A0E3           MOV      R2,#+0
   \   00000B54   38108DE2           ADD      R1,SP,#+56
   \   00000B58   0500A0E1           MOV      R0,R5
   \   00000B5C   ........           _BLF     ??append,??append??rA
   \   00000B60   0020A0E3           MOV      R2,#+0
   \   00000B64   0110A0E3           MOV      R1,#+1
   \   00000B68   38008DE2           ADD      R0,SP,#+56
   \   00000B6C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B70   0020A0E3           MOV      R2,#+0
   \   00000B74   0110A0E3           MOV      R1,#+1
   \   00000B78   1C008DE2           ADD      R0,SP,#+28
   \   00000B7C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B80   0020A0E3           MOV      R2,#+0
   \   00000B84   0110A0E3           MOV      R1,#+1
   \   00000B88   70008DE2           ADD      R0,SP,#+112
   \   00000B8C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B90   0020A0E3           MOV      R2,#+0
   \   00000B94   0110A0E3           MOV      R1,#+1
   \   00000B98   0D00A0E1           MOV      R0,SP
   \   00000B9C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BA0   0020A0E3           MOV      R2,#+0
   \   00000BA4   0110A0E3           MOV      R1,#+1
   \   00000BA8   54008DE2           ADD      R0,SP,#+84
   \   00000BAC   ........           _BLF     ??_Tidy,??_Tidy??rA
    301              }
    302              if (ModbusCmdInputStatus != MBUS_CMD_READ_COIL_STATUS) {
   \                     ??MakeConfigString_8:
   \   00000BB0   681094E5           LDR      R1,[R4, #+104]
   \   00000BB4   010051E3           CMP      R1,#+1
   \   00000BB8   2B00000A           BEQ      ??MakeConfigString_9
    303                  LocalString += TabStr2 + KeyWord(C_MODBUS_CMD_INP_STAT) + (AnsiString)ModbusCmdInputStatus + CrLfStr;
   \   00000BBC   70008DE2           ADD      R0,SP,#+112
   \   00000BC0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000BC4   0040A0E1           MOV      R4,R0
   \   00000BC8   7210A0E3           MOV      R1,#+114
   \   00000BCC   901E81E3           ORR      R1,R1,#0x900
   \   00000BD0   54008DE2           ADD      R0,SP,#+84
   \   00000BD4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000BD8   54208DE2           ADD      R2,SP,#+84
   \   00000BDC   0910A0E1           MOV      R1,R9
   \   00000BE0   38008DE2           ADD      R0,SP,#+56
   \   00000BE4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BE8   0420A0E1           MOV      R2,R4
   \   00000BEC   38108DE2           ADD      R1,SP,#+56
   \   00000BF0   1C008DE2           ADD      R0,SP,#+28
   \   00000BF4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BF8   0720A0E1           MOV      R2,R7
   \   00000BFC   1C108DE2           ADD      R1,SP,#+28
   \   00000C00   0D00A0E1           MOV      R0,SP
   \   00000C04   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C08   0830A0E1           MOV      R3,R8
   \   00000C0C   0020A0E3           MOV      R2,#+0
   \   00000C10   0D10A0E1           MOV      R1,SP
   \   00000C14   0500A0E1           MOV      R0,R5
   \   00000C18   ........           _BLF     ??append,??append??rA
   \   00000C1C   0020A0E3           MOV      R2,#+0
   \   00000C20   0110A0E3           MOV      R1,#+1
   \   00000C24   0D00A0E1           MOV      R0,SP
   \   00000C28   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C2C   0020A0E3           MOV      R2,#+0
   \   00000C30   0110A0E3           MOV      R1,#+1
   \   00000C34   1C008DE2           ADD      R0,SP,#+28
   \   00000C38   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C3C   0020A0E3           MOV      R2,#+0
   \   00000C40   0110A0E3           MOV      R1,#+1
   \   00000C44   70008DE2           ADD      R0,SP,#+112
   \   00000C48   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C4C   0020A0E3           MOV      R2,#+0
   \   00000C50   0110A0E3           MOV      R1,#+1
   \   00000C54   38008DE2           ADD      R0,SP,#+56
   \   00000C58   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C5C   0020A0E3           MOV      R2,#+0
   \   00000C60   0110A0E3           MOV      R1,#+1
   \   00000C64   54008DE2           ADD      R0,SP,#+84
   \   00000C68   ........           _BLF     ??_Tidy,??_Tidy??rA
    304              }
    305              LocalString += TabStr1 + KeyWord(C_UART_END) + CrLfStr;
   \                     ??MakeConfigString_9:
   \   00000C6C   4110A0E3           MOV      R1,#+65
   \   00000C70   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000C74   490F8DE2           ADD      R0,SP,#+292
   \   00000C78   400E80E2           ADD      R0,R0,#+1024
   \   00000C7C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000C80   492F8DE2           ADD      R2,SP,#+292
   \   00000C84   402E82E2           ADD      R2,R2,#+1024
   \   00000C88   0610A0E1           MOV      R1,R6
   \   00000C8C   420F8DE2           ADD      R0,SP,#+264
   \   00000C90   400E80E2           ADD      R0,R0,#+1024
   \   00000C94   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C98   0720A0E1           MOV      R2,R7
   \   00000C9C   421F8DE2           ADD      R1,SP,#+264
   \   00000CA0   401E81E2           ADD      R1,R1,#+1024
   \   00000CA4   EC008DE2           ADD      R0,SP,#+236
   \   00000CA8   400E80E2           ADD      R0,R0,#+1024
   \   00000CAC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000CB0   0830A0E1           MOV      R3,R8
   \   00000CB4   0020A0E3           MOV      R2,#+0
   \   00000CB8   EC108DE2           ADD      R1,SP,#+236
   \   00000CBC   401E81E2           ADD      R1,R1,#+1024
   \   00000CC0   0500A0E1           MOV      R0,R5
   \   00000CC4   ........           _BLF     ??append,??append??rA
   \   00000CC8   0020A0E3           MOV      R2,#+0
   \   00000CCC   0110A0E3           MOV      R1,#+1
   \   00000CD0   EC008DE2           ADD      R0,SP,#+236
   \   00000CD4   400E80E2           ADD      R0,R0,#+1024
   \   00000CD8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CDC   0020A0E3           MOV      R2,#+0
   \   00000CE0   0110A0E3           MOV      R1,#+1
   \   00000CE4   420F8DE2           ADD      R0,SP,#+264
   \   00000CE8   400E80E2           ADD      R0,R0,#+1024
   \   00000CEC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CF0   0020A0E3           MOV      R2,#+0
   \   00000CF4   0110A0E3           MOV      R1,#+1
   \   00000CF8   490F8DE2           ADD      R0,SP,#+292
   \   00000CFC   400E80E2           ADD      R0,R0,#+1024
   \   00000D00   ........           _BLF     ??_Tidy,??_Tidy??rA
    306              LocalString += CrLfStr;
   \   00000D04   0830A0E1           MOV      R3,R8
   \   00000D08   0020A0E3           MOV      R2,#+0
   \   00000D0C   0710A0E1           MOV      R1,R7
   \   00000D10   0500A0E1           MOV      R0,R5
   \   00000D14   ........           _BLF     ??append,??append??rA
    307              return (LocalString);
   \   00000D18   73DF8DE2           ADD      SP,SP,#+460
   \   00000D1C   40DE8DE2           ADD      SP,SP,#+1024
   \   00000D20   F047BDE8           POP      {R4-R10,LR}
   \   00000D24   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_1:
   \   00000D28   ........           DC32     TabStr1
   \   00000D2C   ........           DC32     CrLfStr
   \   00000D30   ........           DC32     TabStr2
   \   00000D34   ........           DC32     ??npos
    308          }
    309          //---------------------------------------------------------------------------
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          bool TSNUart::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    312              bool NoError = true;
    313              int ErrorLine = 0;
   \   00000004   ........           LDR      R11,??Subroutine31_0  ;; `?<Constant "Uart">`
   \   00000008   E4D04DE2           SUB      SP,SP,#+228
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0160A0E3           MOV      R6,#+1
   \   00000018   0190A0E3           MOV      R9,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0170E0E1           MVN      R7,R1
    314              int Key;
    315              do {
    316                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   3C108DE2           ADD      R1,SP,#+60
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00000A           BEQ      ??LoadConfigString_3
    317                  if (ErrorLine) {
    318                      if (ErrorLine != EOF) {
   \   00000048   070050E1           CMP      R0,R7
   \   0000004C   2301000A           BEQ      ??LoadConfigString_4
    319                          GiveConfigWarning("Uart", ErrorLine);
   \   00000050   0B10A0E1           MOV      R1,R11
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           _BLF     ??AnsiString_5,??AnsiString??rA_4
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \                     ??LoadConfigString_5:
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_6:
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   190100EA           B        ??LoadConfigString_4
    320                      }
    321                  } else {
    322                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   00000078   3C108DE2           ADD      R1,SP,#+60
   \   0000007C   58008DE2           ADD      R0,SP,#+88
   \   00000080   ........           _BLF     ??AnsiString,??AnsiString??rA_5
   \   00000084   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000088   0080A0E1           MOV      R8,R0
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   58008DE2           ADD      R0,SP,#+88
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
    323                      switch (Key) {
   \   0000009C   E30058E3           CMP      R8,#+227
   \   000000A0   C300000A           BEQ      ??LoadConfigString_7
   \   000000A4   E40058E3           CMP      R8,#+228
   \   000000A8   C700000A           BEQ      ??LoadConfigString_8
   \   000000AC   E50058E3           CMP      R8,#+229
   \   000000B0   C700000A           BEQ      ??LoadConfigString_9
   \   000000B4   E60058E3           CMP      R8,#+230
   \   000000B8   CB00000A           BEQ      ??LoadConfigString_10
   \   000000BC   E70058E3           CMP      R8,#+231
   \   000000C0   D500000A           BEQ      ??LoadConfigString_11
   \   000000C4   7210A0E3           MOV      R1,#+114
   \   000000C8   901E81E3           ORR      R1,R1,#0x900
   \   000000CC   010058E1           CMP      R8,R1
   \   000000D0   D700000A           BEQ      ??LoadConfigString_12
   \   000000D4   011081E3           ORR      R1,R1,#0x1
   \   000000D8   010058E1           CMP      R8,R1
   \   000000DC   EA00000A           BEQ      ??LoadConfigString_13
   \   000000E0   7D1D86E3           ORR      R1,R6,#0x1F40
   \   000000E4   010058E1           CMP      R8,R1
   \   000000E8   FC00000A           BEQ      ??LoadConfigString_4
   \   000000EC   011081E2           ADD      R1,R1,#+1
   \   000000F0   010058E1           CMP      R8,R1
   \   000000F4   2900000A           BEQ      ??LoadConfigString_14
   \   000000F8   011081E3           ORR      R1,R1,#0x1
   \   000000FC   010058E1           CMP      R8,R1
   \   00000100   3200000A           BEQ      ??LoadConfigString_15
   \   00000104   011081E2           ADD      R1,R1,#+1
   \   00000108   010058E1           CMP      R8,R1
   \   0000010C   3800000A           BEQ      ??LoadConfigString_16
   \   00000110   011081E3           ORR      R1,R1,#0x1
   \   00000114   010058E1           CMP      R8,R1
   \   00000118   4800000A           BEQ      ??LoadConfigString_17
   \   0000011C   011081E2           ADD      R1,R1,#+1
   \   00000120   010058E1           CMP      R8,R1
   \   00000124   4E00000A           BEQ      ??LoadConfigString_18
   \   00000128   021081E2           ADD      R1,R1,#+2
   \   0000012C   010058E1           CMP      R8,R1
   \   00000130   5100000A           BEQ      ??LoadConfigString_19
   \   00000134   021081E3           ORR      R1,R1,#0x2
   \   00000138   010058E1           CMP      R8,R1
   \   0000013C   5700000A           BEQ      ??LoadConfigString_20
   \   00000140   0A1081E2           ADD      R1,R1,#+10
   \   00000144   010058E1           CMP      R8,R1
   \   00000148   6C00000A           BEQ      ??LoadConfigString_21
   \   0000014C   0C1081E2           ADD      R1,R1,#+12
   \   00000150   010058E1           CMP      R8,R1
   \   00000154   8100000A           BEQ      ??LoadConfigString_22
    324                      default:
    325                          GiveConfigWarning("Uart", InputKeyWord, ConfigString.LineCount);
   \   00000158   3C108DE2           ADD      R1,SP,#+60
   \   0000015C   74008DE2           ADD      R0,SP,#+116
   \   00000160   ........           _BLF     ??AnsiString,??AnsiString??rA_5
   \   00000164   00A0A0E1           MOV      R10,R0
   \   00000168   0B10A0E1           MOV      R1,R11
   \   0000016C   90008DE2           ADD      R0,SP,#+144
   \   00000170   ........           _BLF     ??AnsiString_5,??AnsiString??rA_4
   \   00000174   1C2095E5           LDR      R2,[R5, #+28]
   \   00000178   0A10A0E1           MOV      R1,R10
   \   0000017C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   74008DE2           ADD      R0,SP,#+116
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0610A0E1           MOV      R1,R6
   \   00000198   90008DE2           ADD      R0,SP,#+144
   \   0000019C   B3FFFFEA           B        ??LoadConfigString_6
    326                          break;
    327                      case C_UART_PORTNUMBER:
    328                          PortNumber = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_14:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10A0E1           MOV      R1,SP
   \   000001A8   0500A0E1           MOV      R0,R5
   \   000001AC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001B0   800084E5           STR      R0,[R4, #+128]
    329                          NoError = !ErrorLine;
   \   000001B4   00009DE5           LDR      R0,[SP, #+0]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0100001A           BNE      ??LoadConfigString_23
   \                     ??LoadConfigString_24:
   \   000001C0   0190A0E3           MOV      R9,#+1
   \   000001C4   C50000EA           B        ??LoadConfigString_4
   \                     ??LoadConfigString_23:
   \   000001C8   0090A0E3           MOV      R9,#+0
   \   000001CC   C30000EA           B        ??LoadConfigString_4
    330                          break;
    331                      case C_UART_BAUDRATE:
    332                          BaudRate = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_15:
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0D10A0E1           MOV      R1,SP
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001E0   AC0084E5           STR      R0,[R4, #+172]
    333                          NoError = !ErrorLine;
   \                     ??LoadConfigString_25:
   \   000001E4   00009DE5           LDR      R0,[SP, #+0]
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   F5FFFF1A           BNE      ??LoadConfigString_23
   \   000001F0   F2FFFFEA           B        ??LoadConfigString_24
    334                          break;
    335                      case C_UART_PARITY:
    336                          {
    337                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_16:
   \   000001F4   0030A0E3           MOV      R3,#+0
   \   000001F8   0D20A0E1           MOV      R2,SP
   \   000001FC   04108DE2           ADD      R1,SP,#+4
   \   00000200   0500A0E1           MOV      R0,R5
   \   00000204   ........           _BLF     ??NextWord,??NextWord??rA
    338                              NoError = !ErrorLine;
   \   00000208   00009DE5           LDR      R0,[SP, #+0]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   0190A003           MOVEQ    R9,#+1
   \   00000214   0090A013           MOVNE    R9,#+0
    339                              if (NoError) strncpy(&Parity, TempStr.c_str(), 1);
   \   00000218   000059E3           CMP      R9,#+0
   \   0000021C   90FFFF0A           BEQ      ??LoadConfigString_5
   \   00000220   1C009DE5           LDR      R0,[SP, #+28]
   \   00000224   0120A0E3           MOV      R2,#+1
   \   00000228   100050E3           CMP      R0,#+16
   \   0000022C   08109D25           LDRCS    R1,[SP, #+8]
   \   00000230   C00084E2           ADD      R0,R4,#+192
   \   00000234   08108D32           ADDCC    R1,SP,#+8
   \   00000238   ........           _BLF     strncpy,??strncpy??rA
    340                          }
   \   0000023C   88FFFFEA           B        ??LoadConfigString_5
    341                          break;
    342                      case C_UART_STOPBITS:
    343                          StopBits = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_17:
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0D10A0E1           MOV      R1,SP
   \   00000248   0500A0E1           MOV      R0,R5
   \   0000024C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000250   B40084E5           STR      R0,[R4, #+180]
    344                          NoError = !ErrorLine;
   \   00000254   00009DE5           LDR      R0,[SP, #+0]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   D7FFFF0A           BEQ      ??LoadConfigString_24
   \   00000260   D8FFFFEA           B        ??LoadConfigString_23
    345                          break;
    346                      case C_UART_WORDLENGTH:
    347                          WordLength = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_18:
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0D10A0E1           MOV      R1,SP
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000274   B00084E5           STR      R0,[R4, #+176]
    348                          NoError = !ErrorLine;
   \   00000278   D9FFFFEA           B        ??LoadConfigString_25
    349                          break;
    350          /*              case C_UART_UARTTYPE:
    351                              {
    352                                  UartType = ConfigString.ReadLong(ErrorLine);
    353                                  NoError = !ErrorLine;
    354                              }
    355                              break;    */
    356                      case C_UART_MAX_TIME_BETWEEN_CHAR:
    357                          MaxTimeBetweenChar = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_19:
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0D10A0E1           MOV      R1,SP
   \   00000284   0500A0E1           MOV      R0,R5
   \   00000288   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000028C   540084E5           STR      R0,[R4, #+84]
    358                          NoError = !ErrorLine;
   \   00000290   00009DE5           LDR      R0,[SP, #+0]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   CAFFFF1A           BNE      ??LoadConfigString_23
   \   0000029C   C7FFFFEA           B        ??LoadConfigString_24
    359                          break;
    360                      case C_UART_HWPRO:
    361                          {
    362                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_20:
   \   000002A0   0030A0E3           MOV      R3,#+0
   \   000002A4   0D20A0E1           MOV      R2,SP
   \   000002A8   20108DE2           ADD      R1,SP,#+32
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   ........           _BLF     ??NextWord,??NextWord??rA
    363                              NoError = !ErrorLine;
   \   000002B4   00009DE5           LDR      R0,[SP, #+0]
   \   000002B8   000050E3           CMP      R0,#+0
   \   000002BC   0A00001A           BNE      ??LoadConfigString_26
   \   000002C0   0190A0E3           MOV      R9,#+1
    364                              if (NoError) HWProtocol = FindConfigKey(TempStr);
   \   000002C4   20108DE2           ADD      R1,SP,#+32
   \   000002C8   04008DE2           ADD      R0,SP,#+4
   \   000002CC   ........           _BLF     ??AnsiString,??AnsiString??rA_5
   \   000002D0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000002D4   A00084E5           STR      R0,[R4, #+160]
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0610A0E1           MOV      R1,R6
   \   000002E0   04008DE2           ADD      R0,SP,#+4
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   000000EA           B        ??LoadConfigString_27
   \                     ??LoadConfigString_26:
   \   000002EC   0090A0E3           MOV      R9,#+0
    365                          }
   \                     ??LoadConfigString_27:
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   20008DE2           ADD      R0,SP,#+32
   \   000002FC   5BFFFFEA           B        ??LoadConfigString_6
    366                          break;
    367                      case C_UART_SWPRO:
    368                          {
    369                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_21:
   \   00000300   0030A0E3           MOV      R3,#+0
   \   00000304   0D20A0E1           MOV      R2,SP
   \   00000308   20108DE2           ADD      R1,SP,#+32
   \   0000030C   0500A0E1           MOV      R0,R5
   \   00000310   ........           _BLF     ??NextWord,??NextWord??rA
    370                              NoError = !ErrorLine;
   \   00000314   00009DE5           LDR      R0,[SP, #+0]
   \   00000318   000050E3           CMP      R0,#+0
   \   0000031C   0A00001A           BNE      ??LoadConfigString_28
   \   00000320   0190A0E3           MOV      R9,#+1
    371                              if (NoError) SWProtocol = FindConfigKey(TempStr);
   \   00000324   20108DE2           ADD      R1,SP,#+32
   \   00000328   04008DE2           ADD      R0,SP,#+4
   \   0000032C   ........           _BLF     ??AnsiString,??AnsiString??rA_5
   \   00000330   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000334   A40084E5           STR      R0,[R4, #+164]
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0610A0E1           MOV      R1,R6
   \   00000340   04008DE2           ADD      R0,SP,#+4
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   000000EA           B        ??LoadConfigString_29
   \                     ??LoadConfigString_28:
   \   0000034C   0090A0E3           MOV      R9,#+0
    372                          }
   \                     ??LoadConfigString_29:
   \   00000350   0020A0E3           MOV      R2,#+0
   \   00000354   0110A0E3           MOV      R1,#+1
   \   00000358   20008DE2           ADD      R0,SP,#+32
   \   0000035C   43FFFFEA           B        ??LoadConfigString_6
    373                          break;
    374                      case C_UART_DEVICE:
    375                          {
    376                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_22:
   \   00000360   0030A0E3           MOV      R3,#+0
   \   00000364   0D20A0E1           MOV      R2,SP
   \   00000368   20108DE2           ADD      R1,SP,#+32
   \   0000036C   0500A0E1           MOV      R0,R5
   \   00000370   ........           _BLF     ??NextWord,??NextWord??rA
    377                              NoError = !ErrorLine;
   \   00000374   00009DE5           LDR      R0,[SP, #+0]
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   0A00001A           BNE      ??LoadConfigString_30
   \   00000380   0190A0E3           MOV      R9,#+1
    378                              if (NoError) {
    379                                  Device = FindConfigKey(TempStr);
   \   00000384   20108DE2           ADD      R1,SP,#+32
   \   00000388   04008DE2           ADD      R0,SP,#+4
   \   0000038C   ........           _BLF     ??AnsiString,??AnsiString??rA_5
   \   00000390   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000394   A80084E5           STR      R0,[R4, #+168]
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0610A0E1           MOV      R1,R6
   \   000003A0   04008DE2           ADD      R0,SP,#+4
   \   000003A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A8   D0FFFFEA           B        ??LoadConfigString_27
    380                              }
   \                     ??LoadConfigString_30:
   \   000003AC   0090A0E3           MOV      R9,#+0
    381                          }
   \   000003B0   CEFFFFEA           B        ??LoadConfigString_27
    382                          break;
    383                      case C_DELAY:
    384                          Delay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_7:
   \   000003B4   0020A0E3           MOV      R2,#+0
   \   000003B8   0D10A0E1           MOV      R1,SP
   \   000003BC   0500A0E1           MOV      R0,R5
   \   000003C0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000003C4   4C0084E5           STR      R0,[R4, #+76]
   \   000003C8   440000EA           B        ??LoadConfigString_4
    385                          break;
    386                      case C_RELAXED:
    387                          Relaxed = true;
   \                     ??LoadConfigString_8:
   \   000003CC   5860C4E5           STRB     R6,[R4, #+88]
   \   000003D0   420000EA           B        ??LoadConfigString_4
    388                          break;
    389                      case C_TIMEOUT:
    390                          TimeOut = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_9:
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   0D10A0E1           MOV      R1,SP
   \   000003DC   0500A0E1           MOV      R0,R5
   \   000003E0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000003E4   500084E5           STR      R0,[R4, #+80]
   \   000003E8   3C0000EA           B        ??LoadConfigString_4
    391                          break;
    392                      case C_LOG_PERIOD:
    393                          {
    394                              int tmpLogTime = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   0D10A0E1           MOV      R1,SP
   \   000003F4   0500A0E1           MOV      R0,R5
   \   000003F8   ........           _BLF     ??ReadLong,??ReadLong??rA
    395                              NoError = !ErrorLine;
   \   000003FC   00109DE5           LDR      R1,[SP, #+0]
   \   00000400   000051E3           CMP      R1,#+0
   \   00000404   6FFFFF1A           BNE      ??LoadConfigString_23
   \   00000408   0190A0E3           MOV      R9,#+1
    396                              if (NoError) {
    397                                  LogTime = 1000 * tmpLogTime;
   \   0000040C   FA1FA0E3           MOV      R1,#+1000
   \   00000410   910000E0           MUL      R0,R1,R0
   \   00000414   600084E5           STR      R0,[R4, #+96]
   \   00000418   300000EA           B        ??LoadConfigString_4
    398                              }
    399                          }
    400                          break;
    401                      case C_LOG_ENTRIES:
    402                          LogEntries = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_11:
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0D10A0E1           MOV      R1,SP
   \   00000424   0500A0E1           MOV      R0,R5
   \   00000428   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000042C   640084E5           STR      R0,[R4, #+100]
   \   00000430   2A0000EA           B        ??LoadConfigString_4
    403                          break;
    404                      case C_MODBUS_CMD_INP_STAT:
    405                          {
    406                              int Cmd = ConfigString.ReadInteger(ErrorLine);
    407                              switch (Cmd) {
   \                     ??LoadConfigString_12:
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0D10A0E1           MOV      R1,SP
   \   0000043C   0500A0E1           MOV      R0,R5
   \   00000440   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000444   010050E2           SUBS     R0,R0,#+1
   \   00000448   0A00000A           BEQ      ??LoadConfigString_31
   \   0000044C   010050E2           SUBS     R0,R0,#+1
   \   00000450   0A00000A           BEQ      ??LoadConfigString_32
    408                              default:
    409                                  GiveConfigWarning("Modbus Read Input Status: Unknown command!", ErrorLine);
   \   00000454   08108BE2           ADD      R1,R11,#+8
   \   00000458   AC008DE2           ADD      R0,SP,#+172
   \   0000045C   ........           _BLF     ??AnsiString_5,??AnsiString??rA_4
   \   00000460   00109DE5           LDR      R1,[SP, #+0]
   \   00000464   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000468   0020A0E3           MOV      R2,#+0
   \   0000046C   0110A0E3           MOV      R1,#+1
   \   00000470   AC008DE2           ADD      R0,SP,#+172
   \   00000474   ........           _BLF     ??_Tidy,??_Tidy??rA
    410                              case MBUS_CMD_READ_COIL_STATUS:
    411                                  ModbusCmdInputStatus = MBUS_CMD_READ_COIL_STATUS;
   \                     ??LoadConfigString_31:
   \   00000478   686084E5           STR      R6,[R4, #+104]
   \   0000047C   170000EA           B        ??LoadConfigString_4
    412                                  break;
    413                              case MBUS_CMD_READ_INPUT_STATUS:
    414                                  ModbusCmdInputStatus = MBUS_CMD_READ_INPUT_STATUS;
   \                     ??LoadConfigString_32:
   \   00000480   0200A0E3           MOV      R0,#+2
   \   00000484   680084E5           STR      R0,[R4, #+104]
   \   00000488   140000EA           B        ??LoadConfigString_4
    415                              }
    416                          }
    417                          break;
    418                      case C_MODBUS_CMD_INP_REG :
    419                          {
    420                              int Cmd = ConfigString.ReadInteger(ErrorLine);
    421                              switch (Cmd) {
   \                     ??LoadConfigString_13:
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0D10A0E1           MOV      R1,SP
   \   00000494   0500A0E1           MOV      R0,R5
   \   00000498   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   0000049C   030050E2           SUBS     R0,R0,#+3
   \   000004A0   0C00000A           BEQ      ??LoadConfigString_33
   \   000004A4   010050E2           SUBS     R0,R0,#+1
   \   000004A8   0800000A           BEQ      ??LoadConfigString_34
    422                              default:
    423                                  GiveConfigWarning("Modbus Read Register: Unknown command!", ErrorLine);
   \   000004AC   34108BE2           ADD      R1,R11,#+52
   \   000004B0   C8008DE2           ADD      R0,SP,#+200
   \   000004B4   ........           _BLF     ??AnsiString_5,??AnsiString??rA_4
   \   000004B8   00109DE5           LDR      R1,[SP, #+0]
   \   000004BC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   C8008DE2           ADD      R0,SP,#+200
   \   000004CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    424                              case MBUS_CMD_READ_INPUT_REGISTER:
    425                                  ModbusCmdInputRegister = MBUS_CMD_READ_INPUT_REGISTER;
   \                     ??LoadConfigString_34:
   \   000004D0   0400A0E3           MOV      R0,#+4
   \   000004D4   000000EA           B        ??LoadConfigString_35
    426                                  break;
    427                              case MBUS_CMD_READ_HOLDING_REGISTER:
    428                                  ModbusCmdInputRegister = MBUS_CMD_READ_HOLDING_REGISTER;
   \                     ??LoadConfigString_33:
   \   000004D8   0300A0E3           MOV      R0,#+3
   \                     ??LoadConfigString_35:
   \   000004DC   6C0084E5           STR      R0,[R4, #+108]
    429                                  break;
    430                              }
    431                          }
    432                          break;
    433                      case C_UART_END:
    434                          break;
    435                      }
    436                  }
    437              }while (NoError && (ErrorLine != EOF) && (Key != C_UART_END));
   \                     ??LoadConfigString_4:
   \   000004E0   0020A0E3           MOV      R2,#+0
   \   000004E4   0110A0E3           MOV      R1,#+1
   \   000004E8   3C008DE2           ADD      R0,SP,#+60
   \   000004EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F0   000059E3           CMP      R9,#+0
   \   000004F4   00009D15           LDRNE    R0,[SP, #+0]
   \   000004F8   07005011           CMPNE    R0,R7
   \   000004FC   7D0D8613           ORRNE    R0,R6,#0x1F40
   \   00000500   00005811           CMPNE    R8,R0
   \   00000504   C7FEFF1A           BNE      ??LoadConfigString_2
    438              switch (Device) {
   \   00000508   A80094E5           LDR      R0,[R4, #+168]
   \   0000050C   610040E2           SUB      R0,R0,#+97
   \   00000510   7C0D40E2           SUB      R0,R0,#+7936
   \   00000514   110050E3           CMP      R0,#+17
   \   00000518   1100008A           BHI      ??LoadConfigString_36
   \   0000051C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000520   0010D1E7           LDRB     R1,[R1, R0]
   \   00000524   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000528   040E0E0E           DC8      +4,+14,+14,+14
   \   0000052C   0E07070E           DC8      +14,+7,+7,+14
   \   00000530   090E0E0E           DC8      +9,+14,+14,+14
   \   00000534   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000538   0E0C0000           DC8      +14,+12,+0,+0
    439              case C_UART_DEVICE_TDU    :
    440                  BaudRate = DEFAULT_BAUDRATE;
   \                     ??LoadConfigString_37:
   \   0000053C   400BA0E3           MOV      R0,#+65536
   \   00000540   C20C80E3           ORR      R0,R0,#0xC200
   \   00000544   050000EA           B        ??LoadConfigString_38
    441              case C_UART_DEVICE_PC     :
    442              case C_UART_DEVICE_TCU    :
    443                  break;
    444              case C_UART_DEVICE_ANPRO3 :
    445              case C_UART_DEVICE_ANPRO10:
    446              case C_UART_DEVICE_SAAB   :
    447                  break;
    448              case C_UART_DEVICE_ZB     :
    449              case C_UART_DEVICE_ZB_RED :
    450                  BaudRate = 38400;
   \                     ??LoadConfigString_39:
   \   00000548   960CA0E3           MOV      R0,#+38400
   \   0000054C   030000EA           B        ??LoadConfigString_38
    451                  break;
    452              case C_UART_DEVICE_MODICON_MASTER    :
    453              case C_UART_DEVICE_MODICON_SLAVE     :
    454              case C_UART_DEVICE_MODICON_MASTER_TCP:
    455              case C_UART_DEVICE_MODICON_SLAVE_TCP :
    456              case C_UART_DEVICE_MODBUS_MASTER     :
    457              case C_UART_DEVICE_MODBUS_MASTER_TCP :
    458              case C_UART_DEVICE_MODBUS_SLAVE      :
    459              case C_UART_DEVICE_MODBUS_SLAVE_INV  :
    460              case C_UART_DEVICE_MODBUS_SLAVE_TCP  :
    461                  break;
    462              case C_UART_DEVICE_MODBUS_MASTER_INV:
    463                  ModbusCmdInputRegister = MBUS_CMD_READ_HOLDING_REGISTER;
   \                     ??LoadConfigString_40:
   \   00000550   0300A0E3           MOV      R0,#+3
   \   00000554   6C0084E5           STR      R0,[R4, #+108]
   \   00000558   010000EA           B        ??LoadConfigString_36
    464                  break;
    465              case C_UART_DEVICE_TPC:
    466                  BaudRate = 9600;
   \                     ??LoadConfigString_41:
   \   0000055C   960DA0E3           MOV      R0,#+9600
   \                     ??LoadConfigString_38:
   \   00000560   AC0084E5           STR      R0,[R4, #+172]
    467                  break;
    468              }
    469              return (NoError);
   \                     ??LoadConfigString_36:
   \   00000564   0900A0E1           MOV      R0,R9
   \   00000568   E4D08DE2           ADD      SP,SP,#+228
   \   0000056C                      REQUIRE ?Subroutine31
   \   0000056C                      ;; // Fall through to label ?Subroutine31
    470          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine31_0:
   \   00000008   ........           DC32     `?<Constant "Uart">`
    471          #endif
    472          //---------------------------------------------------------------------------
    473          

   \                                 In segment CODE, align 4, keep-with-next
    474          float TSNUart::RxPercent(void) {
   \                     ??RxPercent:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    475              return (100.0 * ((float)RxBytePerSecond * (1 + WordLength + StopBits) / ((float)BaudRate * UART_BYTE_COUNT_TIME / MSEC_TO_SEC)));
   \   00000008   AC0096E5           LDR      R0,[R6, #+172]
   \   0000000C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000010   ........           LDR      R1,??DataTable5  ;; 0x46ea6000
   \   00000014   ........           _BLF     __fMul,??__fMul??rA
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   ........           LDR      R3,??DataTable6  ;; 0x408f4000
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000028   0040A0E1           MOV      R4,R0
   \   0000002C   D40096E5           LDR      R0,[R6, #+212]
   \   00000030   ........           B        ?Subroutine29
    476          
    477          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0150A0E1           MOV      R5,R1
   \   00000004   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000008   B41096E5           LDR      R1,[R6, #+180]
   \   0000000C   0070A0E1           MOV      R7,R0
   \   00000010   B00096E5           LDR      R0,[R6, #+176]
   \   00000014   000081E0           ADD      R0,R1,R0
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000020   0710A0E1           MOV      R1,R7
   \   00000024   ........           _BLF     __fMul,??__fMul??rA
   \   00000028   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   0530A0E1           MOV      R3,R5
   \   00000034   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   4034A0E3           MOV      R3,#+1073741824
   \   00000040   593883E3           ORR      R3,R3,#0x590000
   \   00000044   ........           _BLF     __dMul,??__dMul??rA
   \   00000048   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000004C   F040BDE8           POP      {R4-R7,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    478          float TSNUart::TxPercent(void) {
   \                     ??TxPercent:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    479              return (100.0 * ((float)TxBytePerSecond * (1 + WordLength + StopBits) / ((float)BaudRate * UART_BYTE_COUNT_TIME / MSEC_TO_SEC)));
   \   00000008   AC0096E5           LDR      R0,[R6, #+172]
   \   0000000C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000010   ........           LDR      R1,??DataTable5  ;; 0x46ea6000
   \   00000014   ........           _BLF     __fMul,??__fMul??rA
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   ........           LDR      R3,??DataTable6  ;; 0x408f4000
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000028   0040A0E1           MOV      R4,R0
   \   0000002C   D80096E5           LDR      R0,[R6, #+216]
   \   00000030                      REQUIRE ?Subroutine29
   \   00000030                      ;; // Fall through to label ?Subroutine29
    480          }
    481          

   \                                 In segment CODE, align 4, keep-with-next
    482          bool TSNUart::HasMore(void) {
    483              return (true);
   \                     ??HasMore:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    484          }
    485          
    486          

   \                                 In segment CODE, align 4, keep-with-next
    487          void  TSNUart::SetRxTimeOut(int TimeOut) {
    488              RxTimeOut = TimeOut;
   \                     ??SetRxTimeOut:
   \   00000000   341080E5           STR      R1,[R0, #+52]
    489          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    490          
    491          #ifdef S2TXU
    492              #pragma diag_suppress=Pa082
    493          #endif

   \                                 In segment CODE, align 4, keep-with-next
    494          bool TSNUart::IsRxTimeOut(void) {
    495              bool TimeOut = false;
    496          #ifdef S2TXU
    497              if (RxTimeOut) {
   \                     ??IsRxTimeOut:
   \   00000000   342090E5           LDR      R2,[R0, #+52]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0600000A           BEQ      ??IsRxTimeOut_1
    498                  if (abs(OS_Time - LastRxTime) > RxTimeOut) {
   \   00000010   ........           LDR      R3,??DataTable7  ;; OS_Time
   \   00000014   003093E5           LDR      R3,[R3, #+0]
   \   00000018   480090E5           LDR      R0,[R0, #+72]
   \   0000001C   000053E0           SUBS     R0,R3,R0
   \   00000020   00006042           RSBMI    R0,R0,#+0
   \   00000024   000052E1           CMP      R2,R0
    499                      TimeOut = true;
   \   00000028   0110A0B3           MOVLT    R1,#+1
    500                  }
    501              }
    502          #endif
    503              return TimeOut;
   \                     ??IsRxTimeOut_1:
   \   0000002C   0100A0E1           MOV      R0,R1
   \   00000030   1EFF2FE1           BX       LR               ;; return
    504          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Uart">`:
   \   00000000   5561727400         DC8 "Uart"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   4D6F64627573       DC8 "Modbus Read Input Status: Unknown command!"
   \              205265616420
   \              496E70757420
   \              537461747573
   \              3A20556E6B6E
   \              6F776E20636F
   \              6D6D616E6421
   \              00          
   \   00000033   00                 DC8 0
   \   00000034   4D6F64627573       DC8 "Modbus Read Register: Unknown command!"
   \              205265616420
   \              526567697374
   \              65723A20556E
   \              6B6E6F776E20
   \              636F6D6D616E
   \              642100      
   \   0000005B   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TSNUart::delete ~TSNUart(TSNUart *)
   \                     `??delete ~TSNUart`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TSNUart_1`
   \   0000000C   ........           BL       `?~TSNUart`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TSNUart_1`:
   \   00000018   ........           B        ?Subroutine30

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNUart &TSNUart::new TSNUart(int, unsigned int, unsigned int, unsigned int, char, unsigned int, int, int, int, bool, int, bool, int, int)
   \                     `??new TSNUart`:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   3C409DE5           LDR      R4,[SP, #+60]
   \   00000008   40509DE5           LDR      R5,[SP, #+64]
   \   0000000C   44609DE5           LDR      R6,[SP, #+68]
   \   00000010   4870DDE5           LDRB     R7,[SP, #+72]
   \   00000014   4C809DE5           LDR      R8,[SP, #+76]
   \   00000018   5090DDE5           LDRB     R9,[SP, #+80]
   \   0000001C   54A09DE5           LDR      R10,[SP, #+84]
   \   00000020   58B09DE5           LDR      R11,[SP, #+88]
   \   00000024   E000A0E3           MOV      R0,#+224
   \   00000028   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1200000A           BEQ      `??new TSNUart_2`
   \   00000034   00082DE9           PUSH     {R11}
   \   00000038   00042DE9           PUSH     {R10}
   \   0000003C   00022DE9           PUSH     {R9}
   \   00000040   00012DE9           PUSH     {R8}
   \   00000044   80002DE9           PUSH     {R7}
   \   00000048   40002DE9           PUSH     {R6}
   \   0000004C   20002DE9           PUSH     {R5}
   \   00000050   10002DE9           PUSH     {R4}
   \   00000054   58109DE5           LDR      R1,[SP, #+88]
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   5810DDE5           LDRB     R1,[SP, #+88]
   \   00000060   02002DE9           PUSH     {R1}
   \   00000064   34109DE5           LDR      R1,[SP, #+52]
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   34309DE5           LDR      R3,[SP, #+52]
   \   00000070   30209DE5           LDR      R2,[SP, #+48]
   \   00000074   2C109DE5           LDR      R1,[SP, #+44]
   \   00000078   ........           BL       ??TSNUart
   \   0000007C   2CD08DE2           ADD      SP,SP,#+44
   \                     `??new TSNUart_2`:
   \   00000080   10D08DE2           ADD      SP,SP,#+16
   \   00000084   ........           B        ?Subroutine31

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNUart &TSNUart::new TSNUart()
   \                     `??new TSNUart_1`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   E000A0E3           MOV      R0,#+224
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TSNUart_3`
   \   00000014   ........           BL       ??TSNUart_2
   \                     `??new TSNUart_3`:
   \   00000018   ........           B        ?Subroutine32

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     OS_Time

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0060EA46           DC32     0x46ea6000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     OS_Time
    505          
    506          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     HandleUARTInterrupt                4
     TSNUart::ActivateIfTxRequest()    12
     TSNUart::ActivateTx()              0
     TSNUart::ClearRxBuffer()           0
     TSNUart::DeactivateTx()            0
     TSNUart::EnableInt()               0
     TSNUart::GetTaskPtr()              0
     TSNUart::HandleInterrupt()         0
     TSNUart::HasMore()                 0
     TSNUart::Initiate()                0
     TSNUart::IsRxTimeOut()             0
     TSNUart::LoadConfigString(TSNConfigString &)
                                      264
     TSNUart::MakeConfigString(int)  1516
     TSNUart::Receive()                 0
     TSNUart::Receive(unsigned char *, int, int)
                                        0
     TSNUart::RxPercent()              20
     TSNUart::Send(unsigned char *, int, char, bool)
                                        0
     TSNUart::SetProtocolState(ComState)
                                        0
     TSNUart::SetRxTimeOut(int)         0
     TSNUart::SetTaskPtr(OS_TASK *)     0
     TSNUart::TSNUart()                 8
     TSNUart::TSNUart(int, unsigned int, unsigned int, unsigned int, char, unsigned int, int, int, int, bool, int, bool, int, int)
                                       48
     TSNUart::Transmit()                0
     TSNUart::TxPercent()              20
     TSNUart::delete ~TSNUart(TSNUart *)
                                        8
     TSNUart::new TSNUart()             4
     TSNUart::new TSNUart(int, unsigned int, unsigned int, unsigned int, char, unsigned int, int, int, int, bool, int, bool, int, int)
                                       96
     TSNUart::~TSNUart()                4
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     TSNUart::Channels                28
     TSNUart::TSNUart(int, unsigned int, unsigned int, unsigned int, char, unsigned int, int, int, int, bool, int, bool, int, int)
                                     280
     TSNUart::TSNUart()              148
     ?Subroutine30                     8
     TSNUart::~TSNUart()              20
     ?Subroutine32                     8
     TSNUart::Initiate()             104
     TSNUart::EnableInt()              4
     TSNUart::Transmit()               4
     TSNUart::ActivateTx()             4
     TSNUart::DeactivateTx()           4
     TSNUart::ActivateIfTxRequest()  120
     TSNUart::Receive()                4
     TSNUart::ClearRxBuffer()          4
     TSNUart::HandleInterrupt()        4
     TSNUart::Send(unsigned char *, int, char, bool)
                                       4
     ?Subroutine33                     8
     TSNUart::Receive(unsigned char *, int, int)
                                       0
     TSNUart::SetTaskPtr(OS_TASK *)    8
     TSNUart::GetTaskPtr()             8
     TSNUart::SetProtocolState(ComState)
                                       8
     HandleUARTInterrupt              48
     TSNUart::MakeConfigString(int) 3384
     TSNUart::LoadConfigString(TSNConfigString &)
                                    1388
     ?Subroutine31                    12
     TSNUart::RxPercent()             52
     ?Subroutine29                    84
     TSNUart::TxPercent()             48
     TSNUart::HasMore()                8
     TSNUart::SetRxTimeOut(int)        8
     TSNUart::IsRxTimeOut()           52
     ?<Constant "Uart">               92
     TSNUart::delete ~TSNUart(TSNUart *)
                                      28
     __sti__routine()                  4
     TSNUart::new TSNUart(int, unsigned int, unsigned int, unsigned int, char, unsigned int, int, int, int, bool, int, bool, int, int)
                                     136
     TSNUart::new TSNUart()           28
     ??DataTable1                      4
     ??DataTable2                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
      Others                         508

 
 6 724 bytes in segment CODE
   132 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 6 056 bytes of CODE  memory (+ 684 bytes shared)
   132 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
