##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLowIGP.Cpp                 #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLowIGP.Cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLowIGP.lst             #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLowIGP.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLowIGP.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowIGP::~AlarmLowIGP()
   \                     `?~AlarmLowIGP`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLowIGP_1`
   \   00000014   0100000A           BEQ      `?~AlarmLowIGP_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLowIGP_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLowIGP_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLowIGP_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
      8          unsigned AlarmLowIGP::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
      9          AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *PROPtr)  {
   \                     ??AlarmLowIGP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AlarmLowPressure,??AlarmLowPressure??rA
   \   00000010   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     10              Init(PROPtr);
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Init
     11          }
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     12          
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *PROPtr, float Lim, bool Visible) : AlarmLowPressure(PROPtr)
   \                     ??AlarmLowIGP_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     15          {
   \   00000014   ........           _BLF     ??AlarmLowPressure_1,??AlarmLowPressure??rA_1
   \   00000018   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     16              Init(PROPtr);
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??Init
     17              IsVisible         = Visible;
   \   0000002C   B070C4E5           STRB     R7,[R4, #+176]
     18              Limit             = Lim;
   \   00000030   E46084E5           STR      R6,[R4, #+228]
     19          }
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   F040BDE8           POP      {R4-R7,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          void AlarmLowIGP::Init(PRogramObjectBase *PROPtr){
     22              NumberOfAlarmSettings++;
   \                     ??Init:
   \   00000000   6C209FE5           LDR      R2,??Init_1      ;; ??NumberOfAlarmSettings
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   013083E2           ADD      R3,R3,#+1
   \   0000000C   003082E5           STR      R3,[R2, #+0]
     23              IDNumber          = (ID_AL_LOW_INERT_GAS_PRESS << 16) + NumberOfAlarmSettings;
   \   00000010   B026A0E3           MOV      R2,#+184549376
   \   00000014   D32882E3           ORR      R2,R2,#0xD30000
   \   00000018   032082E0           ADD      R2,R2,R3
   \   0000001C   9C2080E5           STR      R2,[R0, #+156]
     24              Type              = ID_AL_LOW_INERT_GAS_PRESS;
   \   00000020   D320A0E3           MOV      R2,#+211
   \   00000024   B02E82E3           ORR      R2,R2,#0xB00
   \   00000028   A02080E5           STR      R2,[R0, #+160]
     25              PROPointer        = PROPtr;
   \   0000002C   C41080E5           STR      R1,[R0, #+196]
     26              PROTPressPtr      = (PROTankPressure*)PROPtr;
   \   00000030   EC1080E5           STR      R1,[R0, #+236]
     27              IsExtraAlarm      = true;
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   CD10C0E5           STRB     R1,[R0, #+205]
     28              Limit             = PROTPressPtr->LowIGP_Limit;
   \   0000003C   EC2090E5           LDR      R2,[R0, #+236]
   \   00000040   B82192E5           LDR      R2,[R2, #+440]
   \   00000044   E42080E5           STR      R2,[R0, #+228]
     29              Locked            = PROTPressPtr->LowIGP_Locked;
   \   00000048   EC2090E5           LDR      R2,[R0, #+236]
   \   0000004C   A721D2E5           LDRB     R2,[R2, #+423]
   \   00000050   E820C0E5           STRB     R2,[R0, #+232]
     30              MessageKey        = L_WORD1101;  // Lo IGP
   \   00000054   4D20A0E3           MOV      R2,#+77
   \   00000058   402E82E3           ORR      R2,R2,#0x400
   \   0000005C   B82080E5           STR      R2,[R0, #+184]
     31              TPCMessageKey     = L_WORD1102;  // L IGP
   \   00000060   012082E2           ADD      R2,R2,#+1
   \   00000064   B42080E5           STR      R2,[R0, #+180]
     32              PROTankPressure::hasIGPAlarms = true;
   \   00000068   08009FE5           LDR      R0,??Init_1+0x4  ;; ??hasIGPAlarms
   \   0000006C   0010C0E5           STRB     R1,[R0, #+0]
     33          }
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??Init_1:
   \   00000074   ........           DC32     ??NumberOfAlarmSettings
   \   00000078   ........           DC32     ??hasIGPAlarms
     34          
     35          ///////////////////////////////////////////////////////////////
     36          //
     37          // Routines for the librarian for input
     38          //
     39          ///////////////////////////////////////////////////////////////
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          int AlarmLowIGP::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   8490DDE5           LDRB     R9,[SP, #+132]
   \   00000010   88409DE5           LDR      R4,[SP, #+136]
   \   00000014   0170A0E1           MOV      R7,R1
     42              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     43              bool tmpLock = Locked;
     44              if (Locked) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   000050E3           CMP      R0,#+0
     45                  Status = E_NO_INPUT_PERMISSION;
   \   00000030   2A10A013           MOVNE    R1,#+42
   \   00000034   00108D15           STRNE    R1,[SP, #+0]
   \   00000038   7D00001A           BNE      ??PutValue_3
     46              } else {
     47                  float OrgLimit = Limit;
   \   0000003C   E46095E5           LDR      R6,[R5, #+228]
     48                  int Key = FindConfigKey(NewValue);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   40008DE2           ADD      R0,SP,#+64
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   FC019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   00A090E5           LDR      R10,[R0, #+0]
   \   00000058   0810A0E1           MOV      R1,R8
   \   0000005C   0A30A0E1           MOV      R3,R10
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   40008DE2           ADD      R0,SP,#+64
   \   0000006C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000070   00B0A0E1           MOV      R11,R0
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   40008DE2           ADD      R0,SP,#+64
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
     49                  switch ( Key ) {
   \   00000084   64B04BE2           SUB      R11,R11,#+100
   \   00000088   05005BE3           CMP      R11,#+5
   \   0000008C   1100008A           BHI      ??PutValue_5
   \   00000090   010F8FE2           ADR      R0,??PutValue_1
   \   00000094   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000098   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   0000009C   010C010C           DC8      +1,+12,+1,+12
   \   000000A0   010C0000           DC8      +1,+12,+0,+0
     50                  case C_ON:
     51                  case C_OPEN:
     52                  case C_ENABLE:
     53                      SetEnable(EnableTrue);
   \                     ??PutValue_6:
   \   000000A4   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_7:
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??SetEnable,??SetEnable??rA
     54                      PROTPressPtr->SetState(tUndefined);
   \   000000B0   EC2095E5           LDR      R2,[R5, #+236]
   \   000000B4   0410A0E3           MOV      R1,#+4
   \   000000B8   0200A0E1           MOV      R0,R2
   \   000000BC   A42092E5           LDR      R2,[R2, #+164]
   \   000000C0   7C2092E5           LDR      R2,[R2, #+124]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   12FF2FE1           BX       R2
   \   000000CC   410000EA           B        ??PutValue_8
     55                      break;
     56                  case C_OFF:
     57                  case C_CLOSE:
     58                  case C_DISABLE:
     59                      SetEnable(EnableFalse);
   \                     ??PutValue_9:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   F3FFFFEA           B        ??PutValue_7
     60                      PROTPressPtr->SetState(tUndefined);
     61                      break;
     62                  default:
     63                      switch ( ValueId ) {
   \                     ??PutValue_5:
   \   000000D8   3210A0E3           MOV      R1,#+50
   \   000000DC   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000E0   010057E1           CMP      R7,R1
   \   000000E4   2400001A           BNE      ??PutValue_10
     64                      case SVT_AL_LIMIT:
     65                          {
     66                              float Value = ConvertToSi(NewValue, ValUnitId = PRESSURE_UNIT1, Status, PROTPressPtr->LowIGP_Limit, PROTPressPtr->HighIGP_Limit);
   \   000000E8   0610A0E3           MOV      R1,#+6
   \   000000EC   04108DE5           STR      R1,[SP, #+4]
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   24008DE2           ADD      R0,SP,#+36
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0A30A0E1           MOV      R3,R10
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0810A0E1           MOV      R1,R8
   \   0000010C   24008DE2           ADD      R0,SP,#+36
   \   00000110   ........           _BLF     ??assign,??assign??rA
   \   00000114   EC7095E5           LDR      R7,[R5, #+236]
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   0010A0E1           MOV      R1,R0
   \   00000120   03002DE9           PUSH     {R0,R1}
   \   00000124   BC0197E5           LDR      R0,[R7, #+444]
   \   00000128   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000012C   03002DE9           PUSH     {R0,R1}
   \   00000130   B80197E5           LDR      R0,[R7, #+440]
   \   00000134   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000138   03002DE9           PUSH     {R0,R1}
   \   0000013C   18208DE2           ADD      R2,SP,#+24
   \   00000140   3C008DE2           ADD      R0,SP,#+60
   \   00000144   0800BDE8           POP      {R3}
   \   00000148   0610A0E3           MOV      R1,#+6
   \   0000014C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000150   0070A0E1           MOV      R7,R0
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   38008DE2           ADD      R0,SP,#+56
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
     67                              if ( Status == E_NO_ERR ) {
   \   00000164   14009DE5           LDR      R0,[SP, #+20]
   \   00000168   14D08DE2           ADD      SP,SP,#+20
   \   0000016C   000050E3           CMP      R0,#+0
   \   00000170   1800001A           BNE      ??PutValue_8
     68                                  Limit = Value;
   \   00000174   E47085E5           STR      R7,[R5, #+228]
   \   00000178   190000EA           B        ??PutValue_11
     69                              }
     70                          }
     71                          break;
     72                      default:
     73                          Status = AlarmLowPressure::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_10:
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   08008DE2           ADD      R0,SP,#+8
   \   00000188   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000018C   0A30A0E1           MOV      R3,R10
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0810A0E1           MOV      R1,R8
   \   00000198   08008DE2           ADD      R0,SP,#+8
   \   0000019C   ........           _BLF     ??assign,??assign??rA
   \   000001A0   04008DE2           ADD      R0,SP,#+4
   \   000001A4   01002DE9           PUSH     {R0}
   \   000001A8   00022DE9           PUSH     {R9}
   \   000001AC   64209DE5           LDR      R2,[SP, #+100]
   \   000001B0   10308DE2           ADD      R3,SP,#+16
   \   000001B4   0710A0E1           MOV      R1,R7
   \   000001B8   0500A0E1           MOV      R0,R5
   \   000001BC   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001C0   08008DE5           STR      R0,[SP, #+8]
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   10008DE2           ADD      R0,SP,#+16
   \   000001D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D4   08D08DE2           ADD      SP,SP,#+8
     74                          break;
     75                      }
     76                      break; // switch ( ValueId )
     77                  } //switch ( Key )
     78                  if ( Status == E_NO_ERR ) {
   \                     ??PutValue_8:
   \   000001D8   00009DE5           LDR      R0,[SP, #+0]
   \   000001DC   000050E3           CMP      R0,#+0
   \   000001E0   1300001A           BNE      ??PutValue_3
     79          			SetModifiedFlag();
   \                     ??PutValue_11:
   \   000001E4   A41095E5           LDR      R1,[R5, #+164]
   \   000001E8   0500A0E1           MOV      R0,R5
   \   000001EC   541091E5           LDR      R1,[R1, #+84]
   \   000001F0   0FE0A0E1           MOV      LR,PC
   \   000001F4   11FF2FE1           BX       R1
     80          			if ( Limit != OrgLimit ) {
   \   000001F8   E40095E5           LDR      R0,[R5, #+228]
   \   000001FC   0610A0E1           MOV      R1,R6
   \   00000200   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   0900000A           BEQ      ??PutValue_3
     81          				LogEvent("New limit");
   \   0000020C   40109FE5           LDR      R1,??PutValue_4+0x4  ;; `?<Constant "New limit">`
   \   00000210   08008DE2           ADD      R0,SP,#+8
   \   00000214   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000218   0010A0E1           MOV      R1,R0
   \   0000021C   0500A0E1           MOV      R0,R5
   \   00000220   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   08008DE2           ADD      R0,SP,#+8
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
     82          			}
     83                  }
     84              } // if ( Locked ) else
     85              if ( UnitId ) {
   \                     ??PutValue_3:
   \   00000234   000054E3           CMP      R4,#+0
     86                  *UnitId = ValUnitId;
   \   00000238   04009D15           LDRNE    R0,[SP, #+4]
   \   0000023C   00008415           STRNE    R0,[R4, #+0]
     87              }
     88              return (Status);
   \   00000240   00009DE5           LDR      R0,[SP, #+0]
   \   00000244   60D08DE2           ADD      SP,SP,#+96
   \   00000248   F04FBDE8           POP      {R4-R11,LR}
   \   0000024C   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   00000250   ........           DC32     ??npos
   \   00000254   ........           DC32     `?<Constant "New limit">`
     89          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowIGP &AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *)
   \                     `??new AlarmLowIGP`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmLowIGP_2`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmLowIGP
   \                     `??new AlarmLowIGP_2`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowIGP &AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *, float, bool)
   \                     `??new AlarmLowIGP_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLowIGP_3`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLowIGP_1
   \                     `??new AlarmLowIGP_3`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl
     90          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *)
                                       12
     AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *, float, bool)
                                       20
     AlarmLowIGP::Init(PRogramObjectBase *)
                                        0
     AlarmLowIGP::PutValue(int, int, AnsiString, bool, int *)
                                      156
     AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *)
                                        8
     AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *, float, bool)
                                       16
     AlarmLowIGP::~AlarmLowIGP()       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLowIGP::~AlarmLowIGP()      56
     AlarmLowIGP::NumberOfAlarmSettings
                                       4
     AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *)
                                      48
     AlarmLowIGP::AlarmLowIGP(PRogramObjectBase *, float, bool)
                                      64
     AlarmLowIGP::Init(PRogramObjectBase *)
                                     124
     AlarmLowIGP::PutValue(int, int, AnsiString, bool, int *)
                                     600
     ?<Constant "New limit">          12
     AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *)
                                      40
     AlarmLowIGP::new AlarmLowIGP(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         340

 
 1 204 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 944 bytes of CODE  memory (+ 276 bytes shared)
 128 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
