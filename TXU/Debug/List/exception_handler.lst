##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:20:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\exception_handler.c                #
#    Command line    =  D:\S2Prog\TXU\src\exception_handler.c --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --dlib_config     #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\LIB\dl4tpainl8n.h" -I              #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\exception_handler.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\exception_handler.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\exception_handler.c
      1          ////////////////////////////////////////////////////////////////////////////////
      2          //
      3          // ARM exception analyer. At the moment, it's just a simple helper to ease
      4          // the backtracking process.
      5          //
      6          // Revision History
      7          // - June/1/2016 : humble initial release
      8          //
      9          ////////////////////////////////////////////////////////////////////////////////
     10          #include <stdio.h>
     11          #include "RTOS.H"
     12          
     13          ////////////////////////////////////////////////////////////////////////////////
     14          //
     15          // externs from exception_helper.s
     16          //
     17          ////////////////////////////////////////////////////////////////////////////////
     18          #define CRASH_SC2410()                    \
     19          {                                         \
     20            char* __crash__ = (char*)0x70000000;    \
     21            *__crash__ = 123;                       \
     22          }
     23          
     24          typedef void*     regparm_t;
     25          
     26          typedef struct 
     27          {
     28            regparm_t       r0;
     29            regparm_t       r1;
     30            regparm_t       r2;
     31            regparm_t       r3;
     32            regparm_t       r4;
     33            regparm_t       r5;
     34            regparm_t       r6;
     35            regparm_t       r7;
     36            regparm_t       r8;
     37            regparm_t       r9;
     38            regparm_t       r10;
     39            regparm_t       r11;
     40            regparm_t       r12;
     41            regparm_t       r13_sp;
     42            regparm_t       r14_lr_sys_mode_pc;
     43            regparm_t       cpsr;
     44            regparm_t       spsr;
     45            regparm_t       r13_sp_sys;
     46            regparm_t       r14_lr_sys;
     47          } ARMRegisters;
     48          
     49          ////////////////////////////////////////////////////////////////////////////////
     50          //
     51          // module privates
     52          //
     53          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment DATA_Z, align 4, align-sorted
     54          volatile unsigned int           _ever_aborted               = 0;
   \                     _ever_aborted:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     55          volatile unsigned int           _data_abort_occurred        = 0;
   \                     _data_abort_occurred:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     56          volatile unsigned int           _prefetch_abort_occurred    = 0;
   \                     _prefetch_abort_occurred:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     57          volatile unsigned int           _undef_abort_occurred       = 0;
   \                     _undef_abort_occurred:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     58          ARMRegisters                    _exception_backup_regs;
   \                     _exception_backup_regs:
   \   00000000                      DS8 76

   \                                 In segment DATA_Z, align 4, align-sorted
     59          volatile OS_TASKID              _problem_task = NULL;
   \                     _problem_task:
   \   00000000                      DS8 4
     60          
     61          ////////////////////////////////////////////////////////////////////////////////
     62          //
     63          // simple memory logger
     64          //
     65          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     66          void
     67          handle_abort()
     68          {
     69            // accordig to emBOS ARM manual,
     70            // emBOS and all the applications run in system bode
     71            // and ARM exceptions are running in
     72            // each exception mode.
     73            // So here, we need to extract banked system mode registers
     74            // to gather evidence on what really caused the freaking exception
     75            // -hkim
     76            if(_ever_aborted)
   \                     handle_abort:
   \   00000000   18009FE5           LDR      R0,??handle_abort_0  ;; _ever_aborted
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000000A           BEQ      ??handle_abort_1
     77            {
     78              // never return
     79              for(;;);
   \                     ??handle_abort_2:
   \   00000010   FEFFFFEA           B        ??handle_abort_2
     80            }
     81          
     82            _problem_task = OS_GetTaskID();
     83            (void)_problem_task;
     84            _ever_aborted = 1;
   \                     ??handle_abort_1:
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
     85            
     86            // never return
     87            for(;;);
   \                     ??handle_abort_3:
   \   0000001C   FEFFFFEA           B        ??handle_abort_3
   \                     ??handle_abort_0:
   \   00000020   ........           DC32     _ever_aborted
     88          }

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     handle_abort     0


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _ever_aborted               4
     _data_abort_occurred        4
     _prefetch_abort_occurred    4
     _undef_abort_occurred       4
     _exception_backup_regs     76
     _problem_task               4
     handle_abort               36
      Others                    16

 
 40 bytes in segment CODE
 96 bytes in segment DATA_Z
 12 bytes in segment INITTAB
 
 36 bytes of CODE memory (+ 16 bytes shared)
 96 bytes of DATA memory

Errors: none
Warnings: none
