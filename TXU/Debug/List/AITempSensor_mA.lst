##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:38 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AITempSensor_mA.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\AITempSensor_mA.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AITempSensor_mA.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AITempSensor_mA.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AITempSensor_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
      8          AITempSensor_mA::AITempSensor_mA(int SnsType)
   \                     ??AITempSensor_mA:
   \   00000000   7F402DE9           PUSH     {R0-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
      9          {
   \   0000000C   ........           _BLF     ??AITempSensor,??AITempSensor??rA
   \   00000010   6C009FE5           LDR      R0,??AITempSensor_mA_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     10              Type = SnsType;
   \   00000018   A05084E5           STR      R5,[R4, #+160]
     11              AlarmmAmpShortCircuit *ShortCircuitPtr      = new AlarmmAmpShortCircuit( this);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     `??new AlarmmAmpShortCircuit`,`??new AlarmmAmpShortCircuit??rA`
   \   00000024   0050A0E1           MOV      R5,R0
     12              AlarmmAmpOpenLoop       *OpenLoopPtr        = new AlarmmAmpOpenLoop( this);
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     `??new AlarmmAmpOpenLoop`,`??new AlarmmAmpOpenLoop??rA`
   \   00000034   0060A0E1           MOV      R6,R0
     13              AlarmSet.insert(ShortCircuitPtr);
   \   00000038   0520A0E1           MOV      R2,R5
   \   0000003C   C01084E2           ADD      R1,R4,#+192
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??insert,??insert??rA
     14              AlarmSet.insert(OpenLoopPtr);
   \   00000048   0620A0E1           MOV      R2,R6
   \   0000004C   C01084E2           ADD      R1,R4,#+192
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??insert,??insert??rA
     15          
     16              // Init the other variables
     17              MaxRange  = 100.0;
   \   00000058   4004A0E3           MOV      R0,#+1073741824
   \   0000005C   B20780E3           ORR      R0,R0,#0x2C80000
   \   00000060   600184E5           STR      R0,[R4, #+352]
     18              MinRange  = 0.0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   5C0184E5           STR      R0,[R4, #+348]
     19              MakeConstants();
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       ??MakeConstants
     20          }
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   10D08DE2           ADD      SP,SP,#+16
   \   0000007C   7040BDE8           POP      {R4-R6,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
   \                     ??AITempSensor_mA_1:
   \   00000084   ........           DC32     ??__vtbl
     21          //---------------------------------------------------------------------------
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          AITempSensor_mA::~AITempSensor_mA(void)
     24          {
   \                     `?~AITempSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AITempSensor_mA_1`
     25          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AITempSensor`,`?~AITempSensor??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AITempSensor_mA_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AITempSensor_mA_1`:
   \   0000002C   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     26          //---------------------------------------------------------------------------
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          U8 AITempSensor_mA::GetFilter(void)
     29          {
     30              return(FILTER_MA_TEMP);
   \                     ??GetFilter:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     31          }
     32          
     33          ///////////////////////////////////////////////////////////////
     34          //
     35          // Routines for the Configuration
     36          //
     37          ///////////////////////////////////////////////////////////////
     38          
     39          /*
     40          AnsiString AITempSensor_mA::MakeConfigString(int ExtraTabs)
     41          {
     42              AnsiString TabStr1= AnsiString::StringOfChar('\t',1+ExtraTabs);
     43              AnsiString TabStr2= AnsiString::StringOfChar('\t',2+ExtraTabs);
     44              AnsiString TabStr3= AnsiString::StringOfChar('\t',3+ExtraTabs);
     45              AnsiString TabStr4= AnsiString::StringOfChar('\t',4+ExtraTabs);
     46              AnsiString TabStr5= AnsiString::StringOfChar('\t',5+ExtraTabs);
     47              AnsiString TabStr6= AnsiString::StringOfChar('\t',6+ExtraTabs);
     48              AnsiString LocalString;
     49              LocalString +=TabStr1+KeyWord(Type)+CrLfStr;
     50              LocalString += AnalogInput::MakeConfigString(1);     //common
     51              LocalString +=TabStr1+KeyWord(C_AI_END)+CrLfStr;
     52              LocalString += CrLfStr;
     53          
     54              return(LocalString);
     55          }
     56          */
     57          
     58          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     59          bool AITempSensor_mA::LoadConfigString(TSNConfigString &ConfigString)
     60          {
   \                     ??LoadConfigString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     61              bool NoError = AITempSensor::LoadConfigString(ConfigString);
   \   00000008   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000000C   0050A0E1           MOV      R5,R0
     62              MakeConstants();
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??MakeConstants
     63              return(NoError);
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C                      REQUIRE ?Subroutine14
   \   0000001C                      ;; // Fall through to label ?Subroutine14
     64          }
     65          
     66          
     67          ///////////////////////////////////////////////////////////////
     68          //
     69          // Routines for the librarian for input
     70          //
     71          ///////////////////////////////////////////////////////////////
     72          
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          int AITempSensor_mA::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     75          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     76              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     77              switch ( ValueId ) {
     78              case SVT_AI_OFFSET   :
     79              case SVT_AI_CALC_VAL :
     80              default:
     81                  Status = AITempSensor::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000034   80009FE5           LDR      R0,??PutValue_2  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   00012DE9           PUSH     {R8}
   \   00000058   0C308DE2           ADD      R3,SP,#+12
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000006C   0050A0E1           MOV      R5,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     82                  break;
     83              }
     84              if ( Status==E_NO_ERR ) {
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   0400001A           BNE      ??PutValue_3
     85                  SetModifiedFlag();
   \   0000008C   A41094E5           LDR      R1,[R4, #+164]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   541091E5           LDR      R1,[R1, #+84]
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   11FF2FE1           BX       R1
     86              }
     87              if ( UnitId ) {
   \                     ??PutValue_3:
   \   000000A0   000059E3           CMP      R9,#+0
     88                  *UnitId = ValUnitId;
   \   000000A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A8   00008915           STRNE    R0,[R9, #+0]
     89              }
     90              return(Status);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   20D08DE2           ADD      SP,SP,#+32
   \   000000B4   F043BDE8           POP      {R4-R9,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_2:
   \   000000BC   ........           DC32     ??npos
     91          }
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          int  AITempSensor_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     94          {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
     95              int Status = GETVAL_NO_ERR;
     96              switch ( ValueId ) {
     97              case SVT_AI_OFFSET   :
     98              case SVT_AI_CALC_VAL :
     99              default:
    100                  Status = AITempSensor::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
    101                  break;
    102              }
    103              return(Status);
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    104          }
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          int AITempSensor_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    107          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    108              return(AITempSensor::GetStringValue(ValueId,Index, MyString));
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine15
    109          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          int AITempSensor_mA::PutFloatValue( int ValueId, float NewValue)
    112          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    113              return(AITempSensor::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine15
   \   00000008                      ;; // Fall through to label ?Subroutine15
    114          }
    115          //////////////////////////////////////////////////////////////////
    116          //
    117          // Sensor calculations
    118          //
    119          //////////////////////////////////////////////////////////////////
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          void AITempSensor_mA::MakeConstants(void)
    122          {
   \                     ??MakeConstants:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   607196E5           LDR      R7,[R6, #+352]
   \   0000000C   5C1196E5           LDR      R1,[R6, #+348]
   \   00000010   0700A0E1           MOV      R0,R7
   \   00000014   ........           _BLF     __fSub,??__fSub??rA
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   44209FE5           LDR      R2,??MakeConstants_1  ;; 0xffffffffd2f1a9fc
   \   00000020   44309FE5           LDR      R3,??MakeConstants_1+0x4  ;; 0x3f90624d
   \   00000024   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000028   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000002C   880186E5           STR      R0,[R6, #+392]
    123              a             =( MaxRange - MinRange) / ( 0.02 - 0.004);
    124              b             = MaxRange - a*0.02;
   \   00000030   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000034   34209FE5           LDR      R2,??MakeConstants_1+0x8  ;; 0x47ae147b
   \   00000038   34309FE5           LDR      R3,??MakeConstants_1+0xC  ;; 0x3f947ae1
   \   0000003C   ........           _BLF     __dMul,??__dMul??rA
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   0150A0E1           MOV      R5,R1
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000050   0420A0E1           MOV      R2,R4
   \   00000054   0530A0E1           MOV      R3,R5
   \   00000058   ........           _BLF     __dSub,??__dSub??rA
   \   0000005C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000060   8C0186E5           STR      R0,[R6, #+396]
    125          }
   \   00000064   ........           B        ?Subroutine16
   \                     ??MakeConstants_1:
   \   00000068   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   0000006C   4D62903F           DC32     0x3f90624d
   \   00000070   7B14AE47           DC32     0x47ae147b
   \   00000074   E17A943F           DC32     0x3f947ae1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine16_0:
   \   00000008   008066C0           DC32     0xffffffffc0668000
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          float AITempSensor_mA::Get_Temp(float Amp)
    128          {
   \                     ??Get_Temp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
    129              float Temp = a*Amp + b;
    130              return(Temp);
   \   0000000C   881194E5           LDR      R1,[R4, #+392]
   \   00000010   ........           _BLF     __fMul,??__fMul??rA
   \   00000014   8C1194E5           LDR      R1,[R4, #+396]
   \   00000018   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000001C                      REQUIRE ?Subroutine13
   \   0000001C                      ;; // Fall through to label ?Subroutine13
    131          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          float AITempSensor_mA::Calculate(void)
    134          {
   \                     ??Calculate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    135              if ( CanCalculate() ) {
   \   00000008   525FA0E3           MOV      R5,#+328
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1E00000A           BEQ      ??Calculate_1
    136                  // This value should be checked for alarm
    137                  CalcValue = Gain*Get_Temp(FilteredValue)-Offset;
   \   00000018   441194E5           LDR      R1,[R4, #+324]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Get_Temp
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   3C0194E5           LDR      R0,[R4, #+316]
   \   0000002C   ........           _BLF     __fMul,??__fMul??rA
   \   00000030   401194E5           LDR      R1,[R4, #+320]
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   040085E7           STR      R0,[R5, +R4]
    138                  if ( CalcValue > MAX_TEMP || CalcValue < MIN_TEMP ) {
   \   0000003C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   0170A0E1           MOV      R7,R1
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   4034A0E3           MOV      R3,#+1073741824
   \   00000050   693883E3           ORR      R3,R3,#0x690000
   \   00000054   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0600001A           BNE      ??Calculate_2
   \   00000060   ........           LDR      R3,??Subroutine16_0  ;; 0xffffffffc0668000
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   ........           _BLF     __dLess,??__dLess??rA
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0000000A           BEQ      ??Calculate_3
    139                      Failure = true;
   \                     ??Calculate_2:
   \   0000007C   0100A0E3           MOV      R0,#+1
    140                  } else {
    141                      Failure = false;
   \                     ??Calculate_3:
   \   00000080   3801C4E5           STRB     R0,[R4, #+312]
    142                  }
    143                  ResultOK  = !Failure;
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0100A003           MOVEQ    R0,#+1
   \   0000008C   0000A013           MOVNE    R0,#+0
   \   00000090   3601C4E5           STRB     R0,[R4, #+310]
    144              }
    145              return(CalcValue);
   \                     ??Calculate_1:
   \   00000094   040095E7           LDR      R0,[R5, +R4]
   \   00000098                      REQUIRE ?Subroutine16
   \   00000098                      ;; // Fall through to label ?Subroutine16
    146          
    147          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AITempSensor_mA &AITempSensor_mA::new AITempSensor_mA(int)
   \                     `??new AITempSensor_mA`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   650FA0E3           MOV      R0,#+404
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AITempSensor_mA_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AITempSensor_mA
   \                     `??new AITempSensor_mA_1`:
   \   00000020   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    148          
    149          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AITempSensor_mA::AITempSensor_mA(int)
                                       32
     AITempSensor_mA::Calculate()      20
     AITempSensor_mA::GetFilter()       0
     AITempSensor_mA::GetStringValue(int, int, AnsiString &)
                                        4
     AITempSensor_mA::GetValue(int, int, float &, int &, int &)
                                       16
     AITempSensor_mA::Get_Temp(float)
                                        8
     AITempSensor_mA::LoadConfigString(TSNConfigString &)
                                       12
     AITempSensor_mA::MakeConstants()
                                       20
     AITempSensor_mA::PutFloatValue(int, float)
                                        4
     AITempSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AITempSensor_mA::new AITempSensor_mA(int)
                                        8
     AITempSensor_mA::~AITempSensor_mA()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     AITempSensor_mA::AITempSensor_mA(int)
                                     136
     AITempSensor_mA::~AITempSensor_mA()
                                      48
     ?Subroutine14                     8
     AITempSensor_mA::GetFilter()      8
     AITempSensor_mA::LoadConfigString(TSNConfigString &)
                                      28
     AITempSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                     192
     AITempSensor_mA::GetValue(int, int, float &, int &, int &)
                                      32
     AITempSensor_mA::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine15                     8
     AITempSensor_mA::PutFloatValue(int, float)
                                       8
     AITempSensor_mA::MakeConstants()
                                     120
     ?Subroutine16                    12
     AITempSensor_mA::Get_Temp(float)
                                      28
     ?Subroutine13                     8
     AITempSensor_mA::Calculate()    152
     AITempSensor_mA::new AITempSensor_mA(int)
                                      36
     __sti__routine()                  4
      Others                         556

 
 2 172 bytes in segment CODE
   140 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 844 bytes of CODE  memory (+ 1 332 bytes shared)
 140 bytes of CONST memory

Errors: none
Warnings: none
