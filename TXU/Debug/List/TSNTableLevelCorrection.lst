##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNTableLevelCorrection.cpp     #
#    Command line    =  D:\S2Prog\Shared\Src\TSNTableLevelCorrection.cpp     #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNTableLevelCorrection.lst #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNTableLevelCorrection.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNTableLevelCorrection.cpp
      1          #include <TSNIncludes.h>

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void reverse(float *, float *)
   \                     ??reverse:
   \   00000000   030000EA           B        ??reverse_1
   \                     ??reverse_2:
   \   00000004   002090E5           LDR      R2,[R0, #+0]
   \   00000008   043031E5           LDR      R3,[R1, #-4]!
   \   0000000C   ........           STR      R3,[R0], #+4
   \   00000010   002081E5           STR      R2,[R1, #+0]
   \                     ??reverse_1:
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   F9FFFF3A           BCC      ??reverse_2
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_EraseAll()
   \                     ??_EraseAll:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   045094E5           LDR      R5,[R4, #+4]
   \   0000000C   006094E5           LDR      R6,[R4, #+0]
   \   00000010   020000EA           B        ??_EraseAll_1
   \                     ??_EraseAll_2:
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   ........           _BLF     `?~<unnamed>`,`?~<unnamed>??rA`
   \   0000001C   106086E2           ADD      R6,R6,#+16
   \                     ??_EraseAll_1:
   \   00000020   050056E1           CMP      R6,R5
   \   00000024   FAFFFF1A           BNE      ??_EraseAll_2
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   040084E5           STR      R0,[R4, #+4]
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0300000A           BEQ      ??_Tidy0_2
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_EraseAll,??_EraseAll??rA
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Assign(_Vector_impl<float, allocator<float>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_1:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_1
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection::LevelEntry * _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Make_room(TSNTableLevelCorrection::LevelEntry *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F1472DE9           PUSH     {R0,R4-R10,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   000095E5           LDR      R0,[R5, #+0]
   \   0000000C   048095E5           LDR      R8,[R5, #+4]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   081095E5           LDR      R1,[R5, #+8]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   001041E0           SUB      R1,R1,R0
   \   00000020   2172A0E1           LSR      R7,R1,#+4
   \   00000024   000048E0           SUB      R0,R8,R0
   \   00000028   2002A0E1           LSR      R0,R0,#+4
   \   0000002C   000056E3           CMP      R6,#+0
   \   00000030   5300000A           BEQ      ??_Make_room_4
   \   00000034   F014E0E3           MVN      R1,#-268435456
   \   00000038   001041E0           SUB      R1,R1,R0
   \   0000003C   060051E1           CMP      R1,R6
   \   00000040   4F00003A           BCC      ??_Make_room_4
   \   00000044   009086E0           ADD      R9,R6,R0
   \   00000048   090057E1           CMP      R7,R9
   \   0000004C   1E00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   F014E0E3           MVN      R1,#-268435456
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   090057E1           CMP      R7,R9
   \   0000006C   0970A031           MOVCC    R7,R9
   \   00000070   0702A0E1           LSL      R0,R7,#+4
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   001095E5           LDR      R1,[R5, #+0]
   \   0000007C   0080A0E1           MOV      R8,R0
   \   00000080   0830A0E1           MOV      R3,R8
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   00000090   042095E5           LDR      R2,[R5, #+4]
   \   00000094   00A0A0E1           MOV      R10,R0
   \   00000098   06328AE0           ADD      R3,R10,R6, LSL #+4
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   000000B0   070288E0           ADD      R0,R8,R7, LSL #+4
   \   000000B4   080085E5           STR      R0,[R5, #+8]
   \   000000B8   090288E0           ADD      R0,R8,R9, LSL #+4
   \   000000BC   040085E5           STR      R0,[R5, #+4]
   \   000000C0   008085E5           STR      R8,[R5, #+0]
   \   000000C4   0A40A0E1           MOV      R4,R10
   \   000000C8   2D0000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000CC   067284E0           ADD      R7,R4,R6, LSL #+4
   \   000000D0   2802A0E1           LSR      R0,R8,#+4
   \   000000D4   240240E0           SUB      R0,R0,R4, LSR #+4
   \   000000D8   060050E1           CMP      R0,R6
   \   000000DC   1000002A           BCS      ??_Make_room_6
   \   000000E0   0730A0E1           MOV      R3,R7
   \   000000E4   0820A0E1           MOV      R2,R8
   \   000000E8   0410A0E1           MOV      R1,R4
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   000000F4   047095E5           LDR      R7,[R5, #+4]
   \   000000F8   0480A0E1           MOV      R8,R4
   \   000000FC   020000EA           B        ??_Make_room_7
   \                     ??_Make_room_8:
   \   00000100   0800A0E1           MOV      R0,R8
   \   00000104   ........           _BLF     `?~<unnamed>`,`?~<unnamed>??rA`
   \   00000108   108088E2           ADD      R8,R8,#+16
   \                     ??_Make_room_7:
   \   0000010C   070058E1           CMP      R8,R7
   \   00000110   FAFFFF1A           BNE      ??_Make_room_8
   \   00000114   040095E5           LDR      R0,[R5, #+4]
   \   00000118   060280E0           ADD      R0,R0,R6, LSL #+4
   \   0000011C   040085E5           STR      R0,[R5, #+4]
   \   00000120   170000EA           B        ??_Make_room_4
   \                     ??_Make_room_6:
   \   00000124   0602A0E1           LSL      R0,R6,#+4
   \   00000128   000060E2           RSB      R0,R0,#+0
   \   0000012C   086080E0           ADD      R6,R0,R8
   \   00000130   0830A0E1           MOV      R3,R8
   \   00000134   0820A0E1           MOV      R2,R8
   \   00000138   0610A0E1           MOV      R1,R6
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   00000144   040085E5           STR      R0,[R5, #+4]
   \   00000148   040000EA           B        ??_Make_room_9
   \                     ??_Make_room_10:
   \   0000014C   100036E5           LDR      R0,[R6, #-16]!
   \   00000150   041086E2           ADD      R1,R6,#+4
   \   00000154   100028E5           STR      R0,[R8, #-16]!
   \   00000158   040088E2           ADD      R0,R8,#+4
   \   0000015C   ........           _BLF     ??_Assign,??_Assign??rA
   \                     ??_Make_room_9:
   \   00000160   060054E1           CMP      R4,R6
   \   00000164   F8FFFF1A           BNE      ??_Make_room_10
   \   00000168   0450A0E1           MOV      R5,R4
   \   0000016C   020000EA           B        ??_Make_room_11
   \                     ??_Make_room_12:
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           _BLF     `?~<unnamed>`,`?~<unnamed>??rA`
   \   00000178   105085E2           ADD      R5,R5,#+16
   \                     ??_Make_room_11:
   \   0000017C   070055E1           CMP      R5,R7
   \   00000180   FAFFFF1A           BNE      ??_Make_room_12
   \                     ??_Make_room_4:
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   F247BDE8           POP      {R1,R4-R10,LR}
   \   0000018C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection::LevelEntry * _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Insert0(TSNTableLevelCorrection::LevelEntry *, TSNTableLevelCorrection::LevelEntry const &)
   \                     ??_Insert0:
   \   00000000   FF402DE9           PUSH     {R0-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0210A0E1           MOV      R1,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604510           SUBNE    R6,R5,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     `?<Constructor>`,`?<Constructor>??rA`
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Make_room_1,??_Make_room??rA_1
   \   00000038   0050A0E1           MOV      R5,R0
   \   0000003C   0170A0E3           MOV      R7,#+1
   \                     ??_Insert0_1:
   \   00000040   000055E3           CMP      R5,#+0
   \   00000044   0200000A           BEQ      ??_Insert0_2
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     `?<Constructor>`,`?<Constructor>??rA`
   \                     ??_Insert0_2:
   \   00000054   017047E2           SUB      R7,R7,#+1
   \   00000058   105085E2           ADD      R5,R5,#+16
   \   0000005C   000057E3           CMP      R7,#+0
   \   00000060   F6FFFF1A           BNE      ??_Insert0_1
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           _BLF     `?~<unnamed>`,`?~<unnamed>??rA`
   \   0000006C   000094E5           LDR      R0,[R4, #+0]
   \   00000070   10D08DE2           ADD      SP,SP,#+16
   \   00000074   000086E0           ADD      R0,R6,R0
   \   00000078   F040BDE8           POP      {R4-R7,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert,??_Insert??rA
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Push_back0(TSNTableLevelCorrection::LevelEntry const &)
   \                     ??_Push_back0_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   046094E5           LDR      R6,[R4, #+4]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000056E1           CMP      R6,R0
   \   00000018   0D00002A           BCS      ??_Push_back0_5
   \   0000001C   0170A0E3           MOV      R7,#+1
   \   00000020   0680A0E1           MOV      R8,R6
   \                     ??_Push_back0_6:
   \   00000024   000058E3           CMP      R8,#+0
   \   00000028   0200000A           BEQ      ??_Push_back0_7
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   ........           _BLF     `?<Constructor>`,`?<Constructor>??rA`
   \                     ??_Push_back0_7:
   \   00000038   017047E2           SUB      R7,R7,#+1
   \   0000003C   108088E2           ADD      R8,R8,#+16
   \   00000040   000057E3           CMP      R7,#+0
   \   00000044   F6FFFF1A           BNE      ??_Push_back0_6
   \   00000048   100086E2           ADD      R0,R6,#+16
   \   0000004C   040084E5           STR      R0,[R4, #+4]
   \   00000050   030000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_5:
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??_Insert0,??_Insert0??rA
   \                     ??_Push_back0_8:
   \   00000064   F041BDE8           POP      {R4-R8,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection::LevelEntry * _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Ucopy(TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry *)
   \                     ??_Ucopy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
   \   00000010   060000EA           B        ??_Ucopy_1
   \                     ??_Ucopy_2:
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   0200000A           BEQ      ??_Ucopy_3
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     `?<Constructor>`,`?<Constructor>??rA`
   \                     ??_Ucopy_3:
   \   00000028   106086E2           ADD      R6,R6,#+16
   \   0000002C   104084E2           ADD      R4,R4,#+16
   \                     ??_Ucopy_1:
   \   00000030   050054E1           CMP      R4,R5
   \   00000034   F6FFFF1A           BNE      ??_Ucopy_2
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection::LevelEntry::<constructor>(TSNTableLevelCorrection::LevelEntry const &)
   \                     `?<Constructor>`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   046084E2           ADD      R6,R4,#+4
   \   00000014   000084E5           STR      R0,[R4, #+0]
   \   00000018   0600A0E1           MOV      R0,R6
   \   0000001C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000020   041085E2           ADD      R1,R5,#+4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??_Assign,??_Assign??rA
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection::LevelEntry::~<unnamed>()
   \                     `?~<unnamed>`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   044080E2           ADD      R4,R0,#+4
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          TSNTableLevelCorrection::TSNTableLevelCorrection(int TabType) : TSNTable(TabType) {
   \                     ??TSNTableLevelCorrection:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??TSNTable,??TSNTable??rA
   \   0000000C   ........           LDR      R0,??Subroutine8_0  ;; ??__vtbl
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   140084E2           ADD      R0,R4,#+20
   \   00000018   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000001C   200084E2           ADD      R0,R4,#+32
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
      5              TurnTable   = false;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   1000C4E5           STRB     R0,[R4, #+16]
      6          }
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030                      REQUIRE ?Subroutine8
   \   00000030                      ;; // Fall through to label ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine8_0:
   \   00000008   ........           DC32     ??__vtbl
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          void TSNTableLevelCorrection::ReadTable(TSNConfigString &ConfigInputLines, int &ErrorStatus, int NumberOfColoumns) {
   \                     ??ReadTable:
   \   00000000   FF472DE9           PUSH     {R0-R10,LR}
   \   00000004   0080A0E1           MOV      R8,R0
   \   00000008   0190A0E1           MOV      R9,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   03A0A0E1           MOV      R10,R3
      9              Table.clear();
   \   00000014   147088E2           ADD      R7,R8,#+20
   \   00000018   0700A0E1           MOV      R0,R7
   \   0000001C   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   00000020   0700A0E1           MOV      R0,R7
   \   00000024   ........           _BLF     ??_Zero,??_Zero??rA
     10              do {
     11                  LevelEntry tmpEntry;
   \                     ??ReadTable_1:
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
     12                  tmpEntry.Level = ConfigInputLines.ReadDouble(ErrorStatus, C_T_TABLE_END);
   \   00000030   9E20A0E3           MOV      R2,#+158
   \   00000034   502E82E3           ORR      R2,R2,#0x500
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   0900A0E1           MOV      R0,R9
   \   00000040   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000044   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000048   00008DE5           STR      R0,[SP, #+0]
     13                  if ( !ErrorStatus ) {
   \   0000004C   000096E5           LDR      R0,[R6, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   2200001A           BNE      ??ReadTable_2
     14                      for ( int i = 0; !ErrorStatus && i < NumberOfColoumns; i++ ) {
   \   00000058   0070A0E3           MOV      R7,#+0
   \   0000005C   150000EA           B        ??ReadTable_3
     15                          float tmpCorrection = CorrectionFactor*ConfigInputLines.ReadDouble(ErrorStatus);
   \                     ??ReadTable_4:
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000070   0040A0E1           MOV      R4,R0
   \   00000074   080098E5           LDR      R0,[R8, #+8]
   \   00000078   0150A0E1           MOV      R5,R1
   \   0000007C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000080   0420A0E1           MOV      R2,R4
   \   00000084   0530A0E1           MOV      R3,R5
   \   00000088   ........           _BLF     __dMul,??__dMul??rA
   \   0000008C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
     16                          if ( !ErrorStatus ) {
   \   00000090   001096E5           LDR      R1,[R6, #+0]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   0200001A           BNE      ??ReadTable_5
     17                              tmpEntry.Correction.push_back(tmpCorrection);
   \   0000009C   0010A0E1           MOV      R1,R0
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     18                          }
     19                      }
   \                     ??ReadTable_5:
   \   000000A8   000096E5           LDR      R0,[R6, #+0]
   \   000000AC   017087E2           ADD      R7,R7,#+1
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0A00001A           BNE      ??ReadTable_2
   \                     ??ReadTable_3:
   \   000000B8   0A0057E1           CMP      R7,R10
   \   000000BC   E7FFFFBA           BLT      ??ReadTable_4
     20                      if ( !ErrorStatus ) {
     21                          if ( TurnTable ) {
   \   000000C0   1000D8E5           LDRB     R0,[R8, #+16]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0200000A           BEQ      ??ReadTable_6
     22                              reverse(tmpEntry.Correction.begin(), tmpEntry.Correction.end());
   \   000000CC   08109DE5           LDR      R1,[SP, #+8]
   \   000000D0   04009DE5           LDR      R0,[SP, #+4]
   \   000000D4   ........           _BLF     ??reverse,??reverse??rA
     23                          }
     24                          Table.push_back(tmpEntry);
   \                     ??ReadTable_6:
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   140088E2           ADD      R0,R8,#+20
   \   000000E0   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
     25                      }
     26                  }
     27              } while ( !ErrorStatus );
   \                     ??ReadTable_2:
   \   000000E4   0D00A0E1           MOV      R0,SP
   \   000000E8   ........           _BLF     `?~<unnamed>`,`?~<unnamed>??rA`
   \   000000EC   000096E5           LDR      R0,[R6, #+0]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   CBFFFF0A           BEQ      ??ReadTable_1
     28              if ( ErrorStatus == END_FOUND ) {
   \   000000F8   020070E3           CMN      R0,#+2
     29                  // End found, Permitted in this case, so ErrorStatus set to 0
     30                  ErrorStatus = 0;
   \   000000FC   0000A003           MOVEQ    R0,#+0
   \   00000100   00008605           STREQ    R0,[R6, #+0]
     31                  //CheckTable();
     32              }
     33          }
   \   00000104   FF47BDE8           POP      {R0-R10,LR}
   \   00000108   1EFF2FE1           BX       LR               ;; return
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          float TSNTableLevelCorrection::GetCorrectedValue(float RefValue, vector<float>Val) {
   \                     ??GetCorrectedValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
     36              unsigned TrimEntries = RefValueTable.size();
     37              switch ( TrimEntries ) {
   \   0000000C   207090E5           LDR      R7,[R0, #+32]
   \   00000010   201080E2           ADD      R1,R0,#+32
   \   00000014   042091E5           LDR      R2,[R1, #+4]
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   011042E0           SUB      R1,R2,R1
   \   00000020   2161A0E1           LSR      R6,R1,#+2
   \   00000024   0600B0E1           MOVS     R0,R6
   \   00000028   1900000A           BEQ      ??GetCorrectedValue_1
   \   0000002C   010050E2           SUBS     R0,R0,#+1
     38              case 0:
     39                  return 0.0; // Fault, should never happen
     40              case 1:
     41                  return RefValueTable[0];
   \   00000030   00009705           LDREQ    R0,[R7, #+0]
   \   00000034   1600000A           BEQ      ??GetCorrectedValue_1
     42              default:
     43                  {
     44                      unsigned i = 1;
   \   00000038   0180A0E3           MOV      R8,#+1
   \   0000003C   000000EA           B        ??GetCorrectedValue_2
     45                      while ( (i < TrimEntries) && (RefValueTable[i] < RefValue) ) i++;
   \                     ??GetCorrectedValue_3:
   \   00000040   018088E2           ADD      R8,R8,#+1
   \                     ??GetCorrectedValue_2:
   \   00000044   060058E1           CMP      R8,R6
   \   00000048   0400002A           BCS      ??GetCorrectedValue_4
   \   0000004C   080197E7           LDR      R0,[R7, +R8, LSL #+2]
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   ........           _BLF     __fLess,??__fLess??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   F7FFFF1A           BNE      ??GetCorrectedValue_3
     46          
     47                      if ( i >= TrimEntries - 1 ) {
     48                          i = TrimEntries - 1;
     49                      }
     50                      return (IntPol1stDeg(RefValueTable[i - 1], RefValueTable[i], Val[i - 1], Val[i], RefValue));
   \                     ??GetCorrectedValue_4:
   \   00000060   001095E5           LDR      R1,[R5, #+0]
   \   00000064   010046E2           SUB      R0,R6,#+1
   \   00000068   000058E1           CMP      R8,R0
   \   0000006C   0080A021           MOVCS    R8,R0
   \   00000070   080187E0           ADD      R0,R7,R8, LSL #+2
   \   00000074   081181E0           ADD      R1,R1,R8, LSL #+2
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   003091E5           LDR      R3,[R1, #+0]
   \   00000080   042011E5           LDR      R2,[R1, #-4]
   \   00000084   001090E5           LDR      R1,[R0, #+0]
   \   00000088   040010E5           LDR      R0,[R0, #-4]
   \   0000008C   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000090   04D08DE2           ADD      SP,SP,#+4
   \                     ??GetCorrectedValue_1:
   \   00000094   ........           B        ?Subroutine9
     51                  }
     52              }
     53          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine9_0:
   \   00000008   ........           DC32     TabStr1
   \   0000000C   ........           DC32     CrLfStr
   \   00000010   ........           DC32     TabStr2
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          float TSNTableLevelCorrection::GetCorrection(float Level, float RefValue) {
   \                     ??GetCorrection:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     56              unsigned Entries = Table.size();
     57              float Result = 0.0;
     58              switch ( Entries ) {
   \   00000010   148094E5           LDR      R8,[R4, #+20]
   \   00000014   140084E2           ADD      R0,R4,#+20
   \   00000018   041090E5           LDR      R1,[R0, #+4]
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0260A0E1           MOV      R6,R2
   \   00000024   000041E0           SUB      R0,R1,R0
   \   00000028   2092B0E1           LSRS     R9,R0,#+4
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   4900000A           BEQ      ??GetCorrection_1
   \   00000034   010059E2           SUBS     R0,R9,#+1
   \   00000038   3800000A           BEQ      ??GetCorrection_2
     59              default :
     60              case 2  :
     61                  {
     62                      unsigned i = 1;
   \   0000003C   0170A0E3           MOV      R7,#+1
   \   00000040   000000EA           B        ??GetCorrection_3
     63                      while ( (i < Entries) && (Table[i].Level < Level) ) i++;
   \                     ??GetCorrection_4:
   \   00000044   017087E2           ADD      R7,R7,#+1
   \                     ??GetCorrection_3:
   \   00000048   090057E1           CMP      R7,R9
   \   0000004C   0400002A           BCS      ??GetCorrection_5
   \   00000050   070298E7           LDR      R0,[R8, +R7, LSL #+4]
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   ........           _BLF     __fLess,??__fLess??rA
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   F7FFFF1A           BNE      ??GetCorrection_4
     64                      if ( i >= Entries - 1 ) {
   \                     ??GetCorrection_5:
   \   00000064   010049E2           SUB      R0,R9,#+1
   \   00000068   000057E1           CMP      R7,R0
     65                          i = Entries - 1;
   \   0000006C   0070A021           MOVCS    R7,R0
     66                      }
     67                      float x1 = Table[i - 1].Level;
   \   00000070   070288E0           ADD      R0,R8,R7, LSL #+4
   \   00000074   108010E5           LDR      R8,[R0, #-16]
     68                      float y1 = GetCorrectedValue(RefValue, Table[i - 1].Correction);
   \   00000078   0C9040E2           SUB      R9,R0,#+12
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000084   0910A0E1           MOV      R1,R9
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   0610A0E1           MOV      R1,R6
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ??GetCorrectedValue
   \   000000A0   0090A0E1           MOV      R9,R0
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     ??_Zero,??_Zero??rA
     69                      float x2 = Table[i].Level;
   \   000000B4   140094E5           LDR      R0,[R4, #+20]
   \   000000B8   070280E0           ADD      R0,R0,R7, LSL #+4
   \   000000BC   007090E5           LDR      R7,[R0, #+0]
     70                      float y2 = GetCorrectedValue(RefValue, Table[i].Correction);
   \   000000C0   04A080E2           ADD      R10,R0,#+4
   \   000000C4   0C008DE2           ADD      R0,SP,#+12
   \   000000C8   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000CC   0A10A0E1           MOV      R1,R10
   \   000000D0   0C008DE2           ADD      R0,SP,#+12
   \   000000D4   ........           _BLF     ??_Assign,??_Assign??rA
   \   000000D8   0C208DE2           ADD      R2,SP,#+12
   \   000000DC   0610A0E1           MOV      R1,R6
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   ........           BL       ??GetCorrectedValue
   \   000000E8   0040A0E1           MOV      R4,R0
   \   000000EC   0C008DE2           ADD      R0,SP,#+12
   \   000000F0   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000F4   0C008DE2           ADD      R0,SP,#+12
   \   000000F8   ........           _BLF     ??_Zero,??_Zero??rA
     71                      Result   = IntPol1stDeg(x1, x2, y1, y2, Level);
   \   000000FC   20002DE9           PUSH     {R5}
   \   00000100   0430A0E1           MOV      R3,R4
   \   00000104   0920A0E1           MOV      R2,R9
   \   00000108   0710A0E1           MOV      R1,R7
   \   0000010C   0800A0E1           MOV      R0,R8
   \   00000110   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000114   0070A0E1           MOV      R7,R0
   \   00000118   04D08DE2           ADD      SP,SP,#+4
   \   0000011C   0E0000EA           B        ??GetCorrection_1
     72                  }
     73                  break;
     74              case 1  :
     75                  Result = GetCorrectedValue(RefValue, Table[0].Correction);
   \                     ??GetCorrection_2:
   \   00000120   045088E2           ADD      R5,R8,#+4
   \   00000124   18008DE2           ADD      R0,SP,#+24
   \   00000128   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   18008DE2           ADD      R0,SP,#+24
   \   00000134   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000138   18208DE2           ADD      R2,SP,#+24
   \   0000013C   0610A0E1           MOV      R1,R6
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       ??GetCorrectedValue
   \   00000148   0070A0E1           MOV      R7,R0
   \   0000014C   18008DE2           ADD      R0,SP,#+24
   \   00000150   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000154   18008DE2           ADD      R0,SP,#+24
   \   00000158   ........           _BLF     ??_Zero,??_Zero??rA
     76                  break;
     77              case 0  : // Should not get here
     78                  break;
     79              }
     80              return Result;
   \                     ??GetCorrection_1:
   \   0000015C   0700A0E1           MOV      R0,R7
   \   00000160   24D08DE2           ADD      SP,SP,#+36
   \   00000164   F047BDE8           POP      {R4-R10,LR}
   \   00000168   1EFF2FE1           BX       LR               ;; return
     81          }
     82          
     83          
     84          ///////////////////////////////////////////////////////////////
     85          //
     86          // Routines for the Configuration
     87          //
     88          ///////////////////////////////////////////////////////////////
     89          
     90          
     91          // To be completed later   EHSMark

   \                                 In segment CODE, align 4, keep-with-next
     92          AnsiString TSNTableLevelCorrection::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     93              AnsiString LocalString;
     94              LocalString += TabStr1 + KeyWord(TableType) + CrLfStr;
   \   00000004   ........           LDR      R6,??Subroutine9_0  ;; TabStr1
   \   00000008   ........           LDR      R7,??Subroutine9_0+0x4  ;; CrLfStr
   \   0000000C   70DF4DE2           SUB      SP,SP,#+448
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   38008DE2           ADD      R0,SP,#+56
   \   00000028   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000002C   38208DE2           ADD      R2,SP,#+56
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000003C   0720A0E1           MOV      R2,R7
   \   00000040   1C108DE2           ADD      R1,SP,#+28
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000004C   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   008090E5           LDR      R8,[R0, #+0]
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0830A0E1           MOV      R3,R8
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     ??append,??append??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   1C008DE2           ADD      R0,SP,#+28
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   38008DE2           ADD      R0,SP,#+56
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
     95          
     96              //LocalString += TabStr2 + KeyWord(C_T_TABLEOFFSET) + FloatToAnsiString(TableOffset) + CrLfStr;
     97              LocalString +=TabStr2+KeyWord(C_T_CORRECTION_FACTOR)+FloatToAnsiString(CorrectionFactor)+CrLfStr;
   \   00000098   081094E5           LDR      R1,[R4, #+8]
   \   0000009C   ........           LDR      R4,??Subroutine9_0+0x8  ;; TabStr2
   \   000000A0   0330A0E3           MOV      R3,#+3
   \   000000A4   0720A0E3           MOV      R2,#+7
   \   000000A8   C4008DE2           ADD      R0,SP,#+196
   \   000000AC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000B0   A610A0E3           MOV      R1,#+166
   \   000000B4   501E81E3           ORR      R1,R1,#0x500
   \   000000B8   A8008DE2           ADD      R0,SP,#+168
   \   000000BC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C0   A8208DE2           ADD      R2,SP,#+168
   \   000000C4   0410A0E1           MOV      R1,R4
   \   000000C8   8C008DE2           ADD      R0,SP,#+140
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   C4208DE2           ADD      R2,SP,#+196
   \   000000D4   8C108DE2           ADD      R1,SP,#+140
   \   000000D8   70008DE2           ADD      R0,SP,#+112
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   0720A0E1           MOV      R2,R7
   \   000000E4   70108DE2           ADD      R1,SP,#+112
   \   000000E8   54008DE2           ADD      R0,SP,#+84
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   54108DE2           ADD      R1,SP,#+84
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   54008DE2           ADD      R0,SP,#+84
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   70008DE2           ADD      R0,SP,#+112
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   C4008DE2           ADD      R0,SP,#+196
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   8C008DE2           ADD      R0,SP,#+140
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   A8008DE2           ADD      R0,SP,#+168
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
     98              LocalString += TabStr2 + KeyWord(C_T_TABLE_START);
   \   00000154   9D10A0E3           MOV      R1,#+157
   \   00000158   501E81E3           ORR      R1,R1,#0x500
   \   0000015C   FC008DE2           ADD      R0,SP,#+252
   \   00000160   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000164   FC208DE2           ADD      R2,SP,#+252
   \   00000168   0410A0E1           MOV      R1,R4
   \   0000016C   E0008DE2           ADD      R0,SP,#+224
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   0830A0E1           MOV      R3,R8
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   E0108DE2           ADD      R1,SP,#+224
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   ........           _BLF     ??append,??append??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   E0008DE2           ADD      R0,SP,#+224
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   FC008DE2           ADD      R0,SP,#+252
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     99              /*
    100              unsigned Size = Table.size();
    101              for ( unsigned i = 0; i < Table.size(); i++ ) {
    102          
    103                  LocalString += CrLfStr + TabStr3;
    104                  LocalString.cat_sprintf("%10.3f %10.1f", Table[i].x, Table[i].y);
    105          
    106              }
    107              */
    108              LocalString += CrLfStr;
   \   000001A8   0830A0E1           MOV      R3,R8
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0710A0E1           MOV      R1,R7
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   ........           _BLF     ??append,??append??rA
    109              LocalString += TabStr2 + KeyWord(C_T_TABLE_END) + CrLfStr;
   \   000001BC   9E10A0E3           MOV      R1,#+158
   \   000001C0   501E81E3           ORR      R1,R1,#0x500
   \   000001C4   540F8DE2           ADD      R0,SP,#+336
   \   000001C8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001CC   542F8DE2           ADD      R2,SP,#+336
   \   000001D0   0410A0E1           MOV      R1,R4
   \   000001D4   4D0F8DE2           ADD      R0,SP,#+308
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0720A0E1           MOV      R2,R7
   \   000001E0   4D1F8DE2           ADD      R1,SP,#+308
   \   000001E4   460F8DE2           ADD      R0,SP,#+280
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0830A0E1           MOV      R3,R8
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   461F8DE2           ADD      R1,SP,#+280
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   460F8DE2           ADD      R0,SP,#+280
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   4D0F8DE2           ADD      R0,SP,#+308
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   540F8DE2           ADD      R0,SP,#+336
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
    110              LocalString += TabStr1 + KeyWord(C_T_TABLE_OBJ_END) + CrLfStr;
   \   00000230   A110A0E3           MOV      R1,#+161
   \   00000234   501E81E3           ORR      R1,R1,#0x500
   \   00000238   690F8DE2           ADD      R0,SP,#+420
   \   0000023C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000240   692F8DE2           ADD      R2,SP,#+420
   \   00000244   0610A0E1           MOV      R1,R6
   \   00000248   620F8DE2           ADD      R0,SP,#+392
   \   0000024C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000250   0720A0E1           MOV      R2,R7
   \   00000254   621F8DE2           ADD      R1,SP,#+392
   \   00000258   5B0F8DE2           ADD      R0,SP,#+364
   \   0000025C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000260   0830A0E1           MOV      R3,R8
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   5B1F8DE2           ADD      R1,SP,#+364
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   ........           _BLF     ??append,??append??rA
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   0110A0E3           MOV      R1,#+1
   \   0000027C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000280   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0110A0E3           MOV      R1,#+1
   \   0000028C   620F8DE2           ADD      R0,SP,#+392
   \   00000290   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000294   0020A0E3           MOV      R2,#+0
   \   00000298   0110A0E3           MOV      R1,#+1
   \   0000029C   690F8DE2           ADD      R0,SP,#+420
   \   000002A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    111              LocalString += CrLfStr;
   \   000002A4   0830A0E1           MOV      R3,R8
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0710A0E1           MOV      R1,R7
   \   000002B0   0500A0E1           MOV      R0,R5
   \   000002B4   ........           _BLF     ??append,??append??rA
    112              return (LocalString);
   \   000002B8   70DF8DE2           ADD      SP,SP,#+448
   \   000002BC                      REQUIRE ?Subroutine9
   \   000002BC                      ;; // Fall through to label ?Subroutine9
    113          }
    114          
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          bool TSNTableLevelCorrection::LoadConfigString(TSNConfigString &ConfigString, PRogramObjectBase *PROPtr) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    117              bool NoError = true;
    118              int ErrorLine = 0;
    119              int Key;
    120              AnsiString PROName = "Volume correction table";
   \   00000004   14849FE5           LDR      R8,??LoadConfigString_1  ;; `?<Constant "Volume correction table">`
   \   00000008   5CDF4DE2           SUB      SP,SP,#+368
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0290A0E1           MOV      R9,R2
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0810A0E1           MOV      R1,R8
   \   00000028   58008DE2           ADD      R0,SP,#+88
   \   0000002C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    121              if ( PROPtr )	PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000030   000059E3           CMP      R9,#+0
   \   00000034   1400000A           BEQ      ??LoadConfigString_2
   \   00000038   181088E2           ADD      R1,R8,#+24
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000044   442089E2           ADD      R2,R9,#+68
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   20008DE2           ADD      R0,SP,#+32
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   20108DE2           ADD      R1,SP,#+32
   \   00000064   58008DE2           ADD      R0,SP,#+88
   \   00000068   ........           _BLF     ??append,??append??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   20008DE2           ADD      R0,SP,#+32
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
    122          
    123              do {
    124                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   0000008C   0030A0E3           MOV      R3,#+0
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   3C108DE2           ADD      R1,SP,#+60
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     ??NextWord,??NextWord??rA
   \   000000A0   00009DE5           LDR      R0,[SP, #+0]
   \   000000A4   00A0E0E3           MVN      R10,#+0
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   2100000A           BEQ      ??LoadConfigString_3
    125                  if ( ErrorLine ) {
    126                      if ( ErrorLine != EOF ) {
   \   000000B0   0A0050E1           CMP      R0,R10
   \   000000B4   C600000A           BEQ      ??LoadConfigString_4
    127                          GiveConfigWarning((AnsiString)"Unknown error started at line:" + (AnsiString)ErrorLine);
   \   000000B8   0010A0E1           MOV      R1,R0
   \   000000BC   90008DE2           ADD      R0,SP,#+144
   \   000000C0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000C4   0090A0E1           MOV      R9,R0
   \   000000C8   201088E2           ADD      R1,R8,#+32
   \   000000CC   74008DE2           ADD      R0,SP,#+116
   \   000000D0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000D4   0920A0E1           MOV      R2,R9
   \   000000D8   0010A0E1           MOV      R1,R0
   \   000000DC   04008DE2           ADD      R0,SP,#+4
   \   000000E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E4   04108DE2           ADD      R1,SP,#+4
   \   000000E8   20008DE2           ADD      R0,SP,#+32
   \   000000EC   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000F0   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   20008DE2           ADD      R0,SP,#+32
   \   00000100   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   04008DE2           ADD      R0,SP,#+4
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   90008DE2           ADD      R0,SP,#+144
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   74008DE2           ADD      R0,SP,#+116
   \                     ??LoadConfigString_5:
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   A60000EA           B        ??LoadConfigString_4
    128                      }
    129                  } else {
    130                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   04008DE2           ADD      R0,SP,#+4
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000148   ........           LDR      R0,??DataTable2  ;; ??npos
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   003090E5           LDR      R3,[R0, #+0]
   \   00000154   3C108DE2           ADD      R1,SP,#+60
   \   00000158   04008DE2           ADD      R0,SP,#+4
   \   0000015C   ........           _BLF     ??assign,??assign??rA
   \   00000160   04008DE2           ADD      R0,SP,#+4
   \   00000164   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000168   0060A0E1           MOV      R6,R0
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   04008DE2           ADD      R0,SP,#+4
   \   00000178   ........           _BLF     ??_Tidy,??_Tidy??rA
    131                      switch ( Key ) {
   \   0000017C   9310A0E3           MOV      R1,#+147
   \   00000180   501E81E3           ORR      R1,R1,#0x500
   \   00000184   010056E1           CMP      R6,R1
   \   00000188   6E00000A           BEQ      ??LoadConfigString_6
   \   0000018C   0A1081E2           ADD      R1,R1,#+10
   \   00000190   010056E1           CMP      R6,R1
   \   00000194   8200000A           BEQ      ??LoadConfigString_7
   \   00000198   011081E2           ADD      R1,R1,#+1
   \   0000019C   010056E1           CMP      R6,R1
   \   000001A0   03108112           ADDNE    R1,R1,#+3
   \   000001A4   01005611           CMPNE    R6,R1
   \   000001A8   8700000A           BEQ      ??LoadConfigString_8
   \   000001AC   041081E3           ORR      R1,R1,#0x4
   \   000001B0   010056E1           CMP      R6,R1
   \   000001B4   3D00000A           BEQ      ??LoadConfigString_9
   \   000001B8   011081E2           ADD      R1,R1,#+1
   \   000001BC   010056E1           CMP      R6,R1
   \   000001C0   6D00000A           BEQ      ??LoadConfigString_10
   \   000001C4   1110A0E3           MOV      R1,#+17
   \   000001C8   9C1D81E3           ORR      R1,R1,#0x2700
   \   000001CC   010056E1           CMP      R6,R1
   \   000001D0   7F00000A           BEQ      ??LoadConfigString_4
    132                      default:
    133          
    134                          GiveConfigWarning((AnsiString)"The keyword " + InputKeyWord + (AnsiString)" is not allowed here!! Line:" + (AnsiString)ConfigString.LineCount);
   \   000001D4   1C1095E5           LDR      R1,[R5, #+28]
   \   000001D8   550F8DE2           ADD      R0,SP,#+340
   \   000001DC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001E0   0090A0E1           MOV      R9,R0
   \   000001E4   501088E2           ADD      R1,R8,#+80
   \   000001E8   4E0F8DE2           ADD      R0,SP,#+312
   \   000001EC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001F0   00B0A0E1           MOV      R11,R0
   \   000001F4   401088E2           ADD      R1,R8,#+64
   \   000001F8   470F8DE2           ADD      R0,SP,#+284
   \   000001FC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000200   0010A0E1           MOV      R1,R0
   \   00000204   3C208DE2           ADD      R2,SP,#+60
   \   00000208   400F8DE2           ADD      R0,SP,#+256
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0B20A0E1           MOV      R2,R11
   \   00000214   401F8DE2           ADD      R1,SP,#+256
   \   00000218   E4008DE2           ADD      R0,SP,#+228
   \   0000021C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000220   0920A0E1           MOV      R2,R9
   \   00000224   E4108DE2           ADD      R1,SP,#+228
   \   00000228   C8008DE2           ADD      R0,SP,#+200
   \   0000022C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000230   C8108DE2           ADD      R1,SP,#+200
   \   00000234   AC008DE2           ADD      R0,SP,#+172
   \   00000238   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000023C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   AC008DE2           ADD      R0,SP,#+172
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   C8008DE2           ADD      R0,SP,#+200
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   550F8DE2           ADD      R0,SP,#+340
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   E4008DE2           ADD      R0,SP,#+228
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   4E0F8DE2           ADD      R0,SP,#+312
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   400F8DE2           ADD      R0,SP,#+256
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   470F8DE2           ADD      R0,SP,#+284
   \   000002AC   9FFFFFEA           B        ??LoadConfigString_5
    135                          break;
    136                      case C_T_CORRECTION_ENTRIES:
    137                          {
    138                              do {
    139                                  float  Trim;
    140                                  Trim = ConfigString.ReadDouble(ErrorLine, C_T_TABLE_END);
   \                     ??LoadConfigString_9:
   \   000002B0   9E20A0E3           MOV      R2,#+158
   \   000002B4   502E82E3           ORR      R2,R2,#0x500
   \   000002B8   0D10A0E1           MOV      R1,SP
   \   000002BC   0500A0E1           MOV      R0,R5
   \   000002C0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002C4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    141                                  if ( !ErrorLine ) {
   \   000002C8   00109DE5           LDR      R1,[SP, #+0]
   \   000002CC   000051E3           CMP      R1,#+0
   \   000002D0   0200001A           BNE      ??LoadConfigString_11
    142                                      RefValueTable.push_back(Trim);
   \   000002D4   0010A0E1           MOV      R1,R0
   \   000002D8   200084E2           ADD      R0,R4,#+32
   \   000002DC   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    143                                  }
    144                              } while ( !ErrorLine );
   \                     ??LoadConfigString_11:
   \   000002E0   00009DE5           LDR      R0,[SP, #+0]
   \   000002E4   000050E3           CMP      R0,#+0
   \   000002E8   F0FFFF0A           BEQ      ??LoadConfigString_9
    145                              if ( ErrorLine == END_FOUND ) {
   \   000002EC   020070E3           CMN      R0,#+2
   \   000002F0   3700001A           BNE      ??LoadConfigString_4
    146                                  // End found, Permitted in this case, so ErrorLine set to 0
    147                                  ErrorLine = 0;
   \   000002F4   0010A0E3           MOV      R1,#+0
   \   000002F8   00108DE5           STR      R1,[SP, #+0]
    148                                  if ( RefValueTable.front() > RefValueTable.back() ) {
   \   000002FC   209094E5           LDR      R9,[R4, #+32]
   \   00000300   24B094E5           LDR      R11,[R4, #+36]
   \   00000304   001099E5           LDR      R1,[R9, #+0]
   \   00000308   04001BE5           LDR      R0,[R11, #-4]
   \   0000030C   ........           _BLF     __fLess,??__fLess??rA
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   0400000A           BEQ      ??LoadConfigString_12
    149                                      TurnTable = true;
   \   00000318   0100A0E3           MOV      R0,#+1
   \   0000031C   1000C4E5           STRB     R0,[R4, #+16]
    150                                      reverse(RefValueTable.begin(), RefValueTable.end());
   \   00000320   0B10A0E1           MOV      R1,R11
   \   00000324   0900A0E1           MOV      R0,R9
   \   00000328   ........           _BLF     ??reverse,??reverse??rA
    151                                  }
    152                                  MinRefValue = RefValueTable.front();
   \                     ??LoadConfigString_12:
   \   0000032C   200094E5           LDR      R0,[R4, #+32]
   \   00000330   000090E5           LDR      R0,[R0, #+0]
   \   00000334   2C0084E5           STR      R0,[R4, #+44]
    153                                  MaxRefValue = RefValueTable.back();
   \   00000338   240094E5           LDR      R0,[R4, #+36]
   \   0000033C   040010E5           LDR      R0,[R0, #-4]
   \   00000340   300084E5           STR      R0,[R4, #+48]
   \   00000344   220000EA           B        ??LoadConfigString_4
    154                              }
    155                          }
    156                          break;
    157          			case C_T_TABLEOFFSET:
    158          				TableOffset = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_6:
   \   00000348   0020A0E3           MOV      R2,#+0
   \   0000034C   0D10A0E1           MOV      R1,SP
   \   00000350   0500A0E1           MOV      R0,R5
   \   00000354   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000358   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000035C   040084E5           STR      R0,[R4, #+4]
    159          				NoError = !ErrorLine;
   \   00000360   00009DE5           LDR      R0,[SP, #+0]
   \   00000364   000050E3           CMP      R0,#+0
   \   00000368   0100001A           BNE      ??LoadConfigString_13
   \                     ??LoadConfigString_14:
   \   0000036C   0170A0E3           MOV      R7,#+1
   \   00000370   170000EA           B        ??LoadConfigString_4
   \                     ??LoadConfigString_13:
   \   00000374   0070A0E3           MOV      R7,#+0
   \   00000378   150000EA           B        ??LoadConfigString_4
    160          				break;
    161          			case C_T_CORRECTION_FACTOR:
    162          				CorrectionFactor = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_10:
   \   0000037C   0020A0E3           MOV      R2,#+0
   \   00000380   0D10A0E1           MOV      R1,SP
   \   00000384   0500A0E1           MOV      R0,R5
   \   00000388   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000038C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000390   080084E5           STR      R0,[R4, #+8]
    163          				NoError = !ErrorLine;
   \   00000394   00009DE5           LDR      R0,[SP, #+0]
   \   00000398   000050E3           CMP      R0,#+0
   \   0000039C   F4FFFF1A           BNE      ??LoadConfigString_13
   \   000003A0   F1FFFFEA           B        ??LoadConfigString_14
    164          				break;
    165                      case C_T_TABLE_START:
    166                          ReadTable(ConfigString, ErrorLine, RefValueTable.size());
   \                     ??LoadConfigString_7:
   \   000003A4   200084E2           ADD      R0,R4,#+32
   \   000003A8   041090E5           LDR      R1,[R0, #+4]
   \   000003AC   000090E5           LDR      R0,[R0, #+0]
   \   000003B0   0D20A0E1           MOV      R2,SP
   \   000003B4   000041E0           SUB      R0,R1,R0
   \   000003B8   2031A0E1           LSR      R3,R0,#+2
   \   000003BC   0510A0E1           MOV      R1,R5
   \   000003C0   0400A0E1           MOV      R0,R4
   \   000003C4   ........           BL       ??ReadTable
   \   000003C8   010000EA           B        ??LoadConfigString_4
    167                          break;
    168                      case C_T_TABLE_END    :
    169                      case C_T_TABLE_OBJ_END:
    170                          Key = C_T_TABLE_OBJ_END;
   \                     ??LoadConfigString_8:
   \   000003CC   A160A0E3           MOV      R6,#+161
   \   000003D0   506E86E3           ORR      R6,R6,#0x500
    171                          break;
    172                      case C_LC_END:  // Dummy entry to avoid false error message
    173                          break;
    174                      } // End of Key switch
    175                  } // End if not EOF
    176              }while ( (ErrorLine != EOF) && NoError && (Key != C_T_TABLE_OBJ_END) );
   \                     ??LoadConfigString_4:
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   0110A0E3           MOV      R1,#+1
   \   000003DC   3C008DE2           ADD      R0,SP,#+60
   \   000003E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E4   00009DE5           LDR      R0,[SP, #+0]
   \   000003E8   0A0050E1           CMP      R0,R10
   \   000003EC   00005713           CMPNE    R7,#+0
   \   000003F0   A100A013           MOVNE    R0,#+161
   \   000003F4   500E8013           ORRNE    R0,R0,#0x500
   \   000003F8   00005611           CMPNE    R6,R0
   \   000003FC   22FFFF1A           BNE      ??LoadConfigString_2
    177              return (NoError);
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0110A0E3           MOV      R1,#+1
   \   00000408   58008DE2           ADD      R0,SP,#+88
   \   0000040C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000410   0700A0E1           MOV      R0,R7
   \   00000414   5CDF8DE2           ADD      SP,SP,#+368
   \   00000418   F04FBDE8           POP      {R4-R11,LR}
   \   0000041C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_1:
   \   00000420   ........           DC32     `?<Constant "Volume correction table">`
    178          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Volume correction table">`:
   \   00000000   566F6C756D65       DC8 "Volume correction table"
   \              20636F727265
   \              6374696F6E20
   \              7461626C6500
   \   00000018   2C20666F7220       DC8 ", for "
   \              00          
   \   0000001F   00                 DC8 0
   \   00000020   556E6B6E6F77       DC8 "Unknown error started at line:"
   \              6E206572726F
   \              722073746172
   \              746564206174
   \              206C696E653A
   \              00          
   \   0000003F   00                 DC8 0
   \   00000040   546865206B65       DC8 "The keyword "
   \              79776F726420
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   0000006D   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableLevelCorrection &TSNTableLevelCorrection::new TSNTableLevelCorrection(int)
   \                     `??new TSNTableLevelCorrection`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   3800A0E3           MOV      R0,#+56
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new TSNTableLevelCorrection_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??TSNTableLevelCorrection
   \                     `??new TSNTableLevelCorrection_1`:
   \   00000020   ........           B        ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos
    179          
    180          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TSNTableLevelCorrection::GetCorrectedValue(float, vector<float>)
                                       28
     TSNTableLevelCorrection::GetCorrection(float, float)
                                       72
     TSNTableLevelCorrection::LevelEntry::<constructor>(TSNTableLevelCorrection::LevelEntry const &)
                                       16
     TSNTableLevelCorrection::LevelEntry::~<unnamed>()
                                        8
     TSNTableLevelCorrection::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                      404
     TSNTableLevelCorrection::MakeConfigString(int)
                                      472
     TSNTableLevelCorrection::ReadTable(TSNConfigString &, int &, int)
                                       48
     TSNTableLevelCorrection::TSNTableLevelCorrection(int)
                                        8
     TSNTableLevelCorrection::new TSNTableLevelCorrection(int)
                                        8
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_EraseAll()
                                       16
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Insert0(TSNTableLevelCorrection::LevelEntry *, TSNTableLevelCorrection::LevelEntry const &)
                                       36
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Make_room(TSNTableLevelCorrection::LevelEntry *, unsigned int)
                                       36
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Push_back0(TSNTableLevelCorrection::LevelEntry const &)
                                       24
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Tidy0()
                                        8
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Ucopy(TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry *)
                                       16
     _Vector_impl<float, allocator<float>>::_Assign(_Vector_impl<float, allocator<float>> const &)
                                       20
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       32
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48
     reverse(float *, float *)          0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     reverse(float *, float *)        32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_EraseAll()
                                      56
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Tidy0()
                                      44
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                      36
     _Vector_impl<float, allocator<float>>::_Assign(_Vector_impl<float, allocator<float>> const &)
                                     224
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      72
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     232
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Make_room(TSNTableLevelCorrection::LevelEntry *, unsigned int)
                                     400
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Insert0(TSNTableLevelCorrection::LevelEntry *, TSNTableLevelCorrection::LevelEntry const &)
                                     128
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      72
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Push_back0(TSNTableLevelCorrection::LevelEntry const &)
                                     108
     _Vector_impl<TSNTableLevelCorrection::LevelEntry, allocator<TSNTableLevelCorrection::LevelEntry>>::_Ucopy(TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry const *, TSNTableLevelCorrection::LevelEntry *)
                                      68
     operator+(string const &, string const &)
                                     156
     TSNTableLevelCorrection::LevelEntry::<constructor>(TSNTableLevelCorrection::LevelEntry const &)
                                      56
     TSNTableLevelCorrection::LevelEntry::~<unnamed>()
                                      32
     TSNTableLevelCorrection::TSNTableLevelCorrection(int)
                                      48
     ?Subroutine8                     12
     TSNTableLevelCorrection::ReadTable(TSNConfigString &, int &, int)
                                     268
     TSNTableLevelCorrection::GetCorrectedValue(float, vector<float>)
                                     152
     ?Subroutine9                     20
     TSNTableLevelCorrection::GetCorrection(float, float)
                                     364
     TSNTableLevelCorrection::MakeConfigString(int)
                                     700
     TSNTableLevelCorrection::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                    1060
     ?<Constant "Volume correction table">
                                     112
     TSNTableLevelCorrection::new TSNTableLevelCorrection(int)
                                      36
     __sti__routine()                  4
     ??DataTable2                      4
      Others                         524

 
 4 904 bytes in segment CODE
   132 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 2 672 bytes of CODE  memory (+ 2 236 bytes shared)
   132 bytes of CONST memory

Errors: none
Warnings: none
