##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLevelSwitch.Cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLevelSwitch.Cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLevelSwitch.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLevelSwitch.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLevelSwitch.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelSwitch::~AlarmLevelSwitch()
   \                     `?~AlarmLevelSwitch`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLevelSwitch_1`
   \   00000014   0100000A           BEQ      `?~AlarmLevelSwitch_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLevelSwitch_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLevelSwitch_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLevelSwitch_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLevelSwitch::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLevelSwitch::AlarmLevelSwitch(PRogramObjectBase *PROPtr, AnsiString LocName, AnsiString Descr):AlarmBasic(PROPtr) {
   \                     ??AlarmLevelSwitch:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   90009FE5           LDR      R0,??AlarmLevelSwitch_1  ;; ??__vtbl
     12              PROPointer          = PROPtr;
     13              //PROAtmReference *PROAtmPtr = (PROAtmReference*)PROPointer;
     14              NumberOfAlarmSettings++;
     15              IDNumber            = (ID_AL_LEVEL_SWITCH << 16) + NumberOfAlarmSettings;
     16              Type                = ID_AL_LEVEL_SWITCH;
     17              Limit               = 1.0;
     18              Deadband            = 0.0;
     19              Name                = LocName;
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   88009FE5           LDR      R0,??AlarmLevelSwitch_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000028   C47084E5           STR      R7,[R4, #+196]
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   C006A0E3           MOV      R0,#+201326592
   \   0000003C   A50880E3           ORR      R0,R0,#0xA50000
   \   00000040   010080E0           ADD      R0,R0,R1
   \   00000044   9C0084E5           STR      R0,[R4, #+156]
   \   00000048   A500A0E3           MOV      R0,#+165
   \   0000004C   C00E80E3           ORR      R0,R0,#0xC00
   \   00000050   A00084E5           STR      R0,[R4, #+160]
   \   00000054   FE05A0E3           MOV      R0,#+1065353216
   \   00000058   E40084E5           STR      R0,[R4, #+228]
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   BC0084E5           STR      R0,[R4, #+188]
   \   00000064   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   007090E5           LDR      R7,[R0, #+0]
   \   00000070   440084E2           ADD      R0,R4,#+68
   \   00000074   0730A0E1           MOV      R3,R7
   \   00000078   ........           _BLF     ??assign,??assign??rA
     20              Description         = Descr;
   \   0000007C   0730A0E1           MOV      R3,R7
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   7C0084E2           ADD      R0,R4,#+124
   \   0000008C   ........           _BLF     ??assign,??assign??rA
     21              MessageKey          = L_WORD677;    // Level
   \   00000090   A500A0E3           MOV      R0,#+165
   \   00000094   800F80E3           ORR      R0,R0,#0x200
   \   00000098   B80084E5           STR      R0,[R4, #+184]
     22              TPCMessageKey       = L_WORD678;    // Lvl
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   B40084E5           STR      R0,[R4, #+180]
     23          }
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   F040BDE8           POP      {R4-R7,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLevelSwitch_1:
   \   000000B0   ........           DC32     ??__vtbl
   \   000000B4   ........           DC32     ??NumberOfAlarmSettings
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AlarmLevelSwitch::Check(void) {
   \                     ??Check:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26              bool IsActive = ((PROLevelSwitch *)PROPointer)->IsActive;
     27          
     28              int Status = AL_STAT_IN_DEADBAND;
     29              if (IsActive) {
   \   00000008   C40094E5           LDR      R0,[R4, #+196]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   5C01D0E5           LDRB     R0,[R0, #+348]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0600000A           BEQ      ??Check_1
     30          		if ( TSNElapsedTicks(LastInactiveTime) < AlarmDelay ) {
   \   0000001C   AC0094E5           LDR      R0,[R4, #+172]
   \   00000020   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000024   A81094E5           LDR      R1,[R4, #+168]
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   090000BA           BLT      ??Check_2
     31          			Status = AL_STAT_IN_NORMAL;
     32          		}else{
     33          			Status = AL_STAT_IN_ALARM;
   \   00000030   0150A0E3           MOV      R5,#+1
   \   00000034   080000EA           B        ??Check_3
     34          		}
     35              } else {
     36          		LastInactiveTime = clock();
   \                     ??Check_1:
   \   00000038   ........           _BLF     clock,??clock??rA
   \   0000003C   AC0084E5           STR      R0,[R4, #+172]
     37                  if (TSNElapsedTicks(LastActiveTime) > PROSystemData::AlarmOffDelay) {
   \   00000040   C00094E5           LDR      R0,[R4, #+192]
   \   00000044   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000048   1C109FE5           LDR      R1,??Check_4     ;; ??AlarmOffDelay
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   000051E1           CMP      R1,R0
   \   00000054   000000AA           BGE      ??Check_3
     38                      Status = AL_STAT_IN_NORMAL;
   \                     ??Check_2:
   \   00000058   0050A0E3           MOV      R5,#+0
     39                  }
     40              }
     41              UpdateAlarm(Status);
   \                     ??Check_3:
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     42          }
   \   00000068   ........           B        ?Subroutine9
   \                     ??Check_4:
   \   0000006C   ........           DC32     ??AlarmOffDelay

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     43          
     44          ///////////////////////////////////////////////////////////////
     45          //
     46          // Routines for the librarian
     47          //
     48          ///////////////////////////////////////////////////////////////
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          int AlarmLevelSwitch::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     51              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     52              switch (ValueId) {
   \   00000028   3210A0E3           MOV      R1,#+50
   \   0000002C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000030   010055E1           CMP      R5,R1
     53              case SVT_AL_LIMIT:
     54                  Status = E_NOT_ADJUSTABLE;
   \   00000034   2950A003           MOVEQ    R5,#+41
   \   00000038   1E00000A           BEQ      ??PutValue_2
     55                  break;
     56              default:
     57                  Status = AlarmBasic::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           _BLF     ??assign,??assign??rA
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   00012DE9           PUSH     {R8}
   \   00000070   0C308DE2           ADD      R3,SP,#+12
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000084   0050A0E1           MOV      R5,R0
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0C008DE2           ADD      R0,SP,#+12
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
     58                  break;
     59              }
     60              if (Status == E_NO_ERR) {
   \   00000098   000055E3           CMP      R5,#+0
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   \   000000A0   0400001A           BNE      ??PutValue_2
     61                  SetModifiedFlag();
   \   000000A4   A41094E5           LDR      R1,[R4, #+164]
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   541091E5           LDR      R1,[R1, #+84]
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   11FF2FE1           BX       R1
     62              }
     63              if (UnitId) {
   \                     ??PutValue_2:
   \   000000B8   000059E3           CMP      R9,#+0
     64                  *UnitId = ValUnitId;
   \   000000BC   00009D15           LDRNE    R0,[SP, #+0]
   \   000000C0   00008915           STRNE    R0,[R9, #+0]
     65              }
     66              return (Status);
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   20D08DE2           ADD      SP,SP,#+32
   \   000000CC   F043BDE8           POP      {R4-R9,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          int  AlarmLevelSwitch::GetValue(int ValueId, int Index, float& MyRetValue, int& DecPnt, int& Unit) {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
     70              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     71              switch (ValueId) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   323041E2           SUB      R3,R1,#+50
   \   0000001C   8C3D43E2           SUB      R3,R3,#+8960
   \   00000020   010053E3           CMP      R3,#+1
   \   00000024   0C00008A           BHI      ??GetValue_3
   \   00000028   01CF8FE2           ADR      R12,??GetValue_1
   \   0000002C   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     72              case SVT_AL_LIMIT:
     73                  MyRetValue = 1.0;
   \                     ??GetValue_4:
   \   00000038   FE05A0E3           MOV      R0,#+1065353216
   \                     ??GetValue_5:
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     74                  DecPnt     = 0;
   \   00000040   008085E5           STR      R8,[R5, #+0]
     75                  Unit       = NO_UNIT;
   \   00000044   008086E5           STR      R8,[R6, #+0]
   \   00000048   090000EA           B        ??GetValue_6
     76                  break;
     77              case SVT_AL_VALUE:
     78                  MyRetValue = (float)((PROLevelSwitch *)PROPointer)->IsActive;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   5C01D0E5           LDRB     R0,[R0, #+348]
   \   00000054   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000058   F7FFFFEA           B        ??GetValue_5
     79                  DecPnt     = 0;
     80                  Unit       = NO_UNIT;
     81                  break;
     82              default:
     83                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   0000005C   40002DE9           PUSH     {R6}
   \   00000060   20002DE9           PUSH     {R5}
   \   00000064   0430A0E1           MOV      R3,R4
   \   00000068   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   0000006C   0070A0E1           MOV      R7,R0
   \   00000070   08D08DE2           ADD      SP,SP,#+8
     84                  break;
     85              }
     86              return (Status);
   \                     ??GetValue_6:
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   F041BDE8           POP      {R4-R8,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     87          }
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          int AlarmLevelSwitch::GetStringValue(int ValueId, int Index, AnsiString& MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     90              int Status = GETVAL_NO_ERR;
     91              //switch ( ValueId ) {
     92              //	default:
     93              Status = AlarmBasic::GetStringValue(ValueId, Index, MyString);
     94              //		break;
     95              //}
     96              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine10
     97          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          int AlarmLevelSwitch::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    100              int Status = E_NO_ERR;
    101              //switch ( ValueId ) {
    102              //   default:
    103              Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    104              //     break;
    105              //}
    106              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    107          }
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          AnsiString AlarmLevelSwitch::Get_Message(void)
    110          {
   \                     ??Get_Message:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    111              if (Description.IsEmpty()) {
   \   0000000C   7C0084E2           ADD      R0,R4,#+124
   \   00000010   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0300000A           BEQ      ??Get_Message_2
    112                  return  AlarmBasic::Get_Message();
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??Get_Message_1,??Get_Message??rA
   \   00000028   090000EA           B        ??Get_Message_3
    113              }
    114              return Description;
   \                     ??Get_Message_2:
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000003C   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   7C1084E2           ADD      R1,R4,#+124
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??assign,??assign??rA
   \                     ??Get_Message_3:
   \   00000054                      REQUIRE ?Subroutine9
   \   00000054                      ;; // Fall through to label ?Subroutine9
    115          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelSwitch &AlarmLevelSwitch::new AlarmLevelSwitch(PRogramObjectBase *, AnsiString, AnsiString)
   \                     `??new AlarmLevelSwitch`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   EC00A0E3           MOV      R0,#+236
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLevelSwitch_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLevelSwitch
   \                     `??new AlarmLevelSwitch_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLevelSwitch::AlarmLevelSwitch(PRogramObjectBase *, AnsiString, AnsiString)
                                       20
     AlarmLevelSwitch::Check()         12
     AlarmLevelSwitch::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLevelSwitch::GetValue(int, int, float &, int &, int &)
                                       32
     AlarmLevelSwitch::Get_Message()
                                       12
     AlarmLevelSwitch::PutFloatValue(int, float)
                                        4
     AlarmLevelSwitch::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AlarmLevelSwitch::new AlarmLevelSwitch(PRogramObjectBase *, AnsiString, AnsiString)
                                       16
     AlarmLevelSwitch::~AlarmLevelSwitch()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLevelSwitch::~AlarmLevelSwitch()
                                      56
     AlarmLevelSwitch::NumberOfAlarmSettings
                                       4
     AlarmLevelSwitch::AlarmLevelSwitch(PRogramObjectBase *, AnsiString, AnsiString)
                                     184
     AlarmLevelSwitch::Check()       112
     ?Subroutine9                      8
     AlarmLevelSwitch::PutValue(int, int, AnsiString, bool, int *)
                                     212
     AlarmLevelSwitch::GetValue(int, int, float &, int &, int &)
                                     128
     AlarmLevelSwitch::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine10                     8
     AlarmLevelSwitch::PutFloatValue(int, float)
                                       8
     AlarmLevelSwitch::Get_Message()
                                      84
     AlarmLevelSwitch::new AlarmLevelSwitch(PRogramObjectBase *, AnsiString, AnsiString)
                                      56
     __sti__routine()                  4
     ??DataTable2                      4
      Others                         360

 
 1 104 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 824 bytes of CODE  memory (+ 296 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
