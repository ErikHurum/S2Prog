##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:45 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\IOSimulator.cpp                 #
#    Command line    =  D:\S2Prog\Shared\Src\IOSimulator.cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\IOSimulator.lst             #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\IOSimulator.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\IOSimulator.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          

   \                                 In segment DATA_Z, align 4, align-sorted
      7          IOSimulator *IOSimulator::IOSimulatorPtr = NULL;
   \                     ??IOSimulatorPtr:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
      8          IOSimulator::~IOSimulator(void)
      9          {
     10          }
   \                     `?~IOSimulator`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          IOSimulator::IOSimulator(void)
     13          {
     14          }
   \                     ??IOSimulator:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          void IOSimulator::ExecSimulator(bool *pTerminate)
     17          {
   \                     ??ExecSimulator:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     18          	if ( ConfigWarningsString.IsEmpty() ) {
   \   00000008   E8019FE5           LDR      R0,??ExecSimulator_1  ;; ConfigWarningsString
   \   0000000C   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   7500000A           BEQ      ??ExecSimulator_2
     19          		if ( !pTerminate && PROAtmReference::PROAtmRefPtr ) {
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0600001A           BNE      ??ExecSimulator_3
   \   00000020   D4019FE5           LDR      R0,??ExecSimulator_1+0x4  ;; ??PROAtmRefPtr
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0200000A           BEQ      ??ExecSimulator_3
     20          			PROAtmReference::PROAtmRefPtr->SimCalculate();
   \   00000030   ........           _BLF     ??SimCalculate,??SimCalculate??rA
     21          			TSN_Delay(10);
   \   00000034   0A00A0E3           MOV      R0,#+10
   \   00000038   ........           _BLF     OS_Delay,??OS_Delay??rA
     22          		}
     23          		// Water ingress
     24          		for ( set<PRogramObjectBase*>::iterator pBIt=PROWaterIngress::ObjectSet.begin(); !(*pTerminate) && pBIt!=PROWaterIngress::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_3:
   \   0000003C   BC519FE5           LDR      R5,??ExecSimulator_1+0x8  ;; ??ObjectSet
   \   00000040   006095E5           LDR      R6,[R5, #+0]
   \   00000044   0A0000EA           B        ??ExecSimulator_4
     25          			PROWaterIngress *TElement = (PROWaterIngress*)(*pBIt);
   \                     ??ExecSimulator_5:
   \   00000048   107096E5           LDR      R7,[R6, #+16]
     26          			TElement->SimCalculate();
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??SimCalculate_1,??SimCalculate??rA_1
     27          			CheckAlarms(TElement->AlarmSet);
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   E40087E2           ADD      R0,R7,#+228
   \   0000005C   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     28          			TSN_Delay(10);
   \   00000060   0A00A0E3           MOV      R0,#+10
   \   00000064   ........           _BLF     OS_Delay,??OS_Delay??rA
     29          		}
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000070   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_4:
   \   00000074   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0100001A           BNE      ??ExecSimulator_6
   \   00000080   050056E1           CMP      R6,R5
   \   00000084   EFFFFF1A           BNE      ??ExecSimulator_5
     30          
     31          		// Temp
     32          		for ( set<PRogramObjectBase*>::iterator pBIt=PROTemperature::ObjectSet.begin(); !pTerminate && pBIt!=PROTemperature::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_6:
   \   00000088   74519FE5           LDR      R5,??ExecSimulator_1+0xC  ;; ??ObjectSet_1
   \   0000008C   000054E3           CMP      R4,#+0
   \   00000090   006095E5           LDR      R6,[R5, #+0]
   \   00000094   0D00001A           BNE      ??ExecSimulator_7
   \   00000098   0A0000EA           B        ??ExecSimulator_8
     33          			PROTemperature *TElement = (PROTemperature*)(*pBIt);
   \                     ??ExecSimulator_9:
   \   0000009C   107096E5           LDR      R7,[R6, #+16]
     34          			TElement->SimCalculate();
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   ........           _BLF     ??SimCalculate_2,??SimCalculate??rA_2
     35          			CheckAlarms(TElement->AlarmSet);
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   E40087E2           ADD      R0,R7,#+228
   \   000000B0   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     36          			TSN_Delay(10);
   \   000000B4   0A00A0E3           MOV      R0,#+10
   \   000000B8   ........           _BLF     OS_Delay,??OS_Delay??rA
     37          		}
   \   000000BC   0600A0E1           MOV      R0,R6
   \   000000C0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000C4   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_8:
   \   000000C8   050056E1           CMP      R6,R5
   \   000000CC   F2FFFF1A           BNE      ??ExecSimulator_9
     38          		// Tanks
     39          		for ( set<PRogramObjectBase*>::iterator pBIt=PROTank::ObjectSet.begin(); !pTerminate && pBIt!=PROTank::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_7:
   \   000000D0   30519FE5           LDR      R5,??ExecSimulator_1+0x10  ;; ??ObjectSet_2
   \   000000D4   000054E3           CMP      R4,#+0
   \   000000D8   006095E5           LDR      R6,[R5, #+0]
   \   000000DC   0D00001A           BNE      ??ExecSimulator_10
   \   000000E0   0A0000EA           B        ??ExecSimulator_11
     40          			PROTank *TElement = (PROTank*)(*pBIt);
   \                     ??ExecSimulator_12:
   \   000000E4   107096E5           LDR      R7,[R6, #+16]
     41          			TElement->SimCalculate();
   \   000000E8   0700A0E1           MOV      R0,R7
   \   000000EC   ........           _BLF     ??SimCalculate_3,??SimCalculate??rA_3
     42          			CheckAlarms(TElement->AlarmSet);
   \   000000F0   0010A0E3           MOV      R1,#+0
   \   000000F4   E40087E2           ADD      R0,R7,#+228
   \   000000F8   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     43          			TSN_Delay(10);
   \   000000FC   0A00A0E3           MOV      R0,#+10
   \   00000100   ........           _BLF     OS_Delay,??OS_Delay??rA
     44          		}
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000010C   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_11:
   \   00000110   050056E1           CMP      R6,R5
   \   00000114   F2FFFF1A           BNE      ??ExecSimulator_12
     45          		// TankPress
     46          		for ( set<PRogramObjectBase*>::iterator pBIt=PROTankPressure::ObjectSet.begin(); !pTerminate && pBIt!=PROTankPressure::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_10:
   \   00000118   EC509FE5           LDR      R5,??ExecSimulator_1+0x14  ;; ??ObjectSet_3
   \   0000011C   000054E3           CMP      R4,#+0
   \   00000120   006095E5           LDR      R6,[R5, #+0]
   \   00000124   0D00001A           BNE      ??ExecSimulator_13
   \   00000128   0A0000EA           B        ??ExecSimulator_14
     47          			PROTankPressure *TElement = (PROTankPressure*)(*pBIt);
   \                     ??ExecSimulator_15:
   \   0000012C   107096E5           LDR      R7,[R6, #+16]
     48          			TElement->SimCalculate();
   \   00000130   0700A0E1           MOV      R0,R7
   \   00000134   ........           _BLF     ??SimCalculate_4,??SimCalculate??rA_4
     49          			CheckAlarms(TElement->AlarmSet);
   \   00000138   0010A0E3           MOV      R1,#+0
   \   0000013C   E40087E2           ADD      R0,R7,#+228
   \   00000140   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     50          			TSN_Delay(10);
   \   00000144   0A00A0E3           MOV      R0,#+10
   \   00000148   ........           _BLF     OS_Delay,??OS_Delay??rA
     51          		}
   \   0000014C   0600A0E1           MOV      R0,R6
   \   00000150   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000154   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_14:
   \   00000158   050056E1           CMP      R6,R5
   \   0000015C   F2FFFF1A           BNE      ??ExecSimulator_15
     52          		for ( set<PRogramObjectBase*>::iterator pBIt=PROLinePressure::ObjectSet.begin(); !pTerminate && pBIt!=PROLinePressure::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_13:
   \   00000160   A8509FE5           LDR      R5,??ExecSimulator_1+0x18  ;; ??ObjectSet_4
   \   00000164   000054E3           CMP      R4,#+0
   \   00000168   006095E5           LDR      R6,[R5, #+0]
   \   0000016C   0D00001A           BNE      ??ExecSimulator_16
   \   00000170   0A0000EA           B        ??ExecSimulator_17
     53          			PROLinePressure *TElement = (PROLinePressure*)(*pBIt);
   \                     ??ExecSimulator_18:
   \   00000174   107096E5           LDR      R7,[R6, #+16]
     54                      TElement->SimCalculate();
   \   00000178   0700A0E1           MOV      R0,R7
   \   0000017C   ........           _BLF     ??SimCalculate_5,??SimCalculate??rA_5
     55          			CheckAlarms(TElement->AlarmSet);
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   E40087E2           ADD      R0,R7,#+228
   \   00000188   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     56                      TSN_Delay(10);
   \   0000018C   0A00A0E3           MOV      R0,#+10
   \   00000190   ........           _BLF     OS_Delay,??OS_Delay??rA
     57          		}
   \   00000194   0600A0E1           MOV      R0,R6
   \   00000198   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000019C   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_17:
   \   000001A0   050056E1           CMP      R6,R5
   \   000001A4   F2FFFF1A           BNE      ??ExecSimulator_18
     58          		for ( set<PRogramObjectBase*>::iterator pBIt=PROLevelSwitch::ObjectSet.begin(); !pTerminate && pBIt!=PROLevelSwitch::ObjectSet.end(); pBIt++ ) {
   \                     ??ExecSimulator_16:
   \   000001A8   64509FE5           LDR      R5,??ExecSimulator_1+0x1C  ;; ??ObjectSet_5
   \   000001AC   000054E3           CMP      R4,#+0
   \   000001B0   006095E5           LDR      R6,[R5, #+0]
   \   000001B4   0D00001A           BNE      ??ExecSimulator_2
   \   000001B8   0A0000EA           B        ??ExecSimulator_19
     59          			PROLevelSwitch *TElement = (PROLevelSwitch*)(*pBIt);
   \                     ??ExecSimulator_20:
   \   000001BC   104096E5           LDR      R4,[R6, #+16]
     60                      TElement->SimCalculate();
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   ........           _BLF     ??SimCalculate_6,??SimCalculate??rA_6
     61          			CheckAlarms(TElement->AlarmSet);
   \   000001C8   0010A0E3           MOV      R1,#+0
   \   000001CC   E40084E2           ADD      R0,R4,#+228
   \   000001D0   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
     62                      TSN_Delay(10);
   \   000001D4   0A00A0E3           MOV      R0,#+10
   \   000001D8   ........           _BLF     OS_Delay,??OS_Delay??rA
     63          		}
   \   000001DC   0600A0E1           MOV      R0,R6
   \   000001E0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001E4   0060A0E1           MOV      R6,R0
   \                     ??ExecSimulator_19:
   \   000001E8   050056E1           CMP      R6,R5
   \   000001EC   F2FFFF1A           BNE      ??ExecSimulator_20
     64          
     65          	}
     66          }
   \                     ??ExecSimulator_2:
   \   000001F0   F040BDE8           POP      {R4-R7,LR}
   \   000001F4   1EFF2FE1           BX       LR               ;; return
   \                     ??ExecSimulator_1:
   \   000001F8   ........           DC32     ConfigWarningsString
   \   000001FC   ........           DC32     ??PROAtmRefPtr
   \   00000200   ........           DC32     ??ObjectSet
   \   00000204   ........           DC32     ??ObjectSet_1
   \   00000208   ........           DC32     ??ObjectSet_2
   \   0000020C   ........           DC32     ??ObjectSet_3
   \   00000210   ........           DC32     ??ObjectSet_4
   \   00000214   ........           DC32     ??ObjectSet_5

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs IOSimulator &IOSimulator::new IOSimulator()
   \                     `??new IOSimulator`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   ........           B        ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void IOSimulator::delete ~IOSimulator(IOSimulator *)
   \                     `??delete ~IOSimulator`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0000000A           BEQ      `??delete ~IOSimulator_1`
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~IOSimulator_1`:
   \   00000010                      REQUIRE ?Subroutine6
   \   00000010                      ;; // Fall through to label ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     IOSimulator::ExecSimulator(bool *)
                                       20
     IOSimulator::IOSimulator()         0
     IOSimulator::delete ~IOSimulator(IOSimulator *)
                                        4
     IOSimulator::new IOSimulator()     4
     IOSimulator::~IOSimulator()        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     IOSimulator::IOSimulatorPtr       4
     IOSimulator::~IOSimulator()       4
     IOSimulator::IOSimulator()        4
     IOSimulator::ExecSimulator(bool *)
                                     536
     IOSimulator::new IOSimulator()   16
     IOSimulator::delete ~IOSimulator(IOSimulator *)
                                      16
     ?Subroutine6                      8
     __sti__routine()                  4
      Others                         196

 
 860 bytes in segment CODE
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 592 bytes of CODE memory (+ 284 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: none
