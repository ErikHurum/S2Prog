##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNLanguage.cpp                 #
#    Command line    =  D:\S2Prog\Shared\Src\TSNLanguage.cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNLanguage.lst             #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNLanguage.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNLanguage.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool operator==(string const &, char const *)
   \                     `??operator==`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           _BLF     strlen,??strlen??rA
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   142094E5           LDR      R2,[R4, #+20]
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??compare,??compare??rA
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100A003           MOVEQ    R0,#+1
   \   0000003C   0000A013           MOVNE    R0,#+0
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          //---------------------------------------------------------------------------
      4          extern NewLanguageWord EnglishDictionary[];
      5          extern unsigned WordsInEnglishDictionary;
      6          extern wchar_t EnglishUserManual[];
      7          extern int SizeOfEnglishUserManual;
      8          
      9          extern NewLanguageWord NorwegianDictionary[];
     10          extern unsigned WordsInNorwegianDictionary;
     11          extern wchar_t NorwegianUserManual[];
     12          extern int SizeOfNorwegianUserManual;
     13          
     14          extern NewLanguageWord GermanDictionary[];
     15          extern unsigned WordsInGermanDictionary;
     16          extern wchar_t GermanUserManual[];
     17          extern int SizeOfGermanUserManual;
     18          
     19          extern NewLanguageWord DutchDictionary[];
     20          extern unsigned WordsInDutchDictionary;
     21          extern wchar_t DutchUserManual[];
     22          extern int SizeOfDutchUserManual;
     23          
     24          extern NewLanguageWord FrenchDictionary[];
     25          extern unsigned WordsInFrenchDictionary;
     26          extern wchar_t FrenchUserManual[];
     27          extern int SizeOfFrenchUserManual;
     28          
     29          
     30          #ifdef S2TXU
     31          OS_RSEMA LanguageSema;
     32          #endif
     33          
     34          /*{ENGLISH, NORWEGIAN, GERMAN}*/
     35          
     36          CountryName Language[]={
     37          	{L"English"     ,L_ENGLISH   , EnglishDictionary    ,WordsInEnglishDictionary   	,(wchar_t*)EnglishUserManual	,SizeOfEnglishUserManual	,PROProjectInfo::L_English},
     38          	{L"French"      ,L_FRENCH    , FrenchDictionary		,WordsInFrenchDictionary	 	,(wchar_t*)FrenchUserManual		,SizeOfFrenchUserManual		,PROProjectInfo::L_French},
     39          	{L"German"      ,L_GERMAN    , GermanDictionary     ,WordsInGermanDictionary    	,(wchar_t*)GermanUserManual		,SizeOfGermanUserManual		,PROProjectInfo::L_German},
     40          	{L"Dutch"       ,L_DUTCH     , DutchDictionary      ,WordsInDutchDictionary      	,(wchar_t*)DutchUserManual		,SizeOfDutchUserManual		,PROProjectInfo::L_Dutch},
     41          	{L"Norwegian"   ,L_NORWEGIAN , NorwegianDictionary  ,WordsInNorwegianDictionary 	,(wchar_t*)NorwegianUserManual	,SizeOfNorwegianUserManual	,PROProjectInfo::L_Norwegian},
     42          	{L"Spanish "    ,L_SPANISH   , NULL					,0							 	,NULL							,0							,PROProjectInfo::L_Portuguese},
     43          	{L"Portuguese " ,L_PORTUGUESE, NULL					,0							 	,NULL							,0							,PROProjectInfo::L_Spanish},
     44          };

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable13  ;; WordsInEnglishDictionary
   \   00000008   ........           LDR      R4,??DataTable19  ;; Language
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   ........           LDR      R0,??DataTable6  ;; SizeOfEnglishUserManual
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   140084E5           STR      R0,[R4, #+20]
   \   00000020   CC009FE5           LDR      R0,??__sti__routine_1  ;; ??L_English
   \   00000024   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000028   1800C4E5           STRB     R0,[R4, #+24]
   \   0000002C   C4009FE5           LDR      R0,??__sti__routine_1+0x4  ;; WordsInFrenchDictionary
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   280084E5           STR      R0,[R4, #+40]
   \   00000038   BC009FE5           LDR      R0,??__sti__routine_1+0x8  ;; SizeOfFrenchUserManual
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   300084E5           STR      R0,[R4, #+48]
   \   00000044   B4009FE5           LDR      R0,??__sti__routine_1+0xC  ;; ??L_French
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   3400C4E5           STRB     R0,[R4, #+52]
   \   00000050   AC009FE5           LDR      R0,??__sti__routine_1+0x10  ;; WordsInGermanDictionary
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   440084E5           STR      R0,[R4, #+68]
   \   0000005C   A4009FE5           LDR      R0,??__sti__routine_1+0x14  ;; SizeOfGermanUserManual
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   4C0084E5           STR      R0,[R4, #+76]
   \   00000068   9C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; ??L_German
   \   0000006C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000070   5000C4E5           STRB     R0,[R4, #+80]
   \   00000074   94009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; WordsInDutchDictionary
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   600084E5           STR      R0,[R4, #+96]
   \   00000080   8C009FE5           LDR      R0,??__sti__routine_1+0x20  ;; SizeOfDutchUserManual
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   680084E5           STR      R0,[R4, #+104]
   \   0000008C   84009FE5           LDR      R0,??__sti__routine_1+0x24  ;; ??L_Dutch
   \   00000090   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000094   6C00C4E5           STRB     R0,[R4, #+108]
   \   00000098   7C009FE5           LDR      R0,??__sti__routine_1+0x28  ;; WordsInNorwegianDictionary
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   7C0084E5           STR      R0,[R4, #+124]
   \   000000A4   74009FE5           LDR      R0,??__sti__routine_1+0x2C  ;; SizeOfNorwegianUserManual
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   840084E5           STR      R0,[R4, #+132]
   \   000000B0   6C009FE5           LDR      R0,??__sti__routine_1+0x30  ;; ??L_Norwegian
   \   000000B4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B8   8800C4E5           STRB     R0,[R4, #+136]
   \   000000BC   64009FE5           LDR      R0,??__sti__routine_1+0x34  ;; ??L_Portuguese
   \   000000C0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000C4   A400C4E5           STRB     R0,[R4, #+164]
   \   000000C8   5C009FE5           LDR      R0,??__sti__routine_1+0x38  ;; ??L_Spanish
   \   000000CC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000D0   C000C4E5           STRB     R0,[R4, #+192]
     45          AnsiString UserManual;
   \   000000D4   DC0084E2           ADD      R0,R4,#+220
   \   000000D8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000DC   4C009FE5           LDR      R0,??__sti__routine_1+0x3C  ;; ?_0
   \   000000E0   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     46          int NumberOfLanguages = NELEMENTS(Language);
     47          NewLanguageWord *CurrentDictionary  = (NewLanguageWord*)EnglishDictionary;
     48          unsigned WordsInCurrentDictionary   = WordsInEnglishDictionary;
   \   000000E4   000095E5           LDR      R0,[R5, #+0]
   \   000000E8   C80084E5           STR      R0,[R4, #+200]
   \   000000EC   3040BDE8           POP      {R4,R5,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000F4   ........           DC32     ??L_English
   \   000000F8   ........           DC32     WordsInFrenchDictionary
   \   000000FC   ........           DC32     SizeOfFrenchUserManual
   \   00000100   ........           DC32     ??L_French
   \   00000104   ........           DC32     WordsInGermanDictionary
   \   00000108   ........           DC32     SizeOfGermanUserManual
   \   0000010C   ........           DC32     ??L_German
   \   00000110   ........           DC32     WordsInDutchDictionary
   \   00000114   ........           DC32     SizeOfDutchUserManual
   \   00000118   ........           DC32     ??L_Dutch
   \   0000011C   ........           DC32     WordsInNorwegianDictionary
   \   00000120   ........           DC32     SizeOfNorwegianUserManual
   \   00000124   ........           DC32     ??L_Norwegian
   \   00000128   ........           DC32     ??L_Portuguese
   \   0000012C   ........           DC32     ??L_Spanish
   \   00000130   ........           DC32     ?_0

   \                                 In segment DATA_I, align 4, align-sorted
   \                     Language:
   \   00000000                      DS8 196
   \   000000C4                      REQUIRE `?<Initializer for Language>`
   \                     CurrentDictionary:
   \   000000C4                      DS8 4
   \   000000C8                      REQUIRE `?<Initializer for CurrentDictionary>`
   \                     WordsInCurrentDictionary:
   \   000000C8                      DS8 4
   \   000000CC                      REQUIRE `?<Initializer for WordsInCurrentDictionary>`
   \                     LanguageSema:
   \   000000CC                      DS8 16
   \   000000DC                      REQUIRE `?<Initializer for LanguageSema>`
   \                     UserManual:
   \   000000DC                      DS8 28
   \   000000F8                      REQUIRE `?<Initializer for UserManual>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     NumberOfLanguages:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for NumberOfLanguages>`

   \                                 In segment CODE, align 4, keep-with-next
     49          void ConvertUserManual(wchar_t *UsrManPtr, int Size)
     50          {
   \                     ??ConvertUserManual:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
     51          #ifdef S2TXU
     52          	char *Buf = new char[MAX_USER_MANUAL_SIZE];
   \   00000010   800DA0E3           MOV      R0,#+8192
   \   00000014   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000018   0040A0E1           MOV      R4,R0
     53          	int StrSize = wcstombs(Buf,UsrManPtr,Size);
   \   0000001C   0620A0E1           MOV      R2,R6
   \   00000020   0510A0E1           MOV      R1,R5
     54          	if ( StrSize == -1 ) {
   \   00000024   ........           LDR      R5,??DataTable17  ;; Language
   \   00000028   ........           _BLF     wcstombs,??wcstombs??rA
   \   0000002C   010070E3           CMN      R0,#+1
   \   00000030   0800001A           BNE      ??ConvertUserManual_1
     55          		UserManual = FindDictionaryWord(L_WORD614);//Error in UNICODE string!
   \   00000034   6610A0E3           MOV      R1,#+102
   \   00000038   801F81E3           ORR      R1,R1,#0x200
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           BL       ??FindDictionaryWord
   \   00000044   D8009FE5           LDR      R0,??ConvertUserManual_2  ;; ??npos
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   003090E5           LDR      R3,[R0, #+0]
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   270000EA           B        ??ConvertUserManual_3
     56          	} else {
     57          		if ( StrSize >= MAX_USER_MANUAL_SIZE ) {
   \                     ??ConvertUserManual_1:
   \   00000058   800D50E3           CMP      R0,#+8192
   \   0000005C   1E0000BA           BLT      ??ConvertUserManual_4
     58          			Buf[MAX_USER_MANUAL_SIZE-1] = 0; // Null-terminate string
   \   00000060   FF00A0E3           MOV      R0,#+255
   \   00000064   7C0D80E3           ORR      R0,R0,#0x1F00
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0410C0E7           STRB     R1,[R0, +R4]
     59          			UserManual  = (AnsiString)Buf;
   \   00000070   0410A0E1           MOV      R1,R4
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   9C009FE5           LDR      R0,??ConvertUserManual_2  ;; ??npos
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   006090E5           LDR      R6,[R0, #+0]
   \   0000008C   DC0085E2           ADD      R0,R5,#+220
   \   00000090   0630A0E1           MOV      R3,R6
   \   00000094   ........           _BLF     ??assign,??assign??rA
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     60          			UserManual += FindDictionaryWord(L_WORD613);// File truncated
   \   000000A8   6510A0E3           MOV      R1,#+101
   \   000000AC   801F81E3           ORR      R1,R1,#0x200
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           BL       ??FindDictionaryWord
   \   000000B8   0630A0E1           MOV      R3,R6
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   1C108DE2           ADD      R1,SP,#+28
   \   000000C4   DC0085E2           ADD      R0,R5,#+220
   \   000000C8   ........           _BLF     ??append,??append??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   1C008DE2           ADD      R0,SP,#+28
   \   000000D8   0B0000EA           B        ??ConvertUserManual_5
     61          		} else {
     62          			UserManual  = (AnsiString)Buf;
   \                     ??ConvertUserManual_4:
   \   000000DC   0410A0E1           MOV      R1,R4
   \   000000E0   0D00A0E1           MOV      R0,SP
   \   000000E4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000E8   34109FE5           LDR      R1,??ConvertUserManual_2  ;; ??npos
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   003091E5           LDR      R3,[R1, #+0]
   \   000000F4   0010A0E1           MOV      R1,R0
   \                     ??ConvertUserManual_3:
   \   000000F8   DC0085E2           ADD      R0,R5,#+220
   \   000000FC   ........           _BLF     ??assign,??assign??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   0D00A0E1           MOV      R0,SP
   \                     ??ConvertUserManual_5:
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
     63          		}
     64          	}
     65          	delete [] Buf;
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     `??operator delete[]`,`??operator delete[]??rA`
     66          #elif defined(BORLAND)
     67          	UserManual = UsrManPtr;
     68          #endif
     69          
     70          }
   \   00000118   38D08DE2           ADD      SP,SP,#+56
   \   0000011C   7040BDE8           POP      {R4-R6,LR}
   \   00000120   1EFF2FE1           BX       LR               ;; return
   \                     ??ConvertUserManual_2:
   \   00000124   ........           DC32     ??npos
     71          
     72          //---------------------------------------------------------------------------
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          static int NewCompareKeyInTable(const void* KWEntry1, const void* KWEntry2)
     75          {
     76          	int Key1 =((NewLanguageWord*)KWEntry1)->Key;
     77          	int Key2 =((NewLanguageWord*)KWEntry2)->Key;
     78          	return(Key1 - Key2);
   \                     ??NewCompareKeyInTable:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   ........           B        ?Subroutine16
     79          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   010040E0           SUB      R0,R0,R1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     80          //---------------------------------------------------------------------------
     81          
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          void SortDictionary(NewLanguageWord *Dictionary, int Elements)
     84          {
     85          	qsort( Dictionary, Elements, sizeof(NewLanguageWord), NewCompareKeyInTable);
   \                     ??SortDictionary:
   \   00000000   ........           LDR      R3,??DataTable8  ;; ??NewCompareKeyInTable
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0820A0E3           MOV      R2,#+8
   \   0000000C   ........           _BLF     qsort,??qsort??rA
     86          }
   \   00000010   ........           B        ?Subroutine17

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   ........           DC32     ??CompareCountryKeyInTable
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          void SortDictionary(void)
     89          {
   \                     ??SortDictionary_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
     90          	for ( unsigned i=0; i < NELEMENTS(Language); i++ ) {
   \   00000004   0040A0E3           MOV      R4,#+0
     91          		SortDictionary(Language[i].Dictionary,Language[i].Entries);
   \                     ??SortDictionary_2:
   \   00000008   ........           LDR      R0,??DataTable19  ;; Language
   \   0000000C   1C10A0E3           MOV      R1,#+28
   \   00000010   910420E0           MLA      R0,R1,R4,R0
   \   00000014   0C1090E5           LDR      R1,[R0, #+12]
   \   00000018   080090E5           LDR      R0,[R0, #+8]
     92          	}
   \   0000001C   014084E2           ADD      R4,R4,#+1
   \   00000020   ........           BL       ??SortDictionary
   \   00000024   070054E3           CMP      R4,#+7
   \   00000028   F6FFFF3A           BCC      ??SortDictionary_2
     93          #ifdef S2TXU
     94          	ConvertUserManual((wchar_t*)EnglishUserManual,SizeOfEnglishUserManual);
   \   0000002C   ........           LDR      R0,??DataTable6  ;; SizeOfEnglishUserManual
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   00009FE5           LDR      R0,??SortDictionary_3  ;; EnglishUserManual
   \   00000038   ........           B        ?Subroutine15
   \                     ??SortDictionary_3:
   \   0000003C   ........           DC32     EnglishUserManual
     95          #endif
     96          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ........           BL       ??ConvertUserManual
   \                     ??Subroutine15_0:
   \   00000004   1040BDE8           POP      {R4,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     97          
     98          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     99          NewLanguageWord *FindDictionaryWordPtr(int Key)
    100          {
   \                     ??FindDictionaryWordPtr:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
    101          	NewLanguageWord tmpKwd;
    102          	tmpKwd.Key   = Key;
    103          #ifdef ANTDUSIM
    104          	NewLanguageWord *KWPtr=(NewLanguageWord*)lfind((void*)&tmpKwd, CurrentDictionary, &WordsInCurrentDictionary, sizeof(NewLanguageWord), NewCompareKeyInTable);
    105          	if ( !KWPtr && CurrentDictionary!= EnglishDictionary ) {
    106          		KWPtr=(NewLanguageWord*)lfind((void*)&tmpKwd, EnglishDictionary, &WordsInEnglishDictionary, sizeof(NewLanguageWord), NewCompareKeyInTable);
    107          	}
    108          #else
    109          	NewLanguageWord *KWPtr=(NewLanguageWord*)bsearch((void*)&tmpKwd, CurrentDictionary, WordsInCurrentDictionary, sizeof(NewLanguageWord), NewCompareKeyInTable);
   \   00000004   ........           LDR      R4,??DataTable17  ;; Language
   \   00000008   ........           LDR      R5,??DataTable8  ;; ??NewCompareKeyInTable
   \   0000000C   00008DE5           STR      R0,[SP, #+0]
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   C82094E5           LDR      R2,[R4, #+200]
   \   0000001C   C41094E5           LDR      R1,[R4, #+196]
   \   00000020   0830A0E3           MOV      R3,#+8
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   ........           _BLF     bsearch,??bsearch??rA
    110          	if ( !KWPtr && CurrentDictionary!= EnglishDictionary ) {
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   04D08DE2           ADD      SP,SP,#+4
   \   00000034   0A00001A           BNE      ??FindDictionaryWordPtr_1
   \   00000038   ........           LDR      R1,??DataTable14  ;; EnglishDictionary
   \   0000003C   C42094E5           LDR      R2,[R4, #+196]
   \   00000040   010052E1           CMP      R2,R1
   \   00000044   0600000A           BEQ      ??FindDictionaryWordPtr_1
    111          		KWPtr=(NewLanguageWord*)bsearch((void*)&tmpKwd, EnglishDictionary, WordsInEnglishDictionary, sizeof(NewLanguageWord), NewCompareKeyInTable);
   \   00000048   ........           LDR      R0,??DataTable13  ;; WordsInEnglishDictionary
   \   0000004C   20002DE9           PUSH     {R5}
   \   00000050   002090E5           LDR      R2,[R0, #+0]
   \   00000054   0830A0E3           MOV      R3,#+8
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           _BLF     bsearch,??bsearch??rA
   \   00000060   04D08DE2           ADD      SP,SP,#+4
    112          	}
    113          #endif
    114          	return(KWPtr);
   \                     ??FindDictionaryWordPtr_1:
   \   00000064   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    115          }
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          AnsiString FindDictionaryWord(int Key)
    118          {
   \                     ??FindDictionaryWord:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   A0D04DE2           SUB      SP,SP,#+160
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    119          #ifdef BORLAND
    120          	AnsiString tmpStr;
    121          	NewLanguageWord *KWPtr=FindDictionaryWordPtr(Key);
    122          	if ( KWPtr ) {
    123          		tmpStr =  KWPtr->Word;
    124          		if ( tmpStr.IsEmpty() ) {
    125          			KWPtr=FindDictionaryWordPtr(Key);
    126          			if ( KWPtr ) {
    127          				tmpStr = KWPtr->Word;
    128          			}
    129          		}
    130          	}
    131          	return tmpStr;
    132          #else
    133          	char Buf[2*BUF_SIZE]={""};	 // 2*80
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   A020A0E3           MOV      R2,#+160
   \                     ??FindDictionaryWord_1:
   \   0000001C   042052E2           SUBS     R2,R2,#+4
   \   00000020   021080E7           STR      R1,[R0, R2]
   \   00000024   FCFFFF1A           BNE      ??FindDictionaryWord_1
    134          	NewLanguageWord *KWPtr=FindDictionaryWordPtr(Key);
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       ??FindDictionaryWordPtr
   \   00000030   0060B0E1           MOVS     R6,R0
    135          	if ( KWPtr ) {
   \   00000034   1200000A           BEQ      ??FindDictionaryWord_2
    136          #ifdef S2TXU
    137          		OS_Use(&LanguageSema);
   \   00000038   ........           LDR      R7,??DataTable17  ;; Language
   \   0000003C   CC0087E2           ADD      R0,R7,#+204
   \   00000040   ........           _BLF     OS_Use,??OS_Use??rA
    138          #endif
    139          		int StrSize = wcstombs(Buf,KWPtr->Word,2*BUF_SIZE);
   \   00000044   041096E5           LDR      R1,[R6, #+4]
   \   00000048   A020A0E3           MOV      R2,#+160
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     wcstombs,??wcstombs??rA
    140          		if ( !StrSize ) {
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0700001A           BNE      ??FindDictionaryWord_3
    141          			KWPtr=FindDictionaryWordPtr(Key);
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       ??FindDictionaryWordPtr
   \   00000064   0060B0E1           MOVS     R6,R0
    142          			if ( KWPtr ) {
   \   00000068   0300000A           BEQ      ??FindDictionaryWord_3
    143          				StrSize = wcstombs(Buf,KWPtr->Word,2*BUF_SIZE);
   \   0000006C   041090E5           LDR      R1,[R0, #+4]
   \   00000070   A020A0E3           MOV      R2,#+160
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           _BLF     wcstombs,??wcstombs??rA
    144          			}
    145          		}
    146          #ifdef S2TXU
    147          		OS_Unuse(&LanguageSema);
   \                     ??FindDictionaryWord_3:
   \   0000007C   CC0087E2           ADD      R0,R7,#+204
   \   00000080   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    148          #endif
    149          	}
    150          	return(Buf);
   \                     ??FindDictionaryWord_2:
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000090   A0D08DE2           ADD      SP,SP,#+160
   \   00000094   F040BDE8           POP      {R4-R7,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
    151          #endif
    152          }
    153          //---------------------------------------------------------------------------
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          int FindDictionaryKey(AnsiString Word)
    156          {
   \                     ??FindDictionaryKey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    157          	bool Found = false;
    158          	unsigned Cnt = 0;
    159          	NewLanguageWord *KWPtr=NULL;
    160          #ifdef S2TXU
    161          	OS_Use(&LanguageSema);
   \   00000004   ........           LDR      R7,??DataTable17  ;; Language
   \   00000008   A0D04DE2           SUB      SP,SP,#+160
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0080A0E3           MOV      R8,#+0
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   0560A0E1           MOV      R6,R5
   \   0000001C   CC0087E2           ADD      R0,R7,#+204
   \   00000020   ........           _BLF     OS_Use,??OS_Use??rA
   \                     ??FindDictionaryKey_1:
   \   00000024   C80097E5           LDR      R0,[R7, #+200]
   \   00000028   000056E1           CMP      R6,R0
   \   0000002C   1200002A           BCS      ??FindDictionaryKey_2
    162          #endif
    163          
    164          	while ( !Found && (Cnt <WordsInCurrentDictionary) ) {
    165          		char Buf[2*BUF_SIZE]={""};	 // 2*80
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   A020A0E3           MOV      R2,#+160
   \                     ??FindDictionaryKey_3:
   \   0000003C   042052E2           SUBS     R2,R2,#+4
   \   00000040   021080E7           STR      R1,[R0, R2]
   \   00000044   FCFFFF1A           BNE      ??FindDictionaryKey_3
    166          		KWPtr = &CurrentDictionary[Cnt++];
   \   00000048   C40097E5           LDR      R0,[R7, #+196]
    167          		wcstombs(Buf,KWPtr->Word,2*BUF_SIZE);
   \   0000004C   A020A0E3           MOV      R2,#+160
   \   00000050   868180E0           ADD      R8,R0,R6, LSL #+3
   \   00000054   041098E5           LDR      R1,[R8, #+4]
   \   00000058   016086E2           ADD      R6,R6,#+1
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     wcstombs,??wcstombs??rA
    168          		if ( Word == Buf ) {
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   EAFFFF0A           BEQ      ??FindDictionaryKey_1
    169          			Found = true;
   \   00000078   160000EA           B        ??FindDictionaryKey_4
    170          		}
    171          	}
    172          	if ( !Found ) {
    173          		Cnt = 0;
   \                     ??FindDictionaryKey_2:
   \   0000007C   0060A0E3           MOV      R6,#+0
   \                     ??FindDictionaryKey_5:
   \   00000080   ........           LDR      R0,??DataTable13  ;; WordsInEnglishDictionary
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   000056E1           CMP      R6,R0
   \   0000008C   1200002A           BCS      ??FindDictionaryKey_6
    174          		while ( !Found && (Cnt <WordsInEnglishDictionary) ) {
    175          			char Buf[2*BUF_SIZE]={""};	 // 2*80
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   A020A0E3           MOV      R2,#+160
   \                     ??FindDictionaryKey_7:
   \   0000009C   042052E2           SUBS     R2,R2,#+4
   \   000000A0   021080E7           STR      R1,[R0, R2]
   \   000000A4   FCFFFF1A           BNE      ??FindDictionaryKey_7
    176          			KWPtr = (NewLanguageWord*)&EnglishDictionary[Cnt++];
   \   000000A8   ........           LDR      R0,??DataTable14  ;; EnglishDictionary
    177          			wcstombs(Buf,KWPtr->Word,2*BUF_SIZE);
   \   000000AC   A020A0E3           MOV      R2,#+160
   \   000000B0   868180E0           ADD      R8,R0,R6, LSL #+3
   \   000000B4   041098E5           LDR      R1,[R8, #+4]
   \   000000B8   016086E2           ADD      R6,R6,#+1
   \   000000BC   0D00A0E1           MOV      R0,SP
   \   000000C0   ........           _BLF     wcstombs,??wcstombs??rA
    178          			if ( Word == Buf ) {
   \   000000C4   0D10A0E1           MOV      R1,SP
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   ........           _BLF     `??operator==`,`??operator==??rA`
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   E9FFFF0A           BEQ      ??FindDictionaryKey_5
    179          				Found = true;
   \                     ??FindDictionaryKey_4:
   \   000000D8   0150A0E3           MOV      R5,#+1
    180          			}
    181          		}
    182          	}
    183          #ifdef S2TXU
    184          	OS_Unuse(&LanguageSema);
   \                     ??FindDictionaryKey_6:
   \   000000DC   CC0087E2           ADD      R0,R7,#+204
   \   000000E0   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    185          #endif
    186          	if ( Found && KWPtr ) {
   \   000000E4   000055E3           CMP      R5,#+0
   \   000000E8   00005813           CMPNE    R8,#+0
    187          		return(KWPtr->Key);
   \   000000EC   00009815           LDRNE    R0,[R8, #+0]
    188          	} else {
    189          		return(NOT_FOUND);
   \   000000F0   A0D08DE2           ADD      SP,SP,#+160
   \   000000F4   F041BDE8           POP      {R4-R8,LR}
   \   000000F8   0000E003           MVNEQ    R0,#+0
   \   000000FC   1EFF2FE1           BX       LR               ;; return
    190          	}
    191          }
    192          //---------------------------------------------------------------------------
    193          

   \                                 In segment CODE, align 4, keep-with-next
    194          static int CompareCountryKeyInTable(const void* KWEntry1, const void* KWEntry2)
    195          {
    196          	int Key1 =((CountryName*)KWEntry1)->Key;
    197          	int Key2 =((CountryName*)KWEntry2)->Key;
    198          	return(Key1 - Key2);
   \                     ??CompareCountryKeyInTable:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   041091E5           LDR      R1,[R1, #+4]
   \   00000008                      REQUIRE ?Subroutine16
   \   00000008                      ;; // Fall through to label ?Subroutine16
    199          }
    200          
    201          //---------------------------------------------------------------------------
    202          
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          CountryName *FindCountry(int Key)
    205          {
    206          	void *Base   = (void*)Language;
    207          	size_t Num   = NELEMENTS(Language);
    208          	size_t Width = sizeof(CountryName);
    209          	CountryName tmpKwd;
    210          	tmpKwd.Key   = Key;
    211          	// List not sorted, must use lfind instead of bsearch
    212          	CountryName *CountryPtr=(CountryName*)lfind((void*)&tmpKwd, Base, &Num, Width, CompareCountryKeyInTable);
   \                     ??FindCountry:
   \   00000000   ........           LDR      R1,??DataTable19  ;; Language
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   20D04DE2           SUB      SP,SP,#+32
   \   0000000C   08008DE5           STR      R0,[SP, #+8]
   \   00000010   ........           LDR      R0,??Subroutine17_0  ;; ??CompareCountryKeyInTable
   \   00000014   0720A0E3           MOV      R2,#+7
   \   00000018   00208DE5           STR      R2,[SP, #+0]
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   1C30A0E3           MOV      R3,#+28
   \   00000024   04208DE2           ADD      R2,SP,#+4
   \   00000028   08008DE2           ADD      R0,SP,#+8
   \   0000002C   ........           _BLF     ??lfind,??lfind??rA
    213          	return(CountryPtr);
   \   00000030   24D08DE2           ADD      SP,SP,#+36
   \   00000034                      REQUIRE ?Subroutine17
   \   00000034                      ;; // Fall through to label ?Subroutine17
    214          }
    215          
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          void SetCurrentLanguage(int LanguageKey)
    218          {
   \                     ??SetCurrentLanguage:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    219          	CountryName *CountryPtr = FindCountry(LanguageKey);
   \   00000008   ........           BL       ??FindCountry
    220          	if ( !CountryPtr || !CountryPtr->IsAvailable ||!CountryPtr->Dictionary || !CountryPtr->Entries ) {
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0700000A           BEQ      ??SetCurrentLanguage_1
   \   00000014   1810D0E5           LDRB     R1,[R0, #+24]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   08109015           LDRNE    R1,[R0, #+8]
   \   00000020   00005113           CMPNE    R1,#+0
   \   00000024   0C109015           LDRNE    R1,[R0, #+12]
   \   00000028   00005113           CMPNE    R1,#+0
   \   0000002C   0100001A           BNE      ??SetCurrentLanguage_2
    221          		CountryPtr = FindCountry(L_ENGLISH); // Default to English
   \   00000030   0000A0E3           MOV      R0,#+0
   \                     ??SetCurrentLanguage_1:
   \   00000034   ........           BL       ??FindCountry
    222          		PROSystemData::CurrentLanguage = L_ENGLISH;
    223          	}
    224          	PROSystemData::CurrentLanguage = LanguageKey;
   \                     ??SetCurrentLanguage_2:
   \   00000038   ........           LDR      R1,??DataTable18  ;; ??CurrentLanguage
   \   0000003C   004081E5           STR      R4,[R1, #+0]
    225          	CurrentDictionary              = CountryPtr->Dictionary;
   \   00000040   ........           LDR      R1,??DataTable17  ;; Language
   \   00000044   082090E5           LDR      R2,[R0, #+8]
   \   00000048   C42081E5           STR      R2,[R1, #+196]
    226          	WordsInCurrentDictionary       = CountryPtr->Entries;
   \   0000004C   0C2090E5           LDR      R2,[R0, #+12]
   \   00000050   C82081E5           STR      R2,[R1, #+200]
    227          	ConvertUserManual(CountryPtr->UserManual,CountryPtr->SizeOfUserManual);
   \   00000054   141090E5           LDR      R1,[R0, #+20]
   \   00000058   100090E5           LDR      R0,[R0, #+16]
   \   0000005C                      REQUIRE ?Subroutine15
   \   0000005C                      ;; // Fall through to label ?Subroutine15
    228          }
    229          

   \                                 In segment CODE, align 4, keep-with-next
    230          void EnableLanguage(int LanguageKey)
    231          {
   \                     ??EnableLanguage:
   \   00000000   00402DE9           PUSH     {LR}
    232          	CountryName *CountryPtr = FindCountry(LanguageKey);
   \   00000004   ........           BL       ??FindCountry
    233          	if ( CountryPtr ) {
   \   00000008   000050E3           CMP      R0,#+0
    234          		CountryPtr->IsAvailable = true;
   \   0000000C   0110A013           MOVNE    R1,#+1
   \   00000010   1810C015           STRBNE   R1,[R0, #+24]
    235          	}
    236          }
   \   00000014   ........           B        ?Subroutine17
    237          

   \                                 In segment CODE, align 4, keep-with-next
    238          AnsiString GetLanguage(int LanguageKey)
    239          {
   \                     ??GetLanguage:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0100A0E1           MOV      R0,R1
    240          	CountryName *CountryPtr = FindCountry(LanguageKey);
   \   00000010   ........           BL       ??FindCountry
    241          	if ( CountryPtr && CountryPtr->IsAvailable) {
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1810D015           LDRBNE   R1,[R0, #+24]
   \   0000001C   00005113           CMPNE    R1,#+0
   \   00000020   0500000A           BEQ      ??GetLanguage_1
    242          		char Buf[BUF_SIZE];
    243          		wcstombs(Buf,CountryPtr->Word,BUF_SIZE);
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   5020A0E3           MOV      R2,#+80
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     wcstombs,??wcstombs??rA
    244          		return((AnsiString)Buf);
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   000000EA           B        ??GetLanguage_2
    245          	} else {
    246          		return("");
   \                     ??GetLanguage_1:
   \   0000003C   031F8FE2           ADR      R1,??GetLanguage_3  ;; ""
   \                     ??GetLanguage_2:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000048   50D08DE2           ADD      SP,SP,#+80
   \   0000004C   ........           B        ??Subroutine15_0
   \                     ??GetLanguage_3:
   \   00000050   00000000           DC8      "",+0,+0,+0
    247          	}
    248          }
    249          

   \                                 In segment CODE, align 4, keep-with-next
    250          AnsiString GetCurrentLanguage(void)
    251          {
    252          	AnsiString Country=GetLanguage(PROSystemData::CurrentLanguage);
   \                     ??GetCurrentLanguage:
   \   00000000   ........           LDR      R1,??DataTable18  ;; ??CurrentLanguage
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   ........           BL       ??GetLanguage
    253          	return(Country);
   \   00000010   ........           B        ?Subroutine17
    254          }
    255          

   \                                 In segment CODE, align 4, keep-with-next
    256          int GetNumberOfLanguages(void)
    257          {
    258          	int Count = 0;
   \                     ??GetNumberOfLanguages:
   \   00000000   0000A0E3           MOV      R0,#+0
    259          	for ( int i=0; i < L_NUMBER_OF_LANGUAGES; i++ ) {
   \   00000004   0010A0E3           MOV      R1,#+0
    260          		if ( Language[i].IsAvailable && Language[i].Key >= L_ENGLISH ) {
   \                     ??GetNumberOfLanguages_1:
   \   00000008   ........           LDR      R2,??DataTable19  ;; Language
   \   0000000C   1C30A0E3           MOV      R3,#+28
   \   00000010   932122E0           MLA      R2,R3,R1,R2
   \   00000014   1830D2E5           LDRB     R3,[R2, #+24]
   \   00000018   000053E3           CMP      R3,#+0
   \   0000001C   0200000A           BEQ      ??GetNumberOfLanguages_2
   \   00000020   042092E5           LDR      R2,[R2, #+4]
   \   00000024   000052E3           CMP      R2,#+0
    261          			Count++;
   \   00000028   01008052           ADDPL    R0,R0,#+1
    262          		}
    263          	}
   \                     ??GetNumberOfLanguages_2:
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   070051E3           CMP      R1,#+7
   \   00000034   F3FFFFBA           BLT      ??GetNumberOfLanguages_1
    264          	return(Count);
   \   00000038   1EFF2FE1           BX       LR               ;; return
    265          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     SizeOfEnglishUserManual

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??NewCompareKeyInTable

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     WordsInEnglishDictionary

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     EnglishDictionary

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     Language

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ??CurrentLanguage

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     Language

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Language>`:
   \   00000000   ........0000       DC32 `?<Constant L"\\x45\\x6e\\x67\\x6c\\x69\\x73\\x68">`, 0
   \              0000        
   \   00000008   ........0000       DC32 EnglishDictionary, 0, EnglishUserManual, 0
   \              0000........
   \              00000000    
   \   00000018   00000000           DC8 0, 0, 0, 0
   \   0000001C   ........FFFF       DC32 `?<Constant L"\\x46\\x72\\x65\\x6e\\x63\\x68">`, -1
   \              FFFF        
   \   00000024   ........0000       DC32 FrenchDictionary, 0, FrenchUserManual, 0
   \              0000........
   \              00000000    
   \   00000034   00000000           DC8 0, 0, 0, 0
   \   00000038   ........0200       DC32 `?<Constant L"\\x47\\x65\\x72\\x6d\\x61\\x6e">`, 2
   \              0000        
   \   00000040   ........0000       DC32 GermanDictionary, 0, GermanUserManual, 0
   \              0000........
   \              00000000    
   \   00000050   00000000           DC8 0, 0, 0, 0
   \   00000054   ........0300       DC32 `?<Constant L"\\x44\\x75\\x74\\x63\\x68">`, 3, DutchDictionary, 0
   \              0000........
   \              00000000    
   \   00000064   ........0000       DC32 DutchUserManual, 0
   \              0000        
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \   00000070   ........0100       DC32 `?<Constant L"\\x4e\\x6f\\x72\\x77\\x65\\x67\\x69\\x61\\`, 1
   \              0000        
   \   00000078   ........0000       DC32 NorwegianDictionary, 0, NorwegianUserManual, 0
   \              0000........
   \              00000000    
   \   00000088   00000000           DC8 0, 0, 0, 0
   \   0000008C   ........FFFF       DC32 `?<Constant L"\\x53\\x70\\x61\\x6e\\x69\\x73\\x68\\x20"`, -1, 0H
   \              FFFF00000000
   \   00000098   000000000000       DC32 0, 0H, 0
   \              000000000000
   \   000000A4   00000000           DC8 0, 0, 0, 0
   \   000000A8   ........FFFF       DC32 `?<Constant L"\\x50\\x6f\\x72\\x74\\x75\\x67\\x75\\x65\\`, -1, 0H
   \              FFFF00000000
   \   000000B4   000000000000       DC32 0, 0H, 0
   \              000000000000
   \   000000C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for CurrentDictionary>`:
   \   000000C4   ........           DC32 EnglishDictionary
   \                     `?<Initializer for WordsInCurrentDictionary>`:
   \   000000C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LanguageSema>`:
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for UserManual>`:
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for NumberOfLanguages>`:
   \   00000000   07000000           DC32 7

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x45\\x6e\\x67\\x6c\\x69\\x73\\x68">`:
   \   00000000   45006E006700       DC8 45H, 0, 6EH, 0, 67H, 0, 6CH, 0
   \              6C00        
   \   00000008   690073006800       DC8 69H, 0, 73H, 0, 68H, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x46\\x72\\x65\\x6e\\x63\\x68">`:
   \   00000000   460072006500       DC8 46H, 0, 72H, 0, 65H, 0, 6EH, 0
   \              6E00        
   \   00000008   630068000000       DC8 63H, 0, 68H, 0, 0, 0
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x47\\x65\\x72\\x6d\\x61\\x6e">`:
   \   00000000   470065007200       DC8 47H, 0, 65H, 0, 72H, 0, 6DH, 0
   \              6D00        
   \   00000008   61006E000000       DC8 61H, 0, 6EH, 0, 0, 0
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x44\\x75\\x74\\x63\\x68">`:
   \   00000000   440075007400       DC8 44H, 0, 75H, 0, 74H, 0, 63H, 0
   \              6300        
   \   00000008   68000000           DC8 68H, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x4e\\x6f\\x72\\x77\\x65\\x67\\x69\\x61\\`:
   \   00000000   4E006F007200       DC8 4EH, 0, 6FH, 0, 72H, 0, 77H, 0
   \              7700        
   \   00000008   650067006900       DC8 65H, 0, 67H, 0, 69H, 0, 61H, 0
   \              6100        
   \   00000010   6E000000           DC8 6EH, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x53\\x70\\x61\\x6e\\x69\\x73\\x68\\x20"`:
   \   00000000   530070006100       DC8 53H, 0, 70H, 0, 61H, 0, 6EH, 0
   \              6E00        
   \   00000008   690073006800       DC8 69H, 0, 73H, 0, 68H, 0, 20H, 0
   \              2000        
   \   00000010   0000               DC8 0, 0
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x50\\x6f\\x72\\x74\\x75\\x67\\x75\\x65\\`:
   \   00000000   50006F007200       DC8 50H, 0, 6FH, 0, 72H, 0, 74H, 0
   \              7400        
   \   00000008   750067007500       DC8 75H, 0, 67H, 0, 75H, 0, 65H, 0
   \              6500        
   \   00000010   730065002000       DC8 73H, 0, 65H, 0, 20H, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000051   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000061   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000071   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000081   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000091   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000051   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000061   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000071   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000081   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000091   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000051   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000061   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000071   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000081   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000091   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""
    266          
    267          
    268          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::~AnsiString()          4
     CompareCountryKeyInTable(void const *, void const *)
                                        0
     ConvertUserManual(wchar_t *, int)
                                       72
     EnableLanguage(int)                4
     FindCountry(int)                  40
     FindDictionaryKey(AnsiString)    184
     FindDictionaryWord(int)          180
     FindDictionaryWordPtr(int)        24
     GetCurrentLanguage()               4
     GetLanguage(int)                  88
     GetNumberOfLanguages()             0
     NewCompareKeyInTable(void const *, void const *)
                                        0
     SetCurrentLanguage(int)            8
     SortDictionary()                   8
     SortDictionary(NewLanguageWord *, int)
                                        4
     __sti__routine()                  12
     operator==(string const &, char const *)
                                       16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator==(string const &, char const *)
                                      68
     AnsiString::~AnsiString()        24
     __sti__routine()                308
     Language                        248
     NumberOfLanguages                 4
     ConvertUserManual(wchar_t *, int)
                                     296
     NewCompareKeyInTable(void const *, void const *)
                                      12
     ?Subroutine16                     8
     SortDictionary(NewLanguageWord *, int)
                                      20
     ?Subroutine17                    12
     SortDictionary()                 64
     ?Subroutine15                    12
     FindDictionaryWordPtr(int)      108
     FindDictionaryWord(int)         156
     FindDictionaryKey(AnsiString)   256
     CompareCountryKeyInTable(void const *, void const *)
                                       8
     FindCountry(int)                 52
     SetCurrentLanguage(int)          92
     EnableLanguage(int)              24
     GetLanguage(int)                 84
     GetCurrentLanguage()             20
     GetNumberOfLanguages()           60
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ?<Initializer for Language>     248
     ?<Initializer for NumberOfLanguages>
                                       4
     ?<Constant L"\x45\x6e\x67\x6c\x69\x73\x68">
                                      16
     ?<Constant L"\x46\x72\x65\x6e\x63\x68">
                                      16
     ?<Constant L"\x47\x65\x72\x6d\x61\x6e">
                                      16
     ?<Constant L"\x44\x75\x74\x63\x68">
                                      12
     ?<Constant L"\x4e\x6f\x72\x77\x65\x67\x69\x61\
                                      20
     ?<Constant L"\x53\x70\x61\x6e\x69\x73\x68\x20"
                                      20
     ?<Constant L"\x50\x6f\x72\x74\x75\x67\x75\x65\
                                      24
     ?<Constant "">                  160
     ?<Constant "">_1                160
     ?<Constant "">_2                160
     ?<Constant "">_3                  1
      Others                         308

 
 1 976 bytes in segment CODE
   617 bytes in segment DATA_C
   252 bytes in segment DATA_I
   252 bytes in segment DATA_ID
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    24 bytes in segment INITTAB
 
 1 624 bytes of CODE  memory (+ 380 bytes shared)
   869 bytes of CONST memory
   256 bytes of DATA  memory

Errors: none
Warnings: none
