##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIDiffPressSensor_mA.cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AIDiffPressSensor_mA.cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIDiffPressSensor_mA.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIDiffPressSensor_mA.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIDiffPressSensor_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          #include "TSNAsyncsender.h"
      7          
      8          //---------------------------------------------------------------------------
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          AIDiffPressSensor_mA::AIDiffPressSensor_mA(int SnsType):AIPressSensor_mA(SnsType,true)
   \                     ??AIDiffPressSensor_mA:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     11          {
   \   0000000C   0120A0E3           MOV      R2,#+1
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??AIPressSensor_mA,??AIPressSensor_mA??rA
   \   0000001C   0C009FE5           LDR      R0,??AIDiffPressSensor_mA_1  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
     12          }
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??AIDiffPressSensor_mA_1:
   \   00000030   ........           DC32     ??__vtbl
     13          //---------------------------------------------------------------------------
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AIDiffPressSensor_mA::~AIDiffPressSensor_mA(void)
     16          {
   \                     `?~AIDiffPressSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AIDiffPressSensor_mA_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AIPressSensor_mA`,`?~AIPressSensor_mA??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AIDiffPressSensor_mA_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIDiffPressSensor_mA_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     18          //---------------------------------------------------------------------------
     19          
     20          ///////////////////////////////////////////////////////////////
     21          //
     22          // Routines for the librarian for input
     23          //
     24          ///////////////////////////////////////////////////////////////
     25          
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          int AIDiffPressSensor_mA::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     28          {
   \                     ??PutValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   5C80DDE5           LDRB     R8,[SP, #+92]
   \   0000001C   60909DE5           LDR      R9,[SP, #+96]
     29              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00A0B0E1           MOVS     R10,R0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
     30              switch ( ValueId ) {
   \   00000030   0500B0E1           MOVS     R0,R5
   \   00000034   B810A0E3           MOV      R1,#+184
   \   00000038   401E81E3           ORR      R1,R1,#0x400
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   1100001A           BNE      ??PutValue_2
     31              case SVT_AI_CALC_VAL:
     32                  Status = AIPressSensor::PutValue(SVT_AI_CALC_VAL, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   00000044   0710B0E1           MOVS     R1,R7
   \   00000048   20008DE2           ADD      R0,SP,#+32
   \   0000004C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000050   0D10B0E1           MOVS     R1,SP
   \   00000054   02002DE9           PUSH     {R1}
   \   00000058   0810B0E1           MOVS     R1,R8
   \   0000005C   02002DE9           PUSH     {R1}
   \   00000060   0030B0E1           MOVS     R3,R0
   \   00000064   0620B0E1           MOVS     R2,R6
   \   00000068   B810A0E3           MOV      R1,#+184
   \   0000006C   401E81E3           ORR      R1,R1,#0x400
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   00A0B0E1           MOVS     R10,R0
   \   00000080   20008DE2           ADD      R0,SP,#+32
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000088   0F0000EA           B        ??PutValue_4
     33                  break;
     34              default:
     35                  Status = AIPressSensor::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_2:
   \   0000008C   0710B0E1           MOVS     R1,R7
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000098   0030B0E1           MOVS     R3,R0
   \   0000009C   0D00B0E1           MOVS     R0,SP
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0800B0E1           MOVS     R0,R8
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   0620B0E1           MOVS     R2,R6
   \   000000B0   0510B0E1           MOVS     R1,R5
   \   000000B4   0400B0E1           MOVS     R0,R4
   \   000000B8   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   000000BC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000C0   00A0B0E1           MOVS     R10,R0
   \   000000C4   04008DE2           ADD      R0,SP,#+4
   \   000000C8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     36                  break;
     37              }
     38              if ( Status==E_NO_ERR ) {
   \                     ??PutValue_4:
   \   000000CC   00005AE3           CMP      R10,#+0
   \   000000D0   0500001A           BNE      ??PutValue_5
     39                  SetModifiedFlag();
   \   000000D4   A40094E5           LDR      R0,[R4, #+164]
   \   000000D8   541090E2           ADDS     R1,R0,#+84
   \   000000DC   0400B0E1           MOVS     R0,R4
   \   000000E0   001091E5           LDR      R1,[R1, #+0]
   \   000000E4   0FE0A0E1           MOV      LR,PC
   \   000000E8   11FF2FE1           BX       R1
     40              }
     41              if ( UnitId ) {
   \                     ??PutValue_5:
   \   000000EC   000059E3           CMP      R9,#+0
   \   000000F0   0100000A           BEQ      ??PutValue_6
     42                  *UnitId = ValUnitId;
   \   000000F4   00009DE5           LDR      R0,[SP, #+0]
   \   000000F8   000089E5           STR      R0,[R9, #+0]
     43              }
     44              return(Status);
   \                     ??PutValue_6:
   \   000000FC   0A00B0E1           MOVS     R0,R10
   \   00000100   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   00000104   F047BDE8           POP      {R4-R10,LR}
   \   00000108   1EFF2FE1           BX       LR               ;; return
     45          }
     46          
     47          
     48          //////////////////////////////////////////////////////////////////
     49          //
     50          // Sensor calculations
     51          //
     52          //////////////////////////////////////////////////////////////////
     53          
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void AIDiffPressSensor_mA::NewValue(float NewValue)
     56          {
     57              HWFailure     = false;
   \                     ??NewValue:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0C21C0E5           STRB     R2,[R0, #+268]
     58              FilteredValue = NewValue;
   \   00000008   441180E5           STR      R1,[R0, #+324]
     59          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     60          
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          float AIDiffPressSensor_mA::Calculate(void)
     63          {
   \                     ??Calculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     64              if ( CanCalculate() ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00000A           BEQ      ??Calculate_1
     65                  CalcValue = Gain*Get_Press(FilteredValue,15.0)-Offset;
   \   00000018   4024A0E3           MOV      R2,#+1073741824
   \   0000001C   5C2782E3           ORR      R2,R2,#0x1700000
   \   00000020   441194E5           LDR      R1,[R4, #+324]
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??Get_Press,??Get_Press??rA
   \   0000002C   3C1194E5           LDR      R1,[R4, #+316]
   \   00000030   ........           _BLF     __fMul,??__fMul??rA
   \   00000034   401194E5           LDR      R1,[R4, #+320]
   \   00000038   ........           _BLF     __fSub,??__fSub??rA
   \   0000003C   480184E5           STR      R0,[R4, #+328]
     66                  ResultOK  = true;
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   3601C4E5           STRB     R0,[R4, #+310]
     67                  /*
     68                  if ( CalcValue > MAX_ATM || CalcValue < MIN_ATM ) {
     69                      Failure = true;
     70                  }else{
     71                      Failure = false;
     72                  }
     73                  */
     74              }
     75              return(CalcValue);
   \                     ??Calculate_1:
   \   00000048   480194E5           LDR      R0,[R4, #+328]
   \   0000004C   1040BDE8           POP      {R4,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
     76          
     77          }
     78          
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          void AIDiffPressSensor_mA::AdjustOffset(float OffsetAdjust)
     81          {
     82          
     83          }
   \                     ??AdjustOffset:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIDiffPressSensor_mA &AIDiffPressSensor_mA::new AIDiffPressSensor_mA(int)
   \                     `??new AIDiffPressSensor_mA`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   820FA0E3           MOV      R0,#+520
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      `??new AIDiffPressSensor_mA_1`
   \   00000018   0410B0E1           MOVS     R1,R4
   \   0000001C   ........           BL       ??AIDiffPressSensor_mA
   \   00000020   000000EA           B        `??new AIDiffPressSensor_mA_2`
   \                     `??new AIDiffPressSensor_mA_1`:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     `??new AIDiffPressSensor_mA_2`:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIDiffPressSensor_mA::AIDiffPressSensor_mA(int)
                                       12
     AIDiffPressSensor_mA::AdjustOffset(float)
                                        0
     AIDiffPressSensor_mA::Calculate()
                                        8
     AIDiffPressSensor_mA::NewValue(float)
                                        0
     AIDiffPressSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                      100
     AIDiffPressSensor_mA::new AIDiffPressSensor_mA(int)
                                        8
     AIDiffPressSensor_mA::~AIDiffPressSensor_mA()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _String_val::_String_val(char_allocator)
                                       12
     __sti__routine()                   0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIDiffPressSensor_mA::AIDiffPressSensor_mA(int)
                                      52
     AIDiffPressSensor_mA::~AIDiffPressSensor_mA()
                                      56
     AIDiffPressSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                     268
     AIDiffPressSensor_mA::NewValue(float)
                                      16
     AIDiffPressSensor_mA::Calculate()
                                      84
     AIDiffPressSensor_mA::AdjustOffset(float)
                                       4
     AIDiffPressSensor_mA::new AIDiffPressSensor_mA(int)
                                      48
     __sti__routine()                208
      Others                         408

 
 1 168 bytes in segment CODE
   156 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 740 bytes of CODE  memory (+ 444 bytes shared)
 156 bytes of CONST memory
 216 bytes of DATA  memory

Errors: none
Warnings: none
