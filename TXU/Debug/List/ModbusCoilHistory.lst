##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusCoilHistory.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusCoilHistory.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusCoilHistory.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusCoilHistory.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusCoilHistory.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_6
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_7:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_8
   \                     ??_Insert_6:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_9
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_8
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_8
   \                     ??_Insert_9:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_8
   \   00000060   F0FFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_8:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_11
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_12
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_10
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_13
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_13:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_8
   \                     ??_Insert_12:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_10
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_14
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_14:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_4
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_5
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_6
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_9
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_18
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_19
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_20
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_23
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_3
   \                     ??_Erase_4:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_3:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_4
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_5
   \                     ??_Erase_6:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_5:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_6
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_7
   \                     ??_Erase_8:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_7:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_8
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_17
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_17:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_18:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_18
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_5
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_4  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_4:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          

   \                                 In segment DATA_Z, align 4, align-sorted
      7          set<PRogramObjectBase *>ModbusCoilHistory::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          ModbusCoilHistory::ModbusCoilHistory(bool pIsCreatedFromMultiple) {
   \                     ??ModbusCoilHistory:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusCoil,??ModbusCoil??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   636F84E2           ADD      R6,R4,#+396
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   1400C6E5           STRB     R0,[R6, #+20]
   \   0000003C   696F84E2           ADD      R6,R4,#+420
   \   00000040   01008DE2           ADD      R0,SP,#+1
   \   00000044   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000050   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000054   1400C6E5           STRB     R0,[R6, #+20]
     10              ModbusSet.insert(this);
   \   00000058   ........           LDR      R6,??DataTable2  ;; ??ModbusSet
   \   0000005C   700F84E2           ADD      R0,R4,#+448
   \   00000060   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000064   730F84E2           ADD      R0,R4,#+460
   \   00000068   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000006C   0420A0E1           MOV      R2,R4
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     ??insert_1,??insert??rA
     11              IDNumber = (C_PRO_MODBUS_COIL_HIST << 16) + ModbusSet.size();
   \   0000007C   100096E5           LDR      R0,[R6, #+16]
   \   00000080   A016A0E3           MOV      R1,#+167772160
   \   00000084   F91881E3           ORR      R1,R1,#0xF90000
   \   00000088   000081E0           ADD      R0,R1,R0
   \   0000008C   9C0084E5           STR      R0,[R4, #+156]
     12              Type = C_PRO_MODBUS_COIL_HIST;
   \   00000090   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000094   A00084E5           STR      R0,[R4, #+160]
     13              LogTime = clock();
   \   00000098   ........           _BLF     clock,??clock??rA
   \   0000009C   D80184E5           STR      R0,[R4, #+472]
     14              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   000000A0   7851C4E5           STRB     R5,[R4, #+376]
     15          }
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   7E40BDE8           POP      {R1-R6,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          ModbusCoilHistory::~ModbusCoilHistory() {
   \                     `?~ModbusCoilHistory`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1A00000A           BEQ      `?~ModbusCoilHistory_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     18          }
   \   00000018   736F84E2           ADD      R6,R4,#+460
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000030   706F84E2           ADD      R6,R4,#+448
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000044   696F84E2           ADD      R6,R4,#+420
   \   00000048   041096E5           LDR      R1,[R6, #+4]
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA_2
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000005C   630F84E2           ADD      R0,R4,#+396
   \   00000060   ........           _BLF     ??clear,??clear??rA
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     `?~ModbusCoil`,`?~ModbusCoil??rA`
   \   00000070   010015E3           TST      R5,#0x1
   \   00000074   0100000A           BEQ      `?~ModbusCoilHistory_1`
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusCoilHistory_1`:
   \   00000080   7040BDE8           POP      {R4-R6,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
     19          
     20          
     21          ///////////////////////////////////////////////////////////////
     22          //
     23          // Routines for the Configuration
     24          //
     25          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     26          AnsiString ModbusCoilHistory::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     27              AnsiString LocalString = ModbusObject::MakeConfigString();
     28          
     29              LocalString += TabStr1 + KeyWord(C_OBJECT_ID_LIST);
   \   00000004   00649FE5           LDR      R6,??MakeConfigString_2  ;; TabStr1
   \   00000008   85DF4DE2           SUB      SP,SP,#+532
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000001C   D210A0E3           MOV      R1,#+210
   \   00000020   70008DE2           ADD      R0,SP,#+112
   \   00000024   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000028   70208DE2           ADD      R2,SP,#+112
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   54008DE2           ADD      R0,SP,#+84
   \   00000034   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000038   D0039FE5           LDR      R0,??MakeConfigString_2+0x4  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   007090E5           LDR      R7,[R0, #+0]
   \   00000044   54108DE2           ADD      R1,SP,#+84
   \   00000048   0730A0E1           MOV      R3,R7
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   54008DE2           ADD      R0,SP,#+84
   \   00000060   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   70008DE2           ADD      R0,SP,#+112
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
     30              set<PRogramObject *>::iterator pBIt;
     31              for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000074   638FA0E3           MOV      R8,#+396
   \   00000078   049098E7           LDR      R9,[R8, +R4]
   \   0000007C   180000EA           B        ??MakeConfigString_3
     32                  PRogramObject *Element = (PRogramObject *)*pBIt;
     33                  int PROIDNumber = Element->IDNumber;
   \                     ??MakeConfigString_4:
   \   00000080   100099E5           LDR      R0,[R9, #+16]
   \   00000084   9CA090E5           LDR      R10,[R0, #+156]
     34                  AnsiString IdNumStr;
   \   00000088   1C008DE2           ADD      R0,SP,#+28
   \   0000008C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     35                  IdNumStr.cat_sprintf("0x%0X\t", PROIDNumber);
   \   00000090   7C239FE5           LDR      R2,??MakeConfigString_2+0x8  ;; `?<Constant "0x%0X     ">`
   \   00000094   0A30A0E1           MOV      R3,R10
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   1C008DE2           ADD      R0,SP,#+28
   \   000000A0   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     36                  LocalString += IdNumStr;
   \   000000B4   0730A0E1           MOV      R3,R7
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   1C108DE2           ADD      R1,SP,#+28
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??append,??append??rA
     37              }
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   1C008DE2           ADD      R0,SP,#+28
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0900A0E1           MOV      R0,R9
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0090A0E1           MOV      R9,R0
   \                     ??MakeConfigString_3:
   \   000000E4   040088E0           ADD      R0,R8,R4
   \   000000E8   000059E1           CMP      R9,R0
   \   000000EC   E3FFFF1A           BNE      ??MakeConfigString_4
     38              LocalString += TabStr1 + KeyWord(C_PROLIST_END);
   \   000000F0   4910A0E3           MOV      R1,#+73
   \   000000F4   501E81E3           ORR      R1,R1,#0x500
   \   000000F8   A8008DE2           ADD      R0,SP,#+168
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   A8208DE2           ADD      R2,SP,#+168
   \   00000104   0610A0E1           MOV      R1,R6
   \   00000108   8C008DE2           ADD      R0,SP,#+140
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   8C108DE2           ADD      R1,SP,#+140
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   8C008DE2           ADD      R0,SP,#+140
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   A8008DE2           ADD      R0,SP,#+168
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     39          
     40              LocalString += TabStr1 + KeyWord(NormalState);
   \   00000144   841194E5           LDR      R1,[R4, #+388]
   \   00000148   E0008DE2           ADD      R0,SP,#+224
   \   0000014C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000150   E0208DE2           ADD      R2,SP,#+224
   \   00000154   0610A0E1           MOV      R1,R6
   \   00000158   C4008DE2           ADD      R0,SP,#+196
   \   0000015C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000160   0730A0E1           MOV      R3,R7
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   C4108DE2           ADD      R1,SP,#+196
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   ........           _BLF     ??append,??append??rA
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   C4008DE2           ADD      R0,SP,#+196
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0110A0E3           MOV      R1,#+1
   \   0000018C   E0008DE2           ADD      R0,SP,#+224
   \   00000190   ........           _BLF     ??_Tidy,??_Tidy??rA
     41              LocalString += TabStr1 + KeyWord(C_CTRL_DEACTIVATE) + KeyWord(DeactivateBy);
   \   00000194   881194E5           LDR      R1,[R4, #+392]
   \   00000198   540F8DE2           ADD      R0,SP,#+336
   \   0000019C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001A0   B210A0E3           MOV      R1,#+178
   \   000001A4   701E81E3           ORR      R1,R1,#0x700
   \   000001A8   4D0F8DE2           ADD      R0,SP,#+308
   \   000001AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001B0   4D2F8DE2           ADD      R2,SP,#+308
   \   000001B4   0610A0E1           MOV      R1,R6
   \   000001B8   460F8DE2           ADD      R0,SP,#+280
   \   000001BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C0   542F8DE2           ADD      R2,SP,#+336
   \   000001C4   461F8DE2           ADD      R1,SP,#+280
   \   000001C8   FC008DE2           ADD      R0,SP,#+252
   \   000001CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001D0   0730A0E1           MOV      R3,R7
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   FC108DE2           ADD      R1,SP,#+252
   \   000001DC   0500A0E1           MOV      R0,R5
   \   000001E0   ........           _BLF     ??append,??append??rA
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   FC008DE2           ADD      R0,SP,#+252
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   540F8DE2           ADD      R0,SP,#+336
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   460F8DE2           ADD      R0,SP,#+280
   \   00000210   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000220   ........           _BLF     ??_Tidy,??_Tidy??rA
     42              LocalString += TabStr1 + KeyWord(AlarmAlternative);
   \   00000224   BC1194E5           LDR      R1,[R4, #+444]
   \   00000228   620F8DE2           ADD      R0,SP,#+392
   \   0000022C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000230   622F8DE2           ADD      R2,SP,#+392
   \   00000234   0610A0E1           MOV      R1,R6
   \   00000238   5B0F8DE2           ADD      R0,SP,#+364
   \   0000023C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000240   0730A0E1           MOV      R3,R7
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   5B1F8DE2           ADD      R1,SP,#+364
   \   0000024C   0500A0E1           MOV      R0,R5
   \   00000250   ........           _BLF     ??append,??append??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   620F8DE2           ADD      R0,SP,#+392
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
     43          
     44              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
   \   00000274   0090A0E3           MOV      R9,#+0
   \   00000278   708FA0E3           MOV      R8,#+448
   \   0000027C   150000EA           B        ??MakeConfigString_5
     45                  LocalString += TabStr1 + KeyWord(AlarmTypeList[j]);
   \                     ??MakeConfigString_6:
   \   00000280   040098E7           LDR      R0,[R8, +R4]
   \   00000284   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000288   0D00A0E1           MOV      R0,SP
   \   0000028C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000290   0D20A0E1           MOV      R2,SP
   \   00000294   0610A0E1           MOV      R1,R6
   \   00000298   1C008DE2           ADD      R0,SP,#+28
   \   0000029C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A0   0730A0E1           MOV      R3,R7
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   1C108DE2           ADD      R1,SP,#+28
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   ........           _BLF     ??append,??append??rA
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   1C008DE2           ADD      R0,SP,#+28
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   0020A0E3           MOV      R2,#+0
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   0D00A0E1           MOV      R0,SP
   \   000002D0   ........           _BLF     ??_Tidy,??_Tidy??rA
     46              }
   \   000002D4   019089E2           ADD      R9,R9,#+1
   \                     ??MakeConfigString_5:
   \   000002D8   040088E0           ADD      R0,R8,R4
   \   000002DC   041090E5           LDR      R1,[R0, #+4]
   \   000002E0   000090E5           LDR      R0,[R0, #+0]
   \   000002E4   000041E0           SUB      R0,R1,R0
   \   000002E8   200159E1           CMP      R9,R0, LSR #+2
   \   000002EC   E3FFFF3A           BCC      ??MakeConfigString_6
   \   000002F0   7C1194E5           LDR      R1,[R4, #+380]
   \   000002F4   000051E3           CMP      R1,#+0
   \   000002F8   2300000A           BEQ      ??MakeConfigString_7
     47              if (AlarmDelay) {
     48                  LocalString += TabStr1 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay;
   \   000002FC   7E0F8DE2           ADD      R0,SP,#+504
   \   00000300   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000304   0040A0E1           MOV      R4,R0
   \   00000308   A810A0E3           MOV      R1,#+168
   \   0000030C   701E81E3           ORR      R1,R1,#0x700
   \   00000310   38008DE2           ADD      R0,SP,#+56
   \   00000314   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000318   38208DE2           ADD      R2,SP,#+56
   \   0000031C   0610A0E1           MOV      R1,R6
   \   00000320   1C008DE2           ADD      R0,SP,#+28
   \   00000324   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000328   0420A0E1           MOV      R2,R4
   \   0000032C   1C108DE2           ADD      R1,SP,#+28
   \   00000330   0D00A0E1           MOV      R0,SP
   \   00000334   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000338   0730A0E1           MOV      R3,R7
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0D10A0E1           MOV      R1,SP
   \   00000344   0500A0E1           MOV      R0,R5
   \   00000348   ........           _BLF     ??append,??append??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   0D00A0E1           MOV      R0,SP
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   7E0F8DE2           ADD      R0,SP,#+504
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000036C   0020A0E3           MOV      R2,#+0
   \   00000370   0110A0E3           MOV      R1,#+1
   \   00000374   1C008DE2           ADD      R0,SP,#+28
   \   00000378   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000037C   0020A0E3           MOV      R2,#+0
   \   00000380   0110A0E3           MOV      R1,#+1
   \   00000384   38008DE2           ADD      R0,SP,#+56
   \   00000388   ........           _BLF     ??_Tidy,??_Tidy??rA
     49              }
     50              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \                     ??MakeConfigString_7:
   \   0000038C   6110A0E3           MOV      R1,#+97
   \   00000390   901E81E3           ORR      R1,R1,#0x900
   \   00000394   770F8DE2           ADD      R0,SP,#+476
   \   00000398   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000039C   772F8DE2           ADD      R2,SP,#+476
   \   000003A0   0610A0E1           MOV      R1,R6
   \   000003A4   700F8DE2           ADD      R0,SP,#+448
   \   000003A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003AC   64209FE5           LDR      R2,??MakeConfigString_2+0xC  ;; CrLfStr
   \   000003B0   701F8DE2           ADD      R1,SP,#+448
   \   000003B4   690F8DE2           ADD      R0,SP,#+420
   \   000003B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003BC   0730A0E1           MOV      R3,R7
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   691F8DE2           ADD      R1,SP,#+420
   \   000003C8   0500A0E1           MOV      R0,R5
   \   000003CC   ........           _BLF     ??append,??append??rA
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0110A0E3           MOV      R1,#+1
   \   000003D8   690F8DE2           ADD      R0,SP,#+420
   \   000003DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0110A0E3           MOV      R1,#+1
   \   000003E8   700F8DE2           ADD      R0,SP,#+448
   \   000003EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F0   0020A0E3           MOV      R2,#+0
   \   000003F4   0110A0E3           MOV      R1,#+1
   \   000003F8   770F8DE2           ADD      R0,SP,#+476
   \   000003FC   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              return (LocalString);
   \   00000400   85DF8DE2           ADD      SP,SP,#+532
   \   00000404   F047BDE8           POP      {R4-R10,LR}
   \   00000408   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   0000040C   ........           DC32     TabStr1
   \   00000410   ........           DC32     ??npos
   \   00000414   ........           DC32     `?<Constant "0x%0X     ">`
   \   00000418   ........           DC32     CrLfStr
     52          }
     53          //---------------------------------------------------------------------------
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          bool ModbusCoilHistory::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   ACD04DE2           SUB      SP,SP,#+172
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     56              int ErrorLine = 0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
     57              bool NoError = true;
   \   00000018   0190A0E3           MOV      R9,#+1
     58              if (ModbusObject::LoadConfigString(ConfigString)) {
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   967E89E3           ORR      R7,R9,#0x960
   \   0000002C   0080A0E3           MOV      R8,#+0
   \   00000030   0301000A           BEQ      ??LoadConfigString_3
     59                  int Key;
     60                  do {
     61                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   20108DE2           ADD      R1,SP,#+32
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??NextWord,??NextWord??rA
     62                      Key = FindConfigKey(InputKeyWord);
   \   00000048   20108DE2           ADD      R1,SP,#+32
   \   0000004C   58008DE2           ADD      R0,SP,#+88
   \   00000050   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000054   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   0820A0E1           MOV      R2,R8
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   58008DE2           ADD      R0,SP,#+88
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
     63                      switch (Key) {
   \   0000006C   D10056E3           CMP      R6,#+209
   \   00000070   D2005613           CMPNE    R6,#+210
   \   00000074   8600000A           BEQ      ??LoadConfigString_5
   \   00000078   FA0F56E3           CMP      R6,#+1000
   \   0000007C   EA10A013           MOVNE    R1,#+234
   \   00000080   C01F8113           ORRNE    R1,R1,#0x300
   \   00000084   01005611           CMPNE    R6,R1
   \   00000088   6C10A013           MOVNE    R1,#+108
   \   0000008C   701E8113           ORRNE    R1,R1,#0x700
   \   00000090   01005611           CMPNE    R6,R1
   \   00000094   02108113           ORRNE    R1,R1,#0x2
   \   00000098   01005611           CMPNE    R6,R1
   \   0000009C   C800000A           BEQ      ??LoadConfigString_6
   \   000000A0   091081E2           ADD      R1,R1,#+9
   \   000000A4   010056E1           CMP      R6,R1
   \   000000A8   01108112           ADDNE    R1,R1,#+1
   \   000000AC   01005611           CMPNE    R6,R1
   \   000000B0   01108113           ORRNE    R1,R1,#0x1
   \   000000B4   01005611           CMPNE    R6,R1
   \   000000B8   01108112           ADDNE    R1,R1,#+1
   \   000000BC   01005611           CMPNE    R6,R1
   \   000000C0   B900000A           BEQ      ??LoadConfigString_7
   \   000000C4   251081E2           ADD      R1,R1,#+37
   \   000000C8   010056E1           CMP      R6,R1
   \   000000CC   02108112           ADDNE    R1,R1,#+2
   \   000000D0   01005611           CMPNE    R6,R1
   \   000000D4   B200000A           BEQ      ??LoadConfigString_8
   \   000000D8   071081E2           ADD      R1,R1,#+7
   \   000000DC   010056E1           CMP      R6,R1
   \   000000E0   7F00000A           BEQ      ??LoadConfigString_9
   \   000000E4   0A1081E2           ADD      R1,R1,#+10
   \   000000E8   010056E1           CMP      R6,R1
   \   000000EC   8500000A           BEQ      ??LoadConfigString_10
   \   000000F0   070056E1           CMP      R6,R7
   \   000000F4   B300000A           BEQ      ??LoadConfigString_11
   \   000000F8   C210A0E3           MOV      R1,#+194
   \   000000FC   B01E81E3           ORR      R1,R1,#0xB00
   \   00000100   010056E1           CMP      R6,R1
   \   00000104   01108113           ORRNE    R1,R1,#0x1
   \   00000108   01005611           CMPNE    R6,R1
   \   0000010C   01108112           ADDNE    R1,R1,#+1
   \   00000110   01005611           CMPNE    R6,R1
   \   00000114   01108113           ORRNE    R1,R1,#0x1
   \   00000118   01005611           CMPNE    R6,R1
   \   0000011C   01108112           ADDNE    R1,R1,#+1
   \   00000120   01005611           CMPNE    R6,R1
   \   00000124   01108113           ORRNE    R1,R1,#0x1
   \   00000128   01005611           CMPNE    R6,R1
   \   0000012C   01108112           ADDNE    R1,R1,#+1
   \   00000130   01005611           CMPNE    R6,R1
   \   00000134   01108113           ORRNE    R1,R1,#0x1
   \   00000138   01005611           CMPNE    R6,R1
   \   0000013C   04108113           ORRNE    R1,R1,#0x4
   \   00000140   01005611           CMPNE    R6,R1
   \   00000144   01108112           ADDNE    R1,R1,#+1
   \   00000148   01005611           CMPNE    R6,R1
   \   0000014C   01108113           ORRNE    R1,R1,#0x1
   \   00000150   01005611           CMPNE    R6,R1
   \   00000154   BD0E5613           CMPNE    R6,#+3024
   \   00000158   02108112           ADDNE    R1,R1,#+2
   \   0000015C   01005611           CMPNE    R6,R1
   \   00000160   01108112           ADDNE    R1,R1,#+1
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   01108113           ORRNE    R1,R1,#0x1
   \   0000016C   01005611           CMPNE    R6,R1
   \   00000170   01108112           ADDNE    R1,R1,#+1
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   01108113           ORRNE    R1,R1,#0x1
   \   0000017C   01005611           CMPNE    R6,R1
   \   00000180   01108112           ADDNE    R1,R1,#+1
   \   00000184   01005611           CMPNE    R6,R1
   \   00000188   01108113           ORRNE    R1,R1,#0x1
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   01108112           ADDNE    R1,R1,#+1
   \   00000194   01005611           CMPNE    R6,R1
   \   00000198   01108113           ORRNE    R1,R1,#0x1
   \   0000019C   01005611           CMPNE    R6,R1
   \   000001A0   01108112           ADDNE    R1,R1,#+1
   \   000001A4   01005611           CMPNE    R6,R1
   \   000001A8   01108113           ORRNE    R1,R1,#0x1
   \   000001AC   01005611           CMPNE    R6,R1
   \   000001B0   01108112           ADDNE    R1,R1,#+1
   \   000001B4   01005611           CMPNE    R6,R1
   \   000001B8   01108113           ORRNE    R1,R1,#0x1
   \   000001BC   01005611           CMPNE    R6,R1
   \   000001C0   01108112           ADDNE    R1,R1,#+1
   \   000001C4   01005611           CMPNE    R6,R1
   \   000001C8   01108113           ORRNE    R1,R1,#0x1
   \   000001CC   01005611           CMPNE    R6,R1
   \   000001D0   BE0E5613           CMPNE    R6,#+3040
   \   000001D4   02108112           ADDNE    R1,R1,#+2
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   01108112           ADDNE    R1,R1,#+1
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108113           ORRNE    R1,R1,#0x1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   02108112           ADDNE    R1,R1,#+2
   \   000001F0   01005611           CMPNE    R6,R1
   \   000001F4   01108112           ADDNE    R1,R1,#+1
   \   000001F8   01005611           CMPNE    R6,R1
   \   000001FC   01108113           ORRNE    R1,R1,#0x1
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   01108112           ADDNE    R1,R1,#+1
   \   00000208   01005611           CMPNE    R6,R1
   \   0000020C   01108113           ORRNE    R1,R1,#0x1
   \   00000210   01005611           CMPNE    R6,R1
   \   00000214   A1108112           ADDNE    R1,R1,#+161
   \   00000218   01005611           CMPNE    R6,R1
   \   0000021C   01108113           ORRNE    R1,R1,#0x1
   \   00000220   01005611           CMPNE    R6,R1
   \   00000224   02108112           ADDNE    R1,R1,#+2
   \   00000228   01005611           CMPNE    R6,R1
   \   0000022C   01108112           ADDNE    R1,R1,#+1
   \   00000230   01005611           CMPNE    R6,R1
   \   00000234   01108113           ORRNE    R1,R1,#0x1
   \   00000238   01005611           CMPNE    R6,R1
   \   0000023C   C90E5613           CMPNE    R6,#+3216
   \   00000240   02108112           ADDNE    R1,R1,#+2
   \   00000244   01005611           CMPNE    R6,R1
   \   00000248   01108112           ADDNE    R1,R1,#+1
   \   0000024C   01005611           CMPNE    R6,R1
   \   00000250   01108113           ORRNE    R1,R1,#0x1
   \   00000254   01005611           CMPNE    R6,R1
   \   00000258   0C108113           ORRNE    R1,R1,#0xC
   \   0000025C   01005611           CMPNE    R6,R1
   \   00000260   CA0E5613           CMPNE    R6,#+3232
   \   00000264   02108112           ADDNE    R1,R1,#+2
   \   00000268   01005611           CMPNE    R6,R1
   \   0000026C   01108112           ADDNE    R1,R1,#+1
   \   00000270   01005611           CMPNE    R6,R1
   \   00000274   03108112           ADDNE    R1,R1,#+3
   \   00000278   01005611           CMPNE    R6,R1
   \   0000027C   01108112           ADDNE    R1,R1,#+1
   \   00000280   01005611           CMPNE    R6,R1
   \   00000284   01108113           ORRNE    R1,R1,#0x1
   \   00000288   01005611           CMPNE    R6,R1
   \   0000028C   4800000A           BEQ      ??LoadConfigString_12
   \   00000290   4E0000EA           B        ??LoadConfigString_13
     64                      case C_OBJECT_ID_LIST:
     65                      case C_OBJECT_ID :
     66                          do {
     67                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_5:
   \   00000294   4920A0E3           MOV      R2,#+73
   \   00000298   502E82E3           ORR      R2,R2,#0x500
   \   0000029C   0D10A0E1           MOV      R1,SP
   \   000002A0   0500A0E1           MOV      R0,R5
   \   000002A4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
     68                              if (!ErrorLine) {
   \   000002A8   00109DE5           LDR      R1,[SP, #+0]
   \   000002AC   000051E3           CMP      R1,#+0
   \   000002B0   0200001A           BNE      ??LoadConfigString_14
     69                                  IdNumbers.push_back(tmpIDNumber);
   \   000002B4   0010A0E1           MOV      R1,R0
   \   000002B8   730F84E2           ADD      R0,R4,#+460
   \   000002BC   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     70                              }
     71                          }while (!ErrorLine);
   \                     ??LoadConfigString_14:
   \   000002C0   00009DE5           LDR      R0,[SP, #+0]
   \   000002C4   000050E3           CMP      R0,#+0
   \   000002C8   F1FFFF0A           BEQ      ??LoadConfigString_5
     72                          if (ErrorLine == END_FOUND) {
   \   000002CC   020070E3           CMN      R0,#+2
   \   000002D0   5000001A           BNE      ??LoadConfigString_15
     73                              ErrorLine = 0;
   \   000002D4   0010A0E3           MOV      R1,#+0
   \   000002D8   00108DE5           STR      R1,[SP, #+0]
   \                     ??LoadConfigString_16:
   \   000002DC   0190A0E3           MOV      R9,#+1
   \   000002E0   4D0000EA           B        ??LoadConfigString_17
     74                          }
     75                          NoError = !ErrorLine;
     76                          break;
     77                      case C_CTRL_AL_DELAY:
     78                          AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_9:
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0D10A0E1           MOV      R1,SP
   \   000002EC   0500A0E1           MOV      R0,R5
   \   000002F0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002F4   7C0184E5           STR      R0,[R4, #+380]
     79                          NoError = !ErrorLine;
   \   000002F8   00009DE5           LDR      R0,[SP, #+0]
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   4400001A           BNE      ??LoadConfigString_15
   \   00000304   F4FFFFEA           B        ??LoadConfigString_16
     80                          break;
     81                      case C_CTRL_DEACTIVATE :
     82                          {
     83                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_10:
   \   00000308   0030A0E3           MOV      R3,#+0
   \   0000030C   0D20A0E1           MOV      R2,SP
   \   00000310   04108DE2           ADD      R1,SP,#+4
   \   00000314   0500A0E1           MOV      R0,R5
   \   00000318   ........           _BLF     ??NextWord,??NextWord??rA
     84                              if (!ErrorLine) {
   \   0000031C   00009DE5           LDR      R0,[SP, #+0]
   \   00000320   000050E3           CMP      R0,#+0
   \   00000324   1500001A           BNE      ??LoadConfigString_18
     85                                  int tmpKey = FindConfigKey(TempStr);
   \   00000328   04108DE2           ADD      R1,SP,#+4
   \   0000032C   3C008DE2           ADD      R0,SP,#+60
   \   00000330   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000334   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000338   0090A0E1           MOV      R9,R0
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   3C008DE2           ADD      R0,SP,#+60
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
     86                                  switch (tmpKey) {
   \   0000034C   B30049E2           SUB      R0,R9,#+179
   \   00000350   700E40E2           SUB      R0,R0,#+1792
   \   00000354   040050E3           CMP      R0,#+4
   \   00000358   0600008A           BHI      ??LoadConfigString_19
   \   0000035C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000360   0010D1E7           LDRB     R1,[R1, R0]
   \   00000364   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000368   01010101           DC8      +1,+1,+1,+1
   \   0000036C   01000000           DC8      +1,+0,+0,+0
     87                                  case C_CTRL_DE_ACKNOW :
     88                                  case C_CTRL_DE_IDLE :
     89                                  case C_CTRL_DE_VALUE :
     90                                  case C_CTRL_DE_SILENCE :
     91                                  case C_CTRL_DE_VAL_ENABLED:
     92                                      DeactivateBy = tmpKey;
   \                     ??LoadConfigString_20:
   \   00000370   889184E5           STR      R9,[R4, #+392]
   \   00000374   010000EA           B        ??LoadConfigString_18
     93                                      break;
     94                                  default:
     95                                      ErrorLine = ConfigString.LineCount;
   \                     ??LoadConfigString_19:
   \   00000378   1C1095E5           LDR      R1,[R5, #+28]
   \   0000037C   00108DE5           STR      R1,[SP, #+0]
     96                                      break;
     97                                  }
     98                              }
     99                              NoError = !ErrorLine;
   \                     ??LoadConfigString_18:
   \   00000380   00009DE5           LDR      R0,[SP, #+0]
    100                          }
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   000050E3           CMP      R0,#+0
   \   0000038C   0190A003           MOVEQ    R9,#+1
   \   00000390   0090A013           MOVNE    R9,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   04008DE2           ADD      R0,SP,#+4
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   1D0000EA           B        ??LoadConfigString_17
    101                          break;
    102                      case C_CTRL_NS_POWERED :
    103                      case C_CTRL_NS_UNPOWERED :
    104                          NormalState = Key;
   \                     ??LoadConfigString_8:
   \   000003A4   846184E5           STR      R6,[R4, #+388]
   \   000003A8   1B0000EA           B        ??LoadConfigString_17
    105                          break;
    106                      case C_CTRL_ALT_ALL :
    107                      case C_CTRL_ALT_AL_TYPES :
    108          			case C_CTRL_ALT_PRO_LIST :
    109          			case C_CTRL_ALT_TYPE_PRO :
    110          				AlarmAlternative = Key;
   \                     ??LoadConfigString_7:
   \   000003AC   BC6184E5           STR      R6,[R4, #+444]
   \   000003B0   190000EA           B        ??LoadConfigString_17
    111          				break;
    112          			case ID_AL_OVERFILL                 :
    113          			case ID_AL_HIGH_LEVEL               :
    114          			case ID_AL_LOWLOW_LEVEL             :
    115          			case ID_AL_LOW_LEVEL                :
    116          			case ID_AL_HIGH_TEMP                :
    117          			case ID_AL_LOW_TEMP                 :
    118          			case ID_AL_LOW_BOT_TEMP             :
    119          			case ID_AL_HIGH_BOT_TEMP            :
    120          			case ID_AL_MAIN_WATERINGR           :
    121          			case ID_AL_PRE_WATERINGR            :
    122          			case ID_AL_LOW_T_PRESS              :
    123          			case ID_AL_HIGH_T_PRESS             :
    124          			case ID_AL_LOW_INERT_GAS_PRESS      :
    125          			case ID_AL_HIGH_INERT_GAS_PRESS     :
    126          			case ID_AL_LOW_PRESS_VAC            :
    127          			case ID_AL_HIGH_PRESS_VAC           :
    128          			case ID_AL_LOW_VAPOUR_RETURN        :
    129          			case ID_AL_HIGH_VAPOUR_RETURN       :
    130          			case ID_AL_LOW_LOADRATE             :
    131          			case ID_AL_HIGH_LOADRATE            :
    132          			case ID_AL_LEVEL_CHANGE             :
    133          			case ID_AL_DENS_DIFF                :
    134          			case ID_AL_LOW_LINE_PRESS           :
    135          			case ID_AL_HIGH_LINE_PRESS          :
    136          			case ID_AL_HIGHHIGH_LINE_PRESS          :
    137          			case ID_AL_SNS_OPEN_LOOP            :
    138          			case ID_AL_LEVEL_SWITCH             :
    139          			case ID_AL_LSWITCH_TEST             :
    140          			case ID_AL_LSWITCH_FAILURE          :
    141          			case ID_AL_SNS_SHORT_CIRCUIT        :
    142          			case ID_AL_SNS_HART_OPEN_LOOP       :
    143          			case ID_AL_SNS_HART_SHORT_CIRCUIT   :
    144          			case ID_AL_SNS_HART_COM_ERROR       :
    145          			case ID_AL_SNS_AIR_PURGE_FAILURE    :
    146          			case ID_AL_X_LOW_T_PRESS1           :
    147                      case ID_AL_X_HIGH_T_PRESS1          :
    148                      case ID_AL_X_LOW_T_PRESS2           :
    149                      case ID_AL_X_HIGH_T_PRESS2          :
    150                      case ID_AL_SNS_ERROR                :
    151                      case ID_AL_SNS_CONCAL_ERROR         :
    152                      case ID_AL_SNS_CONV_ERROR           :
    153                      case ID_AL_IO_COM_ERROR             :
    154                      case ID_AL_SC_COM_ERROR             :
    155                      case ID_AL_MODBUS_COM_ERROR         :
    156                      case ID_AL_MODBUS_INPUT_STATUS      :
    157                      case ID_AL_WATER_DETECT             :
    158                      case ID_AL_FUSE                     :
    159                      case ID_AL_AC_VOLTAGE               :
    160                      case ID_AL_LOW_VOLTAGE              :
    161                      case ID_AL_HI_VOLTAGE               :
    162                      case ID_AL_TWM_ELAPSED_TIME      :
    163                      case ID_AL_TWM_LOW_SPEED      :
    164                          AlarmTypeList.push_back(Key);
   \                     ??LoadConfigString_12:
   \   000003B4   0610A0E1           MOV      R1,R6
   \   000003B8   700F84E2           ADD      R0,R4,#+448
   \   000003BC   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
   \   000003C0   150000EA           B        ??LoadConfigString_17
    165                          break;
    166                      case C_PRO_END_COMMON :
    167                      case C_PRO_END :
    168                      case C_CTRL_END_COMMON :
    169                      case C_CTRL_END :
    170                          NoError = false;
   \                     ??LoadConfigString_6:
   \   000003C4   0090A0E3           MOV      R9,#+0
    171                      case C_MODBUS_END :
    172                          Key = C_MODBUS_END;
   \                     ??LoadConfigString_11:
   \   000003C8   0760A0E1           MOV      R6,R7
   \   000003CC   120000EA           B        ??LoadConfigString_17
    173                          break;
    174                      default:
    175                          GiveConfigWarning("ModbusCoilHistory", InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_13:
   \   000003D0   20108DE2           ADD      R1,SP,#+32
   \   000003D4   90008DE2           ADD      R0,SP,#+144
   \   000003D8   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000003DC   B4109FE5           LDR      R1,??LoadConfigString_21  ;; `?<Constant "ModbusCoilHistory">`
   \   000003E0   0090A0E1           MOV      R9,R0
   \   000003E4   74008DE2           ADD      R0,SP,#+116
   \   000003E8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000003EC   1C2095E5           LDR      R2,[R5, #+28]
   \   000003F0   0910A0E1           MOV      R1,R9
   \   000003F4   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   90008DE2           ADD      R0,SP,#+144
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   0820A0E1           MOV      R2,R8
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   74008DE2           ADD      R0,SP,#+116
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
    176                          NoError = false;
   \                     ??LoadConfigString_15:
   \   00000418   0090A0E3           MOV      R9,#+0
    177                          break;
    178          
    179                      }
    180                  }while (NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END));
   \                     ??LoadConfigString_17:
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0110A0E3           MOV      R1,#+1
   \   00000424   20008DE2           ADD      R0,SP,#+32
   \   00000428   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000042C   000059E3           CMP      R9,#+0
   \   00000430   1400000A           BEQ      ??LoadConfigString_22
   \   00000434   00009DE5           LDR      R0,[SP, #+0]
   \   00000438   010070E3           CMN      R0,#+1
   \   0000043C   07005611           CMPNE    R6,R7
   \   00000440   FBFEFF1A           BNE      ??LoadConfigString_4
   \                     ??LoadConfigString_3:
   \   00000444   7801D4E5           LDRB     R0,[R4, #+376]
   \   00000448   000050E3           CMP      R0,#+0
   \   0000044C   0D00001A           BNE      ??LoadConfigString_22
    181              }
    182              if (NoError && !IsCreatedFromMultiple ) {
    183                  ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel);
   \   00000450   01002DE9           PUSH     {R0}
   \   00000454   01002DE9           PUSH     {R0}
   \   00000458   700194E5           LDR      R0,[R4, #+368]
   \   0000045C   01002DE9           PUSH     {R0}
   \   00000460   A03094E5           LDR      R3,[R4, #+160]
   \   00000464   6C2194E5           LDR      R2,[R4, #+364]
   \   00000468   681194E5           LDR      R1,[R4, #+360]
   \   0000046C   640194E5           LDR      R0,[R4, #+356]
   \   00000470   FF2002E2           AND      R2,R2,#0xFF
   \   00000474   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000478   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000047C   FF0000E2           AND      R0,R0,#0xFF
   \   00000480   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   00000484   0CD08DE2           ADD      SP,SP,#+12
    184              }
    185              return (NoError);
   \                     ??LoadConfigString_22:
   \   00000488   0900A0E1           MOV      R0,R9
   \   0000048C   ACD08DE2           ADD      SP,SP,#+172
   \   00000490   F043BDE8           POP      {R4-R9,LR}
   \   00000494   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_21:
   \   00000498   ........           DC32     `?<Constant "ModbusCoilHistory">`
    186          }
    187          
    188          //--------------------------------------------------------------------------- '
    189          

   \                                 In segment CODE, align 4, keep-with-next
    190          void ModbusCoilHistory::SetAlarmList(void) {
   \                     ??SetAlarmList:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000004   00429FE5           LDR      R4,??SetAlarmList_2  ;; ??AlarmSet
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   BC1196E5           LDR      R1,[R6, #+444]
   \   00000010   8C5196E5           LDR      R5,[R6, #+396]
   \   00000014   9C0196E5           LDR      R0,[R6, #+412]
   \   00000018   009094E5           LDR      R9,[R4, #+0]
   \   0000001C   697FA0E3           MOV      R7,#+420
   \   00000020   708FA0E3           MOV      R8,#+448
   \   00000024   771041E2           SUB      R1,R1,#+119
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   030051E3           CMP      R1,#+3
   \   00000030   7300008A           BHI      ??SetAlarmList_3
   \   00000034   012F8FE2           ADR      R2,??SetAlarmList_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SetAlarmList_1:
   \   00000040   001E2247           DC8      +0,+30,+34,+71
    191              switch (AlarmAlternative) {
    192              case C_CTRL_ALT_ALL :
    193                  {
    194                      set<AlarmBasic *>::iterator APtrIt;
    195                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
   \                     ??SetAlarmList_4:
   \   00000044   040059E1           CMP      R9,R4
   \   00000048   6D00000A           BEQ      ??SetAlarmList_3
    196                          AlarmList.insert(*APtrIt);
   \   0000004C   102099E5           LDR      R2,[R9, #+16]
   \   00000050   061087E0           ADD      R1,R7,R6
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??insert_2,??insert??rA_1
    197                      }
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000064   0090A0E1           MOV      R9,R0
   \   00000068   F5FFFFEA           B        ??SetAlarmList_4
    198                  }
    199                  break;
    200              case C_CTRL_ALT_AL_TYPES :
    201                  {
    202                      set<AlarmBasic *>::iterator APtrIt;
    203                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
    204                          for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    205                              if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_5:
   \   0000006C   100099E5           LDR      R0,[R9, #+16]
   \   00000070   061098E7           LDR      R1,[R8, +R6]
   \   00000074   A00090E5           LDR      R0,[R0, #+160]
   \   00000078   051191E7           LDR      R1,[R1, +R5, LSL #+2]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   0300001A           BNE      ??SetAlarmList_6
    206                                  AlarmList.insert(*APtrIt);
   \   00000084   102099E5           LDR      R2,[R9, #+16]
   \   00000088   061087E0           ADD      R1,R7,R6
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??insert_2,??insert??rA_1
    207                              }
    208                          }
   \                     ??SetAlarmList_6:
   \   00000094   015085E2           ADD      R5,R5,#+1
   \                     ??SetAlarmList_7:
   \   00000098   060088E0           ADD      R0,R8,R6
   \   0000009C   041090E5           LDR      R1,[R0, #+4]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   000041E0           SUB      R0,R1,R0
   \   000000A8   200155E1           CMP      R5,R0, LSR #+2
   \   000000AC   EEFFFF3A           BCC      ??SetAlarmList_5
   \   000000B0   0900A0E1           MOV      R0,R9
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000B8   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_8:
   \   000000BC   040059E1           CMP      R9,R4
   \   000000C0   4F00000A           BEQ      ??SetAlarmList_3
   \   000000C4   0050A0E3           MOV      R5,#+0
   \   000000C8   F2FFFFEA           B        ??SetAlarmList_7
    209                      }
    210                  }
    211                  break;
    212              case C_CTRL_ALT_PRO_LIST :
    213                  if (!PROList.empty()) {
   \                     ??SetAlarmList_9:
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   4B00000A           BEQ      ??SetAlarmList_3
    214                      set<PRogramObject *>::iterator pBIt;
    215                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   000000D4   020000EA           B        ??SetAlarmList_10
   \                     ??SetAlarmList_11:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_10:
   \   000000E4   630F86E2           ADD      R0,R6,#+396
   \   000000E8   000055E1           CMP      R5,R0
   \   000000EC   4400000A           BEQ      ??SetAlarmList_3
    216                          PRogramObject *TElement = (PRogramObject *)*pBIt;
   \   000000F0   104095E5           LDR      R4,[R5, #+16]
    217                          set<AlarmBasic *>::iterator APtrIt;
    218                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
   \   000000F4   FC9094E5           LDR      R9,[R4, #+252]
   \   000000F8   130000EA           B        ??SetAlarmList_12
    219                              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    220                                  if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_13:
   \   000000FC   100099E5           LDR      R0,[R9, #+16]
   \   00000100   061098E7           LDR      R1,[R8, +R6]
   \   00000104   A00090E5           LDR      R0,[R0, #+160]
   \   00000108   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   0000010C   010050E1           CMP      R0,R1
   \   00000110   0300001A           BNE      ??SetAlarmList_14
    221                                      AlarmList.insert(*APtrIt);
   \   00000114   102099E5           LDR      R2,[R9, #+16]
   \   00000118   061087E0           ADD      R1,R7,R6
   \   0000011C   0D00A0E1           MOV      R0,SP
   \   00000120   ........           _BLF     ??insert_2,??insert??rA_1
    222                                  }
    223                              }
   \                     ??SetAlarmList_14:
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \                     ??SetAlarmList_15:
   \   00000128   060088E0           ADD      R0,R8,R6
   \   0000012C   041090E5           LDR      R1,[R0, #+4]
   \   00000130   000090E5           LDR      R0,[R0, #+0]
   \   00000134   000041E0           SUB      R0,R1,R0
   \   00000138   20015AE1           CMP      R10,R0, LSR #+2
   \   0000013C   EEFFFF3A           BCC      ??SetAlarmList_13
   \   00000140   0900A0E1           MOV      R0,R9
   \   00000144   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000148   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_12:
   \   0000014C   FC0084E2           ADD      R0,R4,#+252
   \   00000150   000059E1           CMP      R9,R0
   \   00000154   DFFFFF0A           BEQ      ??SetAlarmList_11
   \   00000158   00A0A0E3           MOV      R10,#+0
   \   0000015C   F1FFFFEA           B        ??SetAlarmList_15
    224                          }
    225                      }
    226                  }
    227                  break;
    228              case C_CTRL_ALT_TYPE_PRO :
    229                  if (!PROList.empty()) {
   \                     ??SetAlarmList_16:
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   2600000A           BEQ      ??SetAlarmList_3
    230                      set<PRogramObject *>::iterator pBIt;
    231                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000168   200000EA           B        ??SetAlarmList_17
    232                          PRogramObject *TElement = (PRogramObject *)*pBIt;
    233                          set<AlarmBasic *>::iterator APtrIt;
    234                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
    235                              AlarmBasic *AlPtr = *APtrIt;
   \                     ??SetAlarmList_18:
   \   0000016C   10A094E5           LDR      R10,[R4, #+16]
    236                              if (AlPtr) {
   \   00000170   00005AE3           CMP      R10,#+0
   \   00000174   1400000A           BEQ      ??SetAlarmList_19
    237                                  bool Found = false;
   \   00000178   0000A0E3           MOV      R0,#+0
    238                                  for (unsigned j = 0; !Found && j < AlarmTypeList.size(); j++) {
   \   0000017C   00B0A0E3           MOV      R11,#+0
   \                     ??SetAlarmList_20:
   \   00000180   061088E0           ADD      R1,R8,R6
   \   00000184   042091E5           LDR      R2,[R1, #+4]
   \   00000188   001091E5           LDR      R1,[R1, #+0]
   \   0000018C   011042E0           SUB      R1,R2,R1
   \   00000190   21015BE1           CMP      R11,R1, LSR #+2
   \   00000194   0C00002A           BCS      ??SetAlarmList_19
    239                                      if (AlPtr->Type == AlarmTypeList[j]) {
   \   00000198   062098E7           LDR      R2,[R8, +R6]
   \   0000019C   A0109AE5           LDR      R1,[R10, #+160]
   \   000001A0   0B2192E7           LDR      R2,[R2, +R11, LSL #+2]
   \   000001A4   020051E1           CMP      R1,R2
   \   000001A8   0400001A           BNE      ??SetAlarmList_21
    240                                          AlarmList.insert(AlPtr);
   \   000001AC   0A20A0E1           MOV      R2,R10
   \   000001B0   061087E0           ADD      R1,R7,R6
   \   000001B4   0D00A0E1           MOV      R0,SP
   \   000001B8   ........           _BLF     ??insert_2,??insert??rA_1
    241                                          Found = true;
   \   000001BC   0100A0E3           MOV      R0,#+1
    242                                      }
    243                                  }
   \                     ??SetAlarmList_21:
   \   000001C0   01B08BE2           ADD      R11,R11,#+1
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   ECFFFF0A           BEQ      ??SetAlarmList_20
    244                              }
    245                          }
   \                     ??SetAlarmList_19:
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001D4   0040A0E1           MOV      R4,R0
   \                     ??SetAlarmList_22:
   \   000001D8   FC0089E2           ADD      R0,R9,#+252
   \   000001DC   000054E1           CMP      R4,R0
   \   000001E0   E1FFFF1A           BNE      ??SetAlarmList_18
   \   000001E4   0500A0E1           MOV      R0,R5
   \   000001E8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001EC   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_17:
   \   000001F0   630F86E2           ADD      R0,R6,#+396
   \   000001F4   000055E1           CMP      R5,R0
   \   000001F8   10909515           LDRNE    R9,[R5, #+16]
   \   000001FC   FC409915           LDRNE    R4,[R9, #+252]
   \   00000200   F4FFFF1A           BNE      ??SetAlarmList_22
    246                      }
    247                  }
    248                  break;
    249              }
    250          }
   \                     ??SetAlarmList_3:
   \   00000204   F34FBDE8           POP      {R0,R1,R4-R11,LR}
   \   00000208   1EFF2FE1           BX       LR               ;; return
   \                     ??SetAlarmList_2:
   \   0000020C   ........           DC32     ??AlarmSet
    251          
    252          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    253          void ModbusCoilHistory::SetProList(void) {
   \                     ??SetProList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040A0E1           MOV      R4,R0
    254              if (!IdNumbers.empty()) {
   \   0000000C   735FA0E3           MOV      R5,#+460
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000041E0           SUB      R0,R1,R0
   \   00000020   2001B0E1           LSRS     R0,R0,#+2
   \   00000024   2E00000A           BEQ      ??SetProList_1
    255                  PROList.clear();
   \   00000028   636FA0E3           MOV      R6,#+396
   \   0000002C   040086E0           ADD      R0,R6,R4
   \   00000030   ........           _BLF     ??clear,??clear??rA
    256                  for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   180000EA           B        ??SetProList_2
    257                      PRogramObject *PROPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[i]);
    258                      if (PROPtr) {
    259                          PROList.insert(PROPtr);
    260                      } else {
    261                          AnsiString InfoStr;
   \                     ??SetProList_3:
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??AnsiString_1,??AnsiString??rA
    262                          InfoStr.cat_sprintf("ModbusCoilHistory IDNumber 0x%0x is incorrect", IdNumbers[i]);
   \   00000044   040095E7           LDR      R0,[R5, +R4]
   \   00000048   9C209FE5           LDR      R2,??SetProList_4  ;; `?<Constant "ModbusCoilHistory IDN...">`
   \   0000004C   073190E7           LDR      R3,[R0, +R7, LSL #+2]
   \   00000050   24108DE2           ADD      R1,SP,#+36
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   24008DE2           ADD      R0,SP,#+36
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
    263                          GiveConfigWarning(InfoStr);
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   40008DE2           ADD      R0,SP,#+64
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   40008DE2           ADD      R0,SP,#+64
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
    264                      }
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SetProList_5:
   \   0000009C   017087E2           ADD      R7,R7,#+1
   \                     ??SetProList_2:
   \   000000A0   040085E0           ADD      R0,R5,R4
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   000041E0           SUB      R0,R1,R0
   \   000000B0   200157E1           CMP      R7,R0, LSR #+2
   \   000000B4   0A00002A           BCS      ??SetProList_1
   \   000000B8   040095E7           LDR      R0,[R5, +R4]
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   070190E7           LDR      R0,[R0, +R7, LSL #+2]
   \   000000C4   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   DAFFFF0A           BEQ      ??SetProList_3
   \   000000D0   0020A0E1           MOV      R2,R0
   \   000000D4   041086E0           ADD      R1,R6,R4
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     ??insert,??insert??rA_2
   \   000000E0   EDFFFFEA           B        ??SetProList_5
    265                  }
    266              }
    267          }
   \                     ??SetProList_1:
   \   000000E4   5CD08DE2           ADD      SP,SP,#+92
   \   000000E8   ........           B        ?Subroutine10
   \                     ??SetProList_4:
   \   000000EC   ........           DC32     `?<Constant "ModbusCoilHistory IDN...">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine10_0:
   \   00000008   ........           DC32     ??Channels
    268          
    269          //---------------------------------------------------------------------------
    270          

   \                                 In segment CODE, align 4, keep-with-next
    271          bool ModbusCoilHistory::GetOutputVal(void) {
   \                     ??GetOutputVal:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
    272              int AlStat = 0;
    273              if (!AlarmList.empty()) {
   \   0000000C   B40194E5           LDR      R0,[R4, #+436]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   5100000A           BEQ      ??GetOutputVal_2
    274                  switch (DeactivateBy) {
   \   0000001C   881194E5           LDR      R1,[R4, #+392]
   \   00000020   690FA0E3           MOV      R0,#+420
   \   00000024   B31041E2           SUB      R1,R1,#+179
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   040051E3           CMP      R1,#+4
   \   00000030   4B00008A           BHI      ??GetOutputVal_2
   \   00000034   012F8FE2           ADR      R2,??GetOutputVal_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??GetOutputVal_1:
   \   00000040   01380F1E           DC8      +1,+56,+15,+30
   \   00000044   2B000000           DC8      +43,+0,+0,+0
    275                  case C_CTRL_DE_ACKNOW :
    276                      {
    277                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled;
    278                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled);
   \                     ??GetOutputVal_3:
   \   00000048   08108DE2           ADD      R1,SP,#+8
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   14108DE2           ADD      R1,SP,#+20
   \   00000054   02002DE9           PUSH     {R1}
   \   00000058   14108DE2           ADD      R1,SP,#+20
   \   0000005C   02002DE9           PUSH     {R1}
   \   00000060   20308DE2           ADD      R3,SP,#+32
   \   00000064   10208DE2           ADD      R2,SP,#+16
   \   00000068   0C108DE2           ADD      R1,SP,#+12
   \   0000006C   040080E0           ADD      R0,R0,R4
   \   00000070   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    279                          AlStat = ActiveAl;
   \   00000074   0C509DE5           LDR      R5,[SP, #+12]
   \                     ??GetOutputVal_4:
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   380000EA           B        ??GetOutputVal_2
    280                      }
    281                      break;
    282                  case C_CTRL_DE_IDLE :
    283                      {
    284                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled;
    285                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled);
   \                     ??GetOutputVal_5:
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   02002DE9           PUSH     {R1}
   \   00000088   18108DE2           ADD      R1,SP,#+24
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   14108DE2           ADD      R1,SP,#+20
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   1C308DE2           ADD      R3,SP,#+28
   \   0000009C   14208DE2           ADD      R2,SP,#+20
   \   000000A0   0C108DE2           ADD      R1,SP,#+12
   \   000000A4   040080E0           ADD      R0,R0,R4
   \   000000A8   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    286                          AlStat = ActiveAl + AcknowledgedAl;
   \   000000AC   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B0   14109DE5           LDR      R1,[SP, #+20]
   \   000000B4   005081E0           ADD      R5,R1,R0
   \   000000B8   EEFFFFEA           B        ??GetOutputVal_4
    287                      }
    288                      break;
    289                  case C_CTRL_DE_VALUE :
    290                      {
    291                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled;
    292                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled);
   \                     ??GetOutputVal_6:
   \   000000BC   10108DE2           ADD      R1,SP,#+16
   \   000000C0   02002DE9           PUSH     {R1}
   \   000000C4   10108DE2           ADD      R1,SP,#+16
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   1C108DE2           ADD      R1,SP,#+28
   \   000000D0   02002DE9           PUSH     {R1}
   \   000000D4   10308DE2           ADD      R3,SP,#+16
   \   000000D8   14208DE2           ADD      R2,SP,#+20
   \   000000DC   0C108DE2           ADD      R1,SP,#+12
   \   000000E0   040080E0           ADD      R0,R0,R4
   \   000000E4   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    293                          AlStat = OutsideLim;
   \   000000E8   18509DE5           LDR      R5,[SP, #+24]
   \   000000EC   E1FFFFEA           B        ??GetOutputVal_4
    294                      }
    295                      break;
    296                  case C_CTRL_DE_VAL_ENABLED:
    297                      {
    298                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled;
    299                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled);
   \                     ??GetOutputVal_7:
   \   000000F0   04108DE2           ADD      R1,SP,#+4
   \   000000F4   02002DE9           PUSH     {R1}
   \   000000F8   18108DE2           ADD      R1,SP,#+24
   \   000000FC   02002DE9           PUSH     {R1}
   \   00000100   18108DE2           ADD      R1,SP,#+24
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   14308DE2           ADD      R3,SP,#+20
   \   0000010C   18208DE2           ADD      R2,SP,#+24
   \   00000110   0C108DE2           ADD      R1,SP,#+12
   \   00000114   040080E0           ADD      R0,R0,R4
   \   00000118   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    300                          AlStat = OutsideLimEnabled;
   \   0000011C   10509DE5           LDR      R5,[SP, #+16]
   \   00000120   D4FFFFEA           B        ??GetOutputVal_4
    301                      }
    302                      break;
    303                  case C_CTRL_DE_SILENCE:
    304                      {
    305                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled;
    306                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim,OutsideLimEnabled);
   \                     ??GetOutputVal_8:
   \   00000124   14108DE2           ADD      R1,SP,#+20
   \   00000128   02002DE9           PUSH     {R1}
   \   0000012C   10108DE2           ADD      R1,SP,#+16
   \   00000130   02002DE9           PUSH     {R1}
   \   00000134   10108DE2           ADD      R1,SP,#+16
   \   00000138   02002DE9           PUSH     {R1}
   \   0000013C   10308DE2           ADD      R3,SP,#+16
   \   00000140   0C208DE2           ADD      R2,SP,#+12
   \   00000144   1C108DE2           ADD      R1,SP,#+28
   \   00000148   040080E0           ADD      R0,R0,R4
   \   0000014C   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    307                          if (AlarmBasic::AlarmSilence) {
   \   00000150   48009FE5           LDR      R0,??GetOutputVal_9  ;; ??AlarmSilence
   \   00000154   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000158   0CD08DE2           ADD      SP,SP,#+12
   \   0000015C   000050E3           CMP      R0,#+0
    308                              AlStat = 0;
    309                          } else {
    310                              AlStat = ActiveAl;
   \   00000160   10509D05           LDREQ    R5,[SP, #+16]
    311                          }
    312                      }
    313                      break;
    314                  }
    315              } else {
    316                  switch (DeactivateBy) {
    317                  case C_CTRL_DE_IDLE         :
    318                  case C_CTRL_DE_VALUE        :
    319                  case C_CTRL_DE_ACKNOW       :
    320                  case C_CTRL_DE_SILENCE      :
    321                  case C_CTRL_DE_VAL_ENABLED  :
    322                      break;
    323                  }
    324              }
    325              switch (NormalState) {
   \                     ??GetOutputVal_2:
   \   00000164   840194E5           LDR      R0,[R4, #+388]
   \   00000168   9F10A0E3           MOV      R1,#+159
   \   0000016C   701E81E3           ORR      R1,R1,#0x700
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   0500001A           BNE      ??GetOutputVal_10
    326              case C_CTRL_NS_UNPOWERED:
    327                  break;
    328              case C_CTRL_NS_POWERED :
    329                  AlStat = !AlStat;
   \   00000178   000055E3           CMP      R5,#+0
   \   0000017C   0500000A           BEQ      ??GetOutputVal_11
   \                     ??GetOutputVal_12:
   \   00000180   0000A0E3           MOV      R0,#+0
   \                     ??GetOutputVal_13:
   \   00000184   18D08DE2           ADD      SP,SP,#+24
   \   00000188   3040BDE8           POP      {R4,R5,LR}
   \   0000018C   1EFF2FE1           BX       LR               ;; return
    330                  break;
    331              }
    332              return AlStat;
   \                     ??GetOutputVal_10:
   \   00000190   000055E3           CMP      R5,#+0
   \   00000194   F9FFFF0A           BEQ      ??GetOutputVal_12
   \                     ??GetOutputVal_11:
   \   00000198   0100A0E3           MOV      R0,#+1
   \   0000019C   F8FFFFEA           B        ??GetOutputVal_13
   \                     ??GetOutputVal_9:
   \   000001A0   ........           DC32     ??AlarmSilence
    333          }
    334          

   \                                 In segment CODE, align 4, keep-with-next
    335          void ModbusCoilHistory::Update(void) {
   \                     ??Update:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    336              clock_t CurrentTime = clock();
    337              if (CurrentTime >= LogTime + TSNUart::Channels[TCUPortNo]->LogTime) {
   \   00000004   ........           LDR      R6,??Subroutine10_0  ;; ??Channels
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     clock,??clock??rA
   \   00000010   D81194E5           LDR      R1,[R4, #+472]
   \   00000014   5A5FA0E3           MOV      R5,#+360
   \   00000018   042095E7           LDR      R2,[R5, +R4]
   \   0000001C   022196E7           LDR      R2,[R6, +R2, LSL #+2]
   \   00000020   602092E5           LDR      R2,[R2, #+96]
   \   00000024   011082E0           ADD      R1,R2,R1
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0E0000BA           BLT      ??Update_1
    338                  LogTime = clock();
   \   00000030   ........           _BLF     clock,??clock??rA
   \   00000034   D80184E5           STR      R0,[R4, #+472]
    339                  ModbusUnit *tmpPtr = FindUnit();
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   00000040   0070B0E1           MOVS     R7,R0
    340                  if (tmpPtr) {
   \   00000044   0800000A           BEQ      ??Update_1
    341                      bool alState = GetOutputVal();
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       ??GetOutputVal
    342                      tmpPtr->SetCoilHistory(Channel, alState, TSNUart::Channels[TCUPortNo]->LogEntries);
   \   00000050   701194E5           LDR      R1,[R4, #+368]
   \   00000054   0020A0E1           MOV      R2,R0
   \   00000058   040095E7           LDR      R0,[R5, +R4]
   \   0000005C   000196E7           LDR      R0,[R6, +R0, LSL #+2]
   \   00000060   643090E5           LDR      R3,[R0, #+100]
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     ??SetCoilHistory,??SetCoilHistory??rA
    343                  }
    344              }
    345          }
   \                     ??Update_1:
   \   0000006C                      REQUIRE ?Subroutine10
   \   0000006C                      ;; // Fall through to label ?Subroutine10

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0X	">`:
   \   00000000   307825305809       DC8 "0x%0X      "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ModbusCoilHistory">`:
   \   00000000   4D6F64627573       DC8 "ModbusCoilHistory"
   \              436F696C4869
   \              73746F727900
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ModbusCoilHistory IDN...">`:
   \   00000000   4D6F64627573       DC8 "ModbusCoilHistory IDNumber 0x%0x is incorrect"
   \              436F696C4869
   \              73746F727920
   \              49444E756D62
   \              657220307825
   \              307820697320
   \              696E636F7272
   \              65637400    
   \   0000002E   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoilHistory &ModbusCoilHistory::new ModbusCoilHistory(bool)
   \                     `??new ModbusCoilHistory`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   770FA0E3           MOV      R0,#+476
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusCoilHistory_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusCoilHistory
   \                     `??new ModbusCoilHistory_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     ModbusCoilHistory::GetOutputVal()
                                       48
     ModbusCoilHistory::LoadConfigString(TSNConfigString &)
                                      212
     ModbusCoilHistory::MakeConfigString(int)
                                      564
     ModbusCoilHistory::ModbusCoilHistory(bool)
                                       28
     ModbusCoilHistory::SetAlarmList()
                                       44
     ModbusCoilHistory::SetProList()
                                      112
     ModbusCoilHistory::Update()       20
     ModbusCoilHistory::new ModbusCoilHistory(bool)
                                        8
     ModbusCoilHistory::~ModbusCoilHistory()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                        4
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  12
     operator+(string const &, string const &)
                                       48
     set<PRogramObjectBase *>::~set()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                      36
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     ModbusCoilHistory::ModbusSet     24
     ModbusCoilHistory::ModbusCoilHistory(bool)
                                     176
     ModbusCoilHistory::~ModbusCoilHistory()
                                     136
     ModbusCoilHistory::MakeConfigString(int)
                                    1052
     ModbusCoilHistory::LoadConfigString(TSNConfigString &)
                                    1180
     ModbusCoilHistory::SetAlarmList()
                                     528
     ModbusCoilHistory::SetProList()
                                     240
     ?Subroutine10                    12
     ModbusCoilHistory::GetOutputVal()
                                     420
     ModbusCoilHistory::Update()     108
     ?<Constant "0x%0X	">              8
     ?<Constant "ModbusCoilHistory">
                                      20
     ?<Constant "ModbusCoilHistory IDN...">
                                      48
     ModbusCoilHistory::new ModbusCoilHistory(bool)
                                      40
     __sti__routine()                 56
     ??DataTable2                      4
     ??DataTable3                      4
      Others                         916

 
 7 652 bytes in segment CODE
   248 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 3 960 bytes of CODE  memory (+ 3 708 bytes shared)
   248 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
