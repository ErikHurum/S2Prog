##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\TDUWaterIngressWin.cpp             #
#    Command line    =  D:\S2Prog\TXU\src\TDUWaterIngressWin.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TDUWaterIngressWin.lst      #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TDUWaterIngressWin.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\TDUWaterIngressWin.cpp
      1          #include "TDUIncludes.h"

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          static void cbWin1(WM_MESSAGE * pMsg)
      4          {
   \                     ??cbWin1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      5              WM_HWIN hWin = pMsg->hWin;
      6              switch ( pMsg->MsgId ) {
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   F450D4E1           LDRSH    R5,[R4, #+4]
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   1300000A           BEQ      ??cbWin1_1
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   0C00000A           BEQ      ??cbWin1_2
   \   00000020   170050E2           SUBS     R0,R0,#+23
   \   00000024   1100001A           BNE      ??cbWin1_3
      7              case WM_NOTIFY_PARENT:
      8                  {
      9                      int NCode, Id;
     10                      Id    = WM_GetId(pMsg->hWinSrc);        /* Id of widget */
   \   00000028   F600D4E1           LDRSH    R0,[R4, #+6]
   \   0000002C   ........           _BLF     WM_GetId,??WM_GetId??rA
     11                      NCode = pMsg->Data.v;                               /* Notification code */
     12                      switch ( NCode ) {
   \   00000030   081094E5           LDR      R1,[R4, #+8]
   \   00000034   020051E3           CMP      R1,#+2
   \   00000038   0A00001A           BNE      ??cbWin1_1
     13                      case WM_NOTIFICATION_RELEASED:
     14                          {
     15                              WaterIngrWindow->UnitClicked(hWin,Id);
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   ........           LDR      R0,??DataTable1  ;; WaterIngrWindow
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   ........           BL       ??UnitClicked
   \   00000050   040000EA           B        ??cbWin1_1
     16                          }
     17                          break;
     18                      }
     19                  }
     20                  break;
     21              case WM_PAINT:
     22                  GUI_SetBkColor(TDU_C_BACK_DEFAULT);
   \                     ??cbWin1_2:
   \   00000054   20009FE5           LDR      R0,??cbWin1_4    ;; 0xd3d3d3
   \   00000058   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
     23                  GUI_Clear();
   \   0000005C   ........           _BLF     GUI_Clear,??GUI_Clear??rA
     24                  GUI_SetColor(TDU_C_TEXT_DEFAULT);
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
   \                     ??cbWin1_1:
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR
     25                  break;
     26              case WM_CREATE:
     27                  break;
     28              default:
     29                  WM_DefaultProc(pMsg);
   \                     ??cbWin1_3:
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
     30              }
     31          }
   \                     ??cbWin1_5:
   \   00000078   FAFFFFEA           B        ??cbWin1_1
   \                     ??cbWin1_4:
   \   0000007C   D3D3D300           DC32     0xd3d3d3
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          static void cbWin0(WM_MESSAGE * pMsg)
     34          {
   \                     ??cbWin0:
   \   00000000   00402DE9           PUSH     {LR}
     35              //WM_HWIN hWin = pMsg->hWin;
     36              switch ( pMsg->MsgId ) {
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   011051E2           SUBS     R1,R1,#+1
   \   0000000C   0600000A           BEQ      ??cbWin0_1
   \   00000010   0E1051E2           SUBS     R1,R1,#+14
   \   00000014   0300001A           BNE      ??cbWin0_2
     37              case WM_PAINT:
     38          //			GUI_SetBkColor(GUI_RED);
     39                  GUI_SetBkColor(TDU_C_PW_BACK);
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
     40                  GUI_Clear();
   \   00000020   ........           _BLF     GUI_Clear,??GUI_Clear??rA
   \   00000024   000000EA           B        ??cbWin0_1
     41                  break;
     42              case WM_CREATE:
     43                  break;
     44              default:
     45                  WM_DefaultProc(pMsg);
   \                     ??cbWin0_2:
   \   00000028   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
     46              }
     47          }
   \                     ??cbWin0_1:
   \   0000002C   0040BDE8           POP      {LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     48          

   \                                 In segment DATA_C, align 4, align-sorted
     49          const int TDUWaterIngressWin::Col0 =  0;    //Status
   \                     ??Col0:
   \   00000000   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
     50          const int TDUWaterIngressWin::Col1 = 14;    //Name
   \                     ??Col1:
   \   00000000   0E000000           DC32 14

   \                                 In segment DATA_C, align 4, align-sorted
     51          const int TDUWaterIngressWin::Col2 = 88;    //Main
   \                     ??Col2:
   \   00000000   58000000           DC32 88

   \                                 In segment DATA_C, align 4, align-sorted
     52          const int TDUWaterIngressWin::Col3 =130;    //Pre
   \                     ??Col3:
   \   00000000   82000000           DC32 130

   \                                 In segment DATA_C, align 4, align-sorted
     53          const int TDUWaterIngressWin::Col4 =172;    //Over
   \                     ??Col4:
   \   00000000   AC000000           DC32 172

   \                                 In segment DATA_C, align 4, align-sorted
     54          const int TDUWaterIngressWin::Col5 =208;    //Prot
   \                     ??Col5:
   \   00000000   D0000000           DC32 208

   \                                 In segment DATA_C, align 4, align-sorted
     55          const int TDUWaterIngressWin::Col6 =244;    //Temp
   \                     ??Col6:
   \   00000000   F4000000           DC32 244
     56          

   \                                 In segment DATA_C, align 4, align-sorted
     57          const int TDUWaterIngressWin::NumUnitsOnPage = 9;
   \                     ??NumUnitsOnPage:
   \   00000000   09000000           DC32 9
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          TDUWaterIngressWin::~TDUWaterIngressWin(void)
     60          {
   \                     `?~TDUWaterIngressWin`:
   \   00000000   00402DE9           PUSH     {LR}
     61          }
   \   00000004   ........           _BLF     `?~TDUPresentWin`,`?~TDUPresentWin??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          TDUWaterIngressWin::TDUWaterIngressWin(void)
   \                     ??TDUWaterIngressWin:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     64          {
   \   00000004   28669FE5           LDR      R6,??TDUWaterIngressWin_1+0x4  ;; `?<Constant {{468, 14, 6}, {74, 74, 6}, {475, 4`
   \   00000008   ACD04DE2           SUB      SP,SP,#+172
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??TDUPresentWin,??TDUPresentWin??rA
   \   00000014   345084E2           ADD      R5,R4,#+52
   \   00000018   540086E2           ADD      R0,R6,#+84
   \   0000001C   100085E5           STR      R0,[R5, #+16]
     65              MainWinHandl= 0;
   \   00000020   0070A0E3           MOV      R7,#+0
   \   00000024   B673C5E1           STRH     R7,[R5, #+54]
     66              ScrollHandl = 0;
   \   00000028   A600A0E3           MOV      R0,#+166
   \   0000002C   400E80E3           ORR      R0,R0,#0x400
   \   00000030   B47080E1           STRH     R7,[R0, +R4]
     67              HeaderHandl = 0;
   \   00000034   B07BC5E1           STRH     R7,[R5, #+176]
     68              for ( int i=0; i < MAX_ENTRIES_ON_WI; i++ ) {
   \   00000038   0000A0E3           MOV      R0,#+0
     69                  UnitHandl[  i] = 0;
   \                     ??TDUWaterIngressWin_2:
   \   0000003C   801084E0           ADD      R1,R4,R0, LSL #+1
   \   00000040   6C2081E2           ADD      R2,R1,#+108
   \   00000044   B070C2E1           STRH     R7,[R2, #+0]
   \   00000048   3E30A0E3           MOV      R3,#+62
   \   0000004C   C03F83E3           ORR      R3,R3,#0x300
   \   00000050   013083E0           ADD      R3,R3,R1
   \   00000054   B877C3E1           STRH     R7,[R3, #+120]
     70                  MainButton[ i] = 0;
     71                  PreButton[  i] = 0;
   \   00000058   B07FC3E1           STRH     R7,[R3, #+240]
     72                  ProtChBox[  i] = 0;
   \   0000005C   B070C3E1           STRH     R7,[R3, #+0]
   \   00000060   D630A0E3           MOV      R3,#+214
   \   00000064   403F83E3           ORR      R3,R3,#0x100
   \   00000068   011083E0           ADD      R1,R3,R1
   \   0000006C   B07FC1E1           STRH     R7,[R1, #+240]
     73                  OverChBox[  i] = 0;
     74                  TempText[   i] = 0;
   \   00000070   B877C1E1           STRH     R7,[R1, #+120]
     75                  NameText[   i] = 0;
   \   00000074   B27FC2E1           STRH     R7,[R2, #+242]
     76                  StatusText[ i] = 0;
   \   00000078   BA77C2E1           STRH     R7,[R2, #+122]
     77                  EnableText[ i] = 0;
   \   0000007C   B070C1E1           STRH     R7,[R1, #+0]
     78              }
   \   00000080   010080E2           ADD      R0,R0,#+1
   \   00000084   3C0050E3           CMP      R0,#+60
   \   00000088   EBFFFFBA           BLT      ??TDUWaterIngressWin_2
     79          
     80              AddToSKeyList(TDU_WATERINGR_WIN  ,0,L_WORD94);
   \   0000008C   7780A0E3           MOV      R8,#+119
   \   00000090   808E88E3           ORR      R8,R8,#0x800
   \   00000094   5E30A0E3           MOV      R3,#+94
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0810A0E1           MOV      R1,R8
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??AddToSKeyList,??AddToSKeyList??rA
     81              CurrentWIPtr = NULL;
   \   000000A8   A87484E5           STR      R7,[R4, #+1192]
     82              LineHeight = 20;
     83              StartX = 0;
     84              StartY = (LineHeight-2);
     85              CurrentPage = 0;
     86              PageSize = NumUnitsOnPage*LineHeight;
   \   000000AC   ........           LDR      R1,??DataTable6  ;; ??ObjVector
   \   000000B0   1400A0E3           MOV      R0,#+20
   \   000000B4   240085E5           STR      R0,[R5, #+36]
   \   000000B8   287085E5           STR      R7,[R5, #+40]
   \   000000BC   020040E2           SUB      R0,R0,#+2
   \   000000C0   2C0085E5           STR      R0,[R5, #+44]
   \   000000C4   187085E5           STR      R7,[R5, #+24]
   \   000000C8   240095E5           LDR      R0,[R5, #+36]
   \   000000CC   800180E0           ADD      R0,R0,R0, LSL #+3
   \   000000D0   300085E5           STR      R0,[R5, #+48]
   \   000000D4   5C059FE5           LDR      R0,??TDUWaterIngressWin_1+0x8  ;; ??ObjVector + 4
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   000090E5           LDR      R0,[R0, #+0]
   \   000000E0   010040E0           SUB      R0,R0,R1
   \   000000E4   2001B0E1           LSRS     R0,R0,#+2
   \   000000E8   5C00000A           BEQ      ??TDUWaterIngressWin_3
     87              if ( !PROWaterIngress::ObjVector.empty() ) {
     88                  NumberOfUnits = PROWaterIngress::ObjVector.size();
     89                  PageCount = NumberOfUnits/NumUnitsOnPage;
   \   000000EC   48159FE5           LDR      R1,??TDUWaterIngressWin_1+0xC  ;; 0x38e38e39
   \   000000F0   1C0085E5           STR      R0,[R5, #+28]
   \   000000F4   9120C3E0           SMULL    R2,R3,R1,R0
   \   000000F8   C330A0E1           ASR      R3,R3,#+1
   \   000000FC   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000100   140085E5           STR      R0,[R5, #+20]
     90                  NumberOfUnitsLastPage = NumberOfUnits - PageCount*NumUnitsOnPage;
   \   00000104   1C0095E5           LDR      R0,[R5, #+28]
   \   00000108   831183E0           ADD      R1,R3,R3, LSL #+3
   \   0000010C   010040E0           SUB      R0,R0,R1
   \   00000110   200085E5           STR      R0,[R5, #+32]
     91                  if ( NumberOfUnitsLastPage ) PageCount++;
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   01008312           ADDNE    R0,R3,#+1
   \   0000011C   14008515           STRNE    R0,[R5, #+20]
     92                  int YSize = (((NumberOfUnits+2))*(LineHeight-1)+StartY);
   \   00000120   1C0095E5           LDR      R0,[R5, #+28]
   \   00000124   241095E5           LDR      R1,[R5, #+36]
   \   00000128   2C2095E5           LDR      R2,[R5, #+44]
   \   0000012C   020080E2           ADD      R0,R0,#+2
   \   00000130   011041E2           SUB      R1,R1,#+1
   \   00000134   912023E0           MLA      R3,R1,R0,R2
     93                  if ( YSize<200 ) YSize=200;
     94          
     95                  MainWinHandl  = WM_CreateWindowAsChild( StartX, StartY, PWinXSize, YSize,  WinHandl, WM_CF_SHOW, cbWin0, 0);
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   F8049FE5           LDR      R0,??TDUWaterIngressWin_1+0x10  ;; ??cbWin0
   \   00000144   C80053E3           CMP      R3,#+200
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   0200A0E3           MOV      R0,#+2
   \   00000150   01002DE9           PUSH     {R0}
   \   00000154   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000158   C830A0B3           MOVLT    R3,#+200
   \   0000015C   01002DE9           PUSH     {R0}
   \   00000160   002095E5           LDR      R2,[R5, #+0]
   \   00000164   2C1095E5           LDR      R1,[R5, #+44]
   \   00000168   280095E5           LDR      R0,[R5, #+40]
   \   0000016C   ........           _BLF     WM_CreateWindowAsChild,??WM_CreateWindowAsChild??rA
   \   00000170   B603C5E1           STRH     R0,[R5, #+54]
     96                  WM_SetId(MainWinHandl,TDU_WATERINGR_WIN);
   \   00000174   0810A0E1           MOV      R1,R8
   \   00000178   ........           _BLF     WM_SetId,??WM_SetId??rA
     97                  //	ScrollHandl   = SCROLLBAR_Create(PWinXSize-19, 0, 18, PWinYSize,WinHandl, 999, WM_CF_SHOW, SCROLLBAR_CF_VERTICAL);
     98                  {
     99                      HeaderInfo Header[]={
    100                          { L_WORD468 ,Col1-Col0  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    101                          { L_WORD74  ,Col2-Col1  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    102                          { L_WORD475 ,Col3-Col2  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    103                          { L_WORD476 ,Col4-Col3  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    104                          { L_WORD477 ,Col5-Col4  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    105                          { L_WORD478 ,Col6-Col5  ,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    106                          { L_WORD338 ,Col6-Col5+5,GUI_TA_BOTTOM | GUI_TA_HCENTER},
    107                      } ;
   \   0000017C   68008DE2           ADD      R0,SP,#+104
   \   00000180   5420A0E3           MOV      R2,#+84
   \                     ??TDUWaterIngressWin_4:
   \   00000184   042052E2           SUBS     R2,R2,#+4
   \   00000188   021096E7           LDR      R1,[R6, R2]
   \   0000018C   021080E7           STR      R1,[R0, R2]
   \   00000190   FBFFFF1A           BNE      ??TDUWaterIngressWin_4
    108          
    109                      HeaderHandl = HEADER_Create(Col0, 0, PWinXSize, (LineHeight-2), WinHandl, GUI_ID_HEADER0, WM_CF_SHOW, 0);
   \   00000194   8460A0E3           MOV      R6,#+132
   \   00000198   B06E86E3           ORR      R6,R6,#0xB00
   \   0000019C   0000A0E3           MOV      R0,#+0
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   0200A0E3           MOV      R0,#+2
   \   000001A8   01002DE9           PUSH     {R0}
   \   000001AC   0600A0E1           MOV      R0,R6
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   000001B8   0710A0E1           MOV      R1,R7
   \   000001BC   01002DE9           PUSH     {R0}
   \   000001C0   240095E5           LDR      R0,[R5, #+36]
   \   000001C4   002095E5           LDR      R2,[R5, #+0]
   \   000001C8   023040E2           SUB      R3,R0,#+2
   \   000001CC   0100A0E1           MOV      R0,R1
   \   000001D0   ........           _BLF     HEADER_Create,??HEADER_Create??rA
   \   000001D4   B00BC5E1           STRH     R0,[R5, #+176]
    110          
    111                      for ( int i=0; i< NELEMENTS(Header); i++ ) {
   \   000001D8   20D08DE2           ADD      SP,SP,#+32
    112                          AddToSKeyList(GUI_ID_HEADER0,i,Header[i].WordKey);
   \                     ??TDUWaterIngressWin_5:
   \   000001DC   0C00A0E3           MOV      R0,#+12
   \   000001E0   58108DE2           ADD      R1,SP,#+88
   \   000001E4   901728E0           MLA      R8,R0,R7,R1
   \   000001E8   009098E5           LDR      R9,[R8, #+0]
   \   000001EC   0720A0E1           MOV      R2,R7
   \   000001F0   0930A0E1           MOV      R3,R9
   \   000001F4   0610A0E1           MOV      R1,R6
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           _BLF     ??AddToSKeyList,??AddToSKeyList??rA
    113                          HEADER_AddItem(HeaderHandl, Header[i].Width, FindDictionaryWord(Header[i].WordKey).c_str(), Header[i].Align);   // S
   \   00000200   0910A0E1           MOV      R1,R9
   \   00000204   04008DE2           ADD      R0,SP,#+4
   \   00000208   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000020C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000210   083098E5           LDR      R3,[R8, #+8]
   \   00000214   041098E5           LDR      R1,[R8, #+4]
   \   00000218   100050E3           CMP      R0,#+16
   \   0000021C   F00BD5E1           LDRSH    R0,[R5, #+176]
   \   00000220   08209D25           LDRCS    R2,[SP, #+8]
    114                      }
   \   00000224   017087E2           ADD      R7,R7,#+1
   \   00000228   08208D32           ADDCC    R2,SP,#+8
   \   0000022C   ........           _BLF     HEADER_AddItem,??HEADER_AddItem??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   04008DE2           ADD      R0,SP,#+4
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   070057E3           CMP      R7,#+7
   \   00000244   E4FFFF3A           BCC      ??TDUWaterIngressWin_5
    115                  }
    116                  //	SCROLLBAR_SetNumItems(ScrollHandl,(NumberOfUnits+1));
    117                  //	SCROLLBAR_SetPageSize(ScrollHandl,NumUnitsOnPage);
    118                  //
    119          
    120          
    121                  for ( int index=0; index<(NumUnitsOnPage*PageCount); index++ ) { //AStmark possible fault when more pages
   \   00000248   140095E5           LDR      R0,[R5, #+20]
   \   0000024C   0060A0E3           MOV      R6,#+0
   \   00000250   800180E0           ADD      R0,R0,R0, LSL #+3
   \   00000254   010050E3           CMP      R0,#+1
   \   00000258   F4BF8FE2           ADR      R11,??TDUWaterIngressWin_1  ;; ""
   \   0000025C   130000AA           BGE      ??TDUWaterIngressWin_6
    122                      int IdKey = index+GUI_ID_USER;
    123                      if ( index < NumberOfUnits ) {
    124                          PROWaterIngress *TElement = (PROWaterIngress*)PROWaterIngress::ObjVector[index];
    125                          AnsiString tempName = LibGetValue(SVT_PRO_NAME, TElement);
    126          
    127                          UnitHandl[index]  = WM_CreateWindowAsChild( Col0, index*LineHeight, PWinXSize, (LineHeight-1), MainWinHandl, WM_CF_SHOW, cbWin1, 0);
    128          
    129                          StatusText[index] = TEXT_CreateAsChild(   Col0+2, 1,   Col1-Col0, (LineHeight-2), UnitHandl[index],IdKey+100, WM_CF_SHOW, "", TEXT_CF_LEFT);
    130                          NameText[index]   = TEXT_CreateAsChild(   Col1+2, 1,   Col2-Col1, (LineHeight-2), UnitHandl[index],IdKey+200, WM_CF_SHOW, tempName.c_str(), TEXT_CF_LEFT);
    131                          MainButton[index] = BUTTON_CreateAsChild( Col2+1, 1, Col3-Col2-2, (LineHeight-2), UnitHandl[index],IdKey+300, WM_CF_SHOW);
    132                          PreButton[index]  = BUTTON_CreateAsChild( Col3+1, 1, Col4-Col3-2, (LineHeight-2), UnitHandl[index],IdKey+400, WM_CF_SHOW);
    133                          OverChBox[index]  = CHECKBOX_Create(     Col4+10, 1,          17, (LineHeight-2), UnitHandl[index],IdKey+500, WM_CF_SHOW);
    134                          // Add the widgets to the widget table
    135                          WM_SetId(UnitHandl[index],IdKey+600);
    136          
    137          
    138                          if ( TElement->DisableOverride ) {
    139                              WM_DisableWindow(OverChBox[index]);
    140                          } else {
    141                          }
    142                          ProtChBox[index]  = CHECKBOX_Create(     Col5+10, 1,          17, (LineHeight-2), UnitHandl[index],400+index, WM_CF_SHOW);
    143                          TempText[index]   = TEXT_CreateAsChild(     Col6, 1,   Col5-Col4, (LineHeight-2), UnitHandl[index],500+index, WM_CF_SHOW, "",TEXT_CF_RIGHT);
    144          
    145                          TEXT_SetTextColor(NameText[index]  ,TDU_C_TEXT_DEFAULT); TEXT_SetFont(NameText[index]  ,&TDU_FONT_PW);
    146                          TEXT_SetFont(StatusText[index]  ,&TDU_FONT_PW);
    147                          BUTTON_SetFont(MainButton[index],&TDU_FONT_PW);BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_BACK_NOAL);
    148                          BUTTON_SetText(MainButton[index],FindDictionaryWord(L_WORD475).c_str());      BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_TEXT_NOAL);
    149                          BUTTON_SetFont(PreButton[index], &TDU_FONT_PW);BUTTON_SetBkColor(  PreButton[index], 0, TDU_C_AL_BACK_NOAL);
    150                          BUTTON_SetText(PreButton[index],FindDictionaryWord(L_WORD476).c_str());        BUTTON_SetTextColor(PreButton[index], 0, TDU_C_AL_TEXT_NOAL);
    151                      } else {
    152                          UnitHandl[index]  = WM_CreateWindowAsChild( Col0, index*LineHeight, PWinXSize, (LineHeight-1), MainWinHandl, WM_CF_SHOW, cbWin1, 0);
    153                      }
    154                  }
    155              }
    156          }
   \                     ??TDUWaterIngressWin_3:
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ACD08DE2           ADD      SP,SP,#+172
   \   00000268   F04FBDE8           POP      {R4-R11,LR}
   \   0000026C   1EFF2FE1           BX       LR               ;; return
   \                     ??TDUWaterIngressWin_7:
   \   00000270   0000A0E3           MOV      R0,#+0
   \   00000274   01002DE9           PUSH     {R0}
   \   00000278   80002DE9           PUSH     {R7}
   \   0000027C   0200A0E3           MOV      R0,#+2
   \   00000280   01002DE9           PUSH     {R0}
   \   00000284   F603D5E1           LDRSH    R0,[R5, #+54]
   \   00000288   01002DE9           PUSH     {R0}
   \   0000028C   240095E5           LDR      R0,[R5, #+36]
   \   00000290   002095E5           LDR      R2,[R5, #+0]
   \   00000294   013040E2           SUB      R3,R0,#+1
   \   00000298   900601E0           MUL      R1,R0,R6
   \   0000029C   0000A0E3           MOV      R0,#+0
   \   000002A0   ........           _BLF     WM_CreateWindowAsChild,??WM_CreateWindowAsChild??rA
   \   000002A4   B000C8E1           STRH     R0,[R8, #+0]
   \   000002A8   10D08DE2           ADD      SP,SP,#+16
   \                     ??TDUWaterIngressWin_8:
   \   000002AC   016086E2           ADD      R6,R6,#+1
   \                     ??TDUWaterIngressWin_6:
   \   000002B0   140095E5           LDR      R0,[R5, #+20]
   \   000002B4   800180E0           ADD      R0,R0,R0, LSL #+3
   \   000002B8   000056E1           CMP      R6,R0
   \   000002BC   E7FFFFAA           BGE      ??TDUWaterIngressWin_3
   \   000002C0   1C0095E5           LDR      R0,[R5, #+28]
   \   000002C4   78739FE5           LDR      R7,??TDUWaterIngressWin_1+0x14  ;; ??cbWin1
   \   000002C8   809E86E2           ADD      R9,R6,#+2048
   \   000002CC   86A084E0           ADD      R10,R4,R6, LSL #+1
   \   000002D0   6C808AE2           ADD      R8,R10,#+108
   \   000002D4   000056E1           CMP      R6,R0
   \   000002D8   E4FFFFAA           BGE      ??TDUWaterIngressWin_7
   \   000002DC   ........           LDR      R1,??DataTable6  ;; ??ObjVector
   \   000002E0   0030A0E3           MOV      R3,#+0
   \   000002E4   001091E5           LDR      R1,[R1, #+0]
   \   000002E8   3C008DE2           ADD      R0,SP,#+60
   \   000002EC   061191E7           LDR      R1,[R1, +R6, LSL #+2]
   \   000002F0   00108DE5           STR      R1,[SP, #+0]
   \   000002F4   0120A0E1           MOV      R2,R1
   \   000002F8   1510A0E3           MOV      R1,#+21
   \   000002FC   501E81E3           ORR      R1,R1,#0x500
   \   00000300   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000304   0000A0E3           MOV      R0,#+0
   \   00000308   01002DE9           PUSH     {R0}
   \   0000030C   80002DE9           PUSH     {R7}
   \   00000310   0200A0E3           MOV      R0,#+2
   \   00000314   01002DE9           PUSH     {R0}
   \   00000318   F603D5E1           LDRSH    R0,[R5, #+54]
   \   0000031C   01002DE9           PUSH     {R0}
   \   00000320   240095E5           LDR      R0,[R5, #+36]
   \   00000324   002095E5           LDR      R2,[R5, #+0]
   \   00000328   013040E2           SUB      R3,R0,#+1
   \   0000032C   900601E0           MUL      R1,R0,R6
   \   00000330   0000A0E3           MOV      R0,#+0
   \   00000334   ........           _BLF     WM_CreateWindowAsChild,??WM_CreateWindowAsChild??rA
   \   00000338   B000C8E1           STRH     R0,[R8, #+0]
   \   0000033C   0000A0E3           MOV      R0,#+0
   \   00000340   01002DE9           PUSH     {R0}
   \   00000344   0B00A0E1           MOV      R0,R11
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0200A0E3           MOV      R0,#+2
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   640089E2           ADD      R0,R9,#+100
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   F000D8E1           LDRSH    R0,[R8, #+0]
   \   00000360   0E20A0E3           MOV      R2,#+14
   \   00000364   0110A0E3           MOV      R1,#+1
   \   00000368   01002DE9           PUSH     {R0}
   \   0000036C   240095E5           LDR      R0,[R5, #+36]
   \   00000370   023040E2           SUB      R3,R0,#+2
   \   00000374   0200A0E3           MOV      R0,#+2
   \   00000378   ........           _BLF     TEXT_CreateAsChild,??TEXT_CreateAsChild??rA
   \   0000037C   24D08DE2           ADD      SP,SP,#+36
   \   00000380   BA07C8E1           STRH     R0,[R8, #+122]
   \   00000384   54009DE5           LDR      R0,[SP, #+84]
   \   00000388   0010A0E3           MOV      R1,#+0
   \   0000038C   100050E3           CMP      R0,#+16
   \   00000390   40009D25           LDRCS    R0,[SP, #+64]
   \   00000394   4A20A0E3           MOV      R2,#+74
   \   00000398   40008D32           ADDCC    R0,SP,#+64
   \   0000039C   02002DE9           PUSH     {R1}
   \   000003A0   01002DE9           PUSH     {R0}
   \   000003A4   0200A0E3           MOV      R0,#+2
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   C80089E2           ADD      R0,R9,#+200
   \   000003B0   01002DE9           PUSH     {R0}
   \   000003B4   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   01002DE9           PUSH     {R0}
   \   000003C0   240095E5           LDR      R0,[R5, #+36]
   \   000003C4   023040E2           SUB      R3,R0,#+2
   \   000003C8   1000A0E3           MOV      R0,#+16
   \   000003CC   ........           _BLF     TEXT_CreateAsChild,??TEXT_CreateAsChild??rA
   \   000003D0   B20FC8E1           STRH     R0,[R8, #+242]
   \   000003D4   B600A0E3           MOV      R0,#+182
   \   000003D8   C00F80E3           ORR      R0,R0,#0x300
   \   000003DC   0A7080E0           ADD      R7,R0,R10
   \   000003E0   0200A0E3           MOV      R0,#+2
   \   000003E4   01002DE9           PUSH     {R0}
   \   000003E8   4B0F89E2           ADD      R0,R9,#+300
   \   000003EC   01002DE9           PUSH     {R0}
   \   000003F0   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000003F4   2820A0E3           MOV      R2,#+40
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   01002DE9           PUSH     {R0}
   \   00000400   240095E5           LDR      R0,[R5, #+36]
   \   00000404   023040E2           SUB      R3,R0,#+2
   \   00000408   5900A0E3           MOV      R0,#+89
   \   0000040C   ........           _BLF     BUTTON_CreateAsChild,??BUTTON_CreateAsChild??rA
   \   00000410   B000C7E1           STRH     R0,[R7, #+0]
   \   00000414   0200A0E3           MOV      R0,#+2
   \   00000418   01002DE9           PUSH     {R0}
   \   0000041C   640F89E2           ADD      R0,R9,#+400
   \   00000420   01002DE9           PUSH     {R0}
   \   00000424   F000D8E1           LDRSH    R0,[R8, #+0]
   \   00000428   2820A0E3           MOV      R2,#+40
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   01002DE9           PUSH     {R0}
   \   00000434   240095E5           LDR      R0,[R5, #+36]
   \   00000438   023040E2           SUB      R3,R0,#+2
   \   0000043C   8300A0E3           MOV      R0,#+131
   \   00000440   ........           _BLF     BUTTON_CreateAsChild,??BUTTON_CreateAsChild??rA
   \   00000444   2CD08DE2           ADD      SP,SP,#+44
   \   00000448   B807C7E1           STRH     R0,[R7, #+120]
   \   0000044C   4E00A0E3           MOV      R0,#+78
   \   00000450   800F80E3           ORR      R0,R0,#0x200
   \   00000454   0AA080E0           ADD      R10,R0,R10
   \   00000458   0200A0E3           MOV      R0,#+2
   \   0000045C   01002DE9           PUSH     {R0}
   \   00000460   7D0F89E2           ADD      R0,R9,#+500
   \   00000464   01002DE9           PUSH     {R0}
   \   00000468   F000D8E1           LDRSH    R0,[R8, #+0]
   \   0000046C   1120A0E3           MOV      R2,#+17
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   01002DE9           PUSH     {R0}
   \   00000478   240095E5           LDR      R0,[R5, #+36]
   \   0000047C   023040E2           SUB      R3,R0,#+2
   \   00000480   B600A0E3           MOV      R0,#+182
   \   00000484   ........           _BLF     CHECKBOX_Create,??CHECKBOX_Create??rA
   \   00000488   B807CAE1           STRH     R0,[R10, #+120]
   \   0000048C   F000D8E1           LDRSH    R0,[R8, #+0]
   \   00000490   961F89E2           ADD      R1,R9,#+600
   \   00000494   ........           _BLF     WM_SetId,??WM_SetId??rA
   \   00000498   0C009DE5           LDR      R0,[SP, #+12]
   \   0000049C   5801D0E5           LDRB     R0,[R0, #+344]
   \   000004A0   0CD08DE2           ADD      SP,SP,#+12
   \   000004A4   000050E3           CMP      R0,#+0
   \   000004A8   0100000A           BEQ      ??TDUWaterIngressWin_9
   \   000004AC   F807DAE1           LDRSH    R0,[R10, #+120]
   \   000004B0   ........           _BLF     WM_DisableWindow,??WM_DisableWindow??rA
   \                     ??TDUWaterIngressWin_9:
   \   000004B4   ........           LDR      R9,??DataTable4  ;; TDU_FONT_PW
   \   000004B8   0200A0E3           MOV      R0,#+2
   \   000004BC   01002DE9           PUSH     {R0}
   \   000004C0   640F86E2           ADD      R0,R6,#+400
   \   000004C4   01002DE9           PUSH     {R0}
   \   000004C8   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000004CC   1120A0E3           MOV      R2,#+17
   \   000004D0   0110A0E3           MOV      R1,#+1
   \   000004D4   01002DE9           PUSH     {R0}
   \   000004D8   240095E5           LDR      R0,[R5, #+36]
   \   000004DC   023040E2           SUB      R3,R0,#+2
   \   000004E0   DA00A0E3           MOV      R0,#+218
   \   000004E4   ........           _BLF     CHECKBOX_Create,??CHECKBOX_Create??rA
   \   000004E8   B00FCAE1           STRH     R0,[R10, #+240]
   \   000004EC   0100A0E3           MOV      R0,#+1
   \   000004F0   01002DE9           PUSH     {R0}
   \   000004F4   00082DE9           PUSH     {R11}
   \   000004F8   0200A0E3           MOV      R0,#+2
   \   000004FC   01002DE9           PUSH     {R0}
   \   00000500   7D0F86E2           ADD      R0,R6,#+500
   \   00000504   01002DE9           PUSH     {R0}
   \   00000508   F000D8E1           LDRSH    R0,[R8, #+0]
   \   0000050C   2420A0E3           MOV      R2,#+36
   \   00000510   0110A0E3           MOV      R1,#+1
   \   00000514   01002DE9           PUSH     {R0}
   \   00000518   240095E5           LDR      R0,[R5, #+36]
   \   0000051C   023040E2           SUB      R3,R0,#+2
   \   00000520   F400A0E3           MOV      R0,#+244
   \   00000524   ........           _BLF     TEXT_CreateAsChild,??TEXT_CreateAsChild??rA
   \   00000528   B000CAE1           STRH     R0,[R10, #+0]
   \   0000052C   F20FD8E1           LDRSH    R0,[R8, #+242]
   \   00000530   0010A0E3           MOV      R1,#+0
   \   00000534   ........           _BLF     TEXT_SetTextColor,??TEXT_SetTextColor??rA
   \   00000538   F20FD8E1           LDRSH    R0,[R8, #+242]
   \   0000053C   0910A0E1           MOV      R1,R9
   \   00000540   ........           _BLF     TEXT_SetFont,??TEXT_SetFont??rA
   \   00000544   FA07D8E1           LDRSH    R0,[R8, #+122]
   \   00000548   0910A0E1           MOV      R1,R9
   \   0000054C   FF84E0E3           MVN      R8,#-16777216
   \   00000550   ........           _BLF     TEXT_SetFont,??TEXT_SetFont??rA
   \   00000554   F000D7E1           LDRSH    R0,[R7, #+0]
   \   00000558   0910A0E1           MOV      R1,R9
   \   0000055C   ........           _BLF     BUTTON_SetFont,??BUTTON_SetFont??rA
   \   00000560   F000D7E1           LDRSH    R0,[R7, #+0]
   \   00000564   AA2CA0E3           MOV      R2,#+43520
   \   00000568   0010A0E3           MOV      R1,#+0
   \   0000056C   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000570   DB10A0E3           MOV      R1,#+219
   \   00000574   401F81E3           ORR      R1,R1,#0x100
   \   00000578   24008DE2           ADD      R0,SP,#+36
   \   0000057C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000580   3C009DE5           LDR      R0,[SP, #+60]
   \   00000584   20D08DE2           ADD      SP,SP,#+32
   \   00000588   100050E3           CMP      R0,#+16
   \   0000058C   F000D7E1           LDRSH    R0,[R7, #+0]
   \   00000590   08109D25           LDRCS    R1,[SP, #+8]
   \   00000594   08108D32           ADDCC    R1,SP,#+8
   \   00000598   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   04008DE2           ADD      R0,SP,#+4
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005AC   F000D7E1           LDRSH    R0,[R7, #+0]
   \   000005B0   0820A0E1           MOV      R2,R8
   \   000005B4   0010A0E3           MOV      R1,#+0
   \   000005B8   ........           _BLF     BUTTON_SetTextColor,??BUTTON_SetTextColor??rA
   \   000005BC   F807D7E1           LDRSH    R0,[R7, #+120]
   \   000005C0   0910A0E1           MOV      R1,R9
   \   000005C4   ........           _BLF     BUTTON_SetFont,??BUTTON_SetFont??rA
   \   000005C8   F807D7E1           LDRSH    R0,[R7, #+120]
   \   000005CC   AA2CA0E3           MOV      R2,#+43520
   \   000005D0   0010A0E3           MOV      R1,#+0
   \   000005D4   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   000005D8   771FA0E3           MOV      R1,#+476
   \   000005DC   20008DE2           ADD      R0,SP,#+32
   \   000005E0   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000005E4   38009DE5           LDR      R0,[SP, #+56]
   \   000005E8   100050E3           CMP      R0,#+16
   \   000005EC   F807D7E1           LDRSH    R0,[R7, #+120]
   \   000005F0   24109D25           LDRCS    R1,[SP, #+36]
   \   000005F4   24108D32           ADDCC    R1,SP,#+36
   \   000005F8   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
   \   000005FC   0020A0E3           MOV      R2,#+0
   \   00000600   0110A0E3           MOV      R1,#+1
   \   00000604   20008DE2           ADD      R0,SP,#+32
   \   00000608   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000060C   F807D7E1           LDRSH    R0,[R7, #+120]
   \   00000610   0820A0E1           MOV      R2,R8
   \   00000614   0010A0E3           MOV      R1,#+0
   \   00000618   ........           _BLF     BUTTON_SetTextColor,??BUTTON_SetTextColor??rA
   \   0000061C   0020A0E3           MOV      R2,#+0
   \   00000620   0110A0E3           MOV      R1,#+1
   \   00000624   3C008DE2           ADD      R0,SP,#+60
   \   00000628   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000062C   1EFFFFEA           B        ??TDUWaterIngressWin_8
   \                     ??TDUWaterIngressWin_1:
   \   00000630   00000000           DC8      "",+0,+0,+0
   \   00000634   ........           DC32     `?<Constant {{468, 14, 6}, {74, 74, 6}, {475, 4`
   \   00000638   ........           DC32     ??ObjVector + 4
   \   0000063C   398EE338           DC32     0x38e38e39
   \   00000640   ........           DC32     ??cbWin0
   \   00000644   ........           DC32     ??cbWin1
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          void TDUWaterIngressWin::SetButton(void)
    159          {
   \                     ??SetButton:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    160              bool Enable[NUMBER_OF_BUTTONS]={
    161                  (bool)(PageCount>1),
    162                  (bool)(PageCount>1),
    163                  false,
    164                  false,
    165                  false
    166              };
    167              ButWindow->EnableButtons(Enable);
   \   00000004   7C509FE5           LDR      R5,??SetButton_1  ;; ButWindow
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   060080E8           STM      R0,{R1,R2}
   \   00000020   480094E5           LDR      R0,[R4, #+72]
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   020050E3           CMP      R0,#+2
   \   0000002C   0120A0A3           MOVGE    R2,#+1
   \   00000030   020050E3           CMP      R0,#+2
   \   00000034   000095E5           LDR      R0,[R5, #+0]
   \   00000038   0020CDE5           STRB     R2,[SP, #+0]
   \   0000003C   0010A0B3           MOVLT    R1,#+0
   \   00000040   0110CDE5           STRB     R1,[SP, #+1]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   ........           _BLF     ??EnableButtons,??EnableButtons??rA
    168          
    169              ButWindow->ChangeButtonText(L_WORD87,L_WORD88,L_WORD237,L_WORD237,L_WORD237);
   \   0000004C   ED00A0E3           MOV      R0,#+237
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   000095E5           LDR      R0,[R5, #+0]
   \   0000005C   ED30A0E3           MOV      R3,#+237
   \   00000060   5820A0E3           MOV      R2,#+88
   \   00000064   5710A0E3           MOV      R1,#+87
   \   00000068   ........           _BLF     ??ChangeButtonText,??ChangeButtonText??rA
    170              Paintnew();
   \   0000006C   441094E5           LDR      R1,[R4, #+68]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   041091E5           LDR      R1,[R1, #+4]
   \   00000078   0FE0A0E1           MOV      LR,PC
   \   0000007C   11FF2FE1           BX       R1
    171          }
   \   00000080   3F40BDE8           POP      {R0-R5,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   \                     ??SetButton_1:
   \   00000088   ........           DC32     ButWindow
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          void TDUWaterIngressWin::PWTimer(void)
    174          {
   \                     ??PWTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    175              if ( !PROWaterIngress::ObjVector.empty() ) {
   \   00000008   ........           LDR      R0,??DataTable8  ;; ??ObjVector
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000041E0           SUB      R0,R1,R0
   \   00000018   2001B0E1           LSRS     R0,R0,#+2
   \   0000001C   0700000A           BEQ      ??PWTimer_1
    176                  Paintnew();
   \   00000020   441094E5           LDR      R1,[R4, #+68]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   041091E5           LDR      R1,[R1, #+4]
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   11FF2FE1           BX       R1
    177                  UpdateFields(true);
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??UpdateFields,??UpdateFields??rA
    178              }
    179          }
   \                     ??PWTimer_1:
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
    180          

   \                                 In segment CODE, align 4, keep-with-next
    181          void TDUWaterIngressWin::Paintnew(void)
    182          {
   \                     ??Paintnew:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    183              if ( !PROWaterIngress::ObjVector.empty() ) {
   \   00000004   ........           LDR      R4,??DataTable6  ;; ??ObjVector
   \   00000008   58D04DE2           SUB      SP,SP,#+88
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   001094E5           LDR      R1,[R4, #+0]
   \   00000014   010040E0           SUB      R0,R0,R1
   \   00000018   2001B0E1           LSRS     R0,R0,#+2
   \   0000001C   0400000A           BEQ      ??Paintnew_1
    184                  int ListSize = PROWaterIngress::ObjVector.size();
    185                  for ( int index=0; index<ListSize; index++ ) {
   \   00000020   98B49FE5           LDR      R11,??Paintnew_2+0xC  ;; 0x808080
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   0050A0E3           MOV      R5,#+0
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   0D0000AA           BGE      ??Paintnew_3
    186                      PROWaterIngress *TElement = (PROWaterIngress*)PROWaterIngress::ObjVector[index];
    187                      if ( TElement ) {
    188                          AnsiString str;
    189                          //str = LibGetValue(SVT_PRO_NAME, TElement);
    190                          //TEXT_SetText(NameText[index],str.c_str());
    191                          str = LibGetValue(SVT_PRO_STATUS, TElement);
    192                          int color = TextColor;
    193                          if ( (!str.compare("A")) || (!str.compare("E")) )   color = TDU_C_AL_BACK_ACTIVE;
    194                          if ( !str.compare("W") ) color = TDU_C_AL_BACK_WARNING;
    195                          TEXT_SetTextColor(StatusText[index]  ,color);
    196                          TEXT_SetText(StatusText[index],str.c_str());
    197                          str = LibGetValue(SVT_TEMP, TElement);
    198                          TEXT_SetText(TempText[index],str.c_str());
    199                          //main alarm
    200                          if ( TElement->MainWaterIngrSensor ) {
    201                              switch ( TElement->MainWaterIngressPtr->State ) {
    202                              case AlarmBasic::AlActive:
    203                                  // Let us blink
    204                                  if ( BUTTON_GetBkColor(  MainButton[index], 0)!=TDU_C_AL_BACK_ACTIVE ) {
    205                                      BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_BACK_ACTIVE);
    206                                      BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_TEXT_ACTIVE);
    207                                  } else {
    208                                      BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_TEXT_ACTIVE);
    209                                      BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_BACK_ACTIVE);
    210                                  }
    211                                  break;
    212                              case AlarmBasic::AlAknowledged:
    213                                  if ( BUTTON_GetBkColor(  MainButton[index], 0)!=TDU_C_AL_BACK_ACTIVE ) {
    214                                      BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_BACK_ACTIVE);
    215                                      BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_TEXT_ACTIVE);
    216                                  }
    217                                  break;
    218                              case AlarmBasic::AlIdle:
    219                              default:
    220                                  if ( TElement->Override ) {
    221                                      if ( BUTTON_GetBkColor(  MainButton[index], 0)!=TDU_C_AL_BACK_WARNING ) {
    222                                          BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_BACK_WARNING);
    223                                          BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_TEXT_WARNING);
    224                                      }
    225                                  } else if ( BUTTON_GetBkColor(  MainButton[index], 0)!=TDU_C_AL_BACK_NOAL ) {
    226                                      BUTTON_SetBkColor(  MainButton[index], 0, TDU_C_AL_BACK_NOAL);
    227                                      BUTTON_SetTextColor(MainButton[index], 0, TDU_C_AL_TEXT_NOAL);
    228                                  }
    229                                  break;
    230                              }
    231                          } else {
    232                              if ( BUTTON_GetBkColor(  MainButton[index], 0)!=TDU_C_BU_BACK ) {
    233                                  WM_HideWindow(MainButton[index]);
    234                                  BUTTON_SetBkColor(  MainButton[index],  0, TDU_C_BU_BACK);
    235                                  BUTTON_SetTextColor(MainButton[index],  0, TDU_C_BU_TEXT);
    236                              }
    237                          }
    238                          //pre alarm
    239                          if ( TElement->PreWaterIngrSensor ) {
    240                              switch ( TElement->PreWaterIngressPtr->State ) {
    241                              case AlarmBasic::AlActive:
    242                                  // Let us blink
    243                                  if ( BUTTON_GetBkColor(  PreButton[index], 0)!=TDU_C_AL_BACK_ACTIVE ) {
    244                                      BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_AL_BACK_ACTIVE);
    245                                      BUTTON_SetTextColor(PreButton[index],  0, TDU_C_AL_TEXT_ACTIVE);
    246                                  } else {
    247                                      BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_AL_TEXT_ACTIVE);
    248                                      BUTTON_SetTextColor(PreButton[index],  0, TDU_C_AL_BACK_ACTIVE);
    249                                  }
    250                                  break;
    251                              case AlarmBasic::AlAknowledged:
    252                                  if ( BUTTON_GetBkColor(  PreButton[index], 0)!=TDU_C_AL_BACK_ACTIVE ) {
    253                                      BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_AL_BACK_ACTIVE);
    254                                      BUTTON_SetTextColor(PreButton[index],  0, TDU_C_AL_TEXT_ACTIVE);
    255                                  }
    256                                  break;
    257                              case AlarmBasic::AlIdle:
    258                              default:
    259                                  if ( TElement->Override ) {
    260                                      if ( BUTTON_GetBkColor(  PreButton[index], 0)!=TDU_C_AL_BACK_WARNING ) {
    261                                          BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_AL_BACK_WARNING);
    262                                          BUTTON_SetTextColor(PreButton[index],  0, TDU_C_AL_TEXT_WARNING);
    263                                      }
    264                                  } else if ( BUTTON_GetBkColor(  PreButton[index], 0)!=TDU_C_AL_BACK_NOAL ) {
    265                                      BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_AL_BACK_NOAL);
    266                                      BUTTON_SetTextColor(PreButton[index],  0, TDU_C_AL_TEXT_NOAL);
    267                                  }
    268                                  break;
    269                              }
    270                          } else {
    271                              if ( BUTTON_GetBkColor(  PreButton[index], 0)!=TDU_C_BU_BACK ) {
    272                                  WM_HideWindow(PreButton[index]);
    273                                  BUTTON_SetBkColor(  PreButton[index],  0, TDU_C_BU_BACK);
    274                                  BUTTON_SetTextColor(PreButton[index],  0, TDU_C_BU_TEXT);
    275                              }
    276                          }
    277                          if ( !TElement->DisableOverride ) {
    278                              if ( TElement->Override ) {
    279                                  if ( !CHECKBOX_IsChecked(OverChBox[index]) )
    280                                      CHECKBOX_Check(OverChBox[index]);
    281                              } else {
    282                                  if ( CHECKBOX_IsChecked(OverChBox[index]) )
    283                                      CHECKBOX_Uncheck(OverChBox[index]);
    284                              }
    285                          }
    286                          if ( TElement->HasProtection ) {
    287                              if ( !CHECKBOX_IsChecked(ProtChBox[index]) )
    288                                  CHECKBOX_Check(ProtChBox[index]);
    289                          } else {
    290                              if ( CHECKBOX_IsChecked(ProtChBox[index]) )
    291                                  CHECKBOX_Uncheck(ProtChBox[index]);
    292                          }
    293                      }
    294                  }
    295              }
    296          }
   \                     ??Paintnew_1:
   \   00000034   5CD08DE2           ADD      SP,SP,#+92
   \   00000038   F04FBDE8           POP      {R4-R11,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
   \                     ??Paintnew_4:
   \   00000040   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Paintnew_5
   \   0000004C   0010A0E3           MOV      R1,#+0
   \                     ??Paintnew_6:
   \   00000050   F00FD7E1           LDRSH    R0,[R7, #+240]
   \   00000054   ........           _BLF     CHECKBOX_SetState,??CHECKBOX_SetState??rA
   \                     ??Paintnew_5:
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??Paintnew_7:
   \   00000068   015085E2           ADD      R5,R5,#+1
   \                     ??Paintnew_3:
   \   0000006C   00009DE5           LDR      R0,[SP, #+0]
   \   00000070   000055E1           CMP      R5,R0
   \   00000074   EEFFFFAA           BGE      ??Paintnew_1
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   056190E7           LDR      R6,[R0, +R5, LSL #+2]
   \   00000080   000056E3           CMP      R6,#+0
   \   00000084   F7FFFF0A           BEQ      ??Paintnew_7
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   0620A0E1           MOV      R2,R6
   \   00000098   1910A0E3           MOV      R1,#+25
   \   0000009C   501E81E3           ORR      R1,R1,#0x500
   \   000000A0   20008DE2           ADD      R0,SP,#+32
   \   000000A4   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   000000A8   14049FE5           LDR      R0,??Paintnew_2+0x10  ;; ??npos
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   007090E5           LDR      R7,[R0, #+0]
   \   000000B4   20108DE2           ADD      R1,SP,#+32
   \   000000B8   0730A0E1           MOV      R3,R7
   \   000000BC   04008DE2           ADD      R0,SP,#+4
   \   000000C0   ........           _BLF     ??assign,??assign??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   20008DE2           ADD      R0,SP,#+32
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   EC039FE5           LDR      R0,??Paintnew_2+0x14  ;; TextColor
   \   000000D8   F58F8FE2           ADR      R8,??Paintnew_2  ;; "A"
   \   000000DC   009090E5           LDR      R9,[R0, #+0]
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   ........           _BLF     strlen,??strlen??rA
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   1C209DE5           LDR      R2,[SP, #+28]
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   08008DE2           ADD      R0,SP,#+8
   \   000000FC   ........           _BLF     ??compare,??compare??rA
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   04D08DE2           ADD      SP,SP,#+4
   \   00000108   0B00000A           BEQ      ??Paintnew_8
   \   0000010C   E98F8FE2           ADR      R8,??Paintnew_2+0x4  ;; "E"
   \   00000110   0800A0E1           MOV      R0,R8
   \   00000114   ........           _BLF     strlen,??strlen??rA
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   1C209DE5           LDR      R2,[SP, #+28]
   \   00000120   0830A0E1           MOV      R3,R8
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   08008DE2           ADD      R0,SP,#+8
   \   0000012C   ........           _BLF     ??compare,??compare??rA
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   04D08DE2           ADD      SP,SP,#+4
   \   00000138   0000001A           BNE      ??Paintnew_9
   \                     ??Paintnew_8:
   \   0000013C   FF90A0E3           MOV      R9,#+255
   \                     ??Paintnew_9:
   \   00000140   DDAF8FE2           ADR      R10,??Paintnew_2+0x8  ;; "W"
   \   00000144   0A00A0E1           MOV      R0,R10
   \   00000148   ........           _BLF     strlen,??strlen??rA
   \   0000014C   01002DE9           PUSH     {R0}
   \   00000150   1C209DE5           LDR      R2,[SP, #+28]
   \   00000154   0A30A0E1           MOV      R3,R10
   \   00000158   0010A0E3           MOV      R1,#+0
   \   0000015C   08008DE2           ADD      R0,SP,#+8
   \   00000160   ........           _BLF     ??compare,??compare??rA
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   04D08DE2           ADD      SP,SP,#+4
   \   0000016C   58009DE5           LDR      R0,[SP, #+88]
   \   00000170   FF80A0E3           MOV      R8,#+255
   \   00000174   85A080E0           ADD      R10,R0,R5, LSL #+1
   \   00000178   F60EDAE1           LDRSH    R0,[R10, #+230]
   \   0000017C   FF8C88E3           ORR      R8,R8,#0xFF00
   \   00000180   0890A001           MOVEQ    R9,R8
   \   00000184   0910A0E1           MOV      R1,R9
   \   00000188   ........           _BLF     TEXT_SetTextColor,??TEXT_SetTextColor??rA
   \   0000018C   1C009DE5           LDR      R0,[SP, #+28]
   \   00000190   100050E3           CMP      R0,#+16
   \   00000194   F60EDAE1           LDRSH    R0,[R10, #+230]
   \   00000198   08109D25           LDRCS    R1,[SP, #+8]
   \   0000019C   08108D32           ADDCC    R1,SP,#+8
   \   000001A0   ........           _BLF     TEXT_SetText,??TEXT_SetText??rA
   \   000001A4   0030A0E3           MOV      R3,#+0
   \   000001A8   0620A0E1           MOV      R2,R6
   \   000001AC   FB1FA0E3           MOV      R1,#+1004
   \   000001B0   3C008DE2           ADD      R0,SP,#+60
   \   000001B4   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   000001B8   0730A0E1           MOV      R3,R7
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   3C108DE2           ADD      R1,SP,#+60
   \   000001C4   04008DE2           ADD      R0,SP,#+4
   \   000001C8   ........           _BLF     ??assign,??assign??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   3C008DE2           ADD      R0,SP,#+60
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   1C009DE5           LDR      R0,[SP, #+28]
   \   000001E0   100050E3           CMP      R0,#+16
   \   000001E4   08109D25           LDRCS    R1,[SP, #+8]
   \   000001E8   4E00A0E3           MOV      R0,#+78
   \   000001EC   800F80E3           ORR      R0,R0,#0x200
   \   000001F0   0A7080E0           ADD      R7,R0,R10
   \   000001F4   F000D7E1           LDRSH    R0,[R7, #+0]
   \   000001F8   08108D32           ADDCC    R1,SP,#+8
   \   000001FC   ........           _BLF     TEXT_SetText,??TEXT_SetText??rA
   \   00000200   B600A0E3           MOV      R0,#+182
   \   00000204   C00F80E3           ORR      R0,R0,#0x300
   \   00000208   0A9080E0           ADD      R9,R0,R10
   \   0000020C   640196E5           LDR      R0,[R6, #+356]
   \   00000210   FFA888E3           ORR      R10,R8,#0xFF0000
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   3400000A           BEQ      ??Paintnew_10
   \   0000021C   6C0196E5           LDR      R0,[R6, #+364]
   \   00000220   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000224   010050E2           SUBS     R0,R0,#+1
   \   00000228   0200000A           BEQ      ??Paintnew_11
   \   0000022C   010050E2           SUBS     R0,R0,#+1
   \   00000230   1100000A           BEQ      ??Paintnew_12
   \   00000234   160000EA           B        ??Paintnew_13
   \                     ??Paintnew_11:
   \   00000238   F000D9E1           LDRSH    R0,[R9, #+0]
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000244   FF0050E3           CMP      R0,#+255
   \   00000248   0500000A           BEQ      ??Paintnew_14
   \                     ??Paintnew_15:
   \   0000024C   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000250   FF20A0E3           MOV      R2,#+255
   \   00000254   0010A0E3           MOV      R1,#+0
   \   00000258   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   0000025C   0A20A0E1           MOV      R2,R10
   \   00000260   2E0000EA           B        ??Paintnew_16
   \                     ??Paintnew_14:
   \   00000264   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000268   0A20A0E1           MOV      R2,R10
   \   0000026C   0010A0E3           MOV      R1,#+0
   \   00000270   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000274   FF20A0E3           MOV      R2,#+255
   \   00000278   280000EA           B        ??Paintnew_16
   \                     ??Paintnew_12:
   \   0000027C   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000280   0010A0E3           MOV      R1,#+0
   \   00000284   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000288   FF0050E3           CMP      R0,#+255
   \   0000028C   EEFFFF1A           BNE      ??Paintnew_15
   \   00000290   250000EA           B        ??Paintnew_17
   \                     ??Paintnew_13:
   \   00000294   6001D6E5           LDRB     R0,[R6, #+352]
   \   00000298   0010A0E3           MOV      R1,#+0
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   F000D9E1           LDRSH    R0,[R9, #+0]
   \   000002A4   0800000A           BEQ      ??Paintnew_18
   \   000002A8   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000002AC   080050E1           CMP      R0,R8
   \   000002B0   1D00000A           BEQ      ??Paintnew_17
   \   000002B4   F000D9E1           LDRSH    R0,[R9, #+0]
   \   000002B8   0820A0E1           MOV      R2,R8
   \   000002BC   0010A0E3           MOV      R1,#+0
   \   000002C0   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   000002C4   0020A0E3           MOV      R2,#+0
   \   000002C8   140000EA           B        ??Paintnew_16
   \                     ??Paintnew_18:
   \   000002CC   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000002D0   AA0C50E3           CMP      R0,#+43520
   \   000002D4   1400000A           BEQ      ??Paintnew_17
   \   000002D8   F000D9E1           LDRSH    R0,[R9, #+0]
   \   000002DC   AA2CA0E3           MOV      R2,#+43520
   \   000002E0   0010A0E3           MOV      R1,#+0
   \   000002E4   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   000002E8   0A20A0E1           MOV      R2,R10
   \   000002EC   0B0000EA           B        ??Paintnew_16
   \                     ??Paintnew_10:
   \   000002F0   F000D9E1           LDRSH    R0,[R9, #+0]
   \   000002F4   0010A0E3           MOV      R1,#+0
   \   000002F8   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000002FC   0B0050E1           CMP      R0,R11
   \   00000300   0900000A           BEQ      ??Paintnew_17
   \   00000304   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000308   ........           _BLF     WM_HideWindow,??WM_HideWindow??rA
   \   0000030C   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000310   0B20A0E1           MOV      R2,R11
   \   00000314   0010A0E3           MOV      R1,#+0
   \   00000318   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \                     ??Paintnew_16:
   \   00000320   0010A0E3           MOV      R1,#+0
   \   00000324   F000D9E1           LDRSH    R0,[R9, #+0]
   \   00000328   ........           _BLF     BUTTON_SetTextColor,??BUTTON_SetTextColor??rA
   \                     ??Paintnew_17:
   \   0000032C   680196E5           LDR      R0,[R6, #+360]
   \   00000330   000050E3           CMP      R0,#+0
   \   00000334   3400000A           BEQ      ??Paintnew_19
   \   00000338   700196E5           LDR      R0,[R6, #+368]
   \   0000033C   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000340   010050E2           SUBS     R0,R0,#+1
   \   00000344   0200000A           BEQ      ??Paintnew_20
   \   00000348   010050E2           SUBS     R0,R0,#+1
   \   0000034C   1100000A           BEQ      ??Paintnew_21
   \   00000350   160000EA           B        ??Paintnew_22
   \                     ??Paintnew_20:
   \   00000354   F807D9E1           LDRSH    R0,[R9, #+120]
   \   00000358   0010A0E3           MOV      R1,#+0
   \   0000035C   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000360   FF0050E3           CMP      R0,#+255
   \   00000364   0500000A           BEQ      ??Paintnew_23
   \                     ??Paintnew_24:
   \   00000368   F807D9E1           LDRSH    R0,[R9, #+120]
   \   0000036C   FF20A0E3           MOV      R2,#+255
   \   00000370   0010A0E3           MOV      R1,#+0
   \   00000374   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000378   0A20A0E1           MOV      R2,R10
   \   0000037C   2E0000EA           B        ??Paintnew_25
   \                     ??Paintnew_23:
   \   00000380   F807D9E1           LDRSH    R0,[R9, #+120]
   \   00000384   0A20A0E1           MOV      R2,R10
   \   00000388   0010A0E3           MOV      R1,#+0
   \   0000038C   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000390   FF20A0E3           MOV      R2,#+255
   \   00000394   280000EA           B        ??Paintnew_25
   \                     ??Paintnew_21:
   \   00000398   F807D9E1           LDRSH    R0,[R9, #+120]
   \   0000039C   0010A0E3           MOV      R1,#+0
   \   000003A0   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000003A4   FF0050E3           CMP      R0,#+255
   \   000003A8   EEFFFF1A           BNE      ??Paintnew_24
   \   000003AC   250000EA           B        ??Paintnew_26
   \                     ??Paintnew_22:
   \   000003B0   6001D6E5           LDRB     R0,[R6, #+352]
   \   000003B4   0010A0E3           MOV      R1,#+0
   \   000003B8   000050E3           CMP      R0,#+0
   \   000003BC   F807D9E1           LDRSH    R0,[R9, #+120]
   \   000003C0   0800000A           BEQ      ??Paintnew_27
   \   000003C4   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000003C8   080050E1           CMP      R0,R8
   \   000003CC   1D00000A           BEQ      ??Paintnew_26
   \   000003D0   F807D9E1           LDRSH    R0,[R9, #+120]
   \   000003D4   0820A0E1           MOV      R2,R8
   \   000003D8   0010A0E3           MOV      R1,#+0
   \   000003DC   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   140000EA           B        ??Paintnew_25
   \                     ??Paintnew_27:
   \   000003E8   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000003EC   AA0C50E3           CMP      R0,#+43520
   \   000003F0   1400000A           BEQ      ??Paintnew_26
   \   000003F4   F807D9E1           LDRSH    R0,[R9, #+120]
   \   000003F8   AA2CA0E3           MOV      R2,#+43520
   \   000003FC   0010A0E3           MOV      R1,#+0
   \   00000400   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000404   0A20A0E1           MOV      R2,R10
   \   00000408   0B0000EA           B        ??Paintnew_25
   \                     ??Paintnew_19:
   \   0000040C   F807D9E1           LDRSH    R0,[R9, #+120]
   \   00000410   0010A0E3           MOV      R1,#+0
   \   00000414   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000418   0B0050E1           CMP      R0,R11
   \   0000041C   0900000A           BEQ      ??Paintnew_26
   \   00000420   F807D9E1           LDRSH    R0,[R9, #+120]
   \   00000424   ........           _BLF     WM_HideWindow,??WM_HideWindow??rA
   \   00000428   F807D9E1           LDRSH    R0,[R9, #+120]
   \   0000042C   0B20A0E1           MOV      R2,R11
   \   00000430   0010A0E3           MOV      R1,#+0
   \   00000434   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
   \   00000438   0020A0E3           MOV      R2,#+0
   \                     ??Paintnew_25:
   \   0000043C   0010A0E3           MOV      R1,#+0
   \   00000440   F807D9E1           LDRSH    R0,[R9, #+120]
   \   00000444   ........           _BLF     BUTTON_SetTextColor,??BUTTON_SetTextColor??rA
   \                     ??Paintnew_26:
   \   00000448   5801D6E5           LDRB     R0,[R6, #+344]
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   0E00001A           BNE      ??Paintnew_28
   \   00000454   6001D6E5           LDRB     R0,[R6, #+352]
   \   00000458   000050E3           CMP      R0,#+0
   \   0000045C   F807D7E1           LDRSH    R0,[R7, #+120]
   \   00000460   0400000A           BEQ      ??Paintnew_29
   \   00000464   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   00000468   000050E3           CMP      R0,#+0
   \   0000046C   0700001A           BNE      ??Paintnew_28
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   030000EA           B        ??Paintnew_30
   \                     ??Paintnew_29:
   \   00000478   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   0000047C   000050E3           CMP      R0,#+0
   \   00000480   0200000A           BEQ      ??Paintnew_28
   \   00000484   0010A0E3           MOV      R1,#+0
   \                     ??Paintnew_30:
   \   00000488   F807D7E1           LDRSH    R0,[R7, #+120]
   \   0000048C   ........           _BLF     CHECKBOX_SetState,??CHECKBOX_SetState??rA
   \                     ??Paintnew_28:
   \   00000490   6101D6E5           LDRB     R0,[R6, #+353]
   \   00000494   000050E3           CMP      R0,#+0
   \   00000498   F00FD7E1           LDRSH    R0,[R7, #+240]
   \   0000049C   E7FEFF0A           BEQ      ??Paintnew_4
   \   000004A0   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   000004A4   000050E3           CMP      R0,#+0
   \   000004A8   EAFEFF1A           BNE      ??Paintnew_5
   \   000004AC   0110A0E3           MOV      R1,#+1
   \   000004B0   E6FEFFEA           B        ??Paintnew_6
   \                     ??Paintnew_2:
   \   000004B4   41000000           DC8      "A",+0,+0
   \   000004B8   45000000           DC8      "E",+0,+0
   \   000004BC   57000000           DC8      "W",+0,+0
   \   000004C0   80808000           DC32     0x808080
   \   000004C4   ........           DC32     ??npos
   \   000004C8   ........           DC32     TextColor
    297          

   \                                 In segment CODE, align 4, keep-with-next
    298          void TDUWaterIngressWin::MoveWin(void)
    299          {
   \                     ??MoveWin:
   \   00000000   00402DE9           PUSH     {LR}
    300              int extra = 0;
    301              int Y = 0;
    302              if ( ((CurrentPage+1)==PageCount) && NumberOfUnitsLastPage ) {
   \   00000004   4C2090E5           LDR      R2,[R0, #+76]
   \   00000008   48C090E5           LDR      R12,[R0, #+72]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   013082E2           ADD      R3,R2,#+1
   \   00000014   0C0053E1           CMP      R3,R12
   \   00000018   0400001A           BNE      ??MoveWin_1
   \   0000001C   543090E5           LDR      R3,[R0, #+84]
   \   00000020   000053E3           CMP      R3,#+0
    303                  extra = (NumUnitsOnPage-NumberOfUnitsLastPage)*LineHeight;
   \   00000024   09106312           RSBNE    R1,R3,#+9
   \   00000028   58309015           LDRNE    R3,[R0, #+88]
   \   0000002C   93010110           MULNE    R1,R3,R1
    304              }
    305              Y = -(CurrentPage*PageSize-extra)+StartY;
    306              // if(Y==0) Y=StartY;
    307          //  WM_MoveWindow(MainWinHandl, StartX, Y);
    308              WM_MoveChildTo(MainWinHandl, StartX, Y);
   \                     ??MoveWin_1:
   \   00000030   643090E5           LDR      R3,[R0, #+100]
   \   00000034   930202E0           MUL      R2,R3,R2
   \   00000038   021041E0           SUB      R1,R1,R2
   \   0000003C   602090E5           LDR      R2,[R0, #+96]
   \   00000040   012082E0           ADD      R2,R2,R1
   \   00000044   5C1090E5           LDR      R1,[R0, #+92]
   \   00000048   FA06D0E1           LDRSH    R0,[R0, #+106]
   \   0000004C   ........           _BLF     WM_MoveChildTo,??WM_MoveChildTo??rA
    309          }
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          void TDUWaterIngressWin::ButtonClicked(int ButtID)
    312          {
    313              if ( !PROWaterIngress::ObjVector.empty() ) {
   \                     ??ButtonClicked:
   \   00000000   ........           LDR      R2,??DataTable8  ;; ??ObjVector
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   043092E5           LDR      R3,[R2, #+4]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   022043E0           SUB      R2,R3,R2
   \   00000014   2221B0E1           LSRS     R2,R2,#+2
   \   00000018   0D00000A           BEQ      ??ButtonClicked_1
    314                  switch ( ButtID ) {
   \   0000001C   4C2090E5           LDR      R2,[R0, #+76]
   \   00000020   D130A0E3           MOV      R3,#+209
   \   00000024   803E83E3           ORR      R3,R3,#0x800
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   0300000A           BEQ      ??ButtonClicked_2
   \   00000030   013083E2           ADD      R3,R3,#+1
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   0700000A           BEQ      ??ButtonClicked_3
   \   0000003C   040000EA           B        ??ButtonClicked_1
    315                  case TDU_BUTTON_ID_PW1:
    316                      if ( CurrentPage<=0 ) {
   \                     ??ButtonClicked_2:
   \   00000040   010052E3           CMP      R2,#+1
    317                          //	CurrentPage = PageCount-1;
    318                          CurrentPage = 0;
   \   00000044   0010A0B3           MOVLT    R1,#+0
    319                      } else {
    320                          CurrentPage--;
   \   00000048   011042A2           SUBGE    R1,R2,#+1
   \                     ??ButtonClicked_4:
   \   0000004C   4C1080E5           STR      R1,[R0, #+76]
    321                      }
    322                      MoveWin();
   \   00000050   ........           BL       ??MoveWin
    323                      break;
    324                  case TDU_BUTTON_ID_PW2:
    325                      if ( CurrentPage >= (PageCount-1) ) {
    326          //					CurrentPage = 0;
    327                          CurrentPage = (PageCount-1);
    328                      } else {
    329                          CurrentPage++;
    330                      }
    331                      MoveWin();
    332                      break;
    333                  case TDU_BUTTON_ID_PW3:
    334                      break;
    335                  case TDU_BUTTON_ID_PW4:
    336                      break;
    337                  case TDU_BUTTON_ID_PW5:
    338                      break;
    339                  }
    340              }
    341          }
   \                     ??ButtonClicked_1:
   \   00000054   0040BDE8           POP      {LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??ButtonClicked_3:
   \   0000005C   481090E5           LDR      R1,[R0, #+72]
   \   00000060   011041E2           SUB      R1,R1,#+1
   \   00000064   010052E1           CMP      R2,R1
   \   00000068   F7FFFFAA           BGE      ??ButtonClicked_4
   \   0000006C   011082E2           ADD      R1,R2,#+1
   \   00000070   F5FFFFEA           B        ??ButtonClicked_4
    342          

   \                                 In segment CODE, align 4, keep-with-next
    343          void TDUWaterIngressWin::UnitClicked(WM_HWIN hWin,int ButtID)
    344          {
   \                     ??UnitClicked:
   \   00000000   B04F2DE9           PUSH     {R4,R5,R7-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
    345          //	for(int i=0,j=hWin; i<NumberOfUnits && j<(hWin+NumberOfUnits*10); i++,j+=10)
    346          //		if(hWin+6 == MainButton[i])
    347              bool Found = false;
   \   00000010   0080A0E3           MOV      R8,#+0
    348              int index = 0;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    349              for ( int i=0; !Found && (i<NumberOfUnits); i++ ) {
   \   0000001C   0190A0E1           MOV      R9,R1
   \   00000020   0170A0E3           MOV      R7,#+1
   \   00000024   C6A0A0E3           MOV      R10,#+198
   \   00000028   80AF8AE3           ORR      R10,R10,#0x200
   \                     ??UnitClicked_1:
   \   0000002C   500094E5           LDR      R0,[R4, #+80]
   \   00000030   000059E1           CMP      R9,R0
   \   00000034   470000AA           BGE      ??UnitClicked_2
    350                  if ( ButtID == WM_GetId(OverChBox[i]) ) {
   \   00000038   890084E0           ADD      R0,R4,R9, LSL #+1
   \   0000003C   00B08AE0           ADD      R11,R10,R0
   \   00000040   F000DBE1           LDRSH    R0,[R11, #+0]
   \   00000044   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   00000048   000055E1           CMP      R5,R0
   \   0000004C   0200001A           BNE      ??UnitClicked_3
    351                      Found = true;
   \                     ??UnitClicked_4:
   \   00000050   0180A0E3           MOV      R8,#+1
    352                      index = i;
   \   00000054   00908DE5           STR      R9,[SP, #+0]
   \   00000058   030000EA           B        ??UnitClicked_5
    353                  } else if ( ButtID == WM_GetId(ProtChBox[i]) ) {
   \                     ??UnitClicked_3:
   \   0000005C   F807DBE1           LDRSH    R0,[R11, #+120]
   \   00000060   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   00000064   000055E1           CMP      R5,R0
   \   00000068   F8FFFF0A           BEQ      ??UnitClicked_4
    354                      Found = true;
    355                      index = i;
    356                  }
    357              }
   \                     ??UnitClicked_5:
   \   0000006C   019089E2           ADD      R9,R9,#+1
   \   00000070   000058E3           CMP      R8,#+0
   \   00000074   ECFFFF0A           BEQ      ??UnitClicked_1
    358              if ( Found ) {
    359                  CurrentWIPtr = (PROWaterIngress*)PROWaterIngress::ObjVector[index];
   \   00000078   ........           LDR      R1,??DataTable8  ;; ??ObjVector
   \   0000007C   00009DE5           LDR      R0,[SP, #+0]
   \   00000080   001091E5           LDR      R1,[R1, #+0]
   \   00000084   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000088   A80484E5           STR      R0,[R4, #+1192]
    360                  if ( ButtID == WM_GetId(OverChBox[index]) ) {
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   800084E0           ADD      R0,R4,R0, LSL #+1
   \   00000094   00808AE0           ADD      R8,R10,R0
   \   00000098   F000D8E1           LDRSH    R0,[R8, #+0]
   \   0000009C   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   000000A0   000055E1           CMP      R5,R0
   \   000000A4   1800001A           BNE      ??UnitClicked_6
    361                      if ( CHECKBOX_IsChecked(OverChBox[index]) ) {
   \   000000A8   F000D8E1           LDRSH    R0,[R8, #+0]
   \   000000AC   D550A0E3           MOV      R5,#+213
   \   000000B0   8C5D85E3           ORR      R5,R5,#0x2300
   \   000000B4   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0C00000A           BEQ      ??UnitClicked_7
    362                          LibPutValue( SVT_WI_OVERRIDE,CurrentWIPtr,"1");
   \   000000C0   271F8FE2           ADR      R1,??UnitClicked_8  ;; "1"
   \   000000C4   04008DE2           ADD      R0,SP,#+4
   \   000000C8   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000CC   0030A0E3           MOV      R3,#+0
   \   000000D0   0020A0E1           MOV      R2,R0
   \                     ??UnitClicked_9:
   \   000000D4   A81494E5           LDR      R1,[R4, #+1192]
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   04008DE2           ADD      R0,SP,#+4
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   180000EA           B        ??UnitClicked_2
    363                      } else {
    364                          LibPutValue( SVT_WI_OVERRIDE,CurrentWIPtr,"0");
   \                     ??UnitClicked_7:
   \   000000F4   1B1F8FE2           ADR      R1,??UnitClicked_8+0x4  ;; "0"
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000100   0020A0E1           MOV      R2,R0
   \   00000104   0030A0E3           MOV      R3,#+0
   \   00000108   F1FFFFEA           B        ??UnitClicked_9
    365                      }
    366                  } else if ( ButtID == WM_GetId(ProtChBox[index]) ) {
   \                     ??UnitClicked_6:
   \   0000010C   F807D8E1           LDRSH    R0,[R8, #+120]
   \   00000110   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   00000114   000055E1           CMP      R5,R0
   \   00000118   0E00001A           BNE      ??UnitClicked_2
    367                      ProtPlate = (bool)CHECKBOX_IsChecked(ProtChBox[index]);
   \   0000011C   F807D8E1           LDRSH    R0,[R8, #+120]
   \   00000120   ........           _BLF     CHECKBOX_IsChecked,??CHECKBOX_IsChecked??rA
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0070A003           MOVEQ    R7,#+0
   \   0000012C   AC74C4E5           STRB     R7,[R4, #+1196]
    368                      int Text2;
    369                      if ( ProtPlate ) {
    370                          Text2 =L_WORD662;       //"The protection plate must be installed on the sensor.";
    371                      } else {
    372                          Text2 = L_WORD662; //"The protection plate must be removed from the sensor.";
    373                      }
    374                      ConfirmMessageBox->Exec(WM_GetClientWindow(WinHandl), L_WORD144, Text2, ButtID); //"Protection plate!",
   \   00000130   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000134   ........           _BLF     WM_GetClientWindow,??WM_GetClientWindow??rA
   \   00000138   0010A0E1           MOV      R1,R0
   \   0000013C   28009FE5           LDR      R0,??UnitClicked_8+0x8  ;; ConfirmMessageBox
   \   00000140   20002DE9           PUSH     {R5}
   \   00000144   000090E5           LDR      R0,[R0, #+0]
   \   00000148   30304AE2           SUB      R3,R10,#+48
   \   0000014C   9020A0E3           MOV      R2,#+144
   \   00000150   ........           _BLF     ??Exec,??Exec??rA
   \   00000154   04D08DE2           ADD      SP,SP,#+4
    375                  }
    376              }
    377          }
   \                     ??UnitClicked_2:
   \   00000158   20D08DE2           ADD      SP,SP,#+32
   \   0000015C   B04FBDE8           POP      {R4,R5,R7-R11,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return
   \                     ??UnitClicked_8:
   \   00000164   31000000           DC8      "1",+0,+0
   \   00000168   30000000           DC8      "0",+0,+0
   \   0000016C   ........           DC32     ConfirmMessageBox
    378          

   \                                 In segment CODE, align 4, keep-with-next
    379          void TDUWaterIngressWin::cbEventHandler(WM_MESSAGE * pMsg)
    380          {
   \                     ??cbEventHandler:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    381              //WM_HWIN hWin = pMsg->hWin;
    382              switch ( pMsg->MsgId ) {
   \   00000004   ........           LDR      R5,??DataTable9  ;; WaterIngrWindow
   \   00000008   50D04DE2           SUB      SP,SP,#+80
   \   0000000C   002091E5           LDR      R2,[R1, #+0]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   012042E2           SUB      R2,R2,#+1
   \   0000001C   1330A0E3           MOV      R3,#+19
   \   00000020   403E83E3           ORR      R3,R3,#0x400
   \   00000024   030052E1           CMP      R2,R3
   \   00000028   2A02008A           BHI      ??cbEventHandler_2
   \   0000002C   023F8FE2           ADR      R3,??cbEventHandler_1
   \   00000030   8220A0E1           MOV      R2,R2, LSL #+1
   \   00000034   B23093E1           LDRH     R3,[R3, R2]
   \   00000038   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??cbEventHandler_1:
   \   0000003C   210226022602       DC16     +545,+550,+550,+550
   \              2602        
   \   00000044   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000004C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000054   260226022402       DC16     +550,+550,+548,+550
   \              2602        
   \   0000005C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000064   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000006C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000074   1F0226022602       DC16     +543,+550,+550,+550
   \              2602        
   \   0000007C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000084   260221022602       DC16     +550,+545,+550,+550
   \              2602        
   \   0000008C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000094   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000009C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000000FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000104   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000010C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000114   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000011C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000124   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000012C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000134   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000013C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000144   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000014C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000154   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000015C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000164   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000016C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000174   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000017C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000184   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000018C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000194   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000019C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000001FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000204   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000020C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000214   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000021C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000224   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000022C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000234   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000023C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000244   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000024C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000254   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000025C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000264   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000026C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000274   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000027C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000284   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000028C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000294   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000029C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000002FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000304   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000030C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000314   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000031C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000324   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000032C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000334   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000033C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000344   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000034C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000354   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000035C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000364   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000036C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000374   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000037C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000384   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000038C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000394   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000039C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000003FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000404   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000040C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000414   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000041C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000424   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000042C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000434   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000043C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000444   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000044C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000454   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000045C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000464   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000046C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000474   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000047C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000484   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000048C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000494   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000049C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000004FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000504   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000050C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000514   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000051C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000524   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000052C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000534   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000053C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000544   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000054C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000554   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000055C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000564   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000056C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000574   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000057C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000584   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000058C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000594   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000059C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000005FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000604   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000060C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000614   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000061C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000624   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000062C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000634   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000063C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000644   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000064C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000654   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000065C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000664   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000066C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000674   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000067C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000684   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000068C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000694   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000069C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000006FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000704   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000070C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000714   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000071C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000724   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000072C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000734   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000073C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000744   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000074C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000754   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000075C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000764   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000076C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000774   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000077C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000784   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000078C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000794   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000079C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007A4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007AC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007B4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007BC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007C4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007CC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007D4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007DC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007E4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007EC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007F4   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   000007FC   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000804   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000080C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000814   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000081C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000824   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000082C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000834   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000083C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000844   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000084C   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   00000854   260226022602       DC16     +550,+550,+550,+550
   \              2602        
   \   0000085C   260226022602       DC16     +550,+550,+550,+521
   \              0902        
    383              case MESSAGE_YES_RETURN:
    384                  {
    385                      //int ValueId = pMsg->hWinSrc;
    386                      char StringBuf[BUF_SIZE]={""};
   \                     ??cbEventHandler_3:
   \   00000864   0D00A0E1           MOV      R0,SP
   \   00000868   0020A0E3           MOV      R2,#+0
   \   0000086C   5030A0E3           MOV      R3,#+80
   \                     ??cbEventHandler_4:
   \   00000870   043053E2           SUBS     R3,R3,#+4
   \   00000874   032080E7           STR      R2,[R0, R3]
   \   00000878   FCFFFF1A           BNE      ??cbEventHandler_4
    387                      strncpy( StringBuf,(char *)pMsg->Data.p,BUF_SIZE);
   \   0000087C   081091E5           LDR      R1,[R1, #+8]
   \   00000880   5020A0E3           MOV      R2,#+80
   \   00000884   ........           _BLF     ??strncpy,??strncpy??rA
    388                      LibPutValue( SVT_WI_PROTECTION,CurrentWIPtr,ProtPlate);
   \   00000888   AC24D4E5           LDRB     R2,[R4, #+1196]
   \   0000088C   A81494E5           LDR      R1,[R4, #+1192]
   \   00000890   0030A0E3           MOV      R3,#+0
   \   00000894   DC00A0E3           MOV      R0,#+220
   \   00000898   8C0D80E3           ORR      R0,R0,#0x2300
   \   0000089C   ........           _BLF     ??LibPutValue_1,??LibPutValue??rA_1
    389                      WaterIngrWindow->Paintnew();
   \   000008A0   001095E5           LDR      R1,[R5, #+0]
   \   000008A4   0100A0E1           MOV      R0,R1
   \   000008A8   441091E5           LDR      R1,[R1, #+68]
   \   000008AC   041091E5           LDR      R1,[R1, #+4]
   \   000008B0   0FE0A0E1           MOV      LR,PC
   \   000008B4   11FF2FE1           BX       R1
   \   000008B8   010000EA           B        ??cbEventHandler_5
    390                  }
    391                  break;
    392              case WM_NOTIFY_PARENT:
    393                  {
    394                      int NCode;//, Id;
    395          //			Id    = WM_GetId(pMsg->hWinSrc);    /* Id of widget */
    396                      NCode = pMsg->Data.v;                               /* Notification code */
    397                      switch ( NCode ) {
    398                      case WM_NOTIFICATION_RELEASED:      /* React only if released */
    399                          break;
    400                      case WM_NOTIFICATION_VALUE_CHANGED:
    401          /*						{
    402                                      if ( XScrollPos != SCROLLBAR_LibGetValue(ScrollHandl) ) {
    403                                          XScrollPos = SCROLLBAR_GetValue(ScrollHandl);
    404                                          WM_MoveTo(MainWinHandl,0,0-XScrollPos*LineHeight*(LineHeight-2));
    405                                      }
    406                                  }*/
    407                          break;
    408                      }
    409                  }
    410                  break;
    411              case WM_INIT_DIALOG:
    412                  WaterIngrWindow->FirstTime = true;
   \                     ??cbEventHandler_6:
   \   000008BC   0110A0E3           MOV      R1,#+1
   \   000008C0   2810C0E5           STRB     R1,[R0, #+40]
   \                     ??cbEventHandler_5:
   \   000008C4   50D08DE2           ADD      SP,SP,#+80
   \   000008C8   3040BDE8           POP      {R4,R5,LR}
   \   000008CC   1EFF2FE1           BX       LR
    413                  break;
    414              case WM_PAINT:
    415                  //if ( CurrentWinID == TDU_WATERINGR_WIN ) {
    416                  //}
    417                  WaterIngrWindow->UpdateLanguage();
   \                     ??cbEventHandler_7:
   \   000008D0   ........           _BLF     ??UpdateLanguage,??UpdateLanguage??rA
   \   000008D4   FAFFFFEA           B        ??cbEventHandler_5
    418                  break;
    419              case WM_CREATE:
    420                  break;
    421              default:
    422                  WM_DefaultProc(pMsg);
   \                     ??cbEventHandler_2:
   \   000008D8   0100A0E1           MOV      R0,R1
   \   000008DC   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
    423              }
    424          }
   \                     ??cbEventHandler_8:
   \   000008E0   F7FFFFEA           B        ??cbEventHandler_5

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{468, 14, 6}, {74, 74, 6}, {475, 4`:
   \   00000000   D40100000E00       DC32 468, 14, 6, 74, 74, 6, 475, 42, 6, 476, 42, 6, 477, 36, 6, 478, 36
   \              000006000000
   \              4A0000004A00
   \              000006000000
   \              DB0100002A00
   \              000006000000
   \              DC0100002A00
   \              000006000000
   \              DD0100002400
   \              000006000000
   \              DE0100002400
   \              0000        
   \   00000044   060000005201       DC32 6, 338, 41, 6
   \              000029000000
   \              06000000    
   \   __vtbl_entry const __data TDUWaterIngressWin::__vtbl[3]
   \                     ??__vtbl:
   \   00000054   ............       DC32 ??SetButton, ??Paintnew, ??cbEventHandler
   \              ............

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4100               DC8 "A"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4500               DC8 "E"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5700               DC8 "W"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3100               DC8 "1"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3000               DC8 "0"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TDUWaterIngressWin &TDUWaterIngressWin::new TDUWaterIngressWin()
   \                     `??new TDUWaterIngressWin`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   4B0EA0E3           MOV      R0,#+1200
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TDUWaterIngressWin_1`
   \   00000014   ........           BL       ??TDUWaterIngressWin
   \                     `??new TDUWaterIngressWin_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TDUWaterIngressWin::delete ~TDUWaterIngressWin(TDUWaterIngressWin *)
   \                     `??delete ~TDUWaterIngressWin`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TDUWaterIngressWin_1`
   \   0000000C   ........           _BLF     `?~TDUPresentWin`,`?~TDUPresentWin??rA`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TDUWaterIngressWin_1`:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1C109FE5           LDR      R1,??__sti__routine_1  ;; GUI_Font16_1
   \   00000004   ........           LDR      R0,??DataTable4  ;; TDU_FONT_PW
   \   00000008   30002DE9           PUSH     {R4,R5}
   \   0000000C   3C10B1E8           LDM      R1!,{R2-R5,R12}
   \   00000010   3C10A0E8           STM      R0!,{R2-R5,R12}
   \   00000014   1C1091E8           LDM      R1,{R2-R4,R12}
   \   00000018   1C1080E8           STM      R0,{R2-R4,R12}
   \   0000001C   3000BDE8           POP      {R4,R5}
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000024   ........           DC32     GUI_Font16_1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     WaterIngrWindow

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     TDU_FONT_PW

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??ObjVector

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??ObjVector

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     WaterIngrWindow
    425          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TDUWaterIngressWin::ButtonClicked(int)
                                        4
     TDUWaterIngressWin::MoveWin()      4
     TDUWaterIngressWin::PWTimer()      8
     TDUWaterIngressWin::Paintnew()   132
     TDUWaterIngressWin::SetButton()
                                       28
     TDUWaterIngressWin::TDUWaterIngressWin()
                                      252
     TDUWaterIngressWin::UnitClicked(GUI_HWIN, int)
                                       72
     TDUWaterIngressWin::cbEventHandler(WM_MESSAGE *)
                                       92
     TDUWaterIngressWin::delete ~TDUWaterIngressWin(TDUWaterIngressWin *)
                                        8
     TDUWaterIngressWin::new TDUWaterIngressWin()
                                        4
     TDUWaterIngressWin::~TDUWaterIngressWin()
                                        4
     __sti__routine()                   8
     cbWin0(WM_MESSAGE *)               4
     cbWin1(WM_MESSAGE *)              12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     TDU_FONT_PW                      36
     cbWin1(WM_MESSAGE *)            128
     cbWin0(WM_MESSAGE *)             52
     TDUWaterIngressWin::Col0          4
     TDUWaterIngressWin::Col1          4
     TDUWaterIngressWin::Col2          4
     TDUWaterIngressWin::Col3          4
     TDUWaterIngressWin::Col4          4
     TDUWaterIngressWin::Col5          4
     TDUWaterIngressWin::Col6          4
     TDUWaterIngressWin::NumUnitsOnPage
                                       4
     TDUWaterIngressWin::~TDUWaterIngressWin()
                                      16
     TDUWaterIngressWin::TDUWaterIngressWin()
                                    1608
     TDUWaterIngressWin::SetButton()
                                     140
     TDUWaterIngressWin::PWTimer()    72
     TDUWaterIngressWin::Paintnew() 1228
     TDUWaterIngressWin::MoveWin()    88
     TDUWaterIngressWin::ButtonClicked(int)
                                     116
     TDUWaterIngressWin::UnitClicked(GUI_HWIN, int)
                                     368
     TDUWaterIngressWin::cbEventHandler(WM_MESSAGE *)
                                    2276
     ?<Constant {{468, 14, 6}, {74, 74, 6}, {475, 4
                                      96
     ?<Constant "">                    1
     ?<Constant {false, false, false, false, false}
                                       8
     ?<Constant "A">                   2
     ?<Constant "E">                   2
     ?<Constant "W">                   2
     ?<Constant "1">                   2
     ?<Constant "0">                   2
     ?<Constant "">_1                 80
     TDUWaterIngressWin::new TDUWaterIngressWin()
                                      32
     TDUWaterIngressWin::delete ~TDUWaterIngressWin(TDUWaterIngressWin *)
                                      32
     __sti__routine()                 40
     ??DataTable1                      4
     ??DataTable4                      4
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable9                      4
      Others                         636

 
 6 836 bytes in segment CODE
   227 bytes in segment DATA_C
    36 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 6 220 bytes of CODE  memory (+ 632 bytes shared)
   227 bytes of CONST memory
    36 bytes of DATA  memory

Errors: none
Warnings: none
