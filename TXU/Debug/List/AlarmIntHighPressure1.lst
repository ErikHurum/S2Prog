##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmIntHighPressure1.Cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmIntHighPressure1.Cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmIntHighPressure1.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmIntHighPressure1.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmIntHighPressure1.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntHighPressure1::~AlarmIntHighPressure1()
   \                     `?~AlarmIntHighPressure1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmIntHighPressure1_1`
   \   00000014   0100000A           BEQ      `?~AlarmIntHighPressure1_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmIntHighPressure1_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmIntHighPressure1_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmIntHighPressure1_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmIntHighPressure1::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmIntHighPressure1::AlarmIntHighPressure1(PRogramObjectBase *PROPtr, float Lim, bool Visible) {
   \                     ??AlarmIntHighPressure1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   30519FE5           LDR      R5,??AlarmIntHighPressure1_1  ;; ??__vtbl
   \   00000008   88D04DE2           SUB      SP,SP,#+136
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0380A0E1           MOV      R8,R3
   \   0000001C   ........           _BLF     ??AlarmHighPressure,??AlarmHighPressure??rA
     11              NumberOfAlarmSettings++;
   \   00000020   18019FE5           LDR      R0,??AlarmIntHighPressure1_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   A45084E5           STR      R5,[R4, #+164]
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
     12              IDNumber 	    = (ID_AL_X_HIGH_T_PRESS1 << 16) + NumberOfAlarmSettings;
   \   00000034   B006A0E3           MOV      R0,#+184549376
   \   00000038   E10880E3           ORR      R0,R0,#0xE10000
   \   0000003C   010080E0           ADD      R0,R0,R1
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
     13              Type 		    =  ID_AL_X_HIGH_T_PRESS1;
   \   00000044   E100A0E3           MOV      R0,#+225
   \   00000048   B00E80E3           ORR      R0,R0,#0xB00
   \   0000004C   A00084E5           STR      R0,[R4, #+160]
     14              IsExtraAlarm    = true;
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   CD00C4E5           STRB     R0,[R4, #+205]
     15              IsVisible       = Visible;
   \   00000058   B080C4E5           STRB     R8,[R4, #+176]
     16              Limit           = Lim;
   \   0000005C   E47084E5           STR      R7,[R4, #+228]
     17              Locked          = true;
   \   00000060   E800C4E5           STRB     R0,[R4, #+232]
     18              PROPointer      = PROPtr;
     19              PROTPressPtr    = (PROTankPressure*)PROPtr;
     20              if ( PROProjectInfo::IsInlandVessel ) {
   \   00000064   D8009FE5           LDR      R0,??AlarmIntHighPressure1_1+0x8  ;; ??IsInlandVessel
   \   00000068   C46084E5           STR      R6,[R4, #+196]
   \   0000006C   EC6084E5           STR      R6,[R4, #+236]
   \   00000070   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   2600000A           BEQ      ??AlarmIntHighPressure1_2
     21                  MessageKey      = L_WORD774;    // High
   \   0000007C   0610A0E3           MOV      R1,#+6
   \   00000080   C01F81E3           ORR      R1,R1,#0x300
   \   00000084   B81084E5           STR      R1,[R4, #+184]
     22                  char Buf[BUF_SIZE];
     23                  sprintf(Buf, "%s %3.0fkPa", FindDictionaryWord(MessageKey).c_str(), Limit * MH2O_TO_KPA);
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000090   18009DE5           LDR      R0,[SP, #+24]
   \   00000094   100050E3           CMP      R0,#+16
   \   00000098   E40094E5           LDR      R0,[R4, #+228]
   \   0000009C   04609D25           LDRCS    R6,[SP, #+4]
   \   000000A0   04608D32           ADDCC    R6,SP,#+4
   \   000000A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A8   98209FE5           LDR      R2,??AlarmIntHighPressure1_1+0xC  ;; 0x3a92a305
   \   000000AC   98309FE5           LDR      R3,??AlarmIntHighPressure1_1+0x10  ;; 0x40239d01
   \   000000B0   ........           _BLF     __dMul,??__dMul??rA
   \   000000B4   03002DE9           PUSH     {R0,R1}
   \   000000B8   24008DE2           ADD      R0,SP,#+36
   \   000000BC   0800BDE8           POP      {R3}
   \   000000C0   0620A0E1           MOV      R2,R6
   \   000000C4   741085E2           ADD      R1,R5,#+116
   \   000000C8   ........           _BLF     sprintf,??sprintf??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   04008DE2           ADD      R0,SP,#+4
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     24                  Description = AnsiString(Buf);
   \   000000DC   20108DE2           ADD      R1,SP,#+32
   \   000000E0   70008DE2           ADD      R0,SP,#+112
   \   000000E4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000E8   60109FE5           LDR      R1,??AlarmIntHighPressure1_1+0x14  ;; ??npos
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   003091E5           LDR      R3,[R1, #+0]
   \   000000F4   0010A0E1           MOV      R1,R0
   \   000000F8   7C0084E2           ADD      R0,R4,#+124
   \   000000FC   ........           _BLF     ??assign,??assign??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   70008DE2           ADD      R0,SP,#+112
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000110   04D08DE2           ADD      SP,SP,#+4
   \   00000114   010000EA           B        ??AlarmIntHighPressure1_3
     25              } else {
     26                  MessageKey      = L_WORD512;    // X Hi Press1
   \                     ??AlarmIntHighPressure1_2:
   \   00000118   800FA0E3           MOV      R0,#+512
   \   0000011C   B80084E5           STR      R0,[R4, #+184]
     27              }
     28              TPCMessageKey       = L_WORD513;    // XHiP1
   \                     ??AlarmIntHighPressure1_3:
   \   00000120   0100A0E3           MOV      R0,#+1
   \   00000124   800F80E3           ORR      R0,R0,#0x200
   \   00000128   B40084E5           STR      R0,[R4, #+180]
     29          }
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   88D08DE2           ADD      SP,SP,#+136
   \   00000134   F041BDE8           POP      {R4-R8,LR}
   \   00000138   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmIntHighPressure1_1:
   \   0000013C   ........           DC32     ??__vtbl
   \   00000140   ........           DC32     ??NumberOfAlarmSettings
   \   00000144   ........           DC32     ??IsInlandVessel
   \   00000148   05A3923A           DC32     0x3a92a305
   \   0000014C   019D2340           DC32     0x40239d01
   \   00000150   ........           DC32     ??npos
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          float AlarmIntHighPressure1::Get_Limit(void) {
     32              return (Limit);
   \                     ??Get_Limit:
   \   00000000   E40090E5           LDR      R0,[R0, #+228]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     33          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data AlarmIntHighPressure1::__vtbl[29]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~AlarmIntHighPressure1`, ??WriteConfigToFile
   \              ....        
   \   00000008   ............       DC32 ??LoadConfigFromFile, ??MakeConfigString, ??LoadConfigString
   \              ............
   \   00000014   ............       DC32 ??RestoreSettings, ??GetName, ??FindPROStatus, ??GetFloatValue
   \              ............
   \              ........    
   \   00000024   ............       DC32 ??GetValue, ??GetStringValue, ??GetBitValue, ??PutValue
   \              ............
   \              ........    
   \   00000034   ............       DC32 ??PutFloatValue, ??PutBitValue, ??ReceiveData, ??SendData
   \              ............
   \              ........    
   \   00000044   ............       DC32 ??StartTimer, ??InputTimeout, ??GetValueInfoTable
   \              ............
   \   00000050   ............       DC32 ??GetServiceValueInfoTable, ??SetModifiedFlag
   \              ....        
   \   00000058   ............       DC32 ??IsAvailableNewData, ??Get_CompleteMessage, ??Get_Location
   \              ............
   \   00000064   ............       DC32 ??Check, ??Get_Message, ??AddAlarm, ??RemoveAlarm
   \              ............
   \              ........    
   \   00000074   25732025332E       DC8 "%s %3.0fkPa"
   \              30666B506100

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntHighPressure1 &AlarmIntHighPressure1::new AlarmIntHighPressure1(PRogramObjectBase *, float, bool)
   \                     `??new AlarmIntHighPressure1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmIntHighPressure1_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmIntHighPressure1
   \                     `??new AlarmIntHighPressure1_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     34          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmIntHighPressure1::AlarmIntHighPressure1(PRogramObjectBase *, float, bool)
                                      168
     AlarmIntHighPressure1::Get_Limit()
                                        0
     AlarmIntHighPressure1::new AlarmIntHighPressure1(PRogramObjectBase *, float, bool)
                                       16
     AlarmIntHighPressure1::~AlarmIntHighPressure1()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmIntHighPressure1::~AlarmIntHighPressure1()
                                      56
     AlarmIntHighPressure1::NumberOfAlarmSettings
                                       4
     AlarmIntHighPressure1::AlarmIntHighPressure1(PRogramObjectBase *, float, bool)
                                     340
     AlarmIntHighPressure1::Get_Limit()
                                       8
     AlarmIntHighPressure1::__vtbl   128
     AlarmIntHighPressure1::new AlarmIntHighPressure1(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         164

 
 612 bytes in segment CODE
 128 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 412 bytes of CODE  memory (+ 216 bytes shared)
 128 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
