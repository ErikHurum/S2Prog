##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\CTOUser.cpp                     #
#    Command line    =  D:\S2Prog\Shared\Src\CTOUser.cpp --fpu None -D       #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\CTOUser.lst                 #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\CTOUser.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\CTOUser.cpp
      1          #ifdef ANWIN
      2              #include "LiteCall.hpp"
      3          #endif
      4          #pragma hdrstop
      5          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int string::compare(string const &) const
   \                     ??compare:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   182091E5           LDR      R2,[R1, #+24]
   \   00000008   100052E3           CMP      R2,#+16
   \   0000000C   04309125           LDRCS    R3,[R1, #+4]
   \   00000010   04308132           ADDCC    R3,R1,#+4
   \   00000014   141091E5           LDR      R1,[R1, #+20]
   \   00000018   02002DE9           PUSH     {R1}
   \   0000001C   142090E5           LDR      R2,[R0, #+20]
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     ??compare_1,??compare??rA
   \   00000028   0240BDE8           POP      {R1,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Rotate(CTOUser **, CTOUser **, CTOUser **, signed int *, CTOUser **)
   \                     ??_Rotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0030A0E1           MOV      R3,R0
   \   00000008   2301A0E1           LSR      R0,R3,#+2
   \   0000000C   214160E0           RSB      R4,R0,R1, LSR #+2
   \   00000010   2251A0E1           LSR      R5,R2,#+2
   \   00000014   006045E0           SUB      R6,R5,R0
   \   00000018   0600A0E1           MOV      R0,R6
   \   0000001C   0470A0E1           MOV      R7,R4
   \   00000020   040000EA           B        ??_Rotate_1
   \                     ??_Rotate_2:
   \   00000024   0710A0E1           MOV      R1,R7
   \   00000028   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   0170A0E1           MOV      R7,R1
   \                     ??_Rotate_1:
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   F8FFFF1A           BNE      ??_Rotate_2
   \   00000040   060050E1           CMP      R0,R6
   \   00000044   030000BA           BLT      ??_Rotate_3
   \                     ??_Rotate_4:
   \   00000048   F040BDE8           POP      {R4-R7,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
   \                     ??_Rotate_5:
   \   00000050   006081E5           STR      R6,[R1, #+0]
   \   00000054   010040E2           SUB      R0,R0,#+1
   \                     ??_Rotate_3:
   \   00000058   010050E3           CMP      R0,#+1
   \   0000005C   F9FFFFBA           BLT      ??_Rotate_4
   \   00000060   007183E0           ADD      R7,R3,R0, LSL #+2
   \   00000064   006097E5           LDR      R6,[R7, #+0]
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   04C181E0           ADD      R12,R1,R4, LSL #+2
   \   00000070   02005CE1           CMP      R12,R2
   \   00000074   03C0A001           MOVEQ    R12,R3
   \                     ??_Rotate_6:
   \   00000078   07005CE1           CMP      R12,R7
   \   0000007C   F3FFFF0A           BEQ      ??_Rotate_5
   \   00000080   00E09CE5           LDR      LR,[R12, #+0]
   \   00000084   00E081E5           STR      LR,[R1, #+0]
   \   00000088   0C10A0E1           MOV      R1,R12
   \   0000008C   2CE145E0           SUB      LR,R5,R12, LSR #+2
   \   00000090   0E0054E1           CMP      R4,LR
   \   00000094   04C18CB0           ADDLT    R12,R12,R4, LSL #+2
   \   00000098   0EC044A0           SUBGE    R12,R4,LR
   \   0000009C   0CC183A0           ADDGE    R12,R3,R12, LSL #+2
   \   000000A0   F4FFFFEA           B        ??_Rotate_6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Adjust_heap(CTOUser **, signed int, signed int, CTOUser * const &, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Adjust_heap:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20609DE5           LDR      R6,[SP, #+32]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0280A0E1           MOV      R8,R2
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   819080E0           ADD      R9,R0,R1, LSL #+1
   \   00000020   060000EA           B        ??_Adjust_heap_1
   \                     ??_Adjust_heap_2:
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   01904912           SUBNE    R9,R9,#+1
   \   0000002C   090194E7           LDR      R0,[R4, +R9, LSL #+2]
   \   00000030   0910A0E1           MOV      R1,R9
   \   00000034   00008AE5           STR      R0,[R10, #+0]
   \   00000038   0200A0E3           MOV      R0,#+2
   \   0000003C   899080E0           ADD      R9,R0,R9, LSL #+1
   \                     ??_Adjust_heap_1:
   \   00000040   01A184E0           ADD      R10,R4,R1, LSL #+2
   \   00000044   080059E1           CMP      R9,R8
   \   00000048   090000AA           BGE      ??_Adjust_heap_3
   \   0000004C   090184E0           ADD      R0,R4,R9, LSL #+2
   \   00000050   041010E5           LDR      R1,[R0, #-4]
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0FE0A0E1           MOV      LR,PC
   \   00000060   12FF2FE1           BX       R2
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   EDFFFF0A           BEQ      ??_Adjust_heap_2
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   EBFFFFEA           B        ??_Adjust_heap_2
   \                     ??_Adjust_heap_3:
   \   00000074   0700001A           BNE      ??_Adjust_heap_4
   \   00000078   080184E0           ADD      R0,R4,R8, LSL #+2
   \   0000007C   040010E5           LDR      R0,[R0, #-4]
   \   00000080   011048E2           SUB      R1,R8,#+1
   \   00000084   00008AE5           STR      R0,[R10, #+0]
   \   00000088   020000EA           B        ??_Adjust_heap_4
   \                     ??_Adjust_heap_5:
   \   0000008C   00009AE5           LDR      R0,[R10, #+0]
   \   00000090   0810A0E1           MOV      R1,R8
   \   00000094   000089E5           STR      R0,[R9, #+0]
   \                     ??_Adjust_heap_4:
   \   00000098   010041E2           SUB      R0,R1,#+1
   \   0000009C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000A0   C080A0E1           ASR      R8,R0,#+1
   \   000000A4   019184E0           ADD      R9,R4,R1, LSL #+2
   \   000000A8   010057E1           CMP      R7,R1
   \   000000AC   090000AA           BGE      ??_Adjust_heap_6
   \   000000B0   001095E5           LDR      R1,[R5, #+0]
   \   000000B4   08A184E0           ADD      R10,R4,R8, LSL #+2
   \   000000B8   00009AE5           LDR      R0,[R10, #+0]
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0FE0A0E1           MOV      LR,PC
   \   000000C4   12FF2FE1           BX       R2
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0100A013           MOVNE    R0,#+1
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   ECFFFF1A           BNE      ??_Adjust_heap_5
   \                     ??_Adjust_heap_6:
   \   000000D8   000095E5           LDR      R0,[R5, #+0]
   \   000000DC   000089E5           STR      R0,[R9, #+0]
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void pop_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??pop_heap:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   20C1A0E1           LSR      R12,R0,#+2
   \   00000008   21316CE0           RSB      R3,R12,R1, LSR #+2
   \   0000000C   020053E3           CMP      R3,#+2
   \   00000010   0A0000BA           BLT      ??pop_heap_1
   \   00000014   044011E5           LDR      R4,[R1, #-4]
   \   00000018   00408DE5           STR      R4,[SP, #+0]
   \   0000001C   003090E5           LDR      R3,[R0, #+0]
   \   00000020   043001E5           STR      R3,[R1, #-4]
   \   00000024   04002DE9           PUSH     {R2}
   \   00000028   04308DE2           ADD      R3,SP,#+4
   \   0000002C   041041E2           SUB      R1,R1,#+4
   \   00000030   21216CE0           RSB      R2,R12,R1, LSR #+2
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   ........           _BLF     ??_Adjust_heap,??_Adjust_heap??rA
   \   0000003C   04D08DE2           ADD      SP,SP,#+4
   \                     ??pop_heap_1:
   \   00000040   1140BDE8           POP      {R0,R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void make_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??make_heap:
   \   00000000   F1402DE9           PUSH     {R0,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   2101A0E1           LSR      R0,R1,#+2
   \   00000010   246140E0           SUB      R6,R0,R4, LSR #+2
   \   00000014   020056E3           CMP      R6,#+2
   \   00000018   0F0000BA           BLT      ??make_heap_1
   \   0000001C   A60F86E0           ADD      R0,R6,R6, LSR #+31
   \   00000020   C070A0E1           ASR      R7,R0,#+1
   \   00000024   0A0000EA           B        ??make_heap_2
   \                     ??make_heap_3:
   \   00000028   017047E2           SUB      R7,R7,#+1
   \   0000002C   071194E7           LDR      R1,[R4, +R7, LSL #+2]
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   00108DE5           STR      R1,[SP, #+0]
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   04308DE2           ADD      R3,SP,#+4
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     ??_Adjust_heap,??_Adjust_heap??rA
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \                     ??make_heap_2:
   \   00000054   010057E3           CMP      R7,#+1
   \   00000058   F2FFFFAA           BGE      ??make_heap_3
   \                     ??make_heap_1:
   \   0000005C   F140BDE8           POP      {R0,R4-R7,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Insertion_sort(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Insertion_sort:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   050054E1           CMP      R4,R5
   \   00000014   2800000A           BEQ      ??_Insertion_sort_1
   \   00000018   0470A0E1           MOV      R7,R4
   \   0000001C   090000EA           B        ??_Insertion_sort_2
   \                     ??_Insertion_sort_3:
   \   00000020   070054E1           CMP      R4,R7
   \   00000024   0700000A           BEQ      ??_Insertion_sort_2
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   0030A0E3           MOV      R3,#+0
   \   00000034   042087E2           ADD      R2,R7,#+4
   \   00000038   0710A0E1           MOV      R1,R7
   \   0000003C   0400A0E1           MOV      R0,R4
   \                     ??_Insertion_sort_4:
   \   00000040   ........           _BLF     ??_Rotate,??_Rotate??rA
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \                     ??_Insertion_sort_2:
   \   00000048   047087E2           ADD      R7,R7,#+4
   \   0000004C   050057E1           CMP      R7,R5
   \   00000050   1900000A           BEQ      ??_Insertion_sort_1
   \   00000054   001094E5           LDR      R1,[R4, #+0]
   \   00000058   000097E5           LDR      R0,[R7, #+0]
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   12FF2FE1           BX       R2
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   EBFFFF1A           BNE      ??_Insertion_sort_3
   \   00000070   0780A0E1           MOV      R8,R7
   \   00000074   0890A0E1           MOV      R9,R8
   \   00000078   000000EA           B        ??_Insertion_sort_5
   \                     ??_Insertion_sort_6:
   \   0000007C   0980A0E1           MOV      R8,R9
   \                     ??_Insertion_sort_5:
   \   00000080   041039E5           LDR      R1,[R9, #-4]!
   \   00000084   000097E5           LDR      R0,[R7, #+0]
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   0FE0A0E1           MOV      LR,PC
   \   00000090   12FF2FE1           BX       R2
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   F7FFFF1A           BNE      ??_Insertion_sort_6
   \   0000009C   070058E1           CMP      R8,R7
   \   000000A0   E8FFFF0A           BEQ      ??_Insertion_sort_2
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   0030A0E3           MOV      R3,#+0
   \   000000AC   042087E2           ADD      R2,R7,#+4
   \   000000B0   0710A0E1           MOV      R1,R7
   \   000000B4   0800A0E1           MOV      R0,R8
   \   000000B8   E0FFFFEA           B        ??_Insertion_sort_4
   \                     ??_Insertion_sort_1:
   \   000000BC   F043BDE8           POP      {R4-R9,LR}
   \   000000C0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Med3(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Med3:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   001094E5           LDR      R1,[R4, #+0]
   \   00000010   000095E5           LDR      R0,[R5, #+0]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   0720A0E1           MOV      R2,R7
   \   00000020   0FE0A0E1           MOV      LR,PC
   \   00000024   12FF2FE1           BX       R2
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   00009515           LDRNE    R0,[R5, #+0]
   \   00000030   00109415           LDRNE    R1,[R4, #+0]
   \   00000034   0720A0E1           MOV      R2,R7
   \   00000038   00108515           STRNE    R1,[R5, #+0]
   \   0000003C   00008415           STRNE    R0,[R4, #+0]
   \   00000040   001095E5           LDR      R1,[R5, #+0]
   \   00000044   000096E5           LDR      R0,[R6, #+0]
   \   00000048   0FE0A0E1           MOV      LR,PC
   \   0000004C   12FF2FE1           BX       R2
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   00009615           LDRNE    R0,[R6, #+0]
   \   00000058   00109515           LDRNE    R1,[R5, #+0]
   \   0000005C   00108615           STRNE    R1,[R6, #+0]
   \   00000060   00008515           STRNE    R0,[R5, #+0]
   \   00000064   001094E5           LDR      R1,[R4, #+0]
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   17FF2FE1           BX       R7
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   00009515           LDRNE    R0,[R5, #+0]
   \   0000007C   00109415           LDRNE    R1,[R4, #+0]
   \   00000080   00108515           STRNE    R1,[R5, #+0]
   \   00000084   00008415           STRNE    R0,[R4, #+0]
   \   00000088   F040BDE8           POP      {R4-R7,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Median(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Median:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
   \   00000010   2511A0E1           LSR      R1,R5,#+2
   \   00000014   201141E0           SUB      R1,R1,R0, LSR #+2
   \   00000018   290051E3           CMP      R1,#+41
   \   0000001C   1B0000BA           BLT      ??_Median_1
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   4121A0E1           ASR      R2,R1,#+2
   \   00000028   A21E81E0           ADD      R1,R1,R2, LSR #+29
   \   0000002C   C181A0E1           ASR      R8,R1,#+3
   \   00000030   087180E0           ADD      R7,R0,R8, LSL #+2
   \   00000034   882180E0           ADD      R2,R0,R8, LSL #+3
   \   00000038   0710A0E1           MOV      R1,R7
   \   0000003C   ........           _BLF     ??_Med3,??_Med3??rA
   \   00000040   0801A0E1           LSL      R0,R8,#+2
   \   00000044   009060E2           RSB      R9,R0,#+0
   \   00000048   0630A0E1           MOV      R3,R6
   \   0000004C   082184E0           ADD      R2,R4,R8, LSL #+2
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   040089E0           ADD      R0,R9,R4
   \   00000058   ........           _BLF     ??_Med3,??_Med3??rA
   \   0000005C   059089E0           ADD      R9,R9,R5
   \   00000060   0630A0E1           MOV      R3,R6
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   0910A0E1           MOV      R1,R9
   \   0000006C   8801A0E1           LSL      R0,R8,#+3
   \   00000070   000060E2           RSB      R0,R0,#+0
   \   00000074   050080E0           ADD      R0,R0,R5
   \   00000078   ........           _BLF     ??_Med3,??_Med3??rA
   \   0000007C   0630A0E1           MOV      R3,R6
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0410A0E1           MOV      R1,R4
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   000000EA           B        ??_Median_2
   \                     ??_Median_1:
   \   00000090   0410A0E1           MOV      R1,R4
   \                     ??_Median_2:
   \   00000094   ........           _BLF     ??_Med3,??_Med3??rA
   \   00000098   F043BDE8           POP      {R4-R9,LR}
   \   0000009C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<CTOUser **, CTOUser **> _Unguarded_partition(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Unguarded_partition:
   \   00000000   734F2DE9           PUSH     {R0,R1,R4-R6,R8-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   2401A0E1           LSR      R0,R4,#+2
   \   00000018   260140E0           SUB      R0,R0,R6, LSR #+2
   \   0000001C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000020   C000A0E1           ASR      R0,R0,#+1
   \   00000024   00B181E0           ADD      R11,R1,R0, LSL #+2
   \   00000028   042044E2           SUB      R2,R4,#+4
   \   0000002C   0B10A0E1           MOV      R1,R11
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           _BLF     ??_Median,??_Median??rA
   \   00000038   04808BE2           ADD      R8,R11,#+4
   \   0000003C   000000EA           B        ??_Unguarded_partition_1
   \                     ??_Unguarded_partition_2:
   \   00000040   04B04BE2           SUB      R11,R11,#+4
   \                     ??_Unguarded_partition_1:
   \   00000044   0B0056E1           CMP      R6,R11
   \   00000048   0D00002A           BCS      ??_Unguarded_partition_3
   \   0000004C   00109BE5           LDR      R1,[R11, #+0]
   \   00000050   04001BE5           LDR      R0,[R11, #-4]
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   12FF2FE1           BX       R2
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600001A           BNE      ??_Unguarded_partition_3
   \   00000068   04101BE5           LDR      R1,[R11, #-4]
   \   0000006C   00009BE5           LDR      R0,[R11, #+0]
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   12FF2FE1           BX       R2
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   EEFFFF0A           BEQ      ??_Unguarded_partition_2
   \                     ??_Unguarded_partition_3:
   \   00000084   040058E1           CMP      R8,R4
   \   00000088   0E00002A           BCS      ??_Unguarded_partition_4
   \   0000008C   00109BE5           LDR      R1,[R11, #+0]
   \   00000090   000098E5           LDR      R0,[R8, #+0]
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   12FF2FE1           BX       R2
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0700001A           BNE      ??_Unguarded_partition_4
   \   000000A8   001098E5           LDR      R1,[R8, #+0]
   \   000000AC   00009BE5           LDR      R0,[R11, #+0]
   \   000000B0   0520A0E1           MOV      R2,R5
   \   000000B4   0FE0A0E1           MOV      LR,PC
   \   000000B8   12FF2FE1           BX       R2
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   04808802           ADDEQ    R8,R8,#+4
   \   000000C4   EEFFFF0A           BEQ      ??_Unguarded_partition_3
   \                     ??_Unguarded_partition_4:
   \   000000C8   0890A0E1           MOV      R9,R8
   \   000000CC   0BA0A0E1           MOV      R10,R11
   \   000000D0   310000EA           B        ??_Unguarded_partition_5
   \                     ??_Unguarded_partition_6:
   \   000000D4   04103BE5           LDR      R1,[R11, #-4]!
   \   000000D8   04004AE2           SUB      R0,R10,#+4
   \   000000DC   002090E5           LDR      R2,[R0, #+0]
   \   000000E0   00208BE5           STR      R2,[R11, #+0]
   \   000000E4   001080E5           STR      R1,[R0, #+0]
   \                     ??_Unguarded_partition_7:
   \   000000E8   04A04AE2           SUB      R10,R10,#+4
   \                     ??_Unguarded_partition_8:
   \   000000EC   0A0056E1           CMP      R6,R10
   \   000000F0   0D00002A           BCS      ??_Unguarded_partition_9
   \   000000F4   00109BE5           LDR      R1,[R11, #+0]
   \   000000F8   04001AE5           LDR      R0,[R10, #-4]
   \   000000FC   0520A0E1           MOV      R2,R5
   \   00000100   0FE0A0E1           MOV      LR,PC
   \   00000104   12FF2FE1           BX       R2
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   F5FFFF1A           BNE      ??_Unguarded_partition_7
   \   00000110   04101AE5           LDR      R1,[R10, #-4]
   \   00000114   00009BE5           LDR      R0,[R11, #+0]
   \   00000118   0520A0E1           MOV      R2,R5
   \   0000011C   0FE0A0E1           MOV      LR,PC
   \   00000120   12FF2FE1           BX       R2
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   E9FFFF0A           BEQ      ??_Unguarded_partition_6
   \                     ??_Unguarded_partition_9:
   \   0000012C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000130   00005AE1           CMP      R10,R0
   \   00000134   0B00001A           BNE      ??_Unguarded_partition_10
   \   00000138   040059E1           CMP      R9,R4
   \   0000013C   2C00001A           BNE      ??_Unguarded_partition_11
   \   00000140   00B08DE5           STR      R11,[SP, #+0]
   \   00000144   04808DE5           STR      R8,[SP, #+4]
   \   00000148   08009DE5           LDR      R0,[SP, #+8]
   \   0000014C   0D10A0E1           MOV      R1,SP
   \   00000150   0C0091E8           LDM      R1,{R2,R3}
   \   00000154   0C0080E8           STM      R0,{R2,R3}
   \   00000158   08009DE5           LDR      R0,[SP, #+8]
   \   0000015C   10D08DE2           ADD      SP,SP,#+16
   \   00000160   704FBDE8           POP      {R4-R6,R8-R11,LR}
   \   00000164   1EFF2FE1           BX       LR               ;; return
   \                     ??_Unguarded_partition_10:
   \   00000168   040059E1           CMP      R9,R4
   \   0000016C   2A00001A           BNE      ??_Unguarded_partition_12
   \   00000170   04A04AE2           SUB      R10,R10,#+4
   \   00000174   04B04BE2           SUB      R11,R11,#+4
   \   00000178   0B005AE1           CMP      R10,R11
   \   0000017C   00009A15           LDRNE    R0,[R10, #+0]
   \   00000180   00109B15           LDRNE    R1,[R11, #+0]
   \   00000184   00108A15           STRNE    R1,[R10, #+0]
   \   00000188   00008B15           STRNE    R0,[R11, #+0]
   \   0000018C   00009BE5           LDR      R0,[R11, #+0]
   \   00000190   041038E5           LDR      R1,[R8, #-4]!
   \   00000194   00108BE5           STR      R1,[R11, #+0]
   \   00000198   000088E5           STR      R0,[R8, #+0]
   \                     ??_Unguarded_partition_5:
   \   0000019C   040059E1           CMP      R9,R4
   \   000001A0   D1FFFF2A           BCS      ??_Unguarded_partition_8
   \   000001A4   001099E5           LDR      R1,[R9, #+0]
   \   000001A8   00009BE5           LDR      R0,[R11, #+0]
   \   000001AC   0520A0E1           MOV      R2,R5
   \   000001B0   0FE0A0E1           MOV      LR,PC
   \   000001B4   12FF2FE1           BX       R2
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0A00001A           BNE      ??_Unguarded_partition_13
   \   000001C0   00109BE5           LDR      R1,[R11, #+0]
   \   000001C4   000099E5           LDR      R0,[R9, #+0]
   \   000001C8   0520A0E1           MOV      R2,R5
   \   000001CC   0FE0A0E1           MOV      LR,PC
   \   000001D0   12FF2FE1           BX       R2
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   C3FFFF1A           BNE      ??_Unguarded_partition_8
   \   000001DC   001099E5           LDR      R1,[R9, #+0]
   \   000001E0   000098E5           LDR      R0,[R8, #+0]
   \   000001E4   ........           STR      R1,[R8], #+4
   \                     ??_Unguarded_partition_14:
   \   000001E8   000089E5           STR      R0,[R9, #+0]
   \                     ??_Unguarded_partition_13:
   \   000001EC   049089E2           ADD      R9,R9,#+4
   \   000001F0   E9FFFFEA           B        ??_Unguarded_partition_5
   \                     ??_Unguarded_partition_11:
   \   000001F4   090058E1           CMP      R8,R9
   \   000001F8   00009B15           LDRNE    R0,[R11, #+0]
   \   000001FC   00109815           LDRNE    R1,[R8, #+0]
   \   00000200   00108B15           STRNE    R1,[R11, #+0]
   \   00000204   00008815           STRNE    R0,[R8, #+0]
   \   00000208   001099E5           LDR      R1,[R9, #+0]
   \   0000020C   00009BE5           LDR      R0,[R11, #+0]
   \   00000210   048088E2           ADD      R8,R8,#+4
   \   00000214   ........           STR      R1,[R11], #+4
   \   00000218   F2FFFFEA           B        ??_Unguarded_partition_14
   \                     ??_Unguarded_partition_12:
   \   0000021C   000099E5           LDR      R0,[R9, #+0]
   \   00000220   04103AE5           LDR      R1,[R10, #-4]!
   \   00000224   001089E5           STR      R1,[R9, #+0]
   \   00000228   00008AE5           STR      R0,[R10, #+0]
   \   0000022C   EEFFFFEA           B        ??_Unguarded_partition_13

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Sort(CTOUser **, CTOUser **, int, bool (*)(CTOUser *, CTOUser *))
   \                     ??_Sort:
   \   00000000   F3472DE9           PUSH     {R0,R1,R4-R10,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0290A0E1           MOV      R9,R2
   \   00000010   0350A0E1           MOV      R5,R3
   \   00000014   030000EA           B        ??_Sort_1
   \                     ??_Sort_2:
   \   00000018   00109DE5           LDR      R1,[SP, #+0]
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   F6FFFFEB           BL       ??_Sort
   \   00000024   0A60A0E1           MOV      R6,R10
   \                     ??_Sort_1:
   \   00000028   2671A0E1           LSR      R7,R6,#+2
   \   0000002C   2481A0E1           LSR      R8,R4,#+2
   \   00000030   070048E0           SUB      R0,R8,R7
   \   00000034   210050E3           CMP      R0,#+33
   \   00000038   170000BA           BLT      ??_Sort_3
   \   0000003C   010059E3           CMP      R9,#+1
   \   00000040   1D0000BA           BLT      ??_Sort_4
   \   00000044   0530A0E1           MOV      R3,R5
   \   00000048   0420A0E1           MOV      R2,R4
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??_Unguarded_partition,??_Unguarded_partition??rA
   \   00000058   04A09DE5           LDR      R10,[SP, #+4]
   \   0000005C   A90F89E0           ADD      R0,R9,R9, LSR #+31
   \   00000060   C000A0E1           ASR      R0,R0,#+1
   \   00000064   A01F80E0           ADD      R1,R0,R0, LSR #+31
   \   00000068   C19080E0           ADD      R9,R0,R1, ASR #+1
   \   0000006C   00009DE5           LDR      R0,[SP, #+0]
   \   00000070   2A1148E0           SUB      R1,R8,R10, LSR #+2
   \   00000074   200167E0           RSB      R0,R7,R0, LSR #+2
   \   00000078   010050E1           CMP      R0,R1
   \   0000007C   0530A0E1           MOV      R3,R5
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   E3FFFFBA           BLT      ??_Sort_2
   \   00000088   0410A0E1           MOV      R1,R4
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   DAFFFFEB           BL       ??_Sort
   \   00000094   00409DE5           LDR      R4,[SP, #+0]
   \   00000098   E2FFFFEA           B        ??_Sort_1
   \                     ??_Sort_3:
   \   0000009C   020050E3           CMP      R0,#+2
   \   000000A0   030000BA           BLT      ??_Sort_5
   \   000000A4   0520A0E1           MOV      R2,R5
   \   000000A8   0410A0E1           MOV      R1,R4
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     ??_Insertion_sort,??_Insertion_sort??rA
   \                     ??_Sort_5:
   \   000000B4   F347BDE8           POP      {R0,R1,R4-R10,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
   \                     ??_Sort_4:
   \   000000BC   0520A0E1           MOV      R2,R5
   \   000000C0   0410A0E1           MOV      R1,R4
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           _BLF     ??make_heap,??make_heap??rA
   \                     ??_Sort_6:
   \   000000CC   240167E0           RSB      R0,R7,R4, LSR #+2
   \   000000D0   020050E3           CMP      R0,#+2
   \   000000D4   F6FFFFBA           BLT      ??_Sort_5
   \   000000D8   0520A0E1           MOV      R2,R5
   \   000000DC   0410A0E1           MOV      R1,R4
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           _BLF     ??pop_heap,??pop_heap??rA
   \   000000E8   044044E2           SUB      R4,R4,#+4
   \   000000EC   F6FFFFEA           B        ??_Sort_6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_4
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_5
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_4:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_5:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_6
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_7
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_7:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_8
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_9
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_10
   \                     ??_Erase_11:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_10:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_11
   \                     ??_Erase_9:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_8:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_12
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_13
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_13:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_12
   \                     ??_Erase_6:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_14
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_15
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_12:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_16
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_22
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_22
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_23
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_24
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_21
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_25
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_26
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_21
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_20
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_27
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Pairib _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::insert(pair<unsigned int const, CTOUser *> const &)
   \                     ??insert:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0800001A           BNE      ??insert_4
   \   00000028   001097E5           LDR      R1,[R7, #+0]
   \   0000002C   102090E5           LDR      R2,[R0, #+16]
   \   00000030   0080A0E1           MOV      R8,R0
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   00009035           LDRCC    R0,[R0, #+0]
   \   0000003C   0190A033           MOVCC    R9,#+1
   \   00000040   08009025           LDRCS    R0,[R0, #+8]
   \   00000044   0090A023           MOVCS    R9,#+0
   \   00000048   F3FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   0150A0E3           MOV      R5,#+1
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   0B00000A           BEQ      ??insert_5
   \   0000005C   001096E5           LDR      R1,[R6, #+0]
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   0700001A           BNE      ??insert_6
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   0450CDE5           STRB     R5,[SP, #+4]
   \   00000084   0B0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000088   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   0000008C   101090E5           LDR      R1,[R0, #+16]
   \   00000090   002097E5           LDR      R2,[R7, #+0]
   \   00000094   020051E1           CMP      R1,R2
   \   00000098   0300002A           BCS      ??insert_9
   \   0000009C   0730A0E1           MOV      R3,R7
   \   000000A0   0820A0E1           MOV      R2,R8
   \   000000A4   0910A0E1           MOV      R1,R9
   \   000000A8   F1FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000AC   00008DE5           STR      R0,[SP, #+0]
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   030090E8           LDM      R0,{R0,R1}
   \   000000C0   030084E8           STM      R4,{R0,R1}
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Pairib _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::insert(pair<int const, CTOUser *> const &)
   \                     ??insert_2:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0800001A           BNE      ??insert_18
   \   00000028   001097E5           LDR      R1,[R7, #+0]
   \   0000002C   102090E5           LDR      R2,[R0, #+16]
   \   00000030   0080A0E1           MOV      R8,R0
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   000090B5           LDRLT    R0,[R0, #+0]
   \   0000003C   0190A0B3           MOVLT    R9,#+1
   \   00000040   080090A5           LDRGE    R0,[R0, #+8]
   \   00000044   0090A0A3           MOVGE    R9,#+0
   \   00000048   F3FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   0150A0E3           MOV      R5,#+1
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   0B00000A           BEQ      ??insert_19
   \   0000005C   001096E5           LDR      R1,[R6, #+0]
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   0700001A           BNE      ??insert_20
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   0450CDE5           STRB     R5,[SP, #+4]
   \   00000084   0B0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000088   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   0000008C   101090E5           LDR      R1,[R0, #+16]
   \   00000090   002097E5           LDR      R2,[R7, #+0]
   \   00000094   020051E1           CMP      R1,R2
   \   00000098   030000AA           BGE      ??insert_23
   \   0000009C   0730A0E1           MOV      R3,R7
   \   000000A0   0820A0E1           MOV      R2,R8
   \   000000A4   0910A0E1           MOV      R1,R9
   \   000000A8   F1FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000AC   00008DE5           STR      R0,[SP, #+0]
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   030090E8           LDM      R0,{R0,R1}
   \   000000C0   030084E8           STM      R4,{R0,R1}
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_4
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_4:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_6
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_5:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator)
   \                     ??erase_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_7
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_8
   \                     ??erase_9:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_7:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_9
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_8:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_2:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_10
   \                     ??erase_11:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_10:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_11
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(int)
   \                     ??erase_3:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range_1,??equal_range??rA_1
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_12
   \                     ??erase_13:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_12:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_13
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase_1,??erase??rA_1
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::clear()
   \                     ??clear_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_2
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::iterator _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::find(unsigned int)
   \                     ??find:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_2
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A021           MOVCS    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_2:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::find(int)
   \                     ??find_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound_2,??_Lbound??rA_1
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_3
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A0A1           MOVGE    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_3:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound_1,??_Lbound??rA_2
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Pairii _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::equal_range(int)
   \                     ??equal_range_1:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound_1,??_Ubound??rA_1
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound_2,??_Lbound??rA_1
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_5
   \                     ??_Copy_2:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_5:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_6
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_7
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_7:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_6:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_30
   \                     ??_Erase_31:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_30:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_31
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr)
   \                     ??_Erase_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_32
   \                     ??_Erase_33:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_3
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_32:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_33
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::iterator _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr, pair<unsigned int const, CTOUser *> const &)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0380A0E1           MOV      R8,R3
   \   00000014   1800A0E3           MOV      R0,#+24
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   0A00000A           BEQ      ??_Insert_14
   \   00000024   004087E5           STR      R4,[R7, #+0]
   \   00000028   046087E5           STR      R6,[R7, #+4]
   \   0000002C   084087E5           STR      R4,[R7, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C7E5           STRB     R0,[R7, #+12]
   \   00000038   0D00C7E5           STRB     R0,[R7, #+13]
   \   0000003C   001098E5           LDR      R1,[R8, #+0]
   \   00000040   100087E2           ADD      R0,R7,#+16
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   041098E5           LDR      R1,[R8, #+4]
   \   0000004C   041080E5           STR      R1,[R0, #+4]
   \                     ??_Insert_14:
   \   00000050   0730A0E1           MOV      R3,R7
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   F041BDE8           POP      {R4-R8,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr, pair<int const, CTOUser *> const &)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0380A0E1           MOV      R8,R3
   \   00000014   1800A0E3           MOV      R0,#+24
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   0A00000A           BEQ      ??_Insert_15
   \   00000024   004087E5           STR      R4,[R7, #+0]
   \   00000028   046087E5           STR      R6,[R7, #+4]
   \   0000002C   084087E5           STR      R4,[R7, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C7E5           STRB     R0,[R7, #+12]
   \   00000038   0D00C7E5           STRB     R0,[R7, #+13]
   \   0000003C   001098E5           LDR      R1,[R8, #+0]
   \   00000040   100087E2           ADD      R0,R7,#+16
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   041098E5           LDR      R1,[R8, #+4]
   \   0000004C   041080E5           STR      R1,[R0, #+4]
   \                     ??_Insert_15:
   \   00000050   0730A0E1           MOV      R3,R7
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   F041BDE8           POP      {R4-R8,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Lbound(unsigned int) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_3:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_3

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound_1:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_4:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Lbound(int) const
   \                     ??_Lbound_2:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_5:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   082092B5           LDRLT    R2,[R2, #+8]
   \   0000001C   0200A0A1           MOVGE    R0,R2
   \   00000020   002092A5           LDRGE    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_5

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_2:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_2

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Ubound(int) const
   \                     ??_Ubound_1:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_3:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   082092A5           LDRGE    R2,[R2, #+8]
   \   0000001C   0200A0B1           MOVLT    R0,R2
   \   00000020   002092B5           LDRLT    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_3

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<unsigned int>::set(set<unsigned int> const &)
   \                     ??set:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy,??_Copy??rA_1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs map<int, CTOUser *>::~map()
   \                     `?~map_1`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs map<unsigned int, CTOUser *>::~map()
   \                     `?~map`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_3,??_Erase??rA_3
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CTOUser ** _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Insert(CTOUser **, CTOUser * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CTOUser ** _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Make_room(CTOUser **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Push_back0(CTOUser *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<CTOUser *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
   \                     ??PRogramObjectBase:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   8C009FE5           LDR      R0,??PRogramObjectBase_1  ;; ??__vtbl_1
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   A40084E5           STR      R0,[R4, #+164]
   \   00000014   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000018   081085E2           ADD      R1,R5,#+8
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
   \   00000020   040095E5           LDR      R0,[R5, #+4]
   \   00000024   040084E5           STR      R0,[R4, #+4]
   \   00000028   080084E2           ADD      R0,R4,#+8
   \   0000002C   ........           _BLF     ??set,??set??rA
   \   00000030   201085E2           ADD      R1,R5,#+32
   \   00000034   200084E2           ADD      R0,R4,#+32
   \   00000038   ........           _BLF     ??set,??set??rA
   \   0000003C   380095E5           LDR      R0,[R5, #+56]
   \   00000040   441085E2           ADD      R1,R5,#+68
   \   00000044   380084E5           STR      R0,[R4, #+56]
   \   00000048   3C00D5E5           LDRB     R0,[R5, #+60]
   \   0000004C   3C00C4E5           STRB     R0,[R4, #+60]
   \   00000050   400095E5           LDR      R0,[R5, #+64]
   \   00000054   400084E5           STR      R0,[R4, #+64]
   \   00000058   440084E2           ADD      R0,R4,#+68
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   601085E2           ADD      R1,R5,#+96
   \   00000064   600084E2           ADD      R0,R4,#+96
   \   00000068   ........           _BLF     ??string,??string??rA
   \   0000006C   7C1085E2           ADD      R1,R5,#+124
   \   00000070   7C0084E2           ADD      R0,R4,#+124
   \   00000074   ........           _BLF     ??string,??string??rA
   \   00000078   980095E5           LDR      R0,[R5, #+152]
   \   0000007C   980084E5           STR      R0,[R4, #+152]
   \   00000080   9C0095E5           LDR      R0,[R5, #+156]
   \   00000084   9C0084E5           STR      R0,[R4, #+156]
   \   00000088   A00095E5           LDR      R0,[R5, #+160]
   \   0000008C   A00084E5           STR      R0,[R4, #+160]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   3040BDE8           POP      {R4,R5,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
   \                     ??PRogramObjectBase_1:
   \   0000009C   ........           DC32     ??__vtbl_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CargoTypeObject::CargoTypeObject(CargoTypeObject const &)
   \                     ??CargoTypeObject:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000010   B4009FE5           LDR      R0,??CargoTypeObject_2  ;; ??__vtbl_2
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   A800D5E5           LDRB     R0,[R5, #+168]
   \   0000001C   A800C4E5           STRB     R0,[R4, #+168]
   \   00000020   A900D5E5           LDRB     R0,[R5, #+169]
   \   00000024   A900C4E5           STRB     R0,[R4, #+169]
   \   00000028   AC0095E5           LDR      R0,[R5, #+172]
   \   0000002C   AC0084E5           STR      R0,[R4, #+172]
   \   00000030   B00095E5           LDR      R0,[R5, #+176]
   \   00000034   B00084E5           STR      R0,[R4, #+176]
   \   00000038   B40095E5           LDR      R0,[R5, #+180]
   \   0000003C   B81095E5           LDR      R1,[R5, #+184]
   \   00000040   B40084E5           STR      R0,[R4, #+180]
   \   00000044   B81084E5           STR      R1,[R4, #+184]
   \   00000048   BC0095E5           LDR      R0,[R5, #+188]
   \   0000004C   C01095E5           LDR      R1,[R5, #+192]
   \   00000050   BC0084E5           STR      R0,[R4, #+188]
   \   00000054   C01084E5           STR      R1,[R4, #+192]
   \   00000058   C40095E5           LDR      R0,[R5, #+196]
   \   0000005C   C81095E5           LDR      R1,[R5, #+200]
   \   00000060   C40084E5           STR      R0,[R4, #+196]
   \   00000064   C81084E5           STR      R1,[R4, #+200]
   \   00000068   CC0095E5           LDR      R0,[R5, #+204]
   \   0000006C   D01095E5           LDR      R1,[R5, #+208]
   \   00000070   CC0084E5           STR      R0,[R4, #+204]
   \   00000074   D01084E5           STR      R1,[R4, #+208]
   \   00000078   D40095E5           LDR      R0,[R5, #+212]
   \   0000007C   D81095E5           LDR      R1,[R5, #+216]
   \   00000080   D40084E5           STR      R0,[R4, #+212]
   \   00000084   D81084E5           STR      R1,[R4, #+216]
   \   00000088   DC0095E5           LDR      R0,[R5, #+220]
   \   0000008C   E01095E5           LDR      R1,[R5, #+224]
   \   00000090   DC0084E5           STR      R0,[R4, #+220]
   \   00000094   E01084E5           STR      R1,[R4, #+224]
   \   00000098   E40095E5           LDR      R0,[R5, #+228]
   \   0000009C   E81095E5           LDR      R1,[R5, #+232]
   \   000000A0   E40084E5           STR      R0,[R4, #+228]
   \   000000A4   E81084E5           STR      R1,[R4, #+232]
   \   000000A8   EC0095E5           LDR      R0,[R5, #+236]
   \   000000AC   EC0084E5           STR      R0,[R4, #+236]
   \   000000B0   F00095E5           LDR      R0,[R5, #+240]
   \   000000B4   F00084E5           STR      R0,[R4, #+240]
   \   000000B8   F40095E5           LDR      R0,[R5, #+244]
   \   000000BC   F40084E5           STR      R0,[R4, #+244]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
   \                     ??CargoTypeObject_2:
   \   000000CC   ........           DC32     ??__vtbl_2

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CTOUser::CTOUser(CTOUser const &)
   \                     ??CTOUser:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??CargoTypeObject,??CargoTypeObject??rA
   \   00000010   2C009FE5           LDR      R0,??CTOUser_2   ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   F80095E5           LDR      R0,[R5, #+248]
   \   0000001C   F80084E5           STR      R0,[R4, #+248]
   \   00000020   FC0095E5           LDR      R0,[R5, #+252]
   \   00000024   FC0084E5           STR      R0,[R4, #+252]
   \   00000028   0001D5E5           LDRB     R0,[R5, #+256]
   \   0000002C   0001C4E5           STRB     R0,[R4, #+256]
   \   00000030   0101D5E5           LDRB     R0,[R5, #+257]
   \   00000034   0101C4E5           STRB     R0,[R4, #+257]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   3040BDE8           POP      {R4,R5,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return
   \                     ??CTOUser_2:
   \   00000044   ........           DC32     ??__vtbl
      6          #ifdef ANWIN
      7              #include "MainUnit.h"
      8          #endif
      9          #pragma hdrstop
     10          #ifdef BORLAND
     11              #pragma package(smart_init)
     12          #endif
     13          
     14          //---------------------------------------------------------------------------

   \                                 In segment DATA_C, align 4, align-sorted
     15          vector<CTOUser *>CTOUser::CargoTable;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??CargoTable, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjectSet, `?~set`
   \              ............
   \   00000018   ............       DC32 ?_5, ??CargoMap, `?~map`
   \              ............
   \   00000024   ............       DC32 ?_7, ??CargoTypeKeyMap, `?~map_1`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
     16          set<PRogramObjectBase *>CTOUser::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
     17          map<unsigned, CTOUser *>CTOUser::CargoMap;
   \                     ??CargoMap:
   \   00000018                      DS8 24
     18          map<int, CTOUser *>CTOUser::CargoTypeKeyMap;
   \                     ??CargoTypeKeyMap:
   \   00000030                      DS8 24
   \                     ??CargoTable:
   \   00000048                      DS8 12
     19          CTOUser *CTOUser::InputBuffer = NULL;
   \                     ??InputBuffer:
   \   00000054                      DS8 4
     20          
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          CTOUser::CTOUser(bool Fixed, bool AddToList) : CargoTypeObject(Fixed, AddToList) {
   \                     ??CTOUser_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   ........           LDR      R7,??DataTable4  ;; ??__vtbl
     23              unsigned NumberOfCargoTypes = CargoTable.size();
   \   00000008   ........           LDR      R6,??DataTable5  ;; ??ObjectSet
   \   0000000C   4CD04DE2           SUB      SP,SP,#+76
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   ........           _BLF     ??CargoTypeObject_1,??CargoTypeObject??rA_1
   \   0000001C   A47084E5           STR      R7,[R4, #+164]
   \   00000020   4C0096E5           LDR      R0,[R6, #+76]
   \   00000024   481096E5           LDR      R1,[R6, #+72]
     24              IDNumber = (C_PRO_USER_CARGO_TYPE << 16) + NumberOfCargoTypes;
     25              CargoMap.insert(pair<unsigned, CTOUser *>(IDNumber, this));
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   010040E0           SUB      R0,R0,R1
   \   00000030   2081A0E1           LSR      R8,R0,#+2
   \   00000034   5006A0E3           MOV      R0,#+83886080
   \   00000038   AB0880E3           ORR      R0,R0,#0xAB0000
   \   0000003C   080080E0           ADD      R0,R0,R8
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   04408DE5           STR      R4,[SP, #+4]
   \   0000004C   181086E2           ADD      R1,R6,#+24
   \   00000050   18008DE2           ADD      R0,SP,#+24
   \   00000054   ........           _BLF     ??insert,??insert??rA
     26              //CargoTypeKeyMap.insert(pair<int, CTOUser *>(NumberOfCargoTypes, this));
     27          
     28              Type = C_PRO_USER_CARGO_TYPE;
   \   00000058   AB00A0E3           MOV      R0,#+171
   \   0000005C   500E80E3           ORR      R0,R0,#0x500
   \   00000060   A00084E5           STR      R0,[R4, #+160]
     29              CargoTypeKey  = NumberOfCargoTypes;
   \   00000064   EC8084E5           STR      R8,[R4, #+236]
     30              HighTempLimit = 50.0;
   \   00000068   4004A0E3           MOV      R0,#+1073741824
   \   0000006C   920780E3           ORR      R0,R0,#0x2480000
   \   00000070   F80084E5           STR      R0,[R4, #+248]
     31              LowTempLimit  = 0.0;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   FC0084E5           STR      R0,[R4, #+252]
     32              HighTempEnable= false;
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   0011C4E5           STRB     R1,[R4, #+256]
     33              LowTempEnable = false;
   \   00000084   0101C4E5           STRB     R0,[R4, #+257]
     34              Name          = "(No name)";
   \   00000088   601087E2           ADD      R1,R7,#+96
   \   0000008C   30008DE2           ADD      R0,SP,#+48
   \   00000090   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000094   ........           LDR      R1,??DataTable3  ;; ??npos
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   003091E5           LDR      R3,[R1, #+0]
   \   000000A0   0010A0E1           MOV      R1,R0
   \   000000A4   440084E2           ADD      R0,R4,#+68
   \   000000A8   ........           _BLF     ??assign,??assign??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   30008DE2           ADD      R0,SP,#+48
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
     35              NumberOfCargoTypes++;
   \   000000BC   010088E2           ADD      R0,R8,#+1
     36              if ( Fixed ) {
   \   000000C0   000055E3           CMP      R5,#+0
     37                  Colour = (TColor)((NumberOfCargoTypes << 24) | (NumberOfCargoTypes << 16) | NumberOfCargoTypes);
   \   000000C4   0018A011           LSLNE    R1,R0,#+16
   \   000000C8   001C8111           ORRNE    R1,R1,R0, LSL #+24
   \   000000CC   01008011           ORRNE    R0,R0,R1
   \   000000D0   F4008415           STRNE    R0,[R4, #+244]
     38              }
     39              CargoMap.insert(pair<unsigned,CTOUser*>(IDNumber, this));
   \   000000D4   9C1094E5           LDR      R1,[R4, #+156]
   \   000000D8   08208DE2           ADD      R2,SP,#+8
   \   000000DC   08108DE5           STR      R1,[SP, #+8]
   \   000000E0   0C408DE5           STR      R4,[SP, #+12]
   \   000000E4   181086E2           ADD      R1,R6,#+24
   \   000000E8   18008DE2           ADD      R0,SP,#+24
   \   000000EC   ........           _BLF     ??insert,??insert??rA
     40              CargoTypeKeyMap.insert(pair<unsigned,CTOUser*>(CargoTypeKey, this));
   \   000000F0   EC1094E5           LDR      R1,[R4, #+236]
   \   000000F4   10208DE2           ADD      R2,SP,#+16
   \   000000F8   10108DE5           STR      R1,[SP, #+16]
   \   000000FC   14408DE5           STR      R4,[SP, #+20]
   \   00000100   301086E2           ADD      R1,R6,#+48
   \   00000104   20008DE2           ADD      R0,SP,#+32
   \   00000108   ........           _BLF     ??insert_2,??insert??rA_1
     41              ObjectSet.insert(this);
   \   0000010C   0420A0E1           MOV      R2,R4
   \   00000110   0610A0E1           MOV      R1,R6
   \   00000114   28008DE2           ADD      R0,SP,#+40
   \   00000118   ........           _BLF     ??insert_1,??insert??rA_2
     42          }
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   4CD08DE2           ADD      SP,SP,#+76
   \   00000124   F041BDE8           POP      {R4-R8,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          CTOUser::~CTOUser(void) {
   \                     `?~CTOUser`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0E00000A           BEQ      `?~CTOUser_1`
   \   00000014   ........           LDR      R0,??DataTable4  ;; ??__vtbl
     45              ObjectSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable5  ;; ??ObjectSet
   \   00000024   ........           _BLF     ??erase_2,??erase??rA_2
     46              EraseFromVector(this);
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       ??EraseFromVector
     47          }
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     `?~CargoTypeObject`,`?~CargoTypeObject??rA`
   \   00000040   010015E3           TST      R5,#0x1
   \   00000044   0100000A           BEQ      `?~CTOUser_1`
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~CTOUser_1`:
   \   00000050   ........           B        ??Subroutine30_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0400A0E1           MOV      R0,R4
   \                     ??Subroutine30_0:
   \   00000004   3040BDE8           POP      {R4,R5,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     48          
     49          ///////////////////////////////////////////////////////////////
     50          //
     51          // Routines for Saving of Settings
     52          //
     53          ///////////////////////////////////////////////////////////////
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void CTOUser::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   9ADE4DE2           SUB      SP,SP,#+2464
   \   00000008   0040A0E1           MOV      R4,R0
     56          
     57              if ( IsModified || WriteAll ) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   800F9F05           LDREQ    R0,??SaveSettings_1  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
     58                  IsModified = false;
   \   00000024   0000A013           MOVNE    R0,#+0
   \   00000028   0000C415           STRBNE   R0,[R4, #+0]
     59                  if ( IsDefined ) {
   \   0000002C   A900D415           LDRBNE   R0,[R4, #+169]
   \   00000030   00005013           CMPNE    R0,#+0
   \   00000034   DE03000A           BEQ      ??SaveSettings_2
     60                      AnsiString LocalString;
     61                      AnsiString IdNumStr;
     62                      IdNumStr.cat_sprintf("0x%0x", IDNumber);
     63                      LocalString += KeyWord(C_PRO_USER_CARGO_TYPE) + IdNumStr + CrLfStr;
   \   00000038   806F9FE5           LDR      R6,??SaveSettings_3  ;; CrLfStr
     64                      LocalString += TabStr1 + KeyWord(C_CT_CARGO_TYPE_KEY) + (AnsiString)CargoTypeKey + CrLfStr;
   \   0000003C   808F9FE5           LDR      R8,??SaveSettings_3+0x4  ;; TabStr1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000048   F8008DE2           ADD      R0,SP,#+248
   \   0000004C   800E80E2           ADD      R0,R0,#+2048
   \   00000050   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000054   9C3094E5           LDR      R3,[R4, #+156]
   \   00000058   682F9FE5           LDR      R2,??SaveSettings_3+0x8  ;; `?<Constant "0x%0x">`
   \   0000005C   451F8DE2           ADD      R1,SP,#+276
   \   00000060   801E81E2           ADD      R1,R1,#+2048
   \   00000064   F8008DE2           ADD      R0,SP,#+248
   \   00000068   800E80E2           ADD      R0,R0,#+2048
   \   0000006C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   450F8DE2           ADD      R0,SP,#+276
   \   0000007C   800E80E2           ADD      R0,R0,#+2048
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   AB10A0E3           MOV      R1,#+171
   \   00000088   501E81E3           ORR      R1,R1,#0x500
   \   0000008C   A8008DE2           ADD      R0,SP,#+168
   \   00000090   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000094   F8208DE2           ADD      R2,SP,#+248
   \   00000098   802E82E2           ADD      R2,R2,#+2048
   \   0000009C   A8108DE2           ADD      R1,SP,#+168
   \   000000A0   8C008DE2           ADD      R0,SP,#+140
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   0620A0E1           MOV      R2,R6
   \   000000AC   8C108DE2           ADD      R1,SP,#+140
   \   000000B0   70008DE2           ADD      R0,SP,#+112
   \   000000B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B8   ........           LDR      R0,??DataTable6  ;; ??npos
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   007090E5           LDR      R7,[R0, #+0]
   \   000000C4   70108DE2           ADD      R1,SP,#+112
   \   000000C8   0730A0E1           MOV      R3,R7
   \   000000CC   0D00A0E1           MOV      R0,SP
   \   000000D0   ........           _BLF     ??append,??append??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   70008DE2           ADD      R0,SP,#+112
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   8C008DE2           ADD      R0,SP,#+140
   \   000000F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   A8008DE2           ADD      R0,SP,#+168
   \   00000100   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000104   EC1094E5           LDR      R1,[R4, #+236]
   \   00000108   930E8DE2           ADD      R0,SP,#+2352
   \   0000010C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000110   0090A0E1           MOV      R9,R0
   \   00000114   AD10A0E3           MOV      R1,#+173
   \   00000118   501E81E3           ORR      R1,R1,#0x500
   \   0000011C   460F8DE2           ADD      R0,SP,#+280
   \   00000120   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000124   462F8DE2           ADD      R2,SP,#+280
   \   00000128   0810A0E1           MOV      R1,R8
   \   0000012C   FC008DE2           ADD      R0,SP,#+252
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   0920A0E1           MOV      R2,R9
   \   00000138   FC108DE2           ADD      R1,SP,#+252
   \   0000013C   E0008DE2           ADD      R0,SP,#+224
   \   00000140   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000144   0620A0E1           MOV      R2,R6
   \   00000148   E0108DE2           ADD      R1,SP,#+224
   \   0000014C   C4008DE2           ADD      R0,SP,#+196
   \   00000150   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000154   0730A0E1           MOV      R3,R7
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   C4108DE2           ADD      R1,SP,#+196
   \   00000160   0D00A0E1           MOV      R0,SP
   \   00000164   ........           _BLF     ??append,??append??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   C4008DE2           ADD      R0,SP,#+196
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   E0008DE2           ADD      R0,SP,#+224
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   930E8DE2           ADD      R0,SP,#+2352
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   FC008DE2           ADD      R0,SP,#+252
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   460F8DE2           ADD      R0,SP,#+280
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     65                      LocalString += TabStr1 + KeyWord(C_CT_BASIC_CARGO_TYPE) + (AnsiString)BaseCargoType + CrLfStr;
   \   000001B8   F01094E5           LDR      R1,[R4, #+240]
   \   000001BC   530F8DE2           ADD      R0,SP,#+332
   \   000001C0   800E80E2           ADD      R0,R0,#+2048
   \   000001C4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001C8   0090A0E1           MOV      R9,R0
   \   000001CC   AE10A0E3           MOV      R1,#+174
   \   000001D0   501E81E3           ORR      R1,R1,#0x500
   \   000001D4   620F8DE2           ADD      R0,SP,#+392
   \   000001D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001DC   622F8DE2           ADD      R2,SP,#+392
   \   000001E0   0810A0E1           MOV      R1,R8
   \   000001E4   5B0F8DE2           ADD      R0,SP,#+364
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0920A0E1           MOV      R2,R9
   \   000001F0   5B1F8DE2           ADD      R1,SP,#+364
   \   000001F4   540F8DE2           ADD      R0,SP,#+336
   \   000001F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001FC   0620A0E1           MOV      R2,R6
   \   00000200   541F8DE2           ADD      R1,SP,#+336
   \   00000204   4D0F8DE2           ADD      R0,SP,#+308
   \   00000208   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000020C   0730A0E1           MOV      R3,R7
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   4D1F8DE2           ADD      R1,SP,#+308
   \   00000218   0D00A0E1           MOV      R0,SP
   \   0000021C   ........           _BLF     ??append,??append??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   4D0F8DE2           ADD      R0,SP,#+308
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   540F8DE2           ADD      R0,SP,#+336
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   530F8DE2           ADD      R0,SP,#+332
   \   0000024C   800E80E2           ADD      R0,R0,#+2048
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   620F8DE2           ADD      R0,SP,#+392
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
     66                      LocalString += TabStr1 + KeyWord(C_CT_DB_IDNUMBER) + (AnsiString)DB_IdNumber + CrLfStr;
   \   00000274   B01094E5           LDR      R1,[R4, #+176]
   \   00000278   5A0F8DE2           ADD      R0,SP,#+360
   \   0000027C   800E80E2           ADD      R0,R0,#+2048
   \   00000280   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000284   0090A0E1           MOV      R9,R0
   \   00000288   BF10A0E3           MOV      R1,#+191
   \   0000028C   501E81E3           ORR      R1,R1,#0x500
   \   00000290   7E0F8DE2           ADD      R0,SP,#+504
   \   00000294   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000298   7E2F8DE2           ADD      R2,SP,#+504
   \   0000029C   0810A0E1           MOV      R1,R8
   \   000002A0   770F8DE2           ADD      R0,SP,#+476
   \   000002A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A8   0920A0E1           MOV      R2,R9
   \   000002AC   771F8DE2           ADD      R1,SP,#+476
   \   000002B0   700F8DE2           ADD      R0,SP,#+448
   \   000002B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002B8   0620A0E1           MOV      R2,R6
   \   000002BC   701F8DE2           ADD      R1,SP,#+448
   \   000002C0   690F8DE2           ADD      R0,SP,#+420
   \   000002C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002C8   0730A0E1           MOV      R3,R7
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   691F8DE2           ADD      R1,SP,#+420
   \   000002D4   0D00A0E1           MOV      R0,SP
   \   000002D8   ........           _BLF     ??append,??append??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   690F8DE2           ADD      R0,SP,#+420
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   700F8DE2           ADD      R0,SP,#+448
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   5A0F8DE2           ADD      R0,SP,#+360
   \   00000308   800E80E2           ADD      R0,R0,#+2048
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   770F8DE2           ADD      R0,SP,#+476
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000320   0020A0E3           MOV      R2,#+0
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   7E0F8DE2           ADD      R0,SP,#+504
   \   0000032C   ........           _BLF     ??_Tidy,??_Tidy??rA
     67                      LocalString += TabStr1 + KeyWord(C_CT_IS_DEFINED) + CrLfStr;
   \   00000330   B810A0E3           MOV      R1,#+184
   \   00000334   501E81E3           ORR      R1,R1,#0x500
   \   00000338   930F8DE2           ADD      R0,SP,#+588
   \   0000033C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000340   932F8DE2           ADD      R2,SP,#+588
   \   00000344   0810A0E1           MOV      R1,R8
   \   00000348   8C0F8DE2           ADD      R0,SP,#+560
   \   0000034C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000350   0620A0E1           MOV      R2,R6
   \   00000354   8C1F8DE2           ADD      R1,SP,#+560
   \   00000358   850F8DE2           ADD      R0,SP,#+532
   \   0000035C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000360   0730A0E1           MOV      R3,R7
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   851F8DE2           ADD      R1,SP,#+532
   \   0000036C   0D00A0E1           MOV      R0,SP
   \   00000370   ........           _BLF     ??append,??append??rA
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   850F8DE2           ADD      R0,SP,#+532
   \   00000380   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   0110A0E3           MOV      R1,#+1
   \   0000038C   8C0F8DE2           ADD      R0,SP,#+560
   \   00000390   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0110A0E3           MOV      R1,#+1
   \   0000039C   930F8DE2           ADD      R0,SP,#+588
   \   000003A0   ........           _BLF     ??_Tidy,??_Tidy??rA
     68                      LocalString += TabStr1 + KeyWord(C_CT_NAME) + Name + CrLfStr;
   \   000003A4   B710A0E3           MOV      R1,#+183
   \   000003A8   501E81E3           ORR      R1,R1,#0x500
   \   000003AC   AF0F8DE2           ADD      R0,SP,#+700
   \   000003B0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003B4   AF2F8DE2           ADD      R2,SP,#+700
   \   000003B8   0810A0E1           MOV      R1,R8
   \   000003BC   A80F8DE2           ADD      R0,SP,#+672
   \   000003C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C4   442084E2           ADD      R2,R4,#+68
   \   000003C8   A81F8DE2           ADD      R1,SP,#+672
   \   000003CC   A10F8DE2           ADD      R0,SP,#+644
   \   000003D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D4   0620A0E1           MOV      R2,R6
   \   000003D8   A11F8DE2           ADD      R1,SP,#+644
   \   000003DC   9A0F8DE2           ADD      R0,SP,#+616
   \   000003E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E4   0730A0E1           MOV      R3,R7
   \   000003E8   0020A0E3           MOV      R2,#+0
   \   000003EC   9A1F8DE2           ADD      R1,SP,#+616
   \   000003F0   0D00A0E1           MOV      R0,SP
   \   000003F4   ........           _BLF     ??append,??append??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   9A0F8DE2           ADD      R0,SP,#+616
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   A10F8DE2           ADD      R0,SP,#+644
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   A80F8DE2           ADD      R0,SP,#+672
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   AF0F8DE2           ADD      R0,SP,#+700
   \   00000434   ........           _BLF     ??_Tidy,??_Tidy??rA
     69                      LocalString += TabStr1 + KeyWord(C_CT_COLOUR) + (AnsiString)((int)Colour) + CrLfStr;
   \   00000438   F41094E5           LDR      R1,[R4, #+244]
   \   0000043C   610F8DE2           ADD      R0,SP,#+388
   \   00000440   800E80E2           ADD      R0,R0,#+2048
   \   00000444   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000448   0090A0E1           MOV      R9,R0
   \   0000044C   B610A0E3           MOV      R1,#+182
   \   00000450   501E81E3           ORR      R1,R1,#0x500
   \   00000454   CB0F8DE2           ADD      R0,SP,#+812
   \   00000458   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000045C   CB2F8DE2           ADD      R2,SP,#+812
   \   00000460   0810A0E1           MOV      R1,R8
   \   00000464   C40F8DE2           ADD      R0,SP,#+784
   \   00000468   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000046C   0920A0E1           MOV      R2,R9
   \   00000470   C41F8DE2           ADD      R1,SP,#+784
   \   00000474   BD0F8DE2           ADD      R0,SP,#+756
   \   00000478   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000047C   0620A0E1           MOV      R2,R6
   \   00000480   BD1F8DE2           ADD      R1,SP,#+756
   \   00000484   B60F8DE2           ADD      R0,SP,#+728
   \   00000488   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000048C   0730A0E1           MOV      R3,R7
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   B61F8DE2           ADD      R1,SP,#+728
   \   00000498   0D00A0E1           MOV      R0,SP
   \   0000049C   ........           _BLF     ??append,??append??rA
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   0110A0E3           MOV      R1,#+1
   \   000004A8   B60F8DE2           ADD      R0,SP,#+728
   \   000004AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0110A0E3           MOV      R1,#+1
   \   000004B8   BD0F8DE2           ADD      R0,SP,#+756
   \   000004BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   610F8DE2           ADD      R0,SP,#+388
   \   000004CC   800E80E2           ADD      R0,R0,#+2048
   \   000004D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D4   0020A0E3           MOV      R2,#+0
   \   000004D8   0110A0E3           MOV      R1,#+1
   \   000004DC   C40F8DE2           ADD      R0,SP,#+784
   \   000004E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E4   0020A0E3           MOV      R2,#+0
   \   000004E8   0110A0E3           MOV      R1,#+1
   \   000004EC   CB0F8DE2           ADD      R0,SP,#+812
   \   000004F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     70          
     71                      LocalString += TabStr1 + KeyWord(C_CT_OD1) + TabStr1    + FloatToAnsiString(OD1, 8, 5) + CrLfStr;
   \   000004F4   B40094E5           LDR      R0,[R4, #+180]
   \   000004F8   B81094E5           LDR      R1,[R4, #+184]
   \   000004FC   08A0A0E3           MOV      R10,#+8
   \   00000500   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000504   0010A0E1           MOV      R1,R0
   \   00000508   0530A0E3           MOV      R3,#+5
   \   0000050C   0A20A0E1           MOV      R2,R10
   \   00000510   F50F8DE2           ADD      R0,SP,#+980
   \   00000514   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000518   5B1EA0E3           MOV      R1,#+1456
   \   0000051C   EE0F8DE2           ADD      R0,SP,#+952
   \   00000520   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000524   EE2F8DE2           ADD      R2,SP,#+952
   \   00000528   0810A0E1           MOV      R1,R8
   \   0000052C   E70F8DE2           ADD      R0,SP,#+924
   \   00000530   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000534   0820A0E1           MOV      R2,R8
   \   00000538   E71F8DE2           ADD      R1,SP,#+924
   \   0000053C   E00F8DE2           ADD      R0,SP,#+896
   \   00000540   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000544   F52F8DE2           ADD      R2,SP,#+980
   \   00000548   E01F8DE2           ADD      R1,SP,#+896
   \   0000054C   D90F8DE2           ADD      R0,SP,#+868
   \   00000550   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000554   0620A0E1           MOV      R2,R6
   \   00000558   D91F8DE2           ADD      R1,SP,#+868
   \   0000055C   D20F8DE2           ADD      R0,SP,#+840
   \   00000560   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000564   0730A0E1           MOV      R3,R7
   \   00000568   0020A0E3           MOV      R2,#+0
   \   0000056C   D21F8DE2           ADD      R1,SP,#+840
   \   00000570   0D00A0E1           MOV      R0,SP
   \   00000574   ........           _BLF     ??append,??append??rA
   \   00000578   0020A0E3           MOV      R2,#+0
   \   0000057C   0110A0E3           MOV      R1,#+1
   \   00000580   D20F8DE2           ADD      R0,SP,#+840
   \   00000584   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   0110A0E3           MOV      R1,#+1
   \   00000590   D90F8DE2           ADD      R0,SP,#+868
   \   00000594   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000598   0020A0E3           MOV      R2,#+0
   \   0000059C   0110A0E3           MOV      R1,#+1
   \   000005A0   F50F8DE2           ADD      R0,SP,#+980
   \   000005A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A8   0020A0E3           MOV      R2,#+0
   \   000005AC   0110A0E3           MOV      R1,#+1
   \   000005B0   E00F8DE2           ADD      R0,SP,#+896
   \   000005B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B8   0020A0E3           MOV      R2,#+0
   \   000005BC   0110A0E3           MOV      R1,#+1
   \   000005C0   E70F8DE2           ADD      R0,SP,#+924
   \   000005C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C8   0020A0E3           MOV      R2,#+0
   \   000005CC   0110A0E3           MOV      R1,#+1
   \   000005D0   EE0F8DE2           ADD      R0,SP,#+952
   \   000005D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     72                      LocalString += TabStr1 + KeyWord(C_CT_OD2) + TabStr1    + FloatToAnsiString(OD2, 8, 5) + CrLfStr;
   \   000005D8   BC0094E5           LDR      R0,[R4, #+188]
   \   000005DC   C01094E5           LDR      R1,[R4, #+192]
   \   000005E0   0590A0E3           MOV      R9,#+5
   \   000005E4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005E8   0010A0E1           MOV      R1,R0
   \   000005EC   0930A0E1           MOV      R3,R9
   \   000005F0   0A20A0E1           MOV      R2,R10
   \   000005F4   7C008DE2           ADD      R0,SP,#+124
   \   000005F8   400E80E2           ADD      R0,R0,#+1024
   \   000005FC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000600   B110A0E3           MOV      R1,#+177
   \   00000604   501E81E3           ORR      R1,R1,#0x500
   \   00000608   460E8DE2           ADD      R0,SP,#+1120
   \   0000060C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000610   462E8DE2           ADD      R2,SP,#+1120
   \   00000614   0810A0E1           MOV      R1,R8
   \   00000618   44008DE2           ADD      R0,SP,#+68
   \   0000061C   400E80E2           ADD      R0,R0,#+1024
   \   00000620   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000624   0820A0E1           MOV      R2,R8
   \   00000628   44108DE2           ADD      R1,SP,#+68
   \   0000062C   401E81E2           ADD      R1,R1,#+1024
   \   00000630   28008DE2           ADD      R0,SP,#+40
   \   00000634   400E80E2           ADD      R0,R0,#+1024
   \   00000638   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000063C   7C208DE2           ADD      R2,SP,#+124
   \   00000640   402E82E2           ADD      R2,R2,#+1024
   \   00000644   28108DE2           ADD      R1,SP,#+40
   \   00000648   401E81E2           ADD      R1,R1,#+1024
   \   0000064C   0C008DE2           ADD      R0,SP,#+12
   \   00000650   400E80E2           ADD      R0,R0,#+1024
   \   00000654   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000658   0620A0E1           MOV      R2,R6
   \   0000065C   0C108DE2           ADD      R1,SP,#+12
   \   00000660   401E81E2           ADD      R1,R1,#+1024
   \   00000664   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000668   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000066C   0730A0E1           MOV      R3,R7
   \   00000670   0020A0E3           MOV      R2,#+0
   \   00000674   FC1F8DE2           ADD      R1,SP,#+1008
   \   00000678   0D00A0E1           MOV      R0,SP
   \   0000067C   ........           _BLF     ??append,??append??rA
   \   00000680   0020A0E3           MOV      R2,#+0
   \   00000684   0110A0E3           MOV      R1,#+1
   \   00000688   FC0F8DE2           ADD      R0,SP,#+1008
   \   0000068C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000690   0020A0E3           MOV      R2,#+0
   \   00000694   0110A0E3           MOV      R1,#+1
   \   00000698   0C008DE2           ADD      R0,SP,#+12
   \   0000069C   400E80E2           ADD      R0,R0,#+1024
   \   000006A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006A4   0020A0E3           MOV      R2,#+0
   \   000006A8   0110A0E3           MOV      R1,#+1
   \   000006AC   7C008DE2           ADD      R0,SP,#+124
   \   000006B0   400E80E2           ADD      R0,R0,#+1024
   \   000006B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006B8   0020A0E3           MOV      R2,#+0
   \   000006BC   0110A0E3           MOV      R1,#+1
   \   000006C0   28008DE2           ADD      R0,SP,#+40
   \   000006C4   400E80E2           ADD      R0,R0,#+1024
   \   000006C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006CC   0020A0E3           MOV      R2,#+0
   \   000006D0   0110A0E3           MOV      R1,#+1
   \   000006D4   44008DE2           ADD      R0,SP,#+68
   \   000006D8   400E80E2           ADD      R0,R0,#+1024
   \   000006DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006E0   0020A0E3           MOV      R2,#+0
   \   000006E4   0110A0E3           MOV      R1,#+1
   \   000006E8   460E8DE2           ADD      R0,SP,#+1120
   \   000006EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     73                      LocalString += TabStr1 + KeyWord(C_CT_REFTEMP1) + FloatToAnsiString(RefTmp1, 8, 5) + CrLfStr;
   \   000006F0   C40094E5           LDR      R0,[R4, #+196]
   \   000006F4   C81094E5           LDR      R1,[R4, #+200]
   \   000006F8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000006FC   0010A0E1           MOV      R1,R0
   \   00000700   0930A0E1           MOV      R3,R9
   \   00000704   0A20A0E1           MOV      R2,R10
   \   00000708   420F8DE2           ADD      R0,SP,#+264
   \   0000070C   400E80E2           ADD      R0,R0,#+1024
   \   00000710   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000714   B210A0E3           MOV      R1,#+178
   \   00000718   501E81E3           ORR      R1,R1,#0x500
   \   0000071C   EC008DE2           ADD      R0,SP,#+236
   \   00000720   400E80E2           ADD      R0,R0,#+1024
   \   00000724   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000728   EC208DE2           ADD      R2,SP,#+236
   \   0000072C   402E82E2           ADD      R2,R2,#+1024
   \   00000730   0810A0E1           MOV      R1,R8
   \   00000734   4D0E8DE2           ADD      R0,SP,#+1232
   \   00000738   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000073C   422F8DE2           ADD      R2,SP,#+264
   \   00000740   402E82E2           ADD      R2,R2,#+1024
   \   00000744   4D1E8DE2           ADD      R1,SP,#+1232
   \   00000748   B4008DE2           ADD      R0,SP,#+180
   \   0000074C   400E80E2           ADD      R0,R0,#+1024
   \   00000750   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000754   0620A0E1           MOV      R2,R6
   \   00000758   B4108DE2           ADD      R1,SP,#+180
   \   0000075C   401E81E2           ADD      R1,R1,#+1024
   \   00000760   98008DE2           ADD      R0,SP,#+152
   \   00000764   400E80E2           ADD      R0,R0,#+1024
   \   00000768   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000076C   0730A0E1           MOV      R3,R7
   \   00000770   0020A0E3           MOV      R2,#+0
   \   00000774   98108DE2           ADD      R1,SP,#+152
   \   00000778   401E81E2           ADD      R1,R1,#+1024
   \   0000077C   0D00A0E1           MOV      R0,SP
   \   00000780   ........           _BLF     ??append,??append??rA
   \   00000784   0020A0E3           MOV      R2,#+0
   \   00000788   0110A0E3           MOV      R1,#+1
   \   0000078C   98008DE2           ADD      R0,SP,#+152
   \   00000790   400E80E2           ADD      R0,R0,#+1024
   \   00000794   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000798   0020A0E3           MOV      R2,#+0
   \   0000079C   0110A0E3           MOV      R1,#+1
   \   000007A0   B4008DE2           ADD      R0,SP,#+180
   \   000007A4   400E80E2           ADD      R0,R0,#+1024
   \   000007A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007AC   0020A0E3           MOV      R2,#+0
   \   000007B0   0110A0E3           MOV      R1,#+1
   \   000007B4   420F8DE2           ADD      R0,SP,#+264
   \   000007B8   400E80E2           ADD      R0,R0,#+1024
   \   000007BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007C0   0020A0E3           MOV      R2,#+0
   \   000007C4   0110A0E3           MOV      R1,#+1
   \   000007C8   4D0E8DE2           ADD      R0,SP,#+1232
   \   000007CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007D0   0020A0E3           MOV      R2,#+0
   \   000007D4   0110A0E3           MOV      R1,#+1
   \   000007D8   EC008DE2           ADD      R0,SP,#+236
   \   000007DC   400E80E2           ADD      R0,R0,#+1024
   \   000007E0   ........           _BLF     ??_Tidy,??_Tidy??rA
     74                      LocalString += TabStr1 + KeyWord(C_CT_REFTEMP2) + FloatToAnsiString(RefTmp2, 8, 5) + CrLfStr;
   \   000007E4   CC0094E5           LDR      R0,[R4, #+204]
   \   000007E8   D01094E5           LDR      R1,[R4, #+208]
   \   000007EC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000007F0   0010A0E1           MOV      R1,R0
   \   000007F4   0930A0E1           MOV      R3,R9
   \   000007F8   0A20A0E1           MOV      R2,R10
   \   000007FC   650F8DE2           ADD      R0,SP,#+404
   \   00000800   400E80E2           ADD      R0,R0,#+1024
   \   00000804   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000808   B310A0E3           MOV      R1,#+179
   \   0000080C   501E81E3           ORR      R1,R1,#0x500
   \   00000810   5E0F8DE2           ADD      R0,SP,#+376
   \   00000814   400E80E2           ADD      R0,R0,#+1024
   \   00000818   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000081C   5E2F8DE2           ADD      R2,SP,#+376
   \   00000820   402E82E2           ADD      R2,R2,#+1024
   \   00000824   0810A0E1           MOV      R1,R8
   \   00000828   570F8DE2           ADD      R0,SP,#+348
   \   0000082C   400E80E2           ADD      R0,R0,#+1024
   \   00000830   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000834   652F8DE2           ADD      R2,SP,#+404
   \   00000838   402E82E2           ADD      R2,R2,#+1024
   \   0000083C   571F8DE2           ADD      R1,SP,#+348
   \   00000840   401E81E2           ADD      R1,R1,#+1024
   \   00000844   540E8DE2           ADD      R0,SP,#+1344
   \   00000848   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000084C   0620A0E1           MOV      R2,R6
   \   00000850   541E8DE2           ADD      R1,SP,#+1344
   \   00000854   490F8DE2           ADD      R0,SP,#+292
   \   00000858   400E80E2           ADD      R0,R0,#+1024
   \   0000085C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000860   0730A0E1           MOV      R3,R7
   \   00000864   0020A0E3           MOV      R2,#+0
   \   00000868   491F8DE2           ADD      R1,SP,#+292
   \   0000086C   401E81E2           ADD      R1,R1,#+1024
   \   00000870   0D00A0E1           MOV      R0,SP
   \   00000874   ........           _BLF     ??append,??append??rA
   \   00000878   0020A0E3           MOV      R2,#+0
   \   0000087C   0110A0E3           MOV      R1,#+1
   \   00000880   490F8DE2           ADD      R0,SP,#+292
   \   00000884   400E80E2           ADD      R0,R0,#+1024
   \   00000888   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000088C   0020A0E3           MOV      R2,#+0
   \   00000890   0110A0E3           MOV      R1,#+1
   \   00000894   540E8DE2           ADD      R0,SP,#+1344
   \   00000898   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000089C   0020A0E3           MOV      R2,#+0
   \   000008A0   0110A0E3           MOV      R1,#+1
   \   000008A4   650F8DE2           ADD      R0,SP,#+404
   \   000008A8   400E80E2           ADD      R0,R0,#+1024
   \   000008AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008B0   0020A0E3           MOV      R2,#+0
   \   000008B4   0110A0E3           MOV      R1,#+1
   \   000008B8   570F8DE2           ADD      R0,SP,#+348
   \   000008BC   400E80E2           ADD      R0,R0,#+1024
   \   000008C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008C4   0020A0E3           MOV      R2,#+0
   \   000008C8   0110A0E3           MOV      R1,#+1
   \   000008CC   5E0F8DE2           ADD      R0,SP,#+376
   \   000008D0   400E80E2           ADD      R0,R0,#+1024
   \   000008D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     75                      LocalString += TabStr1 + KeyWord(C_CT_COEFF) + TabStr1  + FloatToAnsiString(Coeff, 9, 6) + CrLfStr;
   \   000008D8   D40094E5           LDR      R0,[R4, #+212]
   \   000008DC   D81094E5           LDR      R1,[R4, #+216]
   \   000008E0   0630A0E3           MOV      R3,#+6
   \   000008E4   0920A0E3           MOV      R2,#+9
   \   000008E8   02A0A0E1           MOV      R10,R2
   \   000008EC   0390A0E1           MOV      R9,R3
   \   000008F0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000008F4   0010A0E1           MOV      R1,R0
   \   000008F8   0930A0E1           MOV      R3,R9
   \   000008FC   0A20A0E1           MOV      R2,R10
   \   00000900   8F0F8DE2           ADD      R0,SP,#+572
   \   00000904   400E80E2           ADD      R0,R0,#+1024
   \   00000908   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000090C   B410A0E3           MOV      R1,#+180
   \   00000910   501E81E3           ORR      R1,R1,#0x500
   \   00000914   620E8DE2           ADD      R0,SP,#+1568
   \   00000918   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000091C   622E8DE2           ADD      R2,SP,#+1568
   \   00000920   0810A0E1           MOV      R1,R8
   \   00000924   810F8DE2           ADD      R0,SP,#+516
   \   00000928   400E80E2           ADD      R0,R0,#+1024
   \   0000092C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000930   0820A0E1           MOV      R2,R8
   \   00000934   811F8DE2           ADD      R1,SP,#+516
   \   00000938   401E81E2           ADD      R1,R1,#+1024
   \   0000093C   7A0F8DE2           ADD      R0,SP,#+488
   \   00000940   400E80E2           ADD      R0,R0,#+1024
   \   00000944   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000948   8F2F8DE2           ADD      R2,SP,#+572
   \   0000094C   402E82E2           ADD      R2,R2,#+1024
   \   00000950   7A1F8DE2           ADD      R1,SP,#+488
   \   00000954   401E81E2           ADD      R1,R1,#+1024
   \   00000958   730F8DE2           ADD      R0,SP,#+460
   \   0000095C   400E80E2           ADD      R0,R0,#+1024
   \   00000960   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000964   0620A0E1           MOV      R2,R6
   \   00000968   731F8DE2           ADD      R1,SP,#+460
   \   0000096C   401E81E2           ADD      R1,R1,#+1024
   \   00000970   5B0E8DE2           ADD      R0,SP,#+1456
   \   00000974   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000978   0730A0E1           MOV      R3,R7
   \   0000097C   0020A0E3           MOV      R2,#+0
   \   00000980   5B1E8DE2           ADD      R1,SP,#+1456
   \   00000984   0D00A0E1           MOV      R0,SP
   \   00000988   ........           _BLF     ??append,??append??rA
   \   0000098C   0020A0E3           MOV      R2,#+0
   \   00000990   0110A0E3           MOV      R1,#+1
   \   00000994   5B0E8DE2           ADD      R0,SP,#+1456
   \   00000998   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000099C   0020A0E3           MOV      R2,#+0
   \   000009A0   0110A0E3           MOV      R1,#+1
   \   000009A4   730F8DE2           ADD      R0,SP,#+460
   \   000009A8   400E80E2           ADD      R0,R0,#+1024
   \   000009AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009B0   0020A0E3           MOV      R2,#+0
   \   000009B4   0110A0E3           MOV      R1,#+1
   \   000009B8   8F0F8DE2           ADD      R0,SP,#+572
   \   000009BC   400E80E2           ADD      R0,R0,#+1024
   \   000009C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009C4   0020A0E3           MOV      R2,#+0
   \   000009C8   0110A0E3           MOV      R1,#+1
   \   000009CC   7A0F8DE2           ADD      R0,SP,#+488
   \   000009D0   400E80E2           ADD      R0,R0,#+1024
   \   000009D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009D8   0020A0E3           MOV      R2,#+0
   \   000009DC   0110A0E3           MOV      R1,#+1
   \   000009E0   810F8DE2           ADD      R0,SP,#+516
   \   000009E4   400E80E2           ADD      R0,R0,#+1024
   \   000009E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009EC   0020A0E3           MOV      R2,#+0
   \   000009F0   0110A0E3           MOV      R1,#+1
   \   000009F4   620E8DE2           ADD      R0,SP,#+1568
   \   000009F8   ........           _BLF     ??_Tidy,??_Tidy??rA
     76                      LocalString += TabStr1 + KeyWord(C_CT_MOLMASS) + TabStr1 + FloatToAnsiString(MolMass, 9, 6) + CrLfStr;
   \   000009FC   DC0094E5           LDR      R0,[R4, #+220]
   \   00000A00   E01094E5           LDR      R1,[R4, #+224]
   \   00000A04   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000A08   0010A0E1           MOV      R1,R0
   \   00000A0C   0930A0E1           MOV      R3,R9
   \   00000A10   0A20A0E1           MOV      R2,R10
   \   00000A14   B90F8DE2           ADD      R0,SP,#+740
   \   00000A18   400E80E2           ADD      R0,R0,#+1024
   \   00000A1C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000A20   BD10A0E3           MOV      R1,#+189
   \   00000A24   501E81E3           ORR      R1,R1,#0x500
   \   00000A28   B20F8DE2           ADD      R0,SP,#+712
   \   00000A2C   400E80E2           ADD      R0,R0,#+1024
   \   00000A30   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000A34   B22F8DE2           ADD      R2,SP,#+712
   \   00000A38   402E82E2           ADD      R2,R2,#+1024
   \   00000A3C   0810A0E1           MOV      R1,R8
   \   00000A40   AB0F8DE2           ADD      R0,SP,#+684
   \   00000A44   400E80E2           ADD      R0,R0,#+1024
   \   00000A48   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A4C   0820A0E1           MOV      R2,R8
   \   00000A50   AB1F8DE2           ADD      R1,SP,#+684
   \   00000A54   401E81E2           ADD      R1,R1,#+1024
   \   00000A58   690E8DE2           ADD      R0,SP,#+1680
   \   00000A5C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A60   B92F8DE2           ADD      R2,SP,#+740
   \   00000A64   402E82E2           ADD      R2,R2,#+1024
   \   00000A68   691E8DE2           ADD      R1,SP,#+1680
   \   00000A6C   9D0F8DE2           ADD      R0,SP,#+628
   \   00000A70   400E80E2           ADD      R0,R0,#+1024
   \   00000A74   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A78   0620A0E1           MOV      R2,R6
   \   00000A7C   9D1F8DE2           ADD      R1,SP,#+628
   \   00000A80   401E81E2           ADD      R1,R1,#+1024
   \   00000A84   960F8DE2           ADD      R0,SP,#+600
   \   00000A88   400E80E2           ADD      R0,R0,#+1024
   \   00000A8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A90   0730A0E1           MOV      R3,R7
   \   00000A94   0020A0E3           MOV      R2,#+0
   \   00000A98   961F8DE2           ADD      R1,SP,#+600
   \   00000A9C   401E81E2           ADD      R1,R1,#+1024
   \   00000AA0   0D00A0E1           MOV      R0,SP
   \   00000AA4   ........           _BLF     ??append,??append??rA
   \   00000AA8   0020A0E3           MOV      R2,#+0
   \   00000AAC   0110A0E3           MOV      R1,#+1
   \   00000AB0   960F8DE2           ADD      R0,SP,#+600
   \   00000AB4   400E80E2           ADD      R0,R0,#+1024
   \   00000AB8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000ABC   0020A0E3           MOV      R2,#+0
   \   00000AC0   0110A0E3           MOV      R1,#+1
   \   00000AC4   9D0F8DE2           ADD      R0,SP,#+628
   \   00000AC8   400E80E2           ADD      R0,R0,#+1024
   \   00000ACC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AD0   0020A0E3           MOV      R2,#+0
   \   00000AD4   0110A0E3           MOV      R1,#+1
   \   00000AD8   B90F8DE2           ADD      R0,SP,#+740
   \   00000ADC   400E80E2           ADD      R0,R0,#+1024
   \   00000AE0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AE4   0020A0E3           MOV      R2,#+0
   \   00000AE8   0110A0E3           MOV      R1,#+1
   \   00000AEC   690E8DE2           ADD      R0,SP,#+1680
   \   00000AF0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AF4   0020A0E3           MOV      R2,#+0
   \   00000AF8   0110A0E3           MOV      R1,#+1
   \   00000AFC   AB0F8DE2           ADD      R0,SP,#+684
   \   00000B00   400E80E2           ADD      R0,R0,#+1024
   \   00000B04   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B08   0020A0E3           MOV      R2,#+0
   \   00000B0C   0110A0E3           MOV      R1,#+1
   \   00000B10   B20F8DE2           ADD      R0,SP,#+712
   \   00000B14   400E80E2           ADD      R0,R0,#+1024
   \   00000B18   ........           _BLF     ??_Tidy,??_Tidy??rA
     77                      LocalString += TabStr1 + KeyWord(C_CT_VISCOSITY) + FloatToAnsiString(Viscosity, 8, 1) + CrLfStr;
   \   00000B1C   E40094E5           LDR      R0,[R4, #+228]
   \   00000B20   E81094E5           LDR      R1,[R4, #+232]
   \   00000B24   0130A0E3           MOV      R3,#+1
   \   00000B28   0820A0E3           MOV      R2,#+8
   \   00000B2C   02A0A0E1           MOV      R10,R2
   \   00000B30   0390A0E1           MOV      R9,R3
   \   00000B34   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000B38   0010A0E1           MOV      R1,R0
   \   00000B3C   0930A0E1           MOV      R3,R9
   \   00000B40   0A20A0E1           MOV      R2,R10
   \   00000B44   770E8DE2           ADD      R0,SP,#+1904
   \   00000B48   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000B4C   BE10A0E3           MOV      R1,#+190
   \   00000B50   501E81E3           ORR      R1,R1,#0x500
   \   00000B54   D50F8DE2           ADD      R0,SP,#+852
   \   00000B58   400E80E2           ADD      R0,R0,#+1024
   \   00000B5C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000B60   D52F8DE2           ADD      R2,SP,#+852
   \   00000B64   402E82E2           ADD      R2,R2,#+1024
   \   00000B68   0810A0E1           MOV      R1,R8
   \   00000B6C   CE0F8DE2           ADD      R0,SP,#+824
   \   00000B70   400E80E2           ADD      R0,R0,#+1024
   \   00000B74   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B78   772E8DE2           ADD      R2,SP,#+1904
   \   00000B7C   CE1F8DE2           ADD      R1,SP,#+824
   \   00000B80   401E81E2           ADD      R1,R1,#+1024
   \   00000B84   C70F8DE2           ADD      R0,SP,#+796
   \   00000B88   400E80E2           ADD      R0,R0,#+1024
   \   00000B8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B90   0620A0E1           MOV      R2,R6
   \   00000B94   C71F8DE2           ADD      R1,SP,#+796
   \   00000B98   401E81E2           ADD      R1,R1,#+1024
   \   00000B9C   700E8DE2           ADD      R0,SP,#+1792
   \   00000BA0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BA4   0730A0E1           MOV      R3,R7
   \   00000BA8   0020A0E3           MOV      R2,#+0
   \   00000BAC   701E8DE2           ADD      R1,SP,#+1792
   \   00000BB0   0D00A0E1           MOV      R0,SP
   \   00000BB4   ........           _BLF     ??append,??append??rA
   \   00000BB8   0020A0E3           MOV      R2,#+0
   \   00000BBC   0910A0E1           MOV      R1,R9
   \   00000BC0   700E8DE2           ADD      R0,SP,#+1792
   \   00000BC4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BC8   0020A0E3           MOV      R2,#+0
   \   00000BCC   0910A0E1           MOV      R1,R9
   \   00000BD0   C70F8DE2           ADD      R0,SP,#+796
   \   00000BD4   400E80E2           ADD      R0,R0,#+1024
   \   00000BD8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BDC   0020A0E3           MOV      R2,#+0
   \   00000BE0   0910A0E1           MOV      R1,R9
   \   00000BE4   770E8DE2           ADD      R0,SP,#+1904
   \   00000BE8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BEC   0020A0E3           MOV      R2,#+0
   \   00000BF0   0910A0E1           MOV      R1,R9
   \   00000BF4   CE0F8DE2           ADD      R0,SP,#+824
   \   00000BF8   400E80E2           ADD      R0,R0,#+1024
   \   00000BFC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C00   0020A0E3           MOV      R2,#+0
   \   00000C04   0910A0E1           MOV      R1,R9
   \   00000C08   D50F8DE2           ADD      R0,SP,#+852
   \   00000C0C   400E80E2           ADD      R0,R0,#+1024
   \   00000C10   ........           _BLF     ??_Tidy,??_Tidy??rA
     78                      LocalString += TabStr1 + KeyWord(C_CT_HIGH_TEMP) + FloatToAnsiString(HighTempLimit, 9, 1) + CrLfStr;
   \   00000C14   F81094E5           LDR      R1,[R4, #+248]
   \   00000C18   0930A0E1           MOV      R3,R9
   \   00000C1C   0920A0E3           MOV      R2,#+9
   \   00000C20   FF0F8DE2           ADD      R0,SP,#+1020
   \   00000C24   400E80E2           ADD      R0,R0,#+1024
   \   00000C28   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000C2C   B910A0E3           MOV      R1,#+185
   \   00000C30   501E81E3           ORR      R1,R1,#0x500
   \   00000C34   7E0E8DE2           ADD      R0,SP,#+2016
   \   00000C38   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000C3C   7E2E8DE2           ADD      R2,SP,#+2016
   \   00000C40   0810A0E1           MOV      R1,R8
   \   00000C44   F10F8DE2           ADD      R0,SP,#+964
   \   00000C48   400E80E2           ADD      R0,R0,#+1024
   \   00000C4C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C50   FF2F8DE2           ADD      R2,SP,#+1020
   \   00000C54   402E82E2           ADD      R2,R2,#+1024
   \   00000C58   F11F8DE2           ADD      R1,SP,#+964
   \   00000C5C   401E81E2           ADD      R1,R1,#+1024
   \   00000C60   EA0F8DE2           ADD      R0,SP,#+936
   \   00000C64   400E80E2           ADD      R0,R0,#+1024
   \   00000C68   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C6C   0620A0E1           MOV      R2,R6
   \   00000C70   EA1F8DE2           ADD      R1,SP,#+936
   \   00000C74   401E81E2           ADD      R1,R1,#+1024
   \   00000C78   E30F8DE2           ADD      R0,SP,#+908
   \   00000C7C   400E80E2           ADD      R0,R0,#+1024
   \   00000C80   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C84   0730A0E1           MOV      R3,R7
   \   00000C88   0020A0E3           MOV      R2,#+0
   \   00000C8C   E31F8DE2           ADD      R1,SP,#+908
   \   00000C90   401E81E2           ADD      R1,R1,#+1024
   \   00000C94   0D00A0E1           MOV      R0,SP
   \   00000C98   ........           _BLF     ??append,??append??rA
   \   00000C9C   0020A0E3           MOV      R2,#+0
   \   00000CA0   0910A0E1           MOV      R1,R9
   \   00000CA4   E30F8DE2           ADD      R0,SP,#+908
   \   00000CA8   400E80E2           ADD      R0,R0,#+1024
   \   00000CAC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CB0   0020A0E3           MOV      R2,#+0
   \   00000CB4   0910A0E1           MOV      R1,R9
   \   00000CB8   EA0F8DE2           ADD      R0,SP,#+936
   \   00000CBC   400E80E2           ADD      R0,R0,#+1024
   \   00000CC0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CC4   0020A0E3           MOV      R2,#+0
   \   00000CC8   0910A0E1           MOV      R1,R9
   \   00000CCC   FF0F8DE2           ADD      R0,SP,#+1020
   \   00000CD0   400E80E2           ADD      R0,R0,#+1024
   \   00000CD4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CD8   0020A0E3           MOV      R2,#+0
   \   00000CDC   0910A0E1           MOV      R1,R9
   \   00000CE0   F10F8DE2           ADD      R0,SP,#+964
   \   00000CE4   400E80E2           ADD      R0,R0,#+1024
   \   00000CE8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CEC   0020A0E3           MOV      R2,#+0
   \   00000CF0   0910A0E1           MOV      R1,R9
   \   00000CF4   7E0E8DE2           ADD      R0,SP,#+2016
   \   00000CF8   ........           _BLF     ??_Tidy,??_Tidy??rA
     79                      LocalString += TabStr1 + KeyWord(C_CT_LOW_TEMP) + FloatToAnsiString(LowTempLimit, 9, 1) + CrLfStr;
   \   00000CFC   FC1094E5           LDR      R1,[R4, #+252]
   \   00000D00   0930A0E1           MOV      R3,R9
   \   00000D04   0920A0E3           MOV      R2,#+9
   \   00000D08   88008DE2           ADD      R0,SP,#+136
   \   00000D0C   800E80E2           ADD      R0,R0,#+2048
   \   00000D10   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000D14   BA10A0E3           MOV      R1,#+186
   \   00000D18   501E81E3           ORR      R1,R1,#0x500
   \   00000D1C   6C008DE2           ADD      R0,SP,#+108
   \   00000D20   800E80E2           ADD      R0,R0,#+2048
   \   00000D24   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000D28   6C208DE2           ADD      R2,SP,#+108
   \   00000D2C   802E82E2           ADD      R2,R2,#+2048
   \   00000D30   0810A0E1           MOV      R1,R8
   \   00000D34   850E8DE2           ADD      R0,SP,#+2128
   \   00000D38   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D3C   88208DE2           ADD      R2,SP,#+136
   \   00000D40   802E82E2           ADD      R2,R2,#+2048
   \   00000D44   851E8DE2           ADD      R1,SP,#+2128
   \   00000D48   34008DE2           ADD      R0,SP,#+52
   \   00000D4C   800E80E2           ADD      R0,R0,#+2048
   \   00000D50   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D54   0620A0E1           MOV      R2,R6
   \   00000D58   34108DE2           ADD      R1,SP,#+52
   \   00000D5C   801E81E2           ADD      R1,R1,#+2048
   \   00000D60   18008DE2           ADD      R0,SP,#+24
   \   00000D64   800E80E2           ADD      R0,R0,#+2048
   \   00000D68   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D6C   0730A0E1           MOV      R3,R7
   \   00000D70   0020A0E3           MOV      R2,#+0
   \   00000D74   18108DE2           ADD      R1,SP,#+24
   \   00000D78   801E81E2           ADD      R1,R1,#+2048
   \   00000D7C   0D00A0E1           MOV      R0,SP
   \   00000D80   ........           _BLF     ??append,??append??rA
   \   00000D84   0020A0E3           MOV      R2,#+0
   \   00000D88   0910A0E1           MOV      R1,R9
   \   00000D8C   18008DE2           ADD      R0,SP,#+24
   \   00000D90   800E80E2           ADD      R0,R0,#+2048
   \   00000D94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D98   0020A0E3           MOV      R2,#+0
   \   00000D9C   0910A0E1           MOV      R1,R9
   \   00000DA0   34008DE2           ADD      R0,SP,#+52
   \   00000DA4   800E80E2           ADD      R0,R0,#+2048
   \   00000DA8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DAC   0020A0E3           MOV      R2,#+0
   \   00000DB0   0910A0E1           MOV      R1,R9
   \   00000DB4   88008DE2           ADD      R0,SP,#+136
   \   00000DB8   800E80E2           ADD      R0,R0,#+2048
   \   00000DBC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DC0   0020A0E3           MOV      R2,#+0
   \   00000DC4   0910A0E1           MOV      R1,R9
   \   00000DC8   850E8DE2           ADD      R0,SP,#+2128
   \   00000DCC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DD0   0020A0E3           MOV      R2,#+0
   \   00000DD4   0910A0E1           MOV      R1,R9
   \   00000DD8   6C008DE2           ADD      R0,SP,#+108
   \   00000DDC   800E80E2           ADD      R0,R0,#+2048
   \   00000DE0   ........           _BLF     ??_Tidy,??_Tidy??rA
     80                      if ( HighTempEnable ) {
   \   00000DE4   0001D4E5           LDRB     R0,[R4, #+256]
   \   00000DE8   000050E3           CMP      R0,#+0
   \   00000DEC   1C00000A           BEQ      ??SaveSettings_4
     81                          LocalString += TabStr1 + KeyWord(C_CT_HIGH_TEMP_ENABLE) + CrLfStr;
   \   00000DF0   BB10A0E3           MOV      R1,#+187
   \   00000DF4   501E81E3           ORR      R1,R1,#0x500
   \   00000DF8   1C008DE2           ADD      R0,SP,#+28
   \   00000DFC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000E00   1C208DE2           ADD      R2,SP,#+28
   \   00000E04   0810A0E1           MOV      R1,R8
   \   00000E08   38008DE2           ADD      R0,SP,#+56
   \   00000E0C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E10   0620A0E1           MOV      R2,R6
   \   00000E14   38108DE2           ADD      R1,SP,#+56
   \   00000E18   54008DE2           ADD      R0,SP,#+84
   \   00000E1C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E20   0730A0E1           MOV      R3,R7
   \   00000E24   0020A0E3           MOV      R2,#+0
   \   00000E28   54108DE2           ADD      R1,SP,#+84
   \   00000E2C   0D00A0E1           MOV      R0,SP
   \   00000E30   ........           _BLF     ??append,??append??rA
   \   00000E34   0020A0E3           MOV      R2,#+0
   \   00000E38   0110A0E3           MOV      R1,#+1
   \   00000E3C   54008DE2           ADD      R0,SP,#+84
   \   00000E40   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E44   0020A0E3           MOV      R2,#+0
   \   00000E48   0910A0E1           MOV      R1,R9
   \   00000E4C   38008DE2           ADD      R0,SP,#+56
   \   00000E50   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E54   0020A0E3           MOV      R2,#+0
   \   00000E58   0910A0E1           MOV      R1,R9
   \   00000E5C   1C008DE2           ADD      R0,SP,#+28
   \   00000E60   ........           _BLF     ??_Tidy,??_Tidy??rA
     82                      }
     83                      if ( LowTempEnable ) {
   \                     ??SaveSettings_4:
   \   00000E64   0101D4E5           LDRB     R0,[R4, #+257]
   \   00000E68   000050E3           CMP      R0,#+0
   \   00000E6C   1C00000A           BEQ      ??SaveSettings_5
     84                          LocalString += TabStr1 + KeyWord(C_CT_LOW_TEMP_ENABLE) + CrLfStr;
   \   00000E70   BC10A0E3           MOV      R1,#+188
   \   00000E74   501E81E3           ORR      R1,R1,#0x500
   \   00000E78   54008DE2           ADD      R0,SP,#+84
   \   00000E7C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000E80   54208DE2           ADD      R2,SP,#+84
   \   00000E84   0810A0E1           MOV      R1,R8
   \   00000E88   38008DE2           ADD      R0,SP,#+56
   \   00000E8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E90   0620A0E1           MOV      R2,R6
   \   00000E94   38108DE2           ADD      R1,SP,#+56
   \   00000E98   1C008DE2           ADD      R0,SP,#+28
   \   00000E9C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000EA0   0730A0E1           MOV      R3,R7
   \   00000EA4   0020A0E3           MOV      R2,#+0
   \   00000EA8   1C108DE2           ADD      R1,SP,#+28
   \   00000EAC   0D00A0E1           MOV      R0,SP
   \   00000EB0   ........           _BLF     ??append,??append??rA
   \   00000EB4   0020A0E3           MOV      R2,#+0
   \   00000EB8   0110A0E3           MOV      R1,#+1
   \   00000EBC   1C008DE2           ADD      R0,SP,#+28
   \   00000EC0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000EC4   0020A0E3           MOV      R2,#+0
   \   00000EC8   0910A0E1           MOV      R1,R9
   \   00000ECC   38008DE2           ADD      R0,SP,#+56
   \   00000ED0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000ED4   0020A0E3           MOV      R2,#+0
   \   00000ED8   0910A0E1           MOV      R1,R9
   \   00000EDC   54008DE2           ADD      R0,SP,#+84
   \   00000EE0   ........           _BLF     ??_Tidy,??_Tidy??rA
     85                      }
     86                      LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \                     ??SaveSettings_5:
   \   00000EE4   FA1FA0E3           MOV      R1,#+1000
   \   00000EE8   8C0E8DE2           ADD      R0,SP,#+2240
   \   00000EEC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000EF0   0620A0E1           MOV      R2,R6
   \   00000EF4   8C1E8DE2           ADD      R1,SP,#+2240
   \   00000EF8   A4008DE2           ADD      R0,SP,#+164
   \   00000EFC   800E80E2           ADD      R0,R0,#+2048
   \   00000F00   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F04   0730A0E1           MOV      R3,R7
   \   00000F08   0020A0E3           MOV      R2,#+0
   \   00000F0C   A4108DE2           ADD      R1,SP,#+164
   \   00000F10   801E81E2           ADD      R1,R1,#+2048
   \   00000F14   0D00A0E1           MOV      R0,SP
   \   00000F18   ........           _BLF     ??append,??append??rA
   \   00000F1C   0020A0E3           MOV      R2,#+0
   \   00000F20   0110A0E3           MOV      R1,#+1
   \   00000F24   A4008DE2           ADD      R0,SP,#+164
   \   00000F28   800E80E2           ADD      R0,R0,#+2048
   \   00000F2C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F30   0020A0E3           MOV      R2,#+0
   \   00000F34   0910A0E1           MOV      R1,R9
   \   00000F38   8C0E8DE2           ADD      R0,SP,#+2240
   \   00000F3C   ........           _BLF     ??_Tidy,??_Tidy??rA
     87                      LocalString += CrLfStr;
   \   00000F40   0730A0E1           MOV      R3,R7
   \   00000F44   0020A0E3           MOV      R2,#+0
   \   00000F48   0610A0E1           MOV      R1,R6
   \   00000F4C   0D00A0E1           MOV      R0,SP
   \   00000F50   ........           _BLF     ??append,??append??rA
     88                      SettingsString->AddString(LocalString);
   \   00000F54   0D10A0E1           MOV      R1,SP
   \   00000F58   DC008DE2           ADD      R0,SP,#+220
   \   00000F5C   800E80E2           ADD      R0,R0,#+2048
   \   00000F60   ........           _BLF     ??string,??string??rA
   \   00000F64   DC108DE2           ADD      R1,SP,#+220
   \   00000F68   801E81E2           ADD      R1,R1,#+2048
   \   00000F6C   0500A0E1           MOV      R0,R5
   \   00000F70   ........           _BLF     ??AddString,??AddString??rA
   \   00000F74   0020A0E3           MOV      R2,#+0
   \   00000F78   0910A0E1           MOV      R1,R9
   \   00000F7C   DC008DE2           ADD      R0,SP,#+220
   \   00000F80   800E80E2           ADD      R0,R0,#+2048
   \   00000F84   ........           _BLF     ??_Tidy,??_Tidy??rA
     89                  }
   \   00000F88   0020A0E3           MOV      R2,#+0
   \   00000F8C   0910A0E1           MOV      R1,R9
   \   00000F90   F8008DE2           ADD      R0,SP,#+248
   \   00000F94   800E80E2           ADD      R0,R0,#+2048
   \   00000F98   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F9C   000000EA           B        ??SaveSettings_6
   \                     ??SaveSettings_1:
   \   00000FA0   ........           DC32     ??WriteAll
   \                     ??SaveSettings_6:
   \   00000FA4   0020A0E3           MOV      R2,#+0
   \   00000FA8   0910A0E1           MOV      R1,R9
   \   00000FAC   0D00A0E1           MOV      R0,SP
   \   00000FB0   ........           _BLF     ??_Tidy,??_Tidy??rA
     90              }
     91          }
   \                     ??SaveSettings_2:
   \   00000FB4   9ADE8DE2           ADD      SP,SP,#+2464
   \   00000FB8   F047BDE8           POP      {R4-R10,LR}
   \   00000FBC   1EFF2FE1           BX       LR               ;; return
   \                     ??SaveSettings_3:
   \   00000FC0   ........           DC32     CrLfStr
   \   00000FC4   ........           DC32     TabStr1
   \   00000FC8   ........           DC32     `?<Constant "0x%0x">`
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          bool CTOUser::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     94              bool NoError = true;
     95              int ErrorLine = 0;
   \   00000004   18A69FE5           LDR      R10,??RestoreSettings_1  ;; NewLineStr
   \   00000008   18B69FE5           LDR      R11,??RestoreSettings_1+0x4  ;; `?<Constant "Cargotype ">`
   \   0000000C   7FDF4DE2           SUB      SP,SP,#+508
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0190A0E3           MOV      R9,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
     96              int tmpCargoTypeKey = CTY_NOT_DEFINED;
     97              int Key;
     98              do {
     99                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_3
    100                  if ( ErrorLine ) {
    101                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   5301000A           BEQ      ??RestoreSettings_4
    102                          RestoreSettingsWarning((AnsiString)"Cargotype " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000005C   0070A0E1           MOV      R7,R0
   \   00000060   0B10A0E1           MOV      R1,R11
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   0C208BE2           ADD      R2,R11,#+12
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000008C   0720A0E1           MOV      R2,R7
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_5:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   1B0100EA           B        ??RestoreSettings_4
    103                      }
    104                  } else {
    105                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    106                      switch ( Key ) {
   \   00000158   0100A0E3           MOV      R0,#+1
   \   0000015C   FA0F56E3           CMP      R6,#+1000
   \   00000160   EA20A013           MOVNE    R2,#+234
   \   00000164   C02F8213           ORRNE    R2,R2,#0x300
   \   00000168   02005611           CMPNE    R6,R2
   \   0000016C   FB0F5613           CMPNE    R6,#+1004
   \   00000170   8400000A           BEQ      ??RestoreSettings_6
   \   00000174   AD20A0E3           MOV      R2,#+173
   \   00000178   502E82E3           ORR      R2,R2,#0x500
   \   0000017C   020056E1           CMP      R6,R2
   \   00000180   8300000A           BEQ      ??RestoreSettings_7
   \   00000184   012082E2           ADD      R2,R2,#+1
   \   00000188   020056E1           CMP      R6,R2
   \   0000018C   9400000A           BEQ      ??RestoreSettings_8
   \   00000190   012082E3           ORR      R2,R2,#0x1
   \   00000194   020056E1           CMP      R6,R2
   \   00000198   0001000A           BEQ      ??RestoreSettings_4
   \   0000019C   5B0E56E3           CMP      R6,#+1456
   \   000001A0   9800000A           BEQ      ??RestoreSettings_9
   \   000001A4   5B2E80E3           ORR      R2,R0,#0x5B0
   \   000001A8   020056E1           CMP      R6,R2
   \   000001AC   9C00000A           BEQ      ??RestoreSettings_10
   \   000001B0   012082E2           ADD      R2,R2,#+1
   \   000001B4   020056E1           CMP      R6,R2
   \   000001B8   A300000A           BEQ      ??RestoreSettings_11
   \   000001BC   012082E3           ORR      R2,R2,#0x1
   \   000001C0   020056E1           CMP      R6,R2
   \   000001C4   A700000A           BEQ      ??RestoreSettings_12
   \   000001C8   012082E2           ADD      R2,R2,#+1
   \   000001CC   020056E1           CMP      R6,R2
   \   000001D0   AF00000A           BEQ      ??RestoreSettings_13
   \   000001D4   022082E3           ORR      R2,R2,#0x2
   \   000001D8   020056E1           CMP      R6,R2
   \   000001DC   C100000A           BEQ      ??RestoreSettings_14
   \   000001E0   012082E3           ORR      R2,R2,#0x1
   \   000001E4   020056E1           CMP      R6,R2
   \   000001E8   C700000A           BEQ      ??RestoreSettings_15
   \   000001EC   012082E2           ADD      R2,R2,#+1
   \   000001F0   020056E1           CMP      R6,R2
   \   000001F4   D300000A           BEQ      ??RestoreSettings_16
   \   000001F8   012082E3           ORR      R2,R2,#0x1
   \   000001FC   020056E1           CMP      R6,R2
   \   00000200   D200000A           BEQ      ??RestoreSettings_17
   \   00000204   012082E2           ADD      R2,R2,#+1
   \   00000208   020056E1           CMP      R6,R2
   \   0000020C   D900000A           BEQ      ??RestoreSettings_18
   \   00000210   012082E3           ORR      R2,R2,#0x1
   \   00000214   020056E1           CMP      R6,R2
   \   00000218   DD00000A           BEQ      ??RestoreSettings_19
   \   0000021C   012082E2           ADD      R2,R2,#+1
   \   00000220   020056E1           CMP      R6,R2
   \   00000224   DC00000A           BEQ      ??RestoreSettings_20
   \   00000228   012082E3           ORR      R2,R2,#0x1
   \   0000022C   020056E1           CMP      R6,R2
   \   00000230   9E00000A           BEQ      ??RestoreSettings_21
   \   00000234   012082E2           ADD      R2,R2,#+1
   \   00000238   020056E1           CMP      R6,R2
   \   0000023C   A200000A           BEQ      ??RestoreSettings_22
   \   00000240   012082E3           ORR      R2,R2,#0x1
   \   00000244   020056E1           CMP      R6,R2
   \   00000248   5C00000A           BEQ      ??RestoreSettings_23
   \   0000024C   9820A0E3           MOV      R2,#+152
   \   00000250   802E82E3           ORR      R2,R2,#0x800
   \   00000254   020056E1           CMP      R6,R2
   \   00000258   B920A013           MOVNE    R2,#+185
   \   0000025C   B02E8213           ORRNE    R2,R2,#0xB00
   \   00000260   02005611           CMPNE    R6,R2
   \   00000264   4700000A           BEQ      ??RestoreSettings_6
    107                      default:
    108                          NoError = false;
    109                          RestoreSettingsWarning((AnsiString)"Cargotype " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   00000268   1C1095E5           LDR      R1,[R5, #+28]
   \   0000026C   0090A0E3           MOV      R9,#+0
   \   00000270   710F8DE2           ADD      R0,SP,#+452
   \   00000274   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000278   0070A0E1           MOV      R7,R0
   \   0000027C   0B10A0E1           MOV      R1,R11
   \   00000280   6A0F8DE2           ADD      R0,SP,#+424
   \   00000284   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000288   0010A0E1           MOV      R1,R0
   \   0000028C   442084E2           ADD      R2,R4,#+68
   \   00000290   630F8DE2           ADD      R0,SP,#+396
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   30208BE2           ADD      R2,R11,#+48
   \   0000029C   631F8DE2           ADD      R1,SP,#+396
   \   000002A0   5C0F8DE2           ADD      R0,SP,#+368
   \   000002A4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002A8   74208DE2           ADD      R2,SP,#+116
   \   000002AC   5C1F8DE2           ADD      R1,SP,#+368
   \   000002B0   550F8DE2           ADD      R0,SP,#+340
   \   000002B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002B8   40208BE2           ADD      R2,R11,#+64
   \   000002BC   551F8DE2           ADD      R1,SP,#+340
   \   000002C0   4E0F8DE2           ADD      R0,SP,#+312
   \   000002C4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002C8   0720A0E1           MOV      R2,R7
   \   000002CC   4E1F8DE2           ADD      R1,SP,#+312
   \   000002D0   470F8DE2           ADD      R0,SP,#+284
   \   000002D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002D8   0A20A0E1           MOV      R2,R10
   \   000002DC   471F8DE2           ADD      R1,SP,#+284
   \   000002E0   400F8DE2           ADD      R0,SP,#+256
   \   000002E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E8   401F8DE2           ADD      R1,SP,#+256
   \   000002EC   E4008DE2           ADD      R0,SP,#+228
   \   000002F0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000002F4   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   E4008DE2           ADD      R0,SP,#+228
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   0920A0E1           MOV      R2,R9
   \   0000030C   0110A0E3           MOV      R1,#+1
   \   00000310   400F8DE2           ADD      R0,SP,#+256
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0920A0E1           MOV      R2,R9
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   470F8DE2           ADD      R0,SP,#+284
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000328   0920A0E1           MOV      R2,R9
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   710F8DE2           ADD      R0,SP,#+452
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000338   0920A0E1           MOV      R2,R9
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   4E0F8DE2           ADD      R0,SP,#+312
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   0920A0E1           MOV      R2,R9
   \   0000034C   0110A0E3           MOV      R1,#+1
   \   00000350   550F8DE2           ADD      R0,SP,#+340
   \   00000354   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000358   0920A0E1           MOV      R2,R9
   \   0000035C   0110A0E3           MOV      R1,#+1
   \   00000360   5C0F8DE2           ADD      R0,SP,#+368
   \   00000364   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000368   0920A0E1           MOV      R2,R9
   \   0000036C   0110A0E3           MOV      R1,#+1
   \   00000370   630F8DE2           ADD      R0,SP,#+396
   \   00000374   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000378   0920A0E1           MOV      R2,R9
   \   0000037C   0110A0E3           MOV      R1,#+1
   \   00000380   6A0F8DE2           ADD      R0,SP,#+424
   \   00000384   67FFFFEA           B        ??RestoreSettings_5
    110                          break;
    111                      case C_AI_END:      // EHSMARK May be removed
    112                      case C_AL_END:
    113                      case C_PRO_END:
    114                      case C_PRO_END_COMMON:
    115                      case C_PRO_END_PRO:
    116                          Key = C_CT_END;
   \                     ??RestoreSettings_6:
   \   00000388   AF60A0E3           MOV      R6,#+175
   \   0000038C   506E86E3           ORR      R6,R6,#0x500
   \   00000390   820000EA           B        ??RestoreSettings_4
    117                          break;
    118                      case C_CT_END:
    119                          break;
    120                      case C_CT_CARGO_TYPE_KEY:
    121                          {
    122                              // Don't overwrite the original CargoTypeKey!
    123                              int DummyCargoTypeKey = SettingsString->ReadLong(ErrorLine);
   \                     ??RestoreSettings_7:
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0D10A0E1           MOV      R1,SP
   \   0000039C   0500A0E1           MOV      R0,R5
   \   000003A0   ........           _BLF     ??ReadLong,??ReadLong??rA
    124                          }
    125                          NoError = !ErrorLine;
   \   000003A4   00009DE5           LDR      R0,[SP, #+0]
   \   000003A8   000050E3           CMP      R0,#+0
   \   000003AC   0100001A           BNE      ??RestoreSettings_24
   \                     ??RestoreSettings_25:
   \   000003B0   0190A0E3           MOV      R9,#+1
   \   000003B4   790000EA           B        ??RestoreSettings_4
   \                     ??RestoreSettings_24:
   \   000003B8   0090A0E3           MOV      R9,#+0
   \   000003BC   770000EA           B        ??RestoreSettings_4
    126                          break;
    127                      case C_CT_DB_IDNUMBER:
    128                          DB_IdNumber = SettingsString->ReadLong(ErrorLine);
   \                     ??RestoreSettings_23:
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0D10A0E1           MOV      R1,SP
   \   000003C8   0500A0E1           MOV      R0,R5
   \   000003CC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000003D0   B00084E5           STR      R0,[R4, #+176]
    129                          NoError = !ErrorLine;
   \                     ??RestoreSettings_26:
   \   000003D4   00009DE5           LDR      R0,[SP, #+0]
   \   000003D8   000050E3           CMP      R0,#+0
   \   000003DC   F5FFFF1A           BNE      ??RestoreSettings_24
   \   000003E0   F2FFFFEA           B        ??RestoreSettings_25
    130                          break;
    131                      case C_CT_BASIC_CARGO_TYPE:
    132                          BaseCargoType = SettingsString->ReadLong(ErrorLine);
   \                     ??RestoreSettings_8:
   \   000003E4   0020A0E3           MOV      R2,#+0
   \   000003E8   0D10A0E1           MOV      R1,SP
   \   000003EC   0500A0E1           MOV      R0,R5
   \   000003F0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000003F4   F00084E5           STR      R0,[R4, #+240]
    133                          NoError = !ErrorLine;
   \   000003F8   00009DE5           LDR      R0,[SP, #+0]
   \   000003FC   000050E3           CMP      R0,#+0
   \   00000400   EAFFFF0A           BEQ      ??RestoreSettings_25
   \   00000404   EBFFFFEA           B        ??RestoreSettings_24
    134                          break;
    135                      case C_CT_OD1:
    136                          OD1 = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_9:
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0D10A0E1           MOV      R1,SP
   \   00000410   0500A0E1           MOV      R0,R5
   \   00000414   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000418   B40084E5           STR      R0,[R4, #+180]
   \   0000041C   B81084E5           STR      R1,[R4, #+184]
    137                          NoError = !ErrorLine;
   \   00000420   EBFFFFEA           B        ??RestoreSettings_26
    138                          break;
    139                      case C_CT_OD2:
    140                          OD2     = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_10:
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0D10A0E1           MOV      R1,SP
   \   0000042C   0500A0E1           MOV      R0,R5
   \   00000430   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000434   BC0084E5           STR      R0,[R4, #+188]
   \   00000438   C01084E5           STR      R1,[R4, #+192]
    141                          NoError = !ErrorLine;
   \                     ??RestoreSettings_27:
   \   0000043C   00009DE5           LDR      R0,[SP, #+0]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   DBFFFF1A           BNE      ??RestoreSettings_24
   \   00000448   D8FFFFEA           B        ??RestoreSettings_25
    142                          break;
    143                      case C_CT_REFTEMP1:
    144                          RefTmp1 = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_11:
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0D10A0E1           MOV      R1,SP
   \   00000454   0500A0E1           MOV      R0,R5
   \   00000458   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000045C   C40084E5           STR      R0,[R4, #+196]
   \   00000460   C81084E5           STR      R1,[R4, #+200]
    145                          NoError = !ErrorLine;
   \   00000464   DAFFFFEA           B        ??RestoreSettings_26
    146                          break;
    147                      case C_CT_REFTEMP2:
    148                          RefTmp2 = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_12:
   \   00000468   0020A0E3           MOV      R2,#+0
   \   0000046C   0D10A0E1           MOV      R1,SP
   \   00000470   0500A0E1           MOV      R0,R5
   \   00000474   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000478   CC0084E5           STR      R0,[R4, #+204]
   \   0000047C   D01084E5           STR      R1,[R4, #+208]
    149                          NoError = !ErrorLine;
   \   00000480   00009DE5           LDR      R0,[SP, #+0]
   \   00000484   000050E3           CMP      R0,#+0
   \   00000488   C8FFFF0A           BEQ      ??RestoreSettings_25
   \                     ??RestoreSettings_28:
   \   0000048C   0090A0E3           MOV      R9,#+0
   \   00000490   420000EA           B        ??RestoreSettings_4
    150                          break;
    151                      case C_CT_COEFF:
    152                          Coeff   = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_13:
   \   00000494   0020A0E3           MOV      R2,#+0
   \   00000498   0D10A0E1           MOV      R1,SP
   \   0000049C   0500A0E1           MOV      R0,R5
   \   000004A0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000004A4   D40084E5           STR      R0,[R4, #+212]
   \   000004A8   D81084E5           STR      R1,[R4, #+216]
    153                          NoError = !ErrorLine;
   \   000004AC   C8FFFFEA           B        ??RestoreSettings_26
    154                          break;
    155                      case C_CT_MOLMASS:
    156                          MolMass = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_21:
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0D10A0E1           MOV      R1,SP
   \   000004B8   0500A0E1           MOV      R0,R5
   \   000004BC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000004C0   DC0084E5           STR      R0,[R4, #+220]
   \   000004C4   E01084E5           STR      R1,[R4, #+224]
    157                          NoError = !ErrorLine;
   \   000004C8   DBFFFFEA           B        ??RestoreSettings_27
    158                          break;
    159                      case C_CT_VISCOSITY    :
    160                          Viscosity = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_22:
   \   000004CC   0020A0E3           MOV      R2,#+0
   \   000004D0   0D10A0E1           MOV      R1,SP
   \   000004D4   0500A0E1           MOV      R0,R5
   \   000004D8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000004DC   E40084E5           STR      R0,[R4, #+228]
   \   000004E0   E81084E5           STR      R1,[R4, #+232]
    161                          NoError = !ErrorLine;
   \   000004E4   BAFFFFEA           B        ??RestoreSettings_26
    162                          break;
    163                      case C_CT_COLOUR     :
    164                          Colour  = (TColor)SettingsString->ReadLong(ErrorLine);
   \                     ??RestoreSettings_14:
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0D10A0E1           MOV      R1,SP
   \   000004F0   0500A0E1           MOV      R0,R5
   \   000004F4   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000004F8   F40084E5           STR      R0,[R4, #+244]
    165                          NoError = !ErrorLine;
   \   000004FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000500   000050E3           CMP      R0,#+0
   \   00000504   E0FFFF1A           BNE      ??RestoreSettings_28
   \   00000508   A8FFFFEA           B        ??RestoreSettings_25
    166                          break;
    167                      case C_CT_NAME       :
    168                          Name = SettingsString->GetRemainingLine(ErrorLine);
   \                     ??RestoreSettings_15:
   \   0000050C   0D20A0E1           MOV      R2,SP
   \   00000510   781F8DE2           ADD      R1,SP,#+480
   \   00000514   0500A0E1           MOV      R0,R5
   \   00000518   ........           _BLF     ??GetRemainingLine,??GetRemainingLine??rA
   \   0000051C   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000520   0020A0E3           MOV      R2,#+0
   \   00000524   003090E5           LDR      R3,[R0, #+0]
   \   00000528   781F8DE2           ADD      R1,SP,#+480
   \   0000052C   440084E2           ADD      R0,R4,#+68
   \   00000530   ........           _BLF     ??assign,??assign??rA
   \   00000534   0020A0E3           MOV      R2,#+0
   \   00000538   0110A0E3           MOV      R1,#+1
   \   0000053C   780F8DE2           ADD      R0,SP,#+480
   \   00000540   ........           _BLF     ??_Tidy,??_Tidy??rA
    169                          NoError = !ErrorLine;
   \   00000544   A2FFFFEA           B        ??RestoreSettings_26
    170                          break;
    171                      case C_CT_IS_DEFINED :
    172                          IsDefined = true;
   \                     ??RestoreSettings_16:
   \   00000548   A900C4E5           STRB     R0,[R4, #+169]
   \   0000054C   130000EA           B        ??RestoreSettings_4
    173                          break;
    174                      case C_CT_HIGH_TEMP        :
    175                          HighTempLimit = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_17:
   \   00000550   0020A0E3           MOV      R2,#+0
   \   00000554   0D10A0E1           MOV      R1,SP
   \   00000558   0500A0E1           MOV      R0,R5
   \   0000055C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000560   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000564   F80084E5           STR      R0,[R4, #+248]
    176                          NoError = !ErrorLine;
   \   00000568   00009DE5           LDR      R0,[SP, #+0]
   \   0000056C   000050E3           CMP      R0,#+0
   \   00000570   90FFFF1A           BNE      ??RestoreSettings_24
   \   00000574   8DFFFFEA           B        ??RestoreSettings_25
    177                          break;
    178                      case C_CT_LOW_TEMP         :
    179                          LowTempLimit = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_18:
   \   00000578   0020A0E3           MOV      R2,#+0
   \   0000057C   0D10A0E1           MOV      R1,SP
   \   00000580   0500A0E1           MOV      R0,R5
   \   00000584   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000588   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000058C   FC0084E5           STR      R0,[R4, #+252]
    180                          NoError = !ErrorLine;
   \   00000590   A9FFFFEA           B        ??RestoreSettings_27
    181                          break;
    182                      case C_CT_HIGH_TEMP_ENABLE :
    183                          HighTempEnable = true;
   \                     ??RestoreSettings_19:
   \   00000594   0001C4E5           STRB     R0,[R4, #+256]
   \   00000598   000000EA           B        ??RestoreSettings_4
    184                          break;
    185                      case C_CT_LOW_TEMP_ENABLE  :
    186                          LowTempEnable = true;
   \                     ??RestoreSettings_20:
   \   0000059C   0101C4E5           STRB     R0,[R4, #+257]
    187                          break;
    188                      }
    189                  }
    190              }while ( NoError && (ErrorLine != EOF) && (Key != C_CT_END) );
   \                     ??RestoreSettings_4:
   \   000005A0   0020A0E3           MOV      R2,#+0
   \   000005A4   0110A0E3           MOV      R1,#+1
   \   000005A8   74008DE2           ADD      R0,SP,#+116
   \   000005AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B0   000059E3           CMP      R9,#+0
   \   000005B4   0D00000A           BEQ      ??RestoreSettings_29
   \   000005B8   00009DE5           LDR      R0,[SP, #+0]
   \   000005BC   080050E1           CMP      R0,R8
   \   000005C0   AF00A013           MOVNE    R0,#+175
   \   000005C4   500E8013           ORRNE    R0,R0,#0x500
   \   000005C8   00005611           CMPNE    R6,R0
   \   000005CC   95FEFF1A           BNE      ??RestoreSettings_2
    191              if ( NoError ) {
    192                  switch ( BaseCargoType ) {
   \   000005D0   F00094E5           LDR      R0,[R4, #+240]
   \   000005D4   080040E2           SUB      R0,R0,#+8
   \   000005D8   120050E3           CMP      R0,#+18
   \   000005DC   0300008A           BHI      ??RestoreSettings_29
    193                  case CTY_SIMPLE_LIN:
    194                  case CTY_LINEAR    :
    195                  case CTY_BALLAST   :
    196                  case CTY_HFO       :
    197                  case CTY_DO        :
    198                  case CTY_LUB       :
    199                  case CTY_FW        :
    200                  case CTY_SEA       :
    201                      break;
    202                  case CTY_API_53A  :
    203                  case CTY_API_53B  :
    204                  case CTY_API_53D  :
    205                  case CTY_API_53E  :
    206                  case CTY_API_54A  :
    207                  case CTY_API_54B  :
    208                  case CTY_API_54D  :
    209                  case CTY_API_54E  :
    210                  case CTY_API_59A  :
    211                  case CTY_API_59B  :
    212                  case CTY_API_59D  :
    213                  case CTY_API_59E  :
    214                  case CTY_API_60A  :
    215                  case CTY_API_60B  :
    216                  case CTY_API_60D  :
    217                  case CTY_API_60E  :
    218                  case CTY_API_6A   :
    219                  case CTY_API_6B   :
    220                  case CTY_API_6D   :
    221                      ActualTemp = RefTmp2;
   \   000005E0   CC0094E5           LDR      R0,[R4, #+204]
   \   000005E4   D01094E5           LDR      R1,[R4, #+208]
   \   000005E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005EC   AC0084E5           STR      R0,[R4, #+172]
    222                      break;
    223                  default:
    224                      break;
    225                  }
    226              }
    227              if ( Master && NoError ) {
   \                     ??RestoreSettings_29:
   \   000005F0   34009FE5           LDR      R0,??RestoreSettings_1+0x8  ;; Master
   \   000005F4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000005F8   000019E1           TST      R9,R0
   \   000005FC   0500000A           BEQ      ??RestoreSettings_30
    228                  SendData(CMD_GENERIC_STATIC_DATA);
   \   00000600   A42094E5           LDR      R2,[R4, #+164]
   \   00000604   6610A0E3           MOV      R1,#+102
   \   00000608   402092E5           LDR      R2,[R2, #+64]
   \   0000060C   0400A0E1           MOV      R0,R4
   \   00000610   0FE0A0E1           MOV      LR,PC
   \   00000614   12FF2FE1           BX       R2
    229              }
    230          
    231              return (NoError);
   \                     ??RestoreSettings_30:
   \   00000618   0900A0E1           MOV      R0,R9
   \   0000061C   7FDF8DE2           ADD      SP,SP,#+508
   \   00000620   ........           B        ?Subroutine31
   \                     ??RestoreSettings_1:
   \   00000624   ........           DC32     NewLineStr
   \   00000628   ........           DC32     `?<Constant "Cargotype ">`
   \   0000062C   ........           DC32     Master
    232          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine31_0:
   \   00000008   ........           DC32     SizeofBasicCargoNameList
   \   0000000C   008066C0           DC32     0xffffffffc0668000
   \   00000010   008066C0           DC32     0xffffffffc0668000
    233          

   \                                 In segment CODE, align 4, keep-with-next
    234          CTOUser* CTOUser::FindCargo(unsigned IdNum) {
   \                     ??FindCargo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    235              CTOUser *ObjPtr = NULL;
    236              map<unsigned, CTOUser *>::iterator ObjMapIterator;
    237              ObjMapIterator = CargoMap.find(IdNum);
   \   00000004   ........           LDR      R5,??DataTable15  ;; ??ObjectSet
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   180085E2           ADD      R0,R5,#+24
   \   00000014   ........           _BLF     ??find,??find??rA
    238              if ( ObjMapIterator != CargoMap.end() ) {
   \   00000018   181085E2           ADD      R1,R5,#+24
   \   0000001C   010050E1           CMP      R0,R1
    239                  ObjPtr = ObjMapIterator->second;
   \   00000020   14409015           LDRNE    R4,[R0, #+20]
    240              }
    241              return (ObjPtr);
   \   00000024   ........           B        ?Subroutine30
    242          }
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          int CTOUser::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20C09DE5           LDR      R12,[SP, #+32]
   \   00000008   0340A0E1           MOV      R4,R3
   \   0000000C   1C309DE5           LDR      R3,[SP, #+28]
    245              int Status = GETVAL_NO_ERR;
   \   00000010   0050A0E3           MOV      R5,#+0
    246              switch ( ValueId ) {
   \   00000014   05E0A0E3           MOV      LR,#+5
   \   00000018   0160A0E3           MOV      R6,#+1
   \   0000001C   0070A0E3           MOV      R7,#+0
   \   00000020   7E9E86E3           ORR      R9,R6,#0x7E0
   \   00000024   090051E1           CMP      R1,R9
   \   00000028   2D00000A           BEQ      ??GetValue_2
   \   0000002C   239089E2           ADD      R9,R9,#+35
   \   00000030   090051E1           CMP      R1,R9
   \   00000034   1300000A           BEQ      ??GetValue_3
   \   00000038   029089E3           ORR      R9,R9,#0x2
   \   0000003C   090051E1           CMP      R1,R9
   \   00000040   3200000A           BEQ      ??GetValue_4
   \   00000044   019089E3           ORR      R9,R9,#0x1
   \   00000048   090051E1           CMP      R1,R9
   \   0000004C   2900000A           BEQ      ??GetValue_5
   \   00000050   8C90A0E3           MOV      R9,#+140
   \   00000054   8C9D89E3           ORR      R9,R9,#0x2300
   \   00000058   090051E1           CMP      R1,R9
   \   0000005C   1300000A           BEQ      ??GetValue_6
   \   00000060   019089E3           ORR      R9,R9,#0x1
   \   00000064   090051E1           CMP      R1,R9
   \   00000068   0C00000A           BEQ      ??GetValue_7
   \   0000006C   019089E2           ADD      R9,R9,#+1
   \   00000070   090051E1           CMP      R1,R9
   \   00000074   1500000A           BEQ      ??GetValue_8
   \   00000078   019089E3           ORR      R9,R9,#0x1
   \   0000007C   090051E1           CMP      R1,R9
   \   00000080   0E00000A           BEQ      ??GetValue_9
   \   00000084   250000EA           B        ??GetValue_10
    247              case SVT_IS_DEFINED:
    248                  DecPnt     = 0;
   \                     ??GetValue_3:
   \   00000088   007083E5           STR      R7,[R3, #+0]
    249                  Unit       = NO_UNIT;
   \   0000008C   00708CE5           STR      R7,[R12, #+0]
    250                  MyRetValue = (float)IsDefined;
   \   00000090   A900D0E5           LDRB     R0,[R0, #+169]
   \                     ??GetValue_11:
   \   00000094   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \                     ??GetValue_12:
   \   00000098   000084E5           STR      R0,[R4, #+0]
   \   0000009C   250000EA           B        ??GetValue_13
    251                  break;
    252              case SVT_LO_TEMP_LIMIT:
    253                  DecPnt     = 1;
   \                     ??GetValue_7:
   \   000000A0   006083E5           STR      R6,[R3, #+0]
    254                  Unit       = TEMP_UNIT;
   \   000000A4   00E08CE5           STR      LR,[R12, #+0]
    255                  MyRetValue = LowTempLimit;
   \   000000A8   FC0090E5           LDR      R0,[R0, #+252]
   \   000000AC   F9FFFFEA           B        ??GetValue_12
    256                  break;
    257              case SVT_HI_TEMP_LIMIT:
    258                  DecPnt     = 1;
   \                     ??GetValue_6:
   \   000000B0   006083E5           STR      R6,[R3, #+0]
    259                  Unit       = TEMP_UNIT;
   \   000000B4   00E08CE5           STR      LR,[R12, #+0]
    260                  MyRetValue = HighTempLimit;
   \   000000B8   F80090E5           LDR      R0,[R0, #+248]
   \                     ??GetValue_14:
   \   000000BC   F5FFFFEA           B        ??GetValue_12
    261                  break;
    262              case SVT_LO_TEMP_ENABLE:
    263                  DecPnt     = 0;
   \                     ??GetValue_9:
   \   000000C0   007083E5           STR      R7,[R3, #+0]
    264                  Unit       = NO_UNIT;
   \   000000C4   00708CE5           STR      R7,[R12, #+0]
    265                  MyRetValue = LowTempEnable;
   \   000000C8   0101D0E5           LDRB     R0,[R0, #+257]
   \   000000CC   F0FFFFEA           B        ??GetValue_11
    266                  break;
    267              case SVT_HI_TEMP_ENABLE:
    268                  DecPnt     = 0;
   \                     ??GetValue_8:
   \   000000D0   007083E5           STR      R7,[R3, #+0]
    269                  Unit       = NO_UNIT;
   \   000000D4   00708CE5           STR      R7,[R12, #+0]
    270                  MyRetValue = HighTempEnable;
   \   000000D8   0001D0E5           LDRB     R0,[R0, #+256]
   \   000000DC   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000000E0   ECFFFFEA           B        ??GetValue_12
    271                  break;
    272              case SVT_COLOUR:
    273                  DecPnt     = 0;
   \                     ??GetValue_2:
   \   000000E4   007083E5           STR      R7,[R3, #+0]
    274                  Unit       = NO_UNIT;
   \   000000E8   00708CE5           STR      R7,[R12, #+0]
    275                  MyRetValue = Colour;
   \   000000EC   F40090E5           LDR      R0,[R0, #+244]
   \                     ??GetValue_15:
   \   000000F0   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000F4   E7FFFFEA           B        ??GetValue_12
    276                  break;
    277              case SVT_CARGO_TYPE_KEY:
    278                  DecPnt     = 0;
   \                     ??GetValue_5:
   \   000000F8   007083E5           STR      R7,[R3, #+0]
    279                  Unit       = NO_UNIT;
   \   000000FC   00708CE5           STR      R7,[R12, #+0]
    280                  MyRetValue = CargoTypeKey;
   \   00000100   EC0090E5           LDR      R0,[R0, #+236]
   \   00000104   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000108   000084E5           STR      R0,[R4, #+0]
   \   0000010C   090000EA           B        ??GetValue_13
    281                  break;
    282              case SVT_DB_IDNUMBER:
    283                  DecPnt     = 0;
   \                     ??GetValue_4:
   \   00000110   007083E5           STR      R7,[R3, #+0]
    284                  Unit       = NO_UNIT;
   \   00000114   00708CE5           STR      R7,[R12, #+0]
    285                  MyRetValue = DB_IdNumber;
   \   00000118   B00090E5           LDR      R0,[R0, #+176]
   \   0000011C   F3FFFFEA           B        ??GetValue_15
    286                  break;
    287              default:
    288                  Status = CargoTypeObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_10:
   \   00000120   00102DE9           PUSH     {R12}
   \   00000124   08002DE9           PUSH     {R3}
   \   00000128   0430A0E1           MOV      R3,R4
   \   0000012C   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000130   0050A0E1           MOV      R5,R0
   \   00000134   08D08DE2           ADD      SP,SP,#+8
    289                  break;
    290              }
    291              return (Status);
   \                     ??GetValue_13:
   \   00000138   0500A0E1           MOV      R0,R5
   \   0000013C   F043BDE8           POP      {R4-R9,LR}
   \   00000140   1EFF2FE1           BX       LR               ;; return
    292          }
    293          

   \                                 In segment CODE, align 4, keep-with-next
    294          int CTOUser::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    295              int Status = GETVAL_NO_ERR;
    296              switch ( ValueId ) {
    297              default:
    298                  Status = CargoTypeObject::GetStringValue(ValueId, Index, MyString);
    299                  break;
    300              }
    301              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine32
    302          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    303          
    304          

   \                                 In segment CODE, align 4, keep-with-next
    305          int CTOUser::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    306              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
    307              switch ( ValueId ) {
   \   00000004   ........           LDR      R6,??DataTable15  ;; ??ObjectSet
   \   00000008   E8DF4DE2           SUB      SP,SP,#+928
   \   0000000C   C4A3DDE5           LDRB     R10,[SP, #+964]
   \   00000010   C8539DE5           LDR      R5,[SP, #+968]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0180A0E1           MOV      R8,R1
   \   0000001C   0290A0E1           MOV      R9,R2
   \   00000020   0370A0E1           MOV      R7,R3
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   00108DE5           STR      R1,[SP, #+0]
   \   0000002C   20108DE5           STR      R1,[SP, #+32]
   \   00000030   7D0E58E3           CMP      R8,#+2000
   \   00000034   3E00000A           BEQ      ??PutValue_2
   \   00000038   D310A0E3           MOV      R1,#+211
   \   0000003C   701E81E3           ORR      R1,R1,#0x700
   \   00000040   010058E1           CMP      R8,R1
   \   00000044   E300000A           BEQ      ??PutValue_3
   \   00000048   0E1081E2           ADD      R1,R1,#+14
   \   0000004C   010058E1           CMP      R8,R1
   \   00000050   C000000A           BEQ      ??PutValue_4
   \   00000054   211081E2           ADD      R1,R1,#+33
   \   00000058   010058E1           CMP      R8,R1
   \   0000005C   BB00000A           BEQ      ??PutValue_5
   \   00000060   021081E2           ADD      R1,R1,#+2
   \   00000064   010058E1           CMP      R8,R1
   \   00000068   1F00000A           BEQ      ??PutValue_6
   \   0000006C   011081E3           ORR      R1,R1,#0x1
   \   00000070   010058E1           CMP      R8,R1
   \   00000074   B000000A           BEQ      ??PutValue_7
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   010058E1           CMP      R8,R1
   \   00000080   4B00000A           BEQ      ??PutValue_8
   \   00000084   011081E3           ORR      R1,R1,#0x1
   \   00000088   010058E1           CMP      R8,R1
   \   0000008C   C100000A           BEQ      ??PutValue_9
   \   00000090   011081E2           ADD      R1,R1,#+1
   \   00000094   010058E1           CMP      R8,R1
   \   00000098   E500000A           BEQ      ??PutValue_10
   \   0000009C   011081E3           ORR      R1,R1,#0x1
   \   000000A0   010058E1           CMP      R8,R1
   \   000000A4   0701000A           BEQ      ??PutValue_11
   \   000000A8   011081E2           ADD      R1,R1,#+1
   \   000000AC   010058E1           CMP      R8,R1
   \   000000B0   FB00000A           BEQ      ??PutValue_12
   \   000000B4   8C10A0E3           MOV      R1,#+140
   \   000000B8   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000BC   010058E1           CMP      R8,R1
   \   000000C0   6300000A           BEQ      ??PutValue_13
   \   000000C4   011081E3           ORR      R1,R1,#0x1
   \   000000C8   010058E1           CMP      R8,R1
   \   000000CC   4800000A           BEQ      ??PutValue_14
   \   000000D0   011081E2           ADD      R1,R1,#+1
   \   000000D4   010058E1           CMP      R8,R1
   \   000000D8   8500000A           BEQ      ??PutValue_15
   \   000000DC   011081E3           ORR      R1,R1,#0x1
   \   000000E0   010058E1           CMP      R8,R1
   \   000000E4   7000000A           BEQ      ??PutValue_16
   \   000000E8   FF0000EA           B        ??PutValue_17
    308              case SVT_IS_DEFINED:
    309                  {
    310                      bool Value = (bool)GetUnsigned(NewValue, Status);
   \                     ??PutValue_6:
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   04008DE2           ADD      R0,SP,#+4
   \   000000F4   ........           _BLF     ??string,??string??rA
   \   000000F8   0D10A0E1           MOV      R1,SP
   \   000000FC   04008DE2           ADD      R0,SP,#+4
   \   00000100   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0160A013           MOVNE    R6,#+1
   \   0000010C   0060A003           MOVEQ    R6,#+0
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   04008DE2           ADD      R0,SP,#+4
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
    311                      if ( Status == E_NO_ERR ) {
   \   00000120   00009DE5           LDR      R0,[SP, #+0]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0001001A           BNE      ??PutValue_18
    312                          IsDefined = Value;
   \   0000012C   A960C4E5           STRB     R6,[R4, #+169]
   \   00000130   010100EA           B        ??PutValue_19
    313                      }
    314                  }
    315                  break;
    316              case SVT_BASIC_TYPE:
    317                  {
    318                      int Value = (int)ConvertToSi(NewValue, NO_UNIT, Status, CTY_SIMPLE_LIN, SizeofBasicCargoNameList, 0.0);
   \                     ??PutValue_2:
   \   00000134   0710A0E1           MOV      R1,R7
   \   00000138   04008DE2           ADD      R0,SP,#+4
   \   0000013C   ........           _BLF     ??string,??string??rA
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   03002DE9           PUSH     {R0,R1}
   \   0000014C   ........           LDR      R0,??Subroutine31_0  ;; SizeofBasicCargoNameList
   \   00000150   000090E5           LDR      R0,[R0, #+0]
   \   00000154   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000158   03002DE9           PUSH     {R0,R1}
   \   0000015C   0000A0E3           MOV      R0,#+0
   \   00000160   0010A0E1           MOV      R1,R0
   \   00000164   03002DE9           PUSH     {R0,R1}
   \   00000168   18208DE2           ADD      R2,SP,#+24
   \   0000016C   1C008DE2           ADD      R0,SP,#+28
   \   00000170   0800BDE8           POP      {R3}
   \   00000174   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000178   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   0000017C   0060A0E1           MOV      R6,R0
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   18008DE2           ADD      R0,SP,#+24
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
    319                      if ( Status == E_NO_ERR ) {
   \   00000190   14009DE5           LDR      R0,[SP, #+20]
   \   00000194   14D08DE2           ADD      SP,SP,#+20
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   E300001A           BNE      ??PutValue_18
    320                          Status = InputBasicCargoType(Value);
   \   000001A0   0610A0E1           MOV      R1,R6
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   ........           _BLF     ??InputBasicCargoType,??InputBasicCargoType??rA
   \   000001AC   00008DE5           STR      R0,[SP, #+0]
   \   000001B0   DE0000EA           B        ??PutValue_18
    321                      }
    322                  }
    323                  break;
    324              case SVT_DB_IDNUMBER:
    325                  {
    326                      int Value = GetInt(NewValue, Status);
   \                     ??PutValue_8:
   \   000001B4   0710A0E1           MOV      R1,R7
   \   000001B8   04008DE2           ADD      R0,SP,#+4
   \   000001BC   ........           _BLF     ??string,??string??rA
   \   000001C0   0D10A0E1           MOV      R1,SP
   \   000001C4   04008DE2           ADD      R0,SP,#+4
   \   000001C8   ........           _BLF     ??GetInt,??GetInt??rA
   \   000001CC   0060A0E1           MOV      R6,R0
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   04008DE2           ADD      R0,SP,#+4
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    327                      if ( Status == E_NO_ERR ) {
   \   000001E0   00009DE5           LDR      R0,[SP, #+0]
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   D000001A           BNE      ??PutValue_18
    328                          DB_IdNumber = Value;
   \   000001EC   B06084E5           STR      R6,[R4, #+176]
   \   000001F0   CE0000EA           B        ??PutValue_18
    329                      }
    330                  }
    331                  break;
    332              case SVT_LO_TEMP_LIMIT:
    333                  LowTempLimit = ConvertToSi(NewValue, TEMP_UNIT, Status, MIN_TEMP, MAX_TEMP, LowTempLimit);
   \                     ??PutValue_14:
   \   000001F4   0710A0E1           MOV      R1,R7
   \   000001F8   CC0F8DE2           ADD      R0,SP,#+816
   \   000001FC   ........           _BLF     ??string,??string??rA
   \   00000200   FC0094E5           LDR      R0,[R4, #+252]
   \   00000204   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000208   03002DE9           PUSH     {R0,R1}
   \   0000020C   0000A0E3           MOV      R0,#+0
   \   00000210   4014A0E3           MOV      R1,#+1073741824
   \   00000214   691881E3           ORR      R1,R1,#0x690000
   \   00000218   03002DE9           PUSH     {R0,R1}
   \   0000021C   ........           LDR      R1,??Subroutine31_0+0x4  ;; 0xffffffffc0668000
   \   00000220   03002DE9           PUSH     {R0,R1}
   \   00000224   18208DE2           ADD      R2,SP,#+24
   \   00000228   D20F8DE2           ADD      R0,SP,#+840
   \   0000022C   0800BDE8           POP      {R3}
   \   00000230   0510A0E3           MOV      R1,#+5
   \   00000234   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000238   FC0084E5           STR      R0,[R4, #+252]
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   D10F8DE2           ADD      R0,SP,#+836
   \                     ??PutValue_20:
   \   00000248   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000024C   14D08DE2           ADD      SP,SP,#+20
   \   00000250   B60000EA           B        ??PutValue_18
    334                  break;
    335              case SVT_HI_TEMP_LIMIT:
    336                  HighTempLimit = ConvertToSi(NewValue, TEMP_UNIT, Status, MIN_TEMP, MAX_TEMP, HighTempLimit);
   \                     ??PutValue_13:
   \   00000254   0710A0E1           MOV      R1,R7
   \   00000258   D30F8DE2           ADD      R0,SP,#+844
   \   0000025C   ........           _BLF     ??string,??string??rA
   \   00000260   F80094E5           LDR      R0,[R4, #+248]
   \   00000264   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000268   03002DE9           PUSH     {R0,R1}
   \   0000026C   0000A0E3           MOV      R0,#+0
   \   00000270   4014A0E3           MOV      R1,#+1073741824
   \   00000274   691881E3           ORR      R1,R1,#0x690000
   \   00000278   03002DE9           PUSH     {R0,R1}
   \   0000027C   ........           LDR      R1,??Subroutine31_0+0x8  ;; 0xffffffffc0668000
   \   00000280   03002DE9           PUSH     {R0,R1}
   \   00000284   18208DE2           ADD      R2,SP,#+24
   \   00000288   D90F8DE2           ADD      R0,SP,#+868
   \   0000028C   0800BDE8           POP      {R3}
   \   00000290   0510A0E3           MOV      R1,#+5
   \   00000294   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000298   F80084E5           STR      R0,[R4, #+248]
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   D80F8DE2           ADD      R0,SP,#+864
   \   000002A8   E6FFFFEA           B        ??PutValue_20
    337                  break;
    338              case SVT_LO_TEMP_ENABLE:
    339                  {
    340                      bool Value = (bool)GetUnsigned(NewValue, Status);
   \                     ??PutValue_16:
   \   000002AC   0710A0E1           MOV      R1,R7
   \   000002B0   04008DE2           ADD      R0,SP,#+4
   \   000002B4   ........           _BLF     ??string,??string??rA
   \   000002B8   0D10A0E1           MOV      R1,SP
   \   000002BC   04008DE2           ADD      R0,SP,#+4
   \   000002C0   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   000002C4   000050E3           CMP      R0,#+0
   \   000002C8   0160A013           MOVNE    R6,#+1
   \   000002CC   0060A003           MOVEQ    R6,#+0
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   04008DE2           ADD      R0,SP,#+4
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    341                      if ( Status == E_NO_ERR ) {
   \   000002E0   00009DE5           LDR      R0,[SP, #+0]
   \   000002E4   000050E3           CMP      R0,#+0
   \   000002E8   9000001A           BNE      ??PutValue_18
    342                          LowTempEnable = Value;
   \   000002EC   0161C4E5           STRB     R6,[R4, #+257]
   \   000002F0   910000EA           B        ??PutValue_19
    343                      }
    344                  }
    345                  break;
    346              case SVT_HI_TEMP_ENABLE:
    347                  {
    348                      bool Value = (bool)GetUnsigned(NewValue, Status);
   \                     ??PutValue_15:
   \   000002F4   0710A0E1           MOV      R1,R7
   \   000002F8   04008DE2           ADD      R0,SP,#+4
   \   000002FC   ........           _BLF     ??string,??string??rA
   \   00000300   0D10A0E1           MOV      R1,SP
   \   00000304   04008DE2           ADD      R0,SP,#+4
   \   00000308   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   0160A013           MOVNE    R6,#+1
   \   00000314   0060A003           MOVEQ    R6,#+0
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   04008DE2           ADD      R0,SP,#+4
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
    349                      if ( Status == E_NO_ERR ) {
   \   00000328   00009DE5           LDR      R0,[SP, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   7E00001A           BNE      ??PutValue_18
    350                          HighTempEnable = Value;
   \   00000334   0061C4E5           STRB     R6,[R4, #+256]
   \   00000338   7F0000EA           B        ??PutValue_19
    351                      }
    352                  }
    353                  break;
    354              case SVT_DELETE_CT:
    355                  DeleteCargo();
   \                     ??PutValue_7:
   \   0000033C   A41094E5           LDR      R1,[R4, #+164]
   \   00000340   5C1091E5           LDR      R1,[R1, #+92]
   \   00000344   0FE0A0E1           MOV      LR,PC
   \   00000348   11FF2FE1           BX       R1
   \   0000034C   770000EA           B        ??PutValue_18
    356                  break;
    357              case SVT_UPDATE_TANK_CT:
    358                  UpdateTankCargoType();
   \                     ??PutValue_5:
   \   00000350   ........           BL       ??UpdateTankCargoType
   \   00000354   750000EA           B        ??PutValue_18
    359                  break;
    360              case SVT_COLOUR:
    361                  {
    362                      TColor Value = (TColor)GetUnsigned(NewValue, Status);
   \                     ??PutValue_4:
   \   00000358   0710A0E1           MOV      R1,R7
   \   0000035C   04008DE2           ADD      R0,SP,#+4
   \   00000360   ........           _BLF     ??string,??string??rA
   \   00000364   0D10A0E1           MOV      R1,SP
   \   00000368   04008DE2           ADD      R0,SP,#+4
   \   0000036C   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   00000370   0060A0E1           MOV      R6,R0
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   04008DE2           ADD      R0,SP,#+4
   \   00000380   ........           _BLF     ??_Tidy,??_Tidy??rA
    363                      if ( Status == E_NO_ERR ) {
   \   00000384   00009DE5           LDR      R0,[SP, #+0]
   \   00000388   000050E3           CMP      R0,#+0
   \   0000038C   6700001A           BNE      ??PutValue_18
    364                          Colour = Value;
   \   00000390   F46084E5           STR      R6,[R4, #+244]
   \   00000394   650000EA           B        ??PutValue_18
    365                      }
    366                  }
    367                  break;
    368              case SVT_CARGO_TYPE_KEY:
    369                  {
    370                      int Value = (int)GetUnsigned(NewValue, Status);
   \                     ??PutValue_9:
   \   00000398   0710A0E1           MOV      R1,R7
   \   0000039C   04008DE2           ADD      R0,SP,#+4
   \   000003A0   ........           _BLF     ??string,??string??rA
   \   000003A4   0D10A0E1           MOV      R1,SP
   \   000003A8   04008DE2           ADD      R0,SP,#+4
   \   000003AC   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   000003B0   0060A0E1           MOV      R6,R0
   \   000003B4   0020A0E3           MOV      R2,#+0
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   04008DE2           ADD      R0,SP,#+4
   \   000003C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    371                      if ( Status == E_NO_ERR ) {
   \   000003C4   00009DE5           LDR      R0,[SP, #+0]
   \   000003C8   000050E3           CMP      R0,#+0
   \   000003CC   5700001A           BNE      ??PutValue_18
    372                          CargoTypeKey = Value;
   \   000003D0   EC6084E5           STR      R6,[R4, #+236]
   \   000003D4   550000EA           B        ??PutValue_18
    373                      }
    374                  }
    375                  break;
    376              case SVT_CARGO_TYPE_NAME:
    377                  if ( IsUniqueCargoName(NewValue, this) ) {
   \                     ??PutValue_3:
   \   000003D8   0710A0E1           MOV      R1,R7
   \   000003DC   DA0F8DE2           ADD      R0,SP,#+872
   \   000003E0   ........           _BLF     ??string,??string??rA
   \   000003E4   0410A0E1           MOV      R1,R4
   \   000003E8   DA0F8DE2           ADD      R0,SP,#+872
   \   000003EC   ........           BL       ??IsUniqueCargoName
   \   000003F0   0060A0E1           MOV      R6,R0
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   DA0F8DE2           ADD      R0,SP,#+872
   \   00000400   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000404   000056E3           CMP      R6,#+0
   \   00000408   0600000A           BEQ      ??PutValue_21
    378                      Name = NewValue;
   \   0000040C   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000410   0020A0E3           MOV      R2,#+0
   \   00000414   003090E5           LDR      R3,[R0, #+0]
   \   00000418   0710A0E1           MOV      R1,R7
   \   0000041C   440084E2           ADD      R0,R4,#+68
   \   00000420   ........           _BLF     ??assign,??assign??rA
   \   00000424   410000EA           B        ??PutValue_18
    379                  } else {
    380                      Status = E_DUPLICATE_NAME;
   \                     ??PutValue_21:
   \   00000428   3210A0E3           MOV      R1,#+50
   \   0000042C   00108DE5           STR      R1,[SP, #+0]
   \   00000430   460000EA           B        ??PutValue_22
    381                  }
    382                  break;
    383              case SVT_COPY_CT:
    384                  {
    385                      int CTyKey = GetInt(NewValue, Status);
   \                     ??PutValue_10:
   \   00000434   0710A0E1           MOV      R1,R7
   \   00000438   04008DE2           ADD      R0,SP,#+4
   \   0000043C   ........           _BLF     ??string,??string??rA
   \   00000440   0D10A0E1           MOV      R1,SP
   \   00000444   04008DE2           ADD      R0,SP,#+4
   \   00000448   ........           _BLF     ??GetInt,??GetInt??rA
   \   0000044C   0060A0E1           MOV      R6,R0
   \   00000450   0020A0E3           MOV      R2,#+0
   \   00000454   0110A0E3           MOV      R1,#+1
   \   00000458   04008DE2           ADD      R0,SP,#+4
   \   0000045C   ........           _BLF     ??_Tidy,??_Tidy??rA
    386                      if ( Status == E_NO_ERR ) {
   \   00000460   00009DE5           LDR      R0,[SP, #+0]
   \   00000464   000050E3           CMP      R0,#+0
   \   00000468   3000001A           BNE      ??PutValue_18
    387                          CTOUser *tmpPtr = Find(CTyKey);
   \   0000046C   0600A0E1           MOV      R0,R6
   \   00000470   ........           BL       ??Find
    388                          if ( tmpPtr ) {
   \   00000474   000050E3           CMP      R0,#+0
   \   00000478   2F00000A           BEQ      ??PutValue_19
    389                              *this = *tmpPtr;
   \   0000047C   0010A0E1           MOV      R1,R0
   \   00000480   24008DE2           ADD      R0,SP,#+36
   \   00000484   ........           _BLF     ??CTOUser,??CTOUser??rA
   \   00000488   0010A0E1           MOV      R1,R0
   \   0000048C   0400A0E1           MOV      R0,R4
   \   00000490   ........           BL       `??operator=`
   \   00000494   0210A0E3           MOV      R1,#+2
   \   00000498   24008DE2           ADD      R0,SP,#+36
   \                     ??PutValue_23:
   \   0000049C   ........           BL       `?~CTOUser`
   \   000004A0   220000EA           B        ??PutValue_18
    390                          }
    391                      }
    392                  }
    393                  break;
    394              case SVT_COPY_CT_FROM_BUFFER:
    395                  *this = *InputBuffer;
   \                     ??PutValue_12:
   \   000004A4   541096E5           LDR      R1,[R6, #+84]
   \   000004A8   4A0F8DE2           ADD      R0,SP,#+296
   \   000004AC   ........           _BLF     ??CTOUser,??CTOUser??rA
   \   000004B0   0010A0E1           MOV      R1,R0
   \   000004B4   0400A0E1           MOV      R0,R4
   \   000004B8   ........           BL       `??operator=`
   \   000004BC   0210A0E3           MOV      R1,#+2
   \   000004C0   4A0F8DE2           ADD      R0,SP,#+296
   \   000004C4   F4FFFFEA           B        ??PutValue_23
    396                  break;
    397              case SVT_COPY_CT_TO_BUFFER:
    398                  *InputBuffer = *this;
   \                     ??PutValue_11:
   \   000004C8   0410A0E1           MOV      R1,R4
   \   000004CC   8B0F8DE2           ADD      R0,SP,#+556
   \   000004D0   ........           _BLF     ??CTOUser,??CTOUser??rA
   \   000004D4   0010A0E1           MOV      R1,R0
   \   000004D8   540096E5           LDR      R0,[R6, #+84]
   \   000004DC   ........           BL       `??operator=`
   \   000004E0   0210A0E3           MOV      R1,#+2
   \   000004E4   8B0F8DE2           ADD      R0,SP,#+556
   \   000004E8   EBFFFFEA           B        ??PutValue_23
    399                  break;
    400              default:
    401                  Status = CargoTypeObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_17:
   \   000004EC   0710A0E1           MOV      R1,R7
   \   000004F0   E10F8DE2           ADD      R0,SP,#+900
   \   000004F4   ........           _BLF     ??string,??string??rA
   \   000004F8   20008DE2           ADD      R0,SP,#+32
   \   000004FC   01002DE9           PUSH     {R0}
   \   00000500   00042DE9           PUSH     {R10}
   \   00000504   E33F8DE2           ADD      R3,SP,#+908
   \   00000508   0920A0E1           MOV      R2,R9
   \   0000050C   0810A0E1           MOV      R1,R8
   \   00000510   0400A0E1           MOV      R0,R4
   \   00000514   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000518   08008DE5           STR      R0,[SP, #+8]
   \   0000051C   0020A0E3           MOV      R2,#+0
   \   00000520   0110A0E3           MOV      R1,#+1
   \   00000524   E30F8DE2           ADD      R0,SP,#+908
   \   00000528   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000052C   08D08DE2           ADD      SP,SP,#+8
    402                  break;
    403              }
    404              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_18:
   \   00000530   00009DE5           LDR      R0,[SP, #+0]
   \   00000534   000050E3           CMP      R0,#+0
   \   00000538   0400001A           BNE      ??PutValue_22
    405                  SetModifiedFlag();
   \                     ??PutValue_19:
   \   0000053C   A41094E5           LDR      R1,[R4, #+164]
   \   00000540   0400A0E1           MOV      R0,R4
   \   00000544   541091E5           LDR      R1,[R1, #+84]
   \   00000548   0FE0A0E1           MOV      LR,PC
   \   0000054C   11FF2FE1           BX       R1
    406              }
    407              if ( UnitId ) {
   \                     ??PutValue_22:
   \   00000550   000055E3           CMP      R5,#+0
    408                  *UnitId = ValUnitId;
   \   00000554   20009D15           LDRNE    R0,[SP, #+32]
   \   00000558   00008515           STRNE    R0,[R5, #+0]
    409              }
    410              return (Status);
   \   0000055C   00009DE5           LDR      R0,[SP, #+0]
   \   00000560   E8DF8DE2           ADD      SP,SP,#+928
   \   00000564                      REQUIRE ?Subroutine31
   \   00000564                      ;; // Fall through to label ?Subroutine31
    411          }
    412          

   \                                 In segment CODE, align 4, keep-with-next
    413          int CTOUser::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    414              int Status = E_NO_ERR;
    415              //switch ( ValueId ) {
    416              //default:
    417              Status = CargoTypeObject::PutFloatValue(ValueId, NewValue);
    418              //    break;
    419              //}
    420              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine32
   \   00000008                      ;; // Fall through to label ?Subroutine32
    421          
    422          }
    423          

   \                                 In segment CODE, align 4, keep-with-next
    424          ValueList* CTOUser::GetValueInfoTableStatic(int &Entries, int Index) {
    425              Entries = SizeofCargoTypeValueList;
   \                     ??GetValueInfoTableStatic:
   \   00000000   0C109FE5           LDR      R1,??GetValueInfoTableStatic_1  ;; SizeofCargoTypeValueList
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   001080E5           STR      R1,[R0, #+0]
    426              return (CargoTypeValueList);
   \   0000000C   04009FE5           LDR      R0,??GetValueInfoTableStatic_1+0x4  ;; CargoTypeValueList
   \   00000010   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTableStatic_1:
   \   00000014   ........           DC32     SizeofCargoTypeValueList
   \   00000018   ........           DC32     CargoTypeValueList
    427          }
    428          

   \                                 In segment CODE, align 4, keep-with-next
    429          void CTOUser::UpdateTankCargoType(void) {
   \                     ??UpdateTankCargoType:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    430              set<PRogramObjectBase *>::iterator pBIt;
    431              for ( pBIt = PROCargoTank::ObjectSet.begin(); pBIt != PROCargoTank::ObjectSet.end(); pBIt++ ) {
   \   00000004   68509FE5           LDR      R5,??UpdateTankCargoType_1  ;; ??ObjectSet_1
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   006095E5           LDR      R6,[R5, #+0]
   \   00000010   070000EA           B        ??UpdateTankCargoType_2
    432                  PROCargoTank *TElement = (PROCargoTank *)(*pBIt);
    433                  if ( TElement && (TElement->CargoType->CargoTypeKey == CargoTypeKey) ) {
    434                      if ( IsDefined ) {
    435                          TElement->GetCargoTypeSettings(CargoTypeKey);
    436                      } else {
    437                          TElement->CargoType->DeleteCargo();
   \                     ??UpdateTankCargoType_3:
   \   00000014   A41092E5           LDR      R1,[R2, #+164]
   \   00000018   0200A0E1           MOV      R0,R2
   \   0000001C   5C1091E5           LDR      R1,[R1, #+92]
   \   00000020   0FE0A0E1           MOV      LR,PC
   \   00000024   11FF2FE1           BX       R1
    438                      }
   \                     ??UpdateTankCargoType_4:
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000030   0060A0E1           MOV      R6,R0
   \                     ??UpdateTankCargoType_2:
   \   00000034   050056E1           CMP      R6,R5
   \   00000038   0000001A           BNE      ??UpdateTankCargoType_5
    439                  }
    440              }
    441          
    442          }
   \   0000003C   ........           B        ?Subroutine33
   \                     ??UpdateTankCargoType_5:
   \   00000040   100096E5           LDR      R0,[R6, #+16]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   F6FFFF0A           BEQ      ??UpdateTankCargoType_4
   \   0000004C   042390E5           LDR      R2,[R0, #+772]
   \   00000050   EC1094E5           LDR      R1,[R4, #+236]
   \   00000054   EC3092E5           LDR      R3,[R2, #+236]
   \   00000058   010053E1           CMP      R3,R1
   \   0000005C   F1FFFF1A           BNE      ??UpdateTankCargoType_4
   \   00000060   A930D4E5           LDRB     R3,[R4, #+169]
   \   00000064   000053E3           CMP      R3,#+0
   \   00000068   E9FFFF0A           BEQ      ??UpdateTankCargoType_3
   \   0000006C   ........           _BLF     ??GetCargoTypeSettings,??GetCargoTypeSettings??rA
   \   00000070   ECFFFFEA           B        ??UpdateTankCargoType_4
   \                     ??UpdateTankCargoType_1:
   \   00000074   ........           DC32     ??ObjectSet_1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine33:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    443          

   \                                 In segment CODE, align 4, keep-with-next
    444          bool CTOUser::CopyCargoSetting(CTOUser *SourcePtr) {
   \                     ??CopyCargoSetting:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   41DF4DE2           SUB      SP,SP,#+260
   \   00000008   0040A0E1           MOV      R4,R0
    445              bool Status = false;
    446              if ( SourcePtr && SourcePtr->IsDefined ) {
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   A900D115           LDRBNE   R0,[R1, #+169]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   00005013           CMPNE    R0,#+0
   \   0000001C   1100000A           BEQ      ??CopyCargoSetting_1
    447                  Status = true;
    448                  *this = *SourcePtr;
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??CTOUser,??CTOUser??rA
   \   00000028   0010A0E1           MOV      R1,R0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       `??operator=`
   \   00000034   0210A0E3           MOV      R1,#+2
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           BL       `?~CTOUser`
    449                  if ( !IsFixed ) {
   \   00000040   A800D4E5           LDRB     R0,[R4, #+168]
   \   00000044   0150A0E3           MOV      R5,#+1
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500001A           BNE      ??CopyCargoSetting_1
    450                      SendData();
   \   00000050   A42094E5           LDR      R2,[R4, #+164]
   \   00000054   6610A0E3           MOV      R1,#+102
   \   00000058   402092E5           LDR      R2,[R2, #+64]
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   12FF2FE1           BX       R2
    451                  }
    452              }
    453              return (Status);
   \                     ??CopyCargoSetting_1:
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   41DF8DE2           ADD      SP,SP,#+260
   \   00000070   ........           B        ??Subroutine30_0
    454          }
    455          

   \                                 In segment CODE, align 4, keep-with-next
    456          int CTOUser::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   44D04DE2           SUB      SP,SP,#+68
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    457              int ErrorStatus = E_OK;
    458              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    459              switch ( pCH->CommandNo ) {
   \   00000010   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000014   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000018   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000001C   660050E3           CMP      R0,#+102
   \   00000020   A900001A           BNE      ??ReceiveData_1
    460              case  CMD_GENERIC_STATIC_DATA:
    461                  {
    462                      ANPRO10_COMMAND_2810 *pData = (ANPRO10_COMMAND_2810 *)data;
    463                      bool dataChanged      =  isDifferentData(pData);
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??isDifferentData
    464                      IsDefined     = pData->IsDefined;
   \   00000030   0800D5E5           LDRB     R0,[R5, #+8]
   \   00000034   A900C4E5           STRB     R0,[R4, #+169]
    465                      CargoTypeKey  = pData->CargoTypeKey;
   \   00000038   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000003C   0B10D5E5           LDRB     R1,[R5, #+11]
   \   00000040   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000044   0A10D5E5           LDRB     R1,[R5, #+10]
   \   00000048   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000004C   0910D5E5           LDRB     R1,[R5, #+9]
   \   00000050   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000054   EC0084E5           STR      R0,[R4, #+236]
    466                      BaseCargoType = pData->BaseCargoType;
   \   00000058   1000D5E5           LDRB     R0,[R5, #+16]
   \   0000005C   0F10D5E5           LDRB     R1,[R5, #+15]
   \   00000060   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000064   0E10D5E5           LDRB     R1,[R5, #+14]
   \   00000068   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000006C   0D10D5E5           LDRB     R1,[R5, #+13]
   \   00000070   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000074   F00084E5           STR      R0,[R4, #+240]
    467                      Colour        = (TColor)pData->Colour;
   \   00000078   1400D5E5           LDRB     R0,[R5, #+20]
   \   0000007C   1310D5E5           LDRB     R1,[R5, #+19]
   \   00000080   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000084   1210D5E5           LDRB     R1,[R5, #+18]
   \   00000088   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000008C   1110D5E5           LDRB     R1,[R5, #+17]
   \   00000090   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000094   F40084E5           STR      R0,[R4, #+244]
    468                      OD1           = pData->OD1;
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   0D10A0E1           MOV      R1,SP
   \                     ??ReceiveData_2:
   \   000000A0   152085E2           ADD      R2,R5,#+21
   \   000000A4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000A8   0120C0E7           STRB     R2,[R0, +R1]
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   F9FFFFBA           BLT      ??ReceiveData_2
   \   000000B8   00009DE5           LDR      R0,[SP, #+0]
   \   000000BC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000C0   B40084E5           STR      R0,[R4, #+180]
   \   000000C4   B81084E5           STR      R1,[R4, #+184]
    469                      OD2           = pData->OD2;
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   04108DE2           ADD      R1,SP,#+4
   \                     ??ReceiveData_3:
   \   000000D0   192085E2           ADD      R2,R5,#+25
   \   000000D4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000D8   0120C0E7           STRB     R2,[R0, +R1]
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   040050E3           CMP      R0,#+4
   \   000000E4   F9FFFFBA           BLT      ??ReceiveData_3
   \   000000E8   04009DE5           LDR      R0,[SP, #+4]
   \   000000EC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000F0   BC0084E5           STR      R0,[R4, #+188]
   \   000000F4   C01084E5           STR      R1,[R4, #+192]
    470                      RefTmp1       = pData->RefTmp1;
   \   000000F8   0000A0E3           MOV      R0,#+0
   \   000000FC   08108DE2           ADD      R1,SP,#+8
   \                     ??ReceiveData_4:
   \   00000100   1D2085E2           ADD      R2,R5,#+29
   \   00000104   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000108   0120C0E7           STRB     R2,[R0, +R1]
   \   0000010C   010080E2           ADD      R0,R0,#+1
   \   00000110   040050E3           CMP      R0,#+4
   \   00000114   F9FFFFBA           BLT      ??ReceiveData_4
   \   00000118   08009DE5           LDR      R0,[SP, #+8]
   \   0000011C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000120   C40084E5           STR      R0,[R4, #+196]
   \   00000124   C81084E5           STR      R1,[R4, #+200]
    471                      RefTmp2       = pData->RefTmp2;
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   0C108DE2           ADD      R1,SP,#+12
   \                     ??ReceiveData_5:
   \   00000130   212085E2           ADD      R2,R5,#+33
   \   00000134   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000138   0120C0E7           STRB     R2,[R0, +R1]
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   040050E3           CMP      R0,#+4
   \   00000144   F9FFFFBA           BLT      ??ReceiveData_5
   \   00000148   0C009DE5           LDR      R0,[SP, #+12]
   \   0000014C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000150   CC0084E5           STR      R0,[R4, #+204]
   \   00000154   D01084E5           STR      R1,[R4, #+208]
    472                      Coeff         = pData->Coeff;
   \   00000158   0000A0E3           MOV      R0,#+0
   \   0000015C   10108DE2           ADD      R1,SP,#+16
   \                     ??ReceiveData_6:
   \   00000160   252085E2           ADD      R2,R5,#+37
   \   00000164   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000168   0120C0E7           STRB     R2,[R0, +R1]
   \   0000016C   010080E2           ADD      R0,R0,#+1
   \   00000170   040050E3           CMP      R0,#+4
   \   00000174   F9FFFFBA           BLT      ??ReceiveData_6
   \   00000178   10009DE5           LDR      R0,[SP, #+16]
   \   0000017C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000180   D40084E5           STR      R0,[R4, #+212]
   \   00000184   D81084E5           STR      R1,[R4, #+216]
    473                      MolMass       = pData->MolMass;
   \   00000188   0000A0E3           MOV      R0,#+0
   \   0000018C   14108DE2           ADD      R1,SP,#+20
   \                     ??ReceiveData_7:
   \   00000190   5F2085E2           ADD      R2,R5,#+95
   \   00000194   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000198   0120C0E7           STRB     R2,[R0, +R1]
   \   0000019C   010080E2           ADD      R0,R0,#+1
   \   000001A0   040050E3           CMP      R0,#+4
   \   000001A4   F9FFFFBA           BLT      ??ReceiveData_7
   \   000001A8   14009DE5           LDR      R0,[SP, #+20]
   \   000001AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001B0   DC0084E5           STR      R0,[R4, #+220]
   \   000001B4   E01084E5           STR      R1,[R4, #+224]
    474                      Viscosity     = pData->Viscosity;
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   18108DE2           ADD      R1,SP,#+24
   \                     ??ReceiveData_8:
   \   000001C0   632085E2           ADD      R2,R5,#+99
   \   000001C4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001C8   0120C0E7           STRB     R2,[R0, +R1]
   \   000001CC   010080E2           ADD      R0,R0,#+1
   \   000001D0   040050E3           CMP      R0,#+4
   \   000001D4   F9FFFFBA           BLT      ??ReceiveData_8
   \   000001D8   18009DE5           LDR      R0,[SP, #+24]
   \   000001DC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001E0   E40084E5           STR      R0,[R4, #+228]
   \   000001E4   E81084E5           STR      R1,[R4, #+232]
    475                      ActualTemp    = pData->ActualTemp;
   \   000001E8   0000A0E3           MOV      R0,#+0
   \   000001EC   1C108DE2           ADD      R1,SP,#+28
   \                     ??ReceiveData_9:
   \   000001F0   5B2085E2           ADD      R2,R5,#+91
   \   000001F4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001F8   0120C0E7           STRB     R2,[R0, +R1]
   \   000001FC   010080E2           ADD      R0,R0,#+1
   \   00000200   040050E3           CMP      R0,#+4
   \   00000204   F9FFFFBA           BLT      ??ReceiveData_9
   \   00000208   1C009DE5           LDR      R0,[SP, #+28]
    476                      Name          = pData->Name;
   \   0000020C   291085E2           ADD      R1,R5,#+41
   \   00000210   AC0084E5           STR      R0,[R4, #+172]
   \   00000214   28008DE2           ADD      R0,SP,#+40
   \   00000218   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000021C   ........           LDR      R1,??DataTable11  ;; ??npos
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   003091E5           LDR      R3,[R1, #+0]
   \   00000228   0010A0E1           MOV      R1,R0
   \   0000022C   440084E2           ADD      R0,R4,#+68
   \   00000230   ........           _BLF     ??assign,??assign??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   28008DE2           ADD      R0,SP,#+40
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
    477                      HighTempLimit = pData->HighTempLimit;
   \   00000244   0000A0E3           MOV      R0,#+0
   \   00000248   20108DE2           ADD      R1,SP,#+32
   \                     ??ReceiveData_10:
   \   0000024C   512085E2           ADD      R2,R5,#+81
   \   00000250   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000254   0120C0E7           STRB     R2,[R0, +R1]
   \   00000258   010080E2           ADD      R0,R0,#+1
   \   0000025C   040050E3           CMP      R0,#+4
   \   00000260   F9FFFFBA           BLT      ??ReceiveData_10
   \   00000264   20009DE5           LDR      R0,[SP, #+32]
    478                      LowTempLimit  = pData->LowTempLimit;
   \   00000268   24108DE2           ADD      R1,SP,#+36
   \   0000026C   F80084E5           STR      R0,[R4, #+248]
   \   00000270   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_11:
   \   00000274   552085E2           ADD      R2,R5,#+85
   \   00000278   0220D0E7           LDRB     R2,[R0, +R2]
   \   0000027C   0120C0E7           STRB     R2,[R0, +R1]
   \   00000280   010080E2           ADD      R0,R0,#+1
   \   00000284   040050E3           CMP      R0,#+4
   \   00000288   F9FFFFBA           BLT      ??ReceiveData_11
   \   0000028C   24009DE5           LDR      R0,[SP, #+36]
   \   00000290   FC0084E5           STR      R0,[R4, #+252]
    479                      HighTempEnable= pData->HighTempEnable;
   \   00000294   5900D5E5           LDRB     R0,[R5, #+89]
   \   00000298   0001C4E5           STRB     R0,[R4, #+256]
    480                      LowTempEnable = pData->LowTempEnable;
   \   0000029C   5A00D5E5           LDRB     R0,[R5, #+90]
   \   000002A0   0101C4E5           STRB     R0,[R4, #+257]
    481                      DB_IdNumber           = pData->DB_IdNumber;
   \   000002A4   6A00D5E5           LDRB     R0,[R5, #+106]
   \   000002A8   6910D5E5           LDRB     R1,[R5, #+105]
   \   000002AC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002B0   6810D5E5           LDRB     R1,[R5, #+104]
   \   000002B4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002B8   6710D5E5           LDRB     R1,[R5, #+103]
   \   000002BC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002C0   B00084E5           STR      R0,[R4, #+176]
    482                      ErrorStatus           =  E_OK;
   \   000002C4   0000A0E3           MOV      R0,#+0
   \   000002C8   000000EA           B        ??ReceiveData_12
    483                  }
    484                  break;
    485              default:
    486                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_1:
   \   000002CC   0100A0E3           MOV      R0,#+1
    487                  break;
    488              }
    489              return (ErrorStatus);
   \                     ??ReceiveData_12:
   \   000002D0   44D08DE2           ADD      SP,SP,#+68
   \   000002D4   ........           B        ??Subroutine30_0
    490          }
    491          

   \                                 In segment CODE, align 4, keep-with-next
    492          int CTOUser::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   78D04DE2           SUB      SP,SP,#+120
   \   00000008   0040A0E1           MOV      R4,R0
    493              int ErrorStatus = E_OK;
    494              switch ( cmd ) {
   \   0000000C   660051E3           CMP      R1,#+102
   \   00000010   B500001A           BNE      ??SendData_1
    495              case CMD_GENERIC_STATIC_DATA:
    496                  {
    497                      QueueANPRO10_COMMAND_2810 Cmd;
    498                      Cmd.TxInfo.Port        = NULL;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   04108DE5           STR      R1,[SP, #+4]
    499                      Cmd.TxInfo.rxAddr      = DEVICE_BROADCAST_ADDR;
   \   0000001C   FF10A0E3           MOV      R1,#+255
   \   00000020   0810CDE5           STRB     R1,[SP, #+8]
    500                      Cmd.TxInfo.rxId        = DEVICE_BROADCAST_TXU;
   \   00000024   0E10A0E3           MOV      R1,#+14
   \   00000028   0910CDE5           STRB     R1,[SP, #+9]
    501                      Cmd.Data.ObjectId      = IDNumber;
   \   0000002C   9C0094E5           LDR      R0,[R4, #+156]
    502                      Cmd.Data.ndb           = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000030   6710A0E3           MOV      R1,#+103
   \   00000034   0E00CDE5           STRB     R0,[SP, #+14]
   \   00000038   2004A0E1           LSR      R0,R0,#+8
   \   0000003C   0F00CDE5           STRB     R0,[SP, #+15]
   \   00000040   2004A0E1           LSR      R0,R0,#+8
   \   00000044   1000CDE5           STRB     R0,[SP, #+16]
   \   00000048   2004A0E1           LSR      R0,R0,#+8
   \   0000004C   1100CDE5           STRB     R0,[SP, #+17]
   \   00000050   BC10CDE1           STRH     R1,[SP, #+12]
    503                      Cmd.Data.CommandNo     = CMD_GENERIC_STATIC_DATA;
   \   00000054   6610A0E3           MOV      R1,#+102
   \   00000058   BA10CDE1           STRH     R1,[SP, #+10]
    504                      Cmd.Data.IsDefined     = IsDefined;
   \   0000005C   A910D4E5           LDRB     R1,[R4, #+169]
   \   00000060   1210CDE5           STRB     R1,[SP, #+18]
    505                      Cmd.Data.CargoTypeKey  = CargoTypeKey;
   \   00000064   EC0094E5           LDR      R0,[R4, #+236]
   \   00000068   1300CDE5           STRB     R0,[SP, #+19]
   \   0000006C   2004A0E1           LSR      R0,R0,#+8
   \   00000070   1400CDE5           STRB     R0,[SP, #+20]
   \   00000074   2004A0E1           LSR      R0,R0,#+8
   \   00000078   1500CDE5           STRB     R0,[SP, #+21]
   \   0000007C   2004A0E1           LSR      R0,R0,#+8
   \   00000080   1600CDE5           STRB     R0,[SP, #+22]
    506                      Cmd.Data.BaseCargoType = BaseCargoType;
   \   00000084   F00094E5           LDR      R0,[R4, #+240]
   \   00000088   1700CDE5           STRB     R0,[SP, #+23]
   \   0000008C   2004A0E1           LSR      R0,R0,#+8
   \   00000090   1800CDE5           STRB     R0,[SP, #+24]
   \   00000094   2004A0E1           LSR      R0,R0,#+8
   \   00000098   1900CDE5           STRB     R0,[SP, #+25]
   \   0000009C   2004A0E1           LSR      R0,R0,#+8
   \   000000A0   1A00CDE5           STRB     R0,[SP, #+26]
    507                      Cmd.Data.Colour        = Colour;
   \   000000A4   F40094E5           LDR      R0,[R4, #+244]
   \   000000A8   1B00CDE5           STRB     R0,[SP, #+27]
   \   000000AC   2004A0E1           LSR      R0,R0,#+8
   \   000000B0   1C00CDE5           STRB     R0,[SP, #+28]
   \   000000B4   2004A0E1           LSR      R0,R0,#+8
   \   000000B8   1D00CDE5           STRB     R0,[SP, #+29]
   \   000000BC   2004A0E1           LSR      R0,R0,#+8
   \   000000C0   1E00CDE5           STRB     R0,[SP, #+30]
    508                      Cmd.Data.OD1           = OD1;
   \   000000C4   B40094E5           LDR      R0,[R4, #+180]
   \   000000C8   B81094E5           LDR      R1,[R4, #+184]
   \   000000CC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000D0   00008DE5           STR      R0,[SP, #+0]
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   1F108DE2           ADD      R1,SP,#+31
   \                     ??SendData_2:
   \   000000DC   0D20A0E1           MOV      R2,SP
   \   000000E0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000E4   0120C0E7           STRB     R2,[R0, +R1]
   \   000000E8   010080E2           ADD      R0,R0,#+1
   \   000000EC   040050E3           CMP      R0,#+4
   \   000000F0   F9FFFFBA           BLT      ??SendData_2
    509                      Cmd.Data.OD2           = OD2;
   \   000000F4   BC0094E5           LDR      R0,[R4, #+188]
   \   000000F8   C01094E5           LDR      R1,[R4, #+192]
   \   000000FC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000100   00008DE5           STR      R0,[SP, #+0]
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   23108DE2           ADD      R1,SP,#+35
   \                     ??SendData_3:
   \   0000010C   0D20A0E1           MOV      R2,SP
   \   00000110   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000114   0120C0E7           STRB     R2,[R0, +R1]
   \   00000118   010080E2           ADD      R0,R0,#+1
   \   0000011C   040050E3           CMP      R0,#+4
   \   00000120   F9FFFFBA           BLT      ??SendData_3
    510                      Cmd.Data.RefTmp1       = RefTmp1;
   \   00000124   C40094E5           LDR      R0,[R4, #+196]
   \   00000128   C81094E5           LDR      R1,[R4, #+200]
   \   0000012C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000130   00008DE5           STR      R0,[SP, #+0]
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   27108DE2           ADD      R1,SP,#+39
   \                     ??SendData_4:
   \   0000013C   0D20A0E1           MOV      R2,SP
   \   00000140   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000144   0120C0E7           STRB     R2,[R0, +R1]
   \   00000148   010080E2           ADD      R0,R0,#+1
   \   0000014C   040050E3           CMP      R0,#+4
   \   00000150   F9FFFFBA           BLT      ??SendData_4
    511                      Cmd.Data.RefTmp2       = RefTmp2;
   \   00000154   CC0094E5           LDR      R0,[R4, #+204]
   \   00000158   D01094E5           LDR      R1,[R4, #+208]
   \   0000015C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000160   00008DE5           STR      R0,[SP, #+0]
   \   00000164   0000A0E3           MOV      R0,#+0
   \   00000168   2B108DE2           ADD      R1,SP,#+43
   \                     ??SendData_5:
   \   0000016C   0D20A0E1           MOV      R2,SP
   \   00000170   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000174   0120C0E7           STRB     R2,[R0, +R1]
   \   00000178   010080E2           ADD      R0,R0,#+1
   \   0000017C   040050E3           CMP      R0,#+4
   \   00000180   F9FFFFBA           BLT      ??SendData_5
    512                      Cmd.Data.Coeff         = Coeff;
   \   00000184   D40094E5           LDR      R0,[R4, #+212]
   \   00000188   D81094E5           LDR      R1,[R4, #+216]
   \   0000018C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   0000A0E3           MOV      R0,#+0
   \   00000198   2F108DE2           ADD      R1,SP,#+47
   \                     ??SendData_6:
   \   0000019C   0D20A0E1           MOV      R2,SP
   \   000001A0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001A4   0120C0E7           STRB     R2,[R0, +R1]
   \   000001A8   010080E2           ADD      R0,R0,#+1
   \   000001AC   040050E3           CMP      R0,#+4
   \   000001B0   F9FFFFBA           BLT      ??SendData_6
    513                      Cmd.Data.MolMass       = MolMass;
   \   000001B4   DC0094E5           LDR      R0,[R4, #+220]
   \   000001B8   E01094E5           LDR      R1,[R4, #+224]
   \   000001BC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001C0   00008DE5           STR      R0,[SP, #+0]
   \   000001C4   0000A0E3           MOV      R0,#+0
   \   000001C8   69108DE2           ADD      R1,SP,#+105
   \                     ??SendData_7:
   \   000001CC   0D20A0E1           MOV      R2,SP
   \   000001D0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001D4   0120C0E7           STRB     R2,[R0, +R1]
   \   000001D8   010080E2           ADD      R0,R0,#+1
   \   000001DC   040050E3           CMP      R0,#+4
   \   000001E0   F9FFFFBA           BLT      ??SendData_7
    514                      Cmd.Data.Viscosity     = Viscosity;
   \   000001E4   E40094E5           LDR      R0,[R4, #+228]
   \   000001E8   E81094E5           LDR      R1,[R4, #+232]
   \   000001EC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001F0   00008DE5           STR      R0,[SP, #+0]
   \   000001F4   0000A0E3           MOV      R0,#+0
   \   000001F8   6D108DE2           ADD      R1,SP,#+109
   \                     ??SendData_8:
   \   000001FC   0D20A0E1           MOV      R2,SP
   \   00000200   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000204   0120C0E7           STRB     R2,[R0, +R1]
   \   00000208   010080E2           ADD      R0,R0,#+1
   \   0000020C   040050E3           CMP      R0,#+4
   \   00000210   F9FFFFBA           BLT      ??SendData_8
    515                      Cmd.Data.ActualTemp    = ActualTemp;
   \   00000214   0000A0E3           MOV      R0,#+0
   \   00000218   65108DE2           ADD      R1,SP,#+101
   \                     ??SendData_9:
   \   0000021C   AC2084E2           ADD      R2,R4,#+172
   \   00000220   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000224   0120C0E7           STRB     R2,[R0, +R1]
   \   00000228   010080E2           ADD      R0,R0,#+1
   \   0000022C   040050E3           CMP      R0,#+4
   \   00000230   F9FFFFBA           BLT      ??SendData_9
    516                      Cmd.Data.HighTempLimit = HighTempLimit;
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   5B108DE2           ADD      R1,SP,#+91
   \                     ??SendData_10:
   \   0000023C   F82084E2           ADD      R2,R4,#+248
   \   00000240   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000244   0120C0E7           STRB     R2,[R0, +R1]
   \   00000248   010080E2           ADD      R0,R0,#+1
   \   0000024C   040050E3           CMP      R0,#+4
   \   00000250   F9FFFFBA           BLT      ??SendData_10
    517                      Cmd.Data.LowTempLimit  = LowTempLimit;
   \   00000254   0000A0E3           MOV      R0,#+0
   \   00000258   5F108DE2           ADD      R1,SP,#+95
   \                     ??SendData_11:
   \   0000025C   FC2084E2           ADD      R2,R4,#+252
   \   00000260   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000264   0120C0E7           STRB     R2,[R0, +R1]
   \   00000268   010080E2           ADD      R0,R0,#+1
   \   0000026C   040050E3           CMP      R0,#+4
   \   00000270   F9FFFFBA           BLT      ??SendData_11
    518                      Cmd.Data.HighTempEnable = HighTempEnable;
   \   00000274   0011D4E5           LDRB     R1,[R4, #+256]
    519                      Cmd.Data.LowTempEnable = LowTempEnable;
    520                      Cmd.Data.DB_IdNumber   = DB_IdNumber;
    521                      memset(Cmd.Data.Name, 0, CTY_MAX_NAME_LENGTH);
   \   00000278   2820A0E3           MOV      R2,#+40
   \   0000027C   6310CDE5           STRB     R1,[SP, #+99]
   \   00000280   0111D4E5           LDRB     R1,[R4, #+257]
   \   00000284   6410CDE5           STRB     R1,[SP, #+100]
   \   00000288   B00094E5           LDR      R0,[R4, #+176]
   \   0000028C   0010A0E3           MOV      R1,#+0
   \   00000290   7100CDE5           STRB     R0,[SP, #+113]
   \   00000294   2004A0E1           LSR      R0,R0,#+8
   \   00000298   7200CDE5           STRB     R0,[SP, #+114]
   \   0000029C   2004A0E1           LSR      R0,R0,#+8
   \   000002A0   7300CDE5           STRB     R0,[SP, #+115]
   \   000002A4   2004A0E1           LSR      R0,R0,#+8
   \   000002A8   7400CDE5           STRB     R0,[SP, #+116]
   \   000002AC   33008DE2           ADD      R0,SP,#+51
   \   000002B0   ........           _BLF     memset,??memset??rA
    522                      strncpy(Cmd.Data.Name, Name.c_str(), CTY_MAX_NAME_LENGTH);
   \   000002B4   440084E2           ADD      R0,R4,#+68
   \   000002B8   181090E5           LDR      R1,[R0, #+24]
   \   000002BC   2820A0E3           MOV      R2,#+40
   \   000002C0   100051E3           CMP      R1,#+16
   \   000002C4   04109025           LDRCS    R1,[R0, #+4]
   \   000002C8   04108032           ADDCC    R1,R0,#+4
   \   000002CC   33008DE2           ADD      R0,SP,#+51
   \   000002D0   ........           _BLF     strncpy,??strncpy??rA
    523                      bool sent = ANPRO10SendNormal(&Cmd);
    524                      if ( !sent ) ErrorStatus =  E_QUEUE_FULL;
   \   000002D4   04008DE2           ADD      R0,SP,#+4
   \   000002D8   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000002DC   000050E3           CMP      R0,#+0
   \   000002E0   0000A013           MOVNE    R0,#+0
   \   000002E4   0300A003           MOVEQ    R0,#+3
   \   000002E8   000000EA           B        ??SendData_12
    525                      else ErrorStatus =  E_OK;
    526                  }
    527                  break;
    528              default:
    529                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_1:
   \   000002EC   0100A0E3           MOV      R0,#+1
    530                  break;
    531              }
    532              return (ErrorStatus);
   \                     ??SendData_12:
   \   000002F0   78D08DE2           ADD      SP,SP,#+120
   \   000002F4   ........           B        ??Subroutine30_0
    533          }
    534          
    535          

   \                                 In segment CODE, align 4, keep-with-next
    536          CTOUser* CTOUser::FindFirstFree(void) {
    537          
    538              CTOUser *tmpPtr = NULL;
    539              // Don't include the Input cargo type record
    540              for ( unsigned i = 0; !tmpPtr && i < MAX_CARGOTYPES; i++ ) {
   \                     ??FindFirstFree:
   \   00000000   ........           LDR      R2,??DataTable15  ;; ??ObjectSet
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0010A0E3           MOV      R1,#+0
    541                  if ( !CargoTable[i]->IsDefined ) {
   \                     ??FindFirstFree_1:
   \   00000010   483092E5           LDR      R3,[R2, #+72]
   \   00000014   01C183E0           ADD      R12,R3,R1, LSL #+2
   \   00000018   00409CE5           LDR      R4,[R12, #+0]
    542                      tmpPtr = CargoTable[i];
    543                  }
    544              }
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   A940D4E5           LDRB     R4,[R4, #+169]
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   00009C05           LDREQ    R0,[R12, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0500001A           BNE      ??FindFirstFree_2
   \   00000034   C80051E3           CMP      R1,#+200
   \   00000038   F4FFFF3A           BCC      ??FindFirstFree_1
   \   0000003C   4C1092E5           LDR      R1,[R2, #+76]
   \   00000040   031041E0           SUB      R1,R1,R3
   \   00000044   2111B0E1           LSRS     R1,R1,#+2
    545              if ( !tmpPtr && !CargoTable.empty() ) {
    546                  tmpPtr = CargoTable[MAX_CARGOTYPES - 1];
   \   00000048   1C039315           LDRNE    R0,[R3, #+796]
    547              }
    548              return (tmpPtr);
   \                     ??FindFirstFree_2:
   \   0000004C   1000BDE8           POP      {R4}
   \   00000050   1EFF2FE1           BX       LR               ;; return
    549          }
    550          

   \                                 In segment CODE, align 4, keep-with-next
    551          void CTOUser::CreateUserCargoList(void) {
   \                     ??CreateUserCargoList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    552              for ( int i=0; i < MAX_CARGOTYPES; i++ ) {
   \   00000004   ........           LDR      R5,??DataTable15  ;; ??ObjectSet
   \   00000008   0040A0E3           MOV      R4,#+0
    553                  CargoTable.push_back(new CTOUser(true,true));
   \                     ??CreateUserCargoList_1:
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   ........           BL       `??new CTOUser`
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   480085E2           ADD      R0,R5,#+72
   \   00000020   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    554              }
   \   00000024   014084E2           ADD      R4,R4,#+1
   \   00000028   C80054E3           CMP      R4,#+200
   \   0000002C   F6FFFFBA           BLT      ??CreateUserCargoList_1
    555              CTOUser::InputBuffer = new CTOUser(true, true);
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   ........           BL       `??new CTOUser`
   \   0000003C   540085E5           STR      R0,[R5, #+84]
    556          }
   \   00000040   ........           B        ??Subroutine30_0
    557          
    558          

   \                                 In segment CODE, align 4, keep-with-next
    559          void CTOUser::DeleteUserCargoList(void) {
   \                     ??DeleteUserCargoList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    560              for ( unsigned i = 0; i < CargoTable.size(); i++ ) {
   \   00000004   ........           LDR      R5,??DataTable15  ;; ??ObjectSet
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   0F0000EA           B        ??DeleteUserCargoList_1
    561                  if ( CargoTable[i] ) {
   \                     ??DeleteUserCargoList_2:
   \   00000010   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   0A00000A           BEQ      ??DeleteUserCargoList_3
    562                      delete CargoTable[i];
   \   00000020   0120A0E1           MOV      R2,R1
   \   00000024   0500000A           BEQ      ??DeleteUserCargoList_4
   \   00000028   0200A0E1           MOV      R0,R2
   \   0000002C   A42092E5           LDR      R2,[R2, #+164]
   \   00000030   0310A0E3           MOV      R1,#+3
   \   00000034   002092E5           LDR      R2,[R2, #+0]
   \   00000038   0FE0A0E1           MOV      LR,PC
   \   0000003C   12FF2FE1           BX       R2
    563                      CargoTable[i] = NULL;
   \                     ??DeleteUserCargoList_4:
   \   00000040   480095E5           LDR      R0,[R5, #+72]
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   041180E7           STR      R1,[R0, +R4, LSL #+2]
    564                  }
    565              }
   \                     ??DeleteUserCargoList_3:
   \   0000004C   014084E2           ADD      R4,R4,#+1
   \                     ??DeleteUserCargoList_1:
   \   00000050   480095E5           LDR      R0,[R5, #+72]
   \   00000054   4C1095E5           LDR      R1,[R5, #+76]
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   210154E1           CMP      R4,R1, LSR #+2
   \   00000060   EAFFFF3A           BCC      ??DeleteUserCargoList_2
    566          }
   \   00000064   ........           B        ??Subroutine30_0
    567          
    568          

   \                                 In segment CODE, align 4, keep-with-next
    569          int CTOUser::FindCargoIndex(AnsiString Name) {
   \                     ??FindCargoIndex:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    570              for ( unsigned i = 0; i < CargoTable.size(); i++ ) {
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   000000EA           B        ??FindCargoIndex_1
   \                     ??FindCargoIndex_2:
   \   00000010   015085E2           ADD      R5,R5,#+1
   \                     ??FindCargoIndex_1:
   \   00000014   ........           LDR      R0,??DataTable15  ;; ??ObjectSet
   \   00000018   481090E5           LDR      R1,[R0, #+72]
   \   0000001C   4C0090E5           LDR      R0,[R0, #+76]
   \   00000020   010040E0           SUB      R0,R0,R1
   \   00000024   200155E1           CMP      R5,R0, LSR #+2
   \   00000028   0C00002A           BCS      ??FindCargoIndex_3
    571                  if ( CargoTable[i]->IsDefined && CargoTable[i]->Name == Name ) {
   \   0000002C   050181E0           ADD      R0,R1,R5, LSL #+2
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   A910D1E5           LDRB     R1,[R1, #+169]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   F3FFFF0A           BEQ      ??FindCargoIndex_2
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   440080E2           ADD      R0,R0,#+68
   \   0000004C   ........           _BLF     ??compare,??compare??rA_1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   EDFFFF1A           BNE      ??FindCargoIndex_2
    572                      return int(i);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   000000EA           B        ??FindCargoIndex_4
    573                  }
    574              }
    575              return -1;
   \                     ??FindCargoIndex_3:
   \   00000060   0000E0E3           MVN      R0,#+0
   \                     ??FindCargoIndex_4:
   \   00000064   ........           B        ??Subroutine30_0
    576          }
    577          

   \                                 In segment CODE, align 4, keep-with-next
    578          CTOUser* CTOUser::FindCargo(AnsiString Name) {
   \                     ??FindCargo_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    579              for ( unsigned i = 0; i < CargoTable.size(); i++ ) {
   \   00000004   ........           LDR      R6,??DataTable19  ;; ??ObjectSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   000000EA           B        ??FindCargo_2
   \                     ??FindCargo_3:
   \   00000014   015085E2           ADD      R5,R5,#+1
   \                     ??FindCargo_2:
   \   00000018   480096E5           LDR      R0,[R6, #+72]
   \   0000001C   4C1096E5           LDR      R1,[R6, #+76]
   \   00000020   001041E0           SUB      R1,R1,R0
   \   00000024   210155E1           CMP      R5,R1, LSR #+2
   \   00000028   0D00002A           BCS      ??FindCargo_4
    580                  if ( CargoTable[i]->IsDefined && CargoTable[i]->Name == Name ) {
   \   0000002C   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   A910D1E5           LDRB     R1,[R1, #+169]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   F4FFFF0A           BEQ      ??FindCargo_3
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   440080E2           ADD      R0,R0,#+68
   \   0000004C   ........           _BLF     ??compare,??compare??rA_1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   EEFFFF1A           BNE      ??FindCargo_3
    581                      return CargoTable[i];
   \   00000058   480096E5           LDR      R0,[R6, #+72]
   \   0000005C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000060   000000EA           B        ??FindCargo_5
    582                  }
    583              }
    584              return NULL;
   \                     ??FindCargo_4:
   \   00000064   0000A0E3           MOV      R0,#+0
   \                     ??FindCargo_5:
   \   00000068                      REQUIRE ?Subroutine33
   \   00000068                      ;; // Fall through to label ?Subroutine33
    585          }
    586          

   \                                 In segment CODE, align 4, keep-with-next
    587          bool CTOUser::IsUniqueCargoName(AnsiString Name, CTOUser *myPtr) {
   \                     ??IsUniqueCargoName:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    588              map<int, CTOUser *>::iterator it;
    589              for ( it =  CargoTypeKeyMap.begin(); it != CargoTypeKeyMap.end(); it++ ) {
   \   00000004   ........           LDR      R6,??DataTable19  ;; ??ObjectSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   307096E5           LDR      R7,[R6, #+48]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   020000EA           B        ??IsUniqueCargoName_1
   \                     ??IsUniqueCargoName_2:
   \   00000018   0700A0E1           MOV      R0,R7
   \   0000001C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000020   0070A0E1           MOV      R7,R0
   \                     ??IsUniqueCargoName_1:
   \   00000024   300086E2           ADD      R0,R6,#+48
   \   00000028   000057E1           CMP      R7,R0
    590                  CTOUser *tmpPtr = it->second;
    591                  if ( tmpPtr != myPtr &&  tmpPtr->Name == Name ) {
    592                      return false;
    593                  }
    594              }
    595              return true;
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   0700000A           BEQ      ??IsUniqueCargoName_3
   \   00000034   140097E5           LDR      R0,[R7, #+20]
   \   00000038   050050E1           CMP      R0,R5
   \   0000003C   F5FFFF0A           BEQ      ??IsUniqueCargoName_2
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   440080E2           ADD      R0,R0,#+68
   \   00000048   ........           _BLF     ??compare,??compare??rA_1
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F0FFFF1A           BNE      ??IsUniqueCargoName_2
   \                     ??IsUniqueCargoName_3:
   \   00000054   F040BDE8           POP      {R4-R7,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
    596          }
    597          
    598          

   \                                 In segment CODE, align 4, keep-with-next
    599          void CTOUser::Sort(vector<CTOUser *> &MyVect) {
    600              // EHSMark: Should not sort the first cargo types reserved for Binnenmat if Binnenmat system
    601              sort(MyVect.begin(), MyVect.end(), Compare);
   \                     ??Sort:
   \   00000000   18309FE5           LDR      R3,??Sort_1      ;; ??Compare
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   041090E5           LDR      R1,[R0, #+4]
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   2121A0E1           LSR      R2,R1,#+2
   \   00000014   202142E0           SUB      R2,R2,R0, LSR #+2
   \   00000018   ........           _BLF     ??_Sort,??_Sort??rA
    602          }
   \   0000001C   ........           B        ?Subroutine32
   \                     ??Sort_1:
   \   00000020   ........           DC32     ??Compare
    603          

   \                                 In segment CODE, align 4, keep-with-next
    604          bool CTOUser::Compare(CTOUser *CType1, CTOUser *CType2) {
   \                     ??Compare:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0100A0E1           MOV      R0,R1
    605              return (CType1->Name.UpperCase() < CType2->Name.UpperCase());
   \   00000010   1C108DE2           ADD      R1,SP,#+28
   \   00000014   440080E2           ADD      R0,R0,#+68
   \   00000018   ........           _BLF     ??UpperCase,??UpperCase??rA
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??UpperCase,??UpperCase??rA
   \   00000028   1C108DE2           ADD      R1,SP,#+28
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     ??compare,??compare??rA_1
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0140A043           MOVMI    R4,#+1
   \   0000003C   0040A053           MOVPL    R4,#+0
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   1C008DE2           ADD      R0,SP,#+28
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   38D08DE2           ADD      SP,SP,#+56
   \   00000068   ........           B        ?Subroutine34
    606          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine34:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    607          

   \                                 In segment CODE, align 4, keep-with-next
    608          CTOUser*  CTOUser::Find(int Key) {
   \                     ??Find:
   \   00000000   10402DE9           PUSH     {R4,LR}
    609          	CTOUser *tmpPtr;
    610          	map<int, CTOUser *>::iterator it = CargoTypeKeyMap.find(Key);
   \   00000004   ........           LDR      R4,??DataTable19  ;; ??ObjectSet
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300084E2           ADD      R0,R4,#+48
   \   00000010   ........           _BLF     ??find_1,??find??rA_1
    611          	if ( it == CargoTypeKeyMap.end() ) {
   \   00000014   301084E2           ADD      R1,R4,#+48
   \   00000018   010050E1           CMP      R0,R1
    612          		tmpPtr = NULL;
    613          	} else {
    614          		tmpPtr = it->second;
   \   0000001C   14009015           LDRNE    R0,[R0, #+20]
    615          	}
    616          	return tmpPtr;
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   0000A003           MOVEQ    R0,#+0
   \   00000028   1EFF2FE1           BX       LR               ;; return
    617          }
    618          

   \                                 In segment CODE, align 4, keep-with-next
    619          vector<CTOUser*> CTOUser::GetDefinedCargoes(void)
    620          {
   \                     ??GetDefinedCargoes:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    621              vector<CTOUser*>tmpCargoTypeVector;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   000084E5           STR      R0,[R4, #+0]
   \   00000010   040084E5           STR      R0,[R4, #+4]
   \   00000014   080084E5           STR      R0,[R4, #+8]
    622              for ( int index=0; index < MAX_CARGOTYPES; index++ ) {
   \   00000018   0050A0E3           MOV      R5,#+0
   \                     ??GetDefinedCargoes_1:
   \   0000001C   38009FE5           LDR      R0,??GetDefinedCargoes_2  ;; ??ObjectSet + 72
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   A910D1E5           LDRB     R1,[R1, #+169]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0200000A           BEQ      ??GetDefinedCargoes_3
    623                  if ( CTOUser::CargoTable[index]->IsDefined ) {
    624                      tmpCargoTypeVector.push_back(CTOUser::CargoTable[index]);
   \   00000038   001090E5           LDR      R1,[R0, #+0]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    625                  }
    626              }
   \                     ??GetDefinedCargoes_3:
   \   00000044   015085E2           ADD      R5,R5,#+1
   \   00000048   C80055E3           CMP      R5,#+200
   \   0000004C   F2FFFFBA           BLT      ??GetDefinedCargoes_1
    627              Sort(tmpCargoTypeVector);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       ??Sort
    628              return tmpCargoTypeVector;
   \   00000058   ........           B        ??Subroutine30_0
   \                     ??GetDefinedCargoes_2:
   \   0000005C   ........           DC32     ??ObjectSet + 72
    629          }
    630          

   \                                 In segment CODE, align 4, keep-with-next
    631          void CTOUser::DeleteCargo(void)
    632          {
   \                     ??DeleteCargo:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    633              CargoTypeObject::DeleteCargo();
   \   00000008   ........           _BLF     ??DeleteCargo_1,??DeleteCargo??rA
    634              UpdateTankCargoType();
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           BL       ??UpdateTankCargoType
    635          }
   \   00000014                      REQUIRE ?Subroutine34
   \   00000014                      ;; // Fall through to label ?Subroutine34
    636          

   \                                 In segment CODE, align 4, keep-with-next
    637          void CTOUser::EraseFromVector(CTOUser *MyPtr) {
   \                     ??EraseFromVector:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    638              vector<CTOUser *>::iterator it;
    639              it = find(CargoTable.begin(), CargoTable.end(), MyPtr);
   \   00000004   ........           LDR      R4,??DataTable19  ;; ??ObjectSet
   \   00000008   4C0094E5           LDR      R0,[R4, #+76]
   \   0000000C   485094E5           LDR      R5,[R4, #+72]
   \   00000010   000000EA           B        ??EraseFromVector_1
   \                     ??EraseFromVector_2:
   \   00000014   045085E2           ADD      R5,R5,#+4
   \                     ??EraseFromVector_1:
   \   00000018   000055E1           CMP      R5,R0
   \   0000001C   0C00000A           BEQ      ??EraseFromVector_3
   \   00000020   002095E5           LDR      R2,[R5, #+0]
   \   00000024   010052E1           CMP      R2,R1
   \   00000028   F9FFFF1A           BNE      ??EraseFromVector_2
    640              if ( it != CargoTable.end() ) {
    641                  CargoTypeKeyMap.erase(MyPtr->CargoTypeKey);
   \   0000002C   EC1091E5           LDR      R1,[R1, #+236]
   \   00000030   300084E2           ADD      R0,R4,#+48
   \   00000034   ........           _BLF     ??erase_3,??erase??rA_3
    642                  CargoTable.erase(it);
   \   00000038   4C1094E5           LDR      R1,[R4, #+76]
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   040085E2           ADD      R0,R5,#+4
   \   00000044   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000048   4C0094E5           LDR      R0,[R4, #+76]
   \   0000004C   040040E2           SUB      R0,R0,#+4
   \   00000050   4C0084E5           STR      R0,[R4, #+76]
    643              }
    644          }
   \                     ??EraseFromVector_3:
   \   00000054   ........           B        ??Subroutine30_0
    645          
    646          

   \                                 In segment CODE, align 4, keep-with-next
    647          CTOUser& CTOUser::operator = (CTOUser Src) {
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    648              IsDefined     = Src.IsDefined    ;
   \   0000000C   A900D5E5           LDRB     R0,[R5, #+169]
    649              BaseCargoType = Src.BaseCargoType;
    650              Name          = Src.Name         ;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   441085E2           ADD      R1,R5,#+68
   \   00000018   A900C4E5           STRB     R0,[R4, #+169]
   \   0000001C   F00095E5           LDR      R0,[R5, #+240]
   \   00000020   F00084E5           STR      R0,[R4, #+240]
   \   00000024   ........           LDR      R0,??DataTable20  ;; ??npos
   \   00000028   003090E5           LDR      R3,[R0, #+0]
   \   0000002C   440084E2           ADD      R0,R4,#+68
   \   00000030   ........           _BLF     ??assign,??assign??rA
    651              OD1           = Src.OD1          ;
   \   00000034   B40095E5           LDR      R0,[R5, #+180]
   \   00000038   B81095E5           LDR      R1,[R5, #+184]
   \   0000003C   B40084E5           STR      R0,[R4, #+180]
   \   00000040   B81084E5           STR      R1,[R4, #+184]
    652              OD2           = Src.OD2          ;
   \   00000044   BC0095E5           LDR      R0,[R5, #+188]
   \   00000048   C01095E5           LDR      R1,[R5, #+192]
   \   0000004C   BC0084E5           STR      R0,[R4, #+188]
   \   00000050   C01084E5           STR      R1,[R4, #+192]
    653              RefTmp1       = Src.RefTmp1      ;
   \   00000054   C40095E5           LDR      R0,[R5, #+196]
   \   00000058   C81095E5           LDR      R1,[R5, #+200]
   \   0000005C   C40084E5           STR      R0,[R4, #+196]
   \   00000060   C81084E5           STR      R1,[R4, #+200]
    654              RefTmp2       = Src.RefTmp2      ;
   \   00000064   CC0095E5           LDR      R0,[R5, #+204]
   \   00000068   D01095E5           LDR      R1,[R5, #+208]
   \   0000006C   CC0084E5           STR      R0,[R4, #+204]
   \   00000070   D01084E5           STR      R1,[R4, #+208]
    655              Coeff         = Src.Coeff        ;
   \   00000074   D40095E5           LDR      R0,[R5, #+212]
   \   00000078   D81095E5           LDR      R1,[R5, #+216]
   \   0000007C   D40084E5           STR      R0,[R4, #+212]
   \   00000080   D81084E5           STR      R1,[R4, #+216]
    656              MolMass       = Src.MolMass      ;
   \   00000084   DC0095E5           LDR      R0,[R5, #+220]
   \   00000088   E01095E5           LDR      R1,[R5, #+224]
   \   0000008C   DC0084E5           STR      R0,[R4, #+220]
   \   00000090   E01084E5           STR      R1,[R4, #+224]
    657              Viscosity     = Src.Viscosity    ;
   \   00000094   E40095E5           LDR      R0,[R5, #+228]
   \   00000098   E81095E5           LDR      R1,[R5, #+232]
   \   0000009C   E40084E5           STR      R0,[R4, #+228]
   \   000000A0   E81084E5           STR      R1,[R4, #+232]
    658              Colour        = Src.Colour       ;
   \   000000A4   F40095E5           LDR      R0,[R5, #+244]
   \   000000A8   F40084E5           STR      R0,[R4, #+244]
    659              HighTempLimit = Src.HighTempLimit;
   \   000000AC   F80095E5           LDR      R0,[R5, #+248]
   \   000000B0   F80084E5           STR      R0,[R4, #+248]
    660              HighTempEnable= Src.HighTempEnable;
   \   000000B4   0001D5E5           LDRB     R0,[R5, #+256]
   \   000000B8   0001C4E5           STRB     R0,[R4, #+256]
    661              LowTempLimit  = Src.LowTempLimit ;
   \   000000BC   FC0095E5           LDR      R0,[R5, #+252]
   \   000000C0   FC0084E5           STR      R0,[R4, #+252]
    662              LowTempEnable = Src.LowTempEnable;
   \   000000C4   0101D5E5           LDRB     R0,[R5, #+257]
   \   000000C8   0101C4E5           STRB     R0,[R4, #+257]
    663              if ( !IsFixed ) {
   \   000000CC   A800D4E5           LDRB     R0,[R4, #+168]
   \   000000D0   000050E3           CMP      R0,#+0
    664                  CargoTypeKey  = Src.CargoTypeKey ;
   \   000000D4   EC009505           LDREQ    R0,[R5, #+236]
   \   000000D8   EC008405           STREQ    R0,[R4, #+236]
    665              }
    666              DB_IdNumber     = Src.DB_IdNumber;
   \   000000DC   B00095E5           LDR      R0,[R5, #+176]
   \   000000E0   B00084E5           STR      R0,[R4, #+176]
    667              return *this;
   \   000000E4                      REQUIRE ?Subroutine30
   \   000000E4                      ;; // Fall through to label ?Subroutine30
    668          }
    669          
    670          //--------------------------------------------------------------------------------------------------------------------
    671          #ifdef ANWIN
    672          void CTOUser::AddToDatabase(void) {
    673              if ( MainForm->DataLogEnable ) {
    674          
    675                  //PROCargoTank::LogSema.Acquire();
    676                  time_t rawtime          = GetGMT();
    677                  //TDateTime CurrentTime	= rawtime;
    678          
    679                  LiteQuery->SQL->Clear();
    680                  LiteQuery->SQL->Add("SELECT * FROM CargoTypes");
    681                  LiteQuery->Open();
    682                  try {
    683                      // append record
    684                      LiteQuery->Append();
    685          
    686                      LiteQuery->FieldByName("UpdatedTimeGMT")->AsInteger = rawtime;
    687          
    688                      LiteQuery->FieldByName("Name")->AsString            = Name;
    689                      LiteQuery->FieldByName("BaseCargoType")->AsInteger  = BaseCargoType;
    690                      LiteQuery->FieldByName("OpDns1")->AsFloat           = OD1;
    691                      LiteQuery->FieldByName("OpDns2")->AsFloat           = OD2;
    692                      LiteQuery->FieldByName("RefTemp1")->AsFloat         = RefTmp1;
    693                      LiteQuery->FieldByName("RefTemp2")->AsFloat         = RefTmp2;
    694                      LiteQuery->FieldByName("Coeff")->AsFloat            = Coeff;
    695                      LiteQuery->FieldByName("MolMass")->AsFloat          = MolMass;
    696                      LiteQuery->FieldByName("Viscosity")->AsFloat        = Viscosity;
    697                      LiteQuery->FieldByName("Color")->AsInteger          = Colour;
    698                      LiteQuery->FieldByName("HighTempLimit")->AsFloat    = HighTempLimit;
    699                      LiteQuery->FieldByName("LowTempLimit")->AsFloat     = LowTempLimit;
    700                      LiteQuery->FieldByName("HighTempEnable")->AsInteger = HighTempEnable;
    701                      LiteQuery->FieldByName("LowTempEnable")->AsInteger  = LowTempEnable;
    702                      LiteQuery->Post();
    703                      DB_IdNumber =  LiteQuery->FieldByName("Id")->AsInteger;
    704                  }
    705                  __finally{
    706                      //        LiteQuery->Free();
    707                  }
    708                  //PROCargoTank::LogSema.Release();
    709              }
    710          }
    711          void CTOUser::UpdateDatabase(void) {
    712              if ( MainForm->DataLogEnable ) {
    713                  //PROCargoTank::LogSema.Acquire();
    714                  time_t rawtime          = GetGMT();
    715          
    716                  // retrieve data
    717                  LiteQuery->SQL->Clear();
    718                  LiteQuery->SQL->Add("SELECT * FROM CargoTypes");
    719                  LiteQuery->Open();
    720                  LiteQuery->FindKey(ARRAYOFCONST((DB_IdNumber)));
    721          
    722          
    723          
    724                  // retrieve data
    725                  //	ShowMessage("Records of this alarm= "+IntToStr(LiteQuery->FetchRows));
    726          
    727                  try {
    728                      // retrieve data
    729          
    730                      // update record
    731                      LiteQuery->Edit();
    732                      LiteQuery->FieldByName("UpdatedTimeGMT")->AsInteger = rawtime;
    733                      LiteQuery->FieldByName("Name")->AsString            = Name;
    734                      LiteQuery->FieldByName("BaseCargoType")->AsInteger  = BaseCargoType;
    735                      LiteQuery->FieldByName("OpDns1")->AsFloat           = OD1;
    736                      LiteQuery->FieldByName("OpDns2")->AsFloat           = OD2;
    737                      LiteQuery->FieldByName("RefTemp1")->AsFloat         = RefTmp1;
    738                      LiteQuery->FieldByName("RefTemp2")->AsFloat         = RefTmp2;
    739                      LiteQuery->FieldByName("Coeff")->AsFloat            = Coeff;
    740                      LiteQuery->FieldByName("MolMass")->AsFloat          = MolMass;
    741                      LiteQuery->FieldByName("Viscosity")->AsFloat        = Viscosity;
    742                      LiteQuery->FieldByName("Color")->AsInteger          = Colour;
    743                      LiteQuery->FieldByName("HighTempLimit")->AsFloat    = HighTempLimit;
    744                      LiteQuery->FieldByName("LowTempLimit")->AsFloat     = LowTempLimit;
    745                      LiteQuery->FieldByName("HighTempEnable")->AsInteger = HighTempEnable;
    746                      LiteQuery->FieldByName("LowTempEnable")->AsInteger  = LowTempEnable;
    747                      LiteQuery->Post();
    748                  }
    749                  __finally{
    750                      //        LiteQuery->Free();
    751                  }
    752          
    753                  //PROCargoTank::LogSema.Release();
    754              }
    755          }
    756          #endif
    757          

   \                                 In segment CODE, align 4, keep-with-next
    758          bool CTOUser::isDifferentData(ANPRO10_COMMAND_2810 *pData) {
   \                     ??isDifferentData:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0060A0E1           MOV      R6,R0
    759              bool isNoDiff =  (
    760                                IsDefined      == pData->IsDefined
    761                                && CargoTypeKey   == pData->CargoTypeKey
    762                                && BaseCargoType  == pData->BaseCargoType
    763                                && Colour         == (TColor)pData->Colour
    764                                && OD1            == pData->OD1
    765                                && OD2            == pData->OD2
    766                                && RefTmp1        == pData->RefTmp1
    767                                && RefTmp2        == pData->RefTmp2
    768                                && Coeff          == pData->Coeff
    769                                && MolMass        == pData->MolMass
    770                                && Viscosity      == pData->Viscosity
    771                                && ActualTemp     == pData->ActualTemp
    772                                && Name           == pData->Name
    773                                && HighTempLimit  == pData->HighTempLimit
    774                                && LowTempLimit   == pData->LowTempLimit
    775                                && HighTempEnable == pData->HighTempEnable
    776                                && LowTempEnable  == pData->LowTempEnable
    777                                && DB_IdNumber    == pData->DB_IdNumber);
   \   0000000C   A900D6E5           LDRB     R0,[R6, #+169]
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   0810D7E5           LDRB     R1,[R7, #+8]
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   DA00001A           BNE      ??isDifferentData_1
   \   00000020   0C10D7E5           LDRB     R1,[R7, #+12]
   \   00000024   0B20D7E5           LDRB     R2,[R7, #+11]
   \   00000028   EC0096E5           LDR      R0,[R6, #+236]
   \   0000002C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000030   0A20D7E5           LDRB     R2,[R7, #+10]
   \   00000034   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000038   0920D7E5           LDRB     R2,[R7, #+9]
   \   0000003C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   D000001A           BNE      ??isDifferentData_1
   \   00000048   1010D7E5           LDRB     R1,[R7, #+16]
   \   0000004C   0F20D7E5           LDRB     R2,[R7, #+15]
   \   00000050   F00096E5           LDR      R0,[R6, #+240]
   \   00000054   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000058   0E20D7E5           LDRB     R2,[R7, #+14]
   \   0000005C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000060   0D20D7E5           LDRB     R2,[R7, #+13]
   \   00000064   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   C600001A           BNE      ??isDifferentData_1
   \   00000070   1410D7E5           LDRB     R1,[R7, #+20]
   \   00000074   1320D7E5           LDRB     R2,[R7, #+19]
   \   00000078   F40096E5           LDR      R0,[R6, #+244]
   \   0000007C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000080   1220D7E5           LDRB     R2,[R7, #+18]
   \   00000084   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000088   1120D7E5           LDRB     R2,[R7, #+17]
   \   0000008C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   BC00001A           BNE      ??isDifferentData_1
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   0D10A0E1           MOV      R1,SP
   \                     ??isDifferentData_2:
   \   000000A0   152087E2           ADD      R2,R7,#+21
   \   000000A4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000A8   0120C0E7           STRB     R2,[R0, +R1]
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   F9FFFFBA           BLT      ??isDifferentData_2
   \   000000B8   B44096E5           LDR      R4,[R6, #+180]
   \   000000BC   B85096E5           LDR      R5,[R6, #+184]
   \   000000C0   00009DE5           LDR      R0,[SP, #+0]
   \   000000C4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000C8   0420A0E1           MOV      R2,R4
   \   000000CC   0530A0E1           MOV      R3,R5
   \   000000D0   ........           _BLF     __dEqual,??__dEqual??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   AC00000A           BEQ      ??isDifferentData_3
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   04108DE2           ADD      R1,SP,#+4
   \                     ??isDifferentData_4:
   \   000000E4   192087E2           ADD      R2,R7,#+25
   \   000000E8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000EC   0120C0E7           STRB     R2,[R0, +R1]
   \   000000F0   010080E2           ADD      R0,R0,#+1
   \   000000F4   040050E3           CMP      R0,#+4
   \   000000F8   F9FFFFBA           BLT      ??isDifferentData_4
   \   000000FC   BC4096E5           LDR      R4,[R6, #+188]
   \   00000100   C05096E5           LDR      R5,[R6, #+192]
   \   00000104   04009DE5           LDR      R0,[SP, #+4]
   \   00000108   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000010C   0420A0E1           MOV      R2,R4
   \   00000110   0530A0E1           MOV      R3,R5
   \   00000114   ........           _BLF     __dEqual,??__dEqual??rA
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   9B00000A           BEQ      ??isDifferentData_3
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   08108DE2           ADD      R1,SP,#+8
   \                     ??isDifferentData_5:
   \   00000128   1D2087E2           ADD      R2,R7,#+29
   \   0000012C   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000130   0120C0E7           STRB     R2,[R0, +R1]
   \   00000134   010080E2           ADD      R0,R0,#+1
   \   00000138   040050E3           CMP      R0,#+4
   \   0000013C   F9FFFFBA           BLT      ??isDifferentData_5
   \   00000140   C44096E5           LDR      R4,[R6, #+196]
   \   00000144   C85096E5           LDR      R5,[R6, #+200]
   \   00000148   08009DE5           LDR      R0,[SP, #+8]
   \   0000014C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000150   0420A0E1           MOV      R2,R4
   \   00000154   0530A0E1           MOV      R3,R5
   \   00000158   ........           _BLF     __dEqual,??__dEqual??rA
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   8A00000A           BEQ      ??isDifferentData_3
   \   00000164   0000A0E3           MOV      R0,#+0
   \   00000168   0C108DE2           ADD      R1,SP,#+12
   \                     ??isDifferentData_6:
   \   0000016C   212087E2           ADD      R2,R7,#+33
   \   00000170   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000174   0120C0E7           STRB     R2,[R0, +R1]
   \   00000178   010080E2           ADD      R0,R0,#+1
   \   0000017C   040050E3           CMP      R0,#+4
   \   00000180   F9FFFFBA           BLT      ??isDifferentData_6
   \   00000184   CC4096E5           LDR      R4,[R6, #+204]
   \   00000188   D05096E5           LDR      R5,[R6, #+208]
   \   0000018C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000190   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000194   0420A0E1           MOV      R2,R4
   \   00000198   0530A0E1           MOV      R3,R5
   \   0000019C   ........           _BLF     __dEqual,??__dEqual??rA
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   7900000A           BEQ      ??isDifferentData_3
   \   000001A8   0000A0E3           MOV      R0,#+0
   \   000001AC   10108DE2           ADD      R1,SP,#+16
   \                     ??isDifferentData_7:
   \   000001B0   252087E2           ADD      R2,R7,#+37
   \   000001B4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001B8   0120C0E7           STRB     R2,[R0, +R1]
   \   000001BC   010080E2           ADD      R0,R0,#+1
   \   000001C0   040050E3           CMP      R0,#+4
   \   000001C4   F9FFFFBA           BLT      ??isDifferentData_7
   \   000001C8   D44096E5           LDR      R4,[R6, #+212]
   \   000001CC   D85096E5           LDR      R5,[R6, #+216]
   \   000001D0   10009DE5           LDR      R0,[SP, #+16]
   \   000001D4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001D8   0420A0E1           MOV      R2,R4
   \   000001DC   0530A0E1           MOV      R3,R5
   \   000001E0   ........           _BLF     __dEqual,??__dEqual??rA
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   6800000A           BEQ      ??isDifferentData_3
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   14108DE2           ADD      R1,SP,#+20
   \                     ??isDifferentData_8:
   \   000001F4   5F2087E2           ADD      R2,R7,#+95
   \   000001F8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001FC   0120C0E7           STRB     R2,[R0, +R1]
   \   00000200   010080E2           ADD      R0,R0,#+1
   \   00000204   040050E3           CMP      R0,#+4
   \   00000208   F9FFFFBA           BLT      ??isDifferentData_8
   \   0000020C   DC4096E5           LDR      R4,[R6, #+220]
   \   00000210   E05096E5           LDR      R5,[R6, #+224]
   \   00000214   14009DE5           LDR      R0,[SP, #+20]
   \   00000218   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000021C   0420A0E1           MOV      R2,R4
   \   00000220   0530A0E1           MOV      R3,R5
   \   00000224   ........           _BLF     __dEqual,??__dEqual??rA
   \   00000228   000050E3           CMP      R0,#+0
   \   0000022C   5700000A           BEQ      ??isDifferentData_3
   \   00000230   0000A0E3           MOV      R0,#+0
   \   00000234   18108DE2           ADD      R1,SP,#+24
   \                     ??isDifferentData_9:
   \   00000238   632087E2           ADD      R2,R7,#+99
   \   0000023C   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000240   0120C0E7           STRB     R2,[R0, +R1]
   \   00000244   010080E2           ADD      R0,R0,#+1
   \   00000248   040050E3           CMP      R0,#+4
   \   0000024C   F9FFFFBA           BLT      ??isDifferentData_9
   \   00000250   E44096E5           LDR      R4,[R6, #+228]
   \   00000254   E85096E5           LDR      R5,[R6, #+232]
   \   00000258   18009DE5           LDR      R0,[SP, #+24]
   \   0000025C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000260   0420A0E1           MOV      R2,R4
   \   00000264   0530A0E1           MOV      R3,R5
   \   00000268   ........           _BLF     __dEqual,??__dEqual??rA
   \   0000026C   000050E3           CMP      R0,#+0
   \   00000270   4600000A           BEQ      ??isDifferentData_3
   \   00000274   0000A0E3           MOV      R0,#+0
   \   00000278   1C108DE2           ADD      R1,SP,#+28
   \                     ??isDifferentData_10:
   \   0000027C   5B2087E2           ADD      R2,R7,#+91
   \   00000280   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000284   0120C0E7           STRB     R2,[R0, +R1]
   \   00000288   010080E2           ADD      R0,R0,#+1
   \   0000028C   040050E3           CMP      R0,#+4
   \   00000290   F9FFFFBA           BLT      ??isDifferentData_10
   \   00000294   AC1096E5           LDR      R1,[R6, #+172]
   \   00000298   1C009DE5           LDR      R0,[SP, #+28]
   \   0000029C   ........           _BLF     __fEqual,??__fEqual??rA
   \   000002A0   000050E3           CMP      R0,#+0
   \   000002A4   3900000A           BEQ      ??isDifferentData_3
   \   000002A8   294087E2           ADD      R4,R7,#+41
   \   000002AC   445086E2           ADD      R5,R6,#+68
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           _BLF     strlen,??strlen??rA
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   142095E5           LDR      R2,[R5, #+20]
   \   000002C0   0430A0E1           MOV      R3,R4
   \   000002C4   0010A0E3           MOV      R1,#+0
   \   000002C8   0500A0E1           MOV      R0,R5
   \   000002CC   ........           _BLF     ??compare_1,??compare??rA
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   04D08DE2           ADD      SP,SP,#+4
   \   000002D8   2B00001A           BNE      ??isDifferentData_1
   \   000002DC   0000A0E3           MOV      R0,#+0
   \   000002E0   20108DE2           ADD      R1,SP,#+32
   \                     ??isDifferentData_11:
   \   000002E4   512087E2           ADD      R2,R7,#+81
   \   000002E8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000002EC   0120C0E7           STRB     R2,[R0, +R1]
   \   000002F0   010080E2           ADD      R0,R0,#+1
   \   000002F4   040050E3           CMP      R0,#+4
   \   000002F8   F9FFFFBA           BLT      ??isDifferentData_11
   \   000002FC   F81096E5           LDR      R1,[R6, #+248]
   \   00000300   20009DE5           LDR      R0,[SP, #+32]
   \   00000304   ........           _BLF     __fEqual,??__fEqual??rA
   \   00000308   000050E3           CMP      R0,#+0
   \   0000030C   1F00000A           BEQ      ??isDifferentData_3
   \   00000310   0000A0E3           MOV      R0,#+0
   \   00000314   24108DE2           ADD      R1,SP,#+36
   \                     ??isDifferentData_12:
   \   00000318   552087E2           ADD      R2,R7,#+85
   \   0000031C   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000320   0120C0E7           STRB     R2,[R0, +R1]
   \   00000324   010080E2           ADD      R0,R0,#+1
   \   00000328   040050E3           CMP      R0,#+4
   \   0000032C   F9FFFFBA           BLT      ??isDifferentData_12
   \   00000330   FC1096E5           LDR      R1,[R6, #+252]
   \   00000334   24009DE5           LDR      R0,[SP, #+36]
   \   00000338   ........           _BLF     __fEqual,??__fEqual??rA
   \   0000033C   000050E3           CMP      R0,#+0
   \   00000340   1200000A           BEQ      ??isDifferentData_3
   \   00000344   0001D6E5           LDRB     R0,[R6, #+256]
   \   00000348   5910D7E5           LDRB     R1,[R7, #+89]
   \   0000034C   010050E1           CMP      R0,R1
   \   00000350   0101D605           LDRBEQ   R0,[R6, #+257]
   \   00000354   5A10D705           LDRBEQ   R1,[R7, #+90]
   \   00000358   01005001           CMPEQ    R0,R1
   \   0000035C   0A00001A           BNE      ??isDifferentData_1
   \   00000360   6A10D7E5           LDRB     R1,[R7, #+106]
   \   00000364   6920D7E5           LDRB     R2,[R7, #+105]
   \   00000368   B00096E5           LDR      R0,[R6, #+176]
   \   0000036C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000370   6820D7E5           LDRB     R2,[R7, #+104]
   \   00000374   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000378   6720D7E5           LDRB     R2,[R7, #+103]
   \   0000037C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000380   010050E1           CMP      R0,R1
   \   00000384   0100A003           MOVEQ    R0,#+1
   \   00000388   0000000A           BEQ      ??isDifferentData_3
   \                     ??isDifferentData_1:
   \   0000038C   0000A0E3           MOV      R0,#+0
    778              return !isNoDiff;
   \                     ??isDifferentData_3:
   \   00000390   28D08DE2           ADD      SP,SP,#+40
   \   00000394   F040BDE8           POP      {R4-R7,LR}
   \   00000398   010020E2           EOR      R0,R0,#0x1
   \   0000039C   FF0000E2           AND      R0,R0,#0xFF
   \   000003A0   1EFF2FE1           BX       LR               ;; return
    779          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data CTOUser::__vtbl[24]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~CTOUser`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??DeleteCargo
   \              ............
   \   00000060   284E6F206E61       DC8 "(No name)"
   \              6D652900    
   \   0000006A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Cargotype ">`:
   \   00000000   436172676F74       DC8 "Cargotype "
   \              7970652000  
   \   0000000B   00                 DC8 0
   \   0000000C   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   0000002D   000000             DC8 0, 0, 0
   \   00000030   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   0000003F   00                 DC8 0
   \   00000040   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   0000005D   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CTOUser &CTOUser::new CTOUser(bool, bool)
   \                     `??new CTOUser`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   410FA0E3           MOV      R0,#+260
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new CTOUser_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??CTOUser_1
   \                     `??new CTOUser_1`:
   \   00000028   ........           B        ??Subroutine30_0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; ??ObjectSet
   \   00000008   88509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   480084E5           STR      R0,[R4, #+72]
   \   00000014   4C0084E5           STR      R0,[R4, #+76]
   \   00000018   500084E5           STR      R0,[R4, #+80]
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000038   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000003C   1400C4E5           STRB     R0,[R4, #+20]
   \   00000040   0C0085E2           ADD      R0,R5,#+12
   \   00000044   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000054   180084E2           ADD      R0,R4,#+24
   \   00000058   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000005C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000060   2C00C4E5           STRB     R0,[R4, #+44]
   \   00000064   180085E2           ADD      R0,R5,#+24
   \   00000068   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000078   300084E2           ADD      R0,R4,#+48
   \   0000007C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000080   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000084   4400C4E5           STRB     R0,[R4, #+68]
   \   00000088   240085E2           ADD      R0,R5,#+36
   \   0000008C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000090   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000098   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ??npos
    780          
    781          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CTOUser::CTOUser(CTOUser const &)
                                       12
     CTOUser::CTOUser(bool, bool)     100
     CTOUser::Compare(CTOUser *, CTOUser *)
                                       64
     CTOUser::CopyCargoSetting(CTOUser *)
                                      272
     CTOUser::CreateUserCargoList()    12
     CTOUser::DeleteCargo()             8
     CTOUser::DeleteUserCargoList()    12
     CTOUser::EraseFromVector(CTOUser *)
                                       12
     CTOUser::Find(int)                 8
     CTOUser::FindCargo(AnsiString)    16
     CTOUser::FindCargo(unsigned int)
                                       12
     CTOUser::FindCargoIndex(AnsiString)
                                       12
     CTOUser::FindFirstFree()           4
     CTOUser::GetDefinedCargoes()      12
     CTOUser::GetStringValue(int, int, AnsiString &)
                                        4
     CTOUser::GetValue(int, int, float &, int &, int &)
                                       36
     CTOUser::GetValueInfoTableStatic(int &, int)
                                        0
     CTOUser::IsUniqueCargoName(AnsiString, CTOUser *)
                                       20
     CTOUser::PutFloatValue(int, float)
                                        4
     CTOUser::PutValue(int, int, AnsiString, bool, int *)
                                      988
     CTOUser::ReceiveData(unsigned char *)
                                       80
     CTOUser::RestoreSettings(TSNConfigString *)
                                      544
     CTOUser::SaveSettings(TSNConfigString *)
                                     2496
     CTOUser::SendData(unsigned short)
                                      132
     CTOUser::Sort(vector<CTOUser *> &)
                                        4
     CTOUser::UpdateTankCargoType()    16
     CTOUser::isDifferentData(ANPRO10_COMMAND_2810 *)
                                       64
     CTOUser::new CTOUser(bool, bool)
                                       12
     CTOUser::operator=(CTOUser)       12
     CTOUser::~CTOUser()               12
     CargoTypeObject::CargoTypeObject(CargoTypeObject const &)
                                       12
     PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
                                       12
     _Adjust_heap(CTOUser **, signed int, signed int, CTOUser * const &, bool (*)(CTOUser *, CTOUser *))
                                       32
     _Insertion_sort(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       32
     _Med3(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       20
     _Median(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       28
     _Rotate(CTOUser **, CTOUser **, CTOUser **, signed int *, CTOUser **)
                                       20
     _Sort(CTOUser **, CTOUser **, int, bool (*)(CTOUser *, CTOUser *))
                                       40
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr)
                                       16
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr, pair<int const, CTOUser *> const &)
                                       24
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Lbound(int) const
                                        0
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Ubound(int) const
                                        0
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::clear()
                                        8
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::equal_range(int)
                                       28
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator)
                                       20
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(int)
                                       24
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::find(int)
                                       12
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::insert(pair<int const, CTOUser *> const &)
                                       40
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr)
                                       16
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr, pair<unsigned int const, CTOUser *> const &)
                                       24
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Lbound(unsigned int) const
                                        0
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::find(unsigned int)
                                       12
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::insert(pair<unsigned int const, CTOUser *> const &)
                                       40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       32
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Unguarded_partition(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       52
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Insert(CTOUser **, CTOUser * const &)
                                       16
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Make_room(CTOUser **, unsigned int)
                                       32
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Push_back0(CTOUser *)
                                        8
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Tidy0()
                                        4
     __sti__routine()                  16
     make_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       28
     map<int, CTOUser *>::~map()        4
     map<unsigned int, CTOUser *>::~map()
                                        8
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     pop_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                       16
     set<PRogramObjectBase *>::~set()
                                        4
     set<unsigned int>::set(set<unsigned int> const &)
                                       16
     string::compare(string const &) const
                                        8
     string::string(string const &)    12
     vector<CTOUser *>::~vector()       8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     string::compare(string const &) const
                                      48
     _Rotate(CTOUser **, CTOUser **, CTOUser **, signed int *, CTOUser **)
                                     164
     _Adjust_heap(CTOUser **, signed int, signed int, CTOUser * const &, bool (*)(CTOUser *, CTOUser *))
                                     232
     pop_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                      72
     make_heap(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                     100
     _Insertion_sort(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                     196
     _Med3(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                     144
     _Median(CTOUser **, CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                     160
     _Unguarded_partition(CTOUser **, CTOUser **, bool (*)(CTOUser *, CTOUser *))
                                     560
     _Sort(CTOUser **, CTOUser **, int, bool (*)(CTOUser *, CTOUser *))
                                     240
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::insert(pair<unsigned int const, CTOUser *> const &)
                                     208
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::insert(pair<int const, CTOUser *> const &)
                                     208
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::erase(int)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::clear()
                                      32
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::find(unsigned int)
                                      48
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::find(int)
                                      48
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::equal_range(int)
                                      76
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                     112
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                     148
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Erase(_Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr)
                                      68
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Nodeptr, pair<unsigned int const, CTOUser *> const &)
                                     112
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Nodeptr, pair<int const, CTOUser *> const &)
                                     112
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tmap_traits<unsigned int, CTOUser *, less<unsigned int>, allocator<pair<unsigned int const, CTOUser *>>, false>>::_Lbound(unsigned int) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Lbound(int) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     _Tree<_Tmap_traits<int, CTOUser *, less<int>, allocator<pair<int const, CTOUser *>>, false>>::_Ubound(int) const
                                      40
     set<unsigned int>::set(set<unsigned int> const &)
                                      48
     set<PRogramObjectBase *>::~set()
                                      16
     map<int, CTOUser *>::~map()      16
     map<unsigned int, CTOUser *>::~map()
                                      32
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Tidy0()
                                      36
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Insert(CTOUser **, CTOUser * const &)
                                      72
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Make_room(CTOUser **, unsigned int)
                                     232
     _Vector_impl<CTOUser *, allocator<CTOUser *>>::_Push_back0(CTOUser *)
                                      72
     vector<CTOUser *>::~vector()     36
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
                                     160
     CargoTypeObject::CargoTypeObject(CargoTypeObject const &)
                                     208
     CTOUser::CTOUser(CTOUser const &)
                                      72
     ?_0                              48
     CTOUser::ObjectSet               88
     CTOUser::CTOUser(bool, bool)    300
     CTOUser::~CTOUser()              84
     ?Subroutine30                    12
     CTOUser::SaveSettings(TSNConfigString *)
                                    4044
     CTOUser::RestoreSettings(TSNConfigString *)
                                    1584
     ?Subroutine31                    20
     CTOUser::FindCargo(unsigned int)
                                      40
     CTOUser::GetValue(int, int, float &, int &, int &)
                                     324
     CTOUser::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine32                     8
     CTOUser::PutValue(int, int, AnsiString, bool, int *)
                                    1380
     CTOUser::PutFloatValue(int, float)
                                       8
     CTOUser::GetValueInfoTableStatic(int &, int)
                                      28
     CTOUser::UpdateTankCargoType()  120
     ?Subroutine33                     8
     CTOUser::CopyCargoSetting(CTOUser *)
                                     116
     CTOUser::ReceiveData(unsigned char *)
                                     728
     CTOUser::SendData(unsigned short)
                                     760
     CTOUser::FindFirstFree()         84
     CTOUser::CreateUserCargoList()   68
     CTOUser::DeleteUserCargoList()  104
     CTOUser::FindCargoIndex(AnsiString)
                                     104
     CTOUser::FindCargo(AnsiString)  104
     CTOUser::IsUniqueCargoName(AnsiString, CTOUser *)
                                      92
     CTOUser::Sort(vector<CTOUser *> &)
                                      36
     CTOUser::Compare(CTOUser *, CTOUser *)
                                     108
     ?Subroutine34                     8
     CTOUser::Find(int)               44
     CTOUser::GetDefinedCargoes()     96
     CTOUser::DeleteCargo()           20
     CTOUser::EraseFromVector(CTOUser *)
                                      88
     CTOUser::operator=(CTOUser)     228
     CTOUser::isDifferentData(ANPRO10_COMMAND_2810 *)
                                     932
     CTOUser::__vtbl                 108
     ?<Constant "0x%0x">               8
     ?<Constant "Cargotype ">         96
     CTOUser::new CTOUser(bool, bool)
                                      44
     __sti__routine()                156
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable11                     4
     ??DataTable15                     4
     ??DataTable19                     4
     ??DataTable20                     4
      Others                        1424

 
 20 320 bytes in segment CODE
    260 bytes in segment DATA_C
    104 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 11 928 bytes of CODE  memory (+ 8 408 bytes shared)
    260 bytes of CONST memory
    104 bytes of DATA  memory

Errors: none
Warnings: 1
