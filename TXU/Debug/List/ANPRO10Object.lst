##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:50 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ANPRO10Object.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\ANPRO10Object.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ANPRO10Object.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ANPRO10Object.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ANPRO10Object.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          ANPRO10Object::ANPRO10Object(TSNUart *PortPtr)
   \                     ??ANPRO10Object:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     10          {
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000014   18009FE5           LDR      R0,??ANPRO10Object_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     11          	CPort         = PortPtr;
   \   0000001C   485184E5           STR      R5,[R4, #+328]
     12          	FailCntTotal  =0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   500184E5           STR      R0,[R4, #+336]
     13          	FailCnt       =0;
   \   00000028   540184E5           STR      R0,[R4, #+340]
     14          
     15          }
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           B        ?Subroutine11
   \                     ??ANPRO10Object_1:
   \   00000034   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          ANPRO10Object::~ANPRO10Object(void)
     18          {
   \                     `?~ANPRO10Object`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~ANPRO10Object_1`
     19          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~ANPRO10Object_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ANPRO10Object_1`:
   \   0000002C                      REQUIRE ?Subroutine11
   \   0000002C                      ;; // Fall through to label ?Subroutine11
     20          
     21          #ifndef ANCONF
     22          //////////////////////////////////////////////////////////////
     23          //
     24          // Routines for communication
     25          //
     26          ///////////////////////////////////////////////////////////////
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          bool ANPRO10Object::ANPRO10_IO_UnpackPacket(U8 *Buf)
     29          {
     30          	return(false);
   \                     ??ANPRO10_IO_UnpackPacket:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     31          }
     32          	#define MAX_TIME_BETWEEN_BYTE	50

   \                                 In segment CODE, align 4, keep-with-next
     33          bool ANPRO10Object::ANPRO10_IO_Receive(int Delay)
     34          {
   \                     ??ANPRO10_IO_Receive:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   0050A0E1           MOV      R5,R0
     35          	#ifdef S2TXU
     36          	#if (USE_EMBOS_MEM_POOL==1) 
     37          	U8 *RxBuf = (U8*)OS_MEMF_Alloc(&pANPRO10IOMemPool,PURPOSE_IO_RECEIVE);
     38          	#else
     39          	U8 RxBuf[MAX_ANPRO10_IO_SIZE];
     40          	#endif
     41          	#else
     42          	U8 *RxBuf = new U8[MAX_ANPRO10_IO_SIZE];
     43          	#endif
     44          	volatile ANPRO10_PacketHeading *pPH =  (ANPRO10_PacketHeading*)RxBuf;
     45          	volatile U8 Data;
     46          	int SyncCnt=0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   04108DE5           STR      R1,[SP, #+4]
     47          	bool dataAvailable = false;
     48          	bool PacketOK      = false;
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   0160A0E1           MOV      R6,R1
     49          	bool Echo          = false;
   \   00000020   0170A0E1           MOV      R7,R1
   \   00000024   070000EA           B        ??ANPRO10_IO_Receive_1
     50          	do {
     51          		do {
     52          			do {
     53          				dataAvailable = CPort->Receive((U8*)&Data,sizeof(Data),Delay);
     54          				//WriteByte(Data&0xFF);
     55          			}  while ( dataAvailable && Data != ANPRO10_SYN );
     56          			if ( dataAvailable ) {
     57          				// A minimum of 2 SYN to accept start
     58          				//Message("First SYN");
     59          				//SyncCnt = 0;
     60          				do {
     61          					dataAvailable = CPort->Receive((U8*)&Data,sizeof(Data),MAX_TIME_BETWEEN_BYTE);
     62          					if ( dataAvailable && (Data == ANPRO10_SYN) ) SyncCnt++;
     63          				} while ( dataAvailable && (Data == ANPRO10_SYN) );
     64          				if ( dataAvailable && SyncCnt && (Data == ANPRO10_SOH) ) {
     65          					U8 *RxPtr = RxBuf;
     66          					for ( unsigned i=0; dataAvailable && i < sizeof(NetHeading); i++ ) {
     67          						dataAvailable = CPort->Receive(RxPtr++,sizeof(Data),MAX_TIME_BETWEEN_BYTE);
     68          					}
     69          					if ( dataAvailable ) {
     70          						U8 HCSum = 0;
     71          						{
     72          							U8 *TmpRxPtr = RxBuf;
     73          							for ( unsigned i=0; i < sizeof(ANPRO10_PacketHeading)-1; i++ ) {
     74          								HCSum     = CRC[HCSum ^ *TmpRxPtr++];
     75          							}
     76          
     77          						}
     78          						if ( HCSum == pPH->HCRC ) {
     79          							//OS_Delay(1000);
     80          							unsigned DataSize = (unsigned)pPH->nob;
     81          							if ( DataSize > 3 && DataSize < MAX_ANPRO10_IO_SIZE ) {
     82          								int Cnt=0;
     83          								for ( unsigned i=0; dataAvailable && i < DataSize-sizeof(ANPRO10_PacketHeading); i++ ) {
     84          									dataAvailable = CPort->Receive(RxPtr++,sizeof(Data),MAX_TIME_BETWEEN_BYTE);
     85          									Cnt++;
     86          								}
     87          								if ( !dataAvailable ) {
     88          									//OS_Delay(100);
     89          								}
     90          								if ( dataAvailable ) {
     91          									RxPtr = RxBuf;
     92          									volatile U8 CSum = 0;
     93          
     94          									for ( unsigned i=0; i < DataSize-2; i++ ) {
     95          										CSum     = CRC[CSum ^ *RxPtr++];
     96          									}
     97          									U8  PacketCheckSum = *((U8*)&RxBuf[DataSize-2]);
     98          									if ( PacketCheckSum == CSum ) {
     99          										SequenceNumber = RxBuf[DataSize-3];
    100          										//U16 EndCommand = *((U16*)&ARxBuf[DataSize-6]);
    101          										//                  U8 EndData = *((U8*)&ARxBuf[DataSize-4]);
    102          										U8 EOTByte = *((U8*)&RxBuf[DataSize-1]);
    103          										if ( EOTByte == ANPRO10_EOT ) {
    104          											switch ( pPH->txtypeid ) {
    105          
    106          											//int tID = pPH->txtypeid;
    107          											//int rID = pPH->rxtypeid;
    108          											//if ( tID != rID )
    109          											//switch ( rID ) {
    110          											case DEVICE_ZBHART :
    111          												Echo = !ANPRO10_IO_UnpackPacket(RxBuf);
    112          												if ( !Echo ) {
    113          													PacketOK = true;
    114          												}
    115          												break;
    116          											case DEVICE_ZBANA :
    117          												Echo = !ANPRO10_IO_UnpackPacket(RxBuf);
    118          												if ( !Echo ) {
    119          													PacketOK = true;
    120          												}
    121          												break;
    122          											case DEVICE_ZB485 :
    123          												Echo = !ANPRO10_IO_UnpackPacket(RxBuf);
    124          												if ( !Echo ) {
    125          													PacketOK = true;
    126          												}
    127          												break;
    128          											case DEVICE_TCU:
    129          												Echo = true;
    130          												break;
    131          											default:
    132          												break;
    133          											}
    134          										}
    135          									}
    136          								}
    137          							}
    138          						}
    139          					}
    140          				}
    141          			}
    142          		}while ( Echo && dataAvailable );
    143          	}while ( !PacketOK && CPort->HasMore() );
   \                     ??ANPRO10_IO_Receive_2:
   \   00000028   481195E5           LDR      R1,[R5, #+328]
   \   0000002C   0100A0E1           MOV      R0,R1
   \   00000030   DC1091E5           LDR      R1,[R1, #+220]
   \   00000034   241091E5           LDR      R1,[R1, #+36]
   \   00000038   0FE0A0E1           MOV      LR,PC
   \   0000003C   11FF2FE1           BX       R1
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   9A00000A           BEQ      ??ANPRO10_IO_Receive_3
   \                     ??ANPRO10_IO_Receive_1:
   \   00000048   484195E5           LDR      R4,[R5, #+328]
   \   0000004C   08349DE5           LDR      R3,[SP, #+1032]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   DC4094E5           LDR      R4,[R4, #+220]
   \   00000058   0120A0E3           MOV      R2,#+1
   \   0000005C   084094E5           LDR      R4,[R4, #+8]
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   14FF2FE1           BX       R4
   \   0000006C   0040B0E1           MOVS     R4,R0
   \   00000070   8900000A           BEQ      ??ANPRO10_IO_Receive_4
   \   00000074   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000078   160050E3           CMP      R0,#+22
   \   0000007C   F1FFFF1A           BNE      ??ANPRO10_IO_Receive_1
   \                     ??ANPRO10_IO_Receive_5:
   \   00000080   484195E5           LDR      R4,[R5, #+328]
   \   00000084   3230A0E3           MOV      R3,#+50
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   DC4094E5           LDR      R4,[R4, #+220]
   \   00000090   0120A0E3           MOV      R2,#+1
   \   00000094   084094E5           LDR      R4,[R4, #+8]
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0FE0A0E1           MOV      LR,PC
   \   000000A0   14FF2FE1           BX       R4
   \   000000A4   0040B0E1           MOVS     R4,R0
   \   000000A8   7B00000A           BEQ      ??ANPRO10_IO_Receive_4
   \   000000AC   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000B0   160050E3           CMP      R0,#+22
   \   000000B4   04109D05           LDREQ    R1,[SP, #+4]
   \   000000B8   01108102           ADDEQ    R1,R1,#+1
   \   000000BC   04108D05           STREQ    R1,[SP, #+4]
   \   000000C0   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000C4   160050E3           CMP      R0,#+22
   \   000000C8   ECFFFF0A           BEQ      ??ANPRO10_IO_Receive_5
   \   000000CC   04009DE5           LDR      R0,[SP, #+4]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   7000000A           BEQ      ??ANPRO10_IO_Receive_4
   \   000000D8   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000DC   010050E3           CMP      R0,#+1
   \   000000E0   6D00001A           BNE      ??ANPRO10_IO_Receive_4
   \   000000E4   08808DE2           ADD      R8,SP,#+8
   \   000000E8   00A0A0E3           MOV      R10,#+0
   \                     ??ANPRO10_IO_Receive_6:
   \   000000EC   484195E5           LDR      R4,[R5, #+328]
   \   000000F0   3230A0E3           MOV      R3,#+50
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   DC4094E5           LDR      R4,[R4, #+220]
   \   000000FC   0120A0E3           MOV      R2,#+1
   \   00000100   084094E5           LDR      R4,[R4, #+8]
   \   00000104   0810A0E1           MOV      R1,R8
   \   00000108   0FE0A0E1           MOV      LR,PC
   \   0000010C   14FF2FE1           BX       R4
   \   00000110   018088E2           ADD      R8,R8,#+1
   \   00000114   0040A0E1           MOV      R4,R0
   \   00000118   01A08AE2           ADD      R10,R10,#+1
   \   0000011C   000054E3           CMP      R4,#+0
   \   00000120   5D00000A           BEQ      ??ANPRO10_IO_Receive_4
   \   00000124   07005AE3           CMP      R10,#+7
   \   00000128   EFFFFF3A           BCC      ??ANPRO10_IO_Receive_6
   \   0000012C   0000A0E3           MOV      R0,#+0
   \   00000130   08108DE2           ADD      R1,SP,#+8
   \   00000134   0020A0E1           MOV      R2,R0
   \                     ??ANPRO10_IO_Receive_7:
   \   00000138   ........           LDRB     R3,[R1], #+1
   \   0000013C   012082E2           ADD      R2,R2,#+1
   \   00000140   060052E3           CMP      R2,#+6
   \   00000144   000023E0           EOR      R0,R3,R0
   \   00000148   A0319FE5           LDR      R3,??ANPRO10_IO_Receive_8  ;; CRC
   \   0000014C   0300D0E7           LDRB     R0,[R0, +R3]
   \   00000150   F8FFFF3A           BCC      ??ANPRO10_IO_Receive_7
   \   00000154   0E10DDE5           LDRB     R1,[SP, #+14]
   \   00000158   010050E1           CMP      R0,R1
   \   0000015C   4E00001A           BNE      ??ANPRO10_IO_Receive_4
   \   00000160   0D00DDE5           LDRB     R0,[SP, #+13]
   \   00000164   0C10DDE5           LDRB     R1,[SP, #+12]
   \   00000168   00A481E1           ORR      R10,R1,R0, LSL #+8
   \   0000016C   04005AE3           CMP      R10,#+4
   \   00000170   4900003A           BCC      ??ANPRO10_IO_Receive_4
   \   00000174   400E5AE3           CMP      R10,#+1024
   \   00000178   4700002A           BCS      ??ANPRO10_IO_Receive_4
   \   0000017C   00B0A0E3           MOV      R11,#+0
   \   00000180   0D0000EA           B        ??ANPRO10_IO_Receive_9
   \                     ??ANPRO10_IO_Receive_10:
   \   00000184   484195E5           LDR      R4,[R5, #+328]
   \   00000188   3230A0E3           MOV      R3,#+50
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   DC4094E5           LDR      R4,[R4, #+220]
   \   00000194   0120A0E3           MOV      R2,#+1
   \   00000198   084094E5           LDR      R4,[R4, #+8]
   \   0000019C   0810A0E1           MOV      R1,R8
   \   000001A0   0FE0A0E1           MOV      LR,PC
   \   000001A4   14FF2FE1           BX       R4
   \   000001A8   018088E2           ADD      R8,R8,#+1
   \   000001AC   0040A0E1           MOV      R4,R0
   \   000001B0   01B08BE2           ADD      R11,R11,#+1
   \   000001B4   000054E3           CMP      R4,#+0
   \   000001B8   3700000A           BEQ      ??ANPRO10_IO_Receive_4
   \                     ??ANPRO10_IO_Receive_9:
   \   000001BC   07004AE2           SUB      R0,R10,#+7
   \   000001C0   00005BE1           CMP      R11,R0
   \   000001C4   EEFFFF3A           BCC      ??ANPRO10_IO_Receive_10
   \   000001C8   08808DE2           ADD      R8,SP,#+8
   \   000001CC   0190CDE5           STRB     R9,[SP, #+1]
   \   000001D0   0000A0E3           MOV      R0,#+0
   \   000001D4   060000EA           B        ??ANPRO10_IO_Receive_11
   \                     ??ANPRO10_IO_Receive_12:
   \   000001D8   0120DDE5           LDRB     R2,[SP, #+1]
   \   000001DC   ........           LDRB     R3,[R8], #+1
   \   000001E0   010080E2           ADD      R0,R0,#+1
   \   000001E4   022023E0           EOR      R2,R3,R2
   \   000001E8   00319FE5           LDR      R3,??ANPRO10_IO_Receive_8  ;; CRC
   \   000001EC   0320D2E7           LDRB     R2,[R2, +R3]
   \   000001F0   0120CDE5           STRB     R2,[SP, #+1]
   \                     ??ANPRO10_IO_Receive_11:
   \   000001F4   02104AE2           SUB      R1,R10,#+2
   \   000001F8   010050E1           CMP      R0,R1
   \   000001FC   F5FFFF3A           BCC      ??ANPRO10_IO_Receive_12
   \   00000200   08008DE2           ADD      R0,SP,#+8
   \   00000204   00008AE0           ADD      R0,R10,R0
   \   00000208   030040E2           SUB      R0,R0,#+3
   \   0000020C   0110D0E5           LDRB     R1,[R0, #+1]
   \   00000210   0120DDE5           LDRB     R2,[SP, #+1]
   \   00000214   020051E1           CMP      R1,R2
   \   00000218   0010D005           LDRBEQ   R1,[R0, #+0]
   \   0000021C   4C11C505           STRBEQ   R1,[R5, #+332]
   \   00000220   0200D005           LDRBEQ   R0,[R0, #+2]
   \   00000224   04005003           CMPEQ    R0,#+4
   \   00000228   1B00001A           BNE      ??ANPRO10_IO_Receive_4
   \   0000022C   A42095E5           LDR      R2,[R5, #+164]
   \   00000230   0A00DDE5           LDRB     R0,[SP, #+10]
   \   00000234   100050E2           SUBS     R0,R0,#+16
   \   00000238   0F00000A           BEQ      ??ANPRO10_IO_Receive_13
   \   0000023C   010050E2           SUBS     R0,R0,#+1
   \   00000240   02005012           SUBSNE   R0,R0,#+2
   \   00000244   0200000A           BEQ      ??ANPRO10_IO_Receive_14
   \   00000248   0D0050E2           SUBS     R0,R0,#+13
   \   0000024C   0170A003           MOVEQ    R7,#+1
   \   00000250   110000EA           B        ??ANPRO10_IO_Receive_4
   \                     ??ANPRO10_IO_Receive_14:
   \   00000254   7C2092E5           LDR      R2,[R2, #+124]
   \   00000258   08108DE2           ADD      R1,SP,#+8
   \   0000025C   0500A0E1           MOV      R0,R5
   \   00000260   0FE0A0E1           MOV      LR,PC
   \   00000264   12FF2FE1           BX       R2
   \   00000268   010000E2           AND      R0,R0,#0x1
   \   0000026C   017030E2           EORS     R7,R0,#0x1
   \   00000270   0900001A           BNE      ??ANPRO10_IO_Receive_4
   \   00000274   0160A0E3           MOV      R6,#+1
   \   00000278   070000EA           B        ??ANPRO10_IO_Receive_4
   \                     ??ANPRO10_IO_Receive_13:
   \   0000027C   7C2092E5           LDR      R2,[R2, #+124]
   \   00000280   08108DE2           ADD      R1,SP,#+8
   \   00000284   0500A0E1           MOV      R0,R5
   \   00000288   0FE0A0E1           MOV      LR,PC
   \   0000028C   12FF2FE1           BX       R2
   \   00000290   010000E2           AND      R0,R0,#0x1
   \   00000294   017030E2           EORS     R7,R0,#0x1
   \   00000298   0160A003           MOVEQ    R6,#+1
   \                     ??ANPRO10_IO_Receive_4:
   \   0000029C   070014E1           TST      R4,R7
   \   000002A0   68FFFF1A           BNE      ??ANPRO10_IO_Receive_1
   \   000002A4   000056E3           CMP      R6,#+0
   \   000002A8   5EFFFF0A           BEQ      ??ANPRO10_IO_Receive_2
    144          	#ifdef S2TXU
    145          	#if (USE_EMBOS_MEM_POOL==1) 
    146          	OS_MEMF_Release(&pANPRO10IOMemPool,RxBuf);
    147          	#endif
    148          	#else
    149          	delete RxBuf;
    150          	#endif
    151          	if ( PacketOK ) {
    152          		FailCnt=0;
   \   000002AC   549185E5           STR      R9,[R5, #+340]
   \   000002B0   090000EA           B        ??ANPRO10_IO_Receive_15
    153          	} else {
    154          		if ( !FailCnt ) {
   \                     ??ANPRO10_IO_Receive_3:
   \   000002B4   540195E5           LDR      R0,[R5, #+340]
   \   000002B8   000050E3           CMP      R0,#+0
   \   000002BC   0000001A           BNE      ??ANPRO10_IO_Receive_16
    155          			TSN_Delay(0);
   \   000002C0   ........           _BLF     OS_Delay,??OS_Delay??rA
    156          		}
    157          		FailCntTotal++;
   \                     ??ANPRO10_IO_Receive_16:
   \   000002C4   500195E5           LDR      R0,[R5, #+336]
   \   000002C8   010080E2           ADD      R0,R0,#+1
   \   000002CC   500185E5           STR      R0,[R5, #+336]
    158          		FailCnt++;
   \   000002D0   540195E5           LDR      R0,[R5, #+340]
   \   000002D4   010080E2           ADD      R0,R0,#+1
   \   000002D8   540185E5           STR      R0,[R5, #+340]
    159          	}
    160          	return(PacketOK);
   \                     ??ANPRO10_IO_Receive_15:
   \   000002DC   0600A0E1           MOV      R0,R6
   \   000002E0   0CD08DE2           ADD      SP,SP,#+12
   \   000002E4   40DE8DE2           ADD      SP,SP,#+1024
   \   000002E8   F04FBDE8           POP      {R4-R11,LR}
   \   000002EC   1EFF2FE1           BX       LR               ;; return
   \                     ??ANPRO10_IO_Receive_8:
   \   000002F0   ........           DC32     CRC
    161          }
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          bool ANPRO10Object::SendPacket(NetPacket &Packet)
    164          {
   \                     ??SendPacket:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   40DE4DE2           SUB      SP,SP,#+1024
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    165          	//U8 *TxBuf = new U8[Packet.Size+P_START_SIZE+sizeof(ANPRO10_PacketTail)+P_COMMAND_SIZE];
    166          	#ifdef S2TXU
    167          	#if (USE_EMBOS_MEM_POOL==1) 
    168          	U8 *TxBuf = (U8*)OS_MEMF_Alloc(&pANPRO10IOMemPool,PURPOSE_IO_TRANSMIT);
    169          	#else
    170              U8 TxBuf[MAX_ANPRO10_IO_SIZE] = {ANPRO10_SYN,ANPRO10_SYN,ANPRO10_SYN,ANPRO10_SOH};
   \   00000010   A4109FE5           LDR      R1,??SendPacket_1  ;; `?<Constant {(unsigned char)'\\026', (unsigned c`
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   403EA0E3           MOV      R3,#+1024
   \                     ??SendPacket_2:
   \   0000001C   043053E2           SUBS     R3,R3,#+4
   \   00000020   032091E7           LDR      R2,[R1, R3]
   \   00000024   032080E7           STR      R2,[R0, R3]
   \   00000028   FBFFFF1A           BNE      ??SendPacket_2
    171          	#endif
    172          	#else
    173          	U8 *TxBuf = new U8[MAX_ANPRO10_IO_SIZE];
    174          	#endif
    175              TxBuf[0] = ANPRO10_SYN;
   \   0000002C   1610A0E3           MOV      R1,#+22
   \   00000030   0010CDE5           STRB     R1,[SP, #+0]
    176              TxBuf[1] = ANPRO10_SYN;
   \   00000034   1600A0E3           MOV      R0,#+22
   \   00000038   0100CDE5           STRB     R0,[SP, #+1]
    177              TxBuf[2] = ANPRO10_SYN;
   \   0000003C   0200CDE5           STRB     R0,[SP, #+2]
    178              TxBuf[3] = ANPRO10_SOH;
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0310CDE5           STRB     R1,[SP, #+3]
    179          	NetHeading    *HPtr = (NetHeading*)&TxBuf[P_SYNC_SIZE];
    180          	// Allways send to the master
    181          	int Ptr = P_SYNC_SIZE+ANPRO10_AddPacketHeading((U8*)HPtr,Packet.RxAddress,Packet.RxTypeId);
   \   00000048   0420D5E5           LDRB     R2,[R5, #+4]
   \   0000004C   0510D5E5           LDRB     R1,[R5, #+5]
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     ??ANPRO10_AddPacketHeading,??ANPRO10_AddPacketHeading??rA
   \   00000058   046080E2           ADD      R6,R0,#+4
    182          	Ptr += AddPacket((U8*)&TxBuf[Ptr],Packet);
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   000086E0           ADD      R0,R6,R0
   \   00000068   ........           _BLF     ??AddPacket,??AddPacket??rA
    183          	Ptr += ANPRO10_AddPacketTail((U8*)TxBuf,Ptr,Packet.RequestAck);
   \   0000006C   0620D5E5           LDRB     R2,[R5, #+6]
   \   00000070   066080E0           ADD      R6,R0,R6
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??ANPRO10_AddPacketTail,??ANPRO10_AddPacketTail??rA
    184          	bool TxSignal = CPort->Send((U8*)TxBuf,Ptr,SEND_COMPLETE_EVENT);
   \   00000080   484194E5           LDR      R4,[R4, #+328]
   \   00000084   062080E0           ADD      R2,R0,R6
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   0030A0E1           MOV      R3,R0
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   DC4094E5           LDR      R4,[R4, #+220]
   \   0000009C   04108DE2           ADD      R1,SP,#+4
   \   000000A0   044094E5           LDR      R4,[R4, #+4]
   \   000000A4   0FE0A0E1           MOV      LR,PC
   \   000000A8   14FF2FE1           BX       R4
    185          	#ifdef S2TXU
    186          	#if (USE_EMBOS_MEM_POOL==1) 
    187          	OS_MEMF_Release(&pANPRO10IOMemPool,TxBuf);
    188          	#endif
    189          	#else
    190          	delete TxBuf;
    191          	#endif
    192          	return(TxSignal);
   \   000000AC   04D08DE2           ADD      SP,SP,#+4
   \   000000B0   40DE8DE2           ADD      SP,SP,#+1024
   \   000000B4   7040BDE8           POP      {R4-R6,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
   \                     ??SendPacket_1:
   \   000000BC   ........           DC32     `?<Constant {(unsigned char)'\\026', (unsigned c`
    193          }
    194          #endif
    195          
    196          ///////////////////////////////////////////////////////////////
    197          //
    198          // Routines for the librarian
    199          //
    200          ///////////////////////////////////////////////////////////////
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          int  ANPRO10Object::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    203          {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
    204          	int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
    205          	switch ( ValueId ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   2F3041E2           SUB      R3,R1,#+47
   \   0000001C   483D43E2           SUB      R3,R3,#+4608
   \   00000020   010053E3           CMP      R3,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   01CF8FE2           ADR      R12,??GetValue_1
   \   0000002C   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00060000           DC8      +0,+6,+0,+0
    206          	case SVT_IO_FAIL_CNT_CHK:
    207          		MyRetValue = FailCnt;
   \                     ??GetValue_4:
   \   00000038   540190E5           LDR      R0,[R0, #+340]
   \                     ??GetValue_5:
   \   0000003C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000040   000084E5           STR      R0,[R4, #+0]
    208          		DecPnt     = 0;
   \   00000044   008085E5           STR      R8,[R5, #+0]
    209          		Unit       = NO_UNIT;
   \   00000048   008086E5           STR      R8,[R6, #+0]
   \   0000004C   070000EA           B        ??GetValue_6
    210          		break;
    211          	case SVT_IO_FAIL_CNT_TOT:
    212          		MyRetValue = FailCntTotal;
   \                     ??GetValue_7:
   \   00000050   500190E5           LDR      R0,[R0, #+336]
   \   00000054   F8FFFFEA           B        ??GetValue_5
    213          		DecPnt     = 0;
    214          		Unit       = NO_UNIT;
    215          		break;
    216          	default:
    217          		Status = PRogramObject::GetValue(ValueId,Index, MyRetValue,  DecPnt,Unit);
   \                     ??GetValue_3:
   \   00000058   40002DE9           PUSH     {R6}
   \   0000005C   20002DE9           PUSH     {R5}
   \   00000060   0430A0E1           MOV      R3,R4
   \   00000064   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000068   0070A0E1           MOV      R7,R0
   \   0000006C   08D08DE2           ADD      SP,SP,#+8
    218          		break;
    219          	}
    220          	return(Status);
   \                     ??GetValue_6:
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   F041BDE8           POP      {R4-R8,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
    221          }
    222          

   \                                 In segment CODE, align 4, keep-with-next
    223          int ANPRO10Object::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    224          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    225          	int Status = GETVAL_NO_ERR;
    226          	switch ( ValueId ) {
    227          	default:
    228          		Status = PRogramObject::GetStringValue(ValueId,Index, MyString);
    229          		break;
    230          	}
    231          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine12
    232          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    233          

   \                                 In segment CODE, align 4, keep-with-next
    234          int ANPRO10Object::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    235          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3880DDE5           LDRB     R8,[SP, #+56]
   \   0000000C   3C909DE5           LDR      R9,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
    236          	return(PRogramObject::PutValue( ValueId, Index, NewValue, Local,UnitId));
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000030   50009FE5           LDR      R0,??PutValue_2  ;; ??npos
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??assign,??assign??rA
   \   00000048   00022DE9           PUSH     {R9}
   \   0000004C   00012DE9           PUSH     {R8}
   \   00000050   08308DE2           ADD      R3,SP,#+8
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000064   0040A0E1           MOV      R4,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   08008DE2           ADD      R0,SP,#+8
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   24D08DE2           ADD      SP,SP,#+36
   \   00000080   F043BDE8           POP      {R4-R9,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_2:
   \   00000088   ........           DC32     ??npos
    237          }
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          int ANPRO10Object::PutFloatValue( int ValueId, float NewValue)
    240          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    241          	return(PRogramObject::PutFloatValue(ValueId,NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine12
   \   00000008                      ;; // Fall through to label ?Subroutine12
    242          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(unsigned char)'\\026', (unsigned c`:
   \   00000000   161616010000       DC8 22, 22, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000034   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000044   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000054   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000104   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000114   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000124   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000134   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000144   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000154   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000164   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000174   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000184   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000194   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000204   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000214   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000224   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000234   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000254   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000264   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000274   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000284   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000294   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ANPRO10Object &ANPRO10Object::new ANPRO10Object(TSNUart *)
   \                     `??new ANPRO10Object`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   560FA0E3           MOV      R0,#+344
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ANPRO10Object_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ANPRO10Object
   \                     `??new ANPRO10Object_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    243          
    244          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ANPRO10Object::ANPRO10Object(TSNUart *)
                                       12
     ANPRO10Object::ANPRO10_IO_Receive(int)
                                     1072
     ANPRO10Object::ANPRO10_IO_UnpackPacket(unsigned char *)
                                        0
     ANPRO10Object::GetStringValue(int, int, AnsiString &)
                                        4
     ANPRO10Object::GetValue(int, int, float &, int &, int &)
                                       32
     ANPRO10Object::PutFloatValue(int, float)
                                        4
     ANPRO10Object::PutValue(int, int, AnsiString, bool, int *)
                                       64
     ANPRO10Object::SendPacket(NetPacket &)
                                     1044
     ANPRO10Object::new ANPRO10Object(TSNUart *)
                                        8
     ANPRO10Object::~ANPRO10Object()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ANPRO10Object::ANPRO10Object(TSNUart *)
                                      56
     ?Subroutine11                     8
     ANPRO10Object::~ANPRO10Object()
                                      44
     ANPRO10Object::ANPRO10_IO_UnpackPacket(unsigned char *)
                                       8
     ANPRO10Object::ANPRO10_IO_Receive(int)
                                     756
     ANPRO10Object::SendPacket(NetPacket &)
                                     192
     ANPRO10Object::GetValue(int, int, float &, int &, int &)
                                     124
     ANPRO10Object::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine12                     8
     ANPRO10Object::PutValue(int, int, AnsiString, bool, int *)
                                     140
     ANPRO10Object::PutFloatValue(int, float)
                                       8
     ?<Constant {(unsigned char)'\026', (unsigned c
                                    1024
     ANPRO10Object::new ANPRO10Object(TSNUart *)
                                      40
     __sti__routine()                  4
      Others                         356

 
 1 624 bytes in segment CODE
 1 152 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 404 bytes of CODE  memory (+ 224 bytes shared)
 1 152 bytes of CONST memory

Errors: none
Warnings: none
