##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmmAmpOpenLoop.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmmAmpOpenLoop.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmmAmpOpenLoop.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmmAmpOpenLoop.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmmAmpOpenLoop.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmmAmpOpenLoop::~AlarmmAmpOpenLoop(void)
     11          {
   \                     `?~AlarmmAmpOpenLoop`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmmAmpOpenLoop_1`
     12          }
   \   00000014   0100000A           BEQ      `?~AlarmmAmpOpenLoop_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmmAmpOpenLoop_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmmAmpOpenLoop_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmmAmpOpenLoop_1`:
   \   00000030                      REQUIRE ?Subroutine9
   \   00000030                      ;; // Fall through to label ?Subroutine9

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     13          

   \                                 In segment DATA_Z, align 4, align-sorted
     14          unsigned AlarmmAmpOpenLoop::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          AlarmmAmpOpenLoop::AlarmmAmpOpenLoop(PRogramObjectBase *PROPtr, int AlDelay):AlarmBasic(PROPtr)
   \                     ??AlarmmAmpOpenLoop:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0250A0E1           MOV      R5,R2
     17          {
   \   00000010   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000014   68009FE5           LDR      R0,??AlarmmAmpOpenLoop_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     18          	NumberOfAlarmSettings++;
   \   0000001C   64009FE5           LDR      R0,??AlarmmAmpOpenLoop_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     19              PROPointer 		= PROPtr;
   \   0000002C   C46084E5           STR      R6,[R4, #+196]
     20          	IDNumber 		=  (ID_AL_SNS_OPEN_LOOP << 16)+NumberOfAlarmSettings;
   \   00000030   C006A0E3           MOV      R0,#+201326592
   \   00000034   8A0880E3           ORR      R0,R0,#0x8A0000
   \   00000038   010080E0           ADD      R0,R0,R1
   \   0000003C   9C0084E5           STR      R0,[R4, #+156]
     21          	Type     		= ID_AL_SNS_OPEN_LOOP;
   \   00000040   8A00A0E3           MOV      R0,#+138
   \   00000044   C00E80E3           ORR      R0,R0,#0xC00
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     22          	Limit    		= LIMIT_MA_OPEN_LOOP;
   \   0000004C   38009FE5           LDR      R0,??AlarmmAmpOpenLoop_1+0x8  ;; 0x3b656042
   \   00000050   E40084E5           STR      R0,[R4, #+228]
     23          	Deadband 		= 0.0001;
   \   00000054   34009FE5           LDR      R0,??AlarmmAmpOpenLoop_1+0xC  ;; 0x38d1b717
   \   00000058   BC0084E5           STR      R0,[R4, #+188]
     24          	MessageKey		= L_WORD531;	// OpenLoop
   \   0000005C   1300A0E3           MOV      R0,#+19
   \   00000060   800F80E3           ORR      R0,R0,#0x200
   \   00000064   B80084E5           STR      R0,[R4, #+184]
     25          	TPCMessageKey	= L_WORD531;	// oloop
   \   00000068   B40084E5           STR      R0,[R4, #+180]
     26          	IsHWAlarm       = true;
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   CE00C4E5           STRB     R0,[R4, #+206]
     27          	AlarmDelay		= AlDelay;
   \   00000074   A85084E5           STR      R5,[R4, #+168]
     28          }
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   7040BDE8           POP      {R4-R6,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmmAmpOpenLoop_1:
   \   00000084   ........           DC32     ??__vtbl
   \   00000088   ........           DC32     ??NumberOfAlarmSettings
   \   0000008C   4260653B           DC32     0x3b656042
   \   00000090   17B7D138           DC32     0x38d1b717
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void AlarmmAmpOpenLoop::Check(void)
     31          {
   \                     ??Check:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     32          	float Val = ((AnalogInput*)PROPointer)->FilteredValue;
   \   00000008   C46094E5           LDR      R6,[R4, #+196]
     33          	int Status = AL_STAT_IN_DEADBAND;
     34          	if ( Val > Limit + Deadband ) {
   \   0000000C   E48094E5           LDR      R8,[R4, #+228]
   \   00000010   447196E5           LDR      R7,[R6, #+324]
   \   00000014   BC0094E5           LDR      R0,[R4, #+188]
   \   00000018   0250A0E3           MOV      R5,#+2
   \   0000001C   0810A0E1           MOV      R1,R8
   \   00000020   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000024   0710A0E1           MOV      R1,R7
   \   00000028   ........           _BLF     __fLess,??__fLess??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0600000A           BEQ      ??Check_1
     35          		Status = AL_STAT_IN_NORMAL;
     36          		((AnalogInput*)PROPointer)->Failure &= ~HART_STATUS_OPEN_LOOP_BIT;
   \   00000034   3801D6E5           LDRB     R0,[R6, #+312]
   \   00000038   0050A0E3           MOV      R5,#+0
   \   0000003C   FB0000E2           AND      R0,R0,#0xFB
   \   00000040   3801C6E5           STRB     R0,[R6, #+312]
     37          		LastInactiveTime = clock();
   \   00000044   ........           _BLF     clock,??clock??rA
   \   00000048   AC0084E5           STR      R0,[R4, #+172]
   \   0000004C   110000EA           B        ??Check_2
     38          	} else if ( Val <= Limit ) {
   \                     ??Check_1:
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   0710A0E1           MOV      R1,R7
   \   00000058   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0C00000A           BEQ      ??Check_2
     39          		if ( TSNElapsedTicks(LastInactiveTime) < AlarmDelay ) {
   \   00000064   AC0094E5           LDR      R0,[R4, #+172]
   \   00000068   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   0000006C   A81094E5           LDR      R1,[R4, #+168]
   \   00000070   010050E1           CMP      R0,R1
     40          			Status = AL_STAT_IN_NORMAL;
     41          			((AnalogInput*)PROPointer)->Failure &= ~HART_STATUS_OPEN_LOOP_BIT;
   \   00000074   C40094B5           LDRLT    R0,[R4, #+196]
   \   00000078   0050A0B3           MOVLT    R5,#+0
     42          		}else{
     43          			Status = AL_STAT_IN_ALARM;
     44                      ((AnalogInput*)PROPointer)->Failure |= HART_STATUS_OPEN_LOOP_BIT;
   \   0000007C   C40094A5           LDRGE    R0,[R4, #+196]
   \   00000080   0150A0A3           MOVGE    R5,#+1
   \   00000084   3811D0B5           LDRBLT   R1,[R0, #+312]
   \   00000088   FB1001B2           ANDLT    R1,R1,#0xFB
   \   0000008C   3811D0A5           LDRBGE   R1,[R0, #+312]
   \   00000090   041081A3           ORRGE    R1,R1,#0x4
   \   00000094   3811C0E5           STRB     R1,[R0, #+312]
     45          		}
     46          	}
     47          	UpdateAlarm(Status);
   \                     ??Check_2:
   \   00000098   0510A0E1           MOV      R1,R5
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     48          }
   \   000000A4   F041BDE8           POP      {R4-R8,LR}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
     49          
     50          ///////////////////////////////////////////////////////////////
     51          //
     52          // Routines for the librarian for input
     53          //
     54          ///////////////////////////////////////////////////////////////
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          int AlarmmAmpOpenLoop::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     57          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C80DDE5           LDRB     R8,[SP, #+92]
   \   0000000C   60909DE5           LDR      R9,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     58          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
     59          	switch ( ValueId ) {
   \   0000002C   3210A0E3           MOV      R1,#+50
   \   00000030   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   2400001A           BNE      ??PutValue_2
     60          		case SVT_AL_LIMIT:
     61          			{
     62          				float Value = ConvertToSi(NewValue, ValUnitId=CURRENT_UNIT, Status,0.000 ,0.025,0.0);
   \   0000003C   1110A0E3           MOV      R1,#+17
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   08008DE2           ADD      R0,SP,#+8
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   10019FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   08008DE2           ADD      R0,SP,#+8
   \   00000068   ........           _BLF     ??assign,??assign??rA
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   F0009FE5           LDR      R0,??PutValue_3+0x4  ;; 0xffffffff9999999a
   \   0000007C   F0109FE5           LDR      R1,??PutValue_3+0x8  ;; 0x3f999999
   \   00000080   03002DE9           PUSH     {R0,R1}
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   03002DE9           PUSH     {R0,R1}
   \   00000090   18208DE2           ADD      R2,SP,#+24
   \   00000094   20008DE2           ADD      R0,SP,#+32
   \   00000098   0800BDE8           POP      {R3}
   \   0000009C   1110A0E3           MOV      R1,#+17
   \   000000A0   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000A4   0050A0E1           MOV      R5,R0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     63          				if ( Status== E_NO_ERR ) {
   \   000000B8   14009DE5           LDR      R0,[SP, #+20]
   \   000000BC   14D08DE2           ADD      SP,SP,#+20
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   1900001A           BNE      ??PutValue_4
     64          					Limit = Value;
   \   000000C8   E45084E5           STR      R5,[R4, #+228]
   \   000000CC   1A0000EA           B        ??PutValue_5
     65          				}
     66          			}
     67          			break;
     68          		default:
     69                Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_2:
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   24008DE2           ADD      R0,SP,#+36
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   84009FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   003090E5           LDR      R3,[R0, #+0]
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   24008DE2           ADD      R0,SP,#+36
   \   000000F4   ........           _BLF     ??assign,??assign??rA
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   00012DE9           PUSH     {R8}
   \   00000104   2C308DE2           ADD      R3,SP,#+44
   \   00000108   0620A0E1           MOV      R2,R6
   \   0000010C   0510A0E1           MOV      R1,R5
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000118   08008DE5           STR      R0,[SP, #+8]
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   2C008DE2           ADD      R0,SP,#+44
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   08D08DE2           ADD      SP,SP,#+8
     70          			break;
     71          	}
     72          	if ( Status==E_NO_ERR){
   \                     ??PutValue_4:
   \   00000130   00009DE5           LDR      R0,[SP, #+0]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0400001A           BNE      ??PutValue_6
     73          			SetModifiedFlag();
   \                     ??PutValue_5:
   \   0000013C   A41094E5           LDR      R1,[R4, #+164]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   541091E5           LDR      R1,[R1, #+84]
   \   00000148   0FE0A0E1           MOV      LR,PC
   \   0000014C   11FF2FE1           BX       R1
     74          	}
     75          	if (UnitId) {
   \                     ??PutValue_6:
   \   00000150   000059E3           CMP      R9,#+0
     76          		*UnitId = ValUnitId;
   \   00000154   04009D15           LDRNE    R0,[SP, #+4]
   \   00000158   00008915           STRNE    R0,[R9, #+0]
     77          	}
     78          	return(Status);
   \   0000015C   00009DE5           LDR      R0,[SP, #+0]
   \   00000160   40D08DE2           ADD      SP,SP,#+64
   \   00000164   F043BDE8           POP      {R4-R9,LR}
   \   00000168   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_3:
   \   0000016C   ........           DC32     ??npos
   \   00000170   9A999999           DC32     0xffffffff9999999a
   \   00000174   9999993F           DC32     0x3f999999
     79          }
     80          

   \                                 In segment CODE, align 4, keep-with-next
     81          int  AlarmmAmpOpenLoop::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     82          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     83          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     84          	switch ( ValueId ) {
   \   00000010   1160A0E3           MOV      R6,#+17
   \   00000014   0370A0E3           MOV      R7,#+3
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     85          		case SVT_AL_LIMIT:
     86          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000083E5           STR      R0,[R3, #+0]
     87          			DecPnt     = 3;
   \   00000040   007084E5           STR      R7,[R4, #+0]
     88          			Unit       = CURRENT_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
   \   00000048   070000EA           B        ??GetValue_6
     89          			break;
     90          		case SVT_AL_VALUE:
     91          			MyRetValue = ((AnalogInput*)PROPointer)->FilteredValue;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   440190E5           LDR      R0,[R0, #+324]
   \   00000054   F8FFFFEA           B        ??GetValue_5
     92          			DecPnt     = 3;
     93          			Unit       = CURRENT_UNIT;
     94          			break;
     95          		default:
     96          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   20002DE9           PUSH     {R5}
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000064   00C0A0E1           MOV      R12,R0
   \   00000068   08D08DE2           ADD      SP,SP,#+8
     97          			break;
     98          	}
     99          	return (Status);
   \                     ??GetValue_6:
   \   0000006C   F043BDE8           POP      {R4-R9,LR}
   \   00000070   0C00A0E1           MOV      R0,R12
   \   00000074   1EFF2FE1           BX       LR               ;; return
    100          }
    101          
    102          

   \                                 In segment CODE, align 4, keep-with-next
    103          int AlarmmAmpOpenLoop::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    104          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    105          	int Status = GETVAL_NO_ERR;
    106          	//switch ( ValueId ) {
    107          	//	default:
    108                Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    109          	//		break;
    110          	//}
    111          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine10
    112          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          int AlarmmAmpOpenLoop::PutFloatValue( int ValueId, float NewValue)
    115          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    116          	int Status= E_NO_ERR;
    117          	//switch ( ValueId ) {
    118           //   default:
    119                Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    120           //     break;
    121          	//}
    122          	return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    123          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmmAmpOpenLoop &AlarmmAmpOpenLoop::new AlarmmAmpOpenLoop(PRogramObjectBase *, int)
   \                     `??new AlarmmAmpOpenLoop`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   EC00A0E3           MOV      R0,#+236
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AlarmmAmpOpenLoop_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AlarmmAmpOpenLoop
   \                     `??new AlarmmAmpOpenLoop_1`:
   \   00000028   ........           B        ?Subroutine9

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    124          
    125          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmmAmpOpenLoop::AlarmmAmpOpenLoop(PRogramObjectBase *, int)
                                       16
     AlarmmAmpOpenLoop::Check()        24
     AlarmmAmpOpenLoop::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmmAmpOpenLoop::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmmAmpOpenLoop::PutFloatValue(int, float)
                                        4
     AlarmmAmpOpenLoop::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmmAmpOpenLoop::new AlarmmAmpOpenLoop(PRogramObjectBase *, int)
                                       12
     AlarmmAmpOpenLoop::~AlarmmAmpOpenLoop()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmmAmpOpenLoop::~AlarmmAmpOpenLoop()
                                      48
     ?Subroutine9                      8
     AlarmmAmpOpenLoop::NumberOfAlarmSettings
                                       4
     AlarmmAmpOpenLoop::AlarmmAmpOpenLoop(PRogramObjectBase *, int)
                                     148
     AlarmmAmpOpenLoop::Check()      172
     AlarmmAmpOpenLoop::PutValue(int, int, AnsiString, bool, int *)
                                     376
     AlarmmAmpOpenLoop::GetValue(int, int, float &, int &, int &)
                                     120
     AlarmmAmpOpenLoop::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine10                     8
     AlarmmAmpOpenLoop::PutFloatValue(int, float)
                                       8
     AlarmmAmpOpenLoop::new AlarmmAmpOpenLoop(PRogramObjectBase *, int)
                                      44
     __sti__routine()                  4
      Others                         372

 
 1 188 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 952 bytes of CODE  memory (+ 252 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
