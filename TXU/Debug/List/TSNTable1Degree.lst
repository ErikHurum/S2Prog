##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNTable1Degree.Cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\TSNTable1Degree.Cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNTable1Degree.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNTable1Degree.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNTable1Degree.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void reverse(TSNTable1Degree::Entry *, TSNTable1Degree::Entry *)
   \                     ??reverse:
   \   00000000   30002DE9           PUSH     {R4,R5}
   \   00000004   040000EA           B        ??reverse_1
   \                     ??reverse_2:
   \   00000008   0C0090E8           LDM      R0,{R2,R3}
   \   0000000C   081041E2           SUB      R1,R1,#+8
   \   00000010   300091E8           LDM      R1,{R4,R5}
   \   00000014   3000A0E8           STM      R0!,{R4,R5}
   \   00000018   0C0081E8           STM      R1,{R2,R3}
   \                     ??reverse_1:
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   F8FFFF3A           BCC      ??reverse_2
   \   00000024   3000BDE8           POP      {R4,R5}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   A231B0E1           LSRS     R3,R2,#+3
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   A60153E1           CMP      R3,R6, LSR #+3
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   A001A0E1           LSR      R0,R0,#+3
   \   00000068   800181E0           ADD      R0,R1,R0, LSL #+3
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   A60153E1           CMP      R3,R6, LSR #+3
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable1Degree::Entry * _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Insert(TSNTable1Degree::Entry *, TSNTable1Degree::Entry const &)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   300092E8           LDM      R2,{R4,R5}
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   000096E5           LDR      R0,[R6, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0070A003           MOVEQ    R7,#+0
   \   0000001C   00704110           SUBNE    R7,R1,R0
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_1:
   \   0000002C   3000A0E8           STM      R0!,{R4,R5}
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_1
   \   00000038   000096E5           LDR      R0,[R6, #+0]
   \   0000003C   000087E0           ADD      R0,R7,R0
   \   00000040   F040BDE8           POP      {R4-R7,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable1Degree::Entry * _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Make_room(TSNTable1Degree::Entry *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   A171A0E1           LSR      R7,R1,#+3
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   A001A0E1           LSR      R0,R0,#+3
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   E024E0E3           MVN      R2,#-536870912
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   E014E0E3           MVN      R1,#-536870912
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   8701A0E1           LSL      R0,R7,#+3
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   86218AE0           ADD      R2,R10,R6, LSL #+3
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   870189E0           ADD      R0,R9,R7, LSL #+3
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   880189E0           ADD      R0,R9,R8, LSL #+3
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   862181E0           ADD      R2,R1,R6, LSL #+3
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   860180E0           ADD      R0,R0,R6, LSL #+3
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Push_back0(TSNTable1Degree::Entry)
   \                     ??_Push_back0:
   \   00000000   16402DE9           PUSH     {R1,R2,R4,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   0800002A           BCS      ??_Push_back0_1
   \   00000018   0C0092E8           LDM      R2,{R2,R3}
   \   0000001C   01C0A0E3           MOV      R12,#+1
   \   00000020   0140A0E1           MOV      R4,R1
   \                     ??_Push_back0_2:
   \   00000024   01C05CE2           SUBS     R12,R12,#+1
   \   00000028   0C00A4E8           STM      R4!,{R2,R3}
   \   0000002C   FCFFFF1A           BNE      ??_Push_back0_2
   \   00000030   081081E2           ADD      R1,R1,#+8
   \   00000034   041080E5           STR      R1,[R0, #+4]
   \   00000038   000000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   0000003C   ........           _BLF     ??_Insert,??_Insert??rA
   \                     ??_Push_back0_3:
   \   00000040   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool vector<TSNTable1Degree::Entry>::empty() const
   \                     ??empty:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000041E0           SUB      R0,R1,R0
   \   0000000C   A001B0E1           LSRS     R0,R0,#+3
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          //---------------------------------------------------------------------------
      4          
      5          //////////////////////////////////////////////////////////////////
      6          //
      7          //	Linear table
      8          //
      9          //	Other tables like 2 degree tables inherit from this object
     10          //
     11          /////////////////////////////////////////////////////////////////
     12          

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine24:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     13          TSNTable1Degree::TSNTable1Degree(int TabType):TSNTable(TabType)
   \                     ??TSNTable1Degree:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     14          {
   \   00000008   ........           _BLF     ??TSNTable,??TSNTable??rA
   \   0000000C   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   240084E2           ADD      R0,R4,#+36
   \   00000018   ........           _BLF     ??_Zero,??_Zero??rA
     15          	Initialize();
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Initialize
     16          }
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           B        ?Subroutine24
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          TSNTable1Degree::TSNTable1Degree(int TabType,TSNConfigString &ConfigInputLines, int &ErrorStatus):TSNTable(TabType)
   \                     ??TSNTable1Degree_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
     19          {
   \   00000010   ........           _BLF     ??TSNTable,??TSNTable??rA
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000018   0C0084E5           STR      R0,[R4, #+12]
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
     20          	Initialize();
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??Initialize
     21          	ReadTable(ConfigInputLines, ErrorStatus);
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       ??ReadTable
     22          }
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040                      REQUIRE ?Subroutine25
   \   00000040                      ;; // Fall through to label ?Subroutine25

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          TSNTable1Degree::TSNTable1Degree(int TabType, vector<Entry>SrcTable):TSNTable(TabType)
   \                     ??TSNTable1Degree_2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
     25          {
   \   0000000C   ........           _BLF     ??TSNTable,??TSNTable??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   0C0084E5           STR      R0,[R4, #+12]
   \   00000018   240084E2           ADD      R0,R4,#+36
   \   0000001C   ........           _BLF     ??_Zero,??_Zero??rA
     26          	Initialize();
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??Initialize
     27          	Table = SrcTable;
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   240084E2           ADD      R0,R4,#+36
   \   00000030   ........           _BLF     ??_Assign,??_Assign??rA
     28          }
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038                      REQUIRE ?Subroutine26
   \   00000038                      ;; // Fall through to label ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void TSNTable1Degree::Initialize()
     31          {
     32          	MinY            = 0;
   \                     ??Initialize:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   201080E5           STR      R1,[R0, #+32]
     33          	MinX            = 0;
   \   00000008   1C1080E5           STR      R1,[R0, #+28]
     34          	MaxY            = 0;
   \   0000000C   181080E5           STR      R1,[R0, #+24]
     35          	MaxX            = 0;
   \   00000010   141080E5           STR      R1,[R0, #+20]
     36          	UseConstants    = false;
   \   00000014   1010C0E5           STRB     R1,[R0, #+16]
     37          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          void TSNTable1Degree::FindMinMax(void)
     40          {
   \                     ??FindMinMax:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     41          	if ( !Table.empty() ) {
   \   00000008   240084E2           ADD      R0,R4,#+36
   \   0000000C   ........           _BLF     ??empty,??empty??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   2700001A           BNE      ??FindMinMax_1
     42          		for ( unsigned i=0; i < Table.size(); i++ ) {
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   010000EA           B        ??FindMinMax_2
     43          			MaxX = max(MaxX,Table[i].x);
     44          			MinX = min(MinX,Table[i].x);
     45          			MaxY = max(MaxY,Table[i].y);
     46          			MinY = min(MinY,Table[i].y);
   \                     ??FindMinMax_3:
   \   00000020   206084E5           STR      R6,[R4, #+32]
   \   00000024   015085E2           ADD      R5,R5,#+1
   \                     ??FindMinMax_2:
   \   00000028   240084E2           ADD      R0,R4,#+36
   \   0000002C   041090E5           LDR      R1,[R0, #+4]
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000041E0           SUB      R0,R1,R0
   \   00000038   A00155E1           CMP      R5,R0, LSR #+3
   \   0000003C   1D00002A           BCS      ??FindMinMax_1
   \   00000040   240094E5           LDR      R0,[R4, #+36]
   \   00000044   146094E5           LDR      R6,[R4, #+20]
   \   00000048   857180E0           ADD      R7,R0,R5, LSL #+3
   \   0000004C   000097E5           LDR      R0,[R7, #+0]
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   ........           _BLF     __fLess,??__fLess??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   00609705           LDREQ    R6,[R7, #+0]
   \   00000060   146084E5           STR      R6,[R4, #+20]
   \   00000064   1C6094E5           LDR      R6,[R4, #+28]
   \   00000068   001097E5           LDR      R1,[R7, #+0]
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           _BLF     __fLess,??__fLess??rA
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   00609705           LDREQ    R6,[R7, #+0]
   \   0000007C   1C6084E5           STR      R6,[R4, #+28]
   \   00000080   186094E5           LDR      R6,[R4, #+24]
   \   00000084   040097E5           LDR      R0,[R7, #+4]
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   ........           _BLF     __fLess,??__fLess??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   04609705           LDREQ    R6,[R7, #+4]
   \   00000098   186084E5           STR      R6,[R4, #+24]
   \   0000009C   206094E5           LDR      R6,[R4, #+32]
   \   000000A0   041097E5           LDR      R1,[R7, #+4]
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           _BLF     __fLess,??__fLess??rA
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   04609705           LDREQ    R6,[R7, #+4]
   \   000000B4   D9FFFFEA           B        ??FindMinMax_3
     47          		}
     48          	}
     49          }
   \                     ??FindMinMax_1:
   \   000000B8   ........           B        ?Subroutine27

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void TSNTable1Degree::Clear(void)
     52          {
   \                     ??Clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
     53          	Table.clear();
   \   00000004   244080E2           ADD      R4,R0,#+36
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
     54          }
   \   00000018   ........           B        ?Subroutine24
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void TSNTable1Degree::NewValue(float x,float y)
     58          {
   \                     ??NewValue:
   \   00000000   03402DE9           PUSH     {R0,R1,LR}
   \   00000004   0030A0E1           MOV      R3,R0
     59          	Entry tmpEntry ={x,y};
     60          	Table.push_back(tmpEntry);
   \   00000008   00108DE5           STR      R1,[SP, #+0]
   \   0000000C   04208DE5           STR      R2,[SP, #+4]
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   030090E8           LDM      R0,{R0,R1}
   \   00000018   0120A0E1           MOV      R2,R1
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   240083E2           ADD      R0,R3,#+36
   \   00000024   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     61          }
   \   00000028   0340BDE8           POP      {R0,R1,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          void TSNTable1Degree::ReadTable(TSNConfigString &ConfigInputLines, int &ErrorStatus)
     64          {
   \                     ??ReadTable:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0180A0E1           MOV      R8,R1
   \   0000000C   0240A0E1           MOV      R4,R2
     65          	Table.clear();
   \   00000010   249085E2           ADD      R9,R5,#+36
   \   00000014   0900A0E1           MOV      R0,R9
   \   00000018   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000001C   0900A0E1           MOV      R0,R9
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
     66          
     67          	do {
     68          		Entry tmpEntry;
     69          		tmpEntry.x = ConfigInputLines.ReadDouble(ErrorStatus,C_T_TABLE_END);
   \                     ??ReadTable_1:
   \   00000024   9E20A0E3           MOV      R2,#+158
   \   00000028   502E82E3           ORR      R2,R2,#0x500
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000038   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000003C   0090A0E1           MOV      R9,R0
     70          		if ( !ErrorStatus ) {
   \   00000040   000094E5           LDR      R0,[R4, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1600001A           BNE      ??ReadTable_2
     71          			tmpEntry.y = CorrectionFactor*ConfigInputLines.ReadDouble(ErrorStatus);
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000005C   0060A0E1           MOV      R6,R0
     72          			if ( !ErrorStatus ) {
   \   00000060   000094E5           LDR      R0,[R4, #+0]
   \   00000064   0170A0E1           MOV      R7,R1
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0D00001A           BNE      ??ReadTable_2
     73          				Table.push_back(tmpEntry);
   \   00000070   00908DE5           STR      R9,[SP, #+0]
   \   00000074   080095E5           LDR      R0,[R5, #+8]
   \   00000078   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000007C   0620A0E1           MOV      R2,R6
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   ........           _BLF     __dMul,??__dMul??rA
   \   00000088   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000008C   04008DE5           STR      R0,[SP, #+4]
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   030090E8           LDM      R0,{R0,R1}
   \   00000098   0120A0E1           MOV      R2,R1
   \   0000009C   0010A0E1           MOV      R1,R0
   \   000000A0   240085E2           ADD      R0,R5,#+36
   \   000000A4   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     74          			}
     75          		}
     76          	} while ( !ErrorStatus );
   \                     ??ReadTable_2:
   \   000000A8   000094E5           LDR      R0,[R4, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   DBFFFF0A           BEQ      ??ReadTable_1
     77          	if ( ErrorStatus == END_FOUND ) {
   \   000000B4   020070E3           CMN      R0,#+2
   \   000000B8   0600001A           BNE      ??ReadTable_3
     78          		// End found, Permitted in this case, so ErrorStatus set to 0
     79          		ErrorStatus = 0;
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   000084E5           STR      R0,[R4, #+0]
     80          		CheckTable();
   \   000000C4   0C1095E5           LDR      R1,[R5, #+12]
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   101091E5           LDR      R1,[R1, #+16]
   \   000000D0   0FE0A0E1           MOV      LR,PC
   \   000000D4   11FF2FE1           BX       R1
     81          	}
     82          }
   \                     ??ReadTable_3:
   \   000000D8   F343BDE8           POP      {R0,R1,R4-R9,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     83          void TSNTable1Degree::CheckTable(void)
     84          {
   \                     ??CheckTable:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     85          	if ( !Table.empty() ) {
   \   00000008   240084E2           ADD      R0,R4,#+36
   \   0000000C   ........           _BLF     ??empty,??empty??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3300001A           BNE      ??CheckTable_1
     86          		FindMinMax();
   \   00000018   0C1094E5           LDR      R1,[R4, #+12]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   0C1091E5           LDR      R1,[R1, #+12]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   11FF2FE1           BX       R1
     87          		unsigned Entries = Table.size();
     88          		// See if level increase or decrease
     89          		if ( Table.front().x > Table.back().x ) {
   \   0000002C   246094E5           LDR      R6,[R4, #+36]
   \   00000030   240084E2           ADD      R0,R4,#+36
   \   00000034   041090E5           LDR      R1,[R0, #+4]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   0170A0E1           MOV      R7,R1
   \   00000040   000041E0           SUB      R0,R1,R0
   \   00000044   001096E5           LDR      R1,[R6, #+0]
   \   00000048   A051A0E1           LSR      R5,R0,#+3
   \   0000004C   080017E5           LDR      R0,[R7, #-8]
   \   00000050   ........           _BLF     __fLess,??__fLess??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0200000A           BEQ      ??CheckTable_2
     90          			reverse(Table.begin(),Table.end());
   \   0000005C   0710A0E1           MOV      R1,R7
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   ........           _BLF     ??reverse,??reverse??rA
     91          		}
     92          		// Check and adjust duplicate entries
     93          		for ( unsigned i=0; i < Entries; i++ ) {
   \                     ??CheckTable_2:
   \   00000068   0060A0E3           MOV      R6,#+0
   \   0000006C   060000EA           B        ??CheckTable_3
     94          			if ( EqualYInTable(i,Table[i].y) ) {
     95          				if ( Table.front().y < Table.back().y ) {
     96          					Table[i].y -= 0.001;
     97          				} else {
     98          					Table[i].y += 0.001;
   \                     ??CheckTable_4:
   \   00000070   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000074   70209FE5           LDR      R2,??CheckTable_5  ;; 0xffffffffd2f1a9fc
   \   00000078   70309FE5           LDR      R3,??CheckTable_5+0x4  ;; 0x3f50624d
   \                     ??CheckTable_6:
   \   0000007C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000080   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000084   040087E5           STR      R0,[R7, #+4]
     99          				}
   \                     ??CheckTable_7:
   \   00000088   016086E2           ADD      R6,R6,#+1
   \                     ??CheckTable_3:
   \   0000008C   050056E1           CMP      R6,R5
   \   00000090   1400002A           BCS      ??CheckTable_1
   \   00000094   248094E5           LDR      R8,[R4, #+36]
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   867188E0           ADD      R7,R8,R6, LSL #+3
   \   000000A0   042097E5           LDR      R2,[R7, #+4]
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       ??EqualYInTable
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0100A013           MOVNE    R0,#+1
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   F2FFFF0A           BEQ      ??CheckTable_7
   \   000000BC   281094E5           LDR      R1,[R4, #+40]
   \   000000C0   040098E5           LDR      R0,[R8, #+4]
   \   000000C4   041011E5           LDR      R1,[R1, #-4]
   \   000000C8   ........           _BLF     __fLess,??__fLess??rA
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   040097E5           LDR      R0,[R7, #+4]
   \   000000D4   E5FFFF0A           BEQ      ??CheckTable_4
   \   000000D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000DC   08209FE5           LDR      R2,??CheckTable_5  ;; 0xffffffffd2f1a9fc
   \   000000E0   0C309FE5           LDR      R3,??CheckTable_5+0x8  ;; 0xffffffffbf50624d
   \   000000E4   E4FFFFEA           B        ??CheckTable_6
    100          			}
    101          		}
    102          	}
    103          
    104          }
   \                     ??CheckTable_1:
   \   000000E8   ........           B        ?Subroutine28
   \                     ??CheckTable_5:
   \   000000EC   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   000000F0   4D62503F           DC32     0x3f50624d
   \   000000F4   4D6250BF           DC32     0xffffffffbf50624d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          TSNTable1Degree::~TSNTable1Degree(void)
    107          {
   \                     `?~TSNTable1Degree`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable3  ;; ??__vtbl
    108          }
   \   0000000C   245084E2           ADD      R5,R4,#+36
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `?~TSNTable`,`?~TSNTable??rA`
   \   0000002C   ........           B        ?Subroutine26
    109          //---------------------------------------------------------------------------
    110          
    111          ///////////////////////////////////////////////////////////////
    112          //
    113          // Routines for the Configuration
    114          //
    115          ///////////////////////////////////////////////////////////////
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          AnsiString TSNTable1Degree::MakeConfigString(int ExtraTabs)
    118          {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    119          	AnsiString LocalString;
    120          	LocalString +=TabStr1+KeyWord(TableType)+CrLfStr;
   \   00000004   3CB49FE5           LDR      R11,??MakeConfigString_1  ;; TabStr1
   \   00000008   3C649FE5           LDR      R6,??MakeConfigString_1+0x4  ;; CrLfStr
   \   0000000C   93DF4DE2           SUB      SP,SP,#+588
   \   00000010   0040A0E1           MOV      R4,R0
    121          	LocalString +=TabStr2+KeyWord(C_T_TABLEOFFSET)+FloatToAnsiString(TableOffset)+CrLfStr;
   \   00000014   34849FE5           LDR      R8,??MakeConfigString_1+0x8  ;; TabStr2
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000024   001094E5           LDR      R1,[R4, #+0]
   \   00000028   C4008DE2           ADD      R0,SP,#+196
   \   0000002C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000030   C4208DE2           ADD      R2,SP,#+196
   \   00000034   0B10A0E1           MOV      R1,R11
   \   00000038   A8008DE2           ADD      R0,SP,#+168
   \   0000003C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   A8108DE2           ADD      R1,SP,#+168
   \   00000048   8C008DE2           ADD      R0,SP,#+140
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   007090E5           LDR      R7,[R0, #+0]
   \   0000005C   8C108DE2           ADD      R1,SP,#+140
   \   00000060   0730A0E1           MOV      R3,R7
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     ??append,??append??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   8C008DE2           ADD      R0,SP,#+140
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   A8008DE2           ADD      R0,SP,#+168
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   C4008DE2           ADD      R0,SP,#+196
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   0330A0E3           MOV      R3,#+3
   \   000000A4   0720A0E3           MOV      R2,#+7
   \   000000A8   540F8DE2           ADD      R0,SP,#+336
   \   000000AC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000B0   9310A0E3           MOV      R1,#+147
   \   000000B4   501E81E3           ORR      R1,R1,#0x500
   \   000000B8   4D0F8DE2           ADD      R0,SP,#+308
   \   000000BC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C0   4D2F8DE2           ADD      R2,SP,#+308
   \   000000C4   0810A0E1           MOV      R1,R8
   \   000000C8   460F8DE2           ADD      R0,SP,#+280
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   542F8DE2           ADD      R2,SP,#+336
   \   000000D4   461F8DE2           ADD      R1,SP,#+280
   \   000000D8   FC008DE2           ADD      R0,SP,#+252
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   0620A0E1           MOV      R2,R6
   \   000000E4   FC108DE2           ADD      R1,SP,#+252
   \   000000E8   E0008DE2           ADD      R0,SP,#+224
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0730A0E1           MOV      R3,R7
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   E0108DE2           ADD      R1,SP,#+224
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   E0008DE2           ADD      R0,SP,#+224
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   FC008DE2           ADD      R0,SP,#+252
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   540F8DE2           ADD      R0,SP,#+336
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   460F8DE2           ADD      R0,SP,#+280
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
    122              // Only write if correction factor is set
    123              if ( CorrectionFactor != 1.0 ) {
   \   00000154   089094E5           LDR      R9,[R4, #+8]
   \   00000158   0900A0E1           MOV      R0,R9
   \   0000015C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000160   0020A0E1           MOV      R2,R0
   \   00000164   0130A0E1           MOV      R3,R1
   \   00000168   0000A0E3           MOV      R0,#+0
   \   0000016C   C015A0E3           MOV      R1,#+805306368
   \   00000170   FF1681E3           ORR      R1,R1,#0xFF00000
   \   00000174   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   2D00000A           BEQ      ??MakeConfigString_2
    124                  LocalString +=TabStr2+KeyWord(C_T_CORRECTION_FACTOR)+FloatToAnsiString(CorrectionFactor)+CrLfStr;
   \   00000180   0330A0E3           MOV      R3,#+3
   \   00000184   0720A0E3           MOV      R2,#+7
   \   00000188   0910A0E1           MOV      R1,R9
   \   0000018C   0D00A0E1           MOV      R0,SP
   \   00000190   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000194   A610A0E3           MOV      R1,#+166
   \   00000198   501E81E3           ORR      R1,R1,#0x500
   \   0000019C   1C008DE2           ADD      R0,SP,#+28
   \   000001A0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001A4   1C208DE2           ADD      R2,SP,#+28
   \   000001A8   0810A0E1           MOV      R1,R8
   \   000001AC   70008DE2           ADD      R0,SP,#+112
   \   000001B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001B4   0D20A0E1           MOV      R2,SP
   \   000001B8   70108DE2           ADD      R1,SP,#+112
   \   000001BC   54008DE2           ADD      R0,SP,#+84
   \   000001C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C4   0620A0E1           MOV      R2,R6
   \   000001C8   54108DE2           ADD      R1,SP,#+84
   \   000001CC   38008DE2           ADD      R0,SP,#+56
   \   000001D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001D4   0730A0E1           MOV      R3,R7
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   38108DE2           ADD      R1,SP,#+56
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   ........           _BLF     ??append,??append??rA
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   38008DE2           ADD      R0,SP,#+56
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   54008DE2           ADD      R0,SP,#+84
   \   00000204   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000208   0020A0E3           MOV      R2,#+0
   \   0000020C   0110A0E3           MOV      R1,#+1
   \   00000210   0D00A0E1           MOV      R0,SP
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   70008DE2           ADD      R0,SP,#+112
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   1C008DE2           ADD      R0,SP,#+28
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
    125              }
    126          
    127          	LocalString +=TabStr2+KeyWord(C_T_TABLE_START);
   \                     ??MakeConfigString_2:
   \   00000238   9D10A0E3           MOV      R1,#+157
   \   0000023C   501E81E3           ORR      R1,R1,#0x500
   \   00000240   620F8DE2           ADD      R0,SP,#+392
   \   00000244   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000248   622F8DE2           ADD      R2,SP,#+392
   \   0000024C   0810A0E1           MOV      R1,R8
   \   00000250   5B0F8DE2           ADD      R0,SP,#+364
   \   00000254   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000258   0730A0E1           MOV      R3,R7
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   5B1F8DE2           ADD      R1,SP,#+364
   \   00000264   0500A0E1           MOV      R0,R5
   \   00000268   ........           _BLF     ??append,??append??rA
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   5B0F8DE2           ADD      R0,SP,#+364
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   620F8DE2           ADD      R0,SP,#+392
   \   00000288   ........           _BLF     ??_Tidy,??_Tidy??rA
    128          	unsigned Size = Table.size();
    129          	for ( unsigned i=0; i<Table.size(); i++ ) {
   \   0000028C   0090A0E3           MOV      R9,#+0
   \   00000290   1F0000EA           B        ??MakeConfigString_3
    130          
    131          		LocalString +=CrLfStr+TabStr3;
   \                     ??MakeConfigString_4:
   \   00000294   B8219FE5           LDR      R2,??MakeConfigString_1+0xC  ;; TabStr3
   \   00000298   0610A0E1           MOV      R1,R6
   \   0000029C   0D00A0E1           MOV      R0,SP
   \   000002A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A4   0730A0E1           MOV      R3,R7
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0D10A0E1           MOV      R1,SP
   \   000002B0   0500A0E1           MOV      R0,R5
   \   000002B4   ........           _BLF     ??append,??append??rA
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   0D00A0E1           MOV      R0,SP
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    132          		LocalString.cat_sprintf("%10.3f %11.3f",Table[i].x,Table[i].y);
   \   000002C8   240094E5           LDR      R0,[R4, #+36]
   \   000002CC   89A180E0           ADD      R10,R0,R9, LSL #+3
   \   000002D0   04009AE5           LDR      R0,[R10, #+4]
    133          
    134          		/*
    135          			  float Lev = Table[i].x;
    136          			  float Vol = Table[i].y;
    137          	  LocalString +=CrLfStr+TabStr3;
    138          	  LocalString.cat_sprintf("%10.3f %10.1f",Lev,Vol);
    139          		*/
    140          	}
   \   000002D4   019089E2           ADD      R9,R9,#+1
   \   000002D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002DC   03002DE9           PUSH     {R0,R1}
   \   000002E0   00009AE5           LDR      R0,[R10, #+0]
   \   000002E4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002E8   68219FE5           LDR      R2,??MakeConfigString_1+0x10  ;; `?<Constant "%10.3f %11.3f">`
   \   000002EC   03002DE9           PUSH     {R0,R1}
   \   000002F0   2C108DE2           ADD      R1,SP,#+44
   \   000002F4   0800BDE8           POP      {R3}
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0110A0E3           MOV      R1,#+1
   \   00000308   28008DE2           ADD      R0,SP,#+40
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000310   0CD08DE2           ADD      SP,SP,#+12
   \                     ??MakeConfigString_3:
   \   00000314   240084E2           ADD      R0,R4,#+36
   \   00000318   041090E5           LDR      R1,[R0, #+4]
   \   0000031C   000090E5           LDR      R0,[R0, #+0]
   \   00000320   000041E0           SUB      R0,R1,R0
   \   00000324   A00159E1           CMP      R9,R0, LSR #+3
   \   00000328   D9FFFF3A           BCC      ??MakeConfigString_4
    141          	LocalString +=CrLfStr;
   \   0000032C   0730A0E1           MOV      R3,R7
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0610A0E1           MOV      R1,R6
   \   00000338   0500A0E1           MOV      R0,R5
   \   0000033C   ........           _BLF     ??append,??append??rA
    142          	LocalString +=TabStr2+KeyWord(C_T_TABLE_END)+CrLfStr;
   \   00000340   9E10A0E3           MOV      R1,#+158
   \   00000344   501E81E3           ORR      R1,R1,#0x500
   \   00000348   770F8DE2           ADD      R0,SP,#+476
   \   0000034C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000350   772F8DE2           ADD      R2,SP,#+476
   \   00000354   0810A0E1           MOV      R1,R8
   \   00000358   700F8DE2           ADD      R0,SP,#+448
   \   0000035C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000360   0620A0E1           MOV      R2,R6
   \   00000364   701F8DE2           ADD      R1,SP,#+448
   \   00000368   690F8DE2           ADD      R0,SP,#+420
   \   0000036C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000370   0730A0E1           MOV      R3,R7
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   691F8DE2           ADD      R1,SP,#+420
   \   0000037C   0500A0E1           MOV      R0,R5
   \   00000380   ........           _BLF     ??append,??append??rA
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   0110A0E3           MOV      R1,#+1
   \   0000038C   690F8DE2           ADD      R0,SP,#+420
   \   00000390   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0110A0E3           MOV      R1,#+1
   \   0000039C   700F8DE2           ADD      R0,SP,#+448
   \   000003A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A4   0020A0E3           MOV      R2,#+0
   \   000003A8   0110A0E3           MOV      R1,#+1
   \   000003AC   770F8DE2           ADD      R0,SP,#+476
   \   000003B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    143          	LocalString +=TabStr1+KeyWord(C_T_TABLE_OBJ_END)+CrLfStr;
   \   000003B4   A110A0E3           MOV      R1,#+161
   \   000003B8   501E81E3           ORR      R1,R1,#0x500
   \   000003BC   8C0F8DE2           ADD      R0,SP,#+560
   \   000003C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003C4   8C2F8DE2           ADD      R2,SP,#+560
   \   000003C8   0B10A0E1           MOV      R1,R11
   \   000003CC   850F8DE2           ADD      R0,SP,#+532
   \   000003D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D4   0620A0E1           MOV      R2,R6
   \   000003D8   851F8DE2           ADD      R1,SP,#+532
   \   000003DC   7E0F8DE2           ADD      R0,SP,#+504
   \   000003E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E4   0730A0E1           MOV      R3,R7
   \   000003E8   0020A0E3           MOV      R2,#+0
   \   000003EC   7E1F8DE2           ADD      R1,SP,#+504
   \   000003F0   0500A0E1           MOV      R0,R5
   \   000003F4   ........           _BLF     ??append,??append??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   7E0F8DE2           ADD      R0,SP,#+504
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   850F8DE2           ADD      R0,SP,#+532
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   8C0F8DE2           ADD      R0,SP,#+560
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
    144          	LocalString += CrLfStr;
   \   00000428   0730A0E1           MOV      R3,R7
   \   0000042C   0020A0E3           MOV      R2,#+0
   \   00000430   0610A0E1           MOV      R1,R6
   \   00000434   0500A0E1           MOV      R0,R5
   \   00000438   ........           _BLF     ??append,??append??rA
    145          	return(LocalString);
   \   0000043C   93DF8DE2           ADD      SP,SP,#+588
   \   00000440   F04FBDE8           POP      {R4-R11,LR}
   \   00000444   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_1:
   \   00000448   ........           DC32     TabStr1
   \   0000044C   ........           DC32     CrLfStr
   \   00000450   ........           DC32     TabStr2
   \   00000454   ........           DC32     TabStr3
   \   00000458   ........           DC32     `?<Constant "%10.3f %11.3f">`
    146          }
    147          
    148          //---------------------------------------------------------------------------
    149          

   \                                 In segment CODE, align 4, keep-with-next
    150          bool TSNTable1Degree::LoadConfigString(TSNConfigString &ConfigString, PRogramObjectBase *PROPtr)
    151          {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    152          	bool NoError = true;
    153          	int ErrorLine=0;
    154          	int Key;
    155          	AnsiString PROName = "Level table";
   \   00000004   5C929FE5           LDR      R9,??LoadConfigString_2+0x4  ;; `?<Constant "Level table">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0180A0E3           MOV      R8,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0910A0E1           MOV      R1,R9
   \   00000028   3C008DE2           ADD      R0,SP,#+60
   \   0000002C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
    156          	if ( PROPtr )	PROName +=(AnsiString)", for "+PROPtr->Name;
   \   00000030   000056E3           CMP      R6,#+0
   \   00000034   1400000A           BEQ      ??LoadConfigString_3
   \   00000038   0C1089E2           ADD      R1,R9,#+12
   \   0000003C   20008DE2           ADD      R0,SP,#+32
   \   00000040   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   442086E2           ADD      R2,R6,#+68
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   04108DE2           ADD      R1,SP,#+4
   \   00000064   3C008DE2           ADD      R0,SP,#+60
   \   00000068   ........           _BLF     ??append,??append??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0810A0E1           MOV      R1,R8
   \   00000084   20008DE2           ADD      R0,SP,#+32
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
    157          	PROName += ":\n";
   \                     ??LoadConfigString_3:
   \   0000008C   746F8FE2           ADR      R6,??LoadConfigString_2  ;; ":\n"
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   ........           _BLF     strlen,??strlen??rA
   \   00000098   0020A0E1           MOV      R2,R0
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   3C008DE2           ADD      R0,SP,#+60
   \   000000A4   ........           _BLF     ??append_1,??append??rA_1
   \   000000A8   006068E2           RSB      R6,R8,#+0
    158          	do {
    159          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   000000AC   0030A0E3           MOV      R3,#+0
   \   000000B0   0D20A0E1           MOV      R2,SP
   \   000000B4   20108DE2           ADD      R1,SP,#+32
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           _BLF     ??NextWord,??NextWord??rA
    160          		if ( ErrorLine ) {
   \   000000C0   00009DE5           LDR      R0,[SP, #+0]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0B00000A           BEQ      ??LoadConfigString_5
    161          			if ( ErrorLine != EOF ) {
   \   000000CC   060050E1           CMP      R0,R6
   \   000000D0   4B00000A           BEQ      ??LoadConfigString_6
    162          				GiveConfigWarning(PROName,ErrorLine);
   \   000000D4   3C108DE2           ADD      R1,SP,#+60
   \   000000D8   04008DE2           ADD      R0,SP,#+4
   \   000000DC   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000E0   00109DE5           LDR      R1,[SP, #+0]
   \   000000E4   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F8   410000EA           B        ??LoadConfigString_6
    163          			}
    164          		} else {
    165          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   000000FC   20108DE2           ADD      R1,SP,#+32
   \   00000100   04008DE2           ADD      R0,SP,#+4
   \   00000104   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000108   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000010C   0070A0E1           MOV      R7,R0
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   04008DE2           ADD      R0,SP,#+4
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
    166          			switch ( Key ) {
   \   00000120   930047E2           SUB      R0,R7,#+147
   \   00000124   500E40E2           SUB      R0,R0,#+1280
   \   00000128   130050E3           CMP      R0,#+19
   \   0000012C   0700008A           BHI      ??LoadConfigString_8
   \   00000130   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000134   0010D1E7           LDRB     R1,[R1, R0]
   \   00000138   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   0000013C   16040404           DC8      +22,+4,+4,+4
   \   00000140   04040404           DC8      +4,+4,+4,+4
   \   00000144   04042D31           DC8      +4,+4,+45,+49
   \   00000148   04043104           DC8      +4,+4,+49,+4
   \   0000014C   04040423           DC8      +4,+4,+4,+35
    167          			default:
    168          				GiveConfigWarning(PROName,InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_8:
   \   00000150   20108DE2           ADD      R1,SP,#+32
   \   00000154   58008DE2           ADD      R0,SP,#+88
   \   00000158   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000015C   0090A0E1           MOV      R9,R0
   \   00000160   3C108DE2           ADD      R1,SP,#+60
   \   00000164   74008DE2           ADD      R0,SP,#+116
   \   00000168   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000016C   1C2095E5           LDR      R2,[R5, #+28]
   \   00000170   0910A0E1           MOV      R1,R9
   \   00000174   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   58008DE2           ADD      R0,SP,#+88
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   74008DE2           ADD      R0,SP,#+116
   \   00000194   D6FFFFEA           B        ??LoadConfigString_7
    169          				break;
    170          			case C_T_TABLE_END    :
    171          			case C_T_TABLE_OBJ_END:
    172          				break;
    173          			case C_T_TABLEOFFSET:
    174          				TableOffset = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_9:
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0D10A0E1           MOV      R1,SP
   \   000001A0   0500A0E1           MOV      R0,R5
   \   000001A4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001A8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001AC   040084E5           STR      R0,[R4, #+4]
    175          				NoError = !ErrorLine;
   \   000001B0   00009DE5           LDR      R0,[SP, #+0]
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   0100001A           BNE      ??LoadConfigString_10
   \                     ??LoadConfigString_11:
   \   000001BC   0180A0E3           MOV      R8,#+1
   \   000001C0   0F0000EA           B        ??LoadConfigString_6
   \                     ??LoadConfigString_10:
   \   000001C4   0080A0E3           MOV      R8,#+0
   \   000001C8   0D0000EA           B        ??LoadConfigString_6
    176          				break;
    177          			case C_T_CORRECTION_FACTOR:
    178          				CorrectionFactor = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_12:
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0D10A0E1           MOV      R1,SP
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001DC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001E0   080084E5           STR      R0,[R4, #+8]
    179          				NoError = !ErrorLine;
   \   000001E4   00009DE5           LDR      R0,[SP, #+0]
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   F4FFFF1A           BNE      ??LoadConfigString_10
   \   000001F0   F1FFFFEA           B        ??LoadConfigString_11
    180           				break;
    181          			case C_T_TABLE_START:
    182          				ReadTable(ConfigString, ErrorLine);
   \                     ??LoadConfigString_13:
   \   000001F4   0D20A0E1           MOV      R2,SP
   \   000001F8   0510A0E1           MOV      R1,R5
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       ??ReadTable
    183          				break;
    184          			}
    185          		}
    186          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_T_TABLE_OBJ_END ) );
   \                     ??LoadConfigString_6:
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   20008DE2           ADD      R0,SP,#+32
   \   00000210   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000214   000058E3           CMP      R8,#+0
   \   00000218   0A00000A           BEQ      ??LoadConfigString_14
   \   0000021C   00009DE5           LDR      R0,[SP, #+0]
   \   00000220   060050E1           CMP      R0,R6
   \   00000224   A100A013           MOVNE    R0,#+161
   \   00000228   500E8013           ORRNE    R0,R0,#0x500
   \   0000022C   00005711           CMPNE    R7,R0
   \   00000230   9DFFFF1A           BNE      ??LoadConfigString_4
    187          	if ( NoError ) {
    188          		CheckTable();
   \   00000234   0C1094E5           LDR      R1,[R4, #+12]
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   101091E5           LDR      R1,[R1, #+16]
   \   00000240   0FE0A0E1           MOV      LR,PC
   \   00000244   11FF2FE1           BX       R1
    189          	}
    190          	return(NoError);
   \                     ??LoadConfigString_14:
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   3C008DE2           ADD      R0,SP,#+60
   \   00000254   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000258   0800A0E1           MOV      R0,R8
   \   0000025C   90D08DE2           ADD      SP,SP,#+144
   \   00000260   ........           B        ?Subroutine29
   \                     ??LoadConfigString_2:
   \   00000264   3A0A0000           DC8      ":\n",+0
   \   00000268   ........           DC32     `?<Constant "Level table">`
    191          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    192          
    193          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    194          int TSNTable1Degree::Compare(const void *Entry1, const void *Entry2) {
   \                     ??Compare:
   \   00000000   00402DE9           PUSH     {LR}
    195              float Level1 = ((Entry*)Entry1)->x;
    196              float Level2 = ((Entry*)Entry2)->x;
    197              return (Level1 < Level2);
   \   00000004   000091E5           LDR      R0,[R1, #+0]
   \   00000008   001092E5           LDR      R1,[R2, #+0]
   \   0000000C   ........           _BLF     __fLess,??__fLess??rA
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100A013           MOVNE    R0,#+1
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    198          }
    199          
    200          

   \                                 In segment CODE, align 4, keep-with-next
    201          float TSNTable1Degree::Calc_Y(float x)
    202          {
   \                     ??Calc_Y:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
    203          	unsigned Entries = Table.size();
   \   0000000C   240085E2           ADD      R0,R5,#+36
   \   00000010   041090E5           LDR      R1,[R0, #+4]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000041E0           SUB      R0,R1,R0
   \   0000001C   A061A0E1           LSR      R6,R0,#+3
    204          	if ( Entries == 1 ) {
   \   00000020   010056E3           CMP      R6,#+1
    205          		return(MaxY);
   \   00000024   18009505           LDREQ    R0,[R5, #+24]
   \   00000028   2100000A           BEQ      ??Calc_Y_1
    206          	}
    207          
    208          	x -= TableOffset;
   \   0000002C   041095E5           LDR      R1,[R5, #+4]
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
    209          	if ( x < Table.front().x ) return Table.front().y; // Don't extrapolate
   \   00000038   247095E5           LDR      R7,[R5, #+36]
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   001097E5           LDR      R1,[R7, #+0]
   \   00000044   ........           _BLF     __fLess,??__fLess??rA
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   04009715           LDRNE    R0,[R7, #+4]
   \   00000050   1700001A           BNE      ??Calc_Y_1
    210          
    211           	unsigned i=1;
   \   00000054   0180A0E3           MOV      R8,#+1
   \   00000058   000000EA           B        ??Calc_Y_2
    212          	while ( ( i < Entries ) && ( x > Table[i].x ) )	i++;
   \                     ??Calc_Y_3:
   \   0000005C   018088E2           ADD      R8,R8,#+1
   \                     ??Calc_Y_2:
   \   00000060   889187E0           ADD      R9,R7,R8, LSL #+3
   \   00000064   060058E1           CMP      R8,R6
   \   00000068   0400002A           BCS      ??Calc_Y_4
   \   0000006C   000099E5           LDR      R0,[R9, #+0]
   \   00000070   0410A0E1           MOV      R1,R4
   \   00000074   ........           _BLF     __fLess,??__fLess??rA
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   F6FFFF1A           BNE      ??Calc_Y_3
    213          
    214          	if ( i > Entries-1 )	return(Table.back().y);
   \                     ??Calc_Y_4:
   \   00000080   010046E2           SUB      R0,R6,#+1
   \   00000084   080050E1           CMP      R0,R8
   \   00000088   28009535           LDRCC    R0,[R5, #+40]
   \   0000008C   04001035           LDRCC    R0,[R0, #-4]
   \   00000090   0700003A           BCC      ??Calc_Y_1
   \   00000094   080049E2           SUB      R0,R9,#+8
   \   00000098   10002DE9           PUSH     {R4}
   \   0000009C   043099E5           LDR      R3,[R9, #+4]
   \   000000A0   042090E5           LDR      R2,[R0, #+4]
   \   000000A4   001099E5           LDR      R1,[R9, #+0]
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
    215          	return IntPol1stDeg(Table[i-1].x,Table[i].x,Table[i-1].y,Table[i].y,x);
   \   000000AC   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000B0   04D08DE2           ADD      SP,SP,#+4
   \                     ??Calc_Y_1:
   \   000000B4                      REQUIRE ?Subroutine29
   \   000000B4                      ;; // Fall through to label ?Subroutine29
    216          }
    217          
    218          /*
    219          	 Integration of function fx by Simpson's rule:
    220          	 A = S/3*[(F+L)+4E+2RO]
    221          	 F is the first point to use, L the last.
    222          	 A odd number of points must be used.
    223          */
    224          
    225          

   \                                 In segment CODE, align 4, keep-with-next
    226          float TSNTable1Degree::Area(float First, float Last, int m )
    227          {
   \                     ??Area:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0190A0E1           MOV      R9,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
    228          	float t, h,X = First;
    229          	int   i;
    230          
    231          	if ( m & 1 ) m++;
   \   00000014   010017E3           TST      R7,#0x1
   \   00000018   01708712           ADDNE    R7,R7,#+1
    232          	h = ( Last-First)/m;
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   ........           _BLF     __fSub,??__fSub??rA
   \   00000024   0080A0E1           MOV      R8,R0
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0800A0E1           MOV      R0,R8
   \   00000038   ........           _BLF     __fDiv,??__fDiv??rA
    233          
    234          	t = Calc_Y(First) - Calc_Y(Last);
   \   0000003C   0C2094E5           LDR      R2,[R4, #+12]
   \   00000040   0080A0E1           MOV      R8,R0
   \   00000044   142092E5           LDR      R2,[R2, #+20]
   \   00000048   0910A0E1           MOV      R1,R9
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   12FF2FE1           BX       R2
   \   00000058   0C2094E5           LDR      R2,[R4, #+12]
   \   0000005C   0950A0E1           MOV      R5,R9
   \   00000060   142092E5           LDR      R2,[R2, #+20]
   \   00000064   0090A0E1           MOV      R9,R0
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   0FE0A0E1           MOV      LR,PC
   \   00000074   12FF2FE1           BX       R2
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   0900A0E1           MOV      R0,R9
   \   00000080   ........           _BLF     __fSub,??__fSub??rA
   \   00000084   0060A0E1           MOV      R6,R0
    235          	/* 4E+2RO */
    236          	for ( i=1; i <= m; i++ ) {
   \   00000088   0190A0E3           MOV      R9,#+1
   \   0000008C   150000EA           B        ??Area_1
    237          		X += h;
   \                     ??Area_2:
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   0810A0E1           MOV      R1,R8
   \   00000098   ........           _BLF     __fAdd,??__fAdd??rA
    238          		t += Calc_Y(X)*(1+( i & 1 ))*2;	/*4 for odd terms, *2 for remaining even terms */
   \   0000009C   0C2094E5           LDR      R2,[R4, #+12]
   \   000000A0   0050A0E1           MOV      R5,R0
   \   000000A4   142092E5           LDR      R2,[R2, #+20]
   \   000000A8   0510A0E1           MOV      R1,R5
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   12FF2FE1           BX       R2
   \   000000B8   00A0A0E1           MOV      R10,R0
   \   000000BC   010009E2           AND      R0,R9,#0x1
   \   000000C0   010080E2           ADD      R0,R0,#+1
   \   000000C4   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000C8   0A10A0E1           MOV      R1,R10
   \   000000CC   ........           _BLF     __fMul,??__fMul??rA
   \   000000D0   4014A0E3           MOV      R1,#+1073741824
   \   000000D4   ........           _BLF     __fMul,??__fMul??rA
   \   000000D8   0610A0E1           MOV      R1,R6
   \   000000DC   ........           _BLF     __fAdd,??__fAdd??rA
   \   000000E0   0060A0E1           MOV      R6,R0
    239          	}
   \   000000E4   019089E2           ADD      R9,R9,#+1
   \                     ??Area_1:
   \   000000E8   090057E1           CMP      R7,R9
   \   000000EC   E7FFFFAA           BGE      ??Area_2
    240          	/*	    s/3    F      +   L+ 4E+2RO */
    241          	return( h/3.0 * t);
   \   000000F0   0800A0E1           MOV      R0,R8
   \   000000F4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   4034A0E3           MOV      R3,#+1073741824
   \   00000100   803A83E3           ORR      R3,R3,#0x80000
   \   00000104   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000108   0040A0E1           MOV      R4,R0
   \   0000010C   0150A0E1           MOV      R5,R1
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000118   0420A0E1           MOV      R2,R4
   \   0000011C   0530A0E1           MOV      R3,R5
   \   00000120   ........           _BLF     __dMul,??__dMul??rA
   \   00000124   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000128   F047BDE8           POP      {R4-R10,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
    242          }
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          float TSNTable1Degree::Calc_YPercent(float x)
    245          {
   \                     ??Calc_YPercent:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    246          	float YPercent;
    247          	if ( MaxY ) {
   \   0000000C   181094E5           LDR      R1,[R4, #+24]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0D00000A           BEQ      ??Calc_YPercent_1
    248          		YPercent = Calc_Y(x)/MaxY*100.0;
   \   00000020   0C2094E5           LDR      R2,[R4, #+12]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   142092E5           LDR      R2,[R2, #+20]
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0FE0A0E1           MOV      LR,PC
   \   00000034   12FF2FE1           BX       R2
   \   00000038   181094E5           LDR      R1,[R4, #+24]
   \   0000003C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000040   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   4034A0E3           MOV      R3,#+1073741824
   \   0000004C   593883E3           ORR      R3,R3,#0x590000
   \   00000050   ........           _BLF     __dMul,??__dMul??rA
   \   00000054   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    249          	} else {
    250          		YPercent = 0.0;
    251          	}
    252          	return(YPercent);
   \                     ??Calc_YPercent_1:
   \   00000058   ........           B        ?Subroutine26
    253          }
    254          

   \                                 In segment CODE, align 4, keep-with-next
    255          float TSNTable1Degree::Calc_X(float y)
    256          {
   \                     ??Calc_X:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    257          	if ( Table.empty() ) return 0.0;
   \   0000000C   240084E2           ADD      R0,R4,#+36
   \   00000010   ........           _BLF     ??empty,??empty??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000A013           MOVNE    R0,#+0
   \   0000001C   3F00001A           BNE      ??Calc_X_1
    258          	unsigned Entries = Table.size();
   \   00000020   240084E2           ADD      R0,R4,#+36
   \   00000024   041090E5           LDR      R1,[R0, #+4]
   \   00000028   000090E5           LDR      R0,[R0, #+0]
    259          	unsigned  i=0;
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   000041E0           SUB      R0,R1,R0
   \   00000034   A081A0E1           LSR      R8,R0,#+3
    260          	float RetVal;
    261          	if ( Entries == 1 ) {
   \   00000038   010058E3           CMP      R8,#+1
   \   0000003C   0300001A           BNE      ??Calc_X_2
    262          		return(MaxX+TableOffset);
   \   00000040   141094E5           LDR      R1,[R4, #+20]
   \   00000044   040094E5           LDR      R0,[R4, #+4]
   \   00000048   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000004C   330000EA           B        ??Calc_X_1
    263          	}
    264          	if ( Table[0].y > Table[1].y ) {
   \                     ??Calc_X_2:
   \   00000050   246094E5           LDR      R6,[R4, #+36]
   \   00000054   0C0096E5           LDR      R0,[R6, #+12]
   \   00000058   041096E5           LDR      R1,[R6, #+4]
   \   0000005C   ........           _BLF     __fLess,??__fLess??rA
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0A00000A           BEQ      ??Calc_X_3
    265          		while ( ( i < Entries ) && ( Table[i].y > y ) ) i++;
   \                     ??Calc_X_4:
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   1000002A           BCS      ??Calc_X_5
   \   00000070   871186E0           ADD      R1,R6,R7, LSL #+3
   \   00000074   041091E5           LDR      R1,[R1, #+4]
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     __fLess,??__fLess??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0A00000A           BEQ      ??Calc_X_5
   \   00000088   017087E2           ADD      R7,R7,#+1
   \   0000008C   F5FFFFEA           B        ??Calc_X_4
    266          	} else {
    267          		while ( ( i < Entries ) && ( Table[i].y < y ) )	i++;
   \                     ??Calc_X_6:
   \   00000090   017087E2           ADD      R7,R7,#+1
   \                     ??Calc_X_3:
   \   00000094   080057E1           CMP      R7,R8
   \   00000098   0500002A           BCS      ??Calc_X_5
   \   0000009C   870186E0           ADD      R0,R6,R7, LSL #+3
   \   000000A0   040090E5           LDR      R0,[R0, #+4]
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   ........           _BLF     __fLess,??__fLess??rA
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   F6FFFF1A           BNE      ??Calc_X_6
    268          	}
    269          
    270          	if ( i > Entries-1 ) {
   \                     ??Calc_X_5:
   \   000000B4   011048E2           SUB      R1,R8,#+1
   \   000000B8   070051E1           CMP      R1,R7
    271          		RetVal = Table.back().x;
   \   000000BC   28109435           LDRCC    R1,[R4, #+40]
   \   000000C0   0700E0E3           MVN      R0,#+7
   \   000000C4   01009037           LDRCC    R0,[R0, +R1]
   \   000000C8   0A00003A           BCC      ??Calc_X_7
    272          	} else {
    273          		if ( !i )	i++;
   \   000000CC   000057E3           CMP      R7,#+0
   \   000000D0   0170A003           MOVEQ    R7,#+1
    274          		RetVal = IntPol1stDeg(Table[i-1].y,Table[i].y,Table[i-1].x,Table[i].x,y);
   \   000000D4   871186E0           ADD      R1,R6,R7, LSL #+3
   \   000000D8   010080E0           ADD      R0,R0,R1
   \   000000DC   20002DE9           PUSH     {R5}
   \   000000E0   003091E5           LDR      R3,[R1, #+0]
   \   000000E4   002090E5           LDR      R2,[R0, #+0]
   \   000000E8   041091E5           LDR      R1,[R1, #+4]
   \   000000EC   040090E5           LDR      R0,[R0, #+4]
   \   000000F0   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000F4   04D08DE2           ADD      SP,SP,#+4
    275          	}
    276          	RetVal += TableOffset;
   \                     ??Calc_X_7:
   \   000000F8   041094E5           LDR      R1,[R4, #+4]
   \   000000FC   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000100   0040A0E1           MOV      R4,R0
    277          	if ( RetVal <= 0.0 ) {
   \   00000104   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000108   0120A0E3           MOV      R2,#+1
   \   0000010C   0030A0E3           MOV      R3,#+0
   \   00000110   ........           _BLF     __dLess,??__dLess??rA
   \   00000114   000050E3           CMP      R0,#+0
    278          		RetVal = 0.0;
   \   00000118   0040A013           MOVNE    R4,#+0
    279          	}
    280          	return(RetVal);
   \   0000011C   0400A0E1           MOV      R0,R4
   \                     ??Calc_X_1:
   \   00000120                      REQUIRE ?Subroutine28
   \   00000120                      ;; // Fall through to label ?Subroutine28
    281          }
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          float TSNTable1Degree::Calc_XPercent(float y)
    284          {
   \                     ??Calc_XPercent:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    285          	y *= MaxY/100.0;
    286          	return(Calc_X(y));
   \   00000008   180097E5           LDR      R0,[R7, #+24]
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   4034A0E3           MOV      R3,#+1073741824
   \   0000001C   593883E3           ORR      R3,R3,#0x590000
   \   00000020   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   0150A0E1           MOV      R5,R1
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000034   0420A0E1           MOV      R2,R4
   \   00000038   0530A0E1           MOV      R3,R5
   \   0000003C   ........           _BLF     __dMul,??__dMul??rA
   \   00000040   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000044   0C2097E5           LDR      R2,[R7, #+12]
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   182092E5           LDR      R2,[R2, #+24]
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   12FF2FE1           BX       R2
   \   0000005C                      REQUIRE ?Subroutine27
   \   0000005C                      ;; // Fall through to label ?Subroutine27
    287          }
    288          

   \                                 In segment CODE, align 4, keep-with-next
    289          bool TSNTable1Degree::EqualYInTable(unsigned Index, float y)
    290          {
   \                     ??EqualYInTable:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    291          	bool EqualsFound = false;
   \   00000010   0070A0E3           MOV      R7,#+0
    292          	if ( !Table.empty() ) {
   \   00000014   240084E2           ADD      R0,R4,#+36
   \   00000018   ........           _BLF     ??empty,??empty??rA
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1300001A           BNE      ??EqualYInTable_1
    293          		unsigned Entries = Table.size();
   \   00000024   240084E2           ADD      R0,R4,#+36
   \   00000028   041090E5           LDR      R1,[R0, #+4]
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
    294          		for ( unsigned i=0; !EqualsFound && i < Entries; i++ ) {
   \   00000030   0090A0E3           MOV      R9,#+0
   \   00000034   000041E0           SUB      R0,R1,R0
   \   00000038   A081A0E1           LSR      R8,R0,#+3
   \                     ??EqualYInTable_2:
   \   0000003C   080059E1           CMP      R9,R8
   \   00000040   0B00002A           BCS      ??EqualYInTable_1
    295          			if (i!=Index) {
   \   00000044   050059E1           CMP      R9,R5
   \   00000048   0600000A           BEQ      ??EqualYInTable_3
    296          				EqualsFound = bool(Table[i].y == y);
   \   0000004C   240094E5           LDR      R0,[R4, #+36]
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   890180E0           ADD      R0,R0,R9, LSL #+3
   \   00000058   040090E5           LDR      R0,[R0, #+4]
   \   0000005C   ........           _BLF     __fEqual,??__fEqual??rA
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0170A013           MOVNE    R7,#+1
    297          			}
    298          		}
   \                     ??EqualYInTable_3:
   \   00000068   019089E2           ADD      R9,R9,#+1
   \   0000006C   000057E3           CMP      R7,#+0
   \   00000070   F1FFFF0A           BEQ      ??EqualYInTable_2
    299          	}
    300          	return EqualsFound;
   \                     ??EqualYInTable_1:
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   ........           B        ?Subroutine29
    301          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%10.3f %11.3f">`:
   \   00000000   2531302E3366       DC8 "%10.3f %11.3f"
   \              202531312E33
   \              6600        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Level table">`:
   \   00000000   4C6576656C20       DC8 "Level table"
   \              7461626C6500
   \   0000000C   2C20666F7220       DC8 ", for "
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TSNTable1Degree::delete ~TSNTable1Degree(TSNTable1Degree *)
   \                     `??delete ~TSNTable1Degree`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TSNTable1Degree_1`
   \   0000000C   ........           BL       `?~TSNTable1Degree`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TSNTable1Degree_1`:
   \   00000018   ........           B        ?Subroutine24

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable1Degree &TSNTable1Degree::new TSNTable1Degree(int, TSNConfigString &, int &)
   \                     `??new TSNTable1Degree`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   3000A0E3           MOV      R0,#+48
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new TSNTable1Degree_3`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??TSNTable1Degree_1
   \                     `??new TSNTable1Degree_3`:
   \   00000030   ........           B        ?Subroutine25

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable1Degree &TSNTable1Degree::new TSNTable1Degree(int, vector<TSNTable1Degree::Entry>)
   \                     `??new TSNTable1Degree_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3000A0E3           MOV      R0,#+48
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new TSNTable1Degree_4`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??TSNTable1Degree_2
   \                     `??new TSNTable1Degree_4`:
   \   00000028   ........           B        ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable1Degree &TSNTable1Degree::new TSNTable1Degree(int)
   \                     `??new TSNTable1Degree_2`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   3000A0E3           MOV      R0,#+48
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new TSNTable1Degree_5`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??TSNTable1Degree
   \                     `??new TSNTable1Degree_5`:
   \   00000020                      REQUIRE ?Subroutine24
   \   00000020                      ;; // Fall through to label ?Subroutine24

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos
    302          
    303          
    304          
    305          
    306          
    307          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     TSNTable1Degree::Area(float, float, int)
                                       32
     TSNTable1Degree::Calc_X(float)    28
     TSNTable1Degree::Calc_XPercent(float)
                                       20
     TSNTable1Degree::Calc_Y(float)    32
     TSNTable1Degree::Calc_YPercent(float)
                                       12
     TSNTable1Degree::CheckTable()     24
     TSNTable1Degree::Clear()           8
     TSNTable1Degree::Compare(void const *, void const *)
                                        4
     TSNTable1Degree::EqualYInTable(unsigned int, float)
                                       28
     TSNTable1Degree::FindMinMax()     20
     TSNTable1Degree::Initialize()      0
     TSNTable1Degree::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                      172
     TSNTable1Degree::MakeConfigString(int)
                                      640
     TSNTable1Degree::NewValue(float, float)
                                       12
     TSNTable1Degree::ReadTable(TSNConfigString &, int &)
                                       36
     TSNTable1Degree::TSNTable1Degree(int)
                                        8
     TSNTable1Degree::TSNTable1Degree(int, TSNConfigString &, int &)
                                       16
     TSNTable1Degree::TSNTable1Degree(int, vector<TSNTable1Degree::Entry>)
                                       12
     TSNTable1Degree::delete ~TSNTable1Degree(TSNTable1Degree *)
                                        8
     TSNTable1Degree::new TSNTable1Degree(int)
                                        8
     TSNTable1Degree::new TSNTable1Degree(int, TSNConfigString &, int &)
                                       16
     TSNTable1Degree::new TSNTable1Degree(int, vector<TSNTable1Degree::Entry>)
                                       12
     TSNTable1Degree::~TSNTable1Degree()
                                       12
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
                                       20
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Insert(TSNTable1Degree::Entry *, TSNTable1Degree::Entry const &)
                                       20
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Make_room(TSNTable1Degree::Entry *, unsigned int)
                                       32
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Push_back0(TSNTable1Degree::Entry)
                                       16
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48
     reverse(TSNTable1Degree::Entry *, TSNTable1Degree::Entry *)
                                        8
     vector<TSNTable1Degree::Entry>::empty() const
                                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     reverse(TSNTable1Degree::Entry *, TSNTable1Degree::Entry *)
                                      44
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy0()
                                      36
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
                                     224
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Insert(TSNTable1Degree::Entry *, TSNTable1Degree::Entry const &)
                                      72
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Make_room(TSNTable1Degree::Entry *, unsigned int)
                                     232
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Push_back0(TSNTable1Degree::Entry)
                                      72
     vector<TSNTable1Degree::Entry>::empty() const
                                      32
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     ?Subroutine24                     8
     TSNTable1Degree::TSNTable1Degree(int)
                                      44
     TSNTable1Degree::TSNTable1Degree(int, TSNConfigString &, int &)
                                      64
     ?Subroutine25                     8
     TSNTable1Degree::TSNTable1Degree(int, vector<TSNTable1Degree::Entry>)
                                      56
     ?Subroutine26                     8
     TSNTable1Degree::Initialize()    28
     TSNTable1Degree::FindMinMax()   188
     ?Subroutine27                     8
     TSNTable1Degree::Clear()         28
     TSNTable1Degree::NewValue(float, float)
                                      48
     TSNTable1Degree::ReadTable(TSNConfigString &, int &)
                                     224
     TSNTable1Degree::CheckTable()   248
     ?Subroutine28                     8
     TSNTable1Degree::~TSNTable1Degree()
                                      48
     TSNTable1Degree::MakeConfigString(int)
                                    1116
     TSNTable1Degree::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                     620
     ?Subroutine29                     8
     TSNTable1Degree::Compare(void const *, void const *)
                                      32
     TSNTable1Degree::Calc_Y(float)  180
     TSNTable1Degree::Area(float, float, int)
                                     304
     TSNTable1Degree::Calc_YPercent(float)
                                      92
     TSNTable1Degree::Calc_X(float)  288
     TSNTable1Degree::Calc_XPercent(float)
                                      92
     TSNTable1Degree::EqualYInTable(unsigned int, float)
                                     124
     ?<Constant "%10.3f %11.3f">      16
     ?<Constant "Level table">        20
     ?<Constant ":\n">                 3
     __sti__routine()                  4
     TSNTable1Degree::delete ~TSNTable1Degree(TSNTable1Degree *)
                                      28
     TSNTable1Degree::new TSNTable1Degree(int, TSNConfigString &, int &)
                                      52
     TSNTable1Degree::new TSNTable1Degree(int, vector<TSNTable1Degree::Entry>)
                                      44
     TSNTable1Degree::new TSNTable1Degree(int)
                                      32
     ??DataTable3                      4
     ??DataTable5                      4
      Others                         692

 
 5 652 bytes in segment CODE
    67 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 4 044 bytes of CODE  memory (+ 1 612 bytes shared)
    67 bytes of CONST memory

Errors: none
Warnings: none
