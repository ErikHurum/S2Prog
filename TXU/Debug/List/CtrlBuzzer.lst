##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\CtrlBuzzer.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\CtrlBuzzer.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\CtrlBuzzer.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\CtrlBuzzer.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\CtrlBuzzer.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          CtrlBuzzer::CtrlBuzzer(void):PROControl(RELAY_BUZZER)
   \                     ??CtrlBuzzer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     10          {
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??PROControl,??PROControl??rA
   \   00000010   0C009FE5           LDR      R0,??CtrlBuzzer_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     11          	//DeActivate();
     12          }
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??CtrlBuzzer_1:
   \   00000024   ........           DC32     ??__vtbl
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          CtrlBuzzer::~CtrlBuzzer(void)
     15          {
   \                     `?~CtrlBuzzer`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~CtrlBuzzer_1`
     16          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROControl`,`?~PROControl??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~CtrlBuzzer_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~CtrlBuzzer_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     17          //---------------------------------------------------------------------------
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          void CtrlBuzzer::Update(char Mode)
     20          {
   \                     ??Update:
   \   00000000   70412DE9           PUSH     {R4-R6,R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
     21          #ifdef S2TXU
     22          	OS_Use(&CtrlSema);
   \   0000000C   4B5FA0E3           MOV      R5,#+300
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
     23          	switch ( Mode ) {
   \   00000018   020056E3           CMP      R6,#+2
   \   0000001C   5000008A           BHI      ??Update_2
   \   00000020   010F8FE2           ADR      R0,??Update_1
   \   00000024   0600D0E7           LDRB     R0,[R0, R6]
   \   00000028   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Update_1:
   \   0000002C   10000C00           DC8      +16,+0,+12,+0
     24          		case BUZZER_TEST_ON:
     25          			Activate(R_ACTIVATE0,RELAY_MSG_ON,0,0);
   \                     ??Update_3:
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   A46094E5           LDR      R6,[R4, #+164]
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   606096E5           LDR      R6,[R6, #+96]
   \   00000044   0120A0E3           MOV      R2,#+1
   \   00000048   0210A0E1           MOV      R1,R2
   \                     ??Update_4:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   16FF2FE1           BX       R6
   \   00000058   04D08DE2           ADD      SP,SP,#+4
   \   0000005C   400000EA           B        ??Update_2
     26          			break;
     27          		case BUZZER_TEST_OFF:
     28          			DeActivate();
   \                     ??Update_5:
   \   00000060   A41094E5           LDR      R1,[R4, #+164]
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   641091E5           LDR      R1,[R1, #+100]
   \   0000006C   3A0000EA           B        ??Update_6
     29          			break;
     30          		case BUZZER_NO_TEST:
     31          			if ( !AlarmBasic::AlarmSilence ) {
   \                     ??Update_7:
   \   00000070   FC109FE5           LDR      R1,??Update_8    ;; ??AlarmSilence
   \   00000074   A4C094E5           LDR      R12,[R4, #+164]
   \   00000078   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000007C   4A0FA0E3           MOV      R0,#+296
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   2F00001A           BNE      ??Update_9
     32          				if ( !PROWaterIngress::AllObjVector.empty() ) {
   \   00000088   E8209FE5           LDR      R2,??Update_8+0x4  ;; ??AllObjVector
   \   0000008C   041092E5           LDR      R1,[R2, #+4]
   \   00000090   002092E5           LDR      R2,[R2, #+0]
   \   00000094   023041E0           SUB      R3,R1,R2
   \   00000098   2331B0E1           LSRS     R3,R3,#+2
   \   0000009C   2600000A           BEQ      ??Update_10
     33          					bool MainActive = false;
   \   000000A0   0060A0E3           MOV      R6,#+0
   \   000000A4   00E0A0E3           MOV      LR,#+0
     34          					bool PreActive = false;
     35          					vector<PRogramObjectBase*>::iterator pBIt;
     36          					for ( pBIt=PROWaterIngress::AllObjVector.begin(); pBIt!=PROWaterIngress::AllObjVector.end(); pBIt++ ) {
   \   000000A8   090000EA           B        ??Update_11
     37          						PROWaterIngress *Element = (PROWaterIngress*)(*pBIt);
   \                     ??Update_12:
   \   000000AC   003092E5           LDR      R3,[R2, #+0]
     38          						if ( Element->MainWaterIngressPtr->State == AlarmBasic::AlActive ) MainActive = true;
     39          						if ( Element->PreWaterIngressPtr->State  == AlarmBasic::AlActive ) PreActive  = true;
     40          					}
   \   000000B0   042082E2           ADD      R2,R2,#+4
   \   000000B4   6C8193E5           LDR      R8,[R3, #+364]
   \   000000B8   E080D8E5           LDRB     R8,[R8, #+224]
   \   000000BC   703193E5           LDR      R3,[R3, #+368]
   \   000000C0   010058E3           CMP      R8,#+1
   \   000000C4   E030D3E5           LDRB     R3,[R3, #+224]
   \   000000C8   01E0A003           MOVEQ    LR,#+1
   \   000000CC   010053E3           CMP      R3,#+1
   \   000000D0   0160A003           MOVEQ    R6,#+1
   \                     ??Update_11:
   \   000000D4   010052E1           CMP      R2,R1
   \   000000D8   F3FFFF1A           BNE      ??Update_12
     41          					if ( MainActive ) {
   \   000000DC   EE30A0E3           MOV      R3,#+238
   \   000000E0   803F83E3           ORR      R3,R3,#0x200
   \   000000E4   00005EE3           CMP      LR,#+0
   \   000000E8   0800000A           BEQ      ??Update_13
     42          						if ( !(Priority & R_ACTIVATE3) ) Activate(R_ACTIVATE3,RELAY_MSG_FREQUENCY,750,250);
   \   000000EC   040090E7           LDR      R0,[R0, +R4]
   \   000000F0   080010E3           TST      R0,#0x8
   \   000000F4   1A00001A           BNE      ??Update_2
   \   000000F8   FA00A0E3           MOV      R0,#+250
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   60609CE5           LDR      R6,[R12, #+96]
   \   00000104   0220A0E3           MOV      R2,#+2
   \   00000108   0810A0E3           MOV      R1,#+8
   \   0000010C   CEFFFFEA           B        ??Update_4
     43          					} else if ( PreActive ) {//EHSMark Possible bug
   \                     ??Update_13:
   \   00000110   000056E3           CMP      R6,#+0
   \   00000114   0800000A           BEQ      ??Update_10
     44          						if ( !(Priority & R_ACTIVATE2) ) Activate(R_ACTIVATE2,RELAY_MSG_FREQUENCY,250,750);
   \   00000118   040090E7           LDR      R0,[R0, +R4]
   \   0000011C   040010E3           TST      R0,#0x4
   \   00000120   0F00001A           BNE      ??Update_2
   \   00000124   08002DE9           PUSH     {R3}
   \   00000128   60609CE5           LDR      R6,[R12, #+96]
   \   0000012C   FA30A0E3           MOV      R3,#+250
   \   00000130   0220A0E3           MOV      R2,#+2
   \   00000134   0410A0E3           MOV      R1,#+4
   \   00000138   C3FFFFEA           B        ??Update_4
     45          					} else {
     46          						UpdateRelay();
   \                     ??Update_10:
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           _BLF     ??UpdateRelay,??UpdateRelay??rA
   \   00000144   060000EA           B        ??Update_2
     47          					}
     48          				} else {
     49          					UpdateRelay();
     50          				}
     51          			} else {
     52          				if ( !(Priority & R_INACTIVE) )	 DeActivate();
   \                     ??Update_9:
   \   00000148   040090E7           LDR      R0,[R0, +R4]
   \   0000014C   100010E3           TST      R0,#0x10
   \   00000150   0300001A           BNE      ??Update_2
   \   00000154   64109CE5           LDR      R1,[R12, #+100]
   \   00000158   0400A0E1           MOV      R0,R4
   \                     ??Update_6:
   \   0000015C   0FE0A0E1           MOV      LR,PC
   \   00000160   11FF2FE1           BX       R1
     53          			}
     54          			break;
     55          	}
     56          	OS_Unuse(&CtrlSema);
   \                     ??Update_2:
   \   00000164   040085E0           ADD      R0,R5,R4
   \   00000168   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     57          #endif
     58          }
   \   0000016C   7041BDE8           POP      {R4-R6,R8,LR}
   \   00000170   1EFF2FE1           BX       LR               ;; return
   \                     ??Update_8:
   \   00000174   ........           DC32     ??AlarmSilence
   \   00000178   ........           DC32     ??AllObjVector

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CtrlBuzzer &CtrlBuzzer::new CtrlBuzzer()
   \                     `??new CtrlBuzzer`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   4F0FA0E3           MOV      R0,#+316
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new CtrlBuzzer_1`
   \   00000014   ........           BL       ??CtrlBuzzer
   \                     `??new CtrlBuzzer_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     59          //---------------------------------------------------------------------------
     60          

   Maximum stack usage in bytes:

     Function                     CSTACK
     --------                     ------
     CtrlBuzzer::CtrlBuzzer()         8
     CtrlBuzzer::Update(char)        28
     CtrlBuzzer::new CtrlBuzzer()     4
     CtrlBuzzer::~CtrlBuzzer()       12
     __sti__routine()                 0


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     CtrlBuzzer::CtrlBuzzer()       40
     CtrlBuzzer::~CtrlBuzzer()      52
     CtrlBuzzer::Update(char)      380
     CtrlBuzzer::new CtrlBuzzer()   32
     __sti__routine()                4
      Others                       212

 
 612 bytes in segment CODE
 104 bytes in segment DATA_C
   4 bytes in segment DIFUNCT
 
 512 bytes of CODE  memory (+ 104 bytes shared)
 104 bytes of CONST memory

Errors: none
Warnings: none
