##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:56 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROInclinometer.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\PROInclinometer.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROInclinometer.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROInclinometer.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROInclinometer.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_1:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_1
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_3
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_3:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert,??_Insert??rA
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          #define NMAXSQRT 64
      8          
      9          //---------------------------------------------------------------------------
     10          float PROInclinometer::TrimValue                = 0.0;
     11          float PROInclinometer::ListValue                = 0.0;
     12          bool  PROInclinometer::HasTrimValue             = false;
     13          bool  PROInclinometer::HasListValue             = false;
     14          PROInclinometer *PROInclinometer::PROInclinPtr  = NULL;
     15          
     16          #ifdef S2TXU
     17          TSN_STACKPTR int PROInclinometer::TaskStack[2][256];
     18          TSN_TASK PROInclinometer::TaskHandle[2];
     19          #endif

   \                                 In segment CODE, align 4, keep-with-next
     20          PROInclinometer::PROInclinometer(void)
   \                     ??PROInclinometer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     21          {
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000010   B4009FE5           LDR      R0,??PROInclinometer_1  ;; ??__vtbl
     22              IDNumber = (C_PRO_INC << 16 )+1;
     23              MountedOn = C_INC_PORT;
     24              PROInclinPtr = this;
     25          
     26              Inc1Sensor      = NULL;
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   4103A0E3           MOV      R0,#+67108865
   \   00000020   600A80E3           ORR      R0,R0,#0x60000
   \   00000024   9C0084E5           STR      R0,[R4, #+156]
   \   00000028   5E0EA0E3           MOV      R0,#+1504
   \   0000002C   840984E5           STR      R0,[R4, #+2436]
   \   00000030   ........           LDR      R0,??DataTable0  ;; ??tmpHeelLog
     27              Inc2Sensor      = NULL;
     28              TrimSensor      = NULL;
     29              ListSensor      = NULL;
     30              HasTrimValue    = false;
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   104880E5           STR      R4,[R0, #+2064]
   \   0000003C   745984E5           STR      R5,[R4, #+2420]
   \   00000040   785984E5           STR      R5,[R4, #+2424]
   \   00000044   7C5984E5           STR      R5,[R4, #+2428]
   \   00000048   805984E5           STR      R5,[R4, #+2432]
   \   0000004C   1C19C0E5           STRB     R1,[R0, #+2332]
     31              HasListValue    = false;
   \   00000050   1D19C0E5           STRB     R1,[R0, #+2333]
     32              FrequencyCalc   = false;
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   8809C4E5           STRB     R0,[R4, #+2440]
     33              AddToIOObjectList();
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     34          	//clock_t CurrentClock = clock();
     35              for ( int i=0; i<ROL_LIST_ENTRIES; i++ ) {
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   0020A0E1           MOV      R2,R0
   \   0000006C   0030A0E1           MOV      R3,R0
     36                  HeelLog[i] = 0.0;
   \                     ??PROInclinometer_2:
   \   00000070   801184E0           ADD      R1,R4,R0, LSL #+3
   \   00000074   482181E5           STR      R2,[R1, #+328]
   \   00000078   4C3181E5           STR      R3,[R1, #+332]
     37              }
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   400F50E3           CMP      R0,#+256
   \   00000084   F9FFFFBA           BLT      ??PROInclinometer_2
     38              MaxListS                =  0.0;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   480984E5           STR      R0,[R4, #+2376]
     39              MaxListP                =  0.0;
   \   00000090   4C0984E5           STR      R0,[R4, #+2380]
     40              MaxBufListP             =  0.0;
   \   00000094   582984E5           STR      R2,[R4, #+2392]
   \   00000098   5C3984E5           STR      R3,[R4, #+2396]
     41              MaxBufListS             =  0.0;
   \   0000009C   502984E5           STR      R2,[R4, #+2384]
   \   000000A0   543984E5           STR      R3,[R4, #+2388]
     42              ListRollFilter          = 10;  // 4 EHSMark Changed 2 June 2021
   \   000000A4   4014A0E3           MOV      R1,#+1073741824
   \   000000A8   481781E3           ORR      R1,R1,#0x1200000
   \   000000AC   601984E5           STR      R1,[R4, #+2400]
     43              AvgRollingPeriod        = 0.0;
   \   000000B0   640984E5           STR      R0,[R4, #+2404]
     44              AvgFrequency            = 0.0;
   \   000000B4   680984E5           STR      R0,[R4, #+2408]
     45              RollingTimeStart        = 0;
   \   000000B8   6C5984E5           STR      R5,[R4, #+2412]
     46              ListSema                = new ANCriticalSection;
   \   000000BC   ........           _BLF     `??new ANCriticalSection`,`??new ANCriticalSection??rA`
   \   000000C0   700984E5           STR      R0,[R4, #+2416]
     47          }
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           B        ?Subroutine22
   \                     ??PROInclinometer_1:
   \   000000CC   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine22:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     48          //---------------------------------------------------------------------------
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          PROInclinometer::~PROInclinometer(void)
     51          {
   \                     `?~PROInclinometer`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0800000A           BEQ      `?~PROInclinometer_1`
     52              delete ListSema;
   \   00000014   700994E5           LDR      R0,[R4, #+2416]
   \   00000018   ........           _BLF     `??delete ~ANCriticalSection`,`??delete ~ANCriticalSection??rA`
     53          }
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   00000028   010015E3           TST      R5,#0x1
   \   0000002C   0100000A           BEQ      `?~PROInclinometer_1`
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROInclinometer_1`:
   \   00000038                      REQUIRE ?Subroutine22
   \   00000038                      ;; // Fall through to label ?Subroutine22
     54          //---------------------------------------------------------------------------
     55          
     56          ///////////////////////////////////////////////////////////////
     57          //
     58          // Routines for the Configuration
     59          //
     60          ///////////////////////////////////////////////////////////////
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          void PROInclinometer::WriteConfigToFile(TSNConfigString &ConfigString)
     63          {
   \                     ??WriteConfigToFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     64              AnsiString LocalString;
     65              LocalString +=KeyWord(C_PRO_INC)+CrLfStr;
   \   00000004   ........           LDR      R5,??DataTable3  ;; CrLfStr
   \   00000008   5BDF4DE2           SUB      SP,SP,#+364
   \   0000000C   0070A0E1           MOV      R7,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000001C   0610A0E3           MOV      R1,#+6
   \   00000020   401E81E3           ORR      R1,R1,#0x400
   \   00000024   54008DE2           ADD      R0,SP,#+84
   \   00000028   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   54108DE2           ADD      R1,SP,#+84
   \   00000034   38008DE2           ADD      R0,SP,#+56
   \   00000038   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000003C   ........           LDR      R0,??DataTable4  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   006090E5           LDR      R6,[R0, #+0]
   \   00000048   38108DE2           ADD      R1,SP,#+56
   \   0000004C   0630A0E1           MOV      R3,R6
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??append,??append??rA
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   38008DE2           ADD      R0,SP,#+56
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   54008DE2           ADD      R0,SP,#+84
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
     66              LocalString += PRogramObjectBase::MakeConfigString();    //common
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   70108DE2           ADD      R1,SP,#+112
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000088   0630A0E1           MOV      R3,R6
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   70108DE2           ADD      R1,SP,#+112
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           _BLF     ??append,??append??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   70008DE2           ADD      R0,SP,#+112
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
     67              LocalString +=TabStr1+KeyWord(C_INC_MOUNTED)+KeyWord(MountedOn)+CrLfStr;
   \   000000AC   841997E5           LDR      R1,[R7, #+2436]
   \   000000B0   FC008DE2           ADD      R0,SP,#+252
   \   000000B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B8   DD10A0E3           MOV      R1,#+221
   \   000000BC   501E81E3           ORR      R1,R1,#0x500
   \   000000C0   E0008DE2           ADD      R0,SP,#+224
   \   000000C4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C8   C8119FE5           LDR      R1,??WriteConfigToFile_1  ;; TabStr1
   \   000000CC   E0208DE2           ADD      R2,SP,#+224
   \   000000D0   C4008DE2           ADD      R0,SP,#+196
   \   000000D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D8   FC208DE2           ADD      R2,SP,#+252
   \   000000DC   C4108DE2           ADD      R1,SP,#+196
   \   000000E0   A8008DE2           ADD      R0,SP,#+168
   \   000000E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E8   0520A0E1           MOV      R2,R5
   \   000000EC   A8108DE2           ADD      R1,SP,#+168
   \   000000F0   8C008DE2           ADD      R0,SP,#+140
   \   000000F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F8   0630A0E1           MOV      R3,R6
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   8C108DE2           ADD      R1,SP,#+140
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           _BLF     ??append,??append??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   8C008DE2           ADD      R0,SP,#+140
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   A8008DE2           ADD      R0,SP,#+168
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   FC008DE2           ADD      R0,SP,#+252
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   C4008DE2           ADD      R0,SP,#+196
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   E0008DE2           ADD      R0,SP,#+224
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
     68              if ( Inc1Sensor )
   \   0000015C   743997E5           LDR      R3,[R7, #+2420]
   \   00000160   000053E3           CMP      R3,#+0
   \   00000164   0F00000A           BEQ      ??WriteConfigToFile_2
     69                  LocalString += Inc1Sensor->MakeConfigString();
   \   00000168   0300A0E1           MOV      R0,R3
   \   0000016C   A43093E5           LDR      R3,[R3, #+164]
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0C3093E5           LDR      R3,[R3, #+12]
   \   00000178   1C108DE2           ADD      R1,SP,#+28
   \   0000017C   0FE0A0E1           MOV      LR,PC
   \   00000180   13FF2FE1           BX       R3
   \   00000184   0630A0E1           MOV      R3,R6
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   1C108DE2           ADD      R1,SP,#+28
   \   00000190   0D00A0E1           MOV      R0,SP
   \   00000194   ........           _BLF     ??append,??append??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   1C008DE2           ADD      R0,SP,#+28
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     70              if ( Inc2Sensor )
   \                     ??WriteConfigToFile_2:
   \   000001A8   783997E5           LDR      R3,[R7, #+2424]
   \   000001AC   000053E3           CMP      R3,#+0
   \   000001B0   0F00000A           BEQ      ??WriteConfigToFile_3
     71                  LocalString += Inc2Sensor->MakeConfigString();
   \   000001B4   0300A0E1           MOV      R0,R3
   \   000001B8   A43093E5           LDR      R3,[R3, #+164]
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0C3093E5           LDR      R3,[R3, #+12]
   \   000001C4   1C108DE2           ADD      R1,SP,#+28
   \   000001C8   0FE0A0E1           MOV      LR,PC
   \   000001CC   13FF2FE1           BX       R3
   \   000001D0   0630A0E1           MOV      R3,R6
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   1C108DE2           ADD      R1,SP,#+28
   \   000001DC   0D00A0E1           MOV      R0,SP
   \   000001E0   ........           _BLF     ??append,??append??rA
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   1C008DE2           ADD      R0,SP,#+28
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     72              LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \                     ??WriteConfigToFile_3:
   \   000001F4   FA1FA0E3           MOV      R1,#+1000
   \   000001F8   4D0F8DE2           ADD      R0,SP,#+308
   \   000001FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000200   0520A0E1           MOV      R2,R5
   \   00000204   4D1F8DE2           ADD      R1,SP,#+308
   \   00000208   460F8DE2           ADD      R0,SP,#+280
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0630A0E1           MOV      R3,R6
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   461F8DE2           ADD      R1,SP,#+280
   \   0000021C   0D00A0E1           MOV      R0,SP
   \   00000220   ........           _BLF     ??append,??append??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   460F8DE2           ADD      R0,SP,#+280
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
     73              LocalString += CrLfStr;
   \   00000244   0630A0E1           MOV      R3,R6
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0D00A0E1           MOV      R0,SP
   \   00000254   ........           _BLF     ??append,??append??rA
     74              ConfigString.AddString(LocalString);
   \   00000258   0D10A0E1           MOV      R1,SP
   \   0000025C   540F8DE2           ADD      R0,SP,#+336
   \   00000260   ........           _BLF     ??string,??string??rA
   \   00000264   541F8DE2           ADD      R1,SP,#+336
   \   00000268   0400A0E1           MOV      R0,R4
   \   0000026C   ........           _BLF     ??AddString,??AddString??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   540F8DE2           ADD      R0,SP,#+336
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
     75          }
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   0D00A0E1           MOV      R0,SP
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   5BDF8DE2           ADD      SP,SP,#+364
   \   00000294   ........           B        ?Subroutine23
   \                     ??WriteConfigToFile_1:
   \   00000298   ........           DC32     TabStr1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine23:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine23_0:
   \   00000008   ........           DC32     ??WriteAll
     76          //---------------------------------------------------------------------------
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          int PROInclinometer::LoadConfigFromFile(TSNConfigString &ConfigString)
     79          {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   E4D04DE2           SUB      SP,SP,#+228
     80              SetLineNumber(ConfigString.LineCount);
     81              bool NoError = true;
     82              int ErrorLine=0;
   \   00000008   7CB59FE5           LDR      R11,??LoadConfigFromFile_2  ;; `?<Constant "Inclinometer">`
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000001C   0180A0E3           MOV      R8,#+1
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0160E0E1           MVN      R6,R1
   \   0000002C   4B9FA0E3           MOV      R9,#+300
   \   00000030   01A0A0E3           MOV      R10,#+1
     83              int Key;
     84              do {
     85                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_3:
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   58108DE2           ADD      R1,SP,#+88
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??NextWord,??NextWord??rA
     86                  if ( ErrorLine ) {
   \   00000048   00009DE5           LDR      R0,[SP, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1A00000A           BEQ      ??LoadConfigFromFile_4
     87                      if ( ErrorLine != EOF ) {
   \   00000054   060050E1           CMP      R0,R6
   \   00000058   F500000A           BEQ      ??LoadConfigFromFile_5
     88                          GiveConfigWarning((AnsiString)"Inclinometer"+Name,ErrorLine);
   \   0000005C   0B10A0E1           MOV      R1,R11
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000068   442084E2           ADD      R2,R4,#+68
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   20008DE2           ADD      R0,SP,#+32
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   20108DE2           ADD      R1,SP,#+32
   \   0000007C   3C008DE2           ADD      R0,SP,#+60
   \   00000080   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000084   00109DE5           LDR      R1,[SP, #+0]
   \   00000088   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0A10A0E1           MOV      R1,R10
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0A10A0E1           MOV      R1,R10
   \                     ??LoadConfigFromFile_6:
   \   000000B4   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigFromFile_7:
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   DC0000EA           B        ??LoadConfigFromFile_5
     89                      }
     90                  } else {
     91                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_4:
   \   000000C0   58108DE2           ADD      R1,SP,#+88
   \   000000C4   3C008DE2           ADD      R0,SP,#+60
   \   000000C8   ........           _BLF     ??string,??string??rA
   \   000000CC   3C008DE2           ADD      R0,SP,#+60
   \   000000D0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000D4   0070A0E1           MOV      R7,R0
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   3C008DE2           ADD      R0,SP,#+60
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     92                      switch ( Key ) {
   \   000000E8   FA0F57E3           CMP      R7,#+1000
   \   000000EC   D000000A           BEQ      ??LoadConfigFromFile_5
   \   000000F0   FA1F8AE3           ORR      R1,R10,#0x3E8
   \   000000F4   010057E1           CMP      R7,R1
   \   000000F8   4000000A           BEQ      ??LoadConfigFromFile_8
   \   000000FC   011081E2           ADD      R1,R1,#+1
   \   00000100   010057E1           CMP      R7,R1
   \   00000104   CA00000A           BEQ      ??LoadConfigFromFile_5
   \   00000108   011081E3           ORR      R1,R1,#0x1
   \   0000010C   010057E1           CMP      R7,R1
   \   00000110   3E00000A           BEQ      ??LoadConfigFromFile_9
   \   00000114   FB0F57E3           CMP      R7,#+1004
   \   00000118   C500000A           BEQ      ??LoadConfigFromFile_5
   \   0000011C   DD10A0E3           MOV      R1,#+221
   \   00000120   501E81E3           ORR      R1,R1,#0x500
   \   00000124   010057E1           CMP      R7,R1
   \   00000128   3F00000A           BEQ      ??LoadConfigFromFile_10
   \   0000012C   7410A0E3           MOV      R1,#+116
   \   00000130   801E81E3           ORR      R1,R1,#0x800
   \   00000134   010057E1           CMP      R7,R1
   \   00000138   01108113           ORRNE    R1,R1,#0x1
   \   0000013C   01005711           CMPNE    R7,R1
   \   00000140   5200000A           BEQ      ??LoadConfigFromFile_11
   \   00000144   011081E2           ADD      R1,R1,#+1
   \   00000148   010057E1           CMP      R7,R1
   \   0000014C   6C00000A           BEQ      ??LoadConfigFromFile_12
   \   00000150   011081E3           ORR      R1,R1,#0x1
   \   00000154   010057E1           CMP      R7,R1
   \   00000158   8200000A           BEQ      ??LoadConfigFromFile_13
   \   0000015C   011081E2           ADD      R1,R1,#+1
   \   00000160   010057E1           CMP      R7,R1
   \   00000164   9800000A           BEQ      ??LoadConfigFromFile_14
   \   00000168   201081E2           ADD      R1,R1,#+32
   \   0000016C   010057E1           CMP      R7,R1
   \   00000170   B910A013           MOVNE    R1,#+185
   \   00000174   B01E8113           ORRNE    R1,R1,#0xB00
   \   00000178   01005711           CMPNE    R7,R1
   \   0000017C   AC00000A           BEQ      ??LoadConfigFromFile_5
     93                      default:
     94                          GiveConfigWarning((AnsiString)"Inclinometer"+Name,InputKeyWord,ConfigString.LineCount);
   \   00000180   58108DE2           ADD      R1,SP,#+88
   \   00000184   74008DE2           ADD      R0,SP,#+116
   \   00000188   ........           _BLF     ??string,??string??rA
   \   0000018C   0B10A0E1           MOV      R1,R11
   \   00000190   C8008DE2           ADD      R0,SP,#+200
   \   00000194   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000198   0010A0E1           MOV      R1,R0
   \   0000019C   442084E2           ADD      R2,R4,#+68
   \   000001A0   AC008DE2           ADD      R0,SP,#+172
   \   000001A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001A8   AC108DE2           ADD      R1,SP,#+172
   \   000001AC   90008DE2           ADD      R0,SP,#+144
   \   000001B0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001B4   1C2095E5           LDR      R2,[R5, #+28]
   \   000001B8   74108DE2           ADD      R1,SP,#+116
   \   000001BC   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   74008DE2           ADD      R0,SP,#+116
   \   000001CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0A10A0E1           MOV      R1,R10
   \   000001D8   90008DE2           ADD      R0,SP,#+144
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0A10A0E1           MOV      R1,R10
   \   000001E8   AC008DE2           ADD      R0,SP,#+172
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0A10A0E1           MOV      R1,R10
   \   000001F8   C8008DE2           ADD      R0,SP,#+200
   \   000001FC   ADFFFFEA           B        ??LoadConfigFromFile_7
     95                          break;
     96                      case C_AI_END:      // If AI type not found can continue with this
     97                      case C_AL_END:
     98                      case C_PRO_END:
     99                      case C_PRO_END_COMMON:
    100                      case C_PRO_END_PRO:
    101                          break;
    102                      case C_PRO_START_COMMON:
    103                          PRogramObjectBase::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_8:
   \   00000200   0510A0E1           MOV      R1,R5
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000020C   880000EA           B        ??LoadConfigFromFile_5
    104                          break;
    105                      case C_PRO_START_PRO:
    106                          LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_9:
   \   00000210   A42094E5           LDR      R2,[R4, #+164]
   \   00000214   0510A0E1           MOV      R1,R5
   \   00000218   102092E5           LDR      R2,[R2, #+16]
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   0FE0A0E1           MOV      LR,PC
   \   00000224   12FF2FE1           BX       R2
   \   00000228   810000EA           B        ??LoadConfigFromFile_5
    107                          break;
    108                      case C_INC_MOUNTED:
    109                          {
    110                              AnsiString temp = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_10:
   \   0000022C   0030A0E3           MOV      R3,#+0
   \   00000230   0D20A0E1           MOV      R2,SP
   \   00000234   04108DE2           ADD      R1,SP,#+4
   \   00000238   0500A0E1           MOV      R0,R5
   \   0000023C   ........           _BLF     ??NextWord,??NextWord??rA
    111                              if ( !ErrorLine )
   \   00000240   00009DE5           LDR      R0,[SP, #+0]
   \   00000244   000050E3           CMP      R0,#+0
   \   00000248   0900001A           BNE      ??LoadConfigFromFile_15
    112                                  MountedOn = FindConfigKey(temp);
   \   0000024C   04108DE2           ADD      R1,SP,#+4
   \   00000250   20008DE2           ADD      R0,SP,#+32
   \   00000254   ........           _BLF     ??string,??string??rA
   \   00000258   20008DE2           ADD      R0,SP,#+32
   \   0000025C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000260   840984E5           STR      R0,[R4, #+2436]
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   20008DE2           ADD      R0,SP,#+32
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
    113                              NoError = !ErrorLine;
   \                     ??LoadConfigFromFile_15:
   \   00000274   00009DE5           LDR      R0,[SP, #+0]
    114                          }
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   0180A003           MOVEQ    R8,#+1
   \   00000284   0080A013           MOVNE    R8,#+0
   \   00000288   0110A0E3           MOV      R1,#+1
   \   0000028C   88FFFFEA           B        ??LoadConfigFromFile_6
    115                          break;
    116                      case C_AI_INCLINOMETER:
    117                      case C_AI_INC1_N2:
    118                          if ( Inc1Sensor ) {
   \                     ??LoadConfigFromFile_11:
   \   00000290   740994E5           LDR      R0,[R4, #+2420]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   0800000A           BEQ      ??LoadConfigFromFile_16
    119                              GiveConfigWarning((AnsiString)"Inclinometer 1 redefined.",ConfigString.LineCount);
   \   0000029C   10108BE2           ADD      R1,R11,#+16
   \   000002A0   04008DE2           ADD      R0,SP,#+4
   \   000002A4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000002A8   1C1095E5           LDR      R1,[R5, #+28]
   \   000002AC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   04008DE2           ADD      R0,SP,#+4
   \   000002BC   7DFFFFEA           B        ??LoadConfigFromFile_7
    120                          } else {
    121                              Inc1Sensor = (AIInclinometer*) new AIInclinometerN2(Key);
   \                     ??LoadConfigFromFile_16:
   \   000002C0   0700A0E1           MOV      R0,R7
   \   000002C4   ........           _BLF     `??new AIInclinometerN2`,`??new AIInclinometerN2??rA`
   \   000002C8   740984E5           STR      R0,[R4, #+2420]
    122                              Inc1Sensor->SetPROPtr(this);
   \   000002CC   0410A0E1           MOV      R1,R4
   \   000002D0   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
    123                              Inc1Sensor->LoadConfigString(ConfigString);
   \   000002D4   742994E5           LDR      R2,[R4, #+2420]
   \   000002D8   0510A0E1           MOV      R1,R5
   \   000002DC   0200A0E1           MOV      R0,R2
   \   000002E0   A42092E5           LDR      R2,[R2, #+164]
   \   000002E4   102092E5           LDR      R2,[R2, #+16]
   \   000002E8   0FE0A0E1           MOV      LR,PC
   \   000002EC   12FF2FE1           BX       R2
    124                              AnalogInList.push_back((AnalogInput*)Inc1Sensor);
   \   000002F0   741994E5           LDR      R1,[R4, #+2420]
   \                     ??LoadConfigFromFile_17:
   \   000002F4   040089E0           ADD      R0,R9,R4
   \   000002F8   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    125                              FrequencyCalc = true;
   \   000002FC   88A9C4E5           STRB     R10,[R4, #+2440]
   \   00000300   4B0000EA           B        ??LoadConfigFromFile_5
    126                          }
    127                          break;
    128                      case C_AI_INC2_N2:
    129                          if ( Inc2Sensor ) {
   \                     ??LoadConfigFromFile_12:
   \   00000304   780994E5           LDR      R0,[R4, #+2424]
   \   00000308   000050E3           CMP      R0,#+0
   \   0000030C   0700000A           BEQ      ??LoadConfigFromFile_18
    130                              GiveConfigWarning((AnsiString)"Inclinometer 2 redefined.",ConfigString.LineCount);
   \   00000310   2C108BE2           ADD      R1,R11,#+44
   \   00000314   04008DE2           ADD      R0,SP,#+4
   \   00000318   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000031C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000320   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   60FFFFEA           B        ??LoadConfigFromFile_6
    131                          } else {
    132                              Inc2Sensor = (AIInclinometer*)new AIInclinometerN2(Key);
   \                     ??LoadConfigFromFile_18:
   \   00000330   0700A0E1           MOV      R0,R7
   \   00000334   ........           _BLF     `??new AIInclinometerN2`,`??new AIInclinometerN2??rA`
   \   00000338   780984E5           STR      R0,[R4, #+2424]
    133                              Inc2Sensor->SetPROPtr(this);
   \   0000033C   0410A0E1           MOV      R1,R4
   \   00000340   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
    134                              Inc2Sensor->LoadConfigString(ConfigString);
   \   00000344   782994E5           LDR      R2,[R4, #+2424]
   \   00000348   0510A0E1           MOV      R1,R5
   \   0000034C   0200A0E1           MOV      R0,R2
   \   00000350   A42092E5           LDR      R2,[R2, #+164]
   \   00000354   102092E5           LDR      R2,[R2, #+16]
   \   00000358   0FE0A0E1           MOV      LR,PC
   \   0000035C   12FF2FE1           BX       R2
    135                              AnalogInList.push_back((AnalogInput*)Inc2Sensor);
   \   00000360   781994E5           LDR      R1,[R4, #+2424]
   \   00000364   E2FFFFEA           B        ??LoadConfigFromFile_17
    136                              FrequencyCalc = true;
    137                          }
    138                          break;
    139                      case C_AI_INC1_MACRON:
    140                          if ( Inc1Sensor ) {
   \                     ??LoadConfigFromFile_13:
   \   00000368   740994E5           LDR      R0,[R4, #+2420]
   \   0000036C   000050E3           CMP      R0,#+0
   \   00000370   0700000A           BEQ      ??LoadConfigFromFile_19
    141                              GiveConfigWarning((AnsiString)"Inclinometer 1 redefined.",ConfigString.LineCount);
   \   00000374   10108BE2           ADD      R1,R11,#+16
   \   00000378   04008DE2           ADD      R0,SP,#+4
   \   0000037C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000380   1C1095E5           LDR      R1,[R5, #+28]
   \   00000384   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000388   0020A0E3           MOV      R2,#+0
   \   0000038C   0110A0E3           MOV      R1,#+1
   \   00000390   47FFFFEA           B        ??LoadConfigFromFile_6
    142                          } else {
    143                              Inc1Sensor = (AIInclinometer*) new AIInclinometer_mA(Key);
   \                     ??LoadConfigFromFile_19:
   \   00000394   0700A0E1           MOV      R0,R7
   \   00000398   ........           _BLF     `??new AIInclinometer_mA`,`??new AIInclinometer_mA??rA`
   \   0000039C   740984E5           STR      R0,[R4, #+2420]
    144                              Inc1Sensor->SetPROPtr(this);
   \   000003A0   0410A0E1           MOV      R1,R4
   \   000003A4   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
    145                              Inc1Sensor->LoadConfigString(ConfigString);
   \   000003A8   742994E5           LDR      R2,[R4, #+2420]
   \   000003AC   0510A0E1           MOV      R1,R5
   \   000003B0   0200A0E1           MOV      R0,R2
   \   000003B4   A42092E5           LDR      R2,[R2, #+164]
   \   000003B8   102092E5           LDR      R2,[R2, #+16]
   \   000003BC   0FE0A0E1           MOV      LR,PC
   \   000003C0   12FF2FE1           BX       R2
    146                              AnalogInList.push_back((AnalogInput*)Inc1Sensor);
   \   000003C4   741994E5           LDR      R1,[R4, #+2420]
   \   000003C8   170000EA           B        ??LoadConfigFromFile_20
    147                          }
    148                          break;
    149                      case C_AI_INC2_MACRON:
    150                          if ( Inc2Sensor ) {
   \                     ??LoadConfigFromFile_14:
   \   000003CC   780994E5           LDR      R0,[R4, #+2424]
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   0700000A           BEQ      ??LoadConfigFromFile_21
    151                              GiveConfigWarning((AnsiString)"Inclinometer 2 redefined.",ConfigString.LineCount);
   \   000003D8   2C108BE2           ADD      R1,R11,#+44
   \   000003DC   04008DE2           ADD      R0,SP,#+4
   \   000003E0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000003E4   1C1095E5           LDR      R1,[R5, #+28]
   \   000003E8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   0110A0E3           MOV      R1,#+1
   \   000003F4   2EFFFFEA           B        ??LoadConfigFromFile_6
    152                          } else {
    153                              Inc2Sensor = (AIInclinometer*) new AIInclinometer_mA(Key);
   \                     ??LoadConfigFromFile_21:
   \   000003F8   0700A0E1           MOV      R0,R7
   \   000003FC   ........           _BLF     `??new AIInclinometer_mA`,`??new AIInclinometer_mA??rA`
   \   00000400   780984E5           STR      R0,[R4, #+2424]
    154                              Inc2Sensor->SetPROPtr(this);
   \   00000404   0410A0E1           MOV      R1,R4
   \   00000408   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
    155                              Inc2Sensor->LoadConfigString(ConfigString);
   \   0000040C   782994E5           LDR      R2,[R4, #+2424]
   \   00000410   0510A0E1           MOV      R1,R5
   \   00000414   0200A0E1           MOV      R0,R2
   \   00000418   A42092E5           LDR      R2,[R2, #+164]
   \   0000041C   102092E5           LDR      R2,[R2, #+16]
   \   00000420   0FE0A0E1           MOV      LR,PC
   \   00000424   12FF2FE1           BX       R2
    156                              AnalogInList.push_back((AnalogInput*)Inc2Sensor);
   \   00000428   781994E5           LDR      R1,[R4, #+2424]
   \                     ??LoadConfigFromFile_20:
   \   0000042C   040089E0           ADD      R0,R9,R4
   \   00000430   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    157                          }
    158                          break;
    159                      }
    160                  }
    161              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??LoadConfigFromFile_5:
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0110A0E3           MOV      R1,#+1
   \   0000043C   58008DE2           ADD      R0,SP,#+88
   \   00000440   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000444   000058E3           CMP      R8,#+0
   \   00000448   00009D15           LDRNE    R0,[SP, #+0]
   \   0000044C   06005011           CMPNE    R0,R6
   \   00000450   FA0F5713           CMPNE    R7,#+1000
   \   00000454   F6FEFF1A           BNE      ??LoadConfigFromFile_3
    162              CopyAnalogList();
   \   00000458   0400A0E1           MOV      R0,R4
   \   0000045C   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    163          
    164              AddSensorAlarms();
   \   00000460   0400A0E1           MOV      R0,R4
   \   00000464   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    165          
    166          #ifndef ANCONF
    167              switch ( MountedOn ) {
   \   00000468   840994E5           LDR      R0,[R4, #+2436]
   \   0000046C   8054A0E3           MOV      R5,#-2147483648
   \   00000470   FE5585E3           ORR      R5,R5,#0x3F800000
   \   00000474   DE0040E2           SUB      R0,R0,#+222
   \   00000478   500E40E2           SUB      R0,R0,#+1280
   \   0000047C   030050E3           CMP      R0,#+3
   \   00000480   2E00008A           BHI      ??LoadConfigFromFile_22
   \   00000484   011F8FE2           ADR      R1,??LoadConfigFromFile_1
   \   00000488   0010D1E7           LDRB     R1,[R1, R0]
   \   0000048C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigFromFile_1:
   \   00000490   0008151E           DC8      +0,+8,+21,+30
    168              case C_INC_FORWARD:
    169                  TrimSensor = Inc2Sensor;
   \                     ??LoadConfigFromFile_23:
   \   00000494   780994E5           LDR      R0,[R4, #+2424]
   \   00000498   7C0984E5           STR      R0,[R4, #+2428]
    170                  ListSensor = Inc1Sensor;
   \   0000049C   741994E5           LDR      R1,[R4, #+2420]
    171                  if ( TrimSensor ) TrimSensor->SetSign( 1.0);
   \   000004A0   000050E3           CMP      R0,#+0
   \   000004A4   801984E5           STR      R1,[R4, #+2432]
   \   000004A8   1F00000A           BEQ      ??LoadConfigFromFile_24
   \   000004AC   FE15A0E3           MOV      R1,#+1065353216
   \   000004B0   1C0000EA           B        ??LoadConfigFromFile_25
    172                  if ( ListSensor ) ListSensor->SetSign( 1.0);
    173                  break;
    174              case C_INC_AFT:
    175                  TrimSensor = Inc2Sensor;
   \                     ??LoadConfigFromFile_26:
   \   000004B4   780994E5           LDR      R0,[R4, #+2424]
   \   000004B8   7C0984E5           STR      R0,[R4, #+2428]
    176                  ListSensor = Inc1Sensor;
   \   000004BC   741994E5           LDR      R1,[R4, #+2420]
    177                  if ( TrimSensor ) TrimSensor->SetSign(-1.0);
   \   000004C0   000050E3           CMP      R0,#+0
   \   000004C4   801984E5           STR      R1,[R4, #+2432]
   \   000004C8   0100000A           BEQ      ??LoadConfigFromFile_27
   \   000004CC   0510A0E1           MOV      R1,R5
   \   000004D0   ........           _BLF     ??SetSign,??SetSign??rA
    178                  if ( ListSensor ) ListSensor->SetSign(-1.0);
   \                     ??LoadConfigFromFile_27:
   \   000004D4   800994E5           LDR      R0,[R4, #+2432]
   \   000004D8   000050E3           CMP      R0,#+0
   \   000004DC   1700000A           BEQ      ??LoadConfigFromFile_22
   \   000004E0   0510A0E1           MOV      R1,R5
   \   000004E4   140000EA           B        ??LoadConfigFromFile_28
    179                  break;
    180              case C_INC_PORT:
    181                  TrimSensor = Inc1Sensor;
   \                     ??LoadConfigFromFile_29:
   \   000004E8   740994E5           LDR      R0,[R4, #+2420]
   \   000004EC   7C0984E5           STR      R0,[R4, #+2428]
    182                  ListSensor = Inc2Sensor;
   \   000004F0   781994E5           LDR      R1,[R4, #+2424]
    183                  if ( TrimSensor ) TrimSensor->SetSign( 1.0);
   \   000004F4   000050E3           CMP      R0,#+0
   \   000004F8   801984E5           STR      R1,[R4, #+2432]
   \   000004FC   F4FFFF0A           BEQ      ??LoadConfigFromFile_27
   \   00000500   FE15A0E3           MOV      R1,#+1065353216
   \   00000504   ........           _BLF     ??SetSign,??SetSign??rA
    184                  if ( ListSensor ) ListSensor->SetSign(-1.0);
   \   00000508   F1FFFFEA           B        ??LoadConfigFromFile_27
    185                  break;
    186              case C_INC_STARBOARD:
    187                  TrimSensor = Inc1Sensor;
   \                     ??LoadConfigFromFile_30:
   \   0000050C   740994E5           LDR      R0,[R4, #+2420]
   \   00000510   7C0984E5           STR      R0,[R4, #+2428]
    188                  ListSensor = Inc2Sensor;
   \   00000514   781994E5           LDR      R1,[R4, #+2424]
    189                  if ( TrimSensor ) TrimSensor->SetSign(-1.0);
   \   00000518   000050E3           CMP      R0,#+0
   \   0000051C   801984E5           STR      R1,[R4, #+2432]
   \   00000520   0100000A           BEQ      ??LoadConfigFromFile_24
   \   00000524   0510A0E1           MOV      R1,R5
   \                     ??LoadConfigFromFile_25:
   \   00000528   ........           _BLF     ??SetSign,??SetSign??rA
    190                  if ( ListSensor ) ListSensor->SetSign( 1.0);
   \                     ??LoadConfigFromFile_24:
   \   0000052C   800994E5           LDR      R0,[R4, #+2432]
   \   00000530   000050E3           CMP      R0,#+0
   \   00000534   0100000A           BEQ      ??LoadConfigFromFile_22
   \   00000538   FE15A0E3           MOV      R1,#+1065353216
   \                     ??LoadConfigFromFile_28:
   \   0000053C   ........           _BLF     ??SetSign,??SetSign??rA
    191                  break;
    192              }
    193              if ( TrimSensor ) {
   \                     ??LoadConfigFromFile_22:
   \   00000540   7C0994E5           LDR      R0,[R4, #+2428]
   \   00000544   4A5FA0E3           MOV      R5,#+296
   \   00000548   000050E3           CMP      R0,#+0
   \   0000054C   0300000A           BEQ      ??LoadConfigFromFile_31
    194                  TrimSensor->Location        = C_AI_LOC_INC_TRIM;
   \   00000550   7C1E85E2           ADD      R1,R5,#+1984
   \   00000554   001085E7           STR      R1,[R5, +R0]
    195                  TrimSensor->SetLocationKeyWord(L_WORD460);
   \   00000558   731FA0E3           MOV      R1,#+460
   \   0000055C   ........           _BLF     ??SetLocationKeyWord,??SetLocationKeyWord??rA
    196              }
    197              if ( ListSensor ) {
   \                     ??LoadConfigFromFile_31:
   \   00000560   800994E5           LDR      R0,[R4, #+2432]
   \   00000564   000050E3           CMP      R0,#+0
   \   00000568   0400000A           BEQ      ??LoadConfigFromFile_32
    198                  ListSensor->Location        = C_AI_LOC_INC_LIST;
   \   0000056C   E910A0E3           MOV      R1,#+233
   \   00000570   801E81E3           ORR      R1,R1,#0x800
   \   00000574   001085E7           STR      R1,[R5, +R0]
    199                  ListSensor->SetLocationKeyWord(L_WORD461);
   \   00000578   A51085E2           ADD      R1,R5,#+165
   \   0000057C   ........           _BLF     ??SetLocationKeyWord,??SetLocationKeyWord??rA
    200              }
    201          #endif
    202              return ErrorLine;
   \                     ??LoadConfigFromFile_32:
   \   00000580   00009DE5           LDR      R0,[SP, #+0]
   \   00000584   E4D08DE2           ADD      SP,SP,#+228
   \   00000588   ........           B        ?Subroutine24
   \                     ??LoadConfigFromFile_2:
   \   0000058C   ........           DC32     `?<Constant "Inclinometer">`
    203          
    204          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine24:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine24_0:
   \   00000008   ........           DC32     NewLineStr
   \   0000000C   ........           DC32     `?<Constant "Inclinometer ">`
    205          
    206          
    207          ///////////////////////////////////////////////////////////////
    208          //
    209          // Routines for Saving of Settings
    210          //
    211          ///////////////////////////////////////////////////////////////
    212          

   \                                 In segment CODE, align 4, keep-with-next
    213          void PROInclinometer::SaveSettings(TSNConfigString *SettingsString)
    214          {
   \                     ??SaveSettings:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   C4D04DE2           SUB      SP,SP,#+196
   \   00000008   0050A0E1           MOV      R5,R0
    215              if ( IsModified || WriteAll ) {
   \   0000000C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   ........           LDREQ    R0,??Subroutine23_0  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   6800000A           BEQ      ??SaveSettings_1
    216                  IsModified = false;
    217                  AnsiString LocalString;
    218                  LocalString +=KeyWord(C_PRO_INC)+CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable3  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C5E5           STRB     R0,[R5, #+0]
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   0610A0E3           MOV      R1,#+6
   \   00000040   401E81E3           ORR      R1,R1,#0x400
   \   00000044   54008DE2           ADD      R0,SP,#+84
   \   00000048   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000004C   0620A0E1           MOV      R2,R6
   \   00000050   54108DE2           ADD      R1,SP,#+84
   \   00000054   38008DE2           ADD      R0,SP,#+56
   \   00000058   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000005C   ........           LDR      R0,??DataTable4  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   007090E5           LDR      R7,[R0, #+0]
   \   00000068   38108DE2           ADD      R1,SP,#+56
   \   0000006C   0730A0E1           MOV      R3,R7
   \   00000070   1C008DE2           ADD      R0,SP,#+28
   \   00000074   ........           _BLF     ??append,??append??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   38008DE2           ADD      R0,SP,#+56
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
    219          
    220                  if ( Inc1Sensor ) LocalString += Inc1Sensor->SaveAISettings();
   \   00000098   743995E5           LDR      R3,[R5, #+2420]
   \   0000009C   000053E3           CMP      R3,#+0
   \   000000A0   0F00000A           BEQ      ??SaveSettings_2
   \   000000A4   0300A0E1           MOV      R0,R3
   \   000000A8   A43093E5           LDR      R3,[R3, #+164]
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   6C3093E5           LDR      R3,[R3, #+108]
   \   000000B4   0D10A0E1           MOV      R1,SP
   \   000000B8   0FE0A0E1           MOV      LR,PC
   \   000000BC   13FF2FE1           BX       R3
   \   000000C0   0730A0E1           MOV      R3,R7
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0D10A0E1           MOV      R1,SP
   \   000000CC   1C008DE2           ADD      R0,SP,#+28
   \   000000D0   ........           _BLF     ??append,??append??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    221                  if ( Inc2Sensor ) LocalString += Inc2Sensor->SaveAISettings();
   \                     ??SaveSettings_2:
   \   000000E4   783995E5           LDR      R3,[R5, #+2424]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   0F00000A           BEQ      ??SaveSettings_3
   \   000000F0   0300A0E1           MOV      R0,R3
   \   000000F4   A43093E5           LDR      R3,[R3, #+164]
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   6C3093E5           LDR      R3,[R3, #+108]
   \   00000100   0D10A0E1           MOV      R1,SP
   \   00000104   0FE0A0E1           MOV      LR,PC
   \   00000108   13FF2FE1           BX       R3
   \   0000010C   0730A0E1           MOV      R3,R7
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0D10A0E1           MOV      R1,SP
   \   00000118   1C008DE2           ADD      R0,SP,#+28
   \   0000011C   ........           _BLF     ??append,??append??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
    222                  LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \                     ??SaveSettings_3:
   \   00000130   FA1FA0E3           MOV      R1,#+1000
   \   00000134   8C008DE2           ADD      R0,SP,#+140
   \   00000138   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000013C   0620A0E1           MOV      R2,R6
   \   00000140   8C108DE2           ADD      R1,SP,#+140
   \   00000144   70008DE2           ADD      R0,SP,#+112
   \   00000148   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000014C   0730A0E1           MOV      R3,R7
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   70108DE2           ADD      R1,SP,#+112
   \   00000158   1C008DE2           ADD      R0,SP,#+28
   \   0000015C   ........           _BLF     ??append,??append??rA
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   70008DE2           ADD      R0,SP,#+112
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   8C008DE2           ADD      R0,SP,#+140
   \   0000017C   ........           _BLF     ??_Tidy,??_Tidy??rA
    223                  LocalString += CrLfStr;
   \   00000180   0730A0E1           MOV      R3,R7
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0610A0E1           MOV      R1,R6
   \   0000018C   1C008DE2           ADD      R0,SP,#+28
   \   00000190   ........           _BLF     ??append,??append??rA
    224                  SettingsString->AddString(LocalString);
   \   00000194   1C108DE2           ADD      R1,SP,#+28
   \   00000198   A8008DE2           ADD      R0,SP,#+168
   \   0000019C   ........           _BLF     ??string,??string??rA
   \   000001A0   A8108DE2           ADD      R1,SP,#+168
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   ........           _BLF     ??AddString,??AddString??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   A8008DE2           ADD      R0,SP,#+168
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    225              }
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   1C008DE2           ADD      R0,SP,#+28
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    226          }
   \                     ??SaveSettings_1:
   \   000001CC   C4D08DE2           ADD      SP,SP,#+196
   \   000001D0                      REQUIRE ?Subroutine23
   \   000001D0                      ;; // Fall through to label ?Subroutine23
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          bool PROInclinometer::RestoreSettings(TSNConfigString *SettingsString)
    229          {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    230              bool NoError = true;
    231              int ErrorLine=0;
   \   00000004   ........           LDR      R9,??Subroutine24_0  ;; NewLineStr
   \   00000008   ........           LDR      R10,??Subroutine24_0+0x4  ;; `?<Constant "Inclinometer ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    232              int Key;
    233              do {
    234                  AnsiString InputKeyWord= SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_1:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    235                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_2
    236                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   AC00000A           BEQ      ??RestoreSettings_3
    237                          RestoreSettingsWarning((AnsiString)"Inclinometer "+Name+":\nUnknown error started at line:"+(AnsiString)ErrorLine+NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   10208AE2           ADD      R2,R10,#+16
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_4:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   740000EA           B        ??RestoreSettings_3
    238                      }
    239                  } else {
    240                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_2:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    241                      switch ( Key ) {
   \   00000158   FA0F56E3           CMP      R6,#+1000
   \   0000015C   EA10A013           MOVNE    R1,#+234
   \   00000160   C01F8113           ORRNE    R1,R1,#0x300
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   FB0F5613           CMPNE    R6,#+1004
   \   0000016C   AF10A013           MOVNE    R1,#+175
   \   00000170   501E8113           ORRNE    R1,R1,#0x500
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   5300000A           BEQ      ??RestoreSettings_5
   \   0000017C   7510A0E3           MOV      R1,#+117
   \   00000180   801E81E3           ORR      R1,R1,#0x800
   \   00000184   010056E1           CMP      R6,R1
   \   00000188   01108112           ADDNE    R1,R1,#+1
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   4F00000A           BEQ      ??RestoreSettings_6
   \   00000194   221081E2           ADD      R1,R1,#+34
   \   00000198   010056E1           CMP      R6,R1
   \   0000019C   B910A013           MOVNE    R1,#+185
   \   000001A0   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001A4   01005611           CMPNE    R6,R1
   \   000001A8   4700000A           BEQ      ??RestoreSettings_5
    242                      default:
    243                          NoError = false;
    244                          RestoreSettingsWarning((AnsiString)"Inclinometer "+Name+":\nThe keyword " + InputKeyWord +" is not allowed here!! Line:"+(AnsiString)SettingsString->LineCount+NewLineStr);
   \   000001AC   1C1095E5           LDR      R1,[R5, #+28]
   \   000001B0   0070A0E3           MOV      R7,#+0
   \   000001B4   710F8DE2           ADD      R0,SP,#+452
   \   000001B8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000001BC   00B0A0E1           MOV      R11,R0
   \   000001C0   0A10A0E1           MOV      R1,R10
   \   000001C4   6A0F8DE2           ADD      R0,SP,#+424
   \   000001C8   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001CC   0010A0E1           MOV      R1,R0
   \   000001D0   442084E2           ADD      R2,R4,#+68
   \   000001D4   630F8DE2           ADD      R0,SP,#+396
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   34208AE2           ADD      R2,R10,#+52
   \   000001E0   631F8DE2           ADD      R1,SP,#+396
   \   000001E4   5C0F8DE2           ADD      R0,SP,#+368
   \   000001E8   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000001EC   74208DE2           ADD      R2,SP,#+116
   \   000001F0   5C1F8DE2           ADD      R1,SP,#+368
   \   000001F4   550F8DE2           ADD      R0,SP,#+340
   \   000001F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001FC   44208AE2           ADD      R2,R10,#+68
   \   00000200   551F8DE2           ADD      R1,SP,#+340
   \   00000204   4E0F8DE2           ADD      R0,SP,#+312
   \   00000208   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000020C   0B20A0E1           MOV      R2,R11
   \   00000210   4E1F8DE2           ADD      R1,SP,#+312
   \   00000214   470F8DE2           ADD      R0,SP,#+284
   \   00000218   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000021C   0920A0E1           MOV      R2,R9
   \   00000220   471F8DE2           ADD      R1,SP,#+284
   \   00000224   400F8DE2           ADD      R0,SP,#+256
   \   00000228   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000022C   401F8DE2           ADD      R1,SP,#+256
   \   00000230   E4008DE2           ADD      R0,SP,#+228
   \   00000234   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000238   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   E4008DE2           ADD      R0,SP,#+228
   \   00000248   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000024C   0720A0E1           MOV      R2,R7
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   400F8DE2           ADD      R0,SP,#+256
   \   00000258   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000025C   0720A0E1           MOV      R2,R7
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   470F8DE2           ADD      R0,SP,#+284
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000026C   0720A0E1           MOV      R2,R7
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   710F8DE2           ADD      R0,SP,#+452
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000027C   0720A0E1           MOV      R2,R7
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   4E0F8DE2           ADD      R0,SP,#+312
   \   00000288   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000028C   0720A0E1           MOV      R2,R7
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   550F8DE2           ADD      R0,SP,#+340
   \   00000298   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000029C   0720A0E1           MOV      R2,R7
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   5C0F8DE2           ADD      R0,SP,#+368
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0720A0E1           MOV      R2,R7
   \   000002B0   0110A0E3           MOV      R1,#+1
   \   000002B4   630F8DE2           ADD      R0,SP,#+396
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0720A0E1           MOV      R2,R7
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   6A0F8DE2           ADD      R0,SP,#+424
   \   000002C8   96FFFFEA           B        ??RestoreSettings_4
    245                          break;
    246                      case C_AI_END:          // If AI type not found can continue with this
    247                      case C_AL_END:
    248                      case C_CT_END:
    249                      case C_PRO_END:
    250                      case C_PRO_END_COMMON:
    251                      case C_PRO_END_PRO:
    252                          Key = C_PRO_END;
   \                     ??RestoreSettings_5:
   \   000002CC   FA6FA0E3           MOV      R6,#+1000
   \   000002D0   0B0000EA           B        ??RestoreSettings_3
    253                          break;
    254                      case C_AI_INC1_N2:
    255                      case C_AI_INC2_N2:
    256                          {
    257                              int AIIDNumber = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_6:
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   0D10A0E1           MOV      R1,SP
   \   000002DC   0500A0E1           MOV      R0,R5
   \   000002E0   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    258                              AnalogInput *AnalogInPtr = (AnalogInput*)FindObject(AIIDNumber);
   \   000002E4   ........           _BLF     ??FindObject,??FindObject??rA
   \   000002E8   0020B0E1           MOVS     R2,R0
    259                              if ( AnalogInPtr ) AnalogInPtr->RestoreAISettings(SettingsString);
   \   000002EC   0500000A           BEQ      ??RestoreSettings_7
   \   000002F0   A42092E5           LDR      R2,[R2, #+164]
   \   000002F4   0510A0E1           MOV      R1,R5
   \   000002F8   702092E5           LDR      R2,[R2, #+112]
   \   000002FC   0FE0A0E1           MOV      LR,PC
   \   00000300   12FF2FE1           BX       R2
    260                          }
    261                          break;
    262                      }
    263                  }
    264              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??RestoreSettings_3:
   \   00000304   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_7:
   \   00000308   0110A0E3           MOV      R1,#+1
   \   0000030C   74008DE2           ADD      R0,SP,#+116
   \   00000310   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000314   000057E3           CMP      R7,#+0
   \   00000318   00009D15           LDRNE    R0,[SP, #+0]
   \   0000031C   08005011           CMPNE    R0,R8
   \   00000320   FA0F5613           CMPNE    R6,#+1000
   \   00000324   3FFFFF1A           BNE      ??RestoreSettings_1
    265              return(NoError);
   \   00000328   0700A0E1           MOV      R0,R7
   \   0000032C   78DF8DE2           ADD      SP,SP,#+480
   \   00000330                      REQUIRE ?Subroutine24
   \   00000330                      ;; // Fall through to label ?Subroutine24
    266          }
    267          
    268          
    269          //---------------------------------------------------------------------------
    270          
    271          ///////////////////////////////////////////////////////////////
    272          //
    273          // Routines for the librarian
    274          //
    275          ///////////////////////////////////////////////////////////////
    276          

   \                                 In segment CODE, align 4, keep-with-next
    277          int PROInclinometer::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit)
    278          {
   \                     ??GetValue:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
    279              int Status = GETVAL_NO_ERR;
    280              switch ( ValueId ) {
   \   00000004   00A09DE5           LDR      R10,[SP, #+0]
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   28009DE5           LDR      R0,[SP, #+40]
   \   00000010   7CC996E5           LDR      R12,[R6, #+2428]
   \   00000014   80E996E5           LDR      LR,[R6, #+2432]
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   2C309DE5           LDR      R3,[SP, #+44]
   \   00000020   0040A0E3           MOV      R4,#+0
   \   00000024   0170A0E3           MOV      R7,#+1
   \   00000028   B810A0E3           MOV      R1,#+184
   \   0000002C   401E81E3           ORR      R1,R1,#0x400
   \   00000030   0A80A0E3           MOV      R8,#+10
   \   00000034   0290A0E3           MOV      R9,#+2
   \   00000038   4BA04AE2           SUB      R10,R10,#+75
   \   0000003C   50AE4AE2           SUB      R10,R10,#+1280
   \   00000040   12005AE3           CMP      R10,#+18
   \   00000044   6F00008A           BHI      ??GetValue_3
   \   00000048   01BF8FE2           ADR      R11,??GetValue_1
   \   0000004C   0AB0DBE7           LDRB     R11,[R11, R10]
   \   00000050   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??GetValue_1:
   \   00000054   0419296C           DC8      +4,+25,+41,+108
   \   00000058   6C6C3444           DC8      +108,+108,+52,+68
   \   0000005C   6C6C6C6C           DC8      +108,+108,+108,+108
   \   00000060   6C4D5256           DC8      +108,+77,+82,+86
   \   00000064   5A606600           DC8      +90,+96,+102,+0
    281              case SVT_TRIM_M  :
    282                  if ( TrimSensor ) {
   \                     ??GetValue_4:
   \   00000068   00005CE3           CMP      R12,#+0
   \   0000006C   6D00000A           BEQ      ??GetValue_5
    283                      Unit   = LENGTH_UNIT;
   \   00000070   007083E5           STR      R7,[R3, #+0]
    284                      DecPnt = 2;
   \   00000074   009080E5           STR      R9,[R0, #+0]
    285                      float TrimDeg = TrimSensor->Calculate();
   \   00000078   A4109CE5           LDR      R1,[R12, #+164]
   \   0000007C   0C00A0E1           MOV      R0,R12
   \   00000080   601091E5           LDR      R1,[R1, #+96]
   \   00000084   0FE0A0E1           MOV      LR,PC
   \   00000088   11FF2FE1           BX       R1
   \   0000008C   0010A0E1           MOV      R1,R0
    286                      if ( TrimSensor->ResultOK ) {
   \   00000090   7C0996E5           LDR      R0,[R6, #+2428]
   \   00000094   3601D0E5           LDRB     R0,[R0, #+310]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0400000A           BEQ      ??GetValue_6
    287                          MyRetValue = TrimDeg*PROProjectInfo::LengthBetweenPP;
   \   000000A0   ........           LDR      R0,??DataTable8  ;; ??LengthBetweenPP
   \                     ??GetValue_7:
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \                     ??GetValue_8:
   \   000000A8   ........           _BLF     __fMul,??__fMul??rA
   \                     ??GetValue_9:
   \   000000AC   000085E5           STR      R0,[R5, #+0]
   \   000000B0   5C0000EA           B        ??GetValue_5
    288                      } else {
    289                          Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_6:
   \   000000B4   0140A0E3           MOV      R4,#+1
   \   000000B8   5A0000EA           B        ??GetValue_5
    290                      }
    291                  }
    292                  break;
    293              case SVT_TRIM_MARKS_M  :
    294                  if ( TrimSensor ) {
   \                     ??GetValue_10:
   \   000000BC   00005CE3           CMP      R12,#+0
   \   000000C0   5800000A           BEQ      ??GetValue_5
    295                      Unit   = LENGTH_UNIT;
   \   000000C4   007083E5           STR      R7,[R3, #+0]
    296                      DecPnt = 2;
   \   000000C8   009080E5           STR      R9,[R0, #+0]
    297                      float TrimDeg = TrimSensor->Calculate();
   \   000000CC   A4109CE5           LDR      R1,[R12, #+164]
   \   000000D0   0C00A0E1           MOV      R0,R12
   \   000000D4   601091E5           LDR      R1,[R1, #+96]
   \   000000D8   0FE0A0E1           MOV      LR,PC
   \   000000DC   11FF2FE1           BX       R1
   \   000000E0   0010A0E1           MOV      R1,R0
    298                      if ( TrimSensor->ResultOK ) {
   \   000000E4   7C0996E5           LDR      R0,[R6, #+2428]
   \   000000E8   3601D0E5           LDRB     R0,[R0, #+310]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   EFFFFF0A           BEQ      ??GetValue_6
    299                          MyRetValue = TrimDeg*PROProjectInfo::LengthBetweenMarks;
   \   000000F4   ........           LDR      R0,??DataTable9  ;; ??LengthBetweenMarks
   \   000000F8   E9FFFFEA           B        ??GetValue_7
    300                      } else {
    301                          Status = GETVAL_NOT_AVAILABLE;
    302                      }
    303                  }
    304                  break;
    305              case SVT_TRIM_ANGLE:
    306                  if ( TrimSensor ) {
   \                     ??GetValue_11:
   \   000000FC   00005CE3           CMP      R12,#+0
   \   00000100   4800000A           BEQ      ??GetValue_5
    307                      Status = TrimSensor->GetValue(SVT_AI_CALC_VAL,Index, MyRetValue,  DecPnt,Unit);
   \   00000104   08002DE9           PUSH     {R3}
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   A4409CE5           LDR      R4,[R12, #+164]
   \   00000110   0530A0E1           MOV      R3,R5
   \   00000114   244094E5           LDR      R4,[R4, #+36]
   \   00000118   0C00A0E1           MOV      R0,R12
   \                     ??GetValue_12:
   \   0000011C   0FE0A0E1           MOV      LR,PC
   \   00000120   14FF2FE1           BX       R4
   \   00000124   3D0000EA           B        ??GetValue_13
    308                  }
    309                  break;
    310              case SVT_LIST_M  :
    311                  if ( ListSensor ) {
   \                     ??GetValue_14:
   \   00000128   00005EE3           CMP      LR,#+0
   \   0000012C   3D00000A           BEQ      ??GetValue_5
    312                      Unit   = LENGTH_UNIT;
   \   00000130   007083E5           STR      R7,[R3, #+0]
    313                      DecPnt = 2;
   \   00000134   009080E5           STR      R9,[R0, #+0]
    314                      float ListDeg = ListSensor->Calculate();
   \   00000138   A4109EE5           LDR      R1,[LR, #+164]
   \   0000013C   0E00A0E1           MOV      R0,LR
   \   00000140   601091E5           LDR      R1,[R1, #+96]
   \   00000144   0FE0A0E1           MOV      LR,PC
   \   00000148   11FF2FE1           BX       R1
    315                      if ( ListSensor->ResultOK ) {
   \   0000014C   801996E5           LDR      R1,[R6, #+2432]
   \   00000150   3611D1E5           LDRB     R1,[R1, #+310]
   \   00000154   000051E3           CMP      R1,#+0
   \   00000158   D5FFFF0A           BEQ      ??GetValue_6
    316                          MyRetValue = ListDeg*PROProjectInfo::Width;
   \   0000015C   ........           LDR      R1,??DataTable10  ;; ??Width
   \   00000160   001091E5           LDR      R1,[R1, #+0]
   \   00000164   CFFFFFEA           B        ??GetValue_8
    317                      } else {
    318                          Status = GETVAL_NOT_AVAILABLE;
    319                      }
    320                  }
    321                  break;
    322              case SVT_LIST_ANGLE:
    323                  if ( ListSensor ) {
   \                     ??GetValue_15:
   \   00000168   00005EE3           CMP      LR,#+0
   \   0000016C   2D00000A           BEQ      ??GetValue_5
    324                      Status = ListSensor->GetValue(SVT_AI_CALC_VAL, Index, MyRetValue,  DecPnt,Unit);
   \   00000170   08002DE9           PUSH     {R3}
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   A4409EE5           LDR      R4,[LR, #+164]
   \   0000017C   0530A0E1           MOV      R3,R5
   \   00000180   244094E5           LDR      R4,[R4, #+36]
   \   00000184   0E00A0E1           MOV      R0,LR
   \   00000188   E3FFFFEA           B        ??GetValue_12
    325                  }
    326                  break;
    327              case SVT_ROLLING_PERIOD:
    328                  Unit        = SECOND_UNIT;
   \                     ??GetValue_16:
   \   0000018C   1610A0E3           MOV      R1,#+22
   \   00000190   001083E5           STR      R1,[R3, #+0]
    329                  DecPnt      = 2;
   \   00000194   009080E5           STR      R9,[R0, #+0]
    330                  MyRetValue  = AvgRollingPeriod;
   \   00000198   640996E5           LDR      R0,[R6, #+2404]
   \   0000019C   C2FFFFEA           B        ??GetValue_9
    331                  break;
    332              case SVT_LIST_MAX_P:
    333                  Unit        = ANGLE_UNIT;
   \                     ??GetValue_17:
   \   000001A0   008083E5           STR      R8,[R3, #+0]
    334                  DecPnt      = 2;
   \   000001A4   009080E5           STR      R9,[R0, #+0]
    335                  MyRetValue  = MaxListP;
   \   000001A8   4C0996E5           LDR      R0,[R6, #+2380]
   \                     ??GetValue_18:
   \   000001AC   BEFFFFEA           B        ??GetValue_9
    336                  break;
    337              case SVT_LIST_MAX_S:
    338                  Unit        = ANGLE_UNIT;
   \                     ??GetValue_19:
   \   000001B0   008083E5           STR      R8,[R3, #+0]
    339                  DecPnt      = 2;
   \   000001B4   009080E5           STR      R9,[R0, #+0]
    340                  MyRetValue  = MaxListS;
   \   000001B8   480996E5           LDR      R0,[R6, #+2376]
   \   000001BC   BAFFFFEA           B        ??GetValue_9
    341                  break;
    342              case SVT_LIST_BUF_MAX_P:
    343                  Unit        = ANGLE_UNIT;
   \                     ??GetValue_20:
   \   000001C0   008083E5           STR      R8,[R3, #+0]
    344                  DecPnt      = 2;
   \   000001C4   009080E5           STR      R9,[R0, #+0]
    345                  MyRetValue  = MaxBufListP;
   \   000001C8   580996E5           LDR      R0,[R6, #+2392]
   \   000001CC   5C1996E5           LDR      R1,[R6, #+2396]
   \   000001D0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001D4   B4FFFFEA           B        ??GetValue_9
    346                  break;
    347              case SVT_LIST_BUF_MAX_S:
    348                  Unit        = ANGLE_UNIT;
   \                     ??GetValue_21:
   \   000001D8   008083E5           STR      R8,[R3, #+0]
    349                  DecPnt      = 2;
   \   000001DC   009080E5           STR      R9,[R0, #+0]
    350                  MyRetValue  = MaxBufListS;
   \   000001E0   500996E5           LDR      R0,[R6, #+2384]
   \   000001E4   541996E5           LDR      R1,[R6, #+2388]
   \   000001E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001EC   AEFFFFEA           B        ??GetValue_9
    351                  break;
    352              case SVT_ROLLING_FREQUENCY:
    353                  Unit        = FREQUENCY_UNIT;
   \                     ??GetValue_22:
   \   000001F0   1310A0E3           MOV      R1,#+19
   \   000001F4   001083E5           STR      R1,[R3, #+0]
    354                  DecPnt      = 2;
   \   000001F8   009080E5           STR      R9,[R0, #+0]
    355                  MyRetValue  = AvgFrequency;
   \   000001FC   680996E5           LDR      R0,[R6, #+2408]
   \   00000200   000085E5           STR      R0,[R5, #+0]
   \   00000204   070000EA           B        ??GetValue_5
    356                  break;
    357              default:
    358                  Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt,Unit);
   \                     ??GetValue_3:
   \   00000208   08002DE9           PUSH     {R3}
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   08109DE5           LDR      R1,[SP, #+8]
   \   00000214   0530A0E1           MOV      R3,R5
   \   00000218   0600A0E1           MOV      R0,R6
   \   0000021C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \                     ??GetValue_13:
   \   00000220   0040A0E1           MOV      R4,R0
   \   00000224   08D08DE2           ADD      SP,SP,#+8
    359                  break;
    360              }
    361              return(Status);
   \                     ??GetValue_5:
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   F24FBDE8           POP      {R1,R4-R11,LR}
   \   00000230   1EFF2FE1           BX       LR               ;; return
    362          }
    363          

   \                                 In segment CODE, align 4, keep-with-next
    364          int PROInclinometer::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    365          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    366              int Status = GETVAL_NO_ERR;
    367              //switch ( ValueId ) {
    368              //  default:
    369              Status = PRogramObject::GetStringValue(ValueId,Index, MyString);
    370              //      break;
    371              //}
    372              return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008                      REQUIRE ?Subroutine21
   \   00000008                      ;; // Fall through to label ?Subroutine21
    373          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    374          

   \                                 In segment CODE, align 4, keep-with-next
    375          int PROInclinometer::GetFloatValue(int ValueId, int Index, float &MyValue) {
   \                     ??GetFloatValue:
   \   00000000   20402DE9           PUSH     {R5,LR}
    376              int Status = GETVAL_NO_ERR;
   \   00000004   00C0A0E3           MOV      R12,#+0
    377              switch (ValueId) {
   \   00000008   5850A0E3           MOV      R5,#+88
   \   0000000C   505E85E3           ORR      R5,R5,#0x500
   \   00000010   050051E1           CMP      R1,R5
   \   00000014   0600001A           BNE      ??GetFloatValue_2
    378              case SVT_ROLLING_PERIOD:
    379                  MyValue  = AvgRollingPeriod;
   \   00000018   641990E5           LDR      R1,[R0, #+2404]
   \   0000001C   001083E5           STR      R1,[R3, #+0]
    380                  if (HWFailure) {
   \   00000020   3C00D0E5           LDRB     R0,[R0, #+60]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??GetFloatValue_3
    381                       Status     = GETVAL_HW_ALARM;
   \   0000002C   0FC0A0E3           MOV      R12,#+15
   \   00000030   010000EA           B        ??GetFloatValue_3
    382                   }
    383                  break;
    384              default:
    385                  Status = PRogramObject::GetFloatValue(ValueId, Index, MyValue);
   \                     ??GetFloatValue_2:
   \   00000034   ........           _BLF     ??GetFloatValue_1,??GetFloatValue??rA
   \   00000038   00C0A0E1           MOV      R12,R0
    386                  break;
    387              }
    388              return (Status);
   \                     ??GetFloatValue_3:
   \   0000003C   2040BDE8           POP      {R5,LR}
   \   00000040   0C00A0E1           MOV      R0,R12
   \   00000044   1EFF2FE1           BX       LR               ;; return
    389          }
    390          

   \                                 In segment CODE, align 4, keep-with-next
    391          int PROInclinometer::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    392          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C60DDE5           LDRB     R6,[SP, #+92]
   \   0000000C   60509DE5           LDR      R5,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0190A0E1           MOV      R9,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    393              int Status=E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
    394              switch ( ValueId ) {
   \   0000002C   B880A0E3           MOV      R8,#+184
   \   00000030   408E88E3           ORR      R8,R8,#0x400
   \   00000034   4B0049E2           SUB      R0,R9,#+75
   \   00000038   500E40E2           SUB      R0,R0,#+1280
   \   0000003C   070050E3           CMP      R0,#+7
   \   00000040   9200008A           BHI      ??PutValue_3
   \   00000044   012F8FE2           ADR      R2,??PutValue_1
   \   00000048   0020D2E7           LDRB     R2,[R2, R0]
   \   0000004C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   00000050   0129498F           DC8      +1,+41,+73,+143
   \   00000054   8F8F5F83           DC8      +143,+143,+95,+131
    395              case SVT_TRIM_M  :
    396                  if ( TrimSensor ) {
   \                     ??PutValue_4:
   \   00000058   7C0994E5           LDR      R0,[R4, #+2428]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   9D00000A           BEQ      ??PutValue_5
    397                      ValUnitId = LENGTH_UNIT;
   \   00000064   0120A0E3           MOV      R2,#+1
   \   00000068   04208DE5           STR      R2,[SP, #+4]
    398                      float NewTrim = ConvertToSi(NewValue, LENGTH_UNIT, Status,-10.0 ,5.0,0.0);
   \   0000006C   08008DE2           ADD      R0,SP,#+8
   \   00000070   ........           _BLF     ??string,??string??rA
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   03002DE9           PUSH     {R0,R1}
   \   00000080   4014A0E3           MOV      R1,#+1073741824
   \   00000084   501981E3           ORR      R1,R1,#0x140000
   \   00000088   03002DE9           PUSH     {R0,R1}
   \   0000008C   C014A0E3           MOV      R1,#-1073741824
   \   00000090   901981E3           ORR      R1,R1,#0x240000
   \   00000094   03002DE9           PUSH     {R0,R1}
   \   00000098   18208DE2           ADD      R2,SP,#+24
   \   0000009C   20008DE2           ADD      R0,SP,#+32
   \   000000A0   0800BDE8           POP      {R3}
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000AC   0070A0E1           MOV      R7,R0
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   1C008DE2           ADD      R0,SP,#+28
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    399                      if ( Status == E_NO_ERR ) {
   \   000000C0   14009DE5           LDR      R0,[SP, #+20]
   \   000000C4   14D08DE2           ADD      SP,SP,#+20
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   7F00001A           BNE      ??PutValue_6
    400                          NewTrim /= PROProjectInfo::LengthBetweenPP;
    401                          Status = TrimSensor->AdjustSensorF(NewTrim,Local);
   \   000000D0   ........           LDR      R1,??DataTable8  ;; ??LengthBetweenPP
   \                     ??PutValue_7:
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   ........           _BLF     __fDiv,??__fDiv??rA
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   7C0994E5           LDR      R0,[R4, #+2428]
   \   000000E8   0620A0E1           MOV      R2,R6
   \   000000EC   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   000000F0   00008DE5           STR      R0,[SP, #+0]
   \   000000F4   750000EA           B        ??PutValue_6
    402                      }
    403                  }
    404                  break;
    405              case SVT_TRIM_MARKS_M  :
    406                  if ( TrimSensor ) {
   \                     ??PutValue_8:
   \   000000F8   7C0994E5           LDR      R0,[R4, #+2428]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   7500000A           BEQ      ??PutValue_5
    407                      ValUnitId = LENGTH_UNIT;
   \   00000104   0120A0E3           MOV      R2,#+1
   \   00000108   04208DE5           STR      R2,[SP, #+4]
    408                      float NewTrim = ConvertToSi(NewValue, LENGTH_UNIT, Status,-10.0 ,5.0,0.0);
   \   0000010C   08008DE2           ADD      R0,SP,#+8
   \   00000110   ........           _BLF     ??string,??string??rA
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   0010A0E3           MOV      R1,#+0
   \   0000011C   03002DE9           PUSH     {R0,R1}
   \   00000120   4014A0E3           MOV      R1,#+1073741824
   \   00000124   501981E3           ORR      R1,R1,#0x140000
   \   00000128   03002DE9           PUSH     {R0,R1}
   \   0000012C   C014A0E3           MOV      R1,#-1073741824
   \   00000130   901981E3           ORR      R1,R1,#0x240000
   \   00000134   03002DE9           PUSH     {R0,R1}
   \   00000138   18208DE2           ADD      R2,SP,#+24
   \   0000013C   20008DE2           ADD      R0,SP,#+32
   \   00000140   0800BDE8           POP      {R3}
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   0000014C   0070A0E1           MOV      R7,R0
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   1C008DE2           ADD      R0,SP,#+28
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
    409                      if ( Status == E_NO_ERR ) {
   \   00000160   14009DE5           LDR      R0,[SP, #+20]
   \   00000164   14D08DE2           ADD      SP,SP,#+20
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   5700001A           BNE      ??PutValue_6
    410                          NewTrim /= PROProjectInfo::LengthBetweenMarks;
    411                          Status = TrimSensor->AdjustSensorF(NewTrim,Local);
   \   00000170   ........           LDR      R1,??DataTable9  ;; ??LengthBetweenMarks
   \   00000174   D6FFFFEA           B        ??PutValue_7
    412                      }
    413                  }
    414                  break;
    415              case SVT_TRIM_ANGLE:
    416                  if ( TrimSensor ) {
   \                     ??PutValue_9:
   \   00000178   7C0994E5           LDR      R0,[R4, #+2428]
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   5500000A           BEQ      ??PutValue_5
    417                      Status = TrimSensor->PutValue(SVT_AI_CALC_VAL, Index,NewValue,Local,&ValUnitId);
   \   00000184   A40090E5           LDR      R0,[R0, #+164]
   \   00000188   309080E2           ADD      R9,R0,#+48
   \   0000018C   08008DE2           ADD      R0,SP,#+8
   \   00000190   ........           _BLF     ??string,??string??rA
   \   00000194   04008DE2           ADD      R0,SP,#+4
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   40002DE9           PUSH     {R6}
   \   000001A0   7C0994E5           LDR      R0,[R4, #+2428]
   \                     ??PutValue_10:
   \   000001A4   006099E5           LDR      R6,[R9, #+0]
   \   000001A8   10308DE2           ADD      R3,SP,#+16
   \   000001AC   0720A0E1           MOV      R2,R7
   \   000001B0   0810A0E1           MOV      R1,R8
   \   000001B4   0FE0A0E1           MOV      LR,PC
   \   000001B8   16FF2FE1           BX       R6
   \   000001BC   08008DE5           STR      R0,[SP, #+8]
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   10008DE2           ADD      R0,SP,#+16
   \   000001CC   3D0000EA           B        ??PutValue_11
    418                  }
    419                  break;
    420              case SVT_LIST_M  :
    421                  if ( ListSensor ) {
   \                     ??PutValue_12:
   \   000001D0   800994E5           LDR      R0,[R4, #+2432]
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   3F00000A           BEQ      ??PutValue_5
    422                      ValUnitId = LENGTH_UNIT;
   \   000001DC   0120A0E3           MOV      R2,#+1
   \   000001E0   04208DE5           STR      R2,[SP, #+4]
    423                      float NewList = ConvertToSi(NewValue, LENGTH_UNIT, Status,-10.0 ,10.0,0.0);
   \   000001E4   08008DE2           ADD      R0,SP,#+8
   \   000001E8   ........           _BLF     ??string,??string??rA
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   0010A0E3           MOV      R1,#+0
   \   000001F4   03002DE9           PUSH     {R0,R1}
   \   000001F8   4014A0E3           MOV      R1,#+1073741824
   \   000001FC   901981E3           ORR      R1,R1,#0x240000
   \   00000200   03002DE9           PUSH     {R0,R1}
   \   00000204   801481E3           ORR      R1,R1,#0x80000000
   \   00000208   03002DE9           PUSH     {R0,R1}
   \   0000020C   18208DE2           ADD      R2,SP,#+24
   \   00000210   20008DE2           ADD      R0,SP,#+32
   \   00000214   0800BDE8           POP      {R3}
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000220   0070A0E1           MOV      R7,R0
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   1C008DE2           ADD      R0,SP,#+28
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
    424                      NewList /= PROProjectInfo::Width;
    425                      Status = ListSensor->AdjustSensorF(NewList,Local);
   \   00000234   ........           LDR      R1,??DataTable10  ;; ??Width
   \   00000238   0700A0E1           MOV      R0,R7
   \   0000023C   001091E5           LDR      R1,[R1, #+0]
   \   00000240   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000244   0010A0E1           MOV      R1,R0
   \   00000248   800994E5           LDR      R0,[R4, #+2432]
   \   0000024C   0620A0E1           MOV      R2,R6
   \   00000250   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   00000254   14008DE5           STR      R0,[SP, #+20]
   \   00000258   14D08DE2           ADD      SP,SP,#+20
   \   0000025C   1B0000EA           B        ??PutValue_6
    426                  }
    427                  break;
    428              case SVT_LIST_ANGLE:
    429                  if ( ListSensor ) {
   \                     ??PutValue_13:
   \   00000260   800994E5           LDR      R0,[R4, #+2432]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   1B00000A           BEQ      ??PutValue_5
    430                      Status = ListSensor->PutValue(SVT_AI_CALC_VAL, Index,NewValue,Local,&ValUnitId);
   \   0000026C   A40090E5           LDR      R0,[R0, #+164]
   \   00000270   309080E2           ADD      R9,R0,#+48
   \   00000274   08008DE2           ADD      R0,SP,#+8
   \   00000278   ........           _BLF     ??string,??string??rA
   \   0000027C   04008DE2           ADD      R0,SP,#+4
   \   00000280   01002DE9           PUSH     {R0}
   \   00000284   40002DE9           PUSH     {R6}
   \   00000288   800994E5           LDR      R0,[R4, #+2432]
   \   0000028C   C4FFFFEA           B        ??PutValue_10
    431                  }
    432                  break;
    433              default:
    434                  Status = PRogramObject::PutValue( ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   00000290   24008DE2           ADD      R0,SP,#+36
   \   00000294   ........           _BLF     ??string,??string??rA
   \   00000298   04008DE2           ADD      R0,SP,#+4
   \   0000029C   01002DE9           PUSH     {R0}
   \   000002A0   40002DE9           PUSH     {R6}
   \   000002A4   2C308DE2           ADD      R3,SP,#+44
   \   000002A8   0720A0E1           MOV      R2,R7
   \   000002AC   0910A0E1           MOV      R1,R9
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000002B8   08008DE5           STR      R0,[SP, #+8]
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   2C008DE2           ADD      R0,SP,#+44
   \                     ??PutValue_11:
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   08D08DE2           ADD      SP,SP,#+8
    435                  break;
    436              }
    437              if ( Status==E_NO_ERR ) {
   \                     ??PutValue_6:
   \   000002D0   00009DE5           LDR      R0,[SP, #+0]
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   0400001A           BNE      ??PutValue_14
    438                  SetModifiedFlag();
   \                     ??PutValue_5:
   \   000002DC   A41094E5           LDR      R1,[R4, #+164]
   \   000002E0   0400A0E1           MOV      R0,R4
   \   000002E4   541091E5           LDR      R1,[R1, #+84]
   \   000002E8   0FE0A0E1           MOV      LR,PC
   \   000002EC   11FF2FE1           BX       R1
    439              }
    440              if ( UnitId ) {
   \                     ??PutValue_14:
   \   000002F0   000055E3           CMP      R5,#+0
    441                  *UnitId = ValUnitId;
   \   000002F4   04009D15           LDRNE    R0,[SP, #+4]
   \   000002F8   00008515           STRNE    R0,[R5, #+0]
    442              }
    443              return(Status);
   \   000002FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000300   40D08DE2           ADD      SP,SP,#+64
   \   00000304   F043BDE8           POP      {R4-R9,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return
    444          }
    445          

   \                                 In segment CODE, align 4, keep-with-next
    446          int PROInclinometer::PutFloatValue( int ValueId, float NewValue)
    447          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0200A0E1           MOV      R0,R2
    448              int Status = E_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    449              switch ( ValueId ) {
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   572041E2           SUB      R2,R1,#+87
   \   00000018   502E42E2           SUB      R2,R2,#+1280
   \   0000001C   070052E3           CMP      R2,#+7
   \   00000020   1800008A           BHI      ??PutFloatValue_3
   \   00000024   013F8FE2           ADR      R3,??PutFloatValue_1
   \   00000028   0230D3E7           LDRB     R3,[R3, R2]
   \   0000002C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000030   08150A10           DC8      +8,+21,+10,+16
   \   00000034   15151501           DC8      +21,+21,+21,+1
    450              case SVT_RESET_MAX_LIST:
    451                  if ( NewValue ) {
   \                     ??PutFloatValue_4:
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   1300000A           BEQ      ??PutFloatValue_5
    452                      MaxListP = 0.0;
   \   00000048   4C6984E5           STR      R6,[R4, #+2380]
    453                      MaxListS = 0.0;
   \                     ??PutFloatValue_6:
   \   0000004C   486984E5           STR      R6,[R4, #+2376]
   \   00000050   100000EA           B        ??PutFloatValue_5
    454                  }
    455                  break;
    456              case SVT_LIST_ROLL_FILTER:
    457                  ListRollFilter = NewValue;
   \                     ??PutFloatValue_7:
   \   00000054   600984E5           STR      R0,[R4, #+2400]
   \   00000058   0E0000EA           B        ??PutFloatValue_5
    458                  break;
    459              case SVT_LIST_MAX_P:
    460                  if ( NewValue ) {
   \                     ??PutFloatValue_8:
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0A00000A           BEQ      ??PutFloatValue_5
    461                      MaxListP = 0.0;
   \   0000006C   4C6984E5           STR      R6,[R4, #+2380]
   \   00000070   080000EA           B        ??PutFloatValue_5
    462                  }
    463                  break;
    464              case SVT_LIST_MAX_S:
    465                  if ( NewValue ) {
   \                     ??PutFloatValue_9:
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0400000A           BEQ      ??PutFloatValue_5
    466                      MaxListS = 0.0;
   \   00000084   F0FFFFEA           B        ??PutFloatValue_6
    467                  }
    468                  break;
    469              default:
    470                  Status = PRogramObject::PutFloatValue(ValueId,NewValue);
   \                     ??PutFloatValue_3:
   \   00000088   0020A0E1           MOV      R2,R0
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     ??PutFloatValue_2,??PutFloatValue??rA
   \   00000094   0050A0E1           MOV      R5,R0
    471                  break;
    472              }
    473              return(Status);
   \                     ??PutFloatValue_5:
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           B        ?Subroutine25
    474          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    475          

   \                                 In segment CODE, align 4, keep-with-next
    476          ValueList *PROInclinometer::GetValueInfoTableStatic(int &Entries, int Index)
    477          {
    478              Entries = 0;
   \                     ??GetValueInfoTableStatic:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
    479              return(NULL);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    480          }
    481          
    482          
    483          
    484          
    485          ////////////////////////////////////////////////////////////////////
    486          //
    487          //  Calculations
    488          
    489          #define SEIKA_SENSITIVITY double(5.07e-3)
    490          #pragma diag_suppress=Pa082

   \                                 In segment CODE, align 4, keep-with-next
    491          void PROInclinometer::Calculate(void)
    492          {
   \                     ??Calculate:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    493          #ifdef S2TXU
    494              HWFailure = false;
    495              if ( TrimSensor ) {
   \   00000004   DC539FE5           LDR      R5,??Calculate_1  ;; ??tmpHeelLog
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   3C00C4E5           STRB     R0,[R4, #+60]
   \   00000014   7C1994E5           LDR      R1,[R4, #+2428]
   \   00000018   3680A0E3           MOV      R8,#+54
   \   0000001C   408F88E3           ORR      R8,R8,#0x100
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   1400000A           BEQ      ??Calculate_2
    496                  TrimValue    = TrimSensor->Calculate();
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   A41091E5           LDR      R1,[R1, #+164]
   \   00000030   601091E5           LDR      R1,[R1, #+96]
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   11FF2FE1           BX       R1
   \   0000003C   080885E5           STR      R0,[R5, #+2056]
    497                  CheckAlarms(TrimSensor->AlarmSet,&TrimSensor->MyHWFailure);
   \   00000040   7C0994E5           LDR      R0,[R4, #+2428]
   \   00000044   291048E2           SUB      R1,R8,#+41
   \   00000048   001081E0           ADD      R1,R1,R0
   \   0000004C   C00080E2           ADD      R0,R0,#+192
   \   00000050   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    498                  TrimSensor->SendData();
   \   00000054   7C2994E5           LDR      R2,[R4, #+2428]
   \   00000058   6510A0E3           MOV      R1,#+101
   \   0000005C   0200A0E1           MOV      R0,R2
   \   00000060   A42092E5           LDR      R2,[R2, #+164]
   \   00000064   402092E5           LDR      R2,[R2, #+64]
   \   00000068   0FE0A0E1           MOV      LR,PC
   \   0000006C   12FF2FE1           BX       R2
    499                  HasTrimValue = TrimSensor->ResultOK;
   \   00000070   7C0994E5           LDR      R0,[R4, #+2428]
   \   00000074   0000D8E7           LDRB     R0,[R8, +R0]
   \   00000078   1C09C5E5           STRB     R0,[R5, #+2332]
    500              }
    501          
    502              if ( ListSensor ) {
   \                     ??Calculate_2:
   \   0000007C   801994E5           LDR      R1,[R4, #+2432]
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   CF00000A           BEQ      ??Calculate_3
    503                  if ( FrequencyCalc ) {
   \   00000088   8809D4E5           LDRB     R0,[R4, #+2440]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0100A0E1           MOV      R0,R1
   \   00000094   A41091E5           LDR      R1,[R1, #+164]
   \   00000098   601091E5           LDR      R1,[R1, #+96]
   \   0000009C   B800000A           BEQ      ??Calculate_4
    504                      static double tmpHeelLog[ROL_LIST_ENTRIES + 1];
    505                      ListValue    = ListSensor->Calculate();
   \   000000A0   0FE0A0E1           MOV      LR,PC
   \   000000A4   11FF2FE1           BX       R1
   \   000000A8   0C0885E5           STR      R0,[R5, #+2060]
    506                      CheckAlarms(ListSensor->AlarmSet);
   \   000000AC   800994E5           LDR      R0,[R4, #+2432]
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   C00080E2           ADD      R0,R0,#+192
   \   000000B8   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    507                      ListSensor->SendData();
   \   000000BC   802994E5           LDR      R2,[R4, #+2432]
   \   000000C0   6510A0E3           MOV      R1,#+101
   \   000000C4   0200A0E1           MOV      R0,R2
   \   000000C8   A42092E5           LDR      R2,[R2, #+164]
    508                      HasListValue = ListSensor->ResultOK;
    509                      ListSema->Acquire();
    510                      memcpy(tmpHeelLog,HeelLog,ROL_LIST_ENTRIES*sizeof(double));
    511                      ListSema->Release();
    512          
    513                      double MaxS = 0.0;
   \   000000CC   00A0A0E3           MOV      R10,#+0
   \   000000D0   402092E5           LDR      R2,[R2, #+64]
   \   000000D4   00B0A0E3           MOV      R11,#+0
   \   000000D8   0FE0A0E1           MOV      LR,PC
   \   000000DC   12FF2FE1           BX       R2
   \   000000E0   800994E5           LDR      R0,[R4, #+2432]
    514                      double MaxP = 0.0;
   \   000000E4   0A60A0E1           MOV      R6,R10
   \   000000E8   0000D8E7           LDRB     R0,[R8, +R0]
   \   000000EC   0670A0E1           MOV      R7,R6
   \   000000F0   1D09C5E5           STRB     R0,[R5, #+2333]
   \   000000F4   700994E5           LDR      R0,[R4, #+2416]
   \   000000F8   ........           _BLF     ??Acquire,??Acquire??rA
   \   000000FC   802EA0E3           MOV      R2,#+2048
   \   00000100   521F84E2           ADD      R1,R4,#+328
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           _BLF     memcpy,??memcpy??rA
   \   0000010C   700994E5           LDR      R0,[R4, #+2416]
   \   00000110   ........           _BLF     ??Release,??Release??rA
    515                      for ( int i=0; i < ROL_LIST_ENTRIES-1; i++ ) {
   \   00000114   0610A0E1           MOV      R1,R6
   \   00000118   00108DE5           STR      R1,[SP, #+0]
   \                     ??Calculate_5:
   \   0000011C   00009DE5           LDR      R0,[SP, #+0]
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   800185E0           ADD      R0,R5,R0, LSL #+3
   \   00000128   000390E8           LDM      R0,{R8,R9}
   \   0000012C   0030A0E3           MOV      R3,#+0
   \   00000130   0800A0E1           MOV      R0,R8
   \   00000134   0910A0E1           MOV      R1,R9
   \   00000138   ........           _BLF     __dLess,??__dLess??rA
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0900000A           BEQ      ??Calculate_6
    516                          if ( tmpHeelLog[i] < 0.0  ) {
    517                              MaxP = min(MaxP, tmpHeelLog[i]);
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   0710A0E1           MOV      R1,R7
   \   0000014C   0820A0E1           MOV      R2,R8
   \   00000150   0930A0E1           MOV      R3,R9
   \   00000154   ........           _BLF     __dLess,??__dLess??rA
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   1100001A           BNE      ??Calculate_7
   \   00000160   0860A0E1           MOV      R6,R8
   \   00000164   0970A0E1           MOV      R7,R9
   \   00000168   0E0000EA           B        ??Calculate_7
    518                          } else if ( tmpHeelLog[i] > 0.0 ) {
   \                     ??Calculate_6:
   \   0000016C   0800A0E1           MOV      R0,R8
   \   00000170   0910A0E1           MOV      R1,R9
   \   00000174   0120A0E3           MOV      R2,#+1
   \   00000178   0030A0E3           MOV      R3,#+0
   \   0000017C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0700000A           BEQ      ??Calculate_7
    519                              MaxS = max(MaxS, tmpHeelLog[i]);
   \   00000188   0800A0E1           MOV      R0,R8
   \   0000018C   0910A0E1           MOV      R1,R9
   \   00000190   0A20A0E1           MOV      R2,R10
   \   00000194   0B30A0E1           MOV      R3,R11
   \   00000198   ........           _BLF     __dLess,??__dLess??rA
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   08A0A001           MOVEQ    R10,R8
   \   000001A4   09B0A001           MOVEQ    R11,R9
    520                          }
    521                      }
   \                     ??Calculate_7:
   \   000001A8   00109DE5           LDR      R1,[SP, #+0]
   \   000001AC   011081E2           ADD      R1,R1,#+1
   \   000001B0   00108DE5           STR      R1,[SP, #+0]
   \   000001B4   FF0051E3           CMP      R1,#+255
   \   000001B8   D7FFFFBA           BLT      ??Calculate_5
    522                      MaxBufListS = MaxS;
   \   000001BC   50A984E5           STR      R10,[R4, #+2384]
   \   000001C0   54B984E5           STR      R11,[R4, #+2388]
    523                      MaxBufListP = MaxP;
   \   000001C4   586984E5           STR      R6,[R4, #+2392]
   \   000001C8   5C7984E5           STR      R7,[R4, #+2396]
    524                      double DiffAngle = abs(MaxS-MaxP);
   \   000001CC   0A00A0E1           MOV      R0,R10
   \   000001D0   0B10A0E1           MOV      R1,R11
   \   000001D4   0620A0E1           MOV      R2,R6
   \   000001D8   0730A0E1           MOV      R3,R7
   \   000001DC   ........           _BLF     __dSub,??__dSub??rA
    525                      if ( DiffAngle > ROL_MIN_FREQ_CALC_ANGLE ) {
   \   000001E0   04229FE5           LDR      R2,??Calculate_1+0x4  ;; 0x3b761f6
   \   000001E4   04329FE5           LDR      R3,??Calculate_1+0x8  ;; 0x3f6c9871
   \   000001E8   8014C1E3           BIC      R1,R1,#0x80000000
   \   000001EC   0080A0E3           MOV      R8,#+0
   \   000001F0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   5E00000A           BEQ      ??Calculate_8
    526                          if ( !RollingTimeStart ) {
   \   000001FC   6C0994E5           LDR      R0,[R4, #+2412]
   \   00000200   ........           LDR      R1,??DataTable14  ;; OS_Time
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   0200001A           BNE      ??Calculate_9
    527                              RollingTimeStart = OS_Time;
   \   0000020C   000091E5           LDR      R0,[R1, #+0]
   \                     ??Calculate_10:
   \   00000210   6C0984E5           STR      R0,[R4, #+2412]
   \   00000214   6B0000EA           B        ??Calculate_3
    528                          } else if ( OS_Time - RollingTimeStart > ROL_LIST_ENTRIES*ROL_LIST_LOG_INTERVAL ) {
   \                     ??Calculate_9:
   \   00000218   001091E5           LDR      R1,[R1, #+0]
   \   0000021C   000041E0           SUB      R0,R1,R0
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   7D1B81E3           ORR      R1,R1,#0x1F400
   \   00000228   010050E1           CMP      R0,R1
   \   0000022C   4E0000BA           BLT      ??Calculate_11
    529                              static int ip[NMAXSQRT + 2];
    530                              static double w[ROL_LIST_ENTRIES * 5 / 4];
    531          
    532                              ip[0] = 0;
    533                              rdft(ROL_LIST_ENTRIES, 1, tmpHeelLog, ip, w);
   \   00000230   BC819FE5           LDR      R8,??Calculate_1+0xC  ;; ??w
   \   00000234   1400A0E3           MOV      R0,#+20
   \   00000238   800E80E3           ORR      R0,R0,#0x800
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   051080E7           STR      R1,[R0, +R5]
   \   00000244   0810A0E1           MOV      R1,R8
   \   00000248   02002DE9           PUSH     {R1}
   \   0000024C   053080E0           ADD      R3,R0,R5
   \   00000250   0520A0E1           MOV      R2,R5
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   400FA0E3           MOV      R0,#+256
   \   0000025C   ........           _BLF     ??rdft,??rdft??rA
    534                              double Sum = 0.0;
   \   00000260   0000A0E3           MOV      R0,#+0
   \   00000264   0010A0E1           MOV      R1,R0
    535                              for ( int i=1; i < ROL_LIST_ENTRIES/2; i++ ) {
   \   00000268   0190A0E3           MOV      R9,#+1
   \   0000026C   04D08DE2           ADD      SP,SP,#+4
    536                                  Sum += tmpHeelLog[2*i+1];
   \                     ??Calculate_12:
   \   00000270   09A285E0           ADD      R10,R5,R9, LSL #+4
   \   00000274   08209AE5           LDR      R2,[R10, #+8]
   \   00000278   0C309AE5           LDR      R3,[R10, #+12]
    537                              }
   \   0000027C   019089E2           ADD      R9,R9,#+1
   \   00000280   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000284   800059E3           CMP      R9,#+128
   \   00000288   F8FFFFBA           BLT      ??Calculate_12
    538                              double Average = Sum / (ROL_LIST_ENTRIES/2);
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   4034A0E3           MOV      R3,#+1073741824
   \   00000294   603883E3           ORR      R3,R3,#0x600000
   \   00000298   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000029C   0060A0E1           MOV      R6,R0
   \   000002A0   0170A0E1           MOV      R7,R1
    539                              for ( int i=1; i < ROL_LIST_ENTRIES/2; i++ ) {
   \   000002A4   0190A0E3           MOV      R9,#+1
    540                                  w[i] = abs(tmpHeelLog[2*i+1]-Average);
   \                     ??Calculate_13:
   \   000002A8   092285E0           ADD      R2,R5,R9, LSL #+4
   \   000002AC   080092E5           LDR      R0,[R2, #+8]
   \   000002B0   0C1092E5           LDR      R1,[R2, #+12]
   \   000002B4   89A188E0           ADD      R10,R8,R9, LSL #+3
   \   000002B8   0620A0E1           MOV      R2,R6
   \   000002BC   0730A0E1           MOV      R3,R7
   \   000002C0   ........           _BLF     __dSub,??__dSub??rA
   \   000002C4   8014C1E3           BIC      R1,R1,#0x80000000
   \   000002C8   03008AE8           STM      R10,{R0,R1}
    541                              }
   \   000002CC   019089E2           ADD      R9,R9,#+1
   \   000002D0   800059E3           CMP      R9,#+128
   \   000002D4   F3FFFFBA           BLT      ??Calculate_13
    542                              double Frequency = FindFrequencey(1,ROL_LIST_ENTRIES/2,ROL_LIST_ENTRIES/2,w)/double(ROL_LIST_ENTRIES/2.0);
   \   000002D8   0830A0E1           MOV      R3,R8
   \   000002DC   8020A0E3           MOV      R2,#+128
   \   000002E0   8010A0E3           MOV      R1,#+128
   \   000002E4   0100A0E3           MOV      R0,#+1
   \   000002E8   ........           _BLF     ??FindFrequencey,??FindFrequencey??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   4034A0E3           MOV      R3,#+1073741824
   \   000002F4   603883E3           ORR      R3,R3,#0x600000
   \   000002F8   ........           _BLF     __dDiv,??__dDiv??rA
    543                              if ( Frequency > double(1.0/60.0) && Frequency < double(1.0/5.0)) {
   \   000002FC   F4209FE5           LDR      R2,??Calculate_1+0x10  ;; 0x11111112
   \   00000300   F4309FE5           LDR      R3,??Calculate_1+0x14  ;; 0x3f911111
   \   00000304   0060A0E1           MOV      R6,R0
   \   00000308   0170A0E1           MOV      R7,R1
   \   0000030C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   2B00000A           BEQ      ??Calculate_3
   \   00000318   E0209FE5           LDR      R2,??Calculate_1+0x18  ;; 0xffffffff9999999a
   \   0000031C   E0309FE5           LDR      R3,??Calculate_1+0x1C  ;; 0x3fc99999
   \   00000320   0600A0E1           MOV      R0,R6
   \   00000324   0710A0E1           MOV      R1,R7
   \   00000328   ........           _BLF     __dLess,??__dLess??rA
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   2400000A           BEQ      ??Calculate_3
    544                                  AvgFrequency = FilterVal(AvgFrequency,Frequency,ListRollFilter);
   \   00000334   605994E5           LDR      R5,[R4, #+2400]
   \   00000338   0600A0E1           MOV      R0,R6
   \   0000033C   0710A0E1           MOV      R1,R7
   \   00000340   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000344   0010A0E1           MOV      R1,R0
   \   00000348   680994E5           LDR      R0,[R4, #+2408]
   \   0000034C   0520A0E1           MOV      R2,R5
   \   00000350   ........           _BLF     ??FilterVal,??FilterVal??rA
   \   00000354   680984E5           STR      R0,[R4, #+2408]
    545                                  AvgRollingPeriod = 1/AvgFrequency;
   \   00000358   681994E5           LDR      R1,[R4, #+2408]
   \   0000035C   FE05A0E3           MOV      R0,#+1065353216
   \   00000360   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000364   640984E5           STR      R0,[R4, #+2404]
   \   00000368   160000EA           B        ??Calculate_3
    546                              }
    547                          } else {
    548                              AvgRollingPeriod = 0.0;
   \                     ??Calculate_11:
   \   0000036C   648984E5           STR      R8,[R4, #+2404]
    549                              AvgFrequency     = 0.0;
   \   00000370   688984E5           STR      R8,[R4, #+2408]
   \   00000374   130000EA           B        ??Calculate_3
    550                          }
    551                      } else {
    552                          AvgRollingPeriod = 0.0;
   \                     ??Calculate_8:
   \   00000378   648984E5           STR      R8,[R4, #+2404]
    553                          AvgFrequency     = 0.0;
   \   0000037C   688984E5           STR      R8,[R4, #+2408]
    554                          RollingTimeStart = 0;
   \   00000380   A2FFFFEA           B        ??Calculate_10
    555                      }
    556                  }else{ // End if FrequencyCalc
    557                      ListValue    = ListSensor->Calculate();
   \                     ??Calculate_4:
   \   00000384   0FE0A0E1           MOV      LR,PC
   \   00000388   11FF2FE1           BX       R1
   \   0000038C   0C0885E5           STR      R0,[R5, #+2060]
    558                      CheckAlarms(ListSensor->AlarmSet);
   \   00000390   800994E5           LDR      R0,[R4, #+2432]
   \   00000394   0010A0E3           MOV      R1,#+0
   \   00000398   C00080E2           ADD      R0,R0,#+192
   \   0000039C   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    559                      ListSensor->SendData();
   \   000003A0   802994E5           LDR      R2,[R4, #+2432]
   \   000003A4   6510A0E3           MOV      R1,#+101
   \   000003A8   0200A0E1           MOV      R0,R2
   \   000003AC   A42092E5           LDR      R2,[R2, #+164]
   \   000003B0   402092E5           LDR      R2,[R2, #+64]
   \   000003B4   0FE0A0E1           MOV      LR,PC
   \   000003B8   12FF2FE1           BX       R2
    560                      HasListValue = ListSensor->ResultOK;
   \   000003BC   800994E5           LDR      R0,[R4, #+2432]
   \   000003C0   0000D8E7           LDRB     R0,[R8, +R0]
   \   000003C4   1D09C5E5           STRB     R0,[R5, #+2333]
    561                  }
    562          
    563              }
    564              SendData();
   \                     ??Calculate_3:
   \   000003C8   A42094E5           LDR      R2,[R4, #+164]
   \   000003CC   6510A0E3           MOV      R1,#+101
   \   000003D0   402092E5           LDR      R2,[R2, #+64]
   \   000003D4   0400A0E1           MOV      R0,R4
   \   000003D8   0FE0A0E1           MOV      LR,PC
   \   000003DC   12FF2FE1           BX       R2
    565          #endif
    566          }
   \   000003E0   F14FBDE8           POP      {R0,R4-R11,LR}
   \   000003E4   1EFF2FE1           BX       LR               ;; return
   \                     ??Calculate_1:
   \   000003E8   ........           DC32     ??tmpHeelLog
   \   000003EC   F661B703           DC32     0x3b761f6
   \   000003F0   71986C3F           DC32     0x3f6c9871
   \   000003F4   ........           DC32     ??w
   \   000003F8   12111111           DC32     0x11111112
   \   000003FC   1111913F           DC32     0x3f911111
   \   00000400   9A999999           DC32     0xffffffff9999999a
   \   00000404   9999C93F           DC32     0x3fc99999

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??tmpHeelLog:
   \   00000000                      DS8 2056
   \                     ??TrimValue:
   \   00000808                      DS8 4
   \                     ??ListValue:
   \   0000080C                      DS8 4
   \                     ??PROInclinPtr:
   \   00000810                      DS8 4
   \   00000814                      DS8 264
   \                     ??HasTrimValue:
   \   0000091C                      DS8 1
   \                     ??HasListValue:
   \   0000091D                      DS8 1

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??TaskStack:
   \   00000000                      DS8 2048

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??TaskHandle:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??w:
   \   00000000                      DS8 2560
    567          
    568          

   \                                 In segment CODE, align 4, keep-with-next
    569          int PROInclinometer::ReceiveData(U8* data)
    570          {
   \                     ??ReceiveData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    571              int ErrorStatus = E_OK;
    572              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
    573              switch ( pCH->CommandNo ) {
   \   00000010   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000014   0010D4E5           LDRB     R1,[R4, #+0]
   \   00000018   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000001C   650050E2           SUBS     R0,R0,#+101
   \   00000020   0200000A           BEQ      ??ReceiveData_1
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   4300000A           BEQ      ??ReceiveData_2
   \   0000002C   440000EA           B        ??ReceiveData_3
    574              case CMD_GENERIC_REALTIME_DATA:
    575                  {
    576                      ANPRO10_COMMAND_2710  *pData = (ANPRO10_COMMAND_2710*) data;
    577                      ErrorStatus     =  E_OK;
   \                     ??ReceiveData_1:
   \   00000030   0060A0E3           MOV      R6,#+0
    578                      TrimValue       = pData->Trim;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0D10A0E1           MOV      R1,SP
   \                     ??ReceiveData_4:
   \   0000003C   082084E2           ADD      R2,R4,#+8
   \   00000040   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000044   0120C0E7           STRB     R2,[R0, +R1]
   \   00000048   010080E2           ADD      R0,R0,#+1
   \   0000004C   040050E3           CMP      R0,#+4
   \   00000050   F9FFFFBA           BLT      ??ReceiveData_4
   \   00000054   ........           LDR      R0,??DataTable13  ;; ??tmpHeelLog
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
    579                      ListValue       = pData->List;
   \   0000005C   04208DE2           ADD      R2,SP,#+4
   \   00000060   081880E5           STR      R1,[R0, #+2056]
   \   00000064   0010A0E3           MOV      R1,#+0
   \                     ??ReceiveData_5:
   \   00000068   0C3084E2           ADD      R3,R4,#+12
   \   0000006C   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000070   0230C1E7           STRB     R3,[R1, +R2]
   \   00000074   011081E2           ADD      R1,R1,#+1
   \   00000078   040051E3           CMP      R1,#+4
   \   0000007C   F9FFFFBA           BLT      ??ReceiveData_5
   \   00000080   04109DE5           LDR      R1,[SP, #+4]
   \   00000084   0C1880E5           STR      R1,[R0, #+2060]
    580                      AvgRollingPeriod= pData->RolPeriod;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   08108DE2           ADD      R1,SP,#+8
   \                     ??ReceiveData_6:
   \   00000090   102084E2           ADD      R2,R4,#+16
   \   00000094   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000098   0120C0E7           STRB     R2,[R0, +R1]
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   040050E3           CMP      R0,#+4
   \   000000A4   F9FFFFBA           BLT      ??ReceiveData_6
   \   000000A8   08009DE5           LDR      R0,[SP, #+8]
    581                      AvgFrequency    = pData->RolFrequency;
   \   000000AC   0C108DE2           ADD      R1,SP,#+12
   \   000000B0   640985E5           STR      R0,[R5, #+2404]
   \   000000B4   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_7:
   \   000000B8   142084E2           ADD      R2,R4,#+20
   \   000000BC   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000C0   0120C0E7           STRB     R2,[R0, +R1]
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   040050E3           CMP      R0,#+4
   \   000000CC   F9FFFFBA           BLT      ??ReceiveData_7
   \   000000D0   0C009DE5           LDR      R0,[SP, #+12]
    582                      MaxBufListS     = pData->MaxS;
   \   000000D4   10108DE2           ADD      R1,SP,#+16
   \   000000D8   680985E5           STR      R0,[R5, #+2408]
   \   000000DC   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_8:
   \   000000E0   1C2084E2           ADD      R2,R4,#+28
   \   000000E4   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000E8   0120C0E7           STRB     R2,[R0, +R1]
   \   000000EC   010080E2           ADD      R0,R0,#+1
   \   000000F0   040050E3           CMP      R0,#+4
   \   000000F4   F9FFFFBA           BLT      ??ReceiveData_8
   \   000000F8   10009DE5           LDR      R0,[SP, #+16]
   \   000000FC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000100   500985E5           STR      R0,[R5, #+2384]
   \   00000104   541985E5           STR      R1,[R5, #+2388]
    583                      MaxBufListP     = pData->MaxP;
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   14108DE2           ADD      R1,SP,#+20
   \                     ??ReceiveData_9:
   \   00000110   182084E2           ADD      R2,R4,#+24
   \   00000114   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000118   0120C0E7           STRB     R2,[R0, +R1]
   \   0000011C   010080E2           ADD      R0,R0,#+1
   \   00000120   040050E3           CMP      R0,#+4
   \   00000124   F9FFFFBA           BLT      ??ReceiveData_9
   \   00000128   14009DE5           LDR      R0,[SP, #+20]
   \   0000012C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000130   580985E5           STR      R0,[R5, #+2392]
   \   00000134   5C1985E5           STR      R1,[R5, #+2396]
   \   00000138   020000EA           B        ??ReceiveData_10
    584                  }
    585                  break;
    586              case CMD_GENERIC_STATIC_DATA :
    587                  {
    588                      //ANPRO10_COMMAND_2711  *pData = (ANPRO10_COMMAND_2711*) data;
    589                      ErrorStatus =  E_OK;
   \                     ??ReceiveData_2:
   \   0000013C   0060A0E3           MOV      R6,#+0
   \   00000140   000000EA           B        ??ReceiveData_10
    590                  }
    591                  break;
    592              default:
    593                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_3:
   \   00000144   0160A0E3           MOV      R6,#+1
    594                  break;
    595              }
    596              return(ErrorStatus);
   \                     ??ReceiveData_10:
   \   00000148   0600A0E1           MOV      R0,R6
   \   0000014C   18D08DE2           ADD      SP,SP,#+24
   \   00000150                      REQUIRE ?Subroutine25
   \   00000150                      ;; // Fall through to label ?Subroutine25
    597          }
    598          

   \                                 In segment CODE, align 4, keep-with-next
    599          int PROInclinometer::SendData(U16 cmd)
    600          {
   \                     ??SendData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
    601              int ErrorStatus = E_OK;
    602              switch ( cmd ) {
   \   0000000C   0E00A0E3           MOV      R0,#+14
   \   00000010   FF20A0E3           MOV      R2,#+255
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   651051E2           SUBS     R1,R1,#+101
   \   0000001C   0200000A           BEQ      ??SendData_1
   \   00000020   011051E2           SUBS     R1,R1,#+1
   \   00000024   5400000A           BEQ      ??SendData_2
   \   00000028   670000EA           B        ??SendData_3
    603              case CMD_GENERIC_REALTIME_DATA:
    604                  {
    605                      QueueANPRO10_COMMAND_2710 Cmd;
    606                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_1:
   \   0000002C   14308DE5           STR      R3,[SP, #+20]
    607                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000030   1820CDE5           STRB     R2,[SP, #+24]
    608                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   00000034   1900CDE5           STRB     R0,[SP, #+25]
    609          
    610                      Cmd.Data.ObjectId       = IDNumber;
   \   00000038   9C0094E5           LDR      R0,[R4, #+156]
    611                      Cmd.Data.ndb            = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   1C10A0E3           MOV      R1,#+28
   \   00000040   1E00CDE5           STRB     R0,[SP, #+30]
   \   00000044   2004A0E1           LSR      R0,R0,#+8
   \   00000048   1F00CDE5           STRB     R0,[SP, #+31]
   \   0000004C   2004A0E1           LSR      R0,R0,#+8
   \   00000050   2000CDE5           STRB     R0,[SP, #+32]
   \   00000054   2004A0E1           LSR      R0,R0,#+8
   \   00000058   2100CDE5           STRB     R0,[SP, #+33]
   \   0000005C   BC11CDE1           STRH     R1,[SP, #+28]
    612                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000060   6510A0E3           MOV      R1,#+101
   \   00000064   BA11CDE1           STRH     R1,[SP, #+26]
    613                      Cmd.Data.Trim           = TrimValue;
   \   00000068   ........           LDR      R1,??DataTable13  ;; ??tmpHeelLog
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   22208DE2           ADD      R2,SP,#+34
   \                     ??SendData_4:
   \   00000074   013080E0           ADD      R3,R0,R1
   \   00000078   0838D3E5           LDRB     R3,[R3, #+2056]
   \   0000007C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000080   010080E2           ADD      R0,R0,#+1
   \   00000084   040050E3           CMP      R0,#+4
   \   00000088   F9FFFFBA           BLT      ??SendData_4
    614                      Cmd.Data.List           = ListValue;
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   26208DE2           ADD      R2,SP,#+38
   \                     ??SendData_5:
   \   00000094   013080E0           ADD      R3,R0,R1
   \   00000098   0C38D3E5           LDRB     R3,[R3, #+2060]
   \   0000009C   0230C0E7           STRB     R3,[R0, +R2]
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   040050E3           CMP      R0,#+4
   \   000000A8   F9FFFFBA           BLT      ??SendData_5
    615                      Cmd.Data.RolPeriod      = AvgRollingPeriod;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   2A108DE2           ADD      R1,SP,#+42
   \                     ??SendData_6:
   \   000000B4   6420A0E3           MOV      R2,#+100
   \   000000B8   902E82E3           ORR      R2,R2,#0x900
   \   000000BC   042082E0           ADD      R2,R2,R4
   \   000000C0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000C4   0120C0E7           STRB     R2,[R0, +R1]
   \   000000C8   010080E2           ADD      R0,R0,#+1
   \   000000CC   040050E3           CMP      R0,#+4
   \   000000D0   F7FFFFBA           BLT      ??SendData_6
    616                      Cmd.Data.RolFrequency   = AvgFrequency;
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   2E108DE2           ADD      R1,SP,#+46
   \                     ??SendData_7:
   \   000000DC   6820A0E3           MOV      R2,#+104
   \   000000E0   902E82E3           ORR      R2,R2,#0x900
   \   000000E4   042082E0           ADD      R2,R2,R4
   \   000000E8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000EC   0120C0E7           STRB     R2,[R0, +R1]
   \   000000F0   010080E2           ADD      R0,R0,#+1
   \   000000F4   040050E3           CMP      R0,#+4
   \   000000F8   F7FFFFBA           BLT      ??SendData_7
    617                      Cmd.Data.MaxP           = MaxBufListP;
   \   000000FC   580994E5           LDR      R0,[R4, #+2392]
   \   00000100   5C1994E5           LDR      R1,[R4, #+2396]
   \   00000104   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000108   00008DE5           STR      R0,[SP, #+0]
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   32108DE2           ADD      R1,SP,#+50
   \                     ??SendData_8:
   \   00000114   0D20A0E1           MOV      R2,SP
   \   00000118   0220D0E7           LDRB     R2,[R0, +R2]
   \   0000011C   0120C0E7           STRB     R2,[R0, +R1]
   \   00000120   010080E2           ADD      R0,R0,#+1
   \   00000124   040050E3           CMP      R0,#+4
   \   00000128   F9FFFFBA           BLT      ??SendData_8
    618                      Cmd.Data.MaxS           = MaxBufListS;
   \   0000012C   500994E5           LDR      R0,[R4, #+2384]
   \   00000130   541994E5           LDR      R1,[R4, #+2388]
   \   00000134   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000138   00008DE5           STR      R0,[SP, #+0]
   \   0000013C   0000A0E3           MOV      R0,#+0
   \   00000140   36108DE2           ADD      R1,SP,#+54
   \                     ??SendData_9:
   \   00000144   0D20A0E1           MOV      R2,SP
   \   00000148   0220D0E7           LDRB     R2,[R0, +R2]
   \   0000014C   0120C0E7           STRB     R2,[R0, +R1]
   \   00000150   010080E2           ADD      R0,R0,#+1
   \   00000154   040050E3           CMP      R0,#+4
   \   00000158   F9FFFFBA           BLT      ??SendData_9
    619                      bool sent = ANPRO10SendNormal(&Cmd);
    620                      if ( !sent ) {
   \   0000015C   14008DE2           ADD      R0,SP,#+20
   \   00000160   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0100001A           BNE      ??SendData_10
    621                          ErrorStatus =  E_QUEUE_FULL;
   \                     ??SendData_11:
   \   0000016C   0300A0E3           MOV      R0,#+3
   \   00000170   160000EA           B        ??SendData_12
    622                      } else {
    623                          ErrorStatus =  E_OK;
   \                     ??SendData_10:
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   140000EA           B        ??SendData_12
    624                      }
    625                  }
    626                  break;
    627              case CMD_GENERIC_STATIC_DATA:
    628                  {
    629                      QueueANPRO10_COMMAND_2711 Cmd;
    630          
    631                      Cmd.TxInfo.Port    = NULL;
   \                     ??SendData_2:
   \   0000017C   04308DE5           STR      R3,[SP, #+4]
    632                      Cmd.TxInfo.rxAddr  = DEVICE_BROADCAST_ADDR;
   \   00000180   0820CDE5           STRB     R2,[SP, #+8]
    633                      Cmd.TxInfo.rxId    = DEVICE_BROADCAST_TXU;
   \   00000184   0900CDE5           STRB     R0,[SP, #+9]
    634                      Cmd.Data.ObjectId  = IDNumber;
   \   00000188   9C0094E5           LDR      R0,[R4, #+156]
    635                      Cmd.Data.ndb       = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   0000018C   0410A0E3           MOV      R1,#+4
   \   00000190   0E00CDE5           STRB     R0,[SP, #+14]
   \   00000194   2004A0E1           LSR      R0,R0,#+8
   \   00000198   0F00CDE5           STRB     R0,[SP, #+15]
   \   0000019C   2004A0E1           LSR      R0,R0,#+8
   \   000001A0   1000CDE5           STRB     R0,[SP, #+16]
   \   000001A4   2004A0E1           LSR      R0,R0,#+8
   \   000001A8   1100CDE5           STRB     R0,[SP, #+17]
   \   000001AC   BC10CDE1           STRH     R1,[SP, #+12]
    636                      Cmd.Data.CommandNo = CMD_GENERIC_STATIC_DATA;
   \   000001B0   6610A0E3           MOV      R1,#+102
   \   000001B4   BA10CDE1           STRH     R1,[SP, #+10]
    637                      bool sent = ANPRO10SendNormal(&Cmd);
    638                      if ( !sent ) {
   \   000001B8   04008DE2           ADD      R0,SP,#+4
   \   000001BC   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   EAFFFF1A           BNE      ??SendData_10
    639                          ErrorStatus =  E_QUEUE_FULL;
   \   000001C8   E7FFFFEA           B        ??SendData_11
    640                      } else {
    641                          ErrorStatus =  E_OK;
    642                      }
    643                  }
    644                  break;
    645              default:
    646                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_3:
   \   000001CC   0100A0E3           MOV      R0,#+1
    647                  break;
    648              }
    649              return(ErrorStatus);
   \                     ??SendData_12:
   \   000001D0   3CD08DE2           ADD      SP,SP,#+60
   \   000001D4   ........           B        ?Subroutine22
    650          }
    651          
    652          #ifdef S2TXU

   \                                 In segment CODE, align 4, keep-with-next
    653          void PROInclinometer::LogList(void)
    654          {
   \                     ??LogList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    655              int NextTime = OS_Time;
   \   00000008   ........           LDR      R0,??DataTable14  ;; OS_Time
   \   0000000C   007090E5           LDR      R7,[R0, #+0]
    656              while ( true ) {
    657                  NextTime += ROL_LIST_LOG_INTERVAL;
    658                  double Heel = ListSensor->CalculateRaw();
   \                     ??LogList_1:
   \   00000010   801996E5           LDR      R1,[R6, #+2432]
   \   00000014   7D7F87E2           ADD      R7,R7,#+500
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   A41091E5           LDR      R1,[R1, #+164]
   \   00000020   841091E5           LDR      R1,[R1, #+132]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   11FF2FE1           BX       R1
   \   0000002C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000030   0040A0E1           MOV      R4,R0
    659                  ListSema->Acquire();
   \   00000034   700996E5           LDR      R0,[R6, #+2416]
   \   00000038   0150A0E1           MOV      R5,R1
   \   0000003C   ........           _BLF     ??Acquire,??Acquire??rA
    660                  memmove(&HeelLog[0],&HeelLog[1], sizeof(double)*(ROL_LIST_ENTRIES-1));
   \   00000040   F820A0E3           MOV      R2,#+248
   \   00000044   702E82E3           ORR      R2,R2,#0x700
   \   00000048   541F86E2           ADD      R1,R6,#+336
   \   0000004C   520F86E2           ADD      R0,R6,#+328
   \   00000050   ........           _BLF     memmove,??memmove??rA
    661                  HeelLog[ROL_LIST_ENTRIES-1] = Heel;
   \   00000054   404986E5           STR      R4,[R6, #+2368]
   \   00000058   445986E5           STR      R5,[R6, #+2372]
    662                  ListSema->Release();
   \   0000005C   700996E5           LDR      R0,[R6, #+2416]
   \   00000060   ........           _BLF     ??Release,??Release??rA
    663                  OS_DelayUntil(NextTime);
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     OS_DelayUntil,??OS_DelayUntil??rA
   \   0000006C   E7FFFFEA           B        ??LogList_1
    664              }
    665          }
    666          

   \                                 In segment CODE, align 4, keep-with-next
    667          void PROInclinometer::LogListTask(void)
    668          {
   \                     ??LogListTask:
   \   00000000   00402DE9           PUSH     {LR}
    669              OS_Delay(5000);
   \   00000004   8800A0E3           MOV      R0,#+136
   \   00000008   4C0D80E3           ORR      R0,R0,#0x1300
   \   0000000C   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   00000010   ........           LDR      R0,??DataTable16  ;; ??tmpHeelLog + 2064
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500000A           BEQ      ??LogListTask_1
   \   00000020   801990E5           LDR      R1,[R0, #+2432]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0100000A           BEQ      ??LogListTask_2
    670              if ( PROInclinPtr && PROInclinPtr->ListSensor ) {
    671                  PROInclinPtr->LogList();
   \   0000002C   ........           BL       ??LogList
   \   00000030   010000EA           B        ??LogListTask_3
    672              }else{
    673                  OS_Terminate(0);
   \                     ??LogListTask_2:
   \   00000034   0000A0E3           MOV      R0,#+0
   \                     ??LogListTask_1:
   \   00000038   ........           _BLF     OS_Terminate,??OS_Terminate??rA
    674              }
    675          }
   \                     ??LogListTask_3:
   \   0000003C   ........           B        ?Subroutine21
    676          

   \                                 In segment CODE, align 4, keep-with-next
    677          void PROInclinometer::RecIncData(void)
    678          {
   \                     ??RecIncData:
   \   00000000   F3472DE9           PUSH     {R0,R1,R4-R10,LR}
   \   00000004   00A0A0E1           MOV      R10,R0
   \   00000008   080000EA           B        ??RecIncData_1
    679              IncMessage Msg;
    680              while ( true ) {
    681                  OS_GetMail(&IncMailBox,&Msg);
    682                  if ( FrequencyCalc ) {
    683                      double TotalCount = double(Msg.IncCntUp) + double(Msg.IncCntDown);
    684                      if ( TotalCount > double(10000.0) ) {
    685                          double tH       = double(Msg.IncCntDown)/TotalCount;
    686                          double tL       = double(Msg.IncCntUp)/TotalCount;
    687                          double Diff     = tL - tH;
    688                          if ( Diff ) {
    689                              float IncAngle = double(1.0/SEIKA_SENSITIVITY)*Diff;
    690                              switch ( Msg.IncNum ) {
    691                              case 1:
    692                                  if ( Inc1Sensor ) {
   \                     ??RecIncData_2:
   \   0000000C   74299AE5           LDR      R2,[R10, #+2420]
   \                     ??RecIncData_3:
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   0500000A           BEQ      ??RecIncData_1
    693                                      Inc1Sensor->NewValue(IncAngle);
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   A42092E5           LDR      R2,[R2, #+164]
   \   00000024   682092E5           LDR      R2,[R2, #+104]
   \   00000028   0FE0A0E1           MOV      LR,PC
   \   0000002C   12FF2FE1           BX       R2
    694                                  }
   \                     ??RecIncData_1:
   \   00000030   EC009FE5           LDR      R0,??RecIncData_4  ;; IncMailBox
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   ........           _BLF     OS_GetMail,??OS_GetMail??rA
   \   0000003C   8809DAE5           LDRB     R0,[R10, #+2440]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   F9FFFF0A           BEQ      ??RecIncData_1
   \   00000048   B600DDE1           LDRH     R0,[SP, #+6]
   \   0000004C   ........           _BLF     __ulongToDouble,??__ulongToDouble??rA
   \   00000050   0080A0E1           MOV      R8,R0
   \   00000054   B400DDE1           LDRH     R0,[SP, #+4]
   \   00000058   0190A0E1           MOV      R9,R1
   \   0000005C   ........           _BLF     __ulongToDouble,??__ulongToDouble??rA
   \   00000060   0040A0E1           MOV      R4,R0
   \   00000064   0150A0E1           MOV      R5,R1
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0930A0E1           MOV      R3,R9
   \   00000070   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000074   AC309FE5           LDR      R3,??RecIncData_4+0x4  ;; 0x40c38800
   \   00000078   0060A0E1           MOV      R6,R0
   \   0000007C   0170A0E1           MOV      R7,R1
   \   00000080   0120A0E3           MOV      R2,#+1
   \   00000084   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   E7FFFF0A           BEQ      ??RecIncData_1
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   0910A0E1           MOV      R1,R9
   \   00000098   0620A0E1           MOV      R2,R6
   \   0000009C   0730A0E1           MOV      R3,R7
   \   000000A0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000A4   0080A0E1           MOV      R8,R0
   \   000000A8   0190A0E1           MOV      R9,R1
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   0730A0E1           MOV      R3,R7
   \   000000BC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000C0   0820A0E1           MOV      R2,R8
   \   000000C4   0930A0E1           MOV      R3,R9
   \   000000C8   ........           _BLF     __dSub,??__dSub??rA
   \   000000CC   0040A0E1           MOV      R4,R0
   \   000000D0   0150A0E1           MOV      R5,R1
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   0420A0E1           MOV      R2,R4
   \   000000E0   0530A0E1           MOV      R3,R5
   \   000000E4   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   CFFFFF0A           BEQ      ??RecIncData_1
   \   000000F0   34009FE5           LDR      R0,??RecIncData_4+0x8  ;; 0x17bb5453
   \   000000F4   34109FE5           LDR      R1,??RecIncData_4+0xC  ;; 0x4068a7a3
   \   000000F8   0420A0E1           MOV      R2,R4
   \   000000FC   0530A0E1           MOV      R3,R5
   \   00000100   ........           _BLF     __dMul,??__dMul??rA
   \   00000104   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000108   00109DE5           LDR      R1,[SP, #+0]
   \   0000010C   011051E2           SUBS     R1,R1,#+1
   \   00000110   BDFFFF0A           BEQ      ??RecIncData_2
   \   00000114   011051E2           SUBS     R1,R1,#+1
   \   00000118   C4FFFF1A           BNE      ??RecIncData_1
    695                                  break;
    696                              case 2:
    697                                  if ( Inc2Sensor ) {
   \   0000011C   78299AE5           LDR      R2,[R10, #+2424]
   \   00000120   BAFFFFEA           B        ??RecIncData_3
   \                     ??RecIncData_4:
   \   00000124   ........           DC32     IncMailBox
   \   00000128   0088C340           DC32     0x40c38800
   \   0000012C   5354BB17           DC32     0x17bb5453
   \   00000130   A3A76840           DC32     0x4068a7a3
    698                                      Inc2Sensor->NewValue(IncAngle);
    699                                  }
    700                                  break;
    701                              }
    702                          }
    703                      }
    704                  }
    705              }
    706          }
    707          

   \                                 In segment CODE, align 4, keep-with-next
    708          void PROInclinometer::RecIncDataTask(void)
    709          {
   \                     ??RecIncDataTask:
   \   00000000   ........           LDR      R0,??DataTable16  ;; ??tmpHeelLog + 2064
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??RecIncDataTask_1
   \   00000014   801990E5           LDR      R1,[R0, #+2432]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   0100000A           BEQ      ??RecIncDataTask_2
    710              if ( PROInclinPtr && PROInclinPtr->ListSensor ) {
    711                  PROInclinPtr->RecIncData();
   \   00000020   ........           BL       ??RecIncData
   \   00000024   010000EA           B        ??RecIncDataTask_3
    712              }else{
    713                  OS_Terminate(0);
   \                     ??RecIncDataTask_2:
   \   00000028   0000A0E3           MOV      R0,#+0
   \                     ??RecIncDataTask_1:
   \   0000002C   ........           _BLF     OS_Terminate,??OS_Terminate??rA
    714              }
    715          }
   \                     ??RecIncDataTask_3:
   \   00000030   ........           B        ?Subroutine21

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Inclinometer">`:
   \   00000000   496E636C696E       DC8 "Inclinometer"
   \              6F6D65746572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   496E636C696E       DC8 "Inclinometer 1 redefined."
   \              6F6D65746572
   \              203120726564
   \              6566696E6564
   \              2E00        
   \   0000002A   0000               DC8 0, 0
   \   0000002C   496E636C696E       DC8 "Inclinometer 2 redefined."
   \              6F6D65746572
   \              203220726564
   \              6566696E6564
   \              2E00        
   \   00000046   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Inclinometer ">`:
   \   00000000   496E636C696E       DC8 "Inclinometer "
   \              6F6D65746572
   \              2000        
   \   0000000E   0000               DC8 0, 0
   \   00000010   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   00000043   00                 DC8 0
   \   00000044   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000061   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROInclinometer &PROInclinometer::new PROInclinometer()
   \                     `??new PROInclinometer`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   8C00A0E3           MOV      R0,#+140
   \   00000008   900E80E3           ORR      R0,R0,#0x900
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      `??new PROInclinometer_1`
   \   00000018   ........           BL       ??PROInclinometer
   \                     `??new PROInclinometer_1`:
   \   0000001C   ........           B        ?Subroutine21

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     ??tmpHeelLog

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??LengthBetweenPP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??LengthBetweenMarks

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??Width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     ??tmpHeelLog

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     OS_Time

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??tmpHeelLog + 2064
    716          #endif

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROInclinometer::Calculate()      44
     PROInclinometer::GetFloatValue(int, int, float &)
                                       12
     PROInclinometer::GetStringValue(int, int, AnsiString &)
                                        4
     PROInclinometer::GetValue(int, int, float &, int &, int &)
                                       48
     PROInclinometer::GetValueInfoTableStatic(int &, int)
                                        0
     PROInclinometer::LoadConfigFromFile(TSNConfigString &)
                                      264
     PROInclinometer::LogList()        20
     PROInclinometer::LogListTask()     4
     PROInclinometer::PROInclinometer()
                                       12
     PROInclinometer::PutFloatValue(int, float)
                                       16
     PROInclinometer::PutValue(int, int, AnsiString, bool, int *)
                                      116
     PROInclinometer::RecIncData()     40
     PROInclinometer::RecIncDataTask()
                                        4
     PROInclinometer::ReceiveData(unsigned char *)
                                       40
     PROInclinometer::RestoreSettings(TSNConfigString *)
                                      516
     PROInclinometer::SaveSettings(TSNConfigString *)
                                      216
     PROInclinometer::SendData(unsigned short)
                                       72
     PROInclinometer::WriteConfigToFile(TSNConfigString &)
                                      384
     PROInclinometer::new PROInclinometer()
                                        4
     PROInclinometer::~PROInclinometer()
                                       12
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     __sti__routine()                   0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     PROInclinometer::PROInclinometer()
                                     208
     ?Subroutine22                     8
     PROInclinometer::~PROInclinometer()
                                      56
     PROInclinometer::WriteConfigToFile(TSNConfigString &)
                                     668
     ?Subroutine23                    12
     PROInclinometer::LoadConfigFromFile(TSNConfigString &)
                                    1424
     ?Subroutine24                    16
     PROInclinometer::SaveSettings(TSNConfigString *)
                                     464
     PROInclinometer::RestoreSettings(TSNConfigString *)
                                     816
     PROInclinometer::GetValue(int, int, float &, int &, int &)
                                     564
     PROInclinometer::GetStringValue(int, int, AnsiString &)
                                       8
     ?Subroutine21                     8
     PROInclinometer::GetFloatValue(int, int, float &)
                                      72
     PROInclinometer::PutValue(int, int, AnsiString, bool, int *)
                                     780
     PROInclinometer::PutFloatValue(int, float)
                                     160
     ?Subroutine25                     8
     PROInclinometer::GetValueInfoTableStatic(int &, int)
                                      16
     PROInclinometer::Calculate()   1032
     tmpHeelLog                     2334
     PROInclinometer::TaskStack     2048
     PROInclinometer::TaskHandle     128
     w                              2560
     PROInclinometer::ReceiveData(unsigned char *)
                                     336
     PROInclinometer::SendData(unsigned short)
                                     472
     PROInclinometer::LogList()      112
     PROInclinometer::LogListTask()   64
     PROInclinometer::RecIncData()   308
     PROInclinometer::RecIncDataTask()
                                      52
     ?<Constant "Inclinometer">       72
     ?<Constant "Inclinometer ">     100
     __sti__routine()                  4
     PROInclinometer::new PROInclinometer()
                                      32
     ??DataTable0                      4
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable16                     4
      Others                        1136

 
 9 364 bytes in segment CODE
   296 bytes in segment DATA_C
 7 070 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 7 740 bytes of CODE  memory (+ 1 640 bytes shared)
   296 bytes of CONST memory
 7 070 bytes of DATA  memory

Errors: none
Warnings: none
