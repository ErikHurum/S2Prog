##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLowBotTemp.Cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLowBotTemp.Cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLowBotTemp.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLowBotTemp.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLowBotTemp.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowBotTemp::~AlarmLowBotTemp()
   \                     `?~AlarmLowBotTemp`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLowBotTemp_1`
   \   00000014   0100000A           BEQ      `?~AlarmLowBotTemp_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLowBotTemp_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLowBotTemp_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLowBotTemp_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLowBotTemp::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmLowBotTemp::AlarmLowBotTemp(PRogramObjectBase *PROPtr):AlarmLowTemp(PROPtr){
   \                     ??AlarmLowBotTemp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??AlarmLowTemp,??AlarmLowTemp??rA
   \   0000000C   ........           LDR      R0,??Subroutine5_0  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     11              NumberOfAlarmSettings++;
   \   00000014   ........           LDR      R0,??Subroutine5_0+0x4  ;; ??NumberOfAlarmSettings
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   001080E5           STR      R1,[R0, #+0]
     12              IDNumber 		    = ( ID_AL_LOW_BOT_TEMP << 16 ) + NumberOfAlarmSettings;
   \   00000024   B006A0E3           MOV      R0,#+184549376
   \   00000028   C90880E3           ORR      R0,R0,#0xC90000
   \   0000002C   010080E0           ADD      R0,R0,R1
   \   00000030   9C0084E5           STR      R0,[R4, #+156]
     13              Type 			    = ID_AL_LOW_BOT_TEMP;
   \   00000034   C900A0E3           MOV      R0,#+201
   \   00000038   B00E80E3           ORR      R0,R0,#0xB00
   \   0000003C   A00084E5           STR      R0,[R4, #+160]
     14              MessageKey          = L_WORD1061;   // LoBotTemp
   \   00000040   2500A0E3           MOV      R0,#+37
   \   00000044   400E80E3           ORR      R0,R0,#0x400
   \   00000048   B80084E5           STR      R0,[R4, #+184]
     15              TPCMessageKey       = L_WORD1063;   // LBTmp
   \   0000004C   020080E3           ORR      R0,R0,#0x2
   \   00000050   B40084E5           STR      R0,[R4, #+180]
     16          }
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058                      REQUIRE ?Subroutine5
   \   00000058                      ;; // Fall through to label ?Subroutine5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine5:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine5_0:
   \   00000008   ........           DC32     ??__vtbl
   \   0000000C   ........           DC32     ??NumberOfAlarmSettings
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          void AlarmLowBotTemp::Check(void) {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     19              float Val     = PROTmpPtr->BottomTemp;
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
     20              bool  HasTemp = PROTmpPtr->BottomTempOK;
     21              int   Status  = AL_STAT_IN_DEADBAND;
   \   0000000C   0260A0E3           MOV      R6,#+2
   \   00000010   745190E5           LDR      R5,[R0, #+372]
     22              if (HasTemp) {
   \   00000014   7801D0E5           LDRB     R0,[R0, #+376]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0700000A           BEQ      ??Check_1
     23                  if (Val > Limit + Deadband) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC0094E5           LDR      R0,[R4, #+188]
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   ........           _BLF     __fLess,??__fLess??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??Check_2
     24                      Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000040   0060A0E3           MOV      R6,#+0
   \   00000044   040000EA           B        ??Check_3
     25                  } else if (Val <= Limit) {
   \                     ??Check_2:
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000054   000050E3           CMP      R0,#+0
     26                      Status = AL_STAT_IN_ALARM;
   \   00000058   0160A013           MOVNE    R6,#+1
     27                  }
     28              } else {
     29                  Status = AL_STAT_IN_NORMAL;
     30              }
     31              UpdateAlarm( Status );
   \                     ??Check_3:
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     32          }
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          int  AlarmLowBotTemp::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     35              int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     36              switch (ValueId) {
   \   00000010   0560A0E3           MOV      R6,#+5
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
     37              case SVT_AL_LIMIT:
     38                  MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
     39                  DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
     40                  Unit       = TEMP_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
     41                  if (!Enable) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
     42                      Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
     43                  }
     44                  break;
     45              case SVT_AL_VALUE:
     46                  MyRetValue = ( (PROTemperature *)PROPointer )->BottomTemp;
   \                     ??GetValue_6:
   \   0000005C   C40090E5           LDR      R0,[R0, #+196]
   \   00000060   740190E5           LDR      R0,[R0, #+372]
   \   00000064   000083E5           STR      R0,[R3, #+0]
     47                  DecPnt     = 1;
   \   00000068   007084E5           STR      R7,[R4, #+0]
     48                  Unit       = TEMP_UNIT;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
     49                  break;
     50              default:
     51                  Status = AlarmBasic::GetValue( ValueId, Index, MyRetValue, DecPnt, Unit );
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
     52                  break;
     53              }
     54              return (Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
     55          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowBotTemp &AlarmLowBotTemp::new AlarmLowBotTemp(PRogramObjectBase *)
   \                     `??new AlarmLowBotTemp`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmLowBotTemp_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmLowBotTemp
   \                     `??new AlarmLowBotTemp_1`:
   \   00000020   ........           B        ?Subroutine5

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     56          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLowBotTemp::AlarmLowBotTemp(PRogramObjectBase *)
                                        8
     AlarmLowBotTemp::Check()          20
     AlarmLowBotTemp::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLowBotTemp::new AlarmLowBotTemp(PRogramObjectBase *)
                                        8
     AlarmLowBotTemp::~AlarmLowBotTemp()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLowBotTemp::~AlarmLowBotTemp()
                                      56
     AlarmLowBotTemp::NumberOfAlarmSettings
                                       4
     AlarmLowBotTemp::AlarmLowBotTemp(PRogramObjectBase *)
                                      88
     ?Subroutine5                     16
     AlarmLowBotTemp::Check()        112
     AlarmLowBotTemp::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmLowBotTemp::new AlarmLowBotTemp(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
      Others                         260

 
 588 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 408 bytes of CODE  memory (+ 196 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
