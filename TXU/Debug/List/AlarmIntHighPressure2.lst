##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmIntHighPressure2.cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmIntHighPressure2.cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmIntHighPressure2.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmIntHighPressure2.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmIntHighPressure2.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntHighPressure2::~AlarmIntHighPressure2()
   \                     `?~AlarmIntHighPressure2`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmIntHighPressure2_1`
   \   00000014   0100000A           BEQ      `?~AlarmIntHighPressure2_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmIntHighPressure2_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmIntHighPressure2_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmIntHighPressure2_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmIntHighPressure2::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmIntHighPressure2::AlarmIntHighPressure2(PRogramObjectBase *PROPtr, float Lim, bool Visible)
   \                     ??AlarmIntHighPressure2:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     11          {
   \   00000014   ........           _BLF     ??AlarmHighPressure,??AlarmHighPressure??rA
   \   00000018   70009FE5           LDR      R0,??AlarmIntHighPressure2_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     12          	NumberOfAlarmSettings++;
   \   00000020   6C009FE5           LDR      R0,??AlarmIntHighPressure2_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
     13          	IDNumber 	        = (ID_AL_X_HIGH_T_PRESS2 << 16)+NumberOfAlarmSettings;
   \   00000030   B006A0E3           MOV      R0,#+184549376
   \   00000034   E30880E3           ORR      R0,R0,#0xE30000
   \   00000038   010080E0           ADD      R0,R0,R1
   \   0000003C   9C0084E5           STR      R0,[R4, #+156]
     14          	Type 		        = ID_AL_X_HIGH_T_PRESS2;
   \   00000040   E300A0E3           MOV      R0,#+227
   \   00000044   B00E80E3           ORR      R0,R0,#0xB00
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     15          	IsExtraAlarm        = true;
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   CD00C4E5           STRB     R0,[R4, #+205]
     16          	IsVisible           = Visible;
   \   00000054   B070C4E5           STRB     R7,[R4, #+176]
     17              PROPointer          = PROPtr;
   \   00000058   C45084E5           STR      R5,[R4, #+196]
     18              PROTPressPtr        = (PROTankPressure*)PROPtr;
   \   0000005C   EC5084E5           STR      R5,[R4, #+236]
     19          	Limit               = Lim;
   \   00000060   E46084E5           STR      R6,[R4, #+228]
     20              Locked              = true;
   \   00000064   E800C4E5           STRB     R0,[R4, #+232]
     21          	MessageKey          = L_WORD1018; // X Hi Press2
   \   00000068   FA10A0E3           MOV      R1,#+250
   \   0000006C   C01F81E3           ORR      R1,R1,#0x300
   \   00000070   B81084E5           STR      R1,[R4, #+184]
     22          	TPCMessageKey       = L_WORD1020;	// XHiP2
   \   00000074   FF1FA0E3           MOV      R1,#+1020
   \   00000078   B41084E5           STR      R1,[R4, #+180]
     23              PROTankPressure::hasExtraAlarm2 = true;
   \   0000007C   14109FE5           LDR      R1,??AlarmIntHighPressure2_1+0x8  ;; ??hasExtraAlarm2
   \   00000080   0000C1E5           STRB     R0,[R1, #+0]
     24          }
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   F040BDE8           POP      {R4-R7,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmIntHighPressure2_1:
   \   00000090   ........           DC32     ??__vtbl
   \   00000094   ........           DC32     ??NumberOfAlarmSettings
   \   00000098   ........           DC32     ??hasExtraAlarm2

   \                                 In segment CODE, align 4, keep-with-next
     25          AnsiString AlarmIntHighPressure2::Get_Message(void)
     26          {
   \                     ??Get_Message:
   \   00000000   00402DE9           PUSH     {LR}
     27          	return AlarmBasic::Get_Message();
   \   00000004   ........           _BLF     ??Get_Message_1,??Get_Message??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     28          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntHighPressure2 &AlarmIntHighPressure2::new AlarmIntHighPressure2(PRogramObjectBase *, float, bool)
   \                     `??new AlarmIntHighPressure2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmIntHighPressure2_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmIntHighPressure2
   \                     `??new AlarmIntHighPressure2_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     29          
     30          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmIntHighPressure2::AlarmIntHighPressure2(PRogramObjectBase *, float, bool)
                                       20
     AlarmIntHighPressure2::Get_Message()
                                        4
     AlarmIntHighPressure2::new AlarmIntHighPressure2(PRogramObjectBase *, float, bool)
                                       16
     AlarmIntHighPressure2::~AlarmIntHighPressure2()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmIntHighPressure2::~AlarmIntHighPressure2()
                                      56
     AlarmIntHighPressure2::NumberOfAlarmSettings
                                       4
     AlarmIntHighPressure2::AlarmIntHighPressure2(PRogramObjectBase *, float, bool)
                                     156
     AlarmIntHighPressure2::Get_Message()
                                      16
     AlarmIntHighPressure2::new AlarmIntHighPressure2(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         208

 
 364 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 236 bytes of CODE  memory (+ 144 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
