##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AITempSensor_Pt100.cpp          #
#    Command line    =  D:\S2Prog\Shared\Src\AITempSensor_Pt100.cpp --fpu    #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AITempSensor_Pt100.lst      #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AITempSensor_Pt100.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AITempSensor_Pt100.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AITempSensor_Pt100::AITempSensor_Pt100(float pRadarDistance)
   \                     ??AITempSensor_Pt100:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     10          {
   \   0000000C   ........           _BLF     ??AITempSensor,??AITempSensor??rA
   \   00000010   24009FE5           LDR      R0,??AITempSensor_Pt100_1  ;; ??__vtbl
     11              Type                 = C_AI_Pt100;
     12              DistJunctionBoxToBot = pRadarDistance;
     13              Initialize(NULL);
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   5E00A0E3           MOV      R0,#+94
   \   00000020   800E80E3           ORR      R0,R0,#0x800
   \   00000024   A00084E5           STR      R0,[R4, #+160]
   \   00000028   7C5184E5           STR      R5,[R4, #+380]
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       ??Initialize
     14          }
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           B        ?Subroutine11
   \                     ??AITempSensor_Pt100_1:
   \   0000003C   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     15          //---------------------------------------------------------------------------
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          AITempSensor_Pt100::~AITempSensor_Pt100(void)
     18          {
   \                     `?~AITempSensor_Pt100`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AITempSensor_Pt100_1`
     19          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AITempSensor`,`?~AITempSensor??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AITempSensor_Pt100_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AITempSensor_Pt100_1`:
   \   0000002C                      REQUIRE ?Subroutine11
   \   0000002C                      ;; // Fall through to label ?Subroutine11
     20          //---------------------------------------------------------------------------
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void AITempSensor_Pt100::Initialize(AnalogInput *Sns)
     23          {
   \                     ??Initialize:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     24              if ( Sns ) {
   \   0000000C   4C0FA0E3           MOV      R0,#+304
   \   00000010   5E10A0E3           MOV      R1,#+94
   \   00000014   801E81E3           ORR      R1,R1,#0x800
   \   00000018   2C00000A           BEQ      ??Initialize_1
     25                  Distance          = Sns->Distance;
   \   0000001C   2C2195E5           LDR      R2,[R5, #+300]
   \   00000020   2C2184E5           STR      R2,[R4, #+300]
     26                  AdjustedDistance  = Distance;
   \   00000024   042080E7           STR      R2,[R0, +R4]
     27                  Type              = C_AI_Pt100;
     28                  Name              = Sns->Name;
   \   00000028   ........           LDR      R0,??DataTable1  ;; ??npos
   \   0000002C   A01084E5           STR      R1,[R4, #+160]
   \   00000030   006090E5           LDR      R6,[R0, #+0]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0630A0E1           MOV      R3,R6
   \   0000003C   441085E2           ADD      R1,R5,#+68
   \   00000040   440084E2           ADD      R0,R4,#+68
   \   00000044   ........           _BLF     ??assign,??assign??rA
     29                  SortNo            = Sns->SortNo;
   \   00000048   980095E5           LDR      R0,[R5, #+152]
     30                  TagName           = Sns->TagName;
   \   0000004C   0630A0E1           MOV      R3,R6
   \   00000050   980084E5           STR      R0,[R4, #+152]
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   601085E2           ADD      R1,R5,#+96
   \   0000005C   600084E2           ADD      R0,R4,#+96
   \   00000060   ........           _BLF     ??assign,??assign??rA
     31                  SerialNumber      = Sns->SerialNumber;
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   D81085E2           ADD      R1,R5,#+216
   \   00000070   D80084E2           ADD      R0,R4,#+216
   \   00000074   ........           _BLF     ??assign,??assign??rA
     32                  TCUAddress        = Sns->TCUAddress;
   \   00000078   F40095E5           LDR      R0,[R5, #+244]
   \   0000007C   F40084E5           STR      R0,[R4, #+244]
     33                  //TCUPort               = Sns->TCUPort;
     34                  TCUPortNo         = Sns->TCUPortNo;
   \   00000080   F80095E5           LDR      R0,[R5, #+248]
   \   00000084   F80084E5           STR      R0,[R4, #+248]
     35                  IOAddress         = Sns->IOAddress;
   \   00000088   400FA0E3           MOV      R0,#+256
   \   0000008C   051090E7           LDR      R1,[R0, +R5]
   \   00000090   041080E7           STR      R1,[R0, +R4]
     36                  IOChannel         = Sns->IOChannel;
   \   00000094   410FA0E3           MOV      R0,#+260
   \   00000098   051090E7           LDR      R1,[R0, +R5]
   \   0000009C   041080E7           STR      R1,[R0, +R4]
     37                  IOType            = Sns->IOType;
   \   000000A0   FC0095E5           LDR      R0,[R5, #+252]
   \   000000A4   FC0084E5           STR      R0,[R4, #+252]
     38                  ADCardChannel     = Sns->ADCardChannel+1;
   \   000000A8   420FA0E3           MOV      R0,#+264
   \   000000AC   051090E7           LDR      R1,[R0, +R5]
   \   000000B0   011081E2           ADD      R1,R1,#+1
   \   000000B4   041080E7           STR      R1,[R0, +R4]
     39                  Location          = Sns->Location;
   \   000000B8   280195E5           LDR      R0,[R5, #+296]
   \   000000BC   280184E5           STR      R0,[R4, #+296]
     40                  IsPressureSns    = Sns->GetIsPressureSns();
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??GetIsPressureSns,??GetIsPressureSns??rA
   \   000000C8   2001C4E5           STRB     R0,[R4, #+288]
   \   000000CC   020000EA           B        ??Initialize_2
     41              } else {
     42                  Type              = C_AI_Pt100;
   \                     ??Initialize_1:
   \   000000D0   A01084E5           STR      R1,[R4, #+160]
     43                  AdjustedDistance  = 0.0;
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   041080E7           STR      R1,[R0, +R4]
     44              }
     45          
     46              ADConfigData.CalError     = false;
     47              ADConfigData.ConvError    = false;
     48              ADConfigData.EEP_PCStatus = AD_EEPROM_OK;
     49              ADConfigData.EEPromStatus = AD_EEPROM_OK;
     50              ADConfigData.EEPUsePCData = false;
     51              ADConfigData.FoundSensor  = AD_NO_SNS;
     52              ADConfigData.NewSensor    = false;
     53              ADConfigData.PCSensor     = AD_NO_SNS;
     54              ADConfigData.UsePCSetUp   = false;
   \                     ??Initialize_2:
   \   000000DC   880194E5           LDR      R0,[R4, #+392]
   \   000000E0   FF10E0E3           MVN      R1,#+255
   \   000000E4   EE1CC1E3           BIC      R1,R1,#0xEE00
   \   000000E8   000001E0           AND      R0,R1,R0
   \   000000EC   440D80E3           ORR      R0,R0,#0x1100
   \   000000F0   880184E5           STR      R0,[R4, #+392]
     55          
     56              AlarmSensorConvError *SnsHWErrAlPtr  = new AlarmSensorConvError( this,&ADConfigData);
   \   000000F4   621F84E2           ADD      R1,R4,#+392
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           _BLF     `??new AlarmSensorConvError`,`??new AlarmSensorConvError??rA`
     57              AlarmSet.insert(SnsHWErrAlPtr);
   \   00000100   0020A0E1           MOV      R2,R0
   \   00000104   C01084E2           ADD      R1,R4,#+192
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     ??insert,??insert??rA
     58          }
   \   00000110   7340BDE8           POP      {R0,R1,R4-R6,LR}
   \   00000114   1EFF2FE1           BX       LR               ;; return
     59          //---------------------------------------------------------------------------
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          void AITempSensor_Pt100::CalculateCableCorrection(void)
     62          {
   \                     ??CalculateCableCorrection:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63              float CableResistance = CableLengthSensor*CableResistanceSensor; 
   \   00000008   681194E5           LDR      R1,[R4, #+360]
   \   0000000C   700194E5           LDR      R0,[R4, #+368]
   \   00000010   ........           _BLF     __fMul,??__fMul??rA
   \   00000014   746194E5           LDR      R6,[R4, #+372]
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000028   000050E3           CMP      R0,#+0
     64              if ( CableMsrdResistance ) {
     65                  CableResistance += CableMsrdResistance;
   \   0000002C   0500A011           MOVNE    R0,R5
   \   00000030   0610A011           MOVNE    R1,R6
   \   00000034   0300001A           BNE      ??CalculateCableCorrection_1
     66              }else{
     67                  CableResistance += CableLengthShip*CableResistanceShip;
   \   00000038   641194E5           LDR      R1,[R4, #+356]
   \   0000003C   6C0194E5           LDR      R0,[R4, #+364]
   \   00000040   ........           _BLF     __fMul,??__fMul??rA
   \   00000044   0510A0E1           MOV      R1,R5
   \                     ??CalculateCableCorrection_1:
   \   00000048   ........           _BLF     __fAdd,??__fAdd??rA
     68              }
     69              CableOffset = CableResistance/PT100_OHM_DEG;
   \   0000004C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000050   14209FE5           LDR      R2,??CalculateCableCorrection_2  ;; 0xffffffff8f5c28f6
   \   00000054   14309FE5           LDR      R3,??CalculateCableCorrection_2+0x4  ;; 0x3fd8f5c2
   \   00000058   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000005C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000060   780184E5           STR      R0,[R4, #+376]
     70          }
   \   00000064   7040BDE8           POP      {R4-R6,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??CalculateCableCorrection_2:
   \   0000006C   F6285C8F           DC32     0xffffffff8f5c28f6
   \   00000070   C2F5D83F           DC32     0x3fd8f5c2
     71          ///////////////////////////////////////////////////////////////
     72          //
     73          // Routines for the librarian for input
     74          //
     75          ///////////////////////////////////////////////////////////////
     76          
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          int AITempSensor_Pt100::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     79          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     80              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     81              switch ( ValueId ) {
     82              case SVT_AI_OFFSET   :
     83              case SVT_AI_CALC_VAL :
     84              default:
     85                  Status = AITempSensor::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000034   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   00012DE9           PUSH     {R8}
   \   00000058   0C308DE2           ADD      R3,SP,#+12
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000006C   0050A0E1           MOV      R5,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     86                  break;
     87              }
     88              if ( Status==E_NO_ERR ) {
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   0400001A           BNE      ??PutValue_2
     89                  SetModifiedFlag();
   \   0000008C   A41094E5           LDR      R1,[R4, #+164]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   541091E5           LDR      R1,[R1, #+84]
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   11FF2FE1           BX       R1
     90              }
     91              if ( UnitId ) {
   \                     ??PutValue_2:
   \   000000A0   000059E3           CMP      R9,#+0
     92                  *UnitId = ValUnitId;
   \   000000A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A8   00008915           STRNE    R0,[R9, #+0]
     93              }
     94              return(Status);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   20D08DE2           ADD      SP,SP,#+32
   \   000000B4   F043BDE8           POP      {R4-R9,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
     95          }
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          int  AITempSensor_Pt100::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     98          {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
     99              int Status = GETVAL_NO_ERR;
    100              switch ( ValueId ) {
    101              case SVT_AI_OFFSET   :
    102              case SVT_AI_CALC_VAL :
    103              default:
    104                  Status = AITempSensor::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
    105                  break;
    106              }
    107              return(Status);
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    108          }
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          int AITempSensor_Pt100::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    111          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    112              return AITempSensor::GetStringValue(ValueId,Index, MyString);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine12
    113          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    114          

   \                                 In segment CODE, align 4, keep-with-next
    115          int AITempSensor_Pt100::PutFloatValue( int ValueId, float NewValue)
    116          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    117              return AITempSensor::PutFloatValue(ValueId, NewValue);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine12
   \   00000008                      ;; // Fall through to label ?Subroutine12
    118          }

   \                                 In segment CODE, align 4, keep-with-next
    119          void AITempSensor_Pt100::SetStatus(U8 *NewStatus)
    120          {
    121              ADConfigData = *(ConfigPacket*)NewStatus;
   \                     ??SetStatus:
   \   00000000   620F80E2           ADD      R0,R0,#+392
   \   00000004   0430A0E3           MOV      R3,#+4
   \                     ??SetStatus_1:
   \   00000008   013053E2           SUBS     R3,R3,#+1
   \   0000000C   0320D1E7           LDRB     R2,[R1, R3]
   \   00000010   0320C0E7           STRB     R2,[R0, R3]
   \   00000014   FBFFFF1A           BNE      ??SetStatus_1
    122          }
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AITempSensor_Pt100 &AITempSensor_Pt100::new AITempSensor_Pt100(float)
   \                     `??new AITempSensor_Pt100`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   630FA0E3           MOV      R0,#+396
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AITempSensor_Pt100_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AITempSensor_Pt100
   \                     `??new AITempSensor_Pt100_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??npos
    123          
    124          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AITempSensor_Pt100::AITempSensor_Pt100(float)
                                       12
     AITempSensor_Pt100::CalculateCableCorrection()
                                       16
     AITempSensor_Pt100::GetStringValue(int, int, AnsiString &)
                                        4
     AITempSensor_Pt100::GetValue(int, int, float &, int &, int &)
                                       16
     AITempSensor_Pt100::Initialize(AnalogInput *)
                                       24
     AITempSensor_Pt100::PutFloatValue(int, float)
                                        4
     AITempSensor_Pt100::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AITempSensor_Pt100::SetStatus(unsigned char *)
                                        0
     AITempSensor_Pt100::new AITempSensor_Pt100(float)
                                        8
     AITempSensor_Pt100::~AITempSensor_Pt100()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     AITempSensor_Pt100::AITempSensor_Pt100(float)
                                      64
     ?Subroutine11                     8
     AITempSensor_Pt100::~AITempSensor_Pt100()
                                      44
     AITempSensor_Pt100::Initialize(AnalogInput *)
                                     280
     AITempSensor_Pt100::CalculateCableCorrection()
                                     116
     AITempSensor_Pt100::PutValue(int, int, AnsiString, bool, int *)
                                     188
     AITempSensor_Pt100::GetValue(int, int, float &, int &, int &)
                                      32
     AITempSensor_Pt100::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine12                     8
     AITempSensor_Pt100::PutFloatValue(int, float)
                                       8
     AITempSensor_Pt100::SetStatus(unsigned char *)
                                      28
     AITempSensor_Pt100::new AITempSensor_Pt100(float)
                                      40
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         476

 
 2 088 bytes in segment CODE
   140 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 840 bytes of CODE  memory (+ 1 252 bytes shared)
 140 bytes of CONST memory

Errors: none
Warnings: none
