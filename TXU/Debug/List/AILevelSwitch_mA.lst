##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AILevelSwitch_mA.cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AILevelSwitch_mA.cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AILevelSwitch_mA.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AILevelSwitch_mA.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AILevelSwitch_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AILevelSwitch_mA::AILevelSwitch_mA(int SnsType, float mA_On, float mA_Off, float mA_Win) {
   \                     ??AILevelSwitch_mA:
   \   00000000   FF412DE9           PUSH     {R0-R8,LR}
   \   00000004   28809DE5           LDR      R8,[SP, #+40]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
   \   00000018   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   0000001C   C0009FE5           LDR      R0,??AILevelSwitch_mA_2  ;; ??__vtbl
     10              Type                = SnsType;
     11              BasicSensorTypeWord = L_WORD599; //LSw
     12              Location            = C_AI_LOC_DECK;
     13              SwitchOn_mA         = mA_On;
     14              SwitchOff_mA        = mA_Off;
     15              SwitchWindow        = mA_Win;
     16              SwitchMax_mA        = LIMIT_MA_SHORT_CIRCUIT + 0.02; // Add 2 mA margin as default
     17              OverrideSwitchLimits = false;
     18          
     19              OpenLoopPtr         = (AlarmBasic *)(new AlarmmAmpOpenLoop(this));
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   A40084E5           STR      R0,[R4, #+164]
   \   00000028   A05084E5           STR      R5,[R4, #+160]
   \   0000002C   5700A0E3           MOV      R0,#+87
   \   00000030   800F80E3           ORR      R0,R0,#0x200
   \   00000034   140184E5           STR      R0,[R4, #+276]
   \   00000038   EA00A0E3           MOV      R0,#+234
   \   0000003C   800E80E3           ORR      R0,R0,#0x800
   \   00000040   280184E5           STR      R0,[R4, #+296]
   \   00000044   9C009FE5           LDR      R0,??AILevelSwitch_mA_2+0x4  ;; 0x3d25119d
   \   00000048   686184E5           STR      R6,[R4, #+360]
   \   0000004C   6C7184E5           STR      R7,[R4, #+364]
   \   00000050   708184E5           STR      R8,[R4, #+368]
   \   00000054   740184E5           STR      R0,[R4, #+372]
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   6401C4E5           STRB     R0,[R4, #+356]
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     `??new AlarmmAmpOpenLoop`,`??new AlarmmAmpOpenLoop??rA`
   \   00000068   7C0184E5           STR      R0,[R4, #+380]
     20              ShortCircuitPtr     = (AlarmBasic *)(new AlarmmAmpShortCircuit(this));
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           _BLF     `??new AlarmmAmpShortCircuit`,`??new AlarmmAmpShortCircuit??rA`
   \   00000074   780184E5           STR      R0,[R4, #+376]
     21              AlarmSet.insert(OpenLoopPtr);
   \   00000078   7C2194E5           LDR      R2,[R4, #+380]
   \   0000007C   C01084E2           ADD      R1,R4,#+192
   \   00000080   08008DE2           ADD      R0,SP,#+8
   \   00000084   ........           _BLF     ??insert,??insert??rA
     22              AlarmSet.insert(ShortCircuitPtr);
   \   00000088   782194E5           LDR      R2,[R4, #+376]
   \   0000008C   C01084E2           ADD      R1,R4,#+192
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   ........           _BLF     ??insert,??insert??rA
     23              switch (SnsType) {
   \   00000098   6A5045E2           SUB      R5,R5,#+106
   \   0000009C   805E45E2           SUB      R5,R5,#+2048
   \   000000A0   090055E3           CMP      R5,#+9
   \   000000A4   0B00008A           BHI      ??AILevelSwitch_mA_3
   \   000000A8   010F8FE2           ADR      R0,??AILevelSwitch_mA_1
   \   000000AC   0500D0E7           LDRB     R0,[R0, R5]
   \   000000B0   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??AILevelSwitch_mA_1:
   \   000000B4   02020808           DC8      +2,+2,+8,+8
   \   000000B8   08080808           DC8      +8,+8,+8,+8
   \   000000BC   08020000           DC8      +8,+2,+0,+0
     24              case C_AI_LeSw_mA       :
     25              case C_AI_LeSw_Valcom   :
     26              case C_AI_LeSw_API      :
     27                  {
     28                      AlarmLSwitchFailure *LSwitchFailurePtr  = new AlarmLSwitchFailure(this);
   \                     ??AILevelSwitch_mA_4:
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           _BLF     `??new AlarmLSwitchFailure`,`??new AlarmLSwitchFailure??rA`
     29                      AlarmSet.insert(LSwitchFailurePtr);
   \   000000C8   0020A0E1           MOV      R2,R0
   \   000000CC   C01084E2           ADD      R1,R4,#+192
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   ........           _BLF     ??insert,??insert??rA
     30                  }
     31                  break;
     32              case C_AI_LeSw_Vega     :
     33              case C_AI_LeSw_Vega62   :
     34              case C_AI_LeSw_Vega64   :
     35                  break;
     36              }
     37          }
   \                     ??AILevelSwitch_mA_3:
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   10D08DE2           ADD      SP,SP,#+16
   \   000000E0   ........           B        ?Subroutine13
   \                     ??AILevelSwitch_mA_2:
   \   000000E4   ........           DC32     ??__vtbl
   \   000000E8   9D11253D           DC32     0x3d25119d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          AILevelSwitch_mA::~AILevelSwitch_mA(void) {
   \                     `?~AILevelSwitch_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AILevelSwitch_mA_1`
     40          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AILevelSwitch_mA_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AILevelSwitch_mA_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     41          
     42          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     43          U8 AILevelSwitch_mA::GetFilter(void) {
     44              return (FILTER_LEVEL_SWITCH);
   \                     ??GetFilter:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     45          }
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          AnsiString AILevelSwitch_mA::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     48              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
     49              AnsiString LocalString;
     50              LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   00000004   ........           LDR      R6,??Subroutine12_0  ;; CrLfStr
   \   00000008   C4DF4DE2           SUB      SP,SP,#+784
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   A01094E5           LDR      R1,[R4, #+160]
   \   00000030   A10F8DE2           ADD      R0,SP,#+644
   \   00000034   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000038   A12F8DE2           ADD      R2,SP,#+644
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   9A0F8DE2           ADD      R0,SP,#+616
   \   00000044   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000048   0620A0E1           MOV      R2,R6
   \   0000004C   9A1F8DE2           ADD      R1,SP,#+616
   \   00000050   930F8DE2           ADD      R0,SP,#+588
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   ........           LDR      R0,??DataTable2  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   007090E5           LDR      R7,[R0, #+0]
   \   00000064   931F8DE2           ADD      R1,SP,#+588
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   930F8DE2           ADD      R0,SP,#+588
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   9A0F8DE2           ADD      R0,SP,#+616
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   A10F8DE2           ADD      R0,SP,#+644
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              LocalString += AnalogInput::MakeConfigString();   //common
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   A81F8DE2           ADD      R1,SP,#+672
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000B4   0730A0E1           MOV      R3,R7
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   A81F8DE2           ADD      R1,SP,#+672
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??append,??append??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   A80F8DE2           ADD      R0,SP,#+672
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              if (OverrideSwitchLimits) {
   \   000000D8   6401D4E5           LDRB     R0,[R4, #+356]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   B600000A           BEQ      ??MakeConfigString_2
     53                  LocalString += TabStr1 + KeyWord(C_AI_MA_LEV_SWITCH_ON) + FloatToAnsiString(SwitchOn_mA) + CrLfStr;
   \   000000E4   681194E5           LDR      R1,[R4, #+360]
   \   000000E8   0330A0E3           MOV      R3,#+3
   \   000000EC   0720A0E3           MOV      R2,#+7
   \   000000F0   8C008DE2           ADD      R0,SP,#+140
   \   000000F4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000F8   8C1EA0E3           MOV      R1,#+2240
   \   000000FC   70008DE2           ADD      R0,SP,#+112
   \   00000100   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000104   70208DE2           ADD      R2,SP,#+112
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   54008DE2           ADD      R0,SP,#+84
   \   00000110   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000114   8C208DE2           ADD      R2,SP,#+140
   \   00000118   54108DE2           ADD      R1,SP,#+84
   \   0000011C   38008DE2           ADD      R0,SP,#+56
   \   00000120   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000124   0620A0E1           MOV      R2,R6
   \   00000128   38108DE2           ADD      R1,SP,#+56
   \   0000012C   1C008DE2           ADD      R0,SP,#+28
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   0730A0E1           MOV      R3,R7
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   1C108DE2           ADD      R1,SP,#+28
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           _BLF     ??append,??append??rA
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   1C008DE2           ADD      R0,SP,#+28
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   38008DE2           ADD      R0,SP,#+56
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   8C008DE2           ADD      R0,SP,#+140
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   54008DE2           ADD      R0,SP,#+84
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   70008DE2           ADD      R0,SP,#+112
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
     54                  LocalString += TabStr1 + KeyWord(C_AI_MA_LEV_SWITCH_OFF) + FloatToAnsiString(SwitchOff_mA) + CrLfStr;
   \   00000198   6C1194E5           LDR      R1,[R4, #+364]
   \   0000019C   0330A0E3           MOV      R3,#+3
   \   000001A0   0720A0E3           MOV      R2,#+7
   \   000001A4   460F8DE2           ADD      R0,SP,#+280
   \   000001A8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001AC   C110A0E3           MOV      R1,#+193
   \   000001B0   801E81E3           ORR      R1,R1,#0x800
   \   000001B4   FC008DE2           ADD      R0,SP,#+252
   \   000001B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001BC   FC208DE2           ADD      R2,SP,#+252
   \   000001C0   0D10A0E1           MOV      R1,SP
   \   000001C4   E0008DE2           ADD      R0,SP,#+224
   \   000001C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001CC   462F8DE2           ADD      R2,SP,#+280
   \   000001D0   E0108DE2           ADD      R1,SP,#+224
   \   000001D4   C4008DE2           ADD      R0,SP,#+196
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   C4108DE2           ADD      R1,SP,#+196
   \   000001E4   A8008DE2           ADD      R0,SP,#+168
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0730A0E1           MOV      R3,R7
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   A8108DE2           ADD      R1,SP,#+168
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   A8008DE2           ADD      R0,SP,#+168
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   C4008DE2           ADD      R0,SP,#+196
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   460F8DE2           ADD      R0,SP,#+280
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   E0008DE2           ADD      R0,SP,#+224
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   FC008DE2           ADD      R0,SP,#+252
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
     55                  LocalString += TabStr1 + KeyWord(C_AI_MA_LEV_SWITCH_WIN) + FloatToAnsiString(SwitchWindow) + CrLfStr;
   \   00000250   701194E5           LDR      R1,[R4, #+368]
   \   00000254   0330A0E3           MOV      R3,#+3
   \   00000258   0720A0E3           MOV      R2,#+7
   \   0000025C   690F8DE2           ADD      R0,SP,#+420
   \   00000260   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000264   C210A0E3           MOV      R1,#+194
   \   00000268   801E81E3           ORR      R1,R1,#0x800
   \   0000026C   620F8DE2           ADD      R0,SP,#+392
   \   00000270   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000274   622F8DE2           ADD      R2,SP,#+392
   \   00000278   0D10A0E1           MOV      R1,SP
   \   0000027C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000284   692F8DE2           ADD      R2,SP,#+420
   \   00000288   5B1F8DE2           ADD      R1,SP,#+364
   \   0000028C   540F8DE2           ADD      R0,SP,#+336
   \   00000290   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000294   0620A0E1           MOV      R2,R6
   \   00000298   541F8DE2           ADD      R1,SP,#+336
   \   0000029C   4D0F8DE2           ADD      R0,SP,#+308
   \   000002A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A4   0730A0E1           MOV      R3,R7
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   4D1F8DE2           ADD      R1,SP,#+308
   \   000002B0   0500A0E1           MOV      R0,R5
   \   000002B4   ........           _BLF     ??append,??append??rA
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   4D0F8DE2           ADD      R0,SP,#+308
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   540F8DE2           ADD      R0,SP,#+336
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   690F8DE2           ADD      R0,SP,#+420
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   5B0F8DE2           ADD      R0,SP,#+364
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   620F8DE2           ADD      R0,SP,#+392
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
     56                  LocalString += TabStr1 + KeyWord(C_AI_MA_LEV_SWITCH_MAX) + FloatToAnsiString(SwitchMax_mA) + CrLfStr;
   \   00000308   741194E5           LDR      R1,[R4, #+372]
   \   0000030C   0330A0E3           MOV      R3,#+3
   \   00000310   0720A0E3           MOV      R2,#+7
   \   00000314   8C0F8DE2           ADD      R0,SP,#+560
   \   00000318   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000031C   C310A0E3           MOV      R1,#+195
   \   00000320   801E81E3           ORR      R1,R1,#0x800
   \   00000324   850F8DE2           ADD      R0,SP,#+532
   \   00000328   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000032C   852F8DE2           ADD      R2,SP,#+532
   \   00000330   0D10A0E1           MOV      R1,SP
   \   00000334   7E0F8DE2           ADD      R0,SP,#+504
   \   00000338   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000033C   8C2F8DE2           ADD      R2,SP,#+560
   \   00000340   7E1F8DE2           ADD      R1,SP,#+504
   \   00000344   770F8DE2           ADD      R0,SP,#+476
   \   00000348   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000034C   0620A0E1           MOV      R2,R6
   \   00000350   771F8DE2           ADD      R1,SP,#+476
   \   00000354   700F8DE2           ADD      R0,SP,#+448
   \   00000358   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000035C   0730A0E1           MOV      R3,R7
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   701F8DE2           ADD      R1,SP,#+448
   \   00000368   0500A0E1           MOV      R0,R5
   \   0000036C   ........           _BLF     ??append,??append??rA
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   700F8DE2           ADD      R0,SP,#+448
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   0110A0E3           MOV      R1,#+1
   \   00000388   770F8DE2           ADD      R0,SP,#+476
   \   0000038C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   8C0F8DE2           ADD      R0,SP,#+560
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   7E0F8DE2           ADD      R0,SP,#+504
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   850F8DE2           ADD      R0,SP,#+532
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              }
     58              LocalString += TabStr1 + KeyWord(C_AI_END) + CrLfStr;
   \                     ??MakeConfigString_2:
   \   000003C0   9810A0E3           MOV      R1,#+152
   \   000003C4   801E81E3           ORR      R1,R1,#0x800
   \   000003C8   BD0F8DE2           ADD      R0,SP,#+756
   \   000003CC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003D0   BD2F8DE2           ADD      R2,SP,#+756
   \   000003D4   0D10A0E1           MOV      R1,SP
   \   000003D8   B60F8DE2           ADD      R0,SP,#+728
   \   000003DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E0   0620A0E1           MOV      R2,R6
   \   000003E4   B61F8DE2           ADD      R1,SP,#+728
   \   000003E8   AF0F8DE2           ADD      R0,SP,#+700
   \   000003EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F0   0730A0E1           MOV      R3,R7
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   AF1F8DE2           ADD      R1,SP,#+700
   \   000003FC   0500A0E1           MOV      R0,R5
   \   00000400   ........           _BLF     ??append,??append??rA
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   0110A0E3           MOV      R1,#+1
   \   0000040C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000410   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   B60F8DE2           ADD      R0,SP,#+728
   \   00000420   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0110A0E3           MOV      R1,#+1
   \   0000042C   BD0F8DE2           ADD      R0,SP,#+756
   \   00000430   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              LocalString += CrLfStr;
   \   00000434   0730A0E1           MOV      R3,R7
   \   00000438   0020A0E3           MOV      R2,#+0
   \   0000043C   0610A0E1           MOV      R1,R6
   \   00000440   0500A0E1           MOV      R0,R5
   \   00000444   ........           _BLF     ??append,??append??rA
     60          
     61              return (LocalString);
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   0110A0E3           MOV      R1,#+1
   \   00000450   0D00A0E1           MOV      R0,SP
   \   00000454   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000458   C4DF8DE2           ADD      SP,SP,#+784
   \   0000045C                      REQUIRE ?Subroutine12
   \   0000045C                      ;; // Fall through to label ?Subroutine12
     62              //ConfigString.AddString(LocalString);
     63          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine12_0:
   \   00000008   ........           DC32     CrLfStr
     64          //---------------------------------------------------------------------------
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          bool AILevelSwitch_mA::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04E2DE9           PUSH     {R4-R7,R9-R11,LR}
     67              bool NoError = true;
     68              int ErrorLine = 0;
   \   00000004   14B29FE5           LDR      R11,??LoadConfigString_2  ;; `?<Constant "Level switch sensor">`
   \   00000008   74D04DE2           SUB      SP,SP,#+116
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   01A0A0E3           MOV      R10,#+1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0160E0E1           MVN      R6,R1
   \   00000024   0190A0E3           MOV      R9,#+1
     69              int Key;
     70              do {
     71                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   20108DE2           ADD      R1,SP,#+32
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
     72                  if (ErrorLine) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00000A           BEQ      ??LoadConfigString_4
     73                      if (ErrorLine != EOF) {
   \   00000048   060050E1           CMP      R0,R6
   \   0000004C   6400000A           BEQ      ??LoadConfigString_5
     74                          GiveConfigWarning("Level switch sensor", ErrorLine);
   \   00000050   0B10A0E1           MOV      R1,R11
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_6:
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   5A0000EA           B        ??LoadConfigString_5
     75                      }
     76                  } else {
     77                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   00000078   20108DE2           ADD      R1,SP,#+32
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   ........           _BLF     ??string,??string??rA
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000008C   0070A0E1           MOV      R7,R0
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
     78                      switch (Key) {
   \   000000A0   9810A0E3           MOV      R1,#+152
   \   000000A4   801E81E3           ORR      R1,R1,#0x800
   \   000000A8   010057E1           CMP      R7,R1
   \   000000AC   4C00000A           BEQ      ??LoadConfigString_5
   \   000000B0   011081E3           ORR      R1,R1,#0x1
   \   000000B4   010057E1           CMP      R7,R1
   \   000000B8   1B00000A           BEQ      ??LoadConfigString_7
   \   000000BC   8C0E57E3           CMP      R7,#+2240
   \   000000C0   1D00000A           BEQ      ??LoadConfigString_8
   \   000000C4   281081E2           ADD      R1,R1,#+40
   \   000000C8   010057E1           CMP      R7,R1
   \   000000CC   2100000A           BEQ      ??LoadConfigString_9
   \   000000D0   011081E2           ADD      R1,R1,#+1
   \   000000D4   010057E1           CMP      R7,R1
   \   000000D8   2500000A           BEQ      ??LoadConfigString_10
   \   000000DC   011081E3           ORR      R1,R1,#0x1
   \   000000E0   010057E1           CMP      R7,R1
   \   000000E4   2E00000A           BEQ      ??LoadConfigString_11
     79                      default:
     80                          GiveConfigWarning("Level switch sensor", InputKeyWord, ConfigString.LineCount);
   \   000000E8   20108DE2           ADD      R1,SP,#+32
   \   000000EC   3C008DE2           ADD      R0,SP,#+60
   \   000000F0   ........           _BLF     ??string,??string??rA
   \   000000F4   0B10A0E1           MOV      R1,R11
   \   000000F8   58008DE2           ADD      R0,SP,#+88
   \   000000FC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000100   1C2095E5           LDR      R2,[R5, #+28]
   \   00000104   3C108DE2           ADD      R1,SP,#+60
   \   00000108   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   3C008DE2           ADD      R0,SP,#+60
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0910A0E1           MOV      R1,R9
   \   00000124   58008DE2           ADD      R0,SP,#+88
   \   00000128   D0FFFFEA           B        ??LoadConfigString_6
     81                          break;
     82                      case C_AI_START_COMMON:
     83                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_7:
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000138   290000EA           B        ??LoadConfigString_5
     84                          break;
     85                      case C_AI_MA_LEV_SWITCH_ON  :
     86                          SwitchOn_mA = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_8:
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0D10A0E1           MOV      R1,SP
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000014C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000150   680184E5           STR      R0,[R4, #+360]
     87                          NoError = !ErrorLine;
   \   00000154   0C0000EA           B        ??LoadConfigString_12
     88                          OverrideSwitchLimits = true;
     89                          break;
     90                      case C_AI_MA_LEV_SWITCH_OFF :
     91                          SwitchOff_mA = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_9:
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0D10A0E1           MOV      R1,SP
   \   00000160   0500A0E1           MOV      R0,R5
   \   00000164   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000168   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000016C   6C0184E5           STR      R0,[R4, #+364]
     92                          NoError = !ErrorLine;
   \   00000170   050000EA           B        ??LoadConfigString_12
     93                          OverrideSwitchLimits = true;
     94                          break;
     95                      case C_AI_MA_LEV_SWITCH_WIN :
     96                          SwitchWindow = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_10:
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0D10A0E1           MOV      R1,SP
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000184   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000188   700184E5           STR      R0,[R4, #+368]
     97                          NoError = !ErrorLine;
   \                     ??LoadConfigString_12:
   \   0000018C   00009DE5           LDR      R0,[SP, #+0]
     98                          OverrideSwitchLimits = true;
   \   00000190   6491C4E5           STRB     R9,[R4, #+356]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   01A0A003           MOVEQ    R10,#+1
   \   0000019C   00A0A013           MOVNE    R10,#+0
   \   000001A0   0F0000EA           B        ??LoadConfigString_5
     99                          break;
    100                      case C_AI_MA_LEV_SWITCH_MAX:
    101                          SwitchMax_mA = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_11:
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001B4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001B8   740184E5           STR      R0,[R4, #+372]
    102                          NoError = !ErrorLine;
   \   000001BC   00009DE5           LDR      R0,[SP, #+0]
    103                          OverrideSwitchLimits = true;
   \   000001C0   6491C4E5           STRB     R9,[R4, #+356]
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   01A0A003           MOVEQ    R10,#+1
   \   000001CC   00A0A013           MOVNE    R10,#+0
    104                          if (NoError) {
   \   000001D0   00005AE3           CMP      R10,#+0
   \   000001D4   0200000A           BEQ      ??LoadConfigString_5
    105                              ((AlarmmAmpShortCircuit *)ShortCircuitPtr) ->SetAlarmLimit(SwitchMax_mA);
   \   000001D8   741194E5           LDR      R1,[R4, #+372]
   \   000001DC   780194E5           LDR      R0,[R4, #+376]
   \   000001E0   ........           _BLF     ??SetAlarmLimit,??SetAlarmLimit??rA
    106                          }
    107                          break;
    108                      case C_AI_END:
    109                          break;
    110                      }
    111                  }
    112              }while (NoError && (ErrorLine != EOF) && (Key != C_AI_END));
   \                     ??LoadConfigString_5:
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   20008DE2           ADD      R0,SP,#+32
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F4   00005AE3           CMP      R10,#+0
   \   000001F8   00009D15           LDRNE    R0,[SP, #+0]
   \   000001FC   06005011           CMPNE    R0,R6
   \   00000200   9800A013           MOVNE    R0,#+152
   \   00000204   800E8013           ORRNE    R0,R0,#0x800
   \   00000208   00005711           CMPNE    R7,R0
   \   0000020C   85FFFF1A           BNE      ??LoadConfigString_3
    113              return (NoError);
   \   00000210   0A00A0E1           MOV      R0,R10
   \   00000214   74D08DE2           ADD      SP,SP,#+116
   \   00000218   F04EBDE8           POP      {R4-R7,R9-R11,LR}
   \   0000021C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   00000220   ........           DC32     `?<Constant "Level switch sensor">`
    114          }
    115          ///////////////////////////////////////////////////////////////
    116          //
    117          // Routines for Calculation of values
    118          //
    119          ///////////////////////////////////////////////////////////////
    120          
    121          
    122          
    123          

   \                                 In segment CODE, align 4, keep-with-next
    124          float AILevelSwitch_mA::Calculate(void) {
   \                     ??Calculate:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    125              if (CanCalculate()) {
   \   00000008   0060A0E3           MOV      R6,#+0
   \   0000000C   4E5FA0E3           MOV      R5,#+312
   \   00000010   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1D00000A           BEQ      ??Calculate_1
    126                  float tmpCalcValue = Gain * FilteredValue - Offset;
   \   0000001C   3C1194E5           LDR      R1,[R4, #+316]
   \   00000020   440194E5           LDR      R0,[R4, #+324]
   \   00000024   ........           _BLF     __fMul,??__fMul??rA
   \   00000028   401194E5           LDR      R1,[R4, #+320]
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
    127                  if (fabs(tmpCalcValue - SwitchOn_mA) < SwitchWindow) {
   \   00000030   681194E5           LDR      R1,[R4, #+360]
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   ........           _BLF     __fSub,??__fSub??rA
   \   0000003C   708194E5           LDR      R8,[R4, #+368]
   \   00000040   8004C0E3           BIC      R0,R0,#0x80000000
   \   00000044   0810A0E1           MOV      R1,R8
   \   00000048   ........           _BLF     __fLess,??__fLess??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0200000A           BEQ      ??Calculate_2
    128                      CalcValue = LEVELSWITCH_ON;
   \   00000054   FE05A0E3           MOV      R0,#+1065353216
    129                      Failure = false;
   \                     ??Calculate_3:
   \   00000058   0460C5E7           STRB     R6,[R5, +R4]
   \   0000005C   110000EA           B        ??Calculate_4
    130                  } else if (fabs(tmpCalcValue - SwitchOff_mA) < SwitchWindow) {
   \                     ??Calculate_2:
   \   00000060   6C1194E5           LDR      R1,[R4, #+364]
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     __fSub,??__fSub??rA
   \   0000006C   8004C0E3           BIC      R0,R0,#0x80000000
   \   00000070   0810A0E1           MOV      R1,R8
   \   00000074   ........           _BLF     __fLess,??__fLess??rA
   \   00000078   000050E3           CMP      R0,#+0
    131                      CalcValue = LEVELSWITCH_OFF;
   \   0000007C   0000A013           MOVNE    R0,#+0
    132                      Failure   = false;
   \   00000080   F4FFFF1A           BNE      ??Calculate_3
    133                  } else {
    134                      CalcValue = LEVELSWITCH_ERROR;
   \   00000084   4004A0E3           MOV      R0,#+1073741824
    135                      Failure   = true;
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   0410C5E7           STRB     R1,[R5, +R4]
   \   00000090   040000EA           B        ??Calculate_4
    136                  }
    137              } else {
    138                  if (Enable) {
   \                     ??Calculate_1:
   \   00000094   3401D4E5           LDRB     R0,[R4, #+308]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   EDFFFF0A           BEQ      ??Calculate_3
    139                      CalcValue = LEVELSWITCH_HW_ERROR;
   \   000000A0   4004A0E3           MOV      R0,#+1073741824
   \   000000A4   400880E3           ORR      R0,R0,#0x400000
   \                     ??Calculate_4:
   \   000000A8   480184E5           STR      R0,[R4, #+328]
    140                  } else {
    141                      CalcValue = LEVELSWITCH_OFF;
    142                      Failure   = false;
    143                  }
    144              }
    145              return (CalcValue);
   \   000000AC                      REQUIRE ?Subroutine13
   \   000000AC                      ;; // Fall through to label ?Subroutine13
    146          }
    147          
    148          ///////////////////////////////////////////////////////////////
    149          //
    150          // Routines for the librarian for input
    151          //
    152          ///////////////////////////////////////////////////////////////
    153          
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          int AILevelSwitch_mA::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C90DDE5           LDRB     R9,[SP, #+92]
   \   0000000C   60509DE5           LDR      R5,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0280A0E1           MOV      R8,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    156              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
    157              switch (ValueId) {
   \   0000002C   546FA0E3           MOV      R6,#+336
   \   00000030   D80047E2           SUB      R0,R7,#+216
   \   00000034   400E40E2           SUB      R0,R0,#+1024
   \   00000038   020050E3           CMP      R0,#+2
   \   0000003C   5700008A           BHI      ??PutValue_3
   \   00000040   012F8FE2           ADR      R2,??PutValue_1
   \   00000044   0020D2E7           LDRB     R2,[R2, R0]
   \   00000048   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   0000004C   001E3900           DC8      +0,+30,+57,+0
    158              case SVT_MA_ON  :
    159                  {
    160                      float Value = ConvertToSi(NewValue, CURRENT_UNIT, Status, 4.0 / 1000, 20.0 / 1000, SwitchOn_mA);
   \                     ??PutValue_4:
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??string,??string??rA
   \   00000058   680194E5           LDR      R0,[R4, #+360]
   \   0000005C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000060   03002DE9           PUSH     {R0,R1}
   \   00000064   AC019FE5           LDR      R0,??PutValue_5  ;; 0x47ae147b
   \   00000068   AC119FE5           LDR      R1,??PutValue_5+0x4  ;; 0x3f947ae1
   \   0000006C   03002DE9           PUSH     {R0,R1}
   \   00000070   A8019FE5           LDR      R0,??PutValue_5+0x8  ;; 0xffffffffd2f1a9fc
   \   00000074   A8119FE5           LDR      R1,??PutValue_5+0xC  ;; 0x3f70624d
   \   00000078   03002DE9           PUSH     {R0,R1}
   \   0000007C   18208DE2           ADD      R2,SP,#+24
   \   00000080   20008DE2           ADD      R0,SP,#+32
   \   00000084   0800BDE8           POP      {R3}
   \   00000088   1110A0E3           MOV      R1,#+17
   \   0000008C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000090   0070A0E1           MOV      R7,R0
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   1C008DE2           ADD      R0,SP,#+28
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    161                      if (Status == E_NO_ERR) {
   \   000000A4   14009DE5           LDR      R0,[SP, #+20]
   \   000000A8   14D08DE2           ADD      SP,SP,#+20
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   4A00001A           BNE      ??PutValue_6
    162                          SwitchOn_mA = Value;
   \   000000B4   687184E5           STR      R7,[R4, #+360]
    163                          TimeModified = time(NULL);
   \                     ??PutValue_7:
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   ........           _BLF     time,??time??rA
   \   000000C0   040086E7           STR      R0,[R6, +R4]
   \   000000C4   450000EA           B        ??PutValue_6
    164                      }
    165                  }
    166                  break;
    167              case SVT_MA_OFF  :
    168                  {
    169                      float Value = ConvertToSi(NewValue, CURRENT_UNIT, Status, 4.0 / 1000, 20.0 / 1000, SwitchOff_mA);
   \                     ??PutValue_8:
   \   000000C8   08008DE2           ADD      R0,SP,#+8
   \   000000CC   ........           _BLF     ??string,??string??rA
   \   000000D0   6C0194E5           LDR      R0,[R4, #+364]
   \   000000D4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000D8   03002DE9           PUSH     {R0,R1}
   \   000000DC   34019FE5           LDR      R0,??PutValue_5  ;; 0x47ae147b
   \   000000E0   34119FE5           LDR      R1,??PutValue_5+0x4  ;; 0x3f947ae1
   \   000000E4   03002DE9           PUSH     {R0,R1}
   \   000000E8   30019FE5           LDR      R0,??PutValue_5+0x8  ;; 0xffffffffd2f1a9fc
   \   000000EC   30119FE5           LDR      R1,??PutValue_5+0xC  ;; 0x3f70624d
   \   000000F0   03002DE9           PUSH     {R0,R1}
   \   000000F4   18208DE2           ADD      R2,SP,#+24
   \   000000F8   20008DE2           ADD      R0,SP,#+32
   \   000000FC   0800BDE8           POP      {R3}
   \   00000100   1110A0E3           MOV      R1,#+17
   \   00000104   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000108   0070A0E1           MOV      R7,R0
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   1C008DE2           ADD      R0,SP,#+28
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
    170                      if (Status == E_NO_ERR) {
   \   0000011C   14009DE5           LDR      R0,[SP, #+20]
   \   00000120   14D08DE2           ADD      SP,SP,#+20
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   2C00001A           BNE      ??PutValue_6
    171                          SwitchOff_mA = Value;
   \   0000012C   6C7184E5           STR      R7,[R4, #+364]
    172                          TimeModified = time(NULL);
   \   00000130   E0FFFFEA           B        ??PutValue_7
    173                      }
    174                  }
    175                  break;
    176              case SVT_MA_WINDOW:
    177                  {
    178                      float Value = ConvertToSi(NewValue, CURRENT_UNIT, Status, 0.0, 4.0 / 1000, SwitchWindow);
   \                     ??PutValue_9:
   \   00000134   08008DE2           ADD      R0,SP,#+8
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   700194E5           LDR      R0,[R4, #+368]
   \   00000140   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000144   03002DE9           PUSH     {R0,R1}
   \   00000148   D0009FE5           LDR      R0,??PutValue_5+0x8  ;; 0xffffffffd2f1a9fc
   \   0000014C   D0109FE5           LDR      R1,??PutValue_5+0xC  ;; 0x3f70624d
   \   00000150   03002DE9           PUSH     {R0,R1}
   \   00000154   0000A0E3           MOV      R0,#+0
   \   00000158   0010A0E3           MOV      R1,#+0
   \   0000015C   03002DE9           PUSH     {R0,R1}
   \   00000160   18208DE2           ADD      R2,SP,#+24
   \   00000164   20008DE2           ADD      R0,SP,#+32
   \   00000168   0800BDE8           POP      {R3}
   \   0000016C   1110A0E3           MOV      R1,#+17
   \   00000170   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000174   0070A0E1           MOV      R7,R0
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   1C008DE2           ADD      R0,SP,#+28
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
    179                      if (Status == E_NO_ERR) {
   \   00000188   14009DE5           LDR      R0,[SP, #+20]
   \   0000018C   14D08DE2           ADD      SP,SP,#+20
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   1100001A           BNE      ??PutValue_6
    180                          SwitchWindow = Value;
   \   00000198   707184E5           STR      R7,[R4, #+368]
    181                          TimeModified = time(NULL);
   \   0000019C   C5FFFFEA           B        ??PutValue_7
    182                      }
    183                  }
    184                  break;
    185              default:
    186                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   000001A0   24008DE2           ADD      R0,SP,#+36
   \   000001A4   ........           _BLF     ??string,??string??rA
   \   000001A8   04008DE2           ADD      R0,SP,#+4
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   00022DE9           PUSH     {R9}
   \   000001B4   2C308DE2           ADD      R3,SP,#+44
   \   000001B8   0820A0E1           MOV      R2,R8
   \   000001BC   0710A0E1           MOV      R1,R7
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001C8   08008DE5           STR      R0,[SP, #+8]
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   2C008DE2           ADD      R0,SP,#+44
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   08D08DE2           ADD      SP,SP,#+8
    187                  break;
    188              }
    189              if (Status == E_NO_ERR) {
   \                     ??PutValue_6:
   \   000001E0   00009DE5           LDR      R0,[SP, #+0]
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   0400001A           BNE      ??PutValue_10
    190                  SetModifiedFlag();
   \   000001EC   A41094E5           LDR      R1,[R4, #+164]
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   541091E5           LDR      R1,[R1, #+84]
   \   000001F8   0FE0A0E1           MOV      LR,PC
   \   000001FC   11FF2FE1           BX       R1
    191              }
    192              if (UnitId) {
   \                     ??PutValue_10:
   \   00000200   000055E3           CMP      R5,#+0
    193                  *UnitId = ValUnitId;
   \   00000204   04009D15           LDRNE    R0,[SP, #+4]
   \   00000208   00008515           STRNE    R0,[R5, #+0]
    194              }
    195              return (Status);
   \   0000020C   00009DE5           LDR      R0,[SP, #+0]
   \   00000210   40D08DE2           ADD      SP,SP,#+64
   \   00000214   ........           B        ?Subroutine14
   \                     ??PutValue_5:
   \   00000218   7B14AE47           DC32     0x47ae147b
   \   0000021C   E17A943F           DC32     0x3f947ae1
   \   00000220   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   00000224   4D62703F           DC32     0x3f70624d
    196          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    197          

   \                                 In segment CODE, align 4, keep-with-next
    198          int  AILevelSwitch_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   00C0A0E1           MOV      R12,R0
   \   00000010   0340A0E1           MOV      R4,R3
    199              int Status = GETVAL_NO_ERR;
   \   00000014   0070A0E3           MOV      R7,#+0
    200              switch (ValueId) {
   \   00000018   1100A0E3           MOV      R0,#+17
   \   0000001C   0230A0E3           MOV      R3,#+2
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   B590A0E3           MOV      R9,#+181
   \   00000028   409E89E3           ORR      R9,R9,#0x400
   \   0000002C   090051E1           CMP      R1,R9
   \   00000030   0C00000A           BEQ      ??GetValue_2
   \   00000034   039089E2           ADD      R9,R9,#+3
   \   00000038   090051E1           CMP      R1,R9
   \   0000003C   0E00000A           BEQ      ??GetValue_3
   \   00000040   209089E2           ADD      R9,R9,#+32
   \   00000044   090051E1           CMP      R1,R9
   \   00000048   1100000A           BEQ      ??GetValue_4
   \   0000004C   019089E3           ORR      R9,R9,#0x1
   \   00000050   090051E1           CMP      R1,R9
   \   00000054   1300000A           BEQ      ??GetValue_5
   \   00000058   019089E2           ADD      R9,R9,#+1
   \   0000005C   090051E1           CMP      R1,R9
   \   00000060   1200000A           BEQ      ??GetValue_6
   \   00000064   130000EA           B        ??GetValue_7
    201              case SVT_AI_OFFSET   :
    202                  MyRetValue = Offset;
   \                     ??GetValue_2:
   \   00000068   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_8:
   \   0000006C   000084E5           STR      R0,[R4, #+0]
    203                  DecPnt     = 0;
   \   00000070   008085E5           STR      R8,[R5, #+0]
    204                  Unit       = NO_UNIT;
   \   00000074   008086E5           STR      R8,[R6, #+0]
   \   00000078   150000EA           B        ??GetValue_9
    205                  break;
    206              case SVT_AI_CALC_VAL :
    207                  MyRetValue = Calculate();
   \                     ??GetValue_3:
   \   0000007C   A4109CE5           LDR      R1,[R12, #+164]
   \   00000080   0C00A0E1           MOV      R0,R12
   \   00000084   601091E5           LDR      R1,[R1, #+96]
   \   00000088   0FE0A0E1           MOV      LR,PC
   \   0000008C   11FF2FE1           BX       R1
   \   00000090   F5FFFFEA           B        ??GetValue_8
    208                  DecPnt     = 0;
    209                  Unit       = NO_UNIT;
    210                  break;
    211          
    212              case SVT_MA_ON  :
    213                  MyRetValue = SwitchOn_mA;
   \                     ??GetValue_4:
   \   00000094   68119CE5           LDR      R1,[R12, #+360]
   \                     ??GetValue_10:
   \   00000098   001084E5           STR      R1,[R4, #+0]
    214                  DecPnt     = 2;
   \   0000009C   003085E5           STR      R3,[R5, #+0]
    215                  Unit       = CURRENT_UNIT;
   \   000000A0   000086E5           STR      R0,[R6, #+0]
   \   000000A4   0A0000EA           B        ??GetValue_9
    216                  break;
    217              case SVT_MA_OFF  :
    218                  MyRetValue = SwitchOff_mA;
   \                     ??GetValue_5:
   \   000000A8   6C119CE5           LDR      R1,[R12, #+364]
   \   000000AC   F9FFFFEA           B        ??GetValue_10
    219                  DecPnt     = 2;
    220                  Unit       = CURRENT_UNIT;
    221                  break;
    222              case SVT_MA_WINDOW:
    223                  MyRetValue = SwitchWindow;
   \                     ??GetValue_6:
   \   000000B0   70119CE5           LDR      R1,[R12, #+368]
   \   000000B4   F7FFFFEA           B        ??GetValue_10
    224                  DecPnt     = 2;
    225                  Unit       = CURRENT_UNIT;
    226                  break;
    227              default:
    228                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_7:
   \   000000B8   40002DE9           PUSH     {R6}
   \   000000BC   20002DE9           PUSH     {R5}
   \   000000C0   0430A0E1           MOV      R3,R4
   \   000000C4   0C00A0E1           MOV      R0,R12
   \   000000C8   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   000000CC   0070A0E1           MOV      R7,R0
   \   000000D0   08D08DE2           ADD      SP,SP,#+8
    229                  break;
    230              }
    231              return (Status);
   \                     ??GetValue_9:
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8                      REQUIRE ?Subroutine14
   \   000000D8                      ;; // Fall through to label ?Subroutine14
    232          }
    233          

   \                                 In segment CODE, align 4, keep-with-next
    234          int AILevelSwitch_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   C4D04DE2           SUB      SP,SP,#+196
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0350A0E1           MOV      R5,R3
    235              int Status = GETVAL_NO_ERR;
   \   00000010   0060A0E3           MOV      R6,#+0
    236              switch (ValueId) {
   \   00000014   BF30A0E3           MOV      R3,#+191
   \   00000018   403E83E3           ORR      R3,R3,#0x400
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   0F00000A           BEQ      ??GetStringValue_2
   \   00000024   4C0E51E3           CMP      R1,#+1216
   \   00000028   4700001A           BNE      ??GetStringValue_3
    237              case SVT_AI_UNIT:
    238                  MyString = GetUnitName(CURRENT_UNIT);
   \   0000002C   1110A0E3           MOV      R1,#+17
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   ........           LDR      R0,??DataTable2  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \                     ??GetStringValue_4:
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000060   3C0000EA           B        ??GetStringValue_5
    239                  break;
    240              case SVT_AI_RANGE:
    241                  MyString = "Normal" + LibGetValue(SVT_MA_OFF, this) + " Alarm " + LibGetValue(SVT_MA_ON, this);
   \                     ??GetStringValue_2:
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   D810A0E3           MOV      R1,#+216
   \   00000070   401E81E3           ORR      R1,R1,#0x400
   \   00000074   A8008DE2           ADD      R0,SP,#+168
   \   00000078   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   0000007C   0420A0E1           MOV      R2,R4
   \   00000080   E0409FE5           LDR      R4,??GetStringValue_6  ;; `?<Constant "Normal">`
   \   00000084   0630A0E1           MOV      R3,R6
   \   00000088   D910A0E3           MOV      R1,#+217
   \   0000008C   401E81E3           ORR      R1,R1,#0x400
   \   00000090   8C008DE2           ADD      R0,SP,#+140
   \   00000094   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000098   8C208DE2           ADD      R2,SP,#+140
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   70008DE2           ADD      R0,SP,#+112
   \   000000A4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000000A8   082084E2           ADD      R2,R4,#+8
   \   000000AC   70108DE2           ADD      R1,SP,#+112
   \   000000B0   54008DE2           ADD      R0,SP,#+84
   \   000000B4   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000000B8   A8208DE2           ADD      R2,SP,#+168
   \   000000BC   54108DE2           ADD      R1,SP,#+84
   \   000000C0   38008DE2           ADD      R0,SP,#+56
   \   000000C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C8   38108DE2           ADD      R1,SP,#+56
   \   000000CC   1C008DE2           ADD      R0,SP,#+28
   \   000000D0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000D4   ........           LDR      R1,??DataTable2  ;; ??npos
   \   000000D8   0620A0E1           MOV      R2,R6
   \   000000DC   003091E5           LDR      R3,[R1, #+0]
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           _BLF     ??assign,??assign??rA
   \   000000EC   0620A0E1           MOV      R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   1C008DE2           ADD      R0,SP,#+28
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   38008DE2           ADD      R0,SP,#+56
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0620A0E1           MOV      R2,R6
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   A8008DE2           ADD      R0,SP,#+168
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0620A0E1           MOV      R2,R6
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   54008DE2           ADD      R0,SP,#+84
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   0620A0E1           MOV      R2,R6
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   70008DE2           ADD      R0,SP,#+112
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0620A0E1           MOV      R2,R6
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   8C008DE2           ADD      R0,SP,#+140
   \   00000148   C3FFFFEA           B        ??GetStringValue_4
    242                  break;
    243              default:
    244                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_3:
   \   0000014C   0530A0E1           MOV      R3,R5
   \   00000150   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000154   0060A0E1           MOV      R6,R0
    245                  break;
    246              }
    247              return (Status);
   \                     ??GetStringValue_5:
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   C4D08DE2           ADD      SP,SP,#+196
   \   00000160   7040BDE8           POP      {R4-R6,LR}
   \   00000164   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_6:
   \   00000168   ........           DC32     `?<Constant "Normal">`
    248          }
    249          

   \                                 In segment CODE, align 4, keep-with-next
    250          int AILevelSwitch_mA::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    251              return (AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    252          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Level switch sensor">`:
   \   00000000   4C6576656C20       DC8 "Level switch sensor"
   \              737769746368
   \              2073656E736F
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Normal">`:
   \   00000000   4E6F726D616C       DC8 "Normal"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   20416C61726D       DC8 " Alarm "
   \              2000        

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AILevelSwitch_mA &AILevelSwitch_mA::new AILevelSwitch_mA(int, float, float, float)
   \                     `??new AILevelSwitch_mA`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   600FA0E3           MOV      R0,#+384
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500000A           BEQ      `??new AILevelSwitch_mA_1`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??AILevelSwitch_mA
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \                     `??new AILevelSwitch_mA_1`:
   \   0000003C   ........           B        ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos
    253          
    254          
    255          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AILevelSwitch_mA::AILevelSwitch_mA(int, float, float, float)
                                       40
     AILevelSwitch_mA::Calculate()     24
     AILevelSwitch_mA::GetFilter()      0
     AILevelSwitch_mA::GetStringValue(int, int, AnsiString &)
                                      212
     AILevelSwitch_mA::GetValue(int, int, float &, int &, int &)
                                       36
     AILevelSwitch_mA::LoadConfigString(TSNConfigString &)
                                      152
     AILevelSwitch_mA::MakeConfigString(int)
                                      804
     AILevelSwitch_mA::PutFloatValue(int, float)
                                        4
     AILevelSwitch_mA::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AILevelSwitch_mA::new AILevelSwitch_mA(int, float, float, float)
                                       24
     AILevelSwitch_mA::~AILevelSwitch_mA()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     AILevelSwitch_mA::AILevelSwitch_mA(int, float, float, float)
                                     236
     ?Subroutine13                     8
     AILevelSwitch_mA::~AILevelSwitch_mA()
                                      52
     AILevelSwitch_mA::GetFilter()     8
     AILevelSwitch_mA::MakeConfigString(int)
                                    1116
     ?Subroutine12                    12
     AILevelSwitch_mA::LoadConfigString(TSNConfigString &)
                                     548
     AILevelSwitch_mA::Calculate()   172
     AILevelSwitch_mA::PutValue(int, int, AnsiString, bool, int *)
                                     552
     ?Subroutine14                     8
     AILevelSwitch_mA::GetValue(int, int, float &, int &, int &)
                                     216
     AILevelSwitch_mA::GetStringValue(int, int, AnsiString &)
                                     364
     AILevelSwitch_mA::PutFloatValue(int, float)
                                      16
     ?<Constant "Level switch sensor">
                                      20
     ?<Constant "Normal">             16
     __sti__routine()                  4
     AILevelSwitch_mA::new AILevelSwitch_mA(int, float, float, float)
                                      64
     ??DataTable2                      4
      Others                         796

 
 5 332 bytes in segment CODE
   168 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 3 384 bytes of CODE  memory (+ 1 952 bytes shared)
   168 bytes of CONST memory

Errors: none
Warnings: none
