##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHighTemp.Cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHighTemp.Cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHighTemp.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHighTemp.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHighTemp.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_2  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_2:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighTemp::~AlarmHighTemp()
   \                     `?~AlarmHighTemp`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHighTemp_1`
   \   00000014   0100000A           BEQ      `?~AlarmHighTemp_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHighTemp_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHighTemp_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHighTemp_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmHighTemp::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmHighTemp::AlarmHighTemp(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmHighTemp:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   78009FE5           LDR      R0,??AlarmHighTemp_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     13          	NumberOfAlarmSettings++;
   \   00000018   74009FE5           LDR      R0,??AlarmHighTemp_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     14          	PROPointer 		    = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     15          	PROTmpPtr 		    = (PROTemperature*)PROPtr;
   \   0000002C   EC5084E5           STR      R5,[R4, #+236]
     16          	IDNumber 		    = (ID_AL_HIGH_TEMP << 16)+NumberOfAlarmSettings;
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   B016A0E3           MOV      R1,#+184549376
   \   00000038   C61881E3           ORR      R1,R1,#0xC60000
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
     17          	Type 			    = ID_AL_HIGH_TEMP;
   \   00000044   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     18          	Locked      	    = PROProjectInfo::HighTempLocked;
   \   0000004C   44009FE5           LDR      R0,??AlarmHighTemp_1+0x8  ;; ??HighTempLocked
   \   00000050   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000054   E800C4E5           STRB     R0,[R4, #+232]
     19          	Limit     		    = PROProjectInfo::HighTempLimit;
   \   00000058   3C009FE5           LDR      R0,??AlarmHighTemp_1+0xC  ;; ??HighTempLimit
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   E40084E5           STR      R0,[R4, #+228]
     20          	Deadband    	    = 0.5;
   \   00000064   FC05A0E3           MOV      R0,#+1056964608
   \   00000068   BC0084E5           STR      R0,[R4, #+188]
     21          	MessageKey          = L_WORD508;	// HighTemp
   \   0000006C   7F0FA0E3           MOV      R0,#+508
   \   00000070   B80084E5           STR      R0,[R4, #+184]
     22          	TPCMessageKey       = L_WORD509;	// HTmp
   \   00000074   010080E3           ORR      R0,R0,#0x1
   \   00000078   B40084E5           STR      R0,[R4, #+180]
     23          	PreviousEnable      = Enable;
   \   0000007C   E200D4E5           LDRB     R0,[R4, #+226]
   \   00000080   CC00C4E5           STRB     R0,[R4, #+204]
     24          }
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   3040BDE8           POP      {R4,R5,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmHighTemp_1:
   \   00000090   ........           DC32     ??__vtbl
   \   00000094   ........           DC32     ??NumberOfAlarmSettings
   \   00000098   ........           DC32     ??HighTempLocked
   \   0000009C   ........           DC32     ??HighTempLimit
     25          
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void AlarmHighTemp::Check(void)
     28          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     29          	float Val = PROTmpPtr->Temperature;
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
     30          	bool  HasTemp = PROTmpPtr->HasTemp;
     31          	int Status = AL_STAT_IN_DEADBAND;
   \   0000000C   0260A0E3           MOV      R6,#+2
   \   00000010   685190E5           LDR      R5,[R0, #+360]
     32          	if ( HasTemp ) {
   \   00000014   6001D0E5           LDRB     R0,[R0, #+352]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0800000A           BEQ      ??Check_1
     33          		if ( Val < Limit - Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC1094E5           LDR      R1,[R4, #+188]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     __fLess,??__fLess??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??Check_2
     34          			Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000044   0060A0E3           MOV      R6,#+0
   \   00000048   040000EA           B        ??Check_3
     35          		} else if ( Val >= Limit ) {
   \                     ??Check_2:
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     36          			Status = AL_STAT_IN_ALARM;
   \   0000005C   0160A013           MOVNE    R6,#+1
     37          		}
     38          	} else {
     39          		Status = AL_STAT_IN_NORMAL;
     40          	}
     41          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     42          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     43          
     44          ///////////////////////////////////////////////////////////////
     45          //
     46          // Routines for the librarian
     47          //
     48          ///////////////////////////////////////////////////////////////
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          int AlarmHighTemp::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     51          {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   78D04DE2           SUB      SP,SP,#+120
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   9CA0DDE5           LDRB     R10,[SP, #+156]
   \   00000010   A0509DE5           LDR      R5,[SP, #+160]
   \   00000014   0180A0E1           MOV      R8,R1
     52          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     53          	if ( Locked ) {
   \   00000024   E800D4E5           LDRB     R0,[R4, #+232]
   \   00000028   0290A0E1           MOV      R9,R2
   \   0000002C   0370A0E1           MOV      R7,R3
   \   00000030   000050E3           CMP      R0,#+0
     54          		Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A10A013           MOVNE    R1,#+42
   \   00000038   00108D15           STRNE    R1,[SP, #+0]
   \   0000003C   6B00001A           BNE      ??PutValue_3
     55          	} else {
     56                  float OrgLimit = Limit;
   \   00000040   E46094E5           LDR      R6,[R4, #+228]
     57          		int Key = FindConfigKey(NewValue);
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   5C008DE2           ADD      R0,SP,#+92
   \   0000004C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000050   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000054   00B0A0E1           MOV      R11,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   5C008DE2           ADD      R0,SP,#+92
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
     58          		switch ( Key ) {
   \   00000068   64B04BE2           SUB      R11,R11,#+100
   \   0000006C   05005BE3           CMP      R11,#+5
   \   00000070   0A00008A           BHI      ??PutValue_4
   \   00000074   010F8FE2           ADR      R0,??PutValue_1
   \   00000078   0B00D0E7           LDRB     R0,[R0, R11]
   \   0000007C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000080   01050105           DC8      +1,+5,+1,+5
   \   00000084   01050000           DC8      +1,+5,+0,+0
     59          			case C_ON:
     60          			case C_OPEN:
     61          			case C_ENABLE:
     62                          SetEnable(EnableTrue);
   \                     ??PutValue_5:
   \   00000088   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_6:
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     ??SetEnable,??SetEnable??rA
   \   00000094   3E0000EA           B        ??PutValue_7
     63          				break;
     64          			case C_OFF:
     65          			case C_CLOSE:
     66          			case C_DISABLE:
     67                          SetEnable(EnableFalse);
   \                     ??PutValue_8:
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   FAFFFFEA           B        ??PutValue_6
     68          				break;
     69          			default:
     70          				switch ( ValueId ) {
   \                     ??PutValue_4:
   \   000000A0   3210A0E3           MOV      R1,#+50
   \   000000A4   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000A8   010058E1           CMP      R8,R1
   \   000000AC   0710A0E1           MOV      R1,R7
   \   000000B0   2700001A           BNE      ??PutValue_9
     71          					case SVT_AL_LIMIT:
     72          						{
     73          							int NewStatus = FindConfigKey(NewValue);
   \   000000B4   24008DE2           ADD      R0,SP,#+36
   \   000000B8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000BC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000C0   0080A0E1           MOV      R8,R0
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
     74          							switch ( NewStatus ) {
   \   000000D4   648058E2           SUBS     R8,R8,#+100
   \   000000D8   EAFFFF0A           BEQ      ??PutValue_5
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   ECFFFF0A           BEQ      ??PutValue_8
     75          								case C_ENABLE:
     76                                              SetEnable(EnableTrue);
     77          									break;
     78          								case C_DISABLE:
     79                                              SetEnable(EnableFalse);
     80          									break;
     81          								default:
     82          									{
     83          										float Value = ConvertToSi(NewValue, ValUnitId=TEMP_UNIT, Status,MIN_TEMP ,MAX_TEMP,0.0);
   \   000000E4   0510A0E3           MOV      R1,#+5
   \   000000E8   04108DE5           STR      R1,[SP, #+4]
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   40008DE2           ADD      R0,SP,#+64
   \   000000F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0030A0E3           MOV      R3,#+0
   \   00000100   0C002DE9           PUSH     {R2,R3}
   \   00000104   4034A0E3           MOV      R3,#+1073741824
   \   00000108   693883E3           ORR      R3,R3,#0x690000
   \   0000010C   0C002DE9           PUSH     {R2,R3}
   \   00000110   F4309FE5           LDR      R3,??PutValue_10  ;; 0xffffffffc0668000
   \   00000114   0510A0E3           MOV      R1,#+5
   \   00000118   0C002DE9           PUSH     {R2,R3}
   \   0000011C   18208DE2           ADD      R2,SP,#+24
   \   00000120   0800BDE8           POP      {R3}
   \   00000124   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000128   0070A0E1           MOV      R7,R0
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   54008DE2           ADD      R0,SP,#+84
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
     84          										if ( Status== E_NO_ERR ) {
   \   0000013C   14009DE5           LDR      R0,[SP, #+20]
   \   00000140   14D08DE2           ADD      SP,SP,#+20
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   1100001A           BNE      ??PutValue_7
     85          											Limit = Value;
   \   0000014C   E47084E5           STR      R7,[R4, #+228]
   \   00000150   120000EA           B        ??PutValue_11
     86          										}
     87          									}
     88          									break;
     89          							}
     90          						}
     91          						break;
     92          					default:
     93          						Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_9:
   \   00000154   08008DE2           ADD      R0,SP,#+8
   \   00000158   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000015C   0030A0E1           MOV      R3,R0
   \   00000160   04008DE2           ADD      R0,SP,#+4
   \   00000164   01002DE9           PUSH     {R0}
   \   00000168   00042DE9           PUSH     {R10}
   \   0000016C   0920A0E1           MOV      R2,R9
   \   00000170   0810A0E1           MOV      R1,R8
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   0000017C   08008DE5           STR      R0,[SP, #+8]
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   10008DE2           ADD      R0,SP,#+16
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   08D08DE2           ADD      SP,SP,#+8
     94          						break;
     95          				}
     96          				break; // switch ( ValueId )
     97          		}//switch ( Key )
     98          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_7:
   \   00000194   00009DE5           LDR      R0,[SP, #+0]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   1300001A           BNE      ??PutValue_3
     99          			SetModifiedFlag();
   \                     ??PutValue_11:
   \   000001A0   A41094E5           LDR      R1,[R4, #+164]
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   541091E5           LDR      R1,[R1, #+84]
   \   000001AC   0FE0A0E1           MOV      LR,PC
   \   000001B0   11FF2FE1           BX       R1
    100          			if ( Limit != OrgLimit ) {
   \   000001B4   E40094E5           LDR      R0,[R4, #+228]
   \   000001B8   0610A0E1           MOV      R1,R6
   \   000001BC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   0900000A           BEQ      ??PutValue_3
    101          				LogEvent("New limit");
   \   000001C8   40109FE5           LDR      R1,??PutValue_10+0x4  ;; `?<Constant "New limit">`
   \   000001CC   08008DE2           ADD      R0,SP,#+8
   \   000001D0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001D4   0010A0E1           MOV      R1,R0
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   08008DE2           ADD      R0,SP,#+8
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
    102          			}
    103          		}
    104          	}// if ( Locked ) else
    105          	if (UnitId) {
   \                     ??PutValue_3:
   \   000001F0   000055E3           CMP      R5,#+0
    106          		*UnitId = ValUnitId;
   \   000001F4   04009D15           LDRNE    R0,[SP, #+4]
   \   000001F8   00008515           STRNE    R0,[R5, #+0]
    107          	}
    108          	return(Status);
   \   000001FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000200   78D08DE2           ADD      SP,SP,#+120
   \   00000204   F04FBDE8           POP      {R4-R11,LR}
   \   00000208   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_10:
   \   0000020C   008066C0           DC32     0xffffffffc0668000
   \   00000210   ........           DC32     `?<Constant "New limit">`
    109          }
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          int  AlarmHighTemp::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    112          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
    113          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    114          	switch ( ValueId ) {
   \   00000010   0560A0E3           MOV      R6,#+5
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    115          		case SVT_AL_LIMIT:
    116          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    117          			DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    118          			Unit       = TEMP_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    119          			if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    120          				Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    121          			}
    122          			break;
    123          		case SVT_AL_VALUE:
    124          			MyRetValue = PROTmpPtr->Temperature;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   680190E5           LDR      R0,[R0, #+360]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    125          			DecPnt     = 1;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    126          			Unit       = TEMP_UNIT;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    127          			break;
    128          		default:
    129          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    130          			break;
    131          	}
    132          	return(Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    133          }
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          int AlarmHighTemp::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    136          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    137          	int Status = GETVAL_NO_ERR;
    138          	//switch ( ValueId ) {
    139          	//	default:
    140          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    141          	//		break;
    142          	//}
    143          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
    144          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          int AlarmHighTemp::PutFloatValue( int ValueId, float NewValue)
    147          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    148          	int Status= E_NO_ERR;
    149          	//switch ( ValueId ) {
    150          	//   default:
    151          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    152          	//     break;
    153          	//}
    154          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
    155          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighTemp &AlarmHighTemp::new AlarmHighTemp(PRogramObjectBase *)
   \                     `??new AlarmHighTemp`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmHighTemp_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmHighTemp
   \                     `??new AlarmHighTemp_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    156          
    157          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHighTemp::AlarmHighTemp(PRogramObjectBase *)
                                       12
     AlarmHighTemp::Check()            24
     AlarmHighTemp::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmHighTemp::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmHighTemp::PutFloatValue(int, float)
                                        4
     AlarmHighTemp::PutValue(int, int, AnsiString, bool, int *)
                                      180
     AlarmHighTemp::new AlarmHighTemp(PRogramObjectBase *)
                                        8
     AlarmHighTemp::~AlarmHighTemp()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AlarmHighTemp::~AlarmHighTemp()
                                      56
     AlarmHighTemp::NumberOfAlarmSettings
                                       4
     AlarmHighTemp::AlarmHighTemp(PRogramObjectBase *)
                                     160
     AlarmHighTemp::Check()          116
     AlarmHighTemp::PutValue(int, int, AnsiString, bool, int *)
                                     532
     AlarmHighTemp::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmHighTemp::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AlarmHighTemp::PutFloatValue(int, float)
                                       8
     ?<Constant "New limit">          12
     AlarmHighTemp::new AlarmHighTemp(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         416

 
 1 432 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 032 bytes of CODE  memory (+ 416 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
