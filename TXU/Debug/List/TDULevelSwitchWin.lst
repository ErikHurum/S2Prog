##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:18:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\TDULevelSwitchWin.cpp              #
#    Command line    =  D:\S2Prog\TXU\src\TDULevelSwitchWin.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TDULevelSwitchWin.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TDULevelSwitchWin.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\TDULevelSwitchWin.cpp
      1          #include "TDUIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   001090E5           LDR      R1,[R0, #+0]
   \   00000004   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   08109115           LDRNE    R1,[R1, #+8]
   \   00000010   1600001A           BNE      ??_Dec_1
   \   00000014   002091E5           LDR      R2,[R1, #+0]
   \   00000018   0D30D2E5           LDRB     R3,[R2, #+13]
   \   0000001C   000053E3           CMP      R3,#+0
   \   00000020   0A00001A           BNE      ??_Dec_2
   \   00000024   0210A0E1           MOV      R1,R2
   \   00000028   082091E5           LDR      R2,[R1, #+8]
   \   0000002C   0D20D2E5           LDRB     R2,[R2, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   0D00001A           BNE      ??_Dec_1
   \                     ??_Dec_3:
   \   00000038   081091E5           LDR      R1,[R1, #+8]
   \   0000003C   082091E5           LDR      R2,[R1, #+8]
   \   00000040   0D20D2E5           LDRB     R2,[R2, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   FAFFFF0A           BEQ      ??_Dec_3
   \   0000004C   070000EA           B        ??_Dec_1
   \                     ??_Dec_2:
   \   00000050   042091E5           LDR      R2,[R1, #+4]
   \   00000054   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000058   000053E3           CMP      R3,#+0
   \   0000005C   0300001A           BNE      ??_Dec_1
   \   00000060   003092E5           LDR      R3,[R2, #+0]
   \   00000064   030051E1           CMP      R1,R3
   \   00000068   0210A0E1           MOV      R1,R2
   \   0000006C   F7FFFF0A           BEQ      ??_Dec_2
   \                     ??_Dec_1:
   \   00000070   001080E5           STR      R1,[R0, #+0]
   \   00000074   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   04508405           STREQ    R5,[R4, #+4]
   \   00000020   00508405           STREQ    R5,[R4, #+0]
   \   00000024   0B00000A           BEQ      ??_Insert_1
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0500000A           BEQ      ??_Insert_2
   \   00000030   005082E5           STR      R5,[R2, #+0]
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   000052E1           CMP      R2,R0
   \   0000003C   0600001A           BNE      ??_Insert_3
   \   00000040   005084E5           STR      R5,[R4, #+0]
   \   00000044   040000EA           B        ??_Insert_3
   \                     ??_Insert_2:
   \   00000048   085082E5           STR      R5,[R2, #+8]
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   000052E1           CMP      R2,R0
   \   00000054   0000001A           BNE      ??_Insert_3
   \                     ??_Insert_1:
   \   00000058   085084E5           STR      R5,[R4, #+8]
   \                     ??_Insert_3:
   \   0000005C   040095E5           LDR      R0,[R5, #+4]
   \   00000060   0160A0E3           MOV      R6,#+1
   \   00000064   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000068   0070A0E3           MOV      R7,#+0
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   3A00001A           BNE      ??_Insert_4
   \                     ??_Insert_5:
   \   00000074   040095E5           LDR      R0,[R5, #+4]
   \   00000078   041090E5           LDR      R1,[R0, #+4]
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   041090E5           LDR      R1,[R0, #+4]
   \   00000088   1C00001A           BNE      ??_Insert_6
   \   0000008C   082091E5           LDR      R2,[R1, #+8]
   \   00000090   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   0700001A           BNE      ??_Insert_7
   \                     ??_Insert_8:
   \   0000009C   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000A0   0C60C2E5           STRB     R6,[R2, #+12]
   \   000000A4   040095E5           LDR      R0,[R5, #+4]
   \   000000A8   040090E5           LDR      R0,[R0, #+4]
   \   000000AC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000B0   040095E5           LDR      R0,[R5, #+4]
   \   000000B4   045090E5           LDR      R5,[R0, #+4]
   \   000000B8   240000EA           B        ??_Insert_9
   \                     ??_Insert_7:
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   130000EA           B        ??_Insert_9
   \                     ??_Insert_6:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   E2FFFF0A           BEQ      ??_Insert_8
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   00000150   040095E5           LDR      R0,[R5, #+4]
   \   00000154   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   C4FFFF0A           BEQ      ??_Insert_5
   \                     ??_Insert_4:
   \   00000160   040094E5           LDR      R0,[R4, #+4]
   \   00000164   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000168   F040BDE8           POP      {R4-R7,LR}
   \   0000016C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Pairib _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::insert(short)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   040095E5           LDR      R0,[R5, #+4]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000001C   0570A0E1           MOV      R7,R5
   \   00000020   0180A0E3           MOV      R8,#+1
   \   00000024   0090A0E3           MOV      R9,#+0
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0900001A           BNE      ??insert_2
   \                     ??insert_3:
   \   00000030   F011D0E1           LDRSH    R1,[R0, #+16]
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   010056E1           CMP      R6,R1
   \   0000003C   000090B5           LDRLT    R0,[R0, #+0]
   \   00000040   0180A0B3           MOVLT    R8,#+1
   \   00000044   080090A5           LDRGE    R0,[R0, #+8]
   \   00000048   0080A0A3           MOVGE    R8,#+0
   \   0000004C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F5FFFF0A           BEQ      ??insert_3
   \                     ??insert_2:
   \   00000058   08708DE5           STR      R7,[SP, #+8]
   \   0000005C   01A0A0E3           MOV      R10,#+1
   \   00000060   000058E3           CMP      R8,#+0
   \   00000064   1500000A           BEQ      ??insert_4
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   000057E1           CMP      R7,R0
   \   00000070   1000001A           BNE      ??insert_5
   \   00000074   1400A0E3           MOV      R0,#+20
   \   00000078   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000007C   0080B0E1           MOVS     R8,R0
   \   00000080   0500000A           BEQ      ??insert_6
   \   00000084   005088E5           STR      R5,[R8, #+0]
   \   00000088   047088E5           STR      R7,[R8, #+4]
   \   0000008C   085088E5           STR      R5,[R8, #+8]
   \   00000090   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000094   0D90C8E5           STRB     R9,[R8, #+13]
   \   00000098   B061C8E1           STRH     R6,[R8, #+16]
   \                     ??insert_6:
   \   0000009C   0830A0E1           MOV      R3,R8
   \   000000A0   0720A0E1           MOV      R2,R7
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??_Insert,??_Insert??rA
   \   000000B0   00808DE5           STR      R8,[SP, #+0]
   \   000000B4   150000EA           B        ??insert_7
   \                     ??insert_5:
   \   000000B8   08008DE2           ADD      R0,SP,#+8
   \   000000BC   ........           _BLF     ??_Dec,??_Dec??rA
   \                     ??insert_4:
   \   000000C0   08009DE5           LDR      R0,[SP, #+8]
   \   000000C4   F001D0E1           LDRSH    R0,[R0, #+16]
   \   000000C8   060050E1           CMP      R0,R6
   \   000000CC   160000AA           BGE      ??insert_8
   \   000000D0   1400A0E3           MOV      R0,#+20
   \   000000D4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000D8   00B0B0E1           MOVS     R11,R0
   \   000000DC   0500000A           BEQ      ??insert_9
   \   000000E0   00508BE5           STR      R5,[R11, #+0]
   \   000000E4   04708BE5           STR      R7,[R11, #+4]
   \   000000E8   08508BE5           STR      R5,[R11, #+8]
   \   000000EC   0C90CBE5           STRB     R9,[R11, #+12]
   \   000000F0   0D90CBE5           STRB     R9,[R11, #+13]
   \   000000F4   B061CBE1           STRH     R6,[R11, #+16]
   \                     ??insert_9:
   \   000000F8   0B30A0E1           MOV      R3,R11
   \   000000FC   0720A0E1           MOV      R2,R7
   \   00000100   0810A0E1           MOV      R1,R8
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           _BLF     ??_Insert,??_Insert??rA
   \   0000010C   00B08DE5           STR      R11,[SP, #+0]
   \                     ??insert_7:
   \   00000110   04A0CDE5           STRB     R10,[SP, #+4]
   \                     ??insert_10:
   \   00000114   0D00A0E1           MOV      R0,SP
   \   00000118   030090E8           LDM      R0,{R0,R1}
   \   0000011C   030084E8           STM      R4,{R0,R1}
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   FE4FBDE8           POP      {R1-R11,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   \                     ??insert_8:
   \   0000012C   08109DE5           LDR      R1,[SP, #+8]
   \   00000130   00108DE5           STR      R1,[SP, #+0]
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   0410CDE5           STRB     R1,[SP, #+4]
   \   0000013C   F4FFFFEA           B        ??insert_10

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Pairib _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::insert(int)
   \                     ??insert_1:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   040095E5           LDR      R0,[R5, #+4]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000001C   0570A0E1           MOV      R7,R5
   \   00000020   0180A0E3           MOV      R8,#+1
   \   00000024   0090A0E3           MOV      R9,#+0
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0900001A           BNE      ??insert_11
   \                     ??insert_12:
   \   00000030   101090E5           LDR      R1,[R0, #+16]
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   010056E1           CMP      R6,R1
   \   0000003C   000090B5           LDRLT    R0,[R0, #+0]
   \   00000040   0180A0B3           MOVLT    R8,#+1
   \   00000044   080090A5           LDRGE    R0,[R0, #+8]
   \   00000048   0080A0A3           MOVGE    R8,#+0
   \   0000004C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F5FFFF0A           BEQ      ??insert_12
   \                     ??insert_11:
   \   00000058   08708DE5           STR      R7,[SP, #+8]
   \   0000005C   01A0A0E3           MOV      R10,#+1
   \   00000060   000058E3           CMP      R8,#+0
   \   00000064   1500000A           BEQ      ??insert_13
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   000057E1           CMP      R7,R0
   \   00000070   1000001A           BNE      ??insert_14
   \   00000074   1400A0E3           MOV      R0,#+20
   \   00000078   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000007C   0080B0E1           MOVS     R8,R0
   \   00000080   0500000A           BEQ      ??insert_15
   \   00000084   005088E5           STR      R5,[R8, #+0]
   \   00000088   047088E5           STR      R7,[R8, #+4]
   \   0000008C   085088E5           STR      R5,[R8, #+8]
   \   00000090   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000094   0D90C8E5           STRB     R9,[R8, #+13]
   \   00000098   106088E5           STR      R6,[R8, #+16]
   \                     ??insert_15:
   \   0000009C   0830A0E1           MOV      R3,R8
   \   000000A0   0720A0E1           MOV      R2,R7
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??_Insert,??_Insert??rA
   \   000000B0   00808DE5           STR      R8,[SP, #+0]
   \   000000B4   150000EA           B        ??insert_16
   \                     ??insert_14:
   \   000000B8   08008DE2           ADD      R0,SP,#+8
   \   000000BC   ........           _BLF     ??_Dec,??_Dec??rA
   \                     ??insert_13:
   \   000000C0   08009DE5           LDR      R0,[SP, #+8]
   \   000000C4   100090E5           LDR      R0,[R0, #+16]
   \   000000C8   060050E1           CMP      R0,R6
   \   000000CC   160000AA           BGE      ??insert_17
   \   000000D0   1400A0E3           MOV      R0,#+20
   \   000000D4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000D8   00B0B0E1           MOVS     R11,R0
   \   000000DC   0500000A           BEQ      ??insert_18
   \   000000E0   00508BE5           STR      R5,[R11, #+0]
   \   000000E4   04708BE5           STR      R7,[R11, #+4]
   \   000000E8   08508BE5           STR      R5,[R11, #+8]
   \   000000EC   0C90CBE5           STRB     R9,[R11, #+12]
   \   000000F0   0D90CBE5           STRB     R9,[R11, #+13]
   \   000000F4   10608BE5           STR      R6,[R11, #+16]
   \                     ??insert_18:
   \   000000F8   0B30A0E1           MOV      R3,R11
   \   000000FC   0720A0E1           MOV      R2,R7
   \   00000100   0810A0E1           MOV      R1,R8
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           _BLF     ??_Insert,??_Insert??rA
   \   0000010C   00B08DE5           STR      R11,[SP, #+0]
   \                     ??insert_16:
   \   00000110   04A0CDE5           STRB     R10,[SP, #+4]
   \                     ??insert_19:
   \   00000114   0D00A0E1           MOV      R0,SP
   \   00000118   030090E8           LDM      R0,{R0,R1}
   \   0000011C   030084E8           STM      R4,{R0,R1}
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   FE4FBDE8           POP      {R1-R11,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   \                     ??insert_17:
   \   0000012C   08109DE5           LDR      R1,[SP, #+8]
   \   00000130   00108DE5           STR      R1,[SP, #+0]
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   0410CDE5           STRB     R1,[SP, #+4]
   \   0000013C   F4FFFFEA           B        ??insert_19

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Erase(_Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0900001A           BNE      ??_Erase_2
   \                     ??_Erase_3:
   \   0000001C   081096E5           LDR      R1,[R6, #+8]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   F5FFFFEB           BL       ??_Erase
   \   00000028   006096E5           LDR      R6,[R6, #+0]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000034   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000038   0650A0E1           MOV      R5,R6
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F5FFFF0A           BEQ      ??_Erase_3
   \                     ??_Erase_2:
   \   00000044   7040BDE8           POP      {R4-R6,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Erase(_Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0900001A           BNE      ??_Erase_4
   \                     ??_Erase_5:
   \   0000001C   081096E5           LDR      R1,[R6, #+8]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   F5FFFFEB           BL       ??_Erase_1
   \   00000028   006096E5           LDR      R6,[R6, #+0]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000034   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000038   0650A0E1           MOV      R5,R6
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F5FFFF0A           BEQ      ??_Erase_5
   \                     ??_Erase_4:
   \   00000044   7040BDE8           POP      {R4-R6,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          static void cbWin1(WM_MESSAGE *pMsg) {
   \                     ??cbWin1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      4              WM_HWIN hWin = pMsg->hWin;
      5              switch (pMsg->MsgId) {
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   F450D4E1           LDRSH    R5,[R4, #+4]
   \   00000010   010050E2           SUBS     R0,R0,#+1
   \   00000014   1300000A           BEQ      ??cbWin1_1
   \   00000018   0E0050E2           SUBS     R0,R0,#+14
   \   0000001C   0C00000A           BEQ      ??cbWin1_2
   \   00000020   170050E2           SUBS     R0,R0,#+23
   \   00000024   1100001A           BNE      ??cbWin1_3
      6              case WM_NOTIFY_PARENT:
      7                  {
      8                      int NCode, Id;
      9                      Id = WM_GetId(pMsg->hWinSrc);        /* Id of widget */
   \   00000028   F600D4E1           LDRSH    R0,[R4, #+6]
   \   0000002C   ........           _BLF     WM_GetId,??WM_GetId??rA
     10                      NCode = pMsg->Data.v;                               /* Notification code */
     11                      switch (NCode) {
   \   00000030   081094E5           LDR      R1,[R4, #+8]
   \   00000034   020051E3           CMP      R1,#+2
   \   00000038   0A00001A           BNE      ??cbWin1_1
     12                      case WM_NOTIFICATION_RELEASED:
     13                          {
     14                              LevelSwitchWindow->UnitClicked(hWin, Id);
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   ........           LDR      R0,??DataTable1  ;; LevelSwitchWindow
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   ........           BL       ??UnitClicked
   \   00000050   040000EA           B        ??cbWin1_1
     15                          }
     16                          break;
     17                      }
     18                  }
     19                  break;
     20              case WM_PAINT:
     21                  GUI_SetBkColor(TDU_C_BACK_DEFAULT);
   \                     ??cbWin1_2:
   \   00000054   20009FE5           LDR      R0,??cbWin1_4    ;; 0xd3d3d3
   \   00000058   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
     22                  GUI_Clear();
   \   0000005C   ........           _BLF     GUI_Clear,??GUI_Clear??rA
     23                  GUI_SetColor(TDU_C_TEXT_DEFAULT);
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
   \                     ??cbWin1_1:
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR
     24                  break;
     25              case WM_CREATE:
     26                  break;
     27              default:
     28                  WM_DefaultProc(pMsg);
   \                     ??cbWin1_3:
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
     29              }
     30          }
   \                     ??cbWin1_5:
   \   00000078   FAFFFFEA           B        ??cbWin1_1
   \                     ??cbWin1_4:
   \   0000007C   D3D3D300           DC32     0xd3d3d3
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          static void cbWin0(WM_MESSAGE *pMsg) {
   \                     ??cbWin0:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   6CD04DE2           SUB      SP,SP,#+108
   \   00000008   0040A0E1           MOV      R4,R0
     33              //WM_HWIN hWin = pMsg->hWin;
     34              switch (pMsg->MsgId) {
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   2900000A           BEQ      ??cbWin0_1
   \   00000018   0F0050E3           CMP      R0,#+15
   \   0000001C   0400000A           BEQ      ??cbWin0_2
   \   00000020   1410A0E3           MOV      R1,#+20
   \   00000024   401E81E3           ORR      R1,R1,#0x400
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0400000A           BEQ      ??cbWin0_3
   \   00000030   250000EA           B        ??cbWin0_4
     35              case WM_PAINT:
     36          //			GUI_SetBkColor(GUI_RED);
     37                  GUI_SetBkColor(TDU_C_PW_BACK);
   \                     ??cbWin0_2:
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
     38                  GUI_Clear();
   \   0000003C   ........           _BLF     GUI_Clear,??GUI_Clear??rA
   \   00000040   1E0000EA           B        ??cbWin0_1
     39                  break;
     40              case WM_CREATE:
     41                  break;
     42              case MESSAGE_YES_RETURN:
     43                  {
     44                      AnsiString TmpString;
   \                     ??cbWin0_3:
   \   00000044   50008DE2           ADD      R0,SP,#+80
   \   00000048   ........           _BLF     ??AnsiString,??AnsiString??rA
     45                      int ValueId = pMsg->hWinSrc;
   \   0000004C   F650D4E1           LDRSH    R5,[R4, #+6]
     46                      char StringBuf[BUF_SIZE] = { "" };
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   5020A0E3           MOV      R2,#+80
   \                     ??cbWin0_5:
   \   0000005C   042052E2           SUBS     R2,R2,#+4
   \   00000060   021080E7           STR      R1,[R0, R2]
   \   00000064   FCFFFF1A           BNE      ??cbWin0_5
     47                      strcpy(StringBuf, (char *)pMsg->Data.p);
   \   00000068   081094E5           LDR      R1,[R4, #+8]
   \   0000006C   ........           _BLF     strcpy,??strcpy??rA
     48                      switch (ValueId) {
   \   00000070   CB00A0E3           MOV      R0,#+203
   \   00000074   500E80E3           ORR      R0,R0,#0x500
   \   00000078   000055E1           CMP      R5,R0
   \   0000007C   0B00001A           BNE      ??cbWin0_6
     49                      case SVT_TANK_STATE_STR_LSW:    /* Disable all level switches */
     50                          LibPutValue(SVT_TANK_STATE_STR_LSW, PROTanksystemUnit::MySelf->IDNumber, PROSystemData::TXUSystemData, tSeaGoing);
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   ........           LDR      R0,??DataTable10  ;; ??TXUSystemData
   \   0000008C   0030A0E3           MOV      R3,#+0
   \   00000090   002090E5           LDR      R2,[R0, #+0]
   \   00000094   ........           LDR      R0,??DataTable11  ;; ??MySelf
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   9C1090E5           LDR      R1,[R0, #+156]
   \   000000A0   CB00A0E3           MOV      R0,#+203
   \   000000A4   500E80E3           ORR      R0,R0,#0x500
   \   000000A8   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000000AC   04D08DE2           ADD      SP,SP,#+4
     51                          break;
     52                      case GUI_ID_BUTTON1:    /* Level Button */
     53                          break;
     54                      }
     55                  }
   \                     ??cbWin0_6:
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   50008DE2           ADD      R0,SP,#+80
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??cbWin0_1:
   \   000000C0   6CD08DE2           ADD      SP,SP,#+108
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR
     56                  break;
     57              default:
     58                  WM_DefaultProc(pMsg);
   \                     ??cbWin0_4:
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
     59              }
     60          }
   \                     ??cbWin0_7:
   \   000000D4   F9FFFFEA           B        ??cbWin0_1
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          TDULevelSwitchWin::~TDULevelSwitchWin(void) {
   \                     `?~TDULevelSwitchWin`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63          }
   \   00000008   785084E2           ADD      R5,R4,#+120
   \   0000000C   041095E5           LDR      R1,[R5, #+4]
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??_Erase_1,??_Erase??rA
   \   00000018   045085E5           STR      R5,[R5, #+4]
   \   0000001C   005085E5           STR      R5,[R5, #+0]
   \   00000020   085085E5           STR      R5,[R5, #+8]
   \   00000024   0160A0E3           MOV      R6,#+1
   \   00000028   0D60C5E5           STRB     R6,[R5, #+13]
   \   0000002C   0C60C5E5           STRB     R6,[R5, #+12]
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   107085E5           STR      R7,[R5, #+16]
   \   00000038   605084E2           ADD      R5,R4,#+96
   \   0000003C   041095E5           LDR      R1,[R5, #+4]
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??_Erase_1,??_Erase??rA
   \   00000048   045085E5           STR      R5,[R5, #+4]
   \   0000004C   005085E5           STR      R5,[R5, #+0]
   \   00000050   085085E5           STR      R5,[R5, #+8]
   \   00000054   0D60C5E5           STRB     R6,[R5, #+13]
   \   00000058   0C60C5E5           STRB     R6,[R5, #+12]
   \   0000005C   107085E5           STR      R7,[R5, #+16]
   \   00000060   485084E2           ADD      R5,R4,#+72
   \   00000064   041095E5           LDR      R1,[R5, #+4]
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     ??_Erase,??_Erase??rA_1
   \   00000070   045085E5           STR      R5,[R5, #+4]
   \   00000074   005085E5           STR      R5,[R5, #+0]
   \   00000078   085085E5           STR      R5,[R5, #+8]
   \   0000007C   0D60C5E5           STRB     R6,[R5, #+13]
   \   00000080   0C60C5E5           STRB     R6,[R5, #+12]
   \   00000084   107085E5           STR      R7,[R5, #+16]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     `?~TDUPresentWin`,`?~TDUPresentWin??rA`
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          TDULevelSwitchWin::TDULevelSwitchWin(void) {
   \                     ??TDULevelSwitchWin:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     ??TDUPresentWin,??TDUPresentWin??rA
   \   00000010   74039FE5           LDR      R0,??TDULevelSwitchWin_1  ;; ??__vtbl
   \   00000014   345084E2           ADD      R5,R4,#+52
   \   00000018   100085E5           STR      R0,[R5, #+16]
   \   0000001C   486084E2           ADD      R6,R4,#+72
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   0000002C   046086E5           STR      R6,[R6, #+4]
   \   00000030   006086E5           STR      R6,[R6, #+0]
   \   00000034   086086E5           STR      R6,[R6, #+8]
   \   00000038   0170A0E3           MOV      R7,#+1
   \   0000003C   0D70C6E5           STRB     R7,[R6, #+13]
   \   00000040   0C70C6E5           STRB     R7,[R6, #+12]
   \   00000044   0090A0E3           MOV      R9,#+0
   \   00000048   109086E5           STR      R9,[R6, #+16]
   \   0000004C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   1400C6E5           STRB     R0,[R6, #+20]
   \   00000058   606084E2           ADD      R6,R4,#+96
   \   0000005C   01008DE2           ADD      R0,SP,#+1
   \   00000060   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000064   046086E5           STR      R6,[R6, #+4]
   \   00000068   006086E5           STR      R6,[R6, #+0]
   \   0000006C   086086E5           STR      R6,[R6, #+8]
   \   00000070   0D70C6E5           STRB     R7,[R6, #+13]
   \   00000074   0C70C6E5           STRB     R7,[R6, #+12]
   \   00000078   109086E5           STR      R9,[R6, #+16]
   \   0000007C   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   1400C6E5           STRB     R0,[R6, #+20]
   \   00000088   786084E2           ADD      R6,R4,#+120
   \   0000008C   02008DE2           ADD      R0,SP,#+2
   \   00000090   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000094   046086E5           STR      R6,[R6, #+4]
   \   00000098   006086E5           STR      R6,[R6, #+0]
   \   0000009C   086086E5           STR      R6,[R6, #+8]
   \   000000A0   0D70C6E5           STRB     R7,[R6, #+13]
   \   000000A4   0C70C6E5           STRB     R7,[R6, #+12]
   \   000000A8   109086E5           STR      R9,[R6, #+16]
   \   000000AC   0200DDE5           LDRB     R0,[SP, #+2]
     66              MainWinHandl = 0;
     67              ScrollHandl = 0;
     68              LevelSwicthSystem = LSW_NOT_DEFINED;
     69              for (int i = 0; i < LSW_MAX_ENTRIES; i++) {
   \   000000B0   0910A0E1           MOV      R1,R9
   \   000000B4   1400C6E5           STRB     R0,[R6, #+20]
   \   000000B8   B89FC5E1           STRH     R9,[R5, #+248]
   \   000000BC   B09FC5E1           STRH     R9,[R5, #+240]
   \   000000C0   000067E2           RSB      R0,R7,#+0
   \   000000C4   F40085E5           STR      R0,[R5, #+244]
     70                  TankButton[i] = 0;
   \                     ??TDULevelSwitchWin_2:
   \   000000C8   812084E0           ADD      R2,R4,R1, LSL #+1
   \   000000CC   B69AC2E1           STRH     R9,[R2, #+166]
     71              }
   \   000000D0   011081E2           ADD      R1,R1,#+1
   \   000000D4   3C0051E3           CMP      R1,#+60
   \   000000D8   FAFFFFBA           BLT      ??TDULevelSwitchWin_2
     72              StartX = 0;
     73              StartY = (LineHeight - 2);
     74              CurrentPage = 0;
     75              PageCount = 0;
     76              LastPage = -1;
     77              FirstPage = 1000; // Just start with a stupid hig number
     78              if (!PROLevelSwitch::ObjVector.empty()) {
   \   000000DC   ........           LDR      R6,??DataTable12  ;; ??ObjVector
   \   000000E0   689085E5           STR      R9,[R5, #+104]
   \   000000E4   1210A0E3           MOV      R1,#+18
   \   000000E8   6C1085E5           STR      R1,[R5, #+108]
   \   000000EC   609085E5           STR      R9,[R5, #+96]
   \   000000F0   5C9085E5           STR      R9,[R5, #+92]
   \   000000F4   EC0085E5           STR      R0,[R5, #+236]
   \   000000F8   FA0FA0E3           MOV      R0,#+1000
   \   000000FC   640085E5           STR      R0,[R5, #+100]
   \   00000100   040096E5           LDR      R0,[R6, #+4]
   \   00000104   001096E5           LDR      R1,[R6, #+0]
   \   00000108   010040E0           SUB      R0,R0,R1
   \   0000010C   2001B0E1           LSRS     R0,R0,#+2
   \   00000110   7000000A           BEQ      ??TDULevelSwitchWin_3
     79                  //	ScrollHandl   = SCROLLBAR_Create(PWinXSize-19, 0, 18, PWinYSize,WinHandl, 999, WM_CF_SHOW, SCROLLBAR_CF_VERTICAL);
     80                  //	SCROLLBAR_SetNumItems(ScrollHandl,(NumberOfUnits+1));
     81                  //	SCROLLBAR_SetPageSize(ScrollHandl,NumUnitsOnPage);
     82                  unsigned MaxStrLen = 0;
   \   00000114   00A0A0E3           MOV      R10,#+0
     83                  for (unsigned i = 0; i < PROLevelSwitch::ObjVector.size(); i++) {
   \   00000118   0900A0E1           MOV      R0,R9
   \   0000011C   010000EA           B        ??TDULevelSwitchWin_4
     84                      PROLevelSwitch *TempElement = (PROLevelSwitch *)PROLevelSwitch::ObjVector[i];
     85                      FirstPage = min(FirstPage, TempElement->Page);
   \                     ??TDULevelSwitchWin_5:
   \   00000120   641085E5           STR      R1,[R5, #+100]
   \   00000124   010080E2           ADD      R0,R0,#+1
   \                     ??TDULevelSwitchWin_4:
   \   00000128   001096E5           LDR      R1,[R6, #+0]
   \   0000012C   042096E5           LDR      R2,[R6, #+4]
   \   00000130   012042E0           SUB      R2,R2,R1
   \   00000134   2221A0E1           LSR      R2,R2,#+2
   \   00000138   020050E1           CMP      R0,R2
   \   0000013C   0600002A           BCS      ??TDULevelSwitchWin_6
   \   00000140   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000144   642095E5           LDR      R2,[R5, #+100]
   \   00000148   681191E5           LDR      R1,[R1, #+360]
   \   0000014C   010052E1           CMP      R2,R1
   \   00000150   F2FFFFAA           BGE      ??TDULevelSwitchWin_5
   \   00000154   0210A0E1           MOV      R1,R2
   \   00000158   F0FFFFEA           B        ??TDULevelSwitchWin_5
     86                  }
     87                  for (unsigned i = 0; i < PROLevelSwitch::ObjVector.size(); i++) {
   \                     ??TDULevelSwitchWin_6:
   \   0000015C   0080A0E3           MOV      R8,#+0
   \   00000160   000052E3           CMP      R2,#+0
   \   00000164   1800001A           BNE      ??TDULevelSwitchWin_7
   \   00000168   1C0000EA           B        ??TDULevelSwitchWin_8
     88                      PROLevelSwitch *TempElement = (PROLevelSwitch *)PROLevelSwitch::ObjVector[i];
   \                     ??TDULevelSwitchWin_9:
   \   0000016C   08B190E7           LDR      R11,[R0, +R8, LSL #+2]
     89                      Page.insert(TempElement->Page - FirstPage+1);
   \   00000170   641095E5           LDR      R1,[R5, #+100]
   \   00000174   68019BE5           LDR      R0,[R11, #+360]
     90                      XPos.insert(TempElement->XPos);
     91                      YPos.insert(TempElement->YPos);
     92                      MaxStrLen = MAX(MaxStrLen, TempElement->Name.length());
     93                  }
   \   00000178   018088E2           ADD      R8,R8,#+1
   \   0000017C   010040E0           SUB      R0,R0,R1
   \   00000180   012080E2           ADD      R2,R0,#+1
   \   00000184   481084E2           ADD      R1,R4,#+72
   \   00000188   08008DE2           ADD      R0,SP,#+8
   \   0000018C   ........           _BLF     ??insert_1,??insert??rA
   \   00000190   6C219BE5           LDR      R2,[R11, #+364]
   \   00000194   601084E2           ADD      R1,R4,#+96
   \   00000198   0228A0E1           MOV      R2,R2, LSL #+16
   \   0000019C   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001A0   10008DE2           ADD      R0,SP,#+16
   \   000001A4   ........           _BLF     ??insert,??insert??rA_1
   \   000001A8   70219BE5           LDR      R2,[R11, #+368]
   \   000001AC   781084E2           ADD      R1,R4,#+120
   \   000001B0   0228A0E1           MOV      R2,R2, LSL #+16
   \   000001B4   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001B8   18008DE2           ADD      R0,SP,#+24
   \   000001BC   ........           _BLF     ??insert,??insert??rA_1
   \   000001C0   58009BE5           LDR      R0,[R11, #+88]
   \   000001C4   00005AE1           CMP      R10,R0
   \   000001C8   00A0A031           MOVCC    R10,R0
   \                     ??TDULevelSwitchWin_7:
   \   000001CC   000096E5           LDR      R0,[R6, #+0]
   \   000001D0   041096E5           LDR      R1,[R6, #+4]
   \   000001D4   001041E0           SUB      R1,R1,R0
   \   000001D8   210158E1           CMP      R8,R1, LSR #+2
   \   000001DC   E2FFFF3A           BCC      ??TDULevelSwitchWin_9
     94                  PageCount = Page.size();
   \                     ??TDULevelSwitchWin_8:
   \   000001E0   240095E5           LDR      R0,[R5, #+36]
   \   000001E4   5C0085E5           STR      R0,[R5, #+92]
     95                  if (!PageCount) {
   \   000001E8   000050E3           CMP      R0,#+0
     96                      PageCount = 1;
   \   000001EC   5C708505           STREQ    R7,[R5, #+92]
     97                  }
     98                  int XPosCnt      = XPos.size();
   \   000001F0   3CB095E5           LDR      R11,[R5, #+60]
     99                  int YPosCnt      = YPos.size();
    100                  int XStep        = PWinXSize / (XPosCnt + 1);
   \   000001F4   000095E5           LDR      R0,[R5, #+0]
   \   000001F8   01108BE2           ADD      R1,R11,#+1
   \   000001FC   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000200   04108DE5           STR      R1,[SP, #+4]
    101                  int YStep        = (PWinYSize - 8) / (YPosCnt + 1);
   \   00000204   040095E5           LDR      R0,[R5, #+4]
   \   00000208   541095E5           LDR      R1,[R5, #+84]
   \   0000020C   080040E2           SUB      R0,R0,#+8
   \   00000210   011081E2           ADD      R1,R1,#+1
   \   00000214   ........           _BLF     ??div32_a,??rA??div32_a
    102                  int BWidth       = 45;
    103                  int BHeight      = 20;
    104                  int BXCorrection = BWidth / 2;
    105                  int BYCorrection = BHeight / 2;
    106                  MainWinHandl     = WM_CreateWindowAsChild(0, 0, PWinXSize, PageCount * PWinXSize, WinHandl, WM_CF_SHOW, cbWin0, 0);
   \   00000218   0000A0E3           MOV      R0,#+0
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   68019FE5           LDR      R0,??TDULevelSwitchWin_1+0x4  ;; ??cbWin0
   \   00000224   0170A0E1           MOV      R7,R1
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   0200A0E3           MOV      R0,#+2
   \   00000230   01002DE9           PUSH     {R0}
   \   00000234   FA02D4E1           LDRSH    R0,[R4, #+42]
   \   00000238   2D80A0E3           MOV      R8,#+45
   \   0000023C   01002DE9           PUSH     {R0}
   \   00000240   5C0095E5           LDR      R0,[R5, #+92]
   \   00000244   001095E5           LDR      R1,[R5, #+0]
   \   00000248   910003E0           MUL      R3,R1,R0
   \   0000024C   0120A0E1           MOV      R2,R1
   \   00000250   0910A0E1           MOV      R1,R9
   \   00000254   0100A0E1           MOV      R0,R1
   \   00000258   ........           _BLF     WM_CreateWindowAsChild,??WM_CreateWindowAsChild??rA
   \   0000025C   B80FC5E1           STRH     R0,[R5, #+248]
    107                  VisibleWinHandl  = WM_CreateWindowAsChild(0, 0, PWinXSize, PageCount * PWinXSize, MainWinHandl, WM_CF_SHOW, cbWin1, 0);
   \   00000260   0900A0E1           MOV      R0,R9
   \   00000264   01002DE9           PUSH     {R0}
   \   00000268   24019FE5           LDR      R0,??TDULevelSwitchWin_1+0x8  ;; ??cbWin1
   \   0000026C   01002DE9           PUSH     {R0}
   \   00000270   0200A0E3           MOV      R0,#+2
   \   00000274   01002DE9           PUSH     {R0}
   \   00000278   F80FD5E1           LDRSH    R0,[R5, #+248]
   \   0000027C   01002DE9           PUSH     {R0}
   \   00000280   5C0095E5           LDR      R0,[R5, #+92]
   \   00000284   001095E5           LDR      R1,[R5, #+0]
   \   00000288   910003E0           MUL      R3,R1,R0
   \   0000028C   0120A0E1           MOV      R2,R1
   \   00000290   0910A0E1           MOV      R1,R9
   \   00000294   0100A0E1           MOV      R0,R1
   \   00000298   ........           _BLF     WM_CreateWindowAsChild,??WM_CreateWindowAsChild??rA
   \   0000029C   BA0FC5E1           STRH     R0,[R5, #+250]
    108                  WM_EnableMemdev(MainWinHandl);
   \   000002A0   F80FD5E1           LDRSH    R0,[R5, #+248]
   \   000002A4   ........           _BLF     WM_EnableMemdev,??WM_EnableMemdev??rA
    109                  WM_EnableMemdev(VisibleWinHandl);
   \   000002A8   FA0FD5E1           LDRSH    R0,[R5, #+250]
   \   000002AC   ........           _BLF     WM_EnableMemdev,??WM_EnableMemdev??rA
    110                  if (MaxStrLen > 5 && XPosCnt < 4) {
   \   000002B0   06005AE3           CMP      R10,#+6
   \   000002B4   20D08DE2           ADD      SP,SP,#+32
   \   000002B8   0100003A           BCC      ??TDULevelSwitchWin_10
   \   000002BC   04005BE3           CMP      R11,#+4
    111                      BWidth = 65;
   \   000002C0   4180A0B3           MOVLT    R8,#+65
    112                  }
    113                  for (unsigned i = 0; i < PROLevelSwitch::ObjVector.size(); i++) {
   \                     ??TDULevelSwitchWin_10:
   \   000002C4   040096E5           LDR      R0,[R6, #+4]
   \   000002C8   001096E5           LDR      R1,[R6, #+0]
   \   000002CC   010040E0           SUB      R0,R0,R1
   \   000002D0   2001B0E1           LSRS     R0,R0,#+2
   \   000002D4   0600001A           BNE      ??TDULevelSwitchWin_11
    114                      PROLevelSwitch *TempElement = (PROLevelSwitch *)PROLevelSwitch::ObjVector[i];
    115                      int XPosition = XStep * TempElement->XPos - BXCorrection;
    116                      int YPosition = PWinYSize * (TempElement->Page - FirstPage) + YStep * TempElement->YPos - BYCorrection;
    117                      TankButton[i] = BUTTON_CreateEx(XPosition, YPosition, BWidth, BHeight, VisibleWinHandl, WM_CF_SHOW, 0, LSW_BUTTON0 + i);
    118                      BUTTON_SetText(TankButton[i], TempElement->Name.c_str());
    119                  }
    120              }
    121          }
   \                     ??TDULevelSwitchWin_3:
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   20D08DE2           ADD      SP,SP,#+32
   \   000002E0   F04FBDE8           POP      {R4-R11,LR}
   \   000002E4   1EFF2FE1           BX       LR               ;; return
   \                     ??TDULevelSwitchWin_12:
   \   000002E8   F60ADBE1           LDRSH    R0,[R11, #+166]
   \   000002EC   019089E2           ADD      R9,R9,#+1
   \   000002F0   ........           _BLF     BUTTON_SetText,??BUTTON_SetText??rA
   \                     ??TDULevelSwitchWin_11:
   \   000002F4   000096E5           LDR      R0,[R6, #+0]
   \   000002F8   041096E5           LDR      R1,[R6, #+4]
   \   000002FC   001041E0           SUB      R1,R1,R0
   \   00000300   210159E1           CMP      R9,R1, LSR #+2
   \   00000304   F3FFFF2A           BCS      ??TDULevelSwitchWin_3
   \   00000308   09A190E7           LDR      R10,[R0, +R9, LSL #+2]
   \   0000030C   800E89E2           ADD      R0,R9,#+2048
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   0000A0E3           MOV      R0,#+0
   \   00000318   01002DE9           PUSH     {R0}
   \   0000031C   0200A0E3           MOV      R0,#+2
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   FA0FD5E1           LDRSH    R0,[R5, #+250]
   \   00000328   89B084E0           ADD      R11,R4,R9, LSL #+1
   \   0000032C   1430A0E3           MOV      R3,#+20
   \   00000330   01002DE9           PUSH     {R0}
   \   00000334   70019AE5           LDR      R0,[R10, #+368]
   \   00000338   041095E5           LDR      R1,[R5, #+4]
   \   0000033C   68C19AE5           LDR      R12,[R10, #+360]
   \   00000340   64E095E5           LDR      LR,[R5, #+100]
   \   00000344   0820A0E1           MOV      R2,R8
   \   00000348   0EC04CE0           SUB      R12,R12,LR
   \   0000034C   9C0101E0           MUL      R1,R12,R1
   \   00000350   6CC19AE5           LDR      R12,[R10, #+364]
   \   00000354   901721E0           MLA      R1,R0,R7,R1
   \   00000358   14009DE5           LDR      R0,[SP, #+20]
   \   0000035C   0A1041E2           SUB      R1,R1,#+10
   \   00000360   9C0000E0           MUL      R0,R12,R0
   \   00000364   160040E2           SUB      R0,R0,#+22
   \   00000368   ........           _BLF     BUTTON_CreateEx,??BUTTON_CreateEx??rA
   \   0000036C   B60ACBE1           STRH     R0,[R11, #+166]
   \   00000370   44008AE2           ADD      R0,R10,#+68
   \   00000374   181090E5           LDR      R1,[R0, #+24]
   \   00000378   10D08DE2           ADD      SP,SP,#+16
   \   0000037C   100051E3           CMP      R1,#+16
   \   00000380   04109025           LDRCS    R1,[R0, #+4]
   \   00000384   04108032           ADDCC    R1,R0,#+4
   \   00000388   D6FFFFEA           B        ??TDULevelSwitchWin_12
   \                     ??TDULevelSwitchWin_1:
   \   0000038C   ........           DC32     ??__vtbl
   \   00000390   ........           DC32     ??cbWin0
   \   00000394   ........           DC32     ??cbWin1
    122          

   \                                 In segment CODE, align 4, keep-with-next
    123          void TDULevelSwitchWin::SetButton(void) {
    124              if (PROLevelSwitch::Adjustable) {
   \                     ??SetButton:
   \   00000000   DC109FE5           LDR      R1,??SetButton_1  ;; ??Adjustable
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   D8509FE5           LDR      R5,??SetButton_1+0x4  ;; ButWindow
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0F00000A           BEQ      ??SetButton_2
    125                  bool ButtonEnable[NUMBER_OF_BUTTONS] = {
    126                      (bool)(PageCount > 1),
    127                      (bool)(PageCount > 1),
    128                      true,
    129                      true,
    130                      true
    131                  };
   \   00000028   BC209FE5           LDR      R2,??SetButton_1+0x8  ;; `?<Constant {false, false, true, true, true}>`
   \   0000002C   081092E8           LDM      R2,{R3,R12}
   \   00000030   081081E8           STM      R1,{R3,R12}
   \   00000034   901094E5           LDR      R1,[R4, #+144]
   \   00000038   020051E3           CMP      R1,#+2
   \   0000003C   0120A0A3           MOVGE    R2,#+1
   \   00000040   0020A0B3           MOVLT    R2,#+0
   \   00000044   020051E3           CMP      R1,#+2
   \   00000048   0000A0B3           MOVLT    R0,#+0
   \   0000004C   0100CDE5           STRB     R0,[SP, #+1]
    132                  ButWindow->EnableButtons(ButtonEnable);
   \   00000050   000095E5           LDR      R0,[R5, #+0]
   \   00000054   0020CDE5           STRB     R2,[SP, #+0]
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   ........           _BLF     ??EnableButtons,??EnableButtons??rA
    133                  ButWindow->ChangeButtonText(L_WORD87, L_WORD88, L_WORD3, L_WORD4, L_WORD868);
   \   00000060   D90FA0E3           MOV      R0,#+868
   \   00000064   0E0000EA           B        ??SetButton_3
    134              } else {
    135                  bool ButtonEnable[NUMBER_OF_BUTTONS] = {
    136                      (bool)(PageCount > 1),
    137                      (bool)(PageCount > 1),
    138                      true,
    139                      true,
    140                      false
    141                  };
   \                     ??SetButton_2:
   \   00000068   80209FE5           LDR      R2,??SetButton_1+0xC  ;; `?<Constant {false, false, true, true, false}>`
   \   0000006C   081092E8           LDM      R2,{R3,R12}
   \   00000070   081081E8           STM      R1,{R3,R12}
   \   00000074   901094E5           LDR      R1,[R4, #+144]
   \   00000078   020051E3           CMP      R1,#+2
   \   0000007C   0120A0A3           MOVGE    R2,#+1
   \   00000080   0020A0B3           MOVLT    R2,#+0
   \   00000084   020051E3           CMP      R1,#+2
   \   00000088   0000A0B3           MOVLT    R0,#+0
   \   0000008C   0100CDE5           STRB     R0,[SP, #+1]
    142                  ButWindow->EnableButtons(ButtonEnable);
   \   00000090   000095E5           LDR      R0,[R5, #+0]
   \   00000094   0020CDE5           STRB     R2,[SP, #+0]
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   ........           _BLF     ??EnableButtons,??EnableButtons??rA
    143                  ButWindow->ChangeButtonText(L_WORD87, L_WORD88, L_WORD3, L_WORD4, L_WORD237);
   \   000000A0   ED00A0E3           MOV      R0,#+237
   \                     ??SetButton_3:
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   0400A0E3           MOV      R0,#+4
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   000095E5           LDR      R0,[R5, #+0]
   \   000000B4   0330A0E3           MOV      R3,#+3
   \   000000B8   5820A0E3           MOV      R2,#+88
   \   000000BC   5710A0E3           MOV      R1,#+87
   \   000000C0   ........           _BLF     ??ChangeButtonText,??ChangeButtonText??rA
   \   000000C4   08D08DE2           ADD      SP,SP,#+8
    144              }
    145              Paintnew();
   \   000000C8   441094E5           LDR      R1,[R4, #+68]
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   041091E5           LDR      R1,[R1, #+4]
   \   000000D4   0FE0A0E1           MOV      LR,PC
   \   000000D8   11FF2FE1           BX       R1
    146          }
   \   000000DC   3340BDE8           POP      {R0,R1,R4,R5,LR}
   \   000000E0   1EFF2FE1           BX       LR               ;; return
   \                     ??SetButton_1:
   \   000000E4   ........           DC32     ??Adjustable
   \   000000E8   ........           DC32     ButWindow
   \   000000EC   ........           DC32     `?<Constant {false, false, true, true, true}>`
   \   000000F0   ........           DC32     `?<Constant {false, false, true, true, false}>`
    147          

   \                                 In segment CODE, align 4, keep-with-next
    148          void TDULevelSwitchWin::PWTimer(void) {
    149              if (!PROLevelSwitch::ObjVector.empty()) {
   \                     ??PWTimer:
   \   00000000   ........           LDR      R1,??DataTable7  ;; ??ObjVector
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   042091E5           LDR      R2,[R1, #+4]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   011042E0           SUB      R1,R2,R1
   \   00000014   2111B0E1           LSRS     R1,R1,#+2
   \   00000018   0000000A           BEQ      ??PWTimer_1
    150                  RefreshWindow();
   \   0000001C   ........           BL       ??RefreshWindow
    151              }
    152          }
   \                     ??PWTimer_1:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          void TDULevelSwitchWin::SetButtonColours(BUTTON_Handle TButton, PROLevelSwitch *LSwitchPtr) {
   \                     ??SetButtonColours:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    155          
    156              if (LSwitchPtr) {
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   3F00000A           BEQ      ??SetButtonColours_1
    157                  int BackColor;
    158                  if (LSwitchPtr->IsWarning) {
   \   00000010   7401D2E5           LDRB     R0,[R2, #+372]
    159                      BackColor = TDU_C_AL_BACK_ACTIVE_95;
    160                  } else {
    161                      BackColor = TDU_C_AL_BACK_ACTIVE;
    162                  }
    163                  switch (LSwitchPtr->LevelSwitchAlPtr->State) {
   \   00000014   FF54E0E3           MVN      R5,#-16777216
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   640192E5           LDR      R0,[R2, #+356]
   \   00000020   30619F15           LDRNE    R6,??SetButtonColours_2  ;; 0x42a4fd
   \   00000024   E010D0E5           LDRB     R1,[R0, #+224]
   \   00000028   FF60A003           MOVEQ    R6,#+255
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   0200000A           BEQ      ??SetButtonColours_3
   \   00000034   011051E2           SUBS     R1,R1,#+1
   \   00000038   1100000A           BEQ      ??SetButtonColours_4
   \   0000003C   160000EA           B        ??SetButtonColours_5
    164                  case AlarmBasic::AlActive:
    165                      // Let us blink
    166                      if (BUTTON_GetBkColor(TButton, 0) != BackColor) {
   \                     ??SetButtonColours_3:
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   0000004C   060050E1           CMP      R0,R6
   \   00000050   0500000A           BEQ      ??SetButtonColours_6
    167                          BUTTON_SetBkColor(TButton, 0, BackColor);
   \                     ??SetButtonColours_7:
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
    168                          BUTTON_SetTextColor(TButton, 0, TDU_C_AL_TEXT_ACTIVE);
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   350000EA           B        ??SetButtonColours_8
    169                      } else {
    170                          BUTTON_SetBkColor(TButton, 0, TDU_C_AL_TEXT_ACTIVE);
   \                     ??SetButtonColours_6:
   \   0000006C   0520A0E1           MOV      R2,R5
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
    171                          BUTTON_SetTextColor(TButton, 0, BackColor);
   \   0000007C   0620A0E1           MOV      R2,R6
   \   00000080   2F0000EA           B        ??SetButtonColours_8
    172                      }
    173                      break;
    174                  case AlarmBasic::AlAknowledged:
    175                      if (BUTTON_GetBkColor(TButton, 0) != BackColor) {
   \                     ??SetButtonColours_4:
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000090   060050E1           CMP      R0,R6
   \   00000094   2D00000A           BEQ      ??SetButtonColours_9
   \   00000098   EDFFFFEA           B        ??SetButtonColours_7
    176                          BUTTON_SetBkColor(TButton, 0, BackColor);
    177                          BUTTON_SetTextColor(TButton, 0, TDU_C_AL_TEXT_ACTIVE);
    178                      }
    179                      break;
    180                  case AlarmBasic::AlIdle:
    181                  default:
    182                      if (LSwitchPtr->HWFailure
    183                          || LSwitchPtr->LevelSwitchSensor->ActiveAlarms
    184                          || !LSwitchPtr->LevelSwitchSensor->Enable
    185                          || !LSwitchPtr->LevelSwitchAlPtr->Enable) {
   \                     ??SetButtonColours_5:
   \   0000009C   3C10D2E5           LDRB     R1,[R2, #+60]
   \   000000A0   000051E3           CMP      R1,#+0
   \   000000A4   0800001A           BNE      ??SetButtonColours_10
   \   000000A8   601192E5           LDR      R1,[R2, #+352]
   \   000000AC   382091E5           LDR      R2,[R1, #+56]
   \   000000B0   000052E3           CMP      R2,#+0
   \   000000B4   0400001A           BNE      ??SetButtonColours_10
   \   000000B8   3411D1E5           LDRB     R1,[R1, #+308]
   \   000000BC   000051E3           CMP      R1,#+0
   \   000000C0   E200D015           LDRBNE   R0,[R0, #+226]
   \   000000C4   00005013           CMPNE    R0,#+0
   \   000000C8   0500001A           BNE      ??SetButtonColours_11
    186                          //if ( BUTTON_GetBkColor(  TButton, 0)!=TDU_C_AL_BACK_WARNING ) {
    187                          BUTTON_SetBkColor(TButton, 0, TDU_C_AL_BACK_WARNING);
   \                     ??SetButtonColours_10:
   \   000000CC   FF28C5E3           BIC      R2,R5,#0xFF0000
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
    188                          BUTTON_SetTextColor(TButton, 0, TDU_C_AL_TEXT_WARNING);
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   170000EA           B        ??SetButtonColours_8
    189                          //}
    190                      } else if (BUTTON_GetBkColor(TButton, 0) != TDU_C_AL_BACK_NOAL) {
   \                     ??SetButtonColours_11:
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   000000F0   AA0C50E3           CMP      R0,#+43520
   \   000000F4   1500000A           BEQ      ??SetButtonColours_9
    191                          BUTTON_SetBkColor(TButton, 0, TDU_C_AL_BACK_NOAL);
   \   000000F8   AA2CA0E3           MOV      R2,#+43520
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
    192                          BUTTON_SetTextColor(TButton, 0, TDU_C_AL_TEXT_NOAL);
   \   00000108   0520A0E1           MOV      R2,R5
   \   0000010C   0C0000EA           B        ??SetButtonColours_8
    193                      }
    194                      break;
    195                  }
    196              } else {
    197                  if (BUTTON_GetBkColor(TButton, 0) != TDU_C_BU_BACK) {
   \                     ??SetButtonColours_1:
   \   00000110   44509FE5           LDR      R5,??SetButtonColours_2+0x4  ;; 0x808080
   \   00000114   0010A0E3           MOV      R1,#+0
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           _BLF     BUTTON_GetBkColor,??BUTTON_GetBkColor??rA
   \   00000120   050050E1           CMP      R0,R5
   \   00000124   0900000A           BEQ      ??SetButtonColours_9
    198                      WM_HideWindow(TButton);
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           _BLF     WM_HideWindow,??WM_HideWindow??rA
    199                      BUTTON_SetBkColor(TButton, 0, TDU_C_BU_BACK);
   \   00000130   0520A0E1           MOV      R2,R5
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           _BLF     BUTTON_SetBkColor,??BUTTON_SetBkColor??rA
    200                      BUTTON_SetTextColor(TButton, 0, TDU_C_BU_TEXT);
   \   00000140   0020A0E3           MOV      R2,#+0
   \                     ??SetButtonColours_8:
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     BUTTON_SetTextColor,??BUTTON_SetTextColor??rA
    201                  }
    202              }
    203          
    204          }
   \                     ??SetButtonColours_9:
   \   00000150   7040BDE8           POP      {R4-R6,LR}
   \   00000154   1EFF2FE1           BX       LR               ;; return
   \                     ??SetButtonColours_2:
   \   00000158   FDA44200           DC32     0x42a4fd
   \   0000015C   80808000           DC32     0x808080

   \                                 In segment CODE, align 4, keep-with-next
    205          void TDULevelSwitchWin::RefreshWindow(void) {
   \                     ??RefreshWindow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    206              for (unsigned i = 0; i < PROLevelSwitch::ObjVector.size(); i++) {
   \   00000004   ........           LDR      R6,??DataTable12  ;; ??ObjVector
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   001096E5           LDR      R1,[R6, #+0]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   010040E0           SUB      R0,R0,R1
   \   0000001C   2001B0E1           LSRS     R0,R0,#+2
   \   00000020   0600001A           BNE      ??RefreshWindow_1
   \   00000024   0A0000EA           B        ??RefreshWindow_2
    207                  PROLevelSwitch *TempElement = (PROLevelSwitch *)PROLevelSwitch::ObjVector[i];
    208                  SetButtonColours(TankButton[i], TempElement);
   \                     ??RefreshWindow_3:
   \   00000028   052190E7           LDR      R2,[R0, +R5, LSL #+2]
   \   0000002C   850084E0           ADD      R0,R4,R5, LSL #+1
   \   00000030   F61AD0E1           LDRSH    R1,[R0, #+166]
   \   00000034   0400A0E1           MOV      R0,R4
    209              }
   \   00000038   015085E2           ADD      R5,R5,#+1
   \   0000003C   ........           BL       ??SetButtonColours
   \                     ??RefreshWindow_1:
   \   00000040   000096E5           LDR      R0,[R6, #+0]
   \   00000044   041096E5           LDR      R1,[R6, #+4]
   \   00000048   001041E0           SUB      R1,R1,R0
   \   0000004C   210155E1           CMP      R5,R1, LSR #+2
   \   00000050   F4FFFF3A           BCC      ??RefreshWindow_3
    210          }
   \                     ??RefreshWindow_2:
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
    211          

   \                                 In segment CODE, align 4, keep-with-next
    212          void TDULevelSwitchWin::MoveWin(void) {
   \                     ??MoveWin:
   \   00000000   00402DE9           PUSH     {LR}
    213              int Y = -CurrentPage * PWinYSize;
    214              //int Y =  -CurrentPage*10;
    215              // if(Y==0) Y=StartY;
    216          //  WM_MoveWindow(MainWinHandl, StartX, Y);
    217              WM_MoveChildTo(VisibleWinHandl, StartX, Y);
   \   00000004   380080E2           ADD      R0,R0,#+56
   \   00000008   5C1090E5           LDR      R1,[R0, #+92]
   \   0000000C   002090E5           LDR      R2,[R0, #+0]
   \   00000010   920101E0           MUL      R1,R2,R1
   \   00000014   002061E2           RSB      R2,R1,#+0
   \   00000018   641090E5           LDR      R1,[R0, #+100]
   \   0000001C   F60FD0E1           LDRSH    R0,[R0, #+246]
   \   00000020   ........           _BLF     WM_MoveChildTo,??WM_MoveChildTo??rA
    218              //SetGuiEvent(PWEventHandl,1,&PresentWindowsTCB);
    219          }
   \   00000024   0040BDE8           POP      {LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          void TDULevelSwitchWin::ButtonClicked(int ButtID) {
    222              if (!PROLevelSwitch::ObjVector.empty()) {
   \                     ??ButtonClicked:
   \   00000000   ........           LDR      R2,??DataTable7  ;; ??ObjVector
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   043092E5           LDR      R3,[R2, #+4]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   022043E0           SUB      R2,R3,R2
   \   00000014   2221B0E1           LSRS     R2,R2,#+2
   \   00000018   2B00000A           BEQ      ??ButtonClicked_2
    223                  switch (ButtID) {
   \   0000001C   904080E2           ADD      R4,R0,#+144
   \   00000020   042094E5           LDR      R2,[R4, #+4]
   \   00000024   CBC0A0E3           MOV      R12,#+203
   \   00000028   50CE8CE3           ORR      R12,R12,#0x500
   \   0000002C   D11041E2           SUB      R1,R1,#+209
   \   00000030   801E41E2           SUB      R1,R1,#+2048
   \   00000034   030051E3           CMP      R1,#+3
   \   00000038   2300008A           BHI      ??ButtonClicked_2
   \   0000003C   013F8FE2           ADR      R3,??ButtonClicked_1
   \   00000040   0130D3E7           LDRB     R3,[R3, R1]
   \   00000044   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??ButtonClicked_1:
   \   00000048   00060C17           DC8      +0,+6,+12,+23
    224                  case TDU_BUTTON_ID_PW1:
    225                      if (CurrentPage  <= 0) {
   \                     ??ButtonClicked_3:
   \   0000004C   010052E3           CMP      R2,#+1
    226                          //	CurrentPage = PageCount-1;
    227                          CurrentPage = 0;
   \   00000050   0010A0B3           MOVLT    R1,#+0
    228                      } else {
    229                          CurrentPage--;
   \   00000054   011042A2           SUBGE    R1,R2,#+1
   \                     ??ButtonClicked_4:
   \   00000058   041084E5           STR      R1,[R4, #+4]
    230                      }
    231                      MoveWin();
   \   0000005C   ........           BL       ??MoveWin
   \   00000060   190000EA           B        ??ButtonClicked_2
   \                     ??ButtonClicked_5:
   \   00000064   001094E5           LDR      R1,[R4, #+0]
   \   00000068   011041E2           SUB      R1,R1,#+1
   \   0000006C   010052E1           CMP      R2,R1
   \   00000070   F8FFFFAA           BGE      ??ButtonClicked_4
    232                      break;
    233                  case TDU_BUTTON_ID_PW2:
    234                      if (CurrentPage >= (PageCount - 1 )) {
    235          //					CurrentPage = 0;
    236                          CurrentPage = PageCount - 1 ;
    237                      } else {
    238                          CurrentPage++;
   \   00000074   011082E2           ADD      R1,R2,#+1
   \   00000078   F6FFFFEA           B        ??ButtonClicked_4
    239                      }
    240                      MoveWin();
    241                      break;
    242                  case TDU_BUTTON_ID_PW3:
    243                      LibPutValue(SVT_TANK_STATE_STR_LSW, PROTanksystemUnit::MySelf->IDNumber, PROSystemData::TXUSystemData, tLoad);
   \                     ??ButtonClicked_6:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   ........           LDR      R0,??DataTable10  ;; ??TXUSystemData
   \   00000088   0130A0E3           MOV      R3,#+1
   \   0000008C   002090E5           LDR      R2,[R0, #+0]
   \   00000090   ........           LDR      R0,??DataTable11  ;; ??MySelf
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   9C1090E5           LDR      R1,[R0, #+156]
   \   0000009C   0C00A0E1           MOV      R0,R12
   \   000000A0   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000000A4   070000EA           B        ??ButtonClicked_7
    244                      break;
    245                  case TDU_BUTTON_ID_PW4:
    246                      ConfirmMessageBox->Exec(MainWinHandl, L_WORD854, L_WORD862, SVT_TANK_STATE_STR_LSW);
   \                     ??ButtonClicked_8:
   \   000000A8   24009FE5           LDR      R0,??ButtonClicked_9  ;; ConfirmMessageBox
   \   000000AC   00102DE9           PUSH     {R12}
   \   000000B0   FC19D4E1           LDRSH    R1,[R4, #+156]
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   5E30A0E3           MOV      R3,#+94
   \   000000BC   C03F83E3           ORR      R3,R3,#0x300
   \   000000C0   0820C3E3           BIC      R2,R3,#0x8
   \   000000C4   ........           _BLF     ??Exec,??Exec??rA
   \                     ??ButtonClicked_7:
   \   000000C8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
    247                      //
    248                      break;
    249                  case TDU_BUTTON_ID_PW5:
    250                      break;
    251                  }
    252              }
    253          }
   \                     ??ButtonClicked_2:
   \   000000CC   1040BDE8           POP      {R4,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   \                     ??ButtonClicked_9:
   \   000000D4   ........           DC32     ConfirmMessageBox
    254          

   \                                 In segment CODE, align 4, keep-with-next
    255          void TDULevelSwitchWin::UnitClicked(WM_HWIN hWin, int ButtID) {
   \                     ??UnitClicked:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
    256              switch (ButtID) {
   \   0000000C   D410A0E3           MOV      R1,#+212
   \   00000010   801E81E3           ORR      R1,R1,#0x800
   \   00000014   010055E1           CMP      R5,R1
   \   00000018   0C00001A           BNE      ??UnitClicked_1
    257              case TDU_BUTTON_ID_PW4:
    258                  LibPutValue(SVT_TANK_STATE_STR_LSW, PROTanksystemUnit::MySelf->IDNumber, PROSystemData::TXUSystemData, tSeaGoing);
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   ........           LDR      R0,??DataTable10  ;; ??TXUSystemData
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   002090E5           LDR      R2,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable11  ;; ??MySelf
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   9C1090E5           LDR      R1,[R0, #+156]
   \   0000003C   CB00A0E3           MOV      R0,#+203
   \   00000040   500E80E3           ORR      R0,R0,#0x500
   \   00000044   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000048   04D08DE2           ADD      SP,SP,#+4
   \   0000004C   1E0000EA           B        ??UnitClicked_2
    259                  break;
    260              default:
    261                  {
    262                      bool Found = false;
   \                     ??UnitClicked_1:
   \   00000050   0060A0E3           MOV      R6,#+0
   \   00000054   0070A0E3           MOV      R7,#+0
    263                      for (unsigned i = 0; !Found && i < PROLevelSwitch::ObjVector.size(); i++) {
   \                     ??UnitClicked_3:
   \   00000058   ........           LDR      R0,??DataTable12  ;; ??ObjVector
   \   0000005C   001090E5           LDR      R1,[R0, #+0]
   \   00000060   040090E5           LDR      R0,[R0, #+4]
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   200156E1           CMP      R6,R0, LSR #+2
   \   0000006C   1600002A           BCS      ??UnitClicked_2
    264                          PROLevelSwitch *TempElement = (PROLevelSwitch *)PROLevelSwitch::ObjVector[i];
   \   00000070   068191E7           LDR      R8,[R1, +R6, LSL #+2]
    265                          if (TempElement && (ButtID == WM_GetId(TankButton[i]))) {
   \   00000074   000058E3           CMP      R8,#+0
   \   00000078   1000000A           BEQ      ??UnitClicked_4
   \   0000007C   860084E0           ADD      R0,R4,R6, LSL #+1
   \   00000080   F60AD0E1           LDRSH    R0,[R0, #+166]
   \   00000084   ........           _BLF     WM_GetId,??WM_GetId??rA
   \   00000088   000055E1           CMP      R5,R0
   \   0000008C   0B00001A           BNE      ??UnitClicked_4
    266                              Found = true;
    267                              AlarmLevelSwitch *AlPtr = TempElement->LevelSwitchAlPtr;
   \   00000090   642198E5           LDR      R2,[R8, #+356]
   \   00000094   0170A0E3           MOV      R7,#+1
    268                              switch (AlPtr->State) {
   \   00000098   E000D2E5           LDRB     R0,[R2, #+224]
   \   0000009C   010050E3           CMP      R0,#+1
   \   000000A0   0600001A           BNE      ??UnitClicked_4
    269                              case AlarmBasic::AlActive :
    270                                  AlPtr->SendData(CMD_PRO_ALARM_ACK);
   \   000000A4   0200A0E1           MOV      R0,R2
   \   000000A8   A42092E5           LDR      R2,[R2, #+164]
   \   000000AC   B910A0E3           MOV      R1,#+185
   \   000000B0   402092E5           LDR      R2,[R2, #+64]
   \   000000B4   B01E81E3           ORR      R1,R1,#0xB00
   \   000000B8   0FE0A0E1           MOV      LR,PC
   \   000000BC   12FF2FE1           BX       R2
    271                                  break;
    272                              case AlarmBasic::AlIdle :
    273                              case AlarmBasic::AlAknowledged:
    274                              case AlarmBasic::AlBlocked :
    275                                  break;
    276                              }
    277                          }
    278                      }
   \                     ??UnitClicked_4:
   \   000000C0   016086E2           ADD      R6,R6,#+1
   \   000000C4   000057E3           CMP      R7,#+0
   \   000000C8   E2FFFF0A           BEQ      ??UnitClicked_3
    279                  }
    280                  break;
    281              }
    282          }
   \                     ??UnitClicked_2:
   \   000000CC   F041BDE8           POP      {R4-R8,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
    283          

   \                                 In segment CODE, align 4, keep-with-next
    284          void TDULevelSwitchWin::cbEventHandler(WM_MESSAGE *pMsg) {
   \                     ??cbEventHandler:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0100A0E1           MOV      R0,R1
    285              //WM_HWIN hWin = pMsg->hWin;
    286              switch (pMsg->MsgId) {
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   1320A0E3           MOV      R2,#+19
   \   00000018   011041E2           SUB      R1,R1,#+1
   \   0000001C   402E82E3           ORR      R2,R2,#0x400
   \   00000020   020051E1           CMP      R1,R2
   \   00000024   2D02008A           BHI      ??cbEventHandler_2
   \   00000028   022F8FE2           ADR      R2,??cbEventHandler_1
   \   0000002C   8110A0E1           MOV      R1,R1, LSL #+1
   \   00000030   B12092E1           LDRH     R2,[R2, R1]
   \   00000034   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??cbEventHandler_1:
   \   00000038   260229022902       DC16     +550,+553,+553,+553
   \              2902        
   \   00000040   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000048   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000050   290229021A02       DC16     +553,+553,+538,+553
   \              2902        
   \   00000058   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000060   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000068   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000070   290229022902       DC16     +553,+553,+553,+550
   \              2602        
   \   00000078   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000080   290226022902       DC16     +553,+550,+553,+553
   \              2902        
   \   00000088   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000090   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000098   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000000F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000100   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000108   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000110   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000118   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000120   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000128   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000130   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000138   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000140   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000148   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000150   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000158   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000160   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000168   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000170   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000178   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000180   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000188   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000190   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000198   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000001F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000200   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000208   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000210   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000218   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000220   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000228   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000230   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000238   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000240   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000248   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000250   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000258   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000260   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000268   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000270   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000278   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000280   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000288   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000290   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000298   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000002F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000300   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000308   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000310   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000318   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000320   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000328   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000330   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000338   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000340   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000348   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000350   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000358   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000360   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000368   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000370   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000378   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000380   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000388   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000390   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000398   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000003F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000400   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000408   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000410   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000418   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000420   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000428   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000430   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000438   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000440   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000448   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000450   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000458   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000460   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000468   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000470   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000478   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000480   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000488   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000490   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000498   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000004F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000500   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000508   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000510   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000518   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000520   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000528   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000530   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000538   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000540   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000548   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000550   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000558   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000560   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000568   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000570   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000578   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000580   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000588   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000590   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000598   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000005F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000600   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000608   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000610   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000618   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000620   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000628   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000630   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000638   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000640   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000648   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000650   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000658   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000660   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000668   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000670   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000678   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000680   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000688   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000690   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000698   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000006F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000700   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000708   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000710   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000718   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000720   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000728   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000730   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000738   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000740   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000748   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000750   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000758   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000760   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000768   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000770   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000778   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000780   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000788   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000790   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000798   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007A0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007A8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007B0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007B8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007C0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007C8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007D0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007D8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007E0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007E8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007F0   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   000007F8   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000800   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000808   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000810   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000818   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000820   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000828   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000830   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000838   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000840   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000848   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000850   290229022902       DC16     +553,+553,+553,+553
   \              2902        
   \   00000858   290229022902       DC16     +553,+553,+553,+521
   \              0902        
    287              case MESSAGE_YES_RETURN:
    288                  {
    289                      //int ValueId = pMsg->hWinSrc;
    290                      char StringBuf[BUF_SIZE] = { "" };
   \                     ??cbEventHandler_3:
   \   00000860   0D10A0E1           MOV      R1,SP
   \   00000864   0020A0E3           MOV      R2,#+0
   \   00000868   5030A0E3           MOV      R3,#+80
   \                     ??cbEventHandler_4:
   \   0000086C   043053E2           SUBS     R3,R3,#+4
   \   00000870   032081E7           STR      R2,[R1, R3]
   \   00000874   FCFFFF1A           BNE      ??cbEventHandler_4
    291                      strcpy(StringBuf, (char *)pMsg->Data.p);
   \   00000878   081090E5           LDR      R1,[R0, #+8]
   \   0000087C   0D00A0E1           MOV      R0,SP
   \   00000880   ........           _BLF     strcpy,??strcpy??rA
    292                      //LibPutValue( SVT_WI_PROTECTION,CurrentWIPtr,ProtPlate);
    293                      LevelSwitchWindow->Paintnew();
   \   00000884   ........           LDR      R0,??DataTable13  ;; LevelSwitchWindow
   \   00000888   001090E5           LDR      R1,[R0, #+0]
   \   0000088C   0100A0E1           MOV      R0,R1
   \   00000890   441091E5           LDR      R1,[R1, #+68]
   \   00000894   041091E5           LDR      R1,[R1, #+4]
   \   00000898   0FE0A0E1           MOV      LR,PC
   \   0000089C   11FF2FE1           BX       R1
   \   000008A0   0B0000EA           B        ??cbEventHandler_5
    294                  }
    295                  break;
    296              case WM_NOTIFY_CHILD_HAS_FOCUS:
    297          
    298                  break;
    299              case WM_NOTIFY_PARENT:
    300                  {
    301                      int NCode; //, Id;
    302          //			Id    = WM_GetId(pMsg->hWinSrc);    /* Id of widget */
    303                      NCode = pMsg->Data.v;                               /* Notification code */
    304                      switch (NCode) {
    305                      case WM_NOTIFICATION_RELEASED:      /* React only if released */
    306                          break;
    307                      case WM_NOTIFICATION_VALUE_CHANGED:
    308          /*						{
    309                                      if ( XScrollPos != SCROLLBAR_LibGetValue(ScrollHandl) ) {
    310                                          XScrollPos = SCROLLBAR_GetValue(ScrollHandl);
    311                                          WM_MoveTo(MainWinHandl,0,0-XScrollPos*LineHeight*(LineHeight-2));
    312                                      }
    313                                  }*/
    314                          break;
    315                      }
    316                  }
    317                  break;
    318              case WM_PAINT:
    319                  GUI_SetBkColor(TDU_C_PW_BACK);
   \                     ??cbEventHandler_6:
   \   000008A4   0000A0E3           MOV      R0,#+0
   \   000008A8   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
    320                  GUI_Clear();
   \   000008AC   ........           _BLF     GUI_Clear,??GUI_Clear??rA
    321                  GUI_SetColor(TDU_C_PW_TEXT);
   \   000008B0   FF0CA0E3           MOV      R0,#+65280
   \   000008B4   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
    322                  GUI_SetTextMode(GUI_TM_TRANS);
   \   000008B8   0200A0E3           MOV      R0,#+2
   \   000008BC   ........           _BLF     GUI_SetTextMode,??GUI_SetTextMode??rA
    323                  GUI_SetFont(&TDU_FONT_BIG);
   \   000008C0   ........           LDR      R0,??DataTable14  ;; TDU_FONT_BIG
   \   000008C4   ........           _BLF     GUI_SetFont,??GUI_SetFont??rA
    324                  UpdateFields(true);
   \   000008C8   0110A0E3           MOV      R1,#+1
   \   000008CC   0400A0E1           MOV      R0,R4
   \   000008D0   ........           _BLF     ??UpdateFields,??UpdateFields??rA
   \                     ??cbEventHandler_5:
   \   000008D4   50D08DE2           ADD      SP,SP,#+80
   \   000008D8   1040BDE8           POP      {R4,LR}
   \   000008DC   1EFF2FE1           BX       LR
    325                  //GUI_DispStringAt(FindDictionaryWord(TSN_LEVELSWITCH_APP).c_str(),70,80);
    326                  break;
    327              case WM_CREATE:
    328                  break;
    329              default:
    330                  WM_DefaultProc(pMsg);
   \                     ??cbEventHandler_2:
   \   000008E0   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
    331              }
    332          }
   \                     ??cbEventHandler_7:
   \   000008E4   FAFFFFEA           B        ??cbEventHandler_5

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {false, false, true, true, true}>`:
   \   00000000   000001010100       DC8 0, 0, 1, 1, 1, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {false, false, true, true, false}>`:
   \   00000000   000001010000       DC8 0, 0, 1, 1, 0, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00                 DC8 ""
   \   00000001   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000021   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000031   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000041   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TDULevelSwitchWin::delete ~TDULevelSwitchWin(TDULevelSwitchWin *)
   \                     `??delete ~TDULevelSwitchWin`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TDULevelSwitchWin_1`
   \   0000000C   ........           BL       `?~TDULevelSwitchWin`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TDULevelSwitchWin_1`:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1C109FE5           LDR      R1,??__sti__routine_1  ;; GUI_Font24_1
   \   00000004   ........           LDR      R0,??DataTable0  ;; TDU_FONT_BIG
   \   00000008   30002DE9           PUSH     {R4,R5}
   \   0000000C   3C10B1E8           LDM      R1!,{R2-R5,R12}
   \   00000010   3C10A0E8           STM      R0!,{R2-R5,R12}
   \   00000014   1C1091E8           LDM      R1,{R2-R4,R12}
   \   00000018   1C1080E8           STM      R0,{R2-R4,R12}
   \   0000001C   3000BDE8           POP      {R4,R5}
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000024   ........           DC32     GUI_Font24_1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     TDU_FONT_BIG

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TDULevelSwitchWin &TDULevelSwitchWin::new TDULevelSwitchWin()
   \                     `??new TDULevelSwitchWin`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   4C0FA0E3           MOV      R0,#+304
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TDULevelSwitchWin_1`
   \   00000014   ........           BL       ??TDULevelSwitchWin
   \                     `??new TDULevelSwitchWin_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     LevelSwitchWindow

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??ObjVector

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??TXUSystemData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??MySelf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??ObjVector

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     LevelSwitchWindow

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     TDU_FONT_BIG

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TDULevelSwitchWin::ButtonClicked(int)
                                       12
     TDULevelSwitchWin::MoveWin()       4
     TDULevelSwitchWin::PWTimer()       4
     TDULevelSwitchWin::RefreshWindow()
                                       16
     TDULevelSwitchWin::SetButton()    28
     TDULevelSwitchWin::SetButtonColours(signed short, PROLevelSwitch *)
                                       16
     TDULevelSwitchWin::TDULevelSwitchWin()
                                      100
     TDULevelSwitchWin::UnitClicked(GUI_HWIN, int)
                                       28
     TDULevelSwitchWin::cbEventHandler(WM_MESSAGE *)
                                       88
     TDULevelSwitchWin::delete ~TDULevelSwitchWin(TDULevelSwitchWin *)
                                        8
     TDULevelSwitchWin::new TDULevelSwitchWin()
                                        4
     TDULevelSwitchWin::~TDULevelSwitchWin()
                                       20
     _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Erase(_Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::insert(int)
                                       48
     _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Erase(_Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::insert(short)
                                       48
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   8
     cbWin0(WM_MESSAGE *)             124
     cbWin1(WM_MESSAGE *)              12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                     120
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     368
     _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::insert(short)
                                     320
     _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::insert(int)
                                     320
     _Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Erase(_Tree<_Tset_traits<int, less<int>, allocator<int>, false>>::_Nodeptr)
                                      76
     _Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Erase(_Tree<_Tset_traits<short, less<short>, allocator<short>, false>>::_Nodeptr)
                                      76
     TDU_FONT_BIG                     36
     cbWin1(WM_MESSAGE *)            128
     cbWin0(WM_MESSAGE *)            216
     TDULevelSwitchWin::~TDULevelSwitchWin()
                                     152
     TDULevelSwitchWin::TDULevelSwitchWin()
                                     920
     TDULevelSwitchWin::SetButton()  244
     TDULevelSwitchWin::PWTimer()     40
     TDULevelSwitchWin::SetButtonColours(signed short, PROLevelSwitch *)
                                     352
     TDULevelSwitchWin::RefreshWindow()
                                      92
     TDULevelSwitchWin::MoveWin()     44
     TDULevelSwitchWin::ButtonClicked(int)
                                     216
     TDULevelSwitchWin::UnitClicked(GUI_HWIN, int)
                                     212
     TDULevelSwitchWin::cbEventHandler(WM_MESSAGE *)
                                    2280
     ?<Constant "">                   80
     ?<Constant {false, false, true, true, true}>
                                       8
     ?<Constant {false, false, true, true, false}>
                                       8
     ?<Constant "">_1                 80
     TDULevelSwitchWin::delete ~TDULevelSwitchWin(TDULevelSwitchWin *)
                                      32
     __sti__routine()                 40
     ??DataTable0                      4
     TDULevelSwitchWin::new TDULevelSwitchWin()
                                      32
     ??DataTable1                      4
     ??DataTable7                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
      Others                         544

 
 6 996 bytes in segment CODE
   188 bytes in segment DATA_C
    36 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 5 036 bytes of CODE  memory (+ 1 976 bytes shared)
   188 bytes of CONST memory
    36 bytes of DATA  memory

Errors: none
Warnings: none
