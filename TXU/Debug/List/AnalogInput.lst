##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AnalogInput.cpp                 #
#    Command line    =  D:\S2Prog\Shared\Src\AnalogInput.cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AnalogInput.lst             #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AnalogInput.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AnalogInput.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Pairib _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
   \                     ??insert:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   010057E1           CMP      R7,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0190A033           MOVCC    R9,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0090A023           MOVCS    R9,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0800A0E1           MOV      R0,R8
   \   0000004C   0150A0E3           MOV      R5,#+1
   \   00000050   000059E3           CMP      R9,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001096E5           LDR      R1,[R6, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0730A0E1           MOV      R3,R7
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0450CDE5           STRB     R5,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   070051E1           CMP      R1,R7
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0730A0E1           MOV      R3,R7
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   0910A0E1           MOV      R1,R9
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
   \                     ??find:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_1
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A021           MOVCS    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_1:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_2
   \                     ??_Erase_3:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_2:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_3
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_4
   \                     ??_Erase_5:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_4:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_5
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_15:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_15
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_3,??_Make_room??rA_2
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_6
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_6:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ValueList * _Vector_impl<ValueList, allocator<ValueList>>::_Make_room(ValueList *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   070040E0           SUB      R0,R0,R7
   \   0000001C   0C10A0E3           MOV      R1,#+12
   \   00000020   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000024   0160A0E1           MOV      R6,R1
   \   00000028   070043E0           SUB      R0,R3,R7
   \   0000002C   0C10A0E3           MOV      R1,#+12
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   3000000A           BEQ      ??_Make_room_7
   \   0000003C   C8009FE5           LDR      R0,??_Make_room_8  ;; 0x15555555
   \   00000040   017040E0           SUB      R7,R0,R1
   \   00000044   020057E1           CMP      R7,R2
   \   00000048   2C00003A           BCC      ??_Make_room_7
   \   0000004C   0C80A0E3           MOV      R8,#+12
   \   00000050   980207E0           MUL      R7,R8,R2
   \   00000054   018082E0           ADD      R8,R2,R1
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   2000002A           BCS      ??_Make_room_9
   \   00000060   A610A0E1           LSR      R1,R6,#+1
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   0060A033           MOVCC    R6,#+0
   \   00000070   06608120           ADDCS    R6,R1,R6
   \   00000074   080056E1           CMP      R6,R8
   \   00000078   0860A031           MOVCC    R6,R8
   \   0000007C   0C10A0E3           MOV      R1,#+12
   \   00000080   910600E0           MUL      R0,R1,R6
   \   00000084   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000088   0090A0E1           MOV      R9,R0
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   0920A0E1           MOV      R2,R9
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   0A2087E0           ADD      R2,R7,R10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000B0   000094E5           LDR      R0,[R4, #+0]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0100000A           BEQ      ??_Make_room_10
   \   000000BC   040084E5           STR      R0,[R4, #+4]
   \   000000C0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_10:
   \   000000C4   0C00A0E3           MOV      R0,#+12
   \   000000C8   909621E0           MLA      R1,R0,R6,R9
   \   000000CC   081084E5           STR      R1,[R4, #+8]
   \   000000D0   909821E0           MLA      R1,R0,R8,R9
   \   000000D4   041084E5           STR      R1,[R4, #+4]
   \   000000D8   009084E5           STR      R9,[R4, #+0]
   \   000000DC   0A50A0E1           MOV      R5,R10
   \   000000E0   060000EA           B        ??_Make_room_7
   \                     ??_Make_room_9:
   \   000000E4   032087E0           ADD      R2,R7,R3
   \   000000E8   0310A0E1           MOV      R1,R3
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000F4   040094E5           LDR      R0,[R4, #+4]
   \   000000F8   000087E0           ADD      R0,R7,R0
   \   000000FC   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_7:
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   F047BDE8           POP      {R4-R10,LR}
   \   00000108   1EFF2FE1           BX       LR               ;; return
   \                     ??_Make_room_8:
   \   0000010C   55555515           DC32     0x15555555

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_11
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_11
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_12
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_11
   \                     ??_Make_room_12:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_11:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room_3:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_13
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_13
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_14
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_15
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_15:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_13
   \                     ??_Make_room_14:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_13:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ValueList * _Vector_impl<ValueList, allocator<ValueList>>::_Insert0(ValueList *, ValueList const &)
   \                     ??_Insert0:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   085092E8           LDM      R2,{R3,R12,LR}
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0050A003           MOVEQ    R5,#+0
   \   0000001C   00504110           SUBNE    R5,R1,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   085080E8           STM      R0,{R3,R12,LR}
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Make_room_1,??_Make_room??rA_3
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   0D30A0E1           MOV      R3,SP
   \                     ??_Insert0_1:
   \   00000038   405093E8           LDM      R3,{R6,R12,LR}
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   0C0080E2           ADD      R0,R0,#+12
   \   00000048   405082E8           STM      R2,{R6,R12,LR}
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   F8FFFF1A           BNE      ??_Insert0_1
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   000085E0           ADD      R0,R5,R0
   \   0000005C   7E40BDE8           POP      {R1-R6,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_4
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_5:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_5
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_6
   \                     ??_Push_back0_4:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_2
   \                     ??_Push_back0_6:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_7
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_8:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_8
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_9
   \                     ??_Push_back0_7:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_9:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_10
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_11:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_11
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_12
   \                     ??_Push_back0_10:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_4
   \                     ??_Push_back0_12:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<ValueList, allocator<ValueList>>::_Push_back0(ValueList const &)
   \                     ??_Push_back0_3:
   \   00000000   D0412DE9           PUSH     {R4,R6-R8,LR}
   \   00000004   043090E5           LDR      R3,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020053E1           CMP      R3,R2
   \   00000010   0B00002A           BCS      ??_Push_back0_13
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   03C0A0E1           MOV      R12,R3
   \                     ??_Push_back0_14:
   \   0000001C   C00191E8           LDM      R1,{R6-R8}
   \   00000020   0C40A0E1           MOV      R4,R12
   \   00000024   012042E2           SUB      R2,R2,#+1
   \   00000028   0CC08CE2           ADD      R12,R12,#+12
   \   0000002C   C00184E8           STM      R4,{R6-R8}
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   F8FFFF1A           BNE      ??_Push_back0_14
   \   00000038   0C1083E2           ADD      R1,R3,#+12
   \   0000003C   041080E5           STR      R1,[R0, #+4]
   \   00000040   020000EA           B        ??_Push_back0_15
   \                     ??_Push_back0_13:
   \   00000044   0120A0E1           MOV      R2,R1
   \   00000048   0310A0E1           MOV      R1,R3
   \   0000004C   ........           _BLF     ??_Insert0,??_Insert0??rA
   \                     ??_Push_back0_15:
   \   00000050   D041BDE8           POP      {R4,R6-R8,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<AnalogInput *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_I, align 4, align-sorted
      9          ValueList AnalogInput::ServiceReportSensorValueList[] =  {
   \                     ??ServiceReportSensorValueList:
   \   00000000                      DS8 252
   \   000000FC                      REQUIRE `?<Initializer for ServiceReportSensorValueList`
     10              { L_WORD304, L_WORD237, SVT_BLANK },                                               // {"Unused"    ,"",SVT_BLANK},
     11              { L_WORD449, L_WORD237, SVT_AI_TYPE_TEXT },                                   // {"Type"         ,"",SVT_AI_TYPE_TEXT},
     12              { L_WORD390, L_WORD237, SVT_AI_SERIAL_NUMBER },                               // {"Serial number","",SVT_AI_SERIAL_NUMBER},
     13              { L_WORD124, L_WORD237, SVT_AI_LOCATION },                                    // {"Location"     ,"",SVT_AI_LOCATION},
     14              { L_WORD434, L_WORD237, SVT_AI_ENABLE_TEXT },                                 // {"On/Off"       ,"",SVT_AI_ENABLE_TEXT},
     15              { L_WORD126, L_WORD237, SVT_AI_GAIN   },                                        // {"Gain"         ,"",SVT_AI_GAIN},
     16              { L_WORD127, L_WORD237, SVT_AI_OFFSET },                                      // {"Offset"       ,"",SVT_AI_OFFSET},
     17              { L_WORD128, L_WORD237, SVT_AI_CALC_VAL },                                    // {"Value"        ,"",SVT_AI_CALC_VAL},
     18              { L_WORD36, L_WORD237, SVT_AI_UNIT },                                        // {"Unit"         ,"",SVT_AI_UNIT},
     19              { L_WORD450, L_WORD237, SVT_AI_DB },                                          // {"SnsDB"        ,"",SVT_AI_DB},
     20              { L_WORD451, L_WORD237, SVT_AI_PLACING },                                     // {"Placing"      ,"",SVT_AI_PLACING},
     21              { L_WORD74, L_WORD237, SVT_AI_PRONAME },                                     // {"Name"         ,"",SVT_AI_PRONAME},
     22              { L_WORD390, L_WORD237, SVT_AI_SERIAL_NUMBER },                               // {"SerNumber"    ,"",SVT_AI_SERIAL_NUMBER},
     23              { L_WORD452, L_WORD237, SVT_AI_MIN_RANGE },                                   // {"MinRange"     ,"",SVT_AI_MIN_RANGE},
     24              { L_WORD453, L_WORD237, SVT_AI_MAX_RANGE },                                   // {"MaxRange"     ,"",SVT_AI_MAX_RANGE},
     25              { L_WORD454, L_WORD237, SVT_AI_CABLE_LENGTH },                                // {"CableLength"  ,"",SVT_AI_CABLE_LENGTH},
     26              { L_WORD455, L_WORD237, SVT_IOC_TCU_ADDRES },                                 // {"TCUAddress"   ,"",SVT_IOC_TCU_ADDRES},
     27              { L_WORD456, L_WORD237, SVT_IOC_TCU_PORT },                                   // {"Port"         ,"",SVT_IOC_TCU_PORT},
     28              { L_WORD457, L_WORD237, SVT_IOC_IO_ADDRESS },                                 // {"IOAddress"    ,"",SVT_IOC_IO_ADDRESS},
     29              { L_WORD458, L_WORD237, SVT_IOC_IO_CHANNEL },                                 // {"Channel"      ,"",SVT_IOC_IO_CHANNEL},
     30              { L_WORD459, L_WORD237, SVT_IOC_ADCARD_CHANNEL },                             // {"ADCardChn"    ,"",SVT_IOC_ADCARD_CHANNEL},
     31          };
     32          

   \                                 In segment DATA_C, align 4, align-sorted
     33          vector<AnalogInput *> AnalogInput::AIPtrVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??AIPtrVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??GlobalAISet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
     34          set<PRogramObjectBase *>AnalogInput::GlobalAISet;
   \                     ??GlobalAISet:
   \   00000000                      DS8 24
   \                     ??AIPtrVector:
   \   00000018                      DS8 12

   \                                 In segment CODE, align 4, keep-with-next
     35          AnalogInput::AnalogInput(void) {
   \                     ??AnalogInput:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??PROIOComponent,??PROIOComponent??rA
   \   0000000C   1C009FE5           LDR      R0,??AnalogInput_1  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     36              Init();
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??Init
     37              AIPtrVector.push_back(this);
   \   0000001C   10009FE5           LDR      R0,??AnalogInput_1+0x4  ;; ??GlobalAISet + 24
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA
     38          }
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           B        ?Subroutine45
   \                     ??AnalogInput_1:
   \   00000030   ........           DC32     ??__vtbl
   \   00000034   ........           DC32     ??GlobalAISet + 24

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine45:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void AnalogInput::Init(void) {
     41              //IDNumber     = GetFirstFreeId();
     42              SerialNumber        = "None";
   \                     ??Init:
   \   00000000   ........           LDR      R1,??DataTable0  ;; `?<Constant "None">`
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   ........           LDR      R1,??DataTable2  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   D80084E2           ADD      R0,R4,#+216
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
     43              PROPtr              = NULL;
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   245184E5           STR      R5,[R4, #+292]
     44              Distance            = 0.00;
   \   00000048   0060A0E3           MOV      R6,#+0
   \   0000004C   2C6184E5           STR      R6,[R4, #+300]
     45              AdjustedDistance    = 0.00;
   \   00000050   306184E5           STR      R6,[R4, #+304]
     46              IsPressureSns       = false;
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   2001C4E5           STRB     R0,[R4, #+288]
     47              Enable              = true;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   3401C4E5           STRB     R0,[R4, #+308]
     48              Modified            = false;
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   3511C4E5           STRB     R1,[R4, #+309]
     49              ResultOK            = false;
   \   0000006C   3611C4E5           STRB     R1,[R4, #+310]
     50              NewSensor           = false;
   \   00000070   3711C4E5           STRB     R1,[R4, #+311]
     51              Failure             = 0;
   \   00000074   3851C4E5           STRB     R5,[R4, #+312]
     52              IsStartUp           = true;
   \   00000078   4C01C4E5           STRB     R0,[R4, #+332]
     53              Gain                = 1.0;
   \   0000007C   FE05A0E3           MOV      R0,#+1065353216
   \   00000080   3C0184E5           STR      R0,[R4, #+316]
     54              Offset              = 0.0;
   \   00000084   406184E5           STR      R6,[R4, #+320]
     55              CalcValue           = 0.0;
   \   00000088   486184E5           STR      R6,[R4, #+328]
     56              FilteredValue       = 0.0;
   \   0000008C   446184E5           STR      R6,[R4, #+324]
     57              OutsideCnt          = MAX_OUTSIDE_WIN_CNT;
   \   00000090   1400A0E3           MOV      R0,#+20
   \   00000094   1C0184E5           STR      R0,[R4, #+284]
     58              HasDistance         = false;
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   2101C4E5           STRB     R0,[R4, #+289]
     59          
     60              TimeModified        = time(NULL);
   \   000000A0   ........           _BLF     time,??time??rA
   \   000000A4   500184E5           STR      R0,[R4, #+336]
     61              ModifiedBy          = C_MOD_CONFIG;
   \   000000A8   CB00A0E3           MOV      R0,#+203
   \   000000AC   800E80E3           ORR      R0,R0,#0x800
   \   000000B0   580184E5           STR      R0,[R4, #+344]
     62          
     63              Location            = C_AI_LOC_NOT_DEFINED;
   \   000000B4   130080E2           ADD      R0,R0,#+19
   \   000000B8   280184E5           STR      R0,[R4, #+296]
     64              LocationKWord       = L_WORD585;
   \   000000BC   4900A0E3           MOV      R0,#+73
   \   000000C0   800F80E3           ORR      R0,R0,#0x200
   \   000000C4   180184E5           STR      R0,[R4, #+280]
     65              MinRange            = 0.0;
   \   000000C8   5C6184E5           STR      R6,[R4, #+348]
     66              MaxRange            = 0.0; // EHSMark Can be a problem
   \   000000CC   606184E5           STR      R6,[R4, #+352]
     67          //  CableLength         = 0.0;   //only for temp
     68          
     69              TCUAddress          = 0;
   \   000000D0   F45084E5           STR      R5,[R4, #+244]
     70              TCUPortNo           = 0;
   \   000000D4   F85084E5           STR      R5,[R4, #+248]
     71              IOType              = 0;
   \   000000D8   FC5084E5           STR      R5,[R4, #+252]
     72              IOAddress           = 0;
   \   000000DC   005184E5           STR      R5,[R4, #+256]
     73              IOChannel           = 0;
   \   000000E0   045184E5           STR      R5,[R4, #+260]
     74              ADCardChannel       = 0;
   \   000000E4   085184E5           STR      R5,[R4, #+264]
     75              BasicSensorType     = AI_SENSOR_NOT_DEFINED;
   \   000000E8   105184E5           STR      R5,[R4, #+272]
     76              BasicSensorTypeWord = L_WORD485; //Unknown
   \   000000EC   640040E2           SUB      R0,R0,#+100
   \   000000F0   140184E5           STR      R0,[R4, #+276]
     77              TimeChecked         = 0;
   \   000000F4   545184E5           STR      R5,[R4, #+340]
     78          }
   \   000000F8   ........           B        ?Subroutine43

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine43:
   \   00000000   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine43_0:
   \   00000004   7040BDE8           POP      {R4-R6,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          AnalogInput::~AnalogInput(void) {
   \                     `?~AnalogInput`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AnalogInput_1`
     81          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROIOComponent`,`?~PROIOComponent??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AnalogInput_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AnalogInput_1`:
   \   0000002C   ........           B        ?Subroutine46

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine46:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     82          
     83          ///////////////////////////////////////////////////////////////
     84          //
     85          // Routines for the Configuration
     86          //
     87          ///////////////////////////////////////////////////////////////
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          unsigned AnalogInput::GetFirstFreeId(set<unsigned> &AISet) {
   \                     ??GetFirstFreeId:
   \   00000000   F3412DE9           PUSH     {R0,R1,R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     90              unsigned FirstFreeId = 0;
   \   00000008   0050A0E3           MOV      R5,#+0
     91              unsigned MaxId       = (C_IOC_ANALOG_IN << 16);
   \   0000000C   7066A0E3           MOV      R6,#+117440512
   \   00000010   DA6886E3           ORR      R6,R6,#0xDA0000
     92              for ( unsigned i = 0; !FirstFreeId && i < AISet.size(); i++ ) {
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   050000EA           B        ??GetFirstFreeId_1
     93                  unsigned IDNum = (C_IOC_ANALOG_IN << 16) + i + 1;
     94                  set<unsigned>::iterator pBIt;
     95                  pBIt = AISet.find(IDNum);
     96                  if ( pBIt == AISet.end() ) {
     97                      FirstFreeId = IDNum;
     98                  } else if ( *pBIt > MaxId ) {
   \                     ??GetFirstFreeId_2:
   \   0000001C   101090E5           LDR      R1,[R0, #+16]
   \   00000020   010056E1           CMP      R6,R1
     99                      MaxId = *pBIt;
   \   00000024   0160A031           MOVCC    R6,R1
    100                  }
   \                     ??GetFirstFreeId_3:
   \   00000028   017087E2           ADD      R7,R7,#+1
   \   0000002C   000055E3           CMP      R5,#+0
   \   00000030   0C00001A           BNE      ??GetFirstFreeId_4
   \                     ??GetFirstFreeId_1:
   \   00000034   100094E5           LDR      R0,[R4, #+16]
   \   00000038   000057E1           CMP      R7,R0
   \   0000003C   0800002A           BCS      ??GetFirstFreeId_5
   \   00000040   3C009FE5           LDR      R0,??GetFirstFreeId_6  ;; 0x7da0001
   \   00000044   078080E0           ADD      R8,R0,R7
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??find,??find??rA
   \   00000054   040050E1           CMP      R0,R4
   \   00000058   EFFFFF1A           BNE      ??GetFirstFreeId_2
   \   0000005C   0850A0E1           MOV      R5,R8
   \   00000060   F0FFFFEA           B        ??GetFirstFreeId_3
    101              }
    102              if ( !FirstFreeId ) {
    103                  FirstFreeId = MaxId + 1;
   \                     ??GetFirstFreeId_5:
   \   00000064   015086E2           ADD      R5,R6,#+1
    104              }
    105              AISet.insert(FirstFreeId);
   \                     ??GetFirstFreeId_4:
   \   00000068   0520A0E1           MOV      R2,R5
   \   0000006C   0410A0E1           MOV      R1,R4
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??insert,??insert??rA
    106          
    107              return (FirstFreeId);
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   F641BDE8           POP      {R1,R2,R4-R8,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
   \                     ??GetFirstFreeId_6:
   \   00000084   0100DA07           DC32     0x7da0001
    108          }
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          void AnalogInput::CreateIdNum(void) {
   \                     ??CreateIdNum:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    111              set<unsigned> AISet;
   \   00000008   0110A0E3           MOV      R1,#+1
    112              vector<AnalogInput *>::iterator pBIt;
    113              for ( pBIt = AIPtrVector.begin(); pBIt != AIPtrVector.end(); pBIt++ ) {
   \   0000000C   A4409FE5           LDR      R4,??CreateIdNum_1  ;; ??GlobalAISet
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000020   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000024   1810CDE5           STRB     R1,[SP, #+24]
   \   00000028   185094E5           LDR      R5,[R4, #+24]
   \   0000002C   070000EA           B        ??CreateIdNum_2
    114                  if ( pBIt != AIPtrVector.end() ) {
    115                      AnalogInput *tmpPtr = *pBIt;
   \                     ??CreateIdNum_3:
   \   00000030   000095E5           LDR      R0,[R5, #+0]
    116                      if ( tmpPtr->IDNumber ) {
   \   00000034   9C2090E5           LDR      R2,[R0, #+156]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0200000A           BEQ      ??CreateIdNum_4
    117                          AISet.insert(tmpPtr->IDNumber);
   \   00000040   04108DE2           ADD      R1,SP,#+4
   \   00000044   1C008DE2           ADD      R0,SP,#+28
   \   00000048   ........           _BLF     ??insert,??insert??rA
    118                      }
    119                  }
    120              }
   \                     ??CreateIdNum_4:
   \   0000004C   045085E2           ADD      R5,R5,#+4
   \                     ??CreateIdNum_2:
   \   00000050   1C0094E5           LDR      R0,[R4, #+28]
   \   00000054   000055E1           CMP      R5,R0
   \   00000058   F4FFFF1A           BNE      ??CreateIdNum_3
    121          
    122              for ( pBIt = AIPtrVector.begin(); pBIt != AIPtrVector.end(); pBIt++ ) {
   \   0000005C   185094E5           LDR      R5,[R4, #+24]
   \   00000060   0A0000EA           B        ??CreateIdNum_5
    123                  if ( pBIt != AIPtrVector.end() ) {
    124                      AnalogInput *tmpPtr = *pBIt;
   \                     ??CreateIdNum_6:
   \   00000064   006095E5           LDR      R6,[R5, #+0]
    125                      if ( !tmpPtr->IDNumber || ((tmpPtr->IDNumber) >> 16 == C_PRO_BASIC) ) {
   \   00000068   9C0096E5           LDR      R0,[R6, #+156]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   E710A013           MOVNE    R1,#+231
   \   00000074   C01F8113           ORRNE    R1,R1,#0x300
   \   00000078   20085111           CMPNE    R1,R0, LSR #+16
   \   0000007C   0200001A           BNE      ??CreateIdNum_7
    126                          tmpPtr->IDNumber = GetFirstFreeId(AISet);
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \   00000084   ........           BL       ??GetFirstFreeId
   \   00000088   9C0086E5           STR      R0,[R6, #+156]
    127                      }
    128                  }
    129              }
   \                     ??CreateIdNum_7:
   \   0000008C   045085E2           ADD      R5,R5,#+4
   \                     ??CreateIdNum_5:
   \   00000090   1C0094E5           LDR      R0,[R4, #+28]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   F1FFFF1A           BNE      ??CreateIdNum_6
    130          
    131          }
   \   0000009C   08109DE5           LDR      R1,[SP, #+8]
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   000000A8   04008DE2           ADD      R0,SP,#+4
   \   000000AC   ........           _BLF     ??_Clear,??_Clear??rA
   \   000000B0   24D08DE2           ADD      SP,SP,#+36
   \   000000B4   ........           B        ??Subroutine43_0
   \                     ??CreateIdNum_1:
   \   000000B8   ........           DC32     ??GlobalAISet
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          void AnalogInput::SetPROPtr(PRogramObject *PPtr) {
   \                     ??SetPROPtr:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    134              if ( PROPtr != PPtr ) {
   \   0000000C   240194E5           LDR      R0,[R4, #+292]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   6800000A           BEQ      ??SetPROPtr_2
    135                  PROPtr = PPtr;
   \   00000018   241184E5           STR      R1,[R4, #+292]
    136                  switch ( Location ) {
   \   0000001C   280194E5           LDR      R0,[R4, #+296]
   \   00000020   DE1040E2           SUB      R1,R0,#+222
   \   00000024   801E41E2           SUB      R1,R1,#+2048
   \   00000028   530051E3           CMP      R1,#+83
   \   0000002C   5200008A           BHI      ??SetPROPtr_3
   \   00000030   012F8FE2           ADR      R2,??SetPROPtr_1
   \   00000034   0120D2E7           LDRB     R2,[R2, R1]
   \   00000038   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SetPROPtr_1:
   \   0000003C   1417191B           DC8      +20,+23,+25,+27
   \   00000040   1D202224           DC8      +29,+32,+34,+36
   \   00000044   26282A2C           DC8      +38,+40,+42,+44
   \   00000048   2F313337           DC8      +47,+49,+51,+55
   \   0000004C   393B3E2A           DC8      +57,+59,+62,+42
   \   00000050   2C484F4F           DC8      +44,+72,+79,+79
   \   00000054   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000058   4F4F3540           DC8      +79,+79,+53,+64
   \   0000005C   40404040           DC8      +64,+64,+64,+64
   \   00000060   40404040           DC8      +64,+64,+64,+64
   \   00000064   4043464F           DC8      +64,+67,+70,+79
   \   00000068   4F4F4F4F           DC8      +79,+79,+79,+79
   \   0000006C   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000070   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000074   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000078   4F4F4F4F           DC8      +79,+79,+79,+79
   \   0000007C   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000080   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000084   4F4F4F4F           DC8      +79,+79,+79,+79
   \   00000088   4F4F4F4F           DC8      +79,+79,+79,+79
   \   0000008C   4F4B4B4B           DC8      +79,+75,+75,+75
    137                  case C_AI_LOC_NOT_DEFINED:
    138                      LocationKWord = L_WORD585; break;
   \                     ??SetPROPtr_4:
   \   00000090   4900A0E3           MOV      R0,#+73
   \                     ??SetPROPtr_5:
   \   00000094   800F80E3           ORR      R0,R0,#0x200
   \   00000098   360000EA           B        ??SetPROPtr_6
    139                  case C_AI_LOC_BOTTOM     :
    140                      LocationKWord = L_WORD587; break;
   \                     ??SetPROPtr_7:
   \   0000009C   4B00A0E3           MOV      R0,#+75
   \   000000A0   FBFFFFEA           B        ??SetPROPtr_5
    141                  case C_AI_LOC_MIDDLE     :
    142                      LocationKWord = L_WORD588; break;
   \                     ??SetPROPtr_8:
   \   000000A4   930FA0E3           MOV      R0,#+588
   \   000000A8   320000EA           B        ??SetPROPtr_6
    143                  case C_AI_LOC_UPPER      :
    144                      LocationKWord = L_WORD589; break;
   \                     ??SetPROPtr_9:
   \   000000AC   4D00A0E3           MOV      R0,#+77
   \   000000B0   F7FFFFEA           B        ??SetPROPtr_5
    145                  case C_AI_LOC_VAPOUR     :
    146                      LocationKWord = L_WORD590; break;
   \                     ??SetPROPtr_10:
   \   000000B4   4E00A0E3           MOV      R0,#+78
   \                     ??SetPROPtr_11:
   \   000000B8   800F80E3           ORR      R0,R0,#0x200
   \   000000BC   2D0000EA           B        ??SetPROPtr_6
    147                  case C_AI_LOC_PUMP_ROOM  :
    148                      LocationKWord = L_WORD591; break;
   \                     ??SetPROPtr_12:
   \   000000C0   4F00A0E3           MOV      R0,#+79
   \   000000C4   F2FFFFEA           B        ??SetPROPtr_5
    149                  case C_AI_LOC_ENGINE_ROOM:
    150                      LocationKWord = L_WORD592; break;
   \                     ??SetPROPtr_13:
   \   000000C8   940FA0E3           MOV      R0,#+592
   \   000000CC   290000EA           B        ??SetPROPtr_6
    151                  case C_AI_LOC_SYSTEM     :
    152                      LocationKWord = L_WORD96; break;
   \                     ??SetPROPtr_14:
   \   000000D0   6000A0E3           MOV      R0,#+96
   \   000000D4   270000EA           B        ??SetPROPtr_6
    153                  case C_AI_LOC_WI_MAIN    :
    154                      LocationKWord = L_WORD596; break;
   \                     ??SetPROPtr_15:
   \   000000D8   950FA0E3           MOV      R0,#+596
   \   000000DC   250000EA           B        ??SetPROPtr_6
    155                  case C_AI_LOC_WI_PRE     :
    156                      LocationKWord = L_WORD597; break;
   \                     ??SetPROPtr_16:
   \   000000E0   5500A0E3           MOV      R0,#+85
   \   000000E4   EAFFFFEA           B        ??SetPROPtr_5
    157                  case C_AI_LOC_INC_TRIM   :
    158                      LocationKWord = L_WORD460; break;
   \                     ??SetPROPtr_17:
   \   000000E8   730FA0E3           MOV      R0,#+460
   \   000000EC   210000EA           B        ??SetPROPtr_6
    159                  case C_AI_LOC_INC_LIST   :
    160                      LocationKWord = L_WORD461; break;
   \                     ??SetPROPtr_18:
   \   000000F0   CD00A0E3           MOV      R0,#+205
   \                     ??SetPROPtr_19:
   \   000000F4   400F80E3           ORR      R0,R0,#0x100
   \   000000F8   1E0000EA           B        ??SetPROPtr_6
    161                  case C_AI_LOC_DECK       :
    162                      LocationKWord = L_WORD594; break;
   \                     ??SetPROPtr_20:
   \   000000FC   5200A0E3           MOV      R0,#+82
   \   00000100   E3FFFFEA           B        ??SetPROPtr_5
    163                  case C_AI_LOC_LINE       :
    164                      LocationKWord = L_WORD595; break;
   \                     ??SetPROPtr_21:
   \   00000104   5300A0E3           MOV      R0,#+83
   \   00000108   EAFFFFEA           B        ??SetPROPtr_11
    165                  case C_AI_LOC_ATM        :
    166                      LocationKWord = L_WORD586; break;
   \                     ??SetPROPtr_22:
   \   0000010C   4A00A0E3           MOV      R0,#+74
   \   00000110   DFFFFFEA           B        ??SetPROPtr_5
    167                  case C_AI_LOC_TEMP       :
    168                      LocationKWord = L_WORD338; break;
   \                     ??SetPROPtr_23:
   \   00000114   5200A0E3           MOV      R0,#+82
   \   00000118   F5FFFFEA           B        ??SetPROPtr_19
    169                  case C_AI_LOC_POWER1     :
    170                      LocationKWord = L_WORD654; break;
   \                     ??SetPROPtr_24:
   \   0000011C   8E00A0E3           MOV      R0,#+142
   \   00000120   DBFFFFEA           B        ??SetPROPtr_5
    171                  case C_AI_LOC_POWER2     :
    172                      LocationKWord = L_WORD655; break;
   \                     ??SetPROPtr_25:
   \   00000124   8F00A0E3           MOV      R0,#+143
   \   00000128   E2FFFFEA           B        ??SetPROPtr_11
    173                  case C_AI_LOC_AC_OK      :
    174                      LocationKWord = L_WORD890; break;
   \                     ??SetPROPtr_26:
   \   0000012C   7A00A0E3           MOV      R0,#+122
   \                     ??SetPROPtr_27:
   \   00000130   C00F80E3           ORR      R0,R0,#0x300
   \   00000134   0F0000EA           B        ??SetPROPtr_6
    175                  case C_AI_LOC_FUSES      :
    176                      LocationKWord = L_WORD891; break;
   \                     ??SetPROPtr_28:
   \   00000138   7B00A0E3           MOV      R0,#+123
   \   0000013C   FBFFFFEA           B        ??SetPROPtr_27
    177                  case C_AI_LOC_TRIM       :
    178                      LocationKWord = L_WORD460; break;
    179                  case C_AI_LOC_LIST       :
    180                      LocationKWord = L_WORD461; break;
    181                  case C_AI_LOC_TEMP1      :
    182                  case C_AI_LOC_TEMP2      :
    183                  case C_AI_LOC_TEMP3      :
    184                  case C_AI_LOC_TEMP4      :
    185                  case C_AI_LOC_TEMP5      :
    186                  case C_AI_LOC_TEMP6      :
    187                  case C_AI_LOC_TEMP7      :
    188                  case C_AI_LOC_TEMP8      :
    189                  case C_AI_LOC_TEMP9      :
    190                  case C_AI_LOC_TEMP10     :
    191                      LocationKWord = L_WORD985 + Location - C_AI_LOC_TEMP1;
   \                     ??SetPROPtr_29:
   \   00000140   2310E0E3           MVN      R1,#+35
   \   00000144   501EC1E3           BIC      R1,R1,#0x500
   \   00000148   090000EA           B        ??SetPROPtr_30
    192                      break;
    193                  case C_AI_LOC_TEMP_IN :
    194                      LocationKWord = L_WORD1113;
   \                     ??SetPROPtr_31:
   \   0000014C   5900A0E3           MOV      R0,#+89
   \                     ??SetPROPtr_32:
   \   00000150   400E80E3           ORR      R0,R0,#0x400
   \   00000154   070000EA           B        ??SetPROPtr_6
    195                      break;
    196                  case C_AI_LOC_TEMP_OUT:
    197                      LocationKWord = L_WORD1114;
   \                     ??SetPROPtr_33:
   \   00000158   5A00A0E3           MOV      R0,#+90
   \   0000015C   FBFFFFEA           B        ??SetPROPtr_32
    198                      break;
    199                  case C_AI_LOC_TANK_CLEAN:
    200                      LocationKWord = L_WORD1115;
   \                     ??SetPROPtr_34:
   \   00000160   5B00A0E3           MOV      R0,#+91
   \   00000164   400E80E3           ORR      R0,R0,#0x400
   \   00000168   020000EA           B        ??SetPROPtr_6
    201                      break;
    202                  case C_AI_LOC_REDUNDANCY1:
    203                  case C_AI_LOC_REDUNDANCY2:
    204                  case C_AI_LOC_REDUNDANCY3:
    205                      LocationKWord = L_WORD749 + Location - C_AI_LOC_REDUNDANCY1;
   \                     ??SetPROPtr_35:
   \   0000016C   4110E0E3           MVN      R1,#+65
   \   00000170   601EC1E3           BIC      R1,R1,#0x600
   \                     ??SetPROPtr_30:
   \   00000174   000081E0           ADD      R0,R1,R0
   \                     ??SetPROPtr_6:
   \   00000178   180184E5           STR      R0,[R4, #+280]
    206                      break;
    207          
    208                  }
    209                  Name = GetName();
   \                     ??SetPROPtr_3:
   \   0000017C   A42094E5           LDR      R2,[R4, #+164]
   \   00000180   0D10A0E1           MOV      R1,SP
   \   00000184   182092E5           LDR      R2,[R2, #+24]
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   0FE0A0E1           MOV      LR,PC
   \   00000190   12FF2FE1           BX       R2
   \   00000194   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   003090E5           LDR      R3,[R0, #+0]
   \   000001A0   0D10A0E1           MOV      R1,SP
   \   000001A4   440084E2           ADD      R0,R4,#+68
   \   000001A8   ........           _BLF     ??assign,??assign??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   0D00A0E1           MOV      R0,SP
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    210              }
    211          }
   \                     ??SetPROPtr_2:
   \   000001BC   1CD08DE2           ADD      SP,SP,#+28
   \   000001C0                      REQUIRE ?Subroutine45
   \   000001C0                      ;; // Fall through to label ?Subroutine45
    212          
    213          

   \                                 In segment CODE, align 4, keep-with-next
    214          AnsiString AnalogInput::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   D2DE4DE2           SUB      SP,SP,#+3360
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    215              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
   \   00000014   012086E2           ADD      R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   CC008DE2           ADD      R0,SP,#+204
   \   00000020   C00E80E2           ADD      R0,R0,#+3072
   \   00000024   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    216              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
   \   00000028   022086E2           ADD      R2,R6,#+2
   \   0000002C   0910A0E3           MOV      R1,#+9
   \   00000030   930F8DE2           ADD      R0,SP,#+588
   \   00000034   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    217              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
   \   00000038   032086E2           ADD      R2,R6,#+3
   \   0000003C   0910A0E3           MOV      R1,#+9
   \   00000040   9A0F8DE2           ADD      R0,SP,#+616
   \   00000044   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    218              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
   \   00000048   042086E2           ADD      R2,R6,#+4
   \   0000004C   0910A0E3           MOV      R1,#+9
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    219              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
   \   00000058   052086E2           ADD      R2,R6,#+5
   \   0000005C   0910A0E3           MOV      R1,#+9
   \   00000060   E8008DE2           ADD      R0,SP,#+232
   \   00000064   C00E80E2           ADD      R0,R0,#+3072
   \   00000068   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    220              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
   \   0000006C   062086E2           ADD      R2,R6,#+6
    221              AnsiString LocalString;
    222              if ( SerialNumber.IsEmpty() ) {
   \   00000070   A46B9FE5           LDR      R6,??MakeConfigString_3  ;; `?<Constant "None">`
   \   00000074   0910A0E3           MOV      R1,#+9
   \   00000078   410F8DE2           ADD      R0,SP,#+260
   \   0000007C   C00E80E2           ADD      R0,R0,#+3072
   \   00000080   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000008C   D80084E2           ADD      R0,R4,#+216
   \   00000090   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0C00000A           BEQ      ??MakeConfigString_4
    223                  SerialNumber = "None";
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   1C008DE2           ADD      R0,SP,#+28
   \   000000A4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000A8   701B9FE5           LDR      R1,??MakeConfigString_3+0x4  ;; ??npos
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   003091E5           LDR      R3,[R1, #+0]
   \   000000B4   0010A0E1           MOV      R1,R0
   \   000000B8   D80084E2           ADD      R0,R4,#+216
   \   000000BC   ........           _BLF     ??assign,??assign??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   1C008DE2           ADD      R0,SP,#+28
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    224              }
    225              AnsiString IdNumStr;
   \                     ??MakeConfigString_4:
   \   000000D0   A10F8DE2           ADD      R0,SP,#+644
   \   000000D4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    226              IdNumStr.cat_sprintf("0x%0x", IDNumber);
   \   000000D8   9C3094E5           LDR      R3,[R4, #+156]
   \   000000DC   082086E2           ADD      R2,R6,#+8
    227              LocalString += TabStr3 + KeyWord(C_AI_START_COMMON) + CrLfStr;
   \   000000E0   3C6B9FE5           LDR      R6,??MakeConfigString_3+0x8  ;; CrLfStr
   \   000000E4   CB1E8DE2           ADD      R1,SP,#+3248
   \   000000E8   A10F8DE2           ADD      R0,SP,#+644
   \   000000EC   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   CB0E8DE2           ADD      R0,SP,#+3248
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   9910A0E3           MOV      R1,#+153
   \   00000104   801E81E3           ORR      R1,R1,#0x800
   \   00000108   E0008DE2           ADD      R0,SP,#+224
   \   0000010C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000110   E0208DE2           ADD      R2,SP,#+224
   \   00000114   9A1F8DE2           ADD      R1,SP,#+616
   \   00000118   C4008DE2           ADD      R0,SP,#+196
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   0620A0E1           MOV      R2,R6
   \   00000124   C4108DE2           ADD      R1,SP,#+196
   \   00000128   A8008DE2           ADD      R0,SP,#+168
   \   0000012C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000130   E80A9FE5           LDR      R0,??MakeConfigString_3+0x4  ;; ??npos
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   007090E5           LDR      R7,[R0, #+0]
   \   0000013C   A8108DE2           ADD      R1,SP,#+168
   \   00000140   0730A0E1           MOV      R3,R7
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           _BLF     ??append,??append??rA
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   A8008DE2           ADD      R0,SP,#+168
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   C4008DE2           ADD      R0,SP,#+196
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   E0008DE2           ADD      R0,SP,#+224
   \   00000178   ........           _BLF     ??_Tidy,??_Tidy??rA
    228              LocalString += TabStr4 + KeyWord(C_PRO_ID_NUMBER) + IdNumStr + CrLfStr;
   \   0000017C   1B10A0E3           MOV      R1,#+27
   \   00000180   501E81E3           ORR      R1,R1,#0x500
   \   00000184   540F8DE2           ADD      R0,SP,#+336
   \   00000188   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000018C   542F8DE2           ADD      R2,SP,#+336
   \   00000190   0D10A0E1           MOV      R1,SP
   \   00000194   4D0F8DE2           ADD      R0,SP,#+308
   \   00000198   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000019C   A12F8DE2           ADD      R2,SP,#+644
   \   000001A0   4D1F8DE2           ADD      R1,SP,#+308
   \   000001A4   460F8DE2           ADD      R0,SP,#+280
   \   000001A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001AC   0620A0E1           MOV      R2,R6
   \   000001B0   461F8DE2           ADD      R1,SP,#+280
   \   000001B4   FC008DE2           ADD      R0,SP,#+252
   \   000001B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001BC   0730A0E1           MOV      R3,R7
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   FC108DE2           ADD      R1,SP,#+252
   \   000001C8   0500A0E1           MOV      R0,R5
   \   000001CC   ........           _BLF     ??append,??append??rA
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   FC008DE2           ADD      R0,SP,#+252
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   460F8DE2           ADD      R0,SP,#+280
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   4D0F8DE2           ADD      R0,SP,#+308
   \   000001FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   540F8DE2           ADD      R0,SP,#+336
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
    229          
    230              LocalString += TabStr4 + KeyWord(C_AI_SERIALNO) + SerialNumber + CrLfStr;
   \   00000210   8A1EA0E3           MOV      R1,#+2208
   \   00000214   700F8DE2           ADD      R0,SP,#+448
   \   00000218   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000021C   702F8DE2           ADD      R2,SP,#+448
   \   00000220   0D10A0E1           MOV      R1,SP
   \   00000224   690F8DE2           ADD      R0,SP,#+420
   \   00000228   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000022C   D82084E2           ADD      R2,R4,#+216
   \   00000230   691F8DE2           ADD      R1,SP,#+420
   \   00000234   620F8DE2           ADD      R0,SP,#+392
   \   00000238   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000023C   0620A0E1           MOV      R2,R6
   \   00000240   621F8DE2           ADD      R1,SP,#+392
   \   00000244   5B0F8DE2           ADD      R0,SP,#+364
   \   00000248   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000024C   0730A0E1           MOV      R3,R7
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   5B1F8DE2           ADD      R1,SP,#+364
   \   00000258   0500A0E1           MOV      R0,R5
   \   0000025C   ........           _BLF     ??append,??append??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   5B0F8DE2           ADD      R0,SP,#+364
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   620F8DE2           ADD      R0,SP,#+392
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   690F8DE2           ADD      R0,SP,#+420
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   700F8DE2           ADD      R0,SP,#+448
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   A00094E5           LDR      R0,[R4, #+160]
   \   000002A4   0580A0E3           MOV      R8,#+5
   \   000002A8   808E88E3           ORR      R8,R8,#0x800
   \   000002AC   A09088E3           ORR      R9,R8,#0xA0
   \   000002B0   9FA088E2           ADD      R10,R8,#+159
   \   000002B4   9CB088E2           ADD      R11,R8,#+156
   \   000002B8   7C0040E2           SUB      R0,R0,#+124
   \   000002BC   800E40E2           SUB      R0,R0,#+2048
   \   000002C0   030050E3           CMP      R0,#+3
   \   000002C4   5702008A           BHI      ??MakeConfigString_5
   \   000002C8   021F8FE2           ADR      R1,??MakeConfigString_1
   \   000002CC   8000A0E1           MOV      R0,R0, LSL #+1
   \   000002D0   B01091E1           LDRH     R1,[R1, R0]
   \   000002D4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??MakeConfigString_1:
   \   000002D8   7001A5015302       DC16     +368,+421,+595,+1
   \              0100        
    231              switch ( Type ) {
    232              case C_AI_WashTrackSensor  :
    233                  LocalString += TabStr4 + KeyWord(C_AI_MIN_RANGE) + FloatToAnsiString(MinRange,  6, 3) + CrLfStr;
   \                     ??MakeConfigString_6:
   \   000002E0   5C1194E5           LDR      R1,[R4, #+348]
   \   000002E4   0330A0E3           MOV      R3,#+3
   \   000002E8   0620A0E3           MOV      R2,#+6
   \   000002EC   C40F8DE2           ADD      R0,SP,#+784
   \   000002F0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000002F4   0A10A0E1           MOV      R1,R10
   \   000002F8   BD0F8DE2           ADD      R0,SP,#+756
   \   000002FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000300   BD2F8DE2           ADD      R2,SP,#+756
   \   00000304   0D10A0E1           MOV      R1,SP
   \   00000308   B60F8DE2           ADD      R0,SP,#+728
   \   0000030C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000310   C42F8DE2           ADD      R2,SP,#+784
   \   00000314   B61F8DE2           ADD      R1,SP,#+728
   \   00000318   AF0F8DE2           ADD      R0,SP,#+700
   \   0000031C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000320   0620A0E1           MOV      R2,R6
   \   00000324   AF1F8DE2           ADD      R1,SP,#+700
   \   00000328   A80F8DE2           ADD      R0,SP,#+672
   \   0000032C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000330   0730A0E1           MOV      R3,R7
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   A81F8DE2           ADD      R1,SP,#+672
   \   0000033C   0500A0E1           MOV      R0,R5
   \   00000340   ........           _BLF     ??append,??append??rA
   \   00000344   0020A0E3           MOV      R2,#+0
   \   00000348   0110A0E3           MOV      R1,#+1
   \   0000034C   A80F8DE2           ADD      R0,SP,#+672
   \   00000350   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   0110A0E3           MOV      R1,#+1
   \   0000035C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000360   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   C40F8DE2           ADD      R0,SP,#+784
   \   00000370   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   B60F8DE2           ADD      R0,SP,#+728
   \   00000380   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   0110A0E3           MOV      R1,#+1
   \   0000038C   BD0F8DE2           ADD      R0,SP,#+756
   \   00000390   ........           _BLF     ??_Tidy,??_Tidy??rA
    234                  LocalString += TabStr4 + KeyWord(C_AI_MAX_RANGE) + FloatToAnsiString(MaxRange,  6, 3) + CrLfStr;
   \   00000394   601194E5           LDR      R1,[R4, #+352]
   \   00000398   0330A0E3           MOV      R3,#+3
   \   0000039C   0620A0E3           MOV      R2,#+6
   \   000003A0   E70F8DE2           ADD      R0,SP,#+924
   \   000003A4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000003A8   0910A0E1           MOV      R1,R9
   \   000003AC   E00F8DE2           ADD      R0,SP,#+896
   \   000003B0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003B4   E02F8DE2           ADD      R2,SP,#+896
   \   000003B8   0D10A0E1           MOV      R1,SP
   \   000003BC   D90F8DE2           ADD      R0,SP,#+868
   \   000003C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C4   E72F8DE2           ADD      R2,SP,#+924
   \   000003C8   D91F8DE2           ADD      R1,SP,#+868
   \   000003CC   D20F8DE2           ADD      R0,SP,#+840
   \   000003D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D4   0620A0E1           MOV      R2,R6
   \   000003D8   D21F8DE2           ADD      R1,SP,#+840
   \   000003DC   CB0F8DE2           ADD      R0,SP,#+812
   \   000003E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E4   0730A0E1           MOV      R3,R7
   \   000003E8   0020A0E3           MOV      R2,#+0
   \   000003EC   CB1F8DE2           ADD      R1,SP,#+812
   \   000003F0   0500A0E1           MOV      R0,R5
   \   000003F4   ........           _BLF     ??append,??append??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   CB0F8DE2           ADD      R0,SP,#+812
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   D20F8DE2           ADD      R0,SP,#+840
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   E70F8DE2           ADD      R0,SP,#+924
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   D90F8DE2           ADD      R0,SP,#+868
   \   00000434   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000438   0020A0E3           MOV      R2,#+0
   \   0000043C   0110A0E3           MOV      R1,#+1
   \   00000440   E00F8DE2           ADD      R0,SP,#+896
   \   00000444   ........           _BLF     ??_Tidy,??_Tidy??rA
    235                  LocalString += TabStr4 + KeyWord(C_TCU_ADDRESS) + (AnsiString)TCUAddress + CrLfStr;
   \   00000448   F41094E5           LDR      R1,[R4, #+244]
   \   0000044C   28008DE2           ADD      R0,SP,#+40
   \   00000450   400E80E2           ADD      R0,R0,#+1024
   \   00000454   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000458   0090A0E1           MOV      R9,R0
   \   0000045C   0810A0E1           MOV      R1,R8
   \   00000460   0C008DE2           ADD      R0,SP,#+12
   \   00000464   400E80E2           ADD      R0,R0,#+1024
   \   00000468   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000046C   0C208DE2           ADD      R2,SP,#+12
   \   00000470   402E82E2           ADD      R2,R2,#+1024
   \   00000474   0D10A0E1           MOV      R1,SP
   \   00000478   FC0F8DE2           ADD      R0,SP,#+1008
   \   0000047C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000480   0920A0E1           MOV      R2,R9
   \   00000484   FC1F8DE2           ADD      R1,SP,#+1008
   \   00000488   F50F8DE2           ADD      R0,SP,#+980
   \   0000048C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000490   0620A0E1           MOV      R2,R6
   \   00000494   F51F8DE2           ADD      R1,SP,#+980
   \   00000498   EE0F8DE2           ADD      R0,SP,#+952
   \   0000049C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A0   0730A0E1           MOV      R3,R7
   \   000004A4   0020A0E3           MOV      R2,#+0
   \   000004A8   EE1F8DE2           ADD      R1,SP,#+952
   \   000004AC   0500A0E1           MOV      R0,R5
   \   000004B0   ........           _BLF     ??append,??append??rA
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   0110A0E3           MOV      R1,#+1
   \   000004BC   EE0F8DE2           ADD      R0,SP,#+952
   \   000004C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C4   0020A0E3           MOV      R2,#+0
   \   000004C8   0110A0E3           MOV      R1,#+1
   \   000004CC   F50F8DE2           ADD      R0,SP,#+980
   \   000004D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D4   0020A0E3           MOV      R2,#+0
   \   000004D8   0110A0E3           MOV      R1,#+1
   \   000004DC   28008DE2           ADD      R0,SP,#+40
   \   000004E0   400E80E2           ADD      R0,R0,#+1024
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0110A0E3           MOV      R1,#+1
   \   000004F0   FC0F8DE2           ADD      R0,SP,#+1008
   \   000004F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   0C008DE2           ADD      R0,SP,#+12
   \   00000504   400E80E2           ADD      R0,R0,#+1024
   \   00000508   ........           _BLF     ??_Tidy,??_Tidy??rA
    236                  LocalString += TabStr4 + KeyWord(C_TCU_PORT_NO) + (AnsiString)TCUPortNo + CrLfStr;
   \   0000050C   F81094E5           LDR      R1,[R4, #+248]
   \   00000510   B4008DE2           ADD      R0,SP,#+180
   \   00000514   400E80E2           ADD      R0,R0,#+1024
   \   00000518   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000051C   0080A0E1           MOV      R8,R0
   \   00000520   99104AE2           SUB      R1,R10,#+153
   \   00000524   98008DE2           ADD      R0,SP,#+152
   \   00000528   400E80E2           ADD      R0,R0,#+1024
   \   0000052C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000530   98208DE2           ADD      R2,SP,#+152
   \   00000534   402E82E2           ADD      R2,R2,#+1024
   \   00000538   0D10A0E1           MOV      R1,SP
   \   0000053C   7C008DE2           ADD      R0,SP,#+124
   \   00000540   400E80E2           ADD      R0,R0,#+1024
   \   00000544   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000548   0820A0E1           MOV      R2,R8
   \   0000054C   7C108DE2           ADD      R1,SP,#+124
   \   00000550   401E81E2           ADD      R1,R1,#+1024
   \   00000554   460E8DE2           ADD      R0,SP,#+1120
   \   00000558   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000055C   0620A0E1           MOV      R2,R6
   \   00000560   461E8DE2           ADD      R1,SP,#+1120
   \   00000564   44008DE2           ADD      R0,SP,#+68
   \   00000568   400E80E2           ADD      R0,R0,#+1024
   \   0000056C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000570   0730A0E1           MOV      R3,R7
   \   00000574   0020A0E3           MOV      R2,#+0
   \   00000578   44108DE2           ADD      R1,SP,#+68
   \   0000057C   401E81E2           ADD      R1,R1,#+1024
   \   00000580   0500A0E1           MOV      R0,R5
   \   00000584   ........           _BLF     ??append,??append??rA
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   0110A0E3           MOV      R1,#+1
   \   00000590   44008DE2           ADD      R0,SP,#+68
   \   00000594   400E80E2           ADD      R0,R0,#+1024
   \   00000598   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   460E8DE2           ADD      R0,SP,#+1120
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005AC   0020A0E3           MOV      R2,#+0
   \   000005B0   0110A0E3           MOV      R1,#+1
   \   000005B4   B4008DE2           ADD      R0,SP,#+180
   \   000005B8   400E80E2           ADD      R0,R0,#+1024
   \   000005BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C0   0020A0E3           MOV      R2,#+0
   \   000005C4   0110A0E3           MOV      R1,#+1
   \   000005C8   7C008DE2           ADD      R0,SP,#+124
   \   000005CC   400E80E2           ADD      R0,R0,#+1024
   \   000005D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005D4   0020A0E3           MOV      R2,#+0
   \   000005D8   0110A0E3           MOV      R1,#+1
   \   000005DC   98008DE2           ADD      R0,SP,#+152
   \   000005E0   400E80E2           ADD      R0,R0,#+1024
   \   000005E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    237                  LocalString += TabStr4 + KeyWord(C_IO_TYPE) + TabStr2 + KeyWord(IOType) + CrLfStr;
   \   000005E8   FC1094E5           LDR      R1,[R4, #+252]
   \   000005EC   570F8DE2           ADD      R0,SP,#+348
   \   000005F0   400E80E2           ADD      R0,R0,#+1024
   \   000005F4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005F8   9D104AE2           SUB      R1,R10,#+157
   \   000005FC   540E8DE2           ADD      R0,SP,#+1344
   \   00000600   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000604   542E8DE2           ADD      R2,SP,#+1344
   \   00000608   0D10A0E1           MOV      R1,SP
   \   0000060C   490F8DE2           ADD      R0,SP,#+292
   \   00000610   400E80E2           ADD      R0,R0,#+1024
   \   00000614   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000618   932F8DE2           ADD      R2,SP,#+588
   \   0000061C   491F8DE2           ADD      R1,SP,#+292
   \   00000620   401E81E2           ADD      R1,R1,#+1024
   \   00000624   420F8DE2           ADD      R0,SP,#+264
   \   00000628   400E80E2           ADD      R0,R0,#+1024
   \   0000062C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000630   572F8DE2           ADD      R2,SP,#+348
   \   00000634   402E82E2           ADD      R2,R2,#+1024
   \   00000638   421F8DE2           ADD      R1,SP,#+264
   \   0000063C   401E81E2           ADD      R1,R1,#+1024
   \   00000640   EC008DE2           ADD      R0,SP,#+236
   \   00000644   400E80E2           ADD      R0,R0,#+1024
   \   00000648   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000064C   0620A0E1           MOV      R2,R6
   \   00000650   EC108DE2           ADD      R1,SP,#+236
   \   00000654   401E81E2           ADD      R1,R1,#+1024
   \   00000658   4D0E8DE2           ADD      R0,SP,#+1232
   \   0000065C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000660   0730A0E1           MOV      R3,R7
   \   00000664   0020A0E3           MOV      R2,#+0
   \   00000668   4D1E8DE2           ADD      R1,SP,#+1232
   \   0000066C   0500A0E1           MOV      R0,R5
   \   00000670   ........           _BLF     ??append,??append??rA
   \   00000674   0020A0E3           MOV      R2,#+0
   \   00000678   0110A0E3           MOV      R1,#+1
   \   0000067C   4D0E8DE2           ADD      R0,SP,#+1232
   \   00000680   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000684   0020A0E3           MOV      R2,#+0
   \   00000688   0110A0E3           MOV      R1,#+1
   \   0000068C   EC008DE2           ADD      R0,SP,#+236
   \   00000690   400E80E2           ADD      R0,R0,#+1024
   \   00000694   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000698   0020A0E3           MOV      R2,#+0
   \   0000069C   0110A0E3           MOV      R1,#+1
   \   000006A0   570F8DE2           ADD      R0,SP,#+348
   \   000006A4   400E80E2           ADD      R0,R0,#+1024
   \   000006A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006AC   0020A0E3           MOV      R2,#+0
   \   000006B0   0110A0E3           MOV      R1,#+1
   \   000006B4   420F8DE2           ADD      R0,SP,#+264
   \   000006B8   400E80E2           ADD      R0,R0,#+1024
   \   000006BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006C0   0020A0E3           MOV      R2,#+0
   \   000006C4   0110A0E3           MOV      R1,#+1
   \   000006C8   490F8DE2           ADD      R0,SP,#+292
   \   000006CC   400E80E2           ADD      R0,R0,#+1024
   \   000006D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006D4   0020A0E3           MOV      R2,#+0
   \   000006D8   0110A0E3           MOV      R1,#+1
   \   000006DC   540E8DE2           ADD      R0,SP,#+1344
   \   000006E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    238                  LocalString += TabStr4 + KeyWord(C_IO_ADDRESS) + (AnsiString)IOAddress + CrLfStr;
   \   000006E4   001194E5           LDR      R1,[R4, #+256]
   \   000006E8   7A0F8DE2           ADD      R0,SP,#+488
   \   000006EC   400E80E2           ADD      R0,R0,#+1024
   \   000006F0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000006F4   0080A0E1           MOV      R8,R0
   \   000006F8   9C104AE2           SUB      R1,R10,#+156
   \   000006FC   730F8DE2           ADD      R0,SP,#+460
   \   00000700   400E80E2           ADD      R0,R0,#+1024
   \   00000704   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000708   732F8DE2           ADD      R2,SP,#+460
   \   0000070C   402E82E2           ADD      R2,R2,#+1024
   \   00000710   0D10A0E1           MOV      R1,SP
   \   00000714   5B0E8DE2           ADD      R0,SP,#+1456
   \   00000718   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000071C   0820A0E1           MOV      R2,R8
   \   00000720   5B1E8DE2           ADD      R1,SP,#+1456
   \   00000724   650F8DE2           ADD      R0,SP,#+404
   \   00000728   400E80E2           ADD      R0,R0,#+1024
   \   0000072C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000730   0620A0E1           MOV      R2,R6
   \   00000734   651F8DE2           ADD      R1,SP,#+404
   \   00000738   401E81E2           ADD      R1,R1,#+1024
   \   0000073C   5E0F8DE2           ADD      R0,SP,#+376
   \   00000740   400E80E2           ADD      R0,R0,#+1024
   \   00000744   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000748   0730A0E1           MOV      R3,R7
   \   0000074C   0020A0E3           MOV      R2,#+0
   \   00000750   5E1F8DE2           ADD      R1,SP,#+376
   \   00000754   401E81E2           ADD      R1,R1,#+1024
   \   00000758   0500A0E1           MOV      R0,R5
   \   0000075C   ........           _BLF     ??append,??append??rA
   \   00000760   0020A0E3           MOV      R2,#+0
   \   00000764   0110A0E3           MOV      R1,#+1
   \   00000768   5E0F8DE2           ADD      R0,SP,#+376
   \   0000076C   400E80E2           ADD      R0,R0,#+1024
   \   00000770   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000774   0020A0E3           MOV      R2,#+0
   \   00000778   0110A0E3           MOV      R1,#+1
   \   0000077C   650F8DE2           ADD      R0,SP,#+404
   \   00000780   400E80E2           ADD      R0,R0,#+1024
   \   00000784   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000788   0020A0E3           MOV      R2,#+0
   \   0000078C   0110A0E3           MOV      R1,#+1
   \   00000790   7A0F8DE2           ADD      R0,SP,#+488
   \   00000794   400E80E2           ADD      R0,R0,#+1024
   \   00000798   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000079C   0020A0E3           MOV      R2,#+0
   \   000007A0   0110A0E3           MOV      R1,#+1
   \   000007A4   5B0E8DE2           ADD      R0,SP,#+1456
   \   000007A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007AC   0020A0E3           MOV      R2,#+0
   \   000007B0   0110A0E3           MOV      R1,#+1
   \   000007B4   730F8DE2           ADD      R0,SP,#+460
   \   000007B8   400E80E2           ADD      R0,R0,#+1024
   \   000007BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    239                  LocalString += TabStr4 + KeyWord(C_IO_CHANNEL) + (AnsiString)IOChannel + CrLfStr;
   \   000007C0   041194E5           LDR      R1,[R4, #+260]
   \   000007C4   9D0F8DE2           ADD      R0,SP,#+628
   \   000007C8   400E80E2           ADD      R0,R0,#+1024
   \   000007CC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000007D0   0080A0E1           MOV      R8,R0
   \   000007D4   9B104AE2           SUB      R1,R10,#+155
   \   000007D8   960F8DE2           ADD      R0,SP,#+600
   \   000007DC   400E80E2           ADD      R0,R0,#+1024
   \   000007E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000007E4   962F8DE2           ADD      R2,SP,#+600
   \   000007E8   402E82E2           ADD      R2,R2,#+1024
   \   000007EC   0D10A0E1           MOV      R1,SP
   \   000007F0   8F0F8DE2           ADD      R0,SP,#+572
   \   000007F4   400E80E2           ADD      R0,R0,#+1024
   \   000007F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000007FC   0820A0E1           MOV      R2,R8
   \   00000800   8F1F8DE2           ADD      R1,SP,#+572
   \   00000804   401E81E2           ADD      R1,R1,#+1024
   \   00000808   620E8DE2           ADD      R0,SP,#+1568
   \   0000080C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000810   0620A0E1           MOV      R2,R6
   \   00000814   621E8DE2           ADD      R1,SP,#+1568
   \   00000818   810F8DE2           ADD      R0,SP,#+516
   \   0000081C   400E80E2           ADD      R0,R0,#+1024
   \   00000820   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000824   0730A0E1           MOV      R3,R7
   \   00000828   0020A0E3           MOV      R2,#+0
   \   0000082C   811F8DE2           ADD      R1,SP,#+516
   \   00000830   401E81E2           ADD      R1,R1,#+1024
   \   00000834   0500A0E1           MOV      R0,R5
   \   00000838   ........           _BLF     ??append,??append??rA
   \   0000083C   0020A0E3           MOV      R2,#+0
   \   00000840   0110A0E3           MOV      R1,#+1
   \   00000844   810F8DE2           ADD      R0,SP,#+516
   \   00000848   400E80E2           ADD      R0,R0,#+1024
   \   0000084C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000850   0020A0E3           MOV      R2,#+0
   \   00000854   0110A0E3           MOV      R1,#+1
   \   00000858   620E8DE2           ADD      R0,SP,#+1568
   \   0000085C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000860   0020A0E3           MOV      R2,#+0
   \   00000864   0110A0E3           MOV      R1,#+1
   \   00000868   9D0F8DE2           ADD      R0,SP,#+628
   \   0000086C   400E80E2           ADD      R0,R0,#+1024
   \   00000870   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000874   0020A0E3           MOV      R2,#+0
   \   00000878   0110A0E3           MOV      R1,#+1
   \   0000087C   8F0F8DE2           ADD      R0,SP,#+572
   \   00000880   400E80E2           ADD      R0,R0,#+1024
   \   00000884   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000888   0020A0E3           MOV      R2,#+0
   \   0000088C   0110A0E3           MOV      R1,#+1
   \   00000890   960F8DE2           ADD      R0,SP,#+600
   \                     ??MakeConfigString_7:
   \   00000894   400E80E2           ADD      R0,R0,#+1024
   \   00000898   9B0200EA           B        ??MakeConfigString_8
    240                  break;
    241              case C_AI_HSH_LNG_Float :
    242                  LocalString += TabStr4 + KeyWord(C_AI_DISTANCE) + FloatToAnsiString(Distance) + CrLfStr;
   \                     ??MakeConfigString_9:
   \   0000089C   2C1194E5           LDR      R1,[R4, #+300]
   \   000008A0   0330A0E3           MOV      R3,#+3
   \   000008A4   0720A0E3           MOV      R2,#+7
   \   000008A8   700E8DE2           ADD      R0,SP,#+1792
   \   000008AC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000008B0   0B10A0E1           MOV      R1,R11
   \   000008B4   B90F8DE2           ADD      R0,SP,#+740
   \   000008B8   400E80E2           ADD      R0,R0,#+1024
   \   000008BC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000008C0   B92F8DE2           ADD      R2,SP,#+740
   \   000008C4   402E82E2           ADD      R2,R2,#+1024
   \   000008C8   0D10A0E1           MOV      R1,SP
   \   000008CC   B20F8DE2           ADD      R0,SP,#+712
   \   000008D0   400E80E2           ADD      R0,R0,#+1024
   \   000008D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000008D8   702E8DE2           ADD      R2,SP,#+1792
   \   000008DC   B21F8DE2           ADD      R1,SP,#+712
   \   000008E0   401E81E2           ADD      R1,R1,#+1024
   \   000008E4   AB0F8DE2           ADD      R0,SP,#+684
   \   000008E8   400E80E2           ADD      R0,R0,#+1024
   \   000008EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000008F0   0620A0E1           MOV      R2,R6
   \   000008F4   AB1F8DE2           ADD      R1,SP,#+684
   \   000008F8   401E81E2           ADD      R1,R1,#+1024
   \   000008FC   690E8DE2           ADD      R0,SP,#+1680
   \   00000900   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000904   0730A0E1           MOV      R3,R7
   \   00000908   0020A0E3           MOV      R2,#+0
   \   0000090C   691E8DE2           ADD      R1,SP,#+1680
   \   00000910   0500A0E1           MOV      R0,R5
   \   00000914   ........           _BLF     ??append,??append??rA
   \   00000918   0020A0E3           MOV      R2,#+0
   \   0000091C   0110A0E3           MOV      R1,#+1
   \   00000920   690E8DE2           ADD      R0,SP,#+1680
   \   00000924   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000928   0020A0E3           MOV      R2,#+0
   \   0000092C   0110A0E3           MOV      R1,#+1
   \   00000930   AB0F8DE2           ADD      R0,SP,#+684
   \   00000934   400E80E2           ADD      R0,R0,#+1024
   \   00000938   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000093C   0020A0E3           MOV      R2,#+0
   \   00000940   0110A0E3           MOV      R1,#+1
   \   00000944   700E8DE2           ADD      R0,SP,#+1792
   \   00000948   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000094C   0020A0E3           MOV      R2,#+0
   \   00000950   0110A0E3           MOV      R1,#+1
   \   00000954   B20F8DE2           ADD      R0,SP,#+712
   \   00000958   400E80E2           ADD      R0,R0,#+1024
   \   0000095C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000960   0020A0E3           MOV      R2,#+0
   \   00000964   0110A0E3           MOV      R1,#+1
   \   00000968   B90F8DE2           ADD      R0,SP,#+740
   \   0000096C   C8FFFFEA           B        ??MakeConfigString_7
    243                  break;
    244              case C_AI_AirPurge :
    245                  LocalString += TabStr4 + KeyWord(C_AI_DISTANCE) + FloatToAnsiString(Distance) + CrLfStr;
   \                     ??MakeConfigString_10:
   \   00000970   2C1194E5           LDR      R1,[R4, #+300]
   \   00000974   0330A0E3           MOV      R3,#+3
   \   00000978   0720A0E3           MOV      R2,#+7
   \   0000097C   E30F8DE2           ADD      R0,SP,#+908
   \   00000980   400E80E2           ADD      R0,R0,#+1024
   \   00000984   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000988   0B10A0E1           MOV      R1,R11
   \   0000098C   770E8DE2           ADD      R0,SP,#+1904
   \   00000990   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000994   772E8DE2           ADD      R2,SP,#+1904
   \   00000998   0D10A0E1           MOV      R1,SP
   \   0000099C   D50F8DE2           ADD      R0,SP,#+852
   \   000009A0   400E80E2           ADD      R0,R0,#+1024
   \   000009A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009A8   E32F8DE2           ADD      R2,SP,#+908
   \   000009AC   402E82E2           ADD      R2,R2,#+1024
   \   000009B0   D51F8DE2           ADD      R1,SP,#+852
   \   000009B4   401E81E2           ADD      R1,R1,#+1024
   \   000009B8   CE0F8DE2           ADD      R0,SP,#+824
   \   000009BC   400E80E2           ADD      R0,R0,#+1024
   \   000009C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009C4   0620A0E1           MOV      R2,R6
   \   000009C8   CE1F8DE2           ADD      R1,SP,#+824
   \   000009CC   401E81E2           ADD      R1,R1,#+1024
   \   000009D0   C70F8DE2           ADD      R0,SP,#+796
   \   000009D4   400E80E2           ADD      R0,R0,#+1024
   \   000009D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009DC   0730A0E1           MOV      R3,R7
   \   000009E0   0020A0E3           MOV      R2,#+0
   \   000009E4   C71F8DE2           ADD      R1,SP,#+796
   \   000009E8   401E81E2           ADD      R1,R1,#+1024
   \   000009EC   0500A0E1           MOV      R0,R5
   \   000009F0   ........           _BLF     ??append,??append??rA
   \   000009F4   0020A0E3           MOV      R2,#+0
   \   000009F8   0110A0E3           MOV      R1,#+1
   \   000009FC   C70F8DE2           ADD      R0,SP,#+796
   \   00000A00   400E80E2           ADD      R0,R0,#+1024
   \   00000A04   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A08   0020A0E3           MOV      R2,#+0
   \   00000A0C   0110A0E3           MOV      R1,#+1
   \   00000A10   CE0F8DE2           ADD      R0,SP,#+824
   \   00000A14   400E80E2           ADD      R0,R0,#+1024
   \   00000A18   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A1C   0020A0E3           MOV      R2,#+0
   \   00000A20   0110A0E3           MOV      R1,#+1
   \   00000A24   E30F8DE2           ADD      R0,SP,#+908
   \   00000A28   400E80E2           ADD      R0,R0,#+1024
   \   00000A2C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A30   0020A0E3           MOV      R2,#+0
   \   00000A34   0110A0E3           MOV      R1,#+1
   \   00000A38   D50F8DE2           ADD      R0,SP,#+852
   \   00000A3C   400E80E2           ADD      R0,R0,#+1024
   \   00000A40   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A44   0020A0E3           MOV      R2,#+0
   \   00000A48   0110A0E3           MOV      R1,#+1
   \   00000A4C   770E8DE2           ADD      R0,SP,#+1904
   \   00000A50   ........           _BLF     ??_Tidy,??_Tidy??rA
    246                  LocalString += TabStr4 + KeyWord(C_AI_MIN_RANGE) + FloatToAnsiString(MinRange, 6, 3) + CrLfStr;
   \   00000A54   5C1194E5           LDR      R1,[R4, #+348]
   \   00000A58   0330A0E3           MOV      R3,#+3
   \   00000A5C   0620A0E3           MOV      R2,#+6
   \   00000A60   18008DE2           ADD      R0,SP,#+24
   \   00000A64   800E80E2           ADD      R0,R0,#+2048
   \   00000A68   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000A6C   0A10A0E1           MOV      R1,R10
   \   00000A70   FF0F8DE2           ADD      R0,SP,#+1020
   \   00000A74   400E80E2           ADD      R0,R0,#+1024
   \   00000A78   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000A7C   FF2F8DE2           ADD      R2,SP,#+1020
   \   00000A80   402E82E2           ADD      R2,R2,#+1024
   \   00000A84   0D10A0E1           MOV      R1,SP
   \   00000A88   7E0E8DE2           ADD      R0,SP,#+2016
   \   00000A8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A90   18208DE2           ADD      R2,SP,#+24
   \   00000A94   802E82E2           ADD      R2,R2,#+2048
   \   00000A98   7E1E8DE2           ADD      R1,SP,#+2016
   \   00000A9C   F10F8DE2           ADD      R0,SP,#+964
   \   00000AA0   400E80E2           ADD      R0,R0,#+1024
   \   00000AA4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000AA8   0620A0E1           MOV      R2,R6
   \   00000AAC   F11F8DE2           ADD      R1,SP,#+964
   \   00000AB0   401E81E2           ADD      R1,R1,#+1024
   \   00000AB4   EA0F8DE2           ADD      R0,SP,#+936
   \   00000AB8   400E80E2           ADD      R0,R0,#+1024
   \   00000ABC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000AC0   0730A0E1           MOV      R3,R7
   \   00000AC4   0020A0E3           MOV      R2,#+0
   \   00000AC8   EA1F8DE2           ADD      R1,SP,#+936
   \   00000ACC   401E81E2           ADD      R1,R1,#+1024
   \   00000AD0   0500A0E1           MOV      R0,R5
   \   00000AD4   ........           _BLF     ??append,??append??rA
   \   00000AD8   0020A0E3           MOV      R2,#+0
   \   00000ADC   0110A0E3           MOV      R1,#+1
   \   00000AE0   EA0F8DE2           ADD      R0,SP,#+936
   \   00000AE4   400E80E2           ADD      R0,R0,#+1024
   \   00000AE8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AEC   0020A0E3           MOV      R2,#+0
   \   00000AF0   0110A0E3           MOV      R1,#+1
   \   00000AF4   F10F8DE2           ADD      R0,SP,#+964
   \   00000AF8   400E80E2           ADD      R0,R0,#+1024
   \   00000AFC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B00   0020A0E3           MOV      R2,#+0
   \   00000B04   0110A0E3           MOV      R1,#+1
   \   00000B08   18008DE2           ADD      R0,SP,#+24
   \   00000B0C   800E80E2           ADD      R0,R0,#+2048
   \   00000B10   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B14   0020A0E3           MOV      R2,#+0
   \   00000B18   0110A0E3           MOV      R1,#+1
   \   00000B1C   7E0E8DE2           ADD      R0,SP,#+2016
   \   00000B20   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B24   0020A0E3           MOV      R2,#+0
   \   00000B28   0110A0E3           MOV      R1,#+1
   \   00000B2C   FF0F8DE2           ADD      R0,SP,#+1020
   \   00000B30   400E80E2           ADD      R0,R0,#+1024
   \   00000B34   ........           _BLF     ??_Tidy,??_Tidy??rA
    247                  LocalString += TabStr4 + KeyWord(C_AI_MAX_RANGE) + FloatToAnsiString(MaxRange, 6, 3) + CrLfStr;
   \   00000B38   601194E5           LDR      R1,[R4, #+352]
   \   00000B3C   0330A0E3           MOV      R3,#+3
   \   00000B40   0620A0E3           MOV      R2,#+6
   \   00000B44   A4008DE2           ADD      R0,SP,#+164
   \   00000B48   800E80E2           ADD      R0,R0,#+2048
   \   00000B4C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000B50   0910A0E1           MOV      R1,R9
   \   00000B54   88008DE2           ADD      R0,SP,#+136
   \   00000B58   800E80E2           ADD      R0,R0,#+2048
   \   00000B5C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000B60   88208DE2           ADD      R2,SP,#+136
   \   00000B64   802E82E2           ADD      R2,R2,#+2048
   \   00000B68   0D10A0E1           MOV      R1,SP
   \   00000B6C   6C008DE2           ADD      R0,SP,#+108
   \   00000B70   800E80E2           ADD      R0,R0,#+2048
   \   00000B74   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B78   A4208DE2           ADD      R2,SP,#+164
   \   00000B7C   802E82E2           ADD      R2,R2,#+2048
   \   00000B80   6C108DE2           ADD      R1,SP,#+108
   \   00000B84   801E81E2           ADD      R1,R1,#+2048
   \   00000B88   850E8DE2           ADD      R0,SP,#+2128
   \   00000B8C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B90   0620A0E1           MOV      R2,R6
   \   00000B94   851E8DE2           ADD      R1,SP,#+2128
   \   00000B98   34008DE2           ADD      R0,SP,#+52
   \   00000B9C   800E80E2           ADD      R0,R0,#+2048
   \   00000BA0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BA4   0730A0E1           MOV      R3,R7
   \   00000BA8   0020A0E3           MOV      R2,#+0
   \   00000BAC   34108DE2           ADD      R1,SP,#+52
   \   00000BB0   801E81E2           ADD      R1,R1,#+2048
   \   00000BB4   0500A0E1           MOV      R0,R5
   \   00000BB8   ........           _BLF     ??append,??append??rA
   \   00000BBC   0020A0E3           MOV      R2,#+0
   \   00000BC0   0110A0E3           MOV      R1,#+1
   \   00000BC4   34008DE2           ADD      R0,SP,#+52
   \   00000BC8   800E80E2           ADD      R0,R0,#+2048
   \   00000BCC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BD0   0020A0E3           MOV      R2,#+0
   \   00000BD4   0110A0E3           MOV      R1,#+1
   \   00000BD8   850E8DE2           ADD      R0,SP,#+2128
   \   00000BDC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BE0   0020A0E3           MOV      R2,#+0
   \   00000BE4   0110A0E3           MOV      R1,#+1
   \   00000BE8   A4008DE2           ADD      R0,SP,#+164
   \   00000BEC   800E80E2           ADD      R0,R0,#+2048
   \   00000BF0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BF4   0020A0E3           MOV      R2,#+0
   \   00000BF8   0110A0E3           MOV      R1,#+1
   \   00000BFC   6C008DE2           ADD      R0,SP,#+108
   \   00000C00   800E80E2           ADD      R0,R0,#+2048
   \   00000C04   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C08   0020A0E3           MOV      R2,#+0
   \   00000C0C   0110A0E3           MOV      R1,#+1
   \   00000C10   88008DE2           ADD      R0,SP,#+136
   \   00000C14   800E80E2           ADD      R0,R0,#+2048
   \   00000C18   BB0100EA           B        ??MakeConfigString_8
   \                     ??MakeConfigString_3:
   \   00000C1C   ........           DC32     `?<Constant "None">`
   \   00000C20   ........           DC32     ??npos
   \   00000C24   ........           DC32     CrLfStr
    248                  break;
    249              default                 :
    250                  if ( HasDistance ) {
   \                     ??MakeConfigString_5:
   \   00000C28   2101D4E5           LDRB     R0,[R4, #+289]
   \   00000C2C   000050E3           CMP      R0,#+0
   \   00000C30   2C00000A           BEQ      ??MakeConfigString_11
    251                      LocalString += TabStr4 + KeyWord(C_AI_DISTANCE) + FloatToAnsiString(Distance) + CrLfStr;
   \   00000C34   2C1194E5           LDR      R1,[R4, #+300]
   \   00000C38   0330A0E3           MOV      R3,#+3
   \   00000C3C   0720A0E3           MOV      R2,#+7
   \   00000C40   38008DE2           ADD      R0,SP,#+56
   \   00000C44   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000C48   0B10A0E1           MOV      R1,R11
   \   00000C4C   54008DE2           ADD      R0,SP,#+84
   \   00000C50   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000C54   54208DE2           ADD      R2,SP,#+84
   \   00000C58   0D10A0E1           MOV      R1,SP
   \   00000C5C   70008DE2           ADD      R0,SP,#+112
   \   00000C60   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C64   38208DE2           ADD      R2,SP,#+56
   \   00000C68   70108DE2           ADD      R1,SP,#+112
   \   00000C6C   8C008DE2           ADD      R0,SP,#+140
   \   00000C70   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C74   0620A0E1           MOV      R2,R6
   \   00000C78   8C108DE2           ADD      R1,SP,#+140
   \   00000C7C   1C008DE2           ADD      R0,SP,#+28
   \   00000C80   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C84   0730A0E1           MOV      R3,R7
   \   00000C88   0020A0E3           MOV      R2,#+0
   \   00000C8C   1C108DE2           ADD      R1,SP,#+28
   \   00000C90   0500A0E1           MOV      R0,R5
   \   00000C94   ........           _BLF     ??append,??append??rA
   \   00000C98   0020A0E3           MOV      R2,#+0
   \   00000C9C   0110A0E3           MOV      R1,#+1
   \   00000CA0   1C008DE2           ADD      R0,SP,#+28
   \   00000CA4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CA8   0020A0E3           MOV      R2,#+0
   \   00000CAC   0110A0E3           MOV      R1,#+1
   \   00000CB0   8C008DE2           ADD      R0,SP,#+140
   \   00000CB4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CB8   0020A0E3           MOV      R2,#+0
   \   00000CBC   0110A0E3           MOV      R1,#+1
   \   00000CC0   38008DE2           ADD      R0,SP,#+56
   \   00000CC4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CC8   0020A0E3           MOV      R2,#+0
   \   00000CCC   0110A0E3           MOV      R1,#+1
   \   00000CD0   70008DE2           ADD      R0,SP,#+112
   \   00000CD4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CD8   0020A0E3           MOV      R2,#+0
   \   00000CDC   0110A0E3           MOV      R1,#+1
   \   00000CE0   54008DE2           ADD      R0,SP,#+84
   \   00000CE4   ........           _BLF     ??_Tidy,??_Tidy??rA
    252                  }
    253                  LocalString += TabStr4 + KeyWord(C_AI_MIN_RANGE) + FloatToAnsiString(MinRange,  6, 3) + CrLfStr;
   \                     ??MakeConfigString_11:
   \   00000CE8   5C1194E5           LDR      R1,[R4, #+348]
   \   00000CEC   0330A0E3           MOV      R3,#+3
   \   00000CF0   0620A0E3           MOV      R2,#+6
   \   00000CF4   930E8DE2           ADD      R0,SP,#+2352
   \   00000CF8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000CFC   0A10A0E1           MOV      R1,R10
   \   00000D00   450F8DE2           ADD      R0,SP,#+276
   \   00000D04   800E80E2           ADD      R0,R0,#+2048
   \   00000D08   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000D0C   452F8DE2           ADD      R2,SP,#+276
   \   00000D10   802E82E2           ADD      R2,R2,#+2048
   \   00000D14   0D10A0E1           MOV      R1,SP
   \   00000D18   F8008DE2           ADD      R0,SP,#+248
   \   00000D1C   800E80E2           ADD      R0,R0,#+2048
   \   00000D20   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D24   932E8DE2           ADD      R2,SP,#+2352
   \   00000D28   F8108DE2           ADD      R1,SP,#+248
   \   00000D2C   801E81E2           ADD      R1,R1,#+2048
   \   00000D30   DC008DE2           ADD      R0,SP,#+220
   \   00000D34   800E80E2           ADD      R0,R0,#+2048
   \   00000D38   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D3C   0620A0E1           MOV      R2,R6
   \   00000D40   DC108DE2           ADD      R1,SP,#+220
   \   00000D44   801E81E2           ADD      R1,R1,#+2048
   \   00000D48   8C0E8DE2           ADD      R0,SP,#+2240
   \   00000D4C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D50   0730A0E1           MOV      R3,R7
   \   00000D54   0020A0E3           MOV      R2,#+0
   \   00000D58   8C1E8DE2           ADD      R1,SP,#+2240
   \   00000D5C   0500A0E1           MOV      R0,R5
   \   00000D60   ........           _BLF     ??append,??append??rA
   \   00000D64   0020A0E3           MOV      R2,#+0
   \   00000D68   0110A0E3           MOV      R1,#+1
   \   00000D6C   8C0E8DE2           ADD      R0,SP,#+2240
   \   00000D70   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D74   0020A0E3           MOV      R2,#+0
   \   00000D78   0110A0E3           MOV      R1,#+1
   \   00000D7C   DC008DE2           ADD      R0,SP,#+220
   \   00000D80   800E80E2           ADD      R0,R0,#+2048
   \   00000D84   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D88   0020A0E3           MOV      R2,#+0
   \   00000D8C   0110A0E3           MOV      R1,#+1
   \   00000D90   930E8DE2           ADD      R0,SP,#+2352
   \   00000D94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D98   0020A0E3           MOV      R2,#+0
   \   00000D9C   0110A0E3           MOV      R1,#+1
   \   00000DA0   F8008DE2           ADD      R0,SP,#+248
   \   00000DA4   800E80E2           ADD      R0,R0,#+2048
   \   00000DA8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DAC   0020A0E3           MOV      R2,#+0
   \   00000DB0   0110A0E3           MOV      R1,#+1
   \   00000DB4   450F8DE2           ADD      R0,SP,#+276
   \   00000DB8   800E80E2           ADD      R0,R0,#+2048
   \   00000DBC   ........           _BLF     ??_Tidy,??_Tidy??rA
    254                  LocalString += TabStr4 + KeyWord(C_AI_MAX_RANGE) + FloatToAnsiString(MaxRange,  6, 3) + CrLfStr;
   \   00000DC0   601194E5           LDR      R1,[R4, #+352]
   \   00000DC4   0330A0E3           MOV      R3,#+3
   \   00000DC8   0620A0E3           MOV      R2,#+6
   \   00000DCC   6F0F8DE2           ADD      R0,SP,#+444
   \   00000DD0   800E80E2           ADD      R0,R0,#+2048
   \   00000DD4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000DD8   0910A0E1           MOV      R1,R9
   \   00000DDC   9A0E8DE2           ADD      R0,SP,#+2464
   \   00000DE0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000DE4   9A2E8DE2           ADD      R2,SP,#+2464
   \   00000DE8   0D10A0E1           MOV      R1,SP
   \   00000DEC   610F8DE2           ADD      R0,SP,#+388
   \   00000DF0   800E80E2           ADD      R0,R0,#+2048
   \   00000DF4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000DF8   6F2F8DE2           ADD      R2,SP,#+444
   \   00000DFC   802E82E2           ADD      R2,R2,#+2048
   \   00000E00   611F8DE2           ADD      R1,SP,#+388
   \   00000E04   801E81E2           ADD      R1,R1,#+2048
   \   00000E08   5A0F8DE2           ADD      R0,SP,#+360
   \   00000E0C   800E80E2           ADD      R0,R0,#+2048
   \   00000E10   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E14   0620A0E1           MOV      R2,R6
   \   00000E18   5A1F8DE2           ADD      R1,SP,#+360
   \   00000E1C   801E81E2           ADD      R1,R1,#+2048
   \   00000E20   530F8DE2           ADD      R0,SP,#+332
   \   00000E24   800E80E2           ADD      R0,R0,#+2048
   \   00000E28   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E2C   0730A0E1           MOV      R3,R7
   \   00000E30   0020A0E3           MOV      R2,#+0
   \   00000E34   531F8DE2           ADD      R1,SP,#+332
   \   00000E38   801E81E2           ADD      R1,R1,#+2048
   \   00000E3C   0500A0E1           MOV      R0,R5
   \   00000E40   ........           _BLF     ??append,??append??rA
   \   00000E44   0020A0E3           MOV      R2,#+0
   \   00000E48   0110A0E3           MOV      R1,#+1
   \   00000E4C   530F8DE2           ADD      R0,SP,#+332
   \   00000E50   800E80E2           ADD      R0,R0,#+2048
   \   00000E54   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E58   0020A0E3           MOV      R2,#+0
   \   00000E5C   0110A0E3           MOV      R1,#+1
   \   00000E60   5A0F8DE2           ADD      R0,SP,#+360
   \   00000E64   800E80E2           ADD      R0,R0,#+2048
   \   00000E68   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E6C   0020A0E3           MOV      R2,#+0
   \   00000E70   0110A0E3           MOV      R1,#+1
   \   00000E74   6F0F8DE2           ADD      R0,SP,#+444
   \   00000E78   800E80E2           ADD      R0,R0,#+2048
   \   00000E7C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E80   0020A0E3           MOV      R2,#+0
   \   00000E84   0110A0E3           MOV      R1,#+1
   \   00000E88   610F8DE2           ADD      R0,SP,#+388
   \   00000E8C   800E80E2           ADD      R0,R0,#+2048
   \   00000E90   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E94   0020A0E3           MOV      R2,#+0
   \   00000E98   0110A0E3           MOV      R1,#+1
   \   00000E9C   9A0E8DE2           ADD      R0,SP,#+2464
   \   00000EA0   ........           _BLF     ??_Tidy,??_Tidy??rA
    255                  LocalString += TabStr4 + KeyWord(C_TCU_ADDRESS) + (AnsiString)TCUAddress + CrLfStr;
   \   00000EA4   F41094E5           LDR      R1,[R4, #+244]
   \   00000EA8   920F8DE2           ADD      R0,SP,#+584
   \   00000EAC   800E80E2           ADD      R0,R0,#+2048
   \   00000EB0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000EB4   0090A0E1           MOV      R9,R0
   \   00000EB8   0810A0E1           MOV      R1,R8
   \   00000EBC   8B0F8DE2           ADD      R0,SP,#+556
   \   00000EC0   800E80E2           ADD      R0,R0,#+2048
   \   00000EC4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000EC8   8B2F8DE2           ADD      R2,SP,#+556
   \   00000ECC   802E82E2           ADD      R2,R2,#+2048
   \   00000ED0   0D10A0E1           MOV      R1,SP
   \   00000ED4   A10E8DE2           ADD      R0,SP,#+2576
   \   00000ED8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000EDC   0920A0E1           MOV      R2,R9
   \   00000EE0   A11E8DE2           ADD      R1,SP,#+2576
   \   00000EE4   7D0F8DE2           ADD      R0,SP,#+500
   \   00000EE8   800E80E2           ADD      R0,R0,#+2048
   \   00000EEC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000EF0   0620A0E1           MOV      R2,R6
   \   00000EF4   7D1F8DE2           ADD      R1,SP,#+500
   \   00000EF8   801E81E2           ADD      R1,R1,#+2048
   \   00000EFC   760F8DE2           ADD      R0,SP,#+472
   \   00000F00   800E80E2           ADD      R0,R0,#+2048
   \   00000F04   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F08   0730A0E1           MOV      R3,R7
   \   00000F0C   0020A0E3           MOV      R2,#+0
   \   00000F10   761F8DE2           ADD      R1,SP,#+472
   \   00000F14   801E81E2           ADD      R1,R1,#+2048
   \   00000F18   0500A0E1           MOV      R0,R5
   \   00000F1C   ........           _BLF     ??append,??append??rA
   \   00000F20   0020A0E3           MOV      R2,#+0
   \   00000F24   0110A0E3           MOV      R1,#+1
   \   00000F28   760F8DE2           ADD      R0,SP,#+472
   \   00000F2C   800E80E2           ADD      R0,R0,#+2048
   \   00000F30   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F34   0020A0E3           MOV      R2,#+0
   \   00000F38   0110A0E3           MOV      R1,#+1
   \   00000F3C   7D0F8DE2           ADD      R0,SP,#+500
   \   00000F40   800E80E2           ADD      R0,R0,#+2048
   \   00000F44   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F48   0020A0E3           MOV      R2,#+0
   \   00000F4C   0110A0E3           MOV      R1,#+1
   \   00000F50   920F8DE2           ADD      R0,SP,#+584
   \   00000F54   800E80E2           ADD      R0,R0,#+2048
   \   00000F58   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F5C   0020A0E3           MOV      R2,#+0
   \   00000F60   0110A0E3           MOV      R1,#+1
   \   00000F64   A10E8DE2           ADD      R0,SP,#+2576
   \   00000F68   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F6C   0020A0E3           MOV      R2,#+0
   \   00000F70   0110A0E3           MOV      R1,#+1
   \   00000F74   8B0F8DE2           ADD      R0,SP,#+556
   \   00000F78   800E80E2           ADD      R0,R0,#+2048
   \   00000F7C   ........           _BLF     ??_Tidy,??_Tidy??rA
    256                  LocalString += TabStr4 + KeyWord(C_TCU_PORT_NO) + (AnsiString)TCUPortNo + CrLfStr;
   \   00000F80   F81094E5           LDR      R1,[R4, #+248]
   \   00000F84   B50F8DE2           ADD      R0,SP,#+724
   \   00000F88   800E80E2           ADD      R0,R0,#+2048
   \   00000F8C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000F90   0080A0E1           MOV      R8,R0
   \   00000F94   99104AE2           SUB      R1,R10,#+153
   \   00000F98   AE0F8DE2           ADD      R0,SP,#+696
   \   00000F9C   800E80E2           ADD      R0,R0,#+2048
   \   00000FA0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000FA4   AE2F8DE2           ADD      R2,SP,#+696
   \   00000FA8   802E82E2           ADD      R2,R2,#+2048
   \   00000FAC   0D10A0E1           MOV      R1,SP
   \   00000FB0   A70F8DE2           ADD      R0,SP,#+668
   \   00000FB4   800E80E2           ADD      R0,R0,#+2048
   \   00000FB8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FBC   0820A0E1           MOV      R2,R8
   \   00000FC0   A71F8DE2           ADD      R1,SP,#+668
   \   00000FC4   801E81E2           ADD      R1,R1,#+2048
   \   00000FC8   A80E8DE2           ADD      R0,SP,#+2688
   \   00000FCC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FD0   0620A0E1           MOV      R2,R6
   \   00000FD4   A81E8DE2           ADD      R1,SP,#+2688
   \   00000FD8   990F8DE2           ADD      R0,SP,#+612
   \   00000FDC   800E80E2           ADD      R0,R0,#+2048
   \   00000FE0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FE4   0730A0E1           MOV      R3,R7
   \   00000FE8   0020A0E3           MOV      R2,#+0
   \   00000FEC   991F8DE2           ADD      R1,SP,#+612
   \   00000FF0   801E81E2           ADD      R1,R1,#+2048
   \   00000FF4   0500A0E1           MOV      R0,R5
   \   00000FF8   ........           _BLF     ??append,??append??rA
   \   00000FFC   0020A0E3           MOV      R2,#+0
   \   00001000   0110A0E3           MOV      R1,#+1
   \   00001004   990F8DE2           ADD      R0,SP,#+612
   \   00001008   800E80E2           ADD      R0,R0,#+2048
   \   0000100C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001010   0020A0E3           MOV      R2,#+0
   \   00001014   0110A0E3           MOV      R1,#+1
   \   00001018   A80E8DE2           ADD      R0,SP,#+2688
   \   0000101C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001020   0020A0E3           MOV      R2,#+0
   \   00001024   0110A0E3           MOV      R1,#+1
   \   00001028   B50F8DE2           ADD      R0,SP,#+724
   \   0000102C   800E80E2           ADD      R0,R0,#+2048
   \   00001030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001034   0020A0E3           MOV      R2,#+0
   \   00001038   0110A0E3           MOV      R1,#+1
   \   0000103C   A70F8DE2           ADD      R0,SP,#+668
   \   00001040   800E80E2           ADD      R0,R0,#+2048
   \   00001044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001048   0020A0E3           MOV      R2,#+0
   \   0000104C   0110A0E3           MOV      R1,#+1
   \   00001050   AE0F8DE2           ADD      R0,SP,#+696
   \   00001054   800E80E2           ADD      R0,R0,#+2048
   \   00001058   ........           _BLF     ??_Tidy,??_Tidy??rA
    257                  LocalString += TabStr4 + KeyWord(C_IO_TYPE) + TabStr2 + KeyWord(IOType) + CrLfStr;
   \   0000105C   FC1094E5           LDR      R1,[R4, #+252]
   \   00001060   DF0F8DE2           ADD      R0,SP,#+892
   \   00001064   800E80E2           ADD      R0,R0,#+2048
   \   00001068   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000106C   9D104AE2           SUB      R1,R10,#+157
   \   00001070   B60E8DE2           ADD      R0,SP,#+2912
   \   00001074   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001078   B62E8DE2           ADD      R2,SP,#+2912
   \   0000107C   0D10A0E1           MOV      R1,SP
   \   00001080   D10F8DE2           ADD      R0,SP,#+836
   \   00001084   800E80E2           ADD      R0,R0,#+2048
   \   00001088   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000108C   932F8DE2           ADD      R2,SP,#+588
   \   00001090   D11F8DE2           ADD      R1,SP,#+836
   \   00001094   801E81E2           ADD      R1,R1,#+2048
   \   00001098   CA0F8DE2           ADD      R0,SP,#+808
   \   0000109C   800E80E2           ADD      R0,R0,#+2048
   \   000010A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010A4   DF2F8DE2           ADD      R2,SP,#+892
   \   000010A8   802E82E2           ADD      R2,R2,#+2048
   \   000010AC   CA1F8DE2           ADD      R1,SP,#+808
   \   000010B0   801E81E2           ADD      R1,R1,#+2048
   \   000010B4   C30F8DE2           ADD      R0,SP,#+780
   \   000010B8   800E80E2           ADD      R0,R0,#+2048
   \   000010BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010C0   0620A0E1           MOV      R2,R6
   \   000010C4   C31F8DE2           ADD      R1,SP,#+780
   \   000010C8   801E81E2           ADD      R1,R1,#+2048
   \   000010CC   AF0E8DE2           ADD      R0,SP,#+2800
   \   000010D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010D4   0730A0E1           MOV      R3,R7
   \   000010D8   0020A0E3           MOV      R2,#+0
   \   000010DC   AF1E8DE2           ADD      R1,SP,#+2800
   \   000010E0   0500A0E1           MOV      R0,R5
   \   000010E4   ........           _BLF     ??append,??append??rA
   \   000010E8   0020A0E3           MOV      R2,#+0
   \   000010EC   0110A0E3           MOV      R1,#+1
   \   000010F0   AF0E8DE2           ADD      R0,SP,#+2800
   \   000010F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000010F8   0020A0E3           MOV      R2,#+0
   \   000010FC   0110A0E3           MOV      R1,#+1
   \   00001100   C30F8DE2           ADD      R0,SP,#+780
   \   00001104   800E80E2           ADD      R0,R0,#+2048
   \   00001108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000110C   0020A0E3           MOV      R2,#+0
   \   00001110   0110A0E3           MOV      R1,#+1
   \   00001114   DF0F8DE2           ADD      R0,SP,#+892
   \   00001118   800E80E2           ADD      R0,R0,#+2048
   \   0000111C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001120   0020A0E3           MOV      R2,#+0
   \   00001124   0110A0E3           MOV      R1,#+1
   \   00001128   CA0F8DE2           ADD      R0,SP,#+808
   \   0000112C   800E80E2           ADD      R0,R0,#+2048
   \   00001130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001134   0020A0E3           MOV      R2,#+0
   \   00001138   0110A0E3           MOV      R1,#+1
   \   0000113C   D10F8DE2           ADD      R0,SP,#+836
   \   00001140   800E80E2           ADD      R0,R0,#+2048
   \   00001144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001148   0020A0E3           MOV      R2,#+0
   \   0000114C   0110A0E3           MOV      R1,#+1
   \   00001150   B60E8DE2           ADD      R0,SP,#+2912
   \   00001154   ........           _BLF     ??_Tidy,??_Tidy??rA
    258                  LocalString += TabStr4 + KeyWord(C_IO_ADDRESS) + (AnsiString)IOAddress + CrLfStr;
   \   00001158   001194E5           LDR      R1,[R4, #+256]
   \   0000115C   08008DE2           ADD      R0,SP,#+8
   \   00001160   C00E80E2           ADD      R0,R0,#+3072
   \   00001164   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001168   0080A0E1           MOV      R8,R0
   \   0000116C   9C104AE2           SUB      R1,R10,#+156
   \   00001170   FB0F8DE2           ADD      R0,SP,#+1004
   \   00001174   800E80E2           ADD      R0,R0,#+2048
   \   00001178   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000117C   FB2F8DE2           ADD      R2,SP,#+1004
   \   00001180   802E82E2           ADD      R2,R2,#+2048
   \   00001184   0D10A0E1           MOV      R1,SP
   \   00001188   BD0E8DE2           ADD      R0,SP,#+3024
   \   0000118C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001190   0820A0E1           MOV      R2,R8
   \   00001194   BD1E8DE2           ADD      R1,SP,#+3024
   \   00001198   ED0F8DE2           ADD      R0,SP,#+948
   \   0000119C   800E80E2           ADD      R0,R0,#+2048
   \   000011A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011A4   0620A0E1           MOV      R2,R6
   \   000011A8   ED1F8DE2           ADD      R1,SP,#+948
   \   000011AC   801E81E2           ADD      R1,R1,#+2048
   \   000011B0   E60F8DE2           ADD      R0,SP,#+920
   \   000011B4   800E80E2           ADD      R0,R0,#+2048
   \   000011B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011BC   0730A0E1           MOV      R3,R7
   \   000011C0   0020A0E3           MOV      R2,#+0
   \   000011C4   E61F8DE2           ADD      R1,SP,#+920
   \   000011C8   801E81E2           ADD      R1,R1,#+2048
   \   000011CC   0500A0E1           MOV      R0,R5
   \   000011D0   ........           _BLF     ??append,??append??rA
   \   000011D4   0020A0E3           MOV      R2,#+0
   \   000011D8   0110A0E3           MOV      R1,#+1
   \   000011DC   E60F8DE2           ADD      R0,SP,#+920
   \   000011E0   800E80E2           ADD      R0,R0,#+2048
   \   000011E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011E8   0020A0E3           MOV      R2,#+0
   \   000011EC   0110A0E3           MOV      R1,#+1
   \   000011F0   ED0F8DE2           ADD      R0,SP,#+948
   \   000011F4   800E80E2           ADD      R0,R0,#+2048
   \   000011F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011FC   0020A0E3           MOV      R2,#+0
   \   00001200   0110A0E3           MOV      R1,#+1
   \   00001204   08008DE2           ADD      R0,SP,#+8
   \   00001208   C00E80E2           ADD      R0,R0,#+3072
   \   0000120C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001210   0020A0E3           MOV      R2,#+0
   \   00001214   0110A0E3           MOV      R1,#+1
   \   00001218   BD0E8DE2           ADD      R0,SP,#+3024
   \   0000121C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001220   0020A0E3           MOV      R2,#+0
   \   00001224   0110A0E3           MOV      R1,#+1
   \   00001228   FB0F8DE2           ADD      R0,SP,#+1004
   \   0000122C   800E80E2           ADD      R0,R0,#+2048
   \   00001230   ........           _BLF     ??_Tidy,??_Tidy??rA
    259                  LocalString += TabStr4 + KeyWord(C_IO_CHANNEL) + (AnsiString)IOChannel + CrLfStr;
   \   00001234   041194E5           LDR      R1,[R4, #+260]
   \   00001238   94008DE2           ADD      R0,SP,#+148
   \   0000123C   C00E80E2           ADD      R0,R0,#+3072
   \   00001240   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001244   0080A0E1           MOV      R8,R0
   \   00001248   9B104AE2           SUB      R1,R10,#+155
   \   0000124C   78008DE2           ADD      R0,SP,#+120
   \   00001250   C00E80E2           ADD      R0,R0,#+3072
   \   00001254   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001258   78208DE2           ADD      R2,SP,#+120
   \   0000125C   C02E82E2           ADD      R2,R2,#+3072
   \   00001260   0D10A0E1           MOV      R1,SP
   \   00001264   5C008DE2           ADD      R0,SP,#+92
   \   00001268   C00E80E2           ADD      R0,R0,#+3072
   \   0000126C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001270   0820A0E1           MOV      R2,R8
   \   00001274   5C108DE2           ADD      R1,SP,#+92
   \   00001278   C01E81E2           ADD      R1,R1,#+3072
   \   0000127C   C40E8DE2           ADD      R0,SP,#+3136
   \   00001280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001284   0620A0E1           MOV      R2,R6
   \   00001288   C41E8DE2           ADD      R1,SP,#+3136
   \   0000128C   24008DE2           ADD      R0,SP,#+36
   \   00001290   C00E80E2           ADD      R0,R0,#+3072
   \   00001294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001298   0730A0E1           MOV      R3,R7
   \   0000129C   0020A0E3           MOV      R2,#+0
   \   000012A0   24108DE2           ADD      R1,SP,#+36
   \   000012A4   C01E81E2           ADD      R1,R1,#+3072
   \   000012A8   0500A0E1           MOV      R0,R5
   \   000012AC   ........           _BLF     ??append,??append??rA
   \   000012B0   0020A0E3           MOV      R2,#+0
   \   000012B4   0110A0E3           MOV      R1,#+1
   \   000012B8   24008DE2           ADD      R0,SP,#+36
   \   000012BC   C00E80E2           ADD      R0,R0,#+3072
   \   000012C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012C4   0020A0E3           MOV      R2,#+0
   \   000012C8   0110A0E3           MOV      R1,#+1
   \   000012CC   C40E8DE2           ADD      R0,SP,#+3136
   \   000012D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012D4   0020A0E3           MOV      R2,#+0
   \   000012D8   0110A0E3           MOV      R1,#+1
   \   000012DC   94008DE2           ADD      R0,SP,#+148
   \   000012E0   C00E80E2           ADD      R0,R0,#+3072
   \   000012E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012E8   0020A0E3           MOV      R2,#+0
   \   000012EC   0110A0E3           MOV      R1,#+1
   \   000012F0   5C008DE2           ADD      R0,SP,#+92
   \   000012F4   C00E80E2           ADD      R0,R0,#+3072
   \   000012F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012FC   0020A0E3           MOV      R2,#+0
   \   00001300   0110A0E3           MOV      R1,#+1
   \   00001304   78008DE2           ADD      R0,SP,#+120
   \   00001308   C00E80E2           ADD      R0,R0,#+3072
   \                     ??MakeConfigString_8:
   \   0000130C   ........           _BLF     ??_Tidy,??_Tidy??rA
    260                  break;
    261              }
    262          
    263          //Test on type
    264              if ( (IOType == C_IO_AN_ZB485) && (
    265                                                 (Type != C_AI_WATERINGRESS) ||
    266                                                 (Type != C_AI_WATERINGR_MAIN) ||
    267                                                 (Type != C_AI_WATERINGR_PRE) ||
    268                                                 (Type != C_AI_VOLTAGE)) ) {
   \   00001310   FC0094E5           LDR      R0,[R4, #+252]
   \   00001314   8C104AE2           SUB      R1,R10,#+140
   \   00001318   010050E1           CMP      R0,R1
   \   0000131C   2B00001A           BNE      ??MakeConfigString_12
    269                  LocalString += TabStr4 + KeyWord(C_ADCARD_CH) + (AnsiString)ADCardChannel + CrLfStr;
   \   00001320   081194E5           LDR      R1,[R4, #+264]
   \   00001324   8C008DE2           ADD      R0,SP,#+140
   \   00001328   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000132C   0080A0E1           MOV      R8,R0
   \   00001330   9A104AE2           SUB      R1,R10,#+154
   \   00001334   70008DE2           ADD      R0,SP,#+112
   \   00001338   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000133C   70208DE2           ADD      R2,SP,#+112
   \   00001340   0D10A0E1           MOV      R1,SP
   \   00001344   54008DE2           ADD      R0,SP,#+84
   \   00001348   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000134C   0820A0E1           MOV      R2,R8
   \   00001350   54108DE2           ADD      R1,SP,#+84
   \   00001354   38008DE2           ADD      R0,SP,#+56
   \   00001358   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000135C   0620A0E1           MOV      R2,R6
   \   00001360   38108DE2           ADD      R1,SP,#+56
   \   00001364   1C008DE2           ADD      R0,SP,#+28
   \   00001368   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000136C   0730A0E1           MOV      R3,R7
   \   00001370   0020A0E3           MOV      R2,#+0
   \   00001374   1C108DE2           ADD      R1,SP,#+28
   \   00001378   0500A0E1           MOV      R0,R5
   \   0000137C   ........           _BLF     ??append,??append??rA
   \   00001380   0020A0E3           MOV      R2,#+0
   \   00001384   0110A0E3           MOV      R1,#+1
   \   00001388   1C008DE2           ADD      R0,SP,#+28
   \   0000138C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001390   0020A0E3           MOV      R2,#+0
   \   00001394   0110A0E3           MOV      R1,#+1
   \   00001398   38008DE2           ADD      R0,SP,#+56
   \   0000139C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013A0   0020A0E3           MOV      R2,#+0
   \   000013A4   0110A0E3           MOV      R1,#+1
   \   000013A8   8C008DE2           ADD      R0,SP,#+140
   \   000013AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013B0   0020A0E3           MOV      R2,#+0
   \   000013B4   0110A0E3           MOV      R1,#+1
   \   000013B8   54008DE2           ADD      R0,SP,#+84
   \   000013BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013C0   0020A0E3           MOV      R2,#+0
   \   000013C4   0110A0E3           MOV      R1,#+1
   \   000013C8   70008DE2           ADD      R0,SP,#+112
   \   000013CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    270              }
    271          
    272              LocalString += TabStr3 + KeyWord(C_AI_END_COMMON) + CrLfStr;
   \                     ??MakeConfigString_12:
   \   000013D0   0A104AE2           SUB      R1,R10,#+10
   \   000013D4   850F8DE2           ADD      R0,SP,#+532
   \   000013D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000013DC   852F8DE2           ADD      R2,SP,#+532
   \   000013E0   9A1F8DE2           ADD      R1,SP,#+616
   \   000013E4   7E0F8DE2           ADD      R0,SP,#+504
   \   000013E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000013EC   0620A0E1           MOV      R2,R6
   \   000013F0   7E1F8DE2           ADD      R1,SP,#+504
   \   000013F4   770F8DE2           ADD      R0,SP,#+476
   \   000013F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000013FC   0730A0E1           MOV      R3,R7
   \   00001400   0020A0E3           MOV      R2,#+0
   \   00001404   771F8DE2           ADD      R1,SP,#+476
   \   00001408   0500A0E1           MOV      R0,R5
   \   0000140C   ........           _BLF     ??append,??append??rA
   \   00001410   0020A0E3           MOV      R2,#+0
   \   00001414   0110A0E3           MOV      R1,#+1
   \   00001418   770F8DE2           ADD      R0,SP,#+476
   \   0000141C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001420   0020A0E3           MOV      R2,#+0
   \   00001424   0110A0E3           MOV      R1,#+1
   \   00001428   7E0F8DE2           ADD      R0,SP,#+504
   \   0000142C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001430   0020A0E3           MOV      R2,#+0
   \   00001434   0110A0E3           MOV      R1,#+1
   \   00001438   850F8DE2           ADD      R0,SP,#+532
   \   0000143C   ........           _BLF     ??_Tidy,??_Tidy??rA
    273          
    274              LocalString += PROIOComponent::MakeConfigString();
   \   00001440   0020A0E3           MOV      R2,#+0
   \   00001444   8C1F8DE2           ADD      R1,SP,#+560
   \   00001448   0400A0E1           MOV      R0,R4
   \   0000144C   ........           _BLF     ??MakeConfigString_2,??MakeConfigString??rA
   \   00001450   0730A0E1           MOV      R3,R7
   \   00001454   0020A0E3           MOV      R2,#+0
   \   00001458   8C1F8DE2           ADD      R1,SP,#+560
   \   0000145C   0500A0E1           MOV      R0,R5
   \   00001460   ........           _BLF     ??append,??append??rA
   \   00001464   0020A0E3           MOV      R2,#+0
   \   00001468   0110A0E3           MOV      R1,#+1
   \   0000146C   8C0F8DE2           ADD      R0,SP,#+560
   \   00001470   ........           _BLF     ??_Tidy,??_Tidy??rA
    275              return (LocalString);
   \   00001474   0020A0E3           MOV      R2,#+0
   \   00001478   0110A0E3           MOV      R1,#+1
   \   0000147C   A10F8DE2           ADD      R0,SP,#+644
   \   00001480   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001484   0020A0E3           MOV      R2,#+0
   \   00001488   0110A0E3           MOV      R1,#+1
   \   0000148C   410F8DE2           ADD      R0,SP,#+260
   \   00001490   C00E80E2           ADD      R0,R0,#+3072
   \   00001494   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001498   0020A0E3           MOV      R2,#+0
   \   0000149C   0110A0E3           MOV      R1,#+1
   \   000014A0   E8008DE2           ADD      R0,SP,#+232
   \   000014A4   C00E80E2           ADD      R0,R0,#+3072
   \   000014A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014AC   0020A0E3           MOV      R2,#+0
   \   000014B0   0110A0E3           MOV      R1,#+1
   \   000014B4   0D00A0E1           MOV      R0,SP
   \   000014B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014BC   0020A0E3           MOV      R2,#+0
   \   000014C0   0110A0E3           MOV      R1,#+1
   \   000014C4   9A0F8DE2           ADD      R0,SP,#+616
   \   000014C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014CC   0020A0E3           MOV      R2,#+0
   \   000014D0   0110A0E3           MOV      R1,#+1
   \   000014D4   930F8DE2           ADD      R0,SP,#+588
   \   000014D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014DC   0020A0E3           MOV      R2,#+0
   \   000014E0   0110A0E3           MOV      R1,#+1
   \   000014E4   CC008DE2           ADD      R0,SP,#+204
   \   000014E8   C00E80E2           ADD      R0,R0,#+3072
   \   000014EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014F0   D2DE8DE2           ADD      SP,SP,#+3360
   \   000014F4   ........           B        ?Subroutine47
    276          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine47:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    277          //---------------------------------------------------------------------------
    278          

   \                                 In segment CODE, align 4, keep-with-next
    279          bool AnalogInput::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    280              bool NoError = true;
    281              int ErrorLine = 0;
    282              int Key;
    283              AnsiString PROName = "Analog input";
   \   00000004   ........           LDR      R6,??DataTable9  ;; `?<Constant "Analog input">`
   \   00000008   E4D04DE2           SUB      SP,SP,#+228
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0610A0E1           MOV      R1,R6
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000028   240194E5           LDR      R0,[R4, #+292]
   \   0000002C   01A0A0E3           MOV      R10,#+1
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1500000A           BEQ      ??LoadConfigString_1
    284              if ( PROPtr )   PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000038   601086E2           ADD      R1,R6,#+96
   \   0000003C   20008DE2           ADD      R0,SP,#+32
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   240194E5           LDR      R0,[R4, #+292]
   \   0000004C   442080E2           ADD      R2,R0,#+68
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   ........           LDR      R0,??DataTable11  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   003090E5           LDR      R3,[R0, #+0]
   \   00000064   04108DE2           ADD      R1,SP,#+4
   \   00000068   3C008DE2           ADD      R0,SP,#+60
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0A10A0E1           MOV      R1,R10
   \   00000088   20008DE2           ADD      R0,SP,#+32
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
    285              PROName += ":\n";
   \                     ??LoadConfigString_1:
   \   00000090   E36F8FE2           ADR      R6,??LoadConfigString_2  ;; ":\n"
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           _BLF     strlen,??strlen??rA
   \   0000009C   0020A0E1           MOV      R2,R0
   \   000000A0   0610A0E1           MOV      R1,R6
   \   000000A4   3C008DE2           ADD      R0,SP,#+60
   \   000000A8   ........           _BLF     ??append_1,??append??rA_1
   \   000000AC   00B06AE2           RSB      R11,R10,#+0
    286              do {
    287                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   000000B0   0030A0E3           MOV      R3,#+0
   \   000000B4   0D20A0E1           MOV      R2,SP
   \   000000B8   74108DE2           ADD      R1,SP,#+116
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           _BLF     ??NextWord,??NextWord??rA
    288                  if ( ErrorLine ) {
   \   000000C4   00009DE5           LDR      R0,[SP, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0C00000A           BEQ      ??LoadConfigString_4
    289                      if ( ErrorLine != EOF ) {
   \   000000D0   0B0050E1           CMP      R0,R11
   \   000000D4   DC00000A           BEQ      ??LoadConfigString_5
    290                          GiveConfigWarning(PROName, ErrorLine);
   \   000000D8   3C108DE2           ADD      R1,SP,#+60
   \   000000DC   04008DE2           ADD      R0,SP,#+4
   \   000000E0   ........           _BLF     ??string,??string??rA
   \   000000E4   00109DE5           LDR      R1,[SP, #+0]
   \   000000E8   04008DE2           ADD      R0,SP,#+4
   \   000000EC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_6:
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   D10000EA           B        ??LoadConfigString_5
    291                      }
    292                  } else {
    293                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   00000104   74108DE2           ADD      R1,SP,#+116
   \   00000108   58008DE2           ADD      R0,SP,#+88
   \   0000010C   ........           _BLF     ??string,??string??rA
   \   00000110   58008DE2           ADD      R0,SP,#+88
   \   00000114   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000118   0070A0E1           MOV      R7,R0
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   58008DE2           ADD      R0,SP,#+88
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
    294                      switch ( Key ) {
   \   0000012C   1B10A0E3           MOV      R1,#+27
   \   00000130   501E81E3           ORR      R1,R1,#0x500
   \   00000134   010057E1           CMP      R7,R1
   \   00000138   4200000A           BEQ      ??LoadConfigString_7
   \   0000013C   0510A0E3           MOV      R1,#+5
   \   00000140   801E81E3           ORR      R1,R1,#0x800
   \   00000144   010057E1           CMP      R7,R1
   \   00000148   8300000A           BEQ      ??LoadConfigString_8
   \   0000014C   021081E3           ORR      R1,R1,#0x2
   \   00000150   010057E1           CMP      R7,R1
   \   00000154   8C00000A           BEQ      ??LoadConfigString_9
   \   00000158   011081E2           ADD      R1,R1,#+1
   \   0000015C   010057E1           CMP      R7,R1
   \   00000160   A300000A           BEQ      ??LoadConfigString_10
   \   00000164   011081E3           ORR      R1,R1,#0x1
   \   00000168   010057E1           CMP      R7,R1
   \   0000016C   A600000A           BEQ      ??LoadConfigString_11
   \   00000170   011081E2           ADD      R1,R1,#+1
   \   00000174   010057E1           CMP      R7,R1
   \   00000178   AA00000A           BEQ      ??LoadConfigString_12
   \   0000017C   011081E3           ORR      R1,R1,#0x1
   \   00000180   010057E1           CMP      R7,R1
   \   00000184   7A00000A           BEQ      ??LoadConfigString_13
   \   00000188   8F1081E2           ADD      R1,R1,#+143
   \   0000018C   010057E1           CMP      R7,R1
   \   00000190   AD00000A           BEQ      ??LoadConfigString_5
   \   00000194   8A0E57E3           CMP      R7,#+2208
   \   00000198   3000000A           BEQ      ??LoadConfigString_14
   \   0000019C   071081E2           ADD      R1,R1,#+7
   \   000001A0   010057E1           CMP      R7,R1
   \   000001A4   1D00000A           BEQ      ??LoadConfigString_15
   \   000001A8   011081E2           ADD      R1,R1,#+1
   \   000001AC   010057E1           CMP      R7,R1
   \   000001B0   3A00000A           BEQ      ??LoadConfigString_16
   \   000001B4   011081E3           ORR      R1,R1,#0x1
   \   000001B8   010057E1           CMP      R7,R1
   \   000001BC   5100000A           BEQ      ??LoadConfigString_17
   \   000001C0   011081E2           ADD      R1,R1,#+1
   \   000001C4   010057E1           CMP      R7,R1
   \   000001C8   5500000A           BEQ      ??LoadConfigString_18
   \   000001CC   011081E3           ORR      R1,R1,#0x1
   \   000001D0   010057E1           CMP      R7,R1
   \   000001D4   5900000A           BEQ      ??LoadConfigString_19
    295                      default:
    296                          GiveConfigWarning(PROName, InputKeyWord, ConfigString.LineCount);
   \   000001D8   74108DE2           ADD      R1,SP,#+116
   \   000001DC   90008DE2           ADD      R0,SP,#+144
   \   000001E0   ........           _BLF     ??string,??string??rA
   \   000001E4   3C108DE2           ADD      R1,SP,#+60
   \   000001E8   AC008DE2           ADD      R0,SP,#+172
   \   000001EC   ........           _BLF     ??string,??string??rA
   \   000001F0   1C2095E5           LDR      R2,[R5, #+28]
   \   000001F4   90108DE2           ADD      R1,SP,#+144
   \   000001F8   AC008DE2           ADD      R0,SP,#+172
   \   000001FC   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   90008DE2           ADD      R0,SP,#+144
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   AC008DE2           ADD      R0,SP,#+172
   \   0000021C   B6FFFFEA           B        ??LoadConfigString_6
    297                          break;
    298                      case C_AI_END_COMMON:
    299                          break;
    300                      case C_AI_DISTANCE:
    301                          Distance 		 = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_15:
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0D10A0E1           MOV      R1,SP
   \   00000228   0500A0E1           MOV      R0,R5
   \   0000022C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000230   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000234   2C0184E5           STR      R0,[R4, #+300]
    302                          AdjustedDistance = Distance;
   \   00000238   300184E5           STR      R0,[R4, #+304]
    303                          HasDistance 	 = true;
   \   0000023C   0100A0E3           MOV      R0,#+1
   \   00000240   2101C4E5           STRB     R0,[R4, #+289]
    304                          NoError 		 = !ErrorLine;
   \   00000244   7C0000EA           B        ??LoadConfigString_20
    305                          break;
    306                      case C_PRO_ID_NUMBER:
    307                          {
    308                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_7:
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0D10A0E1           MOV      R1,SP
   \   00000250   0500A0E1           MOV      R0,R5
   \   00000254   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    309                              if ( tmpIDNumber != IDNumber ) {
    310                                  //OS_Delay(1);
    311                              }
    312                              IDNumber = tmpIDNumber;
   \   00000258   9C0084E5           STR      R0,[R4, #+156]
    313                          }
    314                          NoError  = !ErrorLine;
   \   0000025C   760000EA           B        ??LoadConfigString_20
    315                          break;
    316                      case C_AI_SERIALNO:
    317                          SerialNumber = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_14:
   \   00000260   0030A0E3           MOV      R3,#+0
   \   00000264   0D20A0E1           MOV      R2,SP
   \   00000268   C8108DE2           ADD      R1,SP,#+200
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000274   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   003090E5           LDR      R3,[R0, #+0]
   \   00000280   C8108DE2           ADD      R1,SP,#+200
   \   00000284   D80084E2           ADD      R0,R4,#+216
   \   00000288   ........           _BLF     ??assign,??assign??rA
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   C8008DE2           ADD      R0,SP,#+200
   \   00000298   ........           _BLF     ??_Tidy,??_Tidy??rA
    318                          NoError = !ErrorLine;
   \   0000029C   660000EA           B        ??LoadConfigString_20
    319                          break;
    320                      case C_AI_GAIN:
    321                          {
    322                              float tmpGain = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_16:
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0D10A0E1           MOV      R1,SP
   \   000002A8   0500A0E1           MOV      R0,R5
   \   000002AC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002B0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002B4   00A0A0E1           MOV      R10,R0
    323                              if ( tmpGain > MIN_GAIN && tmpGain > MAX_GAIN ) {
   \   000002B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002BC   0080A0E1           MOV      R8,R0
   \   000002C0   0190A0E1           MOV      R9,R1
   \   000002C4   0120A0E3           MOV      R2,#+1
   \   000002C8   C035A0E3           MOV      R3,#+805306368
   \   000002CC   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000002D0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   0700000A           BEQ      ??LoadConfigString_21
   \   000002DC   0800A0E1           MOV      R0,R8
   \   000002E0   0910A0E1           MOV      R1,R9
   \   000002E4   0120A0E3           MOV      R2,#+1
   \   000002E8   F035A0E3           MOV      R3,#+1006632960
   \   000002EC   FE3783E3           ORR      R3,R3,#0x3F80000
   \   000002F0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   0000001A           BNE      ??LoadConfigString_22
    324                                  Gain = tmpGain;
    325                              } else {
    326                                  Gain = 1.000;
   \                     ??LoadConfigString_21:
   \   000002FC   FEA5A0E3           MOV      R10,#+1065353216
   \                     ??LoadConfigString_22:
   \   00000300   3CA184E5           STR      R10,[R4, #+316]
    327                              }
    328                              NoError = !ErrorLine;
   \   00000304   4C0000EA           B        ??LoadConfigString_20
    329                          }
    330                          break;
    331                      case C_AI_OFFSET:
    332                          Offset = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_17:
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0D10A0E1           MOV      R1,SP
   \   00000310   0500A0E1           MOV      R0,R5
   \   00000314   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000318   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000031C   400184E5           STR      R0,[R4, #+320]
    333                          NoError = !ErrorLine;
   \   00000320   450000EA           B        ??LoadConfigString_20
    334                          break;
    335                      case C_AI_MIN_RANGE:
    336                          MinRange = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_18:
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0D10A0E1           MOV      R1,SP
   \   0000032C   0500A0E1           MOV      R0,R5
   \   00000330   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000334   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000338   5C0184E5           STR      R0,[R4, #+348]
    337                          NoError = !ErrorLine;
   \   0000033C   3E0000EA           B        ??LoadConfigString_20
    338                          break;
    339                      case C_AI_MAX_RANGE:
    340                          MaxRange = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_19:
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   0D10A0E1           MOV      R1,SP
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000350   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000354   600184E5           STR      R0,[R4, #+352]
    341                          NoError = !ErrorLine;
   \   00000358   370000EA           B        ??LoadConfigString_20
    342                          break;
    343                      case C_TCU_ADDRESS:
    344                          TCUAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_8:
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0D10A0E1           MOV      R1,SP
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000036C   F40084E5           STR      R0,[R4, #+244]
    345                          NoError = !ErrorLine;
   \   00000370   310000EA           B        ??LoadConfigString_20
    346                          break;
    347                      case C_TCU_PORT_NO:
    348                          TCUPortNo = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_13:
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0D10A0E1           MOV      R1,SP
   \   0000037C   0500A0E1           MOV      R0,R5
   \   00000380   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000384   F80084E5           STR      R0,[R4, #+248]
    349                          NoError = !ErrorLine;
   \   00000388   2B0000EA           B        ??LoadConfigString_20
    350                          break;
    351                      case C_IO_TYPE:
    352                          {
    353                              AnsiString temp = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_9:
   \   0000038C   0030A0E3           MOV      R3,#+0
   \   00000390   0D20A0E1           MOV      R2,SP
   \   00000394   20108DE2           ADD      R1,SP,#+32
   \   00000398   0500A0E1           MOV      R0,R5
   \   0000039C   ........           _BLF     ??NextWord,??NextWord??rA
    354                              if ( !ErrorLine ) {
   \   000003A0   00009DE5           LDR      R0,[SP, #+0]
   \   000003A4   000050E3           CMP      R0,#+0
   \   000003A8   0900001A           BNE      ??LoadConfigString_23
    355                                  IOType = FindConfigKey(temp);
   \   000003AC   20108DE2           ADD      R1,SP,#+32
   \   000003B0   04008DE2           ADD      R0,SP,#+4
   \   000003B4   ........           _BLF     ??string,??string??rA
   \   000003B8   04008DE2           ADD      R0,SP,#+4
   \   000003BC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000003C0   FC0084E5           STR      R0,[R4, #+252]
   \   000003C4   0020A0E3           MOV      R2,#+0
   \   000003C8   0110A0E3           MOV      R1,#+1
   \   000003CC   04008DE2           ADD      R0,SP,#+4
   \   000003D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    356                              }
    357                              NoError = !ErrorLine;
   \                     ??LoadConfigString_23:
   \   000003D4   00009DE5           LDR      R0,[SP, #+0]
    358                          }
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   000050E3           CMP      R0,#+0
   \   000003E0   01A0A003           MOVEQ    R10,#+1
   \   000003E4   00A0A013           MOVNE    R10,#+0
   \   000003E8   0110A0E3           MOV      R1,#+1
   \   000003EC   20008DE2           ADD      R0,SP,#+32
   \   000003F0   41FFFFEA           B        ??LoadConfigString_6
    359                          break;
    360                      case C_IO_ADDRESS:
    361                          IOAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0D10A0E1           MOV      R1,SP
   \   000003FC   0500A0E1           MOV      R0,R5
   \   00000400   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000404   000184E5           STR      R0,[R4, #+256]
    362                          NoError = !ErrorLine;
   \   00000408   0B0000EA           B        ??LoadConfigString_20
    363                          break;
    364                      case C_IO_CHANNEL:
    365                          IOChannel = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_11:
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0D10A0E1           MOV      R1,SP
   \   00000414   0500A0E1           MOV      R0,R5
   \   00000418   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000041C   040184E5           STR      R0,[R4, #+260]
    366                          NoError = !ErrorLine;
   \   00000420   050000EA           B        ??LoadConfigString_20
   \                     ??LoadConfigString_2:
   \   00000424   3A0A0000           DC8      ":\n",+0
    367                          break;
    368                      case C_ADCARD_CH:
    369                          ADCardChannel = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0D10A0E1           MOV      R1,SP
   \   00000430   0500A0E1           MOV      R0,R5
   \   00000434   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000438   080184E5           STR      R0,[R4, #+264]
    370                          NoError = !ErrorLine;
   \                     ??LoadConfigString_20:
   \   0000043C   00009DE5           LDR      R0,[SP, #+0]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   01A0A003           MOVEQ    R10,#+1
   \   00000448   00A0A013           MOVNE    R10,#+0
    371                          break;
    372                      }
    373                  }                                                                                                                                           //remove this later
    374              }while ( NoError && (ErrorLine != EOF) && (Key != C_AI_END_COMMON) && (Key != C_DI_END_COMMON) );
   \                     ??LoadConfigString_5:
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0110A0E3           MOV      R1,#+1
   \   00000454   74008DE2           ADD      R0,SP,#+116
   \   00000458   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000045C   00005AE3           CMP      R10,#+0
   \   00000460   00009D15           LDRNE    R0,[SP, #+0]
   \   00000464   0B005011           CMPNE    R0,R11
   \   00000468   9A00A013           MOVNE    R0,#+154
   \   0000046C   800E8013           ORRNE    R0,R0,#0x800
   \   00000470   00005711           CMPNE    R7,R0
   \   00000474   640F8012           ADDNE    R0,R0,#+400
   \   00000478   00005711           CMPNE    R7,R0
   \   0000047C   0BFFFF1A           BNE      ??LoadConfigString_3
    375              return (NoError);
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   0110A0E3           MOV      R1,#+1
   \   00000488   3C008DE2           ADD      R0,SP,#+60
   \   0000048C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000490   0A00A0E1           MOV      R0,R10
   \   00000494   E4D08DE2           ADD      SP,SP,#+228
   \   00000498                      REQUIRE ?Subroutine47
   \   00000498                      ;; // Fall through to label ?Subroutine47
    376          }
    377          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    378          void AnalogInput::SetLocationKeyWord(int KWd) {
    379              LocationKWord = KWd;
   \                     ??SetLocationKeyWord:
   \   00000000   181180E5           STR      R1,[R0, #+280]
    380          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    381          
    382          ///////////////////////////////////////////////////////////////
    383          //
    384          // Routines for Saving of Settings
    385          //
    386          ///////////////////////////////////////////////////////////////
    387          

   \                                 In segment CODE, align 4, keep-with-next
    388          AnsiString AnalogInput::SaveAISettings(int ExtraTabs) {
   \                     ??SaveAISettings:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   F5DF4DE2           SUB      SP,SP,#+980
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    389              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
   \   00000014   012086E2           ADD      R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    390              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
   \   00000024   022086E2           ADD      R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   54008DE2           ADD      R0,SP,#+84
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    391              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
   \   00000034   032086E2           ADD      R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   D90F8DE2           ADD      R0,SP,#+868
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    392              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
   \   00000044   042086E2           ADD      R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   E00F8DE2           ADD      R0,SP,#+896
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    393              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
   \   00000054   052086E2           ADD      R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   E70F8DE2           ADD      R0,SP,#+924
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
    394              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
   \   00000064   062086E2           ADD      R2,R6,#+6
   \   00000068   0910A0E3           MOV      R1,#+9
    395          
    396              AnsiString LocalString;
    397              AnsiString IdNumStr;
    398              IdNumStr.cat_sprintf("0x%0x", IDNumber);
    399              LocalString += TabStr1 + KeyWord(Type) + IdNumStr + CrLfStr;
   \   0000006C   ........           LDR      R6,??DataTable6  ;; CrLfStr
   \   00000070   EE0F8DE2           ADD      R0,SP,#+952
   \   00000074   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000080   B60F8DE2           ADD      R0,SP,#+728
   \   00000084   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000088   9C3094E5           LDR      R3,[R4, #+156]
   \   0000008C   FC249FE5           LDR      R2,??SaveAISettings_1  ;; `?<Constant "None">` + 8
   \   00000090   CB1F8DE2           ADD      R1,SP,#+812
   \   00000094   B60F8DE2           ADD      R0,SP,#+728
   \   00000098   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   CB0F8DE2           ADD      R0,SP,#+812
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   A01094E5           LDR      R1,[R4, #+160]
   \   000000B0   C4008DE2           ADD      R0,SP,#+196
   \   000000B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B8   C4208DE2           ADD      R2,SP,#+196
   \   000000BC   AF1F8DE2           ADD      R1,SP,#+700
   \   000000C0   A8008DE2           ADD      R0,SP,#+168
   \   000000C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C8   B62F8DE2           ADD      R2,SP,#+728
   \   000000CC   A8108DE2           ADD      R1,SP,#+168
   \   000000D0   8C008DE2           ADD      R0,SP,#+140
   \   000000D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D8   0620A0E1           MOV      R2,R6
   \   000000DC   8C108DE2           ADD      R1,SP,#+140
   \   000000E0   70008DE2           ADD      R0,SP,#+112
   \   000000E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E8   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   007090E5           LDR      R7,[R0, #+0]
   \   000000F4   70108DE2           ADD      R1,SP,#+112
   \   000000F8   0730A0E1           MOV      R3,R7
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   70008DE2           ADD      R0,SP,#+112
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   8C008DE2           ADD      R0,SP,#+140
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   A8008DE2           ADD      R0,SP,#+168
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   C4008DE2           ADD      R0,SP,#+196
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
    400              //if ( SerialNumber != "" ) LocalString +=TabStr2+KeyWord(C_AI_SERIALNO)+SerialNumber+CrLfStr;
    401              if ( Enable ) {
   \   00000144   3401D4E5           LDRB     R0,[R4, #+308]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   1B00000A           BEQ      ??SaveAISettings_2
    402                  LocalString += TabStr2 + KeyWord(C_ENABLE) + CrLfStr;
   \   00000150   6410A0E3           MOV      R1,#+100
   \   00000154   0D00A0E1           MOV      R0,SP
   \   00000158   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000015C   0D20A0E1           MOV      R2,SP
   \   00000160   54108DE2           ADD      R1,SP,#+84
   \   00000164   1C008DE2           ADD      R0,SP,#+28
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   0620A0E1           MOV      R2,R6
   \   00000170   1C108DE2           ADD      R1,SP,#+28
   \   00000174   38008DE2           ADD      R0,SP,#+56
   \   00000178   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000017C   0730A0E1           MOV      R3,R7
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   38108DE2           ADD      R1,SP,#+56
   \   00000188   0500A0E1           MOV      R0,R5
   \   0000018C   ........           _BLF     ??append,??append??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   38008DE2           ADD      R0,SP,#+56
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   1C008DE2           ADD      R0,SP,#+28
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   0D00A0E1           MOV      R0,SP
   \   000001BC   1A0000EA           B        ??SaveAISettings_3
    403              } else {
    404                  LocalString += TabStr2 + KeyWord(C_DISABLE) + CrLfStr;
   \                     ??SaveAISettings_2:
   \   000001C0   6510A0E3           MOV      R1,#+101
   \   000001C4   38008DE2           ADD      R0,SP,#+56
   \   000001C8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001CC   38208DE2           ADD      R2,SP,#+56
   \   000001D0   54108DE2           ADD      R1,SP,#+84
   \   000001D4   1C008DE2           ADD      R0,SP,#+28
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   1C108DE2           ADD      R1,SP,#+28
   \   000001E4   0D00A0E1           MOV      R0,SP
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0730A0E1           MOV      R3,R7
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0D10A0E1           MOV      R1,SP
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   1C008DE2           ADD      R0,SP,#+28
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   38008DE2           ADD      R0,SP,#+56
   \                     ??SaveAISettings_3:
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
    405              }
    406              AnsiString GainStr     = FloatToAnsiString(Gain,  8, 5);
   \   00000230   3C1194E5           LDR      R1,[R4, #+316]
   \   00000234   0530A0E3           MOV      R3,#+5
   \   00000238   0820A0E3           MOV      R2,#+8
   \   0000023C   BD0F8DE2           ADD      R0,SP,#+756
   \   00000240   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
    407              AnsiString OffseTabStr = FloatToAnsiString(Offset,  8, 3);
   \   00000244   401194E5           LDR      R1,[R4, #+320]
   \   00000248   0330A0E3           MOV      R3,#+3
   \   0000024C   0820A0E3           MOV      R2,#+8
   \   00000250   C40F8DE2           ADD      R0,SP,#+784
   \   00000254   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
    408          
    409              LocalString += TabStr2 + KeyWord(C_AI_GAIN) + TabStr2 + GainStr + CrLfStr;
   \   00000258   A210A0E3           MOV      R1,#+162
   \   0000025C   801E81E3           ORR      R1,R1,#0x800
   \   00000260   540F8DE2           ADD      R0,SP,#+336
   \   00000264   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000268   542F8DE2           ADD      R2,SP,#+336
   \   0000026C   54108DE2           ADD      R1,SP,#+84
   \   00000270   4D0F8DE2           ADD      R0,SP,#+308
   \   00000274   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000278   54208DE2           ADD      R2,SP,#+84
   \   0000027C   4D1F8DE2           ADD      R1,SP,#+308
   \   00000280   460F8DE2           ADD      R0,SP,#+280
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   BD2F8DE2           ADD      R2,SP,#+756
   \   0000028C   461F8DE2           ADD      R1,SP,#+280
   \   00000290   FC008DE2           ADD      R0,SP,#+252
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   0620A0E1           MOV      R2,R6
   \   0000029C   FC108DE2           ADD      R1,SP,#+252
   \   000002A0   E0008DE2           ADD      R0,SP,#+224
   \   000002A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A8   0730A0E1           MOV      R3,R7
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   E0108DE2           ADD      R1,SP,#+224
   \   000002B4   0500A0E1           MOV      R0,R5
   \   000002B8   ........           _BLF     ??append,??append??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   E0008DE2           ADD      R0,SP,#+224
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   FC008DE2           ADD      R0,SP,#+252
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   460F8DE2           ADD      R0,SP,#+280
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   4D0F8DE2           ADD      R0,SP,#+308
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   540F8DE2           ADD      R0,SP,#+336
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
    410              LocalString += TabStr2 + KeyWord(C_AI_OFFSET) + TabStr2 + OffseTabStr + CrLfStr;
   \   0000030C   A310A0E3           MOV      R1,#+163
   \   00000310   801E81E3           ORR      R1,R1,#0x800
   \   00000314   770F8DE2           ADD      R0,SP,#+476
   \   00000318   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000031C   772F8DE2           ADD      R2,SP,#+476
   \   00000320   54108DE2           ADD      R1,SP,#+84
   \   00000324   700F8DE2           ADD      R0,SP,#+448
   \   00000328   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000032C   54208DE2           ADD      R2,SP,#+84
   \   00000330   701F8DE2           ADD      R1,SP,#+448
   \   00000334   690F8DE2           ADD      R0,SP,#+420
   \   00000338   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000033C   C42F8DE2           ADD      R2,SP,#+784
   \   00000340   691F8DE2           ADD      R1,SP,#+420
   \   00000344   620F8DE2           ADD      R0,SP,#+392
   \   00000348   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000034C   0620A0E1           MOV      R2,R6
   \   00000350   621F8DE2           ADD      R1,SP,#+392
   \   00000354   5B0F8DE2           ADD      R0,SP,#+364
   \   00000358   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000035C   0730A0E1           MOV      R3,R7
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   5B1F8DE2           ADD      R1,SP,#+364
   \   00000368   0500A0E1           MOV      R0,R5
   \   0000036C   ........           _BLF     ??append,??append??rA
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   5B0F8DE2           ADD      R0,SP,#+364
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   0110A0E3           MOV      R1,#+1
   \   00000388   620F8DE2           ADD      R0,SP,#+392
   \   0000038C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   690F8DE2           ADD      R0,SP,#+420
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   700F8DE2           ADD      R0,SP,#+448
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   770F8DE2           ADD      R0,SP,#+476
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    411              LocalString += TabStr2 + KeyWord(ModifiedBy) + (AnsiString)((int)TimeModified) + CrLfStr;
   \   000003C0   501194E5           LDR      R1,[R4, #+336]
   \   000003C4   D20F8DE2           ADD      R0,SP,#+840
   \   000003C8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000003CC   581194E5           LDR      R1,[R4, #+344]
   \   000003D0   0080A0E1           MOV      R8,R0
   \   000003D4   930F8DE2           ADD      R0,SP,#+588
   \   000003D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003DC   932F8DE2           ADD      R2,SP,#+588
   \   000003E0   54108DE2           ADD      R1,SP,#+84
   \   000003E4   8C0F8DE2           ADD      R0,SP,#+560
   \   000003E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003EC   0820A0E1           MOV      R2,R8
   \   000003F0   8C1F8DE2           ADD      R1,SP,#+560
   \   000003F4   850F8DE2           ADD      R0,SP,#+532
   \   000003F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003FC   0620A0E1           MOV      R2,R6
   \   00000400   851F8DE2           ADD      R1,SP,#+532
   \   00000404   7E0F8DE2           ADD      R0,SP,#+504
   \   00000408   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000040C   0730A0E1           MOV      R3,R7
   \   00000410   0020A0E3           MOV      R2,#+0
   \   00000414   7E1F8DE2           ADD      R1,SP,#+504
   \   00000418   0500A0E1           MOV      R0,R5
   \   0000041C   ........           _BLF     ??append,??append??rA
   \   00000420   0020A0E3           MOV      R2,#+0
   \   00000424   0110A0E3           MOV      R1,#+1
   \   00000428   7E0F8DE2           ADD      R0,SP,#+504
   \   0000042C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000430   0020A0E3           MOV      R2,#+0
   \   00000434   0110A0E3           MOV      R1,#+1
   \   00000438   850F8DE2           ADD      R0,SP,#+532
   \   0000043C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   0110A0E3           MOV      R1,#+1
   \   00000448   D20F8DE2           ADD      R0,SP,#+840
   \   0000044C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000450   0020A0E3           MOV      R2,#+0
   \   00000454   0110A0E3           MOV      R1,#+1
   \   00000458   8C0F8DE2           ADD      R0,SP,#+560
   \   0000045C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   0110A0E3           MOV      R1,#+1
   \   00000468   930F8DE2           ADD      R0,SP,#+588
   \   0000046C   ........           _BLF     ??_Tidy,??_Tidy??rA
    412              LocalString += TabStr1 + KeyWord(C_AI_END) + CrLfStr;
   \   00000470   9810A0E3           MOV      R1,#+152
   \   00000474   801E81E3           ORR      R1,R1,#0x800
   \   00000478   A80F8DE2           ADD      R0,SP,#+672
   \   0000047C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000480   A82F8DE2           ADD      R2,SP,#+672
   \   00000484   AF1F8DE2           ADD      R1,SP,#+700
   \   00000488   A10F8DE2           ADD      R0,SP,#+644
   \   0000048C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000490   0620A0E1           MOV      R2,R6
   \   00000494   A11F8DE2           ADD      R1,SP,#+644
   \   00000498   9A0F8DE2           ADD      R0,SP,#+616
   \   0000049C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A0   0730A0E1           MOV      R3,R7
   \   000004A4   0020A0E3           MOV      R2,#+0
   \   000004A8   9A1F8DE2           ADD      R1,SP,#+616
   \   000004AC   0500A0E1           MOV      R0,R5
   \   000004B0   ........           _BLF     ??append,??append??rA
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   0110A0E3           MOV      R1,#+1
   \   000004BC   9A0F8DE2           ADD      R0,SP,#+616
   \   000004C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C4   0020A0E3           MOV      R2,#+0
   \   000004C8   0110A0E3           MOV      R1,#+1
   \   000004CC   A10F8DE2           ADD      R0,SP,#+644
   \   000004D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D4   0020A0E3           MOV      R2,#+0
   \   000004D8   0110A0E3           MOV      R1,#+1
   \   000004DC   A80F8DE2           ADD      R0,SP,#+672
   \   000004E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    413              LocalString += CrLfStr;
   \   000004E4   0730A0E1           MOV      R3,R7
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0610A0E1           MOV      R1,R6
   \   000004F0   0500A0E1           MOV      R0,R5
   \   000004F4   ........           _BLF     ??append,??append??rA
    414              return (LocalString);
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   C40F8DE2           ADD      R0,SP,#+784
   \   00000504   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0110A0E3           MOV      R1,#+1
   \   00000510   BD0F8DE2           ADD      R0,SP,#+756
   \   00000514   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   0110A0E3           MOV      R1,#+1
   \   00000520   B60F8DE2           ADD      R0,SP,#+728
   \   00000524   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000528   0020A0E3           MOV      R2,#+0
   \   0000052C   0110A0E3           MOV      R1,#+1
   \   00000530   EE0F8DE2           ADD      R0,SP,#+952
   \   00000534   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000538   0020A0E3           MOV      R2,#+0
   \   0000053C   0110A0E3           MOV      R1,#+1
   \   00000540   E70F8DE2           ADD      R0,SP,#+924
   \   00000544   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000548   0020A0E3           MOV      R2,#+0
   \   0000054C   0110A0E3           MOV      R1,#+1
   \   00000550   E00F8DE2           ADD      R0,SP,#+896
   \   00000554   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000558   0020A0E3           MOV      R2,#+0
   \   0000055C   0110A0E3           MOV      R1,#+1
   \   00000560   D90F8DE2           ADD      R0,SP,#+868
   \   00000564   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000568   0020A0E3           MOV      R2,#+0
   \   0000056C   0110A0E3           MOV      R1,#+1
   \   00000570   54008DE2           ADD      R0,SP,#+84
   \   00000574   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000578   0020A0E3           MOV      R2,#+0
   \   0000057C   0110A0E3           MOV      R1,#+1
   \   00000580   AF0F8DE2           ADD      R0,SP,#+700
   \   00000584   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000588   F5DF8DE2           ADD      SP,SP,#+980
   \   0000058C   ........           B        ?Subroutine48
   \                     ??SaveAISettings_1:
   \   00000590   ........           DC32     `?<Constant "None">` + 8
    415          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine48:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    416          

   \                                 In segment CODE, align 4, keep-with-next
    417          bool AnalogInput::RestoreAISettings(TSNConfigString *SettingsString) {
   \                     ??RestoreAISettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    418              bool NoError = true;
    419              int ErrorLine = 0;
    420              int Key;
    421              AnsiString PROName = "Analog input";
   \   00000004   ........           LDR      R7,??DataTable9  ;; `?<Constant "Analog input">`
   \   00000008   78DF4DE2           SUB      SP,SP,#+480
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0710A0E1           MOV      R1,R7
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000028   240194E5           LDR      R0,[R4, #+292]
   \   0000002C   01A0A0E3           MOV      R10,#+1
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1500000A           BEQ      ??RestoreAISettings_1
    422              if ( PROPtr )   PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000038   601087E2           ADD      R1,R7,#+96
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   240194E5           LDR      R0,[R4, #+292]
   \   0000004C   442080E2           ADD      R2,R0,#+68
   \   00000050   20008DE2           ADD      R0,SP,#+32
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   ........           LDR      R0,??DataTable11  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   003090E5           LDR      R3,[R0, #+0]
   \   00000064   20108DE2           ADD      R1,SP,#+32
   \   00000068   3C008DE2           ADD      R0,SP,#+60
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   20008DE2           ADD      R0,SP,#+32
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0A10A0E1           MOV      R1,R10
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
    423              PROName += ":\n";
   \                     ??RestoreAISettings_1:
   \   00000090   A4B39FE5           LDR      R11,??RestoreAISettings_2  ;; NewLineStr
   \   00000094   ........           ADR      R8,??DataTable8  ;; ":\n"
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   ........           _BLF     strlen,??strlen??rA
   \   000000A0   0020A0E1           MOV      R2,R0
   \   000000A4   0810A0E1           MOV      R1,R8
   \   000000A8   3C008DE2           ADD      R0,SP,#+60
   \   000000AC   ........           _BLF     ??append_1,??append??rA_1
   \   000000B0   00806AE2           RSB      R8,R10,#+0
    424              do {
    425                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreAISettings_3:
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0D20A0E1           MOV      R2,SP
   \   000000BC   90108DE2           ADD      R1,SP,#+144
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??NextWord,??NextWord??rA
    426                  if ( ErrorLine ) {
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   3100000A           BEQ      ??RestoreAISettings_4
    427                      if ( ErrorLine != EOF ) {
   \   000000D4   080050E1           CMP      R0,R8
   \   000000D8   C500000A           BEQ      ??RestoreAISettings_5
    428                          RestoreSettingsWarning(PROName + (AnsiString)"Unknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   000000DC   0010A0E1           MOV      R1,R0
   \   000000E0   C8008DE2           ADD      R0,SP,#+200
   \   000000E4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000E8   0090A0E1           MOV      R9,R0
   \   000000EC   401087E2           ADD      R1,R7,#+64
   \   000000F0   AC008DE2           ADD      R0,SP,#+172
   \   000000F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000F8   0020A0E1           MOV      R2,R0
   \   000000FC   3C108DE2           ADD      R1,SP,#+60
   \   00000100   74008DE2           ADD      R0,SP,#+116
   \   00000104   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000108   0920A0E1           MOV      R2,R9
   \   0000010C   74108DE2           ADD      R1,SP,#+116
   \   00000110   58008DE2           ADD      R0,SP,#+88
   \   00000114   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000118   0B20A0E1           MOV      R2,R11
   \   0000011C   58108DE2           ADD      R1,SP,#+88
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000128   04108DE2           ADD      R1,SP,#+4
   \   0000012C   20008DE2           ADD      R0,SP,#+32
   \   00000130   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000134   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   20008DE2           ADD      R0,SP,#+32
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   58008DE2           ADD      R0,SP,#+88
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   C8008DE2           ADD      R0,SP,#+200
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   74008DE2           ADD      R0,SP,#+116
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   AC008DE2           ADD      R0,SP,#+172
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   950000EA           B        ??RestoreAISettings_5
    429                      }
    430                  } else {
    431                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreAISettings_4:
   \   0000019C   90108DE2           ADD      R1,SP,#+144
   \   000001A0   04008DE2           ADD      R0,SP,#+4
   \   000001A4   ........           _BLF     ??string,??string??rA
   \   000001A8   04008DE2           ADD      R0,SP,#+4
   \   000001AC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000001B0   0060A0E1           MOV      R6,R0
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   04008DE2           ADD      R0,SP,#+4
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    432                      switch ( Key ) {
   \   000001C4   640056E3           CMP      R6,#+100
   \   000001C8   7900000A           BEQ      ??RestoreAISettings_6
   \   000001CC   650056E3           CMP      R6,#+101
   \   000001D0   7A00000A           BEQ      ??RestoreAISettings_7
   \   000001D4   9810A0E3           MOV      R1,#+152
   \   000001D8   801E81E3           ORR      R1,R1,#0x800
   \   000001DC   010056E1           CMP      R6,R1
   \   000001E0   8300000A           BEQ      ??RestoreAISettings_5
   \   000001E4   8A0E56E3           CMP      R6,#+2208
   \   000001E8   4C00000A           BEQ      ??RestoreAISettings_8
   \   000001EC   0A1081E2           ADD      R1,R1,#+10
   \   000001F0   010056E1           CMP      R6,R1
   \   000001F4   5D00000A           BEQ      ??RestoreAISettings_9
   \   000001F8   011081E3           ORR      R1,R1,#0x1
   \   000001FC   010056E1           CMP      R6,R1
   \   00000200   6400000A           BEQ      ??RestoreAISettings_10
   \   00000204   281081E2           ADD      R1,R1,#+40
   \   00000208   010056E1           CMP      R6,R1
   \   0000020C   01108112           ADDNE    R1,R1,#+1
   \   00000210   01005611           CMPNE    R6,R1
   \   00000214   01108113           ORRNE    R1,R1,#0x1
   \   00000218   01005611           CMPNE    R6,R1
   \   0000021C   6900000A           BEQ      ??RestoreAISettings_11
    433                      default:
    434                          RestoreSettingsWarning(PROName + (AnsiString)"The keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   00000220   1C1095E5           LDR      R1,[R5, #+28]
   \   00000224   6A0F8DE2           ADD      R0,SP,#+424
   \   00000228   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000022C   00A0A0E1           MOV      R10,R0
   \   00000230   301087E2           ADD      R1,R7,#+48
   \   00000234   630F8DE2           ADD      R0,SP,#+396
   \   00000238   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000023C   0020A0E1           MOV      R2,R0
   \   00000240   3C108DE2           ADD      R1,SP,#+60
   \   00000244   5C0F8DE2           ADD      R0,SP,#+368
   \   00000248   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000024C   90208DE2           ADD      R2,SP,#+144
   \   00000250   5C1F8DE2           ADD      R1,SP,#+368
   \   00000254   550F8DE2           ADD      R0,SP,#+340
   \   00000258   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000025C   102087E2           ADD      R2,R7,#+16
   \   00000260   551F8DE2           ADD      R1,SP,#+340
   \   00000264   4E0F8DE2           ADD      R0,SP,#+312
   \   00000268   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000026C   0A20A0E1           MOV      R2,R10
   \   00000270   4E1F8DE2           ADD      R1,SP,#+312
   \   00000274   470F8DE2           ADD      R0,SP,#+284
   \   00000278   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000027C   0B20A0E1           MOV      R2,R11
   \   00000280   471F8DE2           ADD      R1,SP,#+284
   \   00000284   400F8DE2           ADD      R0,SP,#+256
   \   00000288   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000028C   401F8DE2           ADD      R1,SP,#+256
   \   00000290   E4008DE2           ADD      R0,SP,#+228
   \   00000294   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000298   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   E4008DE2           ADD      R0,SP,#+228
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   0110A0E3           MOV      R1,#+1
   \   000002B4   400F8DE2           ADD      R0,SP,#+256
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   470F8DE2           ADD      R0,SP,#+284
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   6A0F8DE2           ADD      R0,SP,#+424
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   4E0F8DE2           ADD      R0,SP,#+312
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   550F8DE2           ADD      R0,SP,#+340
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   5C0F8DE2           ADD      R0,SP,#+368
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   630F8DE2           ADD      R0,SP,#+396
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
    435                          NoError = false;
   \   0000031C   330000EA           B        ??RestoreAISettings_12
    436                          break;
    437                      case C_AI_SERIALNO:
    438                          SerialNumber = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreAISettings_8:
   \   00000320   0030A0E3           MOV      R3,#+0
   \   00000324   0D20A0E1           MOV      R2,SP
   \   00000328   711F8DE2           ADD      R1,SP,#+452
   \   0000032C   0500A0E1           MOV      R0,R5
   \   00000330   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000334   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   003090E5           LDR      R3,[R0, #+0]
   \   00000340   711F8DE2           ADD      R1,SP,#+452
   \   00000344   D80084E2           ADD      R0,R4,#+216
   \   00000348   ........           _BLF     ??assign,??assign??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   710F8DE2           ADD      R0,SP,#+452
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
    439                          NoError = !ErrorLine;
   \   0000035C   00009DE5           LDR      R0,[SP, #+0]
   \   00000360   000050E3           CMP      R0,#+0
   \   00000364   2100001A           BNE      ??RestoreAISettings_12
   \                     ??RestoreAISettings_13:
   \   00000368   01A0A0E3           MOV      R10,#+1
   \   0000036C   200000EA           B        ??RestoreAISettings_5
    440                          break;
    441                      case C_AI_GAIN:
    442                          Gain = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreAISettings_9:
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0D10A0E1           MOV      R1,SP
   \   00000378   0500A0E1           MOV      R0,R5
   \   0000037C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000380   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000384   3C0184E5           STR      R0,[R4, #+316]
    443                          NoError = !ErrorLine;
   \                     ??RestoreAISettings_14:
   \   00000388   00009DE5           LDR      R0,[SP, #+0]
   \   0000038C   000050E3           CMP      R0,#+0
   \   00000390   1600001A           BNE      ??RestoreAISettings_12
   \   00000394   F3FFFFEA           B        ??RestoreAISettings_13
    444                          break;
    445                      case C_AI_OFFSET:
    446                          Offset = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreAISettings_10:
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0D10A0E1           MOV      R1,SP
   \   000003A0   0500A0E1           MOV      R0,R5
   \   000003A4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000003A8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003AC   400184E5           STR      R0,[R4, #+320]
    447                          NoError = !ErrorLine;
   \   000003B0   F4FFFFEA           B        ??RestoreAISettings_14
    448                          break;
    449                      case C_ENABLE:
    450                          Enable = true;
   \                     ??RestoreAISettings_6:
   \   000003B4   0100A0E3           MOV      R0,#+1
   \                     ??RestoreAISettings_15:
   \   000003B8   3401C4E5           STRB     R0,[R4, #+308]
   \   000003BC   0C0000EA           B        ??RestoreAISettings_5
    451                          break;
    452                      case C_DISABLE:
    453                          Enable = false;
   \                     ??RestoreAISettings_7:
   \   000003C0   0000A0E3           MOV      R0,#+0
   \   000003C4   FBFFFFEA           B        ??RestoreAISettings_15
    454                          break;
    455                      case C_MOD_CONFIG:
    456                      case C_MOD_SYSTEM:
    457                      case C_MOD_USER  :
    458                          ModifiedBy = Key;
   \                     ??RestoreAISettings_11:
   \   000003C8   586184E5           STR      R6,[R4, #+344]
    459                          TimeModified = int(SettingsString->ReadDouble(ErrorLine));
   \   000003CC   0020A0E3           MOV      R2,#+0
   \   000003D0   0D10A0E1           MOV      R1,SP
   \   000003D4   0500A0E1           MOV      R0,R5
   \   000003D8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000003DC   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000003E0   500184E5           STR      R0,[R4, #+336]
    460                          NoError = !ErrorLine;
   \   000003E4   00009DE5           LDR      R0,[SP, #+0]
   \   000003E8   000050E3           CMP      R0,#+0
   \   000003EC   DDFFFF0A           BEQ      ??RestoreAISettings_13
   \                     ??RestoreAISettings_12:
   \   000003F0   00A0A0E3           MOV      R10,#+0
    461                          break;
    462                      case C_AI_END:
    463                          break;
    464                      }
    465                  }
    466              }while ( NoError && (ErrorLine != EOF) && (Key != C_AI_END) );
   \                     ??RestoreAISettings_5:
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   90008DE2           ADD      R0,SP,#+144
   \   00000400   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000404   00005AE3           CMP      R10,#+0
   \   00000408   00009D15           LDRNE    R0,[SP, #+0]
   \   0000040C   08005011           CMPNE    R0,R8
   \   00000410   9800A013           MOVNE    R0,#+152
   \   00000414   800E8013           ORRNE    R0,R0,#0x800
   \   00000418   00005611           CMPNE    R6,R0
   \   0000041C   24FFFF1A           BNE      ??RestoreAISettings_3
    467              return (NoError);
   \   00000420   0020A0E3           MOV      R2,#+0
   \   00000424   0110A0E3           MOV      R1,#+1
   \   00000428   3C008DE2           ADD      R0,SP,#+60
   \   0000042C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000430   0A00A0E1           MOV      R0,R10
   \   00000434   78DF8DE2           ADD      SP,SP,#+480
   \   00000438   ........           B        ?Subroutine47
   \                     ??RestoreAISettings_2:
   \   0000043C   ........           DC32     NewLineStr
    468          }
    469          
    470          ///////////////////////////////////////////////////////////////
    471          //
    472          // Routines for Calculation of values
    473          //
    474          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    475          float AnalogInput::Calculate(void) {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    476              if ( CanCalculate() ) {
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   ........           BL       ??CanCalculate
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0600000A           BEQ      ??Calculate_1
    477                  CalcValue = Gain * FilteredValue - Offset;
   \   00000018   3C1194E5           LDR      R1,[R4, #+316]
   \   0000001C   440194E5           LDR      R0,[R4, #+324]
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   401194E5           LDR      R1,[R4, #+320]
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   480184E5           STR      R0,[R4, #+328]
    478                  ResultOK = true;
   \   00000030   0100A0E3           MOV      R0,#+1
    479              } else {
    480                  ResultOK = false;
   \                     ??Calculate_1:
   \   00000034   3601C4E5           STRB     R0,[R4, #+310]
    481              }
    482              Failure  = false;
   \   00000038   3851C4E5           STRB     R5,[R4, #+312]
    483              return (CalcValue);
   \   0000003C   480194E5           LDR      R0,[R4, #+328]
   \   00000040                      REQUIRE ?Subroutine46
   \   00000040                      ;; // Fall through to label ?Subroutine46
    484          }
    485          
    486          ///////////////////////////////////////////////////////////////
    487          //
    488          // Routines for the librarian
    489          //
    490          ///////////////////////////////////////////////////////////////
    491          

   \                                 In segment CODE, align 4, keep-with-next
    492          void AnalogInput::UpdateAllDependingSensorOffsets(float OffsetChange, bool IsLocal) {
    493          }
   \                     ??UpdateAllDependingSensorOffsets:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    494          

   \                                 In segment CODE, align 4, keep-with-next
    495          int AnalogInput::CheckInput(float Operator_Val, int &Action) {
    496              return (E_ILLEGAL);
   \                     ??CheckInput:
   \   00000000   0C00A0E3           MOV      R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return
    497          }
    498          

   \                                 In segment CODE, align 4, keep-with-next
    499          int AnalogInput::AdjustSensor(AnsiString NewValue, int Unit, float Min, float Max, bool Local) {
   \                     ??AdjustSensor:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   38809DE5           LDR      R8,[SP, #+56]
   \   0000000C   3C70DDE5           LDRB     R7,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
    500              int Status = E_NO_ERR;
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   00208DE5           STR      R2,[SP, #+0]
    501              float Value = ConvertToSi(NewValue, Unit, Status, Min, Max, 0.0);
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   ........           _BLF     ??string,??string??rA
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   03002DE9           PUSH     {R0,R1}
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000040   03002DE9           PUSH     {R0,R1}
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000004C   03002DE9           PUSH     {R0,R1}
   \   00000050   18208DE2           ADD      R2,SP,#+24
   \   00000054   1C008DE2           ADD      R0,SP,#+28
   \   00000058   0800BDE8           POP      {R3}
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   18008DE2           ADD      R0,SP,#+24
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
    502              if ( Status == E_NO_ERR ) {
   \   00000078   14009DE5           LDR      R0,[SP, #+20]
   \   0000007C   14D08DE2           ADD      SP,SP,#+20
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0400001A           BNE      ??AdjustSensor_1
    503                  Status = AdjustSensorF(Value, Local);
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       ??AdjustSensorF
   \   00000098   00008DE5           STR      R0,[SP, #+0]
    504              }
    505              return (Status);
   \                     ??AdjustSensor_1:
   \   0000009C   00009DE5           LDR      R0,[SP, #+0]
   \   000000A0   20D08DE2           ADD      SP,SP,#+32
   \   000000A4                      REQUIRE ?Subroutine48
   \   000000A4                      ;; // Fall through to label ?Subroutine48
    506          }
    507          

   \                                 In segment CODE, align 4, keep-with-next
    508          int AnalogInput::AdjustSensorF(float Operator_Val, bool Local) {
   \                     ??AdjustSensorF:
   \   00000000   F1402DE9           PUSH     {R0,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0270A0E1           MOV      R7,R2
    509              int ErrStatus = E_NO_ERR;
    510              int Action;
    511              if ( !CanCalculate() ) {
   \   00000010   ........           BL       ??CanCalculate
   \   00000014   000050E3           CMP      R0,#+0
    512                  ErrStatus = E_SENSOR_ERROR;
   \   00000018   1F60A003           MOVEQ    R6,#+31
   \   0000001C   2D00000A           BEQ      ??AdjustSensorF_2
    513              } else {
    514                  ErrStatus = CheckInput(Operator_Val, Action);
   \   00000020   A43094E5           LDR      R3,[R4, #+164]
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   783093E5           LDR      R3,[R3, #+120]
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   13FF2FE1           BX       R3
   \   0000003C   0060A0E1           MOV      R6,R0
    515                  if ( !Local && (ErrStatus == E_NO_ERR) ) {
   \   00000040   000057E3           CMP      R7,#+0
   \   00000044   00005603           CMPEQ    R6,#+0
   \   00000048   2200001A           BNE      ??AdjustSensorF_2
    516                      switch ( Action ) {
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   481194E5           LDR      R1,[R4, #+328]
   \   00000054   0170A0E3           MOV      R7,#+1
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   020050E3           CMP      R0,#+2
   \   00000060   1C00008A           BHI      ??AdjustSensorF_2
   \   00000064   012F8FE2           ADR      R2,??AdjustSensorF_1
   \   00000068   0020D2E7           LDRB     R2,[R2, R0]
   \   0000006C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??AdjustSensorF_1:
   \   00000070   00020900           DC8      +0,+2,+9,+0
    517                      default:
    518                      case SNS_ADJUST_ABORT:
    519                          break;
    520                      case SNS_ADJUST_ONLY_INP:
    521                          CalcValue = Operator_Val;
   \                     ??AdjustSensorF_3:
   \   00000074   485184E5           STR      R5,[R4, #+328]
   \   00000078   160000EA           B        ??AdjustSensorF_2
    522                          break;
    523                      case SNS_ADJUST_GAIN:
    524                          {
    525                              float GainCorrection = Operator_Val / CalcValue;
    526                              Gain *= GainCorrection;
   \                     ??AdjustSensorF_4:
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000084   3C1194E5           LDR      R1,[R4, #+316]
   \   00000088   ........           _BLF     __fMul,??__fMul??rA
   \   0000008C   3C0184E5           STR      R0,[R4, #+316]
    527                          }
    528                          Modified = true;
   \   00000090   3571C4E5           STRB     R7,[R4, #+309]
   \   00000094   0F0000EA           B        ??AdjustSensorF_2
    529                          break;
    530                      case SNS_ADJUST_OFFSET:
    531                          {
    532                              float OffsetChange = CalcValue - Operator_Val;
   \                     ??AdjustSensorF_5:
   \   00000098   0100A0E1           MOV      R0,R1
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   ........           _BLF     __fSub,??__fSub??rA
   \   000000A4   0050A0E1           MOV      R5,R0
    533                              Offset += OffsetChange;
   \   000000A8   400194E5           LDR      R0,[R4, #+320]
   \   000000AC   0510A0E1           MOV      R1,R5
   \   000000B0   ........           _BLF     __fAdd,??__fAdd??rA
   \   000000B4   400184E5           STR      R0,[R4, #+320]
    534                              Modified = true;
   \   000000B8   3571C4E5           STRB     R7,[R4, #+309]
    535                              UpdateAllDependingSensorOffsets(OffsetChange, Local);
   \   000000BC   A43094E5           LDR      R3,[R4, #+164]
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   743093E5           LDR      R3,[R3, #+116]
   \   000000C8   0510A0E1           MOV      R1,R5
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   0FE0A0E1           MOV      LR,PC
   \   000000D4   13FF2FE1           BX       R3
    536                          }
    537                          break;
    538                      }
    539                  }
    540              }
    541              return (ErrStatus);
   \                     ??AdjustSensorF_2:
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   F240BDE8           POP      {R1,R4-R7,LR}
   \   000000E0   1EFF2FE1           BX       LR               ;; return
    542          }
    543          

   \                                 In segment CODE, align 4, keep-with-next
    544          AnsiString AnalogInput::GetName(void) {
   \                     ??GetName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    545              AnsiString Loc      = FindDictionaryWord(LocationKWord);
   \   00000010   181195E5           LDR      R1,[R5, #+280]
   \   00000014   E0008DE2           ADD      R0,SP,#+224
   \   00000018   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
    546              AnsiString BSnsType = FindDictionaryWord(BasicSensorTypeWord);
   \   0000001C   141195E5           LDR      R1,[R5, #+276]
   \   00000020   1C008DE2           ADD      R0,SP,#+28
   \   00000024   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
    547              AnsiString Name;
   \   00000028   38008DE2           ADD      R0,SP,#+56
   \   0000002C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    548              if ( PROPtr ) {
   \   00000030   240195E5           LDR      R0,[R5, #+292]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??GetName_1
    549                  Name = PROPtr->Name;
   \   0000003C   ........           LDR      R1,??DataTable22  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003091E5           LDR      R3,[R1, #+0]
   \   00000048   441080E2           ADD      R1,R0,#+68
   \   0000004C   38008DE2           ADD      R0,SP,#+56
   \   00000050   ........           _BLF     ??assign,??assign??rA
   \   00000054   0C0000EA           B        ??GetName_2
    550              } else {
    551                  Name = "Error";
   \                     ??GetName_1:
   \   00000058   BC119FE5           LDR      R1,??GetName_3+0xC  ;; `?<Constant "Error">`
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000064   ........           LDR      R1,??DataTable22  ;; ??npos
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   003091E5           LDR      R3,[R1, #+0]
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   38008DE2           ADD      R0,SP,#+56
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
    552              }
    553              int LMarg = 15 - 3 - Name.Length() - BSnsType.Length();
   \                     ??GetName_2:
   \   0000008C   38008DE2           ADD      R0,SP,#+56
   \   00000090   ........           _BLF     ??Length,??Length??rA
   \   00000094   0C5060E2           RSB      R5,R0,#+12
   \   00000098   1C008DE2           ADD      R0,SP,#+28
   \   0000009C   ........           _BLF     ??Length,??Length??rA
   \   000000A0   005045E0           SUB      R5,R5,R0
    554              if ( LMarg <= 0 ) {
   \   000000A4   010055E3           CMP      R5,#+1
   \   000000A8   110000AA           BGE      ??GetName_4
    555                  LMarg = 1;
    556                  BSnsType = BSnsType.SetLength(BSnsType.Length() - 1);
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??Length,??Length??rA
   \   000000B4   012040E2           SUB      R2,R0,#+1
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   1C008DE2           ADD      R0,SP,#+28
   \   000000C0   ........           _BLF     ??SetLength,??SetLength??rA
   \   000000C4   ........           LDR      R0,??DataTable22  ;; ??npos
   \   000000C8   0150A0E3           MOV      R5,#+1
   \   000000CC   003090E5           LDR      R3,[R0, #+0]
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0D10A0E1           MOV      R1,SP
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     ??assign,??assign??rA
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   010000EA           B        ??GetName_5
    557              } else if ( LMarg > 4 ) {
   \                     ??GetName_4:
   \   000000F4   050055E3           CMP      R5,#+5
    558                  LMarg = 4;
   \   000000F8   0450A0A3           MOVGE    R5,#+4
    559              }
    560              if ( Loc.Length() > LMarg ) {
   \                     ??GetName_5:
   \   000000FC   E0008DE2           ADD      R0,SP,#+224
   \   00000100   ........           _BLF     ??Length,??Length??rA
   \   00000104   000055E1           CMP      R5,R0
   \   00000108   070000AA           BGE      ??GetName_6
    561                  Loc.SetLength(LMarg);
   \   0000010C   0520A0E1           MOV      R2,R5
   \   00000110   0D10A0E1           MOV      R1,SP
   \   00000114   E0008DE2           ADD      R0,SP,#+224
   \   00000118   ........           _BLF     ??SetLength,??SetLength??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
    562              }
    563              AnsiString tName = Name + "(" + Loc + ":" + BSnsType + ")";
   \                     ??GetName_6:
   \   0000012C   372F8FE2           ADR      R2,??GetName_3   ;; "("
   \   00000130   38108DE2           ADD      R1,SP,#+56
   \   00000134   C4008DE2           ADD      R0,SP,#+196
   \   00000138   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000013C   E0208DE2           ADD      R2,SP,#+224
   \   00000140   C4108DE2           ADD      R1,SP,#+196
   \   00000144   A8008DE2           ADD      R0,SP,#+168
   \   00000148   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000014C   302F8FE2           ADR      R2,??GetName_3+0x4  ;; ":"
   \   00000150   A8108DE2           ADD      R1,SP,#+168
   \   00000154   8C008DE2           ADD      R0,SP,#+140
   \   00000158   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000015C   1C208DE2           ADD      R2,SP,#+28
   \   00000160   8C108DE2           ADD      R1,SP,#+140
   \   00000164   70008DE2           ADD      R0,SP,#+112
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   292F8FE2           ADR      R2,??GetName_3+0x8  ;; ")"
   \   00000170   70108DE2           ADD      R1,SP,#+112
   \   00000174   54008DE2           ADD      R0,SP,#+84
   \   00000178   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000017C   54108DE2           ADD      R1,SP,#+84
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   54008DE2           ADD      R0,SP,#+84
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   70008DE2           ADD      R0,SP,#+112
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   8C008DE2           ADD      R0,SP,#+140
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   A8008DE2           ADD      R0,SP,#+168
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   C4008DE2           ADD      R0,SP,#+196
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
    564              return (tName);
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   38008DE2           ADD      R0,SP,#+56
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   1C008DE2           ADD      R0,SP,#+28
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   E0008DE2           ADD      R0,SP,#+224
   \   00000204   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000208   FCD08DE2           ADD      SP,SP,#+252
   \   0000020C   ........           B        ?Subroutine46
   \                     ??GetName_3:
   \   00000210   28000000           DC8      "(",+0,+0
   \   00000214   3A000000           DC8      ":",+0,+0
   \   00000218   29000000           DC8      ")",+0,+0
   \   0000021C   ........           DC32     `?<Constant "Error">`
    565          }
    566          

   \                                 In segment CODE, align 4, keep-with-next
    567          int AnalogInput::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    568              int PROStatus = ST_OK;
   \   00000010   3D60A0E3           MOV      R6,#+61
   \   00000014   F06E86E3           ORR      R6,R6,#0xF00
    569              if ( HasActiveAlarms() ) {
   \   00000018   ........           _BLF     ??HasActiveAlarms,??HasActiveAlarms??rA
   \   0000001C   000050E3           CMP      R0,#+0
    570                  PROStatus = ST_ERROR;
   \   00000020   04608612           ADDNE    R6,R6,#+4
   \   00000024   0200001A           BNE      ??FindPROStatus_1
    571              } else if ( !Enable ) {
   \   00000028   3401D4E5           LDRB     R0,[R4, #+308]
   \   0000002C   000050E3           CMP      R0,#+0
    572                  PROStatus = ST_WARNING;
   \   00000030   02608603           ORREQ    R6,R6,#0x2
    573              }
    574              MyString = FindStatusChar(PROStatus);
   \                     ??FindPROStatus_1:
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   00000044   ........           LDR      R0,??DataTable22  ;; ??npos
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   003090E5           LDR      R3,[R0, #+0]
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           _BLF     ??assign,??assign??rA
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
    575              return (PROStatus);
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070                      REQUIRE ?Subroutine43
   \   00000070                      ;; // Fall through to label ?Subroutine43
    576          }
    577          

   \                                 In segment CODE, align 4, keep-with-next
    578          int AnalogInput::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0070A0E1           MOV      R7,R0
    579              int Status = GETVAL_NO_ERR;
    580          
    581              switch ( ValueId ) {
   \   00000008   ........           LDR      R0,??DataTable22  ;; ??npos
   \   0000000C   46DF4DE2           SUB      SP,SP,#+280
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   B10041E2           SUB      R0,R1,#+177
   \   00000020   400E40E2           SUB      R0,R0,#+1024
   \   00000024   0E0050E3           CMP      R0,#+14
   \   00000028   8A00008A           BHI      ??GetStringValue_3
   \   0000002C   013F8FE2           ADR      R3,??GetStringValue_1
   \   00000030   0030D3E7           LDRB     R3,[R3, R0]
   \   00000034   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetStringValue_1:
   \   00000038   15218787           DC8      +21,+33,+135,+135
   \   0000003C   87878787           DC8      +135,+135,+135,+135
   \   00000040   03873087           DC8      +3,+135,+48,+135
   \   00000044   87874600           DC8      +135,+135,+70,+0
    582              case SVT_AI_LOCATION:
    583                  MyString = FindDictionaryWord(LocationKWord);
   \                     ??GetStringValue_4:
   \   00000048   181197E5           LDR      R1,[R7, #+280]
   \   0000004C   1C008DE2           ADD      R0,SP,#+28
   \   00000050   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000054   0630A0E1           MOV      R3,R6
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   1C108DE2           ADD      R1,SP,#+28
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   0520A0E1           MOV      R2,R5
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   1C008DE2           ADD      R0,SP,#+28
   \                     ??GetStringValue_5:
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
    584                  if ( MyString.IsEmpty() )   Status = GETVAL_ERROR;
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   7700000A           BEQ      ??GetStringValue_6
   \   00000088   0450A0E3           MOV      R5,#+4
   \   0000008C   750000EA           B        ??GetStringValue_6
    585                  break;
    586              case SVT_AI_TYPE_TEXT:
    587                  MyString = FindKeyWord(Type);
   \                     ??GetStringValue_7:
   \   00000090   A01097E5           LDR      R1,[R7, #+160]
   \   00000094   38008DE2           ADD      R0,SP,#+56
   \   00000098   ........           _BLF     ??FindKeyWord,??FindKeyWord??rA
   \   0000009C   0630A0E1           MOV      R3,R6
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   38108DE2           ADD      R1,SP,#+56
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??assign,??assign??rA
   \   000000B0   0520A0E1           MOV      R2,R5
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   38008DE2           ADD      R0,SP,#+56
   \   000000BC   ECFFFFEA           B        ??GetStringValue_5
    588                  if ( MyString.IsEmpty() )   Status = GETVAL_ERROR;
    589                  break;
    590              case SVT_AI_ENABLE_TEXT:
    591                  if ( Enable ) {
   \                     ??GetStringValue_8:
   \   000000C0   3401D7E5           LDRB     R0,[R7, #+308]
   \   000000C4   000050E3           CMP      R0,#+0
    592                      MyString = FindKeyWord(C_ENABLE);
   \   000000C8   6410A013           MOVNE    R1,#+100
    593                  } else {
    594                      MyString = FindKeyWord(C_DISABLE);
   \   000000CC   6510A003           MOVEQ    R1,#+101
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   ........           _BLF     ??FindKeyWord,??FindKeyWord??rA
   \   000000D8   0630A0E1           MOV      R3,R6
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0D10A0E1           MOV      R1,SP
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           _BLF     ??assign,??assign??rA
   \   000000EC   0520A0E1           MOV      R2,R5
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   DDFFFFEA           B        ??GetStringValue_5
    595                  }
    596                  if ( MyString.IsEmpty() )   Status = GETVAL_ERROR;
    597                  break;
    598              case SVT_AI_PRONAME:
    599                  if ( PROPtr ) {
   \                     ??GetStringValue_9:
   \   000000FC   240197E5           LDR      R0,[R7, #+292]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0500000A           BEQ      ??GetStringValue_10
    600                      MyString = PROPtr->Name;
   \   00000108   0630A0E1           MOV      R3,R6
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   441080E2           ADD      R1,R0,#+68
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           _BLF     ??assign,??assign??rA
   \   0000011C   510000EA           B        ??GetStringValue_6
    601                  } else {
    602                      MyString = "";
   \                     ??GetStringValue_10:
   \   00000120   541F8FE2           ADR      R1,??GetStringValue_11  ;; ""
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000012C   0630A0E1           MOV      R3,R6
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0010A0E1           MOV      R1,R0
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           _BLF     ??assign,??assign??rA
   \   00000140   0520A0E1           MOV      R2,R5
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   0D00A0E1           MOV      R0,SP
   \                     ??GetStringValue_12:
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000150   440000EA           B        ??GetStringValue_6
    603                  }
    604                  break;
    605              case SVT_AI_RANGE:
    606                  MyString = "Range:" + LibGetValue(SVT_AI_MIN_RANGE, this) + " to " + LibGetValue(SVT_AI_MAX_RANGE, this) + " Bar";
   \                     ??GetStringValue_13:
   \   00000154   0030A0E3           MOV      R3,#+0
   \   00000158   0720A0E1           MOV      R2,R7
   \   0000015C   BE10A0E3           MOV      R1,#+190
   \   00000160   401E81E3           ORR      R1,R1,#0x400
   \   00000164   FC008DE2           ADD      R0,SP,#+252
   \   00000168   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   0000016C   0720A0E1           MOV      R2,R7
   \   00000170   04719FE5           LDR      R7,??GetStringValue_11+0x4  ;; `?<Constant " Bar">`
   \   00000174   0530A0E1           MOV      R3,R5
   \   00000178   BD10A0E3           MOV      R1,#+189
   \   0000017C   401E81E3           ORR      R1,R1,#0x400
   \   00000180   E0008DE2           ADD      R0,SP,#+224
   \   00000184   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000188   E0208DE2           ADD      R2,SP,#+224
   \   0000018C   101087E2           ADD      R1,R7,#+16
   \   00000190   C4008DE2           ADD      R0,SP,#+196
   \   00000194   ........           _BLF     `??operator+_1`,`??operator+??rA_2`
   \   00000198   082087E2           ADD      R2,R7,#+8
   \   0000019C   C4108DE2           ADD      R1,SP,#+196
   \   000001A0   A8008DE2           ADD      R0,SP,#+168
   \   000001A4   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   000001A8   FC208DE2           ADD      R2,SP,#+252
   \   000001AC   A8108DE2           ADD      R1,SP,#+168
   \   000001B0   8C008DE2           ADD      R0,SP,#+140
   \   000001B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001B8   0720A0E1           MOV      R2,R7
   \   000001BC   8C108DE2           ADD      R1,SP,#+140
   \   000001C0   70008DE2           ADD      R0,SP,#+112
   \   000001C4   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   000001C8   70108DE2           ADD      R1,SP,#+112
   \   000001CC   54008DE2           ADD      R0,SP,#+84
   \   000001D0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000001D4   0630A0E1           MOV      R3,R6
   \   000001D8   0520A0E1           MOV      R2,R5
   \   000001DC   0010A0E1           MOV      R1,R0
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   ........           _BLF     ??assign,??assign??rA
   \   000001E8   0520A0E1           MOV      R2,R5
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   54008DE2           ADD      R0,SP,#+84
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   0520A0E1           MOV      R2,R5
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   70008DE2           ADD      R0,SP,#+112
   \   00000204   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000208   0520A0E1           MOV      R2,R5
   \   0000020C   0110A0E3           MOV      R1,#+1
   \   00000210   8C008DE2           ADD      R0,SP,#+140
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0520A0E1           MOV      R2,R5
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   FC008DE2           ADD      R0,SP,#+252
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000228   0520A0E1           MOV      R2,R5
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   A8008DE2           ADD      R0,SP,#+168
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000238   0520A0E1           MOV      R2,R5
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   C4008DE2           ADD      R0,SP,#+196
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000248   0520A0E1           MOV      R2,R5
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   E0008DE2           ADD      R0,SP,#+224
   \   00000254   BCFFFFEA           B        ??GetStringValue_12
    607                  break;
    608              default:
    609                  Status = PROIOComponent::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_3:
   \   00000258   0430A0E1           MOV      R3,R4
   \   0000025C   0700A0E1           MOV      R0,R7
   \   00000260   ........           _BLF     ??GetStringValue_2,??GetStringValue??rA
   \   00000264   0050A0E1           MOV      R5,R0
    610                  break;
    611              }
    612              return (Status);
   \                     ??GetStringValue_6:
   \   00000268   0500A0E1           MOV      R0,R5
   \   0000026C   46DF8DE2           ADD      SP,SP,#+280
   \   00000270   F040BDE8           POP      {R4-R7,LR}
   \   00000274   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_11:
   \   00000278   00000000           DC8      "",+0,+0,+0
   \   0000027C   ........           DC32     `?<Constant " Bar">`
    613          }
    614          

   \                                 In segment CODE, align 4, keep-with-next
    615          int AnalogInput::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000008   0340A0E1           MOV      R4,R3
   \   0000000C   18309DE5           LDR      R3,[SP, #+24]
    616              int Status = GETVAL_NO_ERR;
   \   00000010   0050A0E3           MOV      R5,#+0
    617              switch ( ValueId ) {
   \   00000014   02E0A0E3           MOV      LR,#+2
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   4B7E41E2           SUB      R7,R1,#+1200
   \   00000020   0E0057E3           CMP      R7,#+14
   \   00000024   2400008A           BHI      ??GetValue_3
   \   00000028   018F8FE2           ADR      R8,??GetValue_1
   \   0000002C   0780D8E7           LDRB     R8,[R8, R7]
   \   00000030   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??GetValue_1:
   \   00000034   0321210E           DC8      +3,+33,+33,+14
   \   00000038   09211313           DC8      +9,+33,+19,+19
   \   0000003C   21212121           DC8      +33,+33,+33,+33
   \   00000040   21191D00           DC8      +33,+25,+29,+0
    618              case SVT_AI_TYPE:
    619                  DecPnt     = 0;
   \                     ??GetValue_4:
   \   00000044   006083E5           STR      R6,[R3, #+0]
    620                  Unit       = NO_UNIT;
   \   00000048   00608CE5           STR      R6,[R12, #+0]
    621                  MyRetValue = (float)Type;
   \   0000004C   A00090E5           LDR      R0,[R0, #+160]
   \   00000050   ........           _BLF     __longToFloat,??__longToFloat??rA
   \                     ??GetValue_5:
   \   00000054   000084E5           STR      R0,[R4, #+0]
   \   00000058   1D0000EA           B        ??GetValue_6
    622                  break;
    623              case SVT_AI_GAIN:
    624                  DecPnt     = 5;
   \                     ??GetValue_7:
   \   0000005C   0510A0E3           MOV      R1,#+5
   \   00000060   001083E5           STR      R1,[R3, #+0]
    625                  Unit       = NO_UNIT;
   \   00000064   00608CE5           STR      R6,[R12, #+0]
    626                  MyRetValue = (float)Gain;
   \   00000068   3C0190E5           LDR      R0,[R0, #+316]
   \   0000006C   F8FFFFEA           B        ??GetValue_5
    627                  break;
    628              case SVT_AI_ENABLE:
    629                  DecPnt     = 0;
   \                     ??GetValue_8:
   \   00000070   006083E5           STR      R6,[R3, #+0]
    630                  Unit       = NO_UNIT;
   \   00000074   00608CE5           STR      R6,[R12, #+0]
    631                  MyRetValue = (float)Enable;
   \   00000078   3401D0E5           LDRB     R0,[R0, #+308]
   \   0000007C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000080   F3FFFFEA           B        ??GetValue_5
    632                  break;
    633              case SVT_AI_DB:
    634              case SVT_AI_PLACING:
    635                  DecPnt     = 3;
   \                     ??GetValue_9:
   \   00000084   0310A0E3           MOV      R1,#+3
   \   00000088   001083E5           STR      R1,[R3, #+0]
    636                  Unit       = LENGTH_UNIT;
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   00108CE5           STR      R1,[R12, #+0]
    637                  MyRetValue = (float)Distance;
   \   00000094   2C0190E5           LDR      R0,[R0, #+300]
   \   00000098   EDFFFFEA           B        ??GetValue_5
    638                  break;
    639              case SVT_AI_MIN_RANGE :
    640                  DecPnt     = 2;
   \                     ??GetValue_10:
   \   0000009C   00E083E5           STR      LR,[R3, #+0]
    641                  Unit       = NO_UNIT;
   \   000000A0   00608CE5           STR      R6,[R12, #+0]
    642                  MyRetValue = MinRange;
   \   000000A4   5C0190E5           LDR      R0,[R0, #+348]
   \   000000A8   E9FFFFEA           B        ??GetValue_5
    643                  break;
    644              case SVT_AI_MAX_RANGE :
    645                  DecPnt     = 2;
   \                     ??GetValue_11:
   \   000000AC   00E083E5           STR      LR,[R3, #+0]
    646                  Unit       = NO_UNIT;
   \   000000B0   00608CE5           STR      R6,[R12, #+0]
    647                  MyRetValue = MaxRange;
   \   000000B4   600190E5           LDR      R0,[R0, #+352]
   \   000000B8   E5FFFFEA           B        ??GetValue_5
    648                  break;
    649              default:
    650                  Status = PROIOComponent::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_3:
   \   000000BC   00102DE9           PUSH     {R12}
   \   000000C0   08002DE9           PUSH     {R3}
   \   000000C4   0430A0E1           MOV      R3,R4
   \   000000C8   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000CC   0050A0E1           MOV      R5,R0
   \   000000D0   08D08DE2           ADD      SP,SP,#+8
    651                  break;
    652              }
    653              return (Status);
   \                     ??GetValue_6:
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           B        ?Subroutine48
    654          }
    655          
    656          
    657          

   \                                 In segment CODE, align 4, keep-with-next
    658          int AnalogInput::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7890DDE5           LDRB     R9,[SP, #+120]
   \   0000000C   7C409DE5           LDR      R4,[SP, #+124]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0280A0E1           MOV      R8,R2
   \   0000001C   0360A0E1           MOV      R6,R3
    659              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
    660              switch ( ValueId ) {
   \   0000002C   B20047E2           SUB      R0,R7,#+178
   \   00000030   400E40E2           SUB      R0,R0,#+1024
   \   00000034   0C0050E3           CMP      R0,#+12
   \   00000038   7F00008A           BHI      ??PutValue_4
   \   0000003C   011F8FE2           ADR      R1,??PutValue_1
   \   00000040   0010D1E7           LDRB     R1,[R1, R0]
   \   00000044   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000048   2121037C           DC8      +33,+33,+3,+124
   \   0000004C   7C7C7C7C           DC8      +124,+124,+124,+124
   \   00000050   7C7C7C4A           DC8      +124,+124,+124,+74
   \   00000054   63000000           DC8      +99,+0,+0,+0
    661              case SVT_AI_GAIN:
    662                  {
    663                      float Value = ConvertToSi(NewValue, NO_UNIT, Status, MIN_GAIN, MAX_GAIN, 0.0);
   \                     ??PutValue_5:
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   08008DE2           ADD      R0,SP,#+8
   \   00000060   ........           _BLF     ??string,??string??rA
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   03002DE9           PUSH     {R0,R1}
   \   00000070   F015A0E3           MOV      R1,#+1006632960
   \   00000074   FE1781E3           ORR      R1,R1,#0x3F80000
   \   00000078   03002DE9           PUSH     {R0,R1}
   \   0000007C   6019C1E3           BIC      R1,R1,#0x180000
   \   00000080   03002DE9           PUSH     {R0,R1}
   \   00000084   18208DE2           ADD      R2,SP,#+24
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   0800BDE8           POP      {R3}
   \   00000094   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000098   0060A0E1           MOV      R6,R0
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   1C008DE2           ADD      R0,SP,#+28
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    664                      if ( Status == E_NO_ERR ) {
   \   000000AC   14009DE5           LDR      R0,[SP, #+20]
   \   000000B0   14D08DE2           ADD      SP,SP,#+20
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   7000001A           BNE      ??PutValue_6
    665                          Gain = Value;
   \   000000BC   3C6185E5           STR      R6,[R5, #+316]
    666                          TimeModified        = time(NULL);
   \                     ??PutValue_7:
   \   000000C0   0000A0E3           MOV      R0,#+0
   \                     ??PutValue_8:
   \   000000C4   ........           _BLF     time,??time??rA
   \   000000C8   500185E5           STR      R0,[R5, #+336]
   \   000000CC   6B0000EA           B        ??PutValue_6
    667                      }
    668                  }
    669                  break;
    670              case SVT_AI_ENABLE:
    671              case SVT_AI_ENABLE_TEXT:
    672                  {
    673                      int Key = FindConfigKey(NewValue);
   \                     ??PutValue_9:
   \   000000D0   0610A0E1           MOV      R1,R6
   \   000000D4   08008DE2           ADD      R0,SP,#+8
   \   000000D8   ........           _BLF     ??string,??string??rA
   \   000000DC   08008DE2           ADD      R0,SP,#+8
   \   000000E0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000E4   0070A0E1           MOV      R7,R0
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   08008DE2           ADD      R0,SP,#+8
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    674                      switch ( Key ) {
   \   000000F8   647047E2           SUB      R7,R7,#+100
   \   000000FC   050057E3           CMP      R7,#+5
   \   00000100   0900008A           BHI      ??PutValue_10
   \   00000104   010F8FE2           ADR      R0,??PutValue_2
   \   00000108   0700D0E7           LDRB     R0,[R0, R7]
   \   0000010C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_2:
   \   00000110   01040104           DC8      +1,+4,+1,+4
   \   00000114   01040000           DC8      +1,+4,+0,+0
    675                      case C_ON:
    676                      case C_OPEN:
    677                      case C_ENABLE:
    678                          Enable = true;
   \                     ??PutValue_11:
   \   00000118   0100A0E3           MOV      R0,#+1
   \                     ??PutValue_12:
   \   0000011C   3401C5E5           STRB     R0,[R5, #+308]
   \   00000120   560000EA           B        ??PutValue_6
    679                          break;
    680                      case C_OFF:
    681                      case C_CLOSE:
    682                      case C_DISABLE:
    683                          Enable = false;
   \                     ??PutValue_13:
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   FBFFFFEA           B        ??PutValue_12
    684                          break;
    685                      default:
    686                          {
    687                              bool Value = (bool)GetUnsigned(NewValue, Status);
   \                     ??PutValue_10:
   \   0000012C   0610A0E1           MOV      R1,R6
   \   00000130   24008DE2           ADD      R0,SP,#+36
   \   00000134   ........           _BLF     ??string,??string??rA
   \   00000138   0D10A0E1           MOV      R1,SP
   \   0000013C   24008DE2           ADD      R0,SP,#+36
   \   00000140   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0160A013           MOVNE    R6,#+1
   \   0000014C   0060A003           MOVEQ    R6,#+0
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   24008DE2           ADD      R0,SP,#+36
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
    688                              if ( Status == E_NO_ERR ) {
   \   00000160   00009DE5           LDR      R0,[SP, #+0]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   4400001A           BNE      ??PutValue_6
    689                                  Enable = Value;
   \   0000016C   3461C5E5           STRB     R6,[R5, #+308]
    690                                  TimeModified = time(NULL);
   \   00000170   D3FFFFEA           B        ??PutValue_8
    691                              }
    692                          }
    693                          break;
    694                      }
    695                  }
    696                  break;
    697              case SVT_AI_MIN_RANGE :
    698                  {
    699                      float Value = ConvertToSi(NewValue, NO_UNIT, Status, 0, 150, 0.0);
   \                     ??PutValue_14:
   \   00000174   0610A0E1           MOV      R1,R6
   \   00000178   08008DE2           ADD      R0,SP,#+8
   \   0000017C   ........           _BLF     ??string,??string??rA
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   03002DE9           PUSH     {R0,R1}
   \   0000018C   08119FE5           LDR      R1,??PutValue_15  ;; 0x4062c000
   \   00000190   03002DE9           PUSH     {R0,R1}
   \   00000194   0010A0E1           MOV      R1,R0
   \   00000198   03002DE9           PUSH     {R0,R1}
   \   0000019C   18208DE2           ADD      R2,SP,#+24
   \   000001A0   20008DE2           ADD      R0,SP,#+32
   \   000001A4   0800BDE8           POP      {R3}
   \   000001A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000001AC   0060A0E1           MOV      R6,R0
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   1C008DE2           ADD      R0,SP,#+28
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    700                      if ( Status == E_NO_ERR ) {
   \   000001C0   14009DE5           LDR      R0,[SP, #+20]
   \   000001C4   14D08DE2           ADD      SP,SP,#+20
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   2B00001A           BNE      ??PutValue_6
    701                          MinRange = Value;
   \   000001D0   5C6185E5           STR      R6,[R5, #+348]
    702                          TimeModified        = time(NULL);
   \   000001D4   B9FFFFEA           B        ??PutValue_7
    703                      }
    704                  }
    705                  break;
    706              case SVT_AI_MAX_RANGE :
    707                  {
    708                      float Value = ConvertToSi(NewValue, NO_UNIT, Status, 0, 150, 0.0);
   \                     ??PutValue_16:
   \   000001D8   0610A0E1           MOV      R1,R6
   \   000001DC   08008DE2           ADD      R0,SP,#+8
   \   000001E0   ........           _BLF     ??string,??string??rA
   \   000001E4   0000A0E3           MOV      R0,#+0
   \   000001E8   0010A0E3           MOV      R1,#+0
   \   000001EC   03002DE9           PUSH     {R0,R1}
   \   000001F0   A4109FE5           LDR      R1,??PutValue_15  ;; 0x4062c000
   \   000001F4   03002DE9           PUSH     {R0,R1}
   \   000001F8   0010A0E1           MOV      R1,R0
   \   000001FC   03002DE9           PUSH     {R0,R1}
   \   00000200   18208DE2           ADD      R2,SP,#+24
   \   00000204   20008DE2           ADD      R0,SP,#+32
   \   00000208   0800BDE8           POP      {R3}
   \   0000020C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000210   0060A0E1           MOV      R6,R0
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   1C008DE2           ADD      R0,SP,#+28
   \   00000220   ........           _BLF     ??_Tidy,??_Tidy??rA
    709                      if ( Status == E_NO_ERR ) {
   \   00000224   14009DE5           LDR      R0,[SP, #+20]
   \   00000228   14D08DE2           ADD      SP,SP,#+20
   \   0000022C   000050E3           CMP      R0,#+0
   \   00000230   1200001A           BNE      ??PutValue_6
    710                          MaxRange = Value;
   \   00000234   606185E5           STR      R6,[R5, #+352]
    711                          TimeModified        = time(NULL);
   \   00000238   A0FFFFEA           B        ??PutValue_7
    712                      }
    713                  }
    714                  break;
    715              default:
    716                  Status = PROIOComponent::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_4:
   \   0000023C   0610A0E1           MOV      R1,R6
   \   00000240   40008DE2           ADD      R0,SP,#+64
   \   00000244   ........           _BLF     ??string,??string??rA
   \   00000248   04008DE2           ADD      R0,SP,#+4
   \   0000024C   01002DE9           PUSH     {R0}
   \   00000250   00022DE9           PUSH     {R9}
   \   00000254   48308DE2           ADD      R3,SP,#+72
   \   00000258   0820A0E1           MOV      R2,R8
   \   0000025C   0710A0E1           MOV      R1,R7
   \   00000260   0500A0E1           MOV      R0,R5
   \   00000264   ........           _BLF     ??PutValue_3,??PutValue??rA
   \   00000268   08008DE5           STR      R0,[SP, #+8]
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   48008DE2           ADD      R0,SP,#+72
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000027C   08D08DE2           ADD      SP,SP,#+8
    717                  break;
    718              }
    719              if ( UnitId ) {
   \                     ??PutValue_6:
   \   00000280   000054E3           CMP      R4,#+0
    720                  *UnitId = ValUnitId;
   \   00000284   04009D15           LDRNE    R0,[SP, #+4]
   \   00000288   00008415           STRNE    R0,[R4, #+0]
    721              }
    722              return (Status);
   \   0000028C   00009DE5           LDR      R0,[SP, #+0]
   \   00000290   5CD08DE2           ADD      SP,SP,#+92
   \   00000294   F043BDE8           POP      {R4-R9,LR}
   \   00000298   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_15:
   \   0000029C   00C06240           DC32     0x4062c000
    723          }
    724          

   \                                 In segment CODE, align 4, keep-with-next
    725          int AnalogInput::PutFloatValue(int ValueId, float NewValue) {
    726              int Status = E_NO_ERR;
   \                     ??PutFloatValue:
   \   00000000   0030A0E3           MOV      R3,#+0
    727              switch ( ValueId ) {
   \   00000004   B41041E2           SUB      R1,R1,#+180
   \   00000008   401E41E2           SUB      R1,R1,#+1024
   \   0000000C   010051E3           CMP      R1,#+1
   \   00000010   0700008A           BHI      ??PutFloatValue_2
   \   00000014   01CF8FE2           ADR      R12,??PutFloatValue_1
   \   00000018   01C0DCE7           LDRB     R12,[R12, R1]
   \   0000001C   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000020   00020000           DC8      +0,+2,+0,+0
    728              case SVT_AI_GAIN:
    729                  Gain = NewValue;
   \                     ??PutFloatValue_3:
   \   00000024   3C2180E5           STR      R2,[R0, #+316]
   \   00000028   020000EA           B        ??PutFloatValue_4
    730                  break;
    731              case SVT_AI_OFFSET:
    732                  Offset = NewValue;
   \                     ??PutFloatValue_5:
   \   0000002C   402180E5           STR      R2,[R0, #+320]
   \   00000030   000000EA           B        ??PutFloatValue_4
    733                  break;
    734              default:
    735                  Status = E_NOT_ADJUSTABLE;
   \                     ??PutFloatValue_2:
   \   00000034   2930A0E3           MOV      R3,#+41
    736                  break;
    737          
    738              }
    739              return (Status);
   \                     ??PutFloatValue_4:
   \   00000038   0300A0E1           MOV      R0,R3
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    740          }
    741          

   \                                 In segment DATA_I, align 4, align-sorted
    742          ValueList SensorValueList0[] =  {
   \                     SensorValueList0:
   \   00000000                      DS8 72
   \   00000048                      REQUIRE `?<Initializer for SensorValueList0>`
    743              { L_WORD124, L_WORD237, SVT_AI_LOCATION },                                        // {"Location"  ,"",SVT_AI_LOCATION},
    744              { L_WORD434, L_WORD237, SVT_AI_ENABLE_TEXT },                                     // {"On/Off"    ,"",SVT_AI_ENABLE_TEXT},
    745              { L_WORD126, L_WORD237, SVT_AI_GAIN },                                            // {"Gain"      ,"",SVT_AI_GAIN},
    746              { L_WORD127, L_WORD237, SVT_AI_OFFSET },                                          // {"Offset"    ,"",SVT_AI_OFFSET},
    747              { L_WORD128, L_WORD237, SVT_AI_CALC_VAL },                                        // {"Value"     ,"",SVT_AI_CALC_VAL},
    748              { L_WORD36, L_WORD237, SVT_AI_UNIT },                                            // {"Unit"      ,"",SVT_AI_UNIT},
    749          };
    750          
    751          ValueList SensorValueList1[] =  {
   \                     SensorValueList1:
   \   00000048                      DS8 60
   \   00000084                      REQUIRE `?<Initializer for SensorValueList1>`
    752              { L_WORD293, L_WORD237, SVT_AI_CAL_DATA_PERCENT },                                // {"%"  ,"",SVT_AI_LOCATION},
    753              { L_WORD439, L_WORD237, SVT_AI_CAL_DATA_FRO },                                    // {"FRO"  ,"",SVT_AI_LOCATION},
    754              { L_WORD440, L_WORD237, SVT_AI_CAL_DATA_G1 },                                     // {"G1"    ,"",SVT_AI_ENABLE_TEXT},
    755              { L_WORD441, L_WORD237, SVT_AI_CAL_DATA_G2 },                                     // {"G2"      ,"",SVT_AI_GAIN},
    756              { L_WORD442, L_WORD237, SVT_AI_CAL_DATA_G3 },                                     // {"G3"    ,"",SVT_AI_OFFSET},
    757          };
    758          
    759          ValueList SensorValueList2[] = {
   \                     SensorValueList2:
   \   00000084                      DS8 72
   \   000000CC                      REQUIRE `?<Initializer for SensorValueList2>`
    760              { L_WORD439, L_WORD237, SVT_AI_CAL_DATA_FRO },                             // {"FRO"              ,"",SVT_AI_CAL_DATA_FRO},
    761              { L_WORD440, L_WORD237, SVT_AI_CAL_DATA_G1 },                              // {"G1"               ,"",SVT_AI_CAL_DATA_G1},
    762              { L_WORD441, L_WORD237, SVT_AI_CAL_DATA_G2 },                              // {"G2"               ,"",SVT_AI_CAL_DATA_G2},
    763              { L_WORD442, L_WORD237, SVT_AI_CAL_DATA_G3 },                              // {"G3"               ,"",SVT_AI_CAL_DATA_G3},
    764              { L_WORD443, L_WORD237, SVT_AI_CAL_DATA_NL1 },                             // {"NL1"              ,"",SVT_AI_CAL_DATA_NL1},
    765              { L_WORD444, L_WORD237, SVT_AI_CAL_DATA_NL2 },                             // {"NL2"              ,"",SVT_AI_CAL_DATA_NL2},
    766          };
    767          
    768          ValueList SensorValueList3[] = {
   \                     SensorValueList3:
   \   000000CC                      DS8 36
   \   000000F0                      REQUIRE `?<Initializer for SensorValueList3>`
    769              { L_WORD937, L_WORD237, SVT_AI_CAL_DATA_ENTRY },                           // {"Entry"            ,"",SVT_AI_CAL_DATA_ENTRY},
    770              { L_WORD248, L_WORD237, SVT_AI_CAL_DATA_FRO },                             // {"mAmp"             ,"",SVT_AI_CAL_DATA_FRO},
    771              { L_WORD295, L_WORD237, SVT_AI_CAL_DATA_G1 },                              // {"G1"               ,"",SVT_AI_CAL_DATA_G1},
    772          };
    773          
    774          ValueList SensorValueList4[] = {
   \                     SensorValueList4:
   \   000000F0                      DS8 48
   \   00000120                      REQUIRE `?<Initializer for SensorValueList4>`
    775              { L_WORD439, L_WORD237, SVT_AI_CAL_DATA_FRO },                             // {"FRO"              ,"",SVT_AI_CAL_DATA_FRO},
    776              { L_WORD440, L_WORD237, SVT_AI_CAL_DATA_G1 },                              // {"G1"               ,"",SVT_AI_CAL_DATA_G1},
    777              { L_WORD935, L_WORD237, SVT_AI_CAL_DATA_TSS },                             // {"TSS"              ,"",SVT_AI_CAL_DATA_TZS},
    778              { L_WORD936, L_WORD237, SVT_AI_CAL_DATA_TZS },                             // {"TZS"              ,"",SVT_AI_CAL_DATA_TSS},
    779          };
    780          

   \                                 In segment CODE, align 4, keep-with-next
    781          ValueList* AnalogInput::GetValueInfoTable(int &Entries, int Index) {
   \                     ??GetValueInfoTable:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
   \   00000008   0210A0E1           MOV      R1,R2
    782              return GetValueInfoTableStatic(Entries, Index);
   \   0000000C   ........           BL       ??GetValueInfoTableStatic
   \   00000010                      REQUIRE ?Subroutine44
   \   00000010                      ;; // Fall through to label ?Subroutine44
    783          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    784          

   \                                 In segment CODE, align 4, keep-with-next
    785          ValueList* AnalogInput::GetValueInfoTableStatic(int &Entries, int Index) {
    786              ValueList *ValListPtr;
    787              switch ( Index ) {
   \                     ??GetValueInfoTableStatic:
   \   00000000   ........           LDR      R2,??DataTable20  ;; SensorValueList0
   \   00000004   011041E2           SUB      R1,R1,#+1
   \   00000008   030051E3           CMP      R1,#+3
   \   0000000C   0300008A           BHI      ??GetValueInfoTableStatic_2
   \   00000010   013F8FE2           ADR      R3,??GetValueInfoTableStatic_1
   \   00000014   0130D3E7           LDRB     R3,[R3, R1]
   \   00000018   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetValueInfoTableStatic_1:
   \   0000001C   0205070A           DC8      +2,+5,+7,+10
    788              default:
    789              case 0:
    790                  ValListPtr = SensorValueList0;
    791                  Entries = NELEMENTS(SensorValueList0);
   \                     ??GetValueInfoTableStatic_2:
   \   00000020   0610A0E3           MOV      R1,#+6
   \   00000024   090000EA           B        ??GetValueInfoTableStatic_3
    792                  break;
    793              case 1:
    794                  ValListPtr = SensorValueList1;
   \                     ??GetValueInfoTableStatic_4:
   \   00000028   482082E2           ADD      R2,R2,#+72
    795                  Entries = NELEMENTS(SensorValueList1);
   \   0000002C   0510A0E3           MOV      R1,#+5
   \   00000030   060000EA           B        ??GetValueInfoTableStatic_3
    796                  break;
    797              case 2:
    798                  ValListPtr = SensorValueList2;
   \                     ??GetValueInfoTableStatic_5:
   \   00000034   842082E2           ADD      R2,R2,#+132
    799                  Entries = NELEMENTS(SensorValueList2);
   \   00000038   F8FFFFEA           B        ??GetValueInfoTableStatic_2
    800                  break;
    801              case 3:
    802                  ValListPtr = SensorValueList3;
   \                     ??GetValueInfoTableStatic_6:
   \   0000003C   CC2082E2           ADD      R2,R2,#+204
    803                  Entries = NELEMENTS(SensorValueList3);
   \   00000040   0310A0E3           MOV      R1,#+3
   \   00000044   010000EA           B        ??GetValueInfoTableStatic_3
    804                  break;
    805              case 4:
    806                  ValListPtr = SensorValueList4;
   \                     ??GetValueInfoTableStatic_7:
   \   00000048   F02082E2           ADD      R2,R2,#+240
    807                  Entries = NELEMENTS(SensorValueList4);
   \   0000004C   0410A0E3           MOV      R1,#+4
   \                     ??GetValueInfoTableStatic_3:
   \   00000050   001080E5           STR      R1,[R0, #+0]
    808                  break;
    809              }
    810              return (ValListPtr);
   \   00000054   0200A0E1           MOV      R0,R2
   \   00000058   1EFF2FE1           BX       LR               ;; return
    811          }
    812          
    813          

   \                                 In segment CODE, align 4, keep-with-next
    814          ValueList* AnalogInput::GetServiceValueInfoTable(int &Entries) {
    815              return GetServiceValueInfoTableStatic(Entries);
   \                     ??GetServiceValueInfoTable:
   \   00000000   1500A0E3           MOV      R0,#+21
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   ........           B        ?Subroutine49
    816          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine49:
   \   00000000   ........           LDR      R0,??DataTable21  ;; ??ServiceReportSensorValueList
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    817          ValueList* AnalogInput::GetServiceValueInfoTableStatic(int &Entries) {
    818              Entries = NELEMENTS(ServiceReportSensorValueList);
   \                     ??GetServiceValueInfoTableStatic:
   \   00000000   1510A0E3           MOV      R1,#+21
   \   00000004   001080E5           STR      R1,[R0, #+0]
    819              return (ServiceReportSensorValueList);
   \   00000008                      REQUIRE ?Subroutine49
   \   00000008                      ;; // Fall through to label ?Subroutine49
    820          }
    821          
    822          

   \                                 In segment CODE, align 4, keep-with-next
    823          vector<int>AnalogInput::GetValueIdVector(int Index) {
   \                     ??GetValueIdVector:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    824              vector<int>tmpList;
    825              switch ( Index ) {
   \   00000004   ........           LDR      R5,??DataTable20  ;; SensorValueList0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   016046E2           SUB      R6,R6,#+1
   \   00000018   030056E3           CMP      R6,#+3
   \   0000001C   0300008A           BHI      ??GetValueIdVector_2
   \   00000020   010F8FE2           ADR      R0,??GetValueIdVector_1
   \   00000024   0600D0E7           LDRB     R0,[R0, R6]
   \   00000028   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValueIdVector_1:
   \   0000002C   0A141D27           DC8      +10,+20,+29,+39
    826              default:
    827              case 0:
    828                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList0); i++ ) {
   \                     ??GetValueIdVector_2:
   \   00000030   0060A0E3           MOV      R6,#+0
    829                      tmpList.push_back(SensorValueList0[i].Value);
   \                     ??GetValueIdVector_3:
   \   00000034   0C00A0E3           MOV      R0,#+12
   \   00000038   905621E0           MLA      R1,R0,R6,R5
   \   0000003C   081091E5           LDR      R1,[R1, #+8]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
    830                  }
   \   00000048   016086E2           ADD      R6,R6,#+1
   \   0000004C   060056E3           CMP      R6,#+6
   \   00000050   2600002A           BCS      ??GetValueIdVector_4
   \   00000054   F6FFFFEA           B        ??GetValueIdVector_3
    831                  break;
    832              case 1:
    833                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList1); i++ ) {
   \                     ??GetValueIdVector_5:
   \   00000058   0060A0E3           MOV      R6,#+0
    834                      tmpList.push_back(SensorValueList1[i].Value);
   \                     ??GetValueIdVector_6:
   \   0000005C   0C00A0E3           MOV      R0,#+12
   \   00000060   905621E0           MLA      R1,R0,R6,R5
   \   00000064   501091E5           LDR      R1,[R1, #+80]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
    835                  }
   \   00000070   016086E2           ADD      R6,R6,#+1
   \   00000074   050056E3           CMP      R6,#+5
   \   00000078   1C00002A           BCS      ??GetValueIdVector_4
   \   0000007C   F6FFFFEA           B        ??GetValueIdVector_6
    836                  break;
    837              case 2:
    838                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList2); i++ ) {
   \                     ??GetValueIdVector_7:
   \   00000080   0060A0E3           MOV      R6,#+0
    839                      tmpList.push_back(SensorValueList2[i].Value);
   \                     ??GetValueIdVector_8:
   \   00000084   0C00A0E3           MOV      R0,#+12
   \   00000088   905621E0           MLA      R1,R0,R6,R5
   \   0000008C   8C1091E5           LDR      R1,[R1, #+140]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
    840                  }
   \   00000098   016086E2           ADD      R6,R6,#+1
   \   0000009C   060056E3           CMP      R6,#+6
   \   000000A0   F7FFFF3A           BCC      ??GetValueIdVector_8
    841              case 3:
    842                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList3); i++ ) {
   \                     ??GetValueIdVector_9:
   \   000000A4   0060A0E3           MOV      R6,#+0
    843                      tmpList.push_back(SensorValueList3[i].Value);
   \                     ??GetValueIdVector_10:
   \   000000A8   0C00A0E3           MOV      R0,#+12
   \   000000AC   905621E0           MLA      R1,R0,R6,R5
   \   000000B0   D41091E5           LDR      R1,[R1, #+212]
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
    844                  }
   \   000000BC   016086E2           ADD      R6,R6,#+1
   \   000000C0   030056E3           CMP      R6,#+3
   \   000000C4   0900002A           BCS      ??GetValueIdVector_4
   \   000000C8   F6FFFFEA           B        ??GetValueIdVector_10
    845                  break;
    846              case 4:
    847                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList4); i++ ) {
   \                     ??GetValueIdVector_11:
   \   000000CC   0060A0E3           MOV      R6,#+0
    848                      tmpList.push_back(SensorValueList4[i].Value);
   \                     ??GetValueIdVector_12:
   \   000000D0   0C00A0E3           MOV      R0,#+12
   \   000000D4   905621E0           MLA      R1,R0,R6,R5
   \   000000D8   F81091E5           LDR      R1,[R1, #+248]
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
    849                  }
   \   000000E4   016086E2           ADD      R6,R6,#+1
   \   000000E8   040056E3           CMP      R6,#+4
   \   000000EC   F7FFFF3A           BCC      ??GetValueIdVector_12
    850                  break;
    851              }
    852              return (tmpList);
   \                     ??GetValueIdVector_4:
   \   000000F0   ........           B        ??Subroutine43_0
    853          }

   \                                 In segment CODE, align 4, keep-with-next
    854          vector<ValueList>AnalogInput::GetValueInfoVector(int Index) {
   \                     ??GetValueInfoVector:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    855              vector<ValueList>tmpList;
    856              switch ( Index ) {
   \   00000004   ........           LDR      R5,??DataTable20  ;; SensorValueList0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   040056E3           CMP      R6,#+4
   \   00000018   3400008A           BHI      ??GetValueInfoVector_2
   \   0000001C   010F8FE2           ADR      R0,??GetValueInfoVector_1
   \   00000020   0600D0E7           LDRB     R0,[R0, R6]
   \   00000024   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValueInfoVector_1:
   \   00000028   010A141E           DC8      +1,+10,+20,+30
   \   0000002C   28000000           DC8      +40,+0,+0,+0
    857              case 0:
    858                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList0); i++ ) {
   \                     ??GetValueInfoVector_3:
   \   00000030   0060A0E3           MOV      R6,#+0
    859                      tmpList.push_back(SensorValueList0[i]);
   \                     ??GetValueInfoVector_4:
   \   00000034   0C00A0E3           MOV      R0,#+12
   \   00000038   905621E0           MLA      R1,R0,R6,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    860                  }
   \   00000044   016086E2           ADD      R6,R6,#+1
   \   00000048   060056E3           CMP      R6,#+6
   \   0000004C   2700002A           BCS      ??GetValueInfoVector_2
   \   00000050   F7FFFFEA           B        ??GetValueInfoVector_4
    861                  break;
    862              case 1:
    863                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList1); i++ ) {
   \                     ??GetValueInfoVector_5:
   \   00000054   0060A0E3           MOV      R6,#+0
    864                      tmpList.push_back(SensorValueList1[i]);
   \                     ??GetValueInfoVector_6:
   \   00000058   0C00A0E3           MOV      R0,#+12
   \   0000005C   905621E0           MLA      R1,R0,R6,R5
   \   00000060   481081E2           ADD      R1,R1,#+72
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    865                  }
   \   0000006C   016086E2           ADD      R6,R6,#+1
   \   00000070   050056E3           CMP      R6,#+5
   \   00000074   1D00002A           BCS      ??GetValueInfoVector_2
   \   00000078   F6FFFFEA           B        ??GetValueInfoVector_6
    866                  break;
    867              case 2:
    868                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList2); i++ ) {
   \                     ??GetValueInfoVector_7:
   \   0000007C   0060A0E3           MOV      R6,#+0
    869                      tmpList.push_back(SensorValueList2[i]);
   \                     ??GetValueInfoVector_8:
   \   00000080   0C00A0E3           MOV      R0,#+12
   \   00000084   905621E0           MLA      R1,R0,R6,R5
   \   00000088   841081E2           ADD      R1,R1,#+132
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    870                  }
   \   00000094   016086E2           ADD      R6,R6,#+1
   \   00000098   060056E3           CMP      R6,#+6
   \   0000009C   1300002A           BCS      ??GetValueInfoVector_2
   \   000000A0   F6FFFFEA           B        ??GetValueInfoVector_8
    871                  break;
    872              case 3:
    873                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList3); i++ ) {
   \                     ??GetValueInfoVector_9:
   \   000000A4   0060A0E3           MOV      R6,#+0
    874                      tmpList.push_back(SensorValueList3[i]);
   \                     ??GetValueInfoVector_10:
   \   000000A8   0C00A0E3           MOV      R0,#+12
   \   000000AC   905621E0           MLA      R1,R0,R6,R5
   \   000000B0   CC1081E2           ADD      R1,R1,#+204
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    875                  }
   \   000000BC   016086E2           ADD      R6,R6,#+1
   \   000000C0   030056E3           CMP      R6,#+3
   \   000000C4   0900002A           BCS      ??GetValueInfoVector_2
   \   000000C8   F6FFFFEA           B        ??GetValueInfoVector_10
    876                  break;
    877              case 4:
    878                  for ( unsigned i = 0; i < NELEMENTS(SensorValueList4); i++ ) {
   \                     ??GetValueInfoVector_11:
   \   000000CC   0060A0E3           MOV      R6,#+0
    879                      tmpList.push_back(SensorValueList4[i]);
   \                     ??GetValueInfoVector_12:
   \   000000D0   0C00A0E3           MOV      R0,#+12
   \   000000D4   905621E0           MLA      R1,R0,R6,R5
   \   000000D8   F01081E2           ADD      R1,R1,#+240
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    880                  }
   \   000000E4   016086E2           ADD      R6,R6,#+1
   \   000000E8   040056E3           CMP      R6,#+4
   \   000000EC   F7FFFF3A           BCC      ??GetValueInfoVector_12
    881                  break;
    882              }
    883              return (tmpList);
   \                     ??GetValueInfoVector_2:
   \   000000F0   ........           B        ??Subroutine43_0
    884          }
    885          
    886          

   \                                 In segment CODE, align 4, keep-with-next
    887          vector<ValueList>AnalogInput::GetServiceValueInfoVector(void) {
   \                     ??GetServiceValueInfoVector:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    888              vector<ValueList>tmpList;
   \   00000008   ........           _BLF     ??_Zero,??_Zero??rA
    889              for ( unsigned i = 0; i < NELEMENTS(ServiceReportSensorValueList); i++ ) {
   \   0000000C   0050A0E3           MOV      R5,#+0
    890                  tmpList.push_back(ServiceReportSensorValueList[i]);
   \                     ??GetServiceValueInfoVector_1:
   \   00000010   ........           LDR      R1,??DataTable21  ;; ??ServiceReportSensorValueList
   \   00000014   0C00A0E3           MOV      R0,#+12
   \   00000018   901521E0           MLA      R1,R0,R5,R1
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Push_back0_3,??_Push_back0??rA_2
    891              }
   \   00000024   015085E2           ADD      R5,R5,#+1
   \   00000028   150055E3           CMP      R5,#+21
   \   0000002C   F7FFFF3A           BCC      ??GetServiceValueInfoVector_1
    892              return (tmpList);
   \   00000030   ........           B        ?Subroutine46
    893          }
    894          
    895          
    896          
    897          //end librerian
    898          

   \                                 In segment CODE, align 4, keep-with-next
    899          int AnalogInput::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
    900              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    901              switch ( pCH->CommandNo ) {
   \   00000008   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0100D1E5           LDRB     R0,[R1, #+1]
   \   00000014   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000018   650050E2           SUBS     R0,R0,#+101
   \   0000001C   0200000A           BEQ      ??ReceiveData_1
   \   00000020   010050E2           SUBS     R0,R0,#+1
   \   00000024   2E00000A           BEQ      ??ReceiveData_2
   \   00000028   670000EA           B        ??ReceiveData_3
    902              case CMD_GENERIC_REALTIME_DATA:
    903                  {
    904                      ANPRO10_COMMAND_2508  *pData = (ANPRO10_COMMAND_2508 *)data;
    905                      HWFailure       = pData->HWFailure;
   \                     ??ReceiveData_1:
   \   0000002C   0800D1E5           LDRB     R0,[R1, #+8]
   \   00000030   0C01C4E5           STRB     R0,[R4, #+268]
    906                      MyHWFailure     = pData->MyHWFailure;
   \   00000034   0900D1E5           LDRB     R0,[R1, #+9]
   \   00000038   0D01C4E5           STRB     R0,[R4, #+269]
    907                      ActiveAlarms    = pData->ActiveAlarms;
   \   0000003C   0E00D1E5           LDRB     R0,[R1, #+14]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000048   0C20D1E5           LDRB     R2,[R1, #+12]
   \   0000004C   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000050   0B20D1E5           LDRB     R2,[R1, #+11]
   \   00000054   000482E1           ORR      R0,R2,R0, LSL #+8
   \   00000058   380084E5           STR      R0,[R4, #+56]
    908                      FilteredValue   = pData->FilteredValue;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   0D20A0E1           MOV      R2,SP
   \                     ??ReceiveData_4:
   \   00000064   133081E2           ADD      R3,R1,#+19
   \   00000068   0330D0E7           LDRB     R3,[R0, +R3]
   \   0000006C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   040050E3           CMP      R0,#+4
   \   00000078   F9FFFFBA           BLT      ??ReceiveData_4
   \   0000007C   00009DE5           LDR      R0,[SP, #+0]
    909                      CalcValue       = pData->CalcValue;
   \   00000080   04208DE2           ADD      R2,SP,#+4
   \   00000084   440184E5           STR      R0,[R4, #+324]
   \   00000088   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_5:
   \   0000008C   0F3081E2           ADD      R3,R1,#+15
   \   00000090   0330D0E7           LDRB     R3,[R0, +R3]
   \   00000094   0230C0E7           STRB     R3,[R0, +R2]
   \   00000098   010080E2           ADD      R0,R0,#+1
   \   0000009C   040050E3           CMP      R0,#+4
   \   000000A0   F9FFFFBA           BLT      ??ReceiveData_5
   \   000000A4   04009DE5           LDR      R0,[SP, #+4]
   \   000000A8   480184E5           STR      R0,[R4, #+328]
    910                      ResultOK        = pData->ResultOK;
   \   000000AC   0A00D1E5           LDRB     R0,[R1, #+10]
   \   000000B0   3601C4E5           STRB     R0,[R4, #+310]
    911                      // Only check alarm for Master TCU for now
    912                      if ( !CurrentDeviceAddress && CurrentDeviceId == DEVICE_TCU ) {
   \   000000B4   1C019FE5           LDR      R0,??ReceiveData_6  ;; CurrentDeviceAddress
   \   000000B8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   14019F05           LDREQ    R0,??ReceiveData_6+0x4  ;; CurrentDeviceId
   \   000000C4   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   000000C8   20005003           CMPEQ    R0,#+32
   \   000000CC   0200001A           BNE      ??ReceiveData_7
    913                          CheckAlarms(AlarmSet);
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   C00084E2           ADD      R0,R4,#+192
   \   000000D8   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    914                      }
    915          
    916                  }
    917                  return (E_OK);
   \                     ??ReceiveData_7:
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   3A0000EA           B        ??ReceiveData_8
    918              case CMD_GENERIC_STATIC_DATA:
    919                  {
    920                      ANPRO10_COMMAND_2510  *pData = (ANPRO10_COMMAND_2510 *)data;
    921                      Gain         = pData->Gain;
   \                     ??ReceiveData_2:
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   08208DE2           ADD      R2,SP,#+8
   \                     ??ReceiveData_9:
   \   000000EC   083081E2           ADD      R3,R1,#+8
   \   000000F0   0330D0E7           LDRB     R3,[R0, +R3]
   \   000000F4   0230C0E7           STRB     R3,[R0, +R2]
   \   000000F8   010080E2           ADD      R0,R0,#+1
   \   000000FC   040050E3           CMP      R0,#+4
   \   00000100   F9FFFFBA           BLT      ??ReceiveData_9
   \   00000104   08009DE5           LDR      R0,[SP, #+8]
    922                      Offset       = pData->Offset;
   \   00000108   0C208DE2           ADD      R2,SP,#+12
   \   0000010C   3C0184E5           STR      R0,[R4, #+316]
   \   00000110   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_10:
   \   00000114   0C3081E2           ADD      R3,R1,#+12
   \   00000118   0330D0E7           LDRB     R3,[R0, +R3]
   \   0000011C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000120   010080E2           ADD      R0,R0,#+1
   \   00000124   040050E3           CMP      R0,#+4
   \   00000128   F9FFFFBA           BLT      ??ReceiveData_10
   \   0000012C   0C009DE5           LDR      R0,[SP, #+12]
    923                      MinRange     = pData->MinRange;
   \   00000130   10208DE2           ADD      R2,SP,#+16
   \   00000134   400184E5           STR      R0,[R4, #+320]
   \   00000138   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_11:
   \   0000013C   103081E2           ADD      R3,R1,#+16
   \   00000140   0330D0E7           LDRB     R3,[R0, +R3]
   \   00000144   0230C0E7           STRB     R3,[R0, +R2]
   \   00000148   010080E2           ADD      R0,R0,#+1
   \   0000014C   040050E3           CMP      R0,#+4
   \   00000150   F9FFFFBA           BLT      ??ReceiveData_11
   \   00000154   10009DE5           LDR      R0,[SP, #+16]
    924                      MaxRange     = pData->MaxRange;
   \   00000158   14208DE2           ADD      R2,SP,#+20
   \   0000015C   5C0184E5           STR      R0,[R4, #+348]
   \   00000160   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_12:
   \   00000164   143081E2           ADD      R3,R1,#+20
   \   00000168   0330D0E7           LDRB     R3,[R0, +R3]
   \   0000016C   0230C0E7           STRB     R3,[R0, +R2]
   \   00000170   010080E2           ADD      R0,R0,#+1
   \   00000174   040050E3           CMP      R0,#+4
   \   00000178   F9FFFFBA           BLT      ??ReceiveData_12
   \   0000017C   14009DE5           LDR      R0,[SP, #+20]
   \   00000180   600184E5           STR      R0,[R4, #+352]
    925                      Enable       = pData->Enable;
   \   00000184   1800D1E5           LDRB     R0,[R1, #+24]
   \   00000188   3401C4E5           STRB     R0,[R4, #+308]
    926                      NewSensor    = pData->NewSensor;
   \   0000018C   1900D1E5           LDRB     R0,[R1, #+25]
    927                      SerialNumber = pData->SerialNo;
   \   00000190   1A1081E2           ADD      R1,R1,#+26
   \   00000194   3701C4E5           STRB     R0,[R4, #+311]
   \   00000198   18008DE2           ADD      R0,SP,#+24
   \   0000019C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001A0   ........           LDR      R1,??DataTable22  ;; ??npos
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   003091E5           LDR      R3,[R1, #+0]
   \   000001AC   0010A0E1           MOV      R1,R0
   \   000001B0   D80084E2           ADD      R0,R4,#+216
   \   000001B4   ........           _BLF     ??assign,??assign??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   18008DE2           ADD      R0,SP,#+24
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   C3FFFFEA           B        ??ReceiveData_7
    928                  }
    929                  return (E_OK);
    930              default:
    931                  return (E_UNKNOWN_COMMAND);
   \                     ??ReceiveData_3:
   \   000001CC   0100A0E3           MOV      R0,#+1
   \                     ??ReceiveData_8:
   \   000001D0   34D08DE2           ADD      SP,SP,#+52
   \   000001D4   ........           B        ?Subroutine45
   \                     ??ReceiveData_6:
   \   000001D8   ........           DC32     CurrentDeviceAddress
   \   000001DC   ........           DC32     CurrentDeviceId
    932              };
    933          }

   \                                 In segment CODE, align 4, keep-with-next
    934          int AnalogInput::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
    935              switch ( cmd ) {
   \   00000008   0E20A0E3           MOV      R2,#+14
   \   0000000C   FF30A0E3           MOV      R3,#+255
   \   00000010   00C0A0E3           MOV      R12,#+0
   \   00000014   651051E2           SUBS     R1,R1,#+101
   \   00000018   0200000A           BEQ      ??SendData_1
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   3500000A           BEQ      ??SendData_2
   \   00000024   740000EA           B        ??SendData_3
    936              case CMD_GENERIC_REALTIME_DATA:
    937                  {
    938                      QueueANPRO10_COMMAND_2508  Cmd;
    939                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_1:
   \   00000028   00C08DE5           STR      R12,[SP, #+0]
    940                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   0000002C   0430CDE5           STRB     R3,[SP, #+4]
    941                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   00000030   0520CDE5           STRB     R2,[SP, #+5]
    942          
    943                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000034   6520A0E3           MOV      R2,#+101
   \   00000038   B620CDE1           STRH     R2,[SP, #+6]
    944                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   1720A0E3           MOV      R2,#+23
   \   00000040   B820CDE1           STRH     R2,[SP, #+8]
    945                      Cmd.Data.ObjectId       = IDNumber;
   \   00000044   9C1090E5           LDR      R1,[R0, #+156]
   \   00000048   0A10CDE5           STRB     R1,[SP, #+10]
   \   0000004C   2114A0E1           LSR      R1,R1,#+8
   \   00000050   0B10CDE5           STRB     R1,[SP, #+11]
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   0C10CDE5           STRB     R1,[SP, #+12]
   \   0000005C   2114A0E1           LSR      R1,R1,#+8
   \   00000060   0D10CDE5           STRB     R1,[SP, #+13]
    946                      Cmd.Data.HWFailure      = HWFailure;
   \   00000064   0C21D0E5           LDRB     R2,[R0, #+268]
   \   00000068   0E20CDE5           STRB     R2,[SP, #+14]
    947                      Cmd.Data.MyHWFailure    = MyHWFailure;
   \   0000006C   0D21D0E5           LDRB     R2,[R0, #+269]
   \   00000070   0F20CDE5           STRB     R2,[SP, #+15]
    948                      Cmd.Data.ActiveAlarms   = ActiveAlarms;
   \   00000074   381090E5           LDR      R1,[R0, #+56]
    949                      Cmd.Data.FilteredValue  = FilteredValue;
   \   00000078   19208DE2           ADD      R2,SP,#+25
   \   0000007C   1110CDE5           STRB     R1,[SP, #+17]
   \   00000080   2114A0E1           LSR      R1,R1,#+8
   \   00000084   1210CDE5           STRB     R1,[SP, #+18]
   \   00000088   2114A0E1           LSR      R1,R1,#+8
   \   0000008C   1310CDE5           STRB     R1,[SP, #+19]
   \   00000090   2114A0E1           LSR      R1,R1,#+8
   \   00000094   1410CDE5           STRB     R1,[SP, #+20]
   \   00000098   0010A0E3           MOV      R1,#+0
   \                     ??SendData_4:
   \   0000009C   513F80E2           ADD      R3,R0,#+324
   \   000000A0   0330D1E7           LDRB     R3,[R1, +R3]
   \   000000A4   0230C1E7           STRB     R3,[R1, +R2]
   \   000000A8   011081E2           ADD      R1,R1,#+1
   \   000000AC   040051E3           CMP      R1,#+4
   \   000000B0   F9FFFFBA           BLT      ??SendData_4
    950                      Cmd.Data.CalcValue      = CalcValue;
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   15208DE2           ADD      R2,SP,#+21
   \                     ??SendData_5:
   \   000000BC   523F80E2           ADD      R3,R0,#+328
   \   000000C0   0330D1E7           LDRB     R3,[R1, +R3]
   \   000000C4   0230C1E7           STRB     R3,[R1, +R2]
   \   000000C8   011081E2           ADD      R1,R1,#+1
   \   000000CC   040051E3           CMP      R1,#+4
   \   000000D0   F9FFFFBA           BLT      ??SendData_5
    951                      Cmd.Data.ResultOK       = ResultOK;
   \   000000D4   3601D0E5           LDRB     R0,[R0, #+310]
   \   000000D8   1000CDE5           STRB     R0,[SP, #+16]
    952          
    953                      bool sent = ANPRO10SendNormal(&Cmd);
    954                      if ( !sent ) return (E_QUEUE_FULL);
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   0100001A           BNE      ??SendData_6
   \                     ??SendData_7:
   \   000000EC   0300A0E3           MOV      R0,#+3
   \   000000F0   420000EA           B        ??SendData_8
    955                      else return (E_OK);
   \                     ??SendData_6:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   400000EA           B        ??SendData_8
    956                  }
    957              case CMD_GENERIC_STATIC_DATA:
    958                  {
    959                      QueueANPRO10_COMMAND_2510  Cmd;
    960                      Cmd.TxInfo.Port        = NULL;
   \                     ??SendData_2:
   \   000000FC   24C08DE5           STR      R12,[SP, #+36]
    961                      Cmd.TxInfo.rxAddr      = DEVICE_BROADCAST_ADDR;
   \   00000100   2830CDE5           STRB     R3,[SP, #+40]
    962                      Cmd.TxInfo.rxId        = DEVICE_BROADCAST_TXU;
   \   00000104   2920CDE5           STRB     R2,[SP, #+41]
    963                      Cmd.Data.CommandNo     = CMD_GENERIC_STATIC_DATA;
   \   00000108   6620A0E3           MOV      R2,#+102
   \   0000010C   BA22CDE1           STRH     R2,[SP, #+42]
    964                      Cmd.Data.ndb           = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000110   2520A0E3           MOV      R2,#+37
   \   00000114   BC22CDE1           STRH     R2,[SP, #+44]
    965                      Cmd.Data.ObjectId      = IDNumber;
   \   00000118   9C1090E5           LDR      R1,[R0, #+156]
    966          
    967                      Cmd.Data.Gain          = Gain;
   \   0000011C   32208DE2           ADD      R2,SP,#+50
   \   00000120   2E10CDE5           STRB     R1,[SP, #+46]
   \   00000124   2114A0E1           LSR      R1,R1,#+8
   \   00000128   2F10CDE5           STRB     R1,[SP, #+47]
   \   0000012C   2114A0E1           LSR      R1,R1,#+8
   \   00000130   3010CDE5           STRB     R1,[SP, #+48]
   \   00000134   2114A0E1           LSR      R1,R1,#+8
   \   00000138   3110CDE5           STRB     R1,[SP, #+49]
   \   0000013C   0010A0E3           MOV      R1,#+0
   \                     ??SendData_9:
   \   00000140   4F3F80E2           ADD      R3,R0,#+316
   \   00000144   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000148   0230C1E7           STRB     R3,[R1, +R2]
   \   0000014C   011081E2           ADD      R1,R1,#+1
   \   00000150   040051E3           CMP      R1,#+4
   \   00000154   F9FFFFBA           BLT      ??SendData_9
    968                      Cmd.Data.Offset        = Offset;
   \   00000158   0010A0E3           MOV      R1,#+0
   \   0000015C   36208DE2           ADD      R2,SP,#+54
   \                     ??SendData_10:
   \   00000160   503F80E2           ADD      R3,R0,#+320
   \   00000164   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000168   0230C1E7           STRB     R3,[R1, +R2]
   \   0000016C   011081E2           ADD      R1,R1,#+1
   \   00000170   040051E3           CMP      R1,#+4
   \   00000174   F9FFFFBA           BLT      ??SendData_10
    969                      Cmd.Data.MinRange      = MinRange;
   \   00000178   0010A0E3           MOV      R1,#+0
   \   0000017C   3A208DE2           ADD      R2,SP,#+58
   \                     ??SendData_11:
   \   00000180   573F80E2           ADD      R3,R0,#+348
   \   00000184   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000188   0230C1E7           STRB     R3,[R1, +R2]
   \   0000018C   011081E2           ADD      R1,R1,#+1
   \   00000190   040051E3           CMP      R1,#+4
   \   00000194   F9FFFFBA           BLT      ??SendData_11
    970                      Cmd.Data.MaxRange      = MaxRange;
   \   00000198   0010A0E3           MOV      R1,#+0
   \   0000019C   3E208DE2           ADD      R2,SP,#+62
   \                     ??SendData_12:
   \   000001A0   583F80E2           ADD      R3,R0,#+352
   \   000001A4   0330D1E7           LDRB     R3,[R1, +R3]
   \   000001A8   0230C1E7           STRB     R3,[R1, +R2]
   \   000001AC   011081E2           ADD      R1,R1,#+1
   \   000001B0   040051E3           CMP      R1,#+4
   \   000001B4   F9FFFFBA           BLT      ??SendData_12
    971                      Cmd.Data.Enable        = Enable;
   \   000001B8   3421D0E5           LDRB     R2,[R0, #+308]
   \   000001BC   4220CDE5           STRB     R2,[SP, #+66]
    972                      Cmd.Data.NewSensor     = NewSensor;
   \   000001C0   3721D0E5           LDRB     R2,[R0, #+311]
    973                      strncpy(Cmd.Data.SerialNo, SerialNumber.c_str(), 15);
   \   000001C4   D80080E2           ADD      R0,R0,#+216
   \   000001C8   4320CDE5           STRB     R2,[SP, #+67]
   \   000001CC   181090E5           LDR      R1,[R0, #+24]
   \   000001D0   0F20A0E3           MOV      R2,#+15
   \   000001D4   100051E3           CMP      R1,#+16
   \   000001D8   04109025           LDRCS    R1,[R0, #+4]
   \   000001DC   04108032           ADDCC    R1,R0,#+4
   \   000001E0   44008DE2           ADD      R0,SP,#+68
   \   000001E4   ........           _BLF     strncpy,??strncpy??rA
    974                      bool sent = ANPRO10SendNormal(&Cmd);
    975                      if ( !sent ) return (E_QUEUE_FULL);
   \   000001E8   24008DE2           ADD      R0,SP,#+36
   \   000001EC   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   BEFFFF1A           BNE      ??SendData_6
   \   000001F8   BBFFFFEA           B        ??SendData_7
    976                      else return (E_OK);
    977                  }
    978              default:
    979                  return (E_UNKNOWN_COMMAND);
   \                     ??SendData_3:
   \   000001FC   0100A0E3           MOV      R0,#+1
   \                     ??SendData_8:
   \   00000200   54D08DE2           ADD      SP,SP,#+84
   \   00000204   ........           B        ?Subroutine44
    980              };
    981          
    982          }
    983          
    984          

   \                                 In segment CODE, align 4, keep-with-next
    985          void AnalogInput::NewValue(float NewValue) {
    986              HWFailure     = false;
   \                     ??NewValue:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0C21C0E5           STRB     R2,[R0, #+268]
    987              FilteredValue = NewValue;
   \   00000008   441180E5           STR      R1,[R0, #+324]
    988          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    989          

   \                                 In segment CODE, align 4, keep-with-next
    990          void AnalogInput::SetStatus(U8 *NewStatus) {
    991          }
   \                     ??SetStatus:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    992          

   \                                 In segment CODE, align 4, keep-with-next
    993          void AnalogInput::SetModifiedFlag(void) {
   \                     ??SetModifiedFlag:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    994              IsModified = true;
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   0000C4E5           STRB     R0,[R4, #+0]
    995              TimeModified = time(NULL);
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           _BLF     time,??time??rA
   \   00000018   500184E5           STR      R0,[R4, #+336]
    996              if ( PROPtr ) {
   \   0000001C   241194E5           LDR      R1,[R4, #+292]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0500000A           BEQ      ??SetModifiedFlag_1
    997                  PROPtr->SetModifiedFlag();
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   A41091E5           LDR      R1,[R1, #+164]
   \   00000030   541091E5           LDR      R1,[R1, #+84]
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   11FF2FE1           BX       R1
   \   0000003C   010000EA           B        ??SetModifiedFlag_2
    998              } else {
    999                  SignalSaveSettings(FLASH_SAVE_SETTINGS);
   \                     ??SetModifiedFlag_1:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   ........           _BLF     ??SignalSaveSettings,??SignalSaveSettings??rA
   1000              }
   1001          }
   \                     ??SetModifiedFlag_2:
   \   00000048   ........           B        ?Subroutine45
   1002          
   1003          

   \                                 In segment CODE, align 4, keep-with-next
   1004          int AnalogInput::GetBasicSensorType(void) {
   1005              return BasicSensorType;
   \                     ??GetBasicSensorType:
   \   00000000   100190E5           LDR      R0,[R0, #+272]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1006          }
   1007          

   \                                 In segment CODE, align 4, keep-with-next
   1008          void AnalogInput::SetIsPressureSns(bool TPressState) {
   1009              IsPressureSns = TPressState;
   \                     ??SetIsPressureSns:
   \   00000000   2011C0E5           STRB     R1,[R0, #+288]
   1010          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1011          

   \                                 In segment CODE, align 4, keep-with-next
   1012          bool AnalogInput::GetIsPressureSns(void) {
   1013              return IsPressureSns;
   \                     ??GetIsPressureSns:
   \   00000000   2001D0E5           LDRB     R0,[R0, #+288]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1014          }
   1015          

   \                                 In segment CODE, align 4, keep-with-next
   1016          bool AnalogInput::CanCalculate(void) {
   1017              bool CanCalc = false;
   1018              if ( Enable ) {
   \                     ??CanCalculate:
   \   00000000   3421D0E5           LDRB     R2,[R0, #+308]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0500000A           BEQ      ??CanCalculate_1
   1019                  if ( HWFailure || MyHWFailure ) {
   \   00000010   0C21D0E5           LDRB     R2,[R0, #+268]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0D21D005           LDRBEQ   R2,[R0, #+269]
   \   0000001C   00005203           CMPEQ    R2,#+0
   \   00000020   0400000A           BEQ      ??CanCalculate_2
   1020                      // HWFailure is set by e.g. ZBAna or SCADCard
   1021                      CalcValue = 0.0;
   \   00000024   0020A0E3           MOV      R2,#+0
   \                     ??CanCalculate_1:
   \   00000028   482180E5           STR      R2,[R0, #+328]
   1022                      ResultOK  = false;
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   3621C0E5           STRB     R2,[R0, #+310]
   \   00000034   000000EA           B        ??CanCalculate_3
   1023                  } else {
   1024                      CanCalc = true;
   \                     ??CanCalculate_2:
   \   00000038   0110A0E3           MOV      R1,#+1
   1025                  }
   1026              } else {
   1027                  CalcValue = 0.0;
   1028                  ResultOK  = false;
   1029              }
   1030              return (CanCalc);
   \                     ??CanCalculate_3:
   \   0000003C   0100A0E1           MOV      R0,R1
   \   00000040   1EFF2FE1           BX       LR               ;; return
   1031          }
   1032          
   1033          

   \                                 In segment CODE, align 4, keep-with-next
   1034          void AnalogInput::SetNewStatus(bool NewStatus) {
   1035          }
   \                     ??SetNewStatus:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1036          

   \                                 In segment CODE, align 4, keep-with-next
   1037          bool AnalogInput::GetErrorStatus(void) {
   1038              return Failure;
   \                     ??GetErrorStatus:
   \   00000000   3801D0E5           LDRB     R0,[R0, #+312]
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0100A013           MOVNE    R0,#+1
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   1039          }
   1040          
   1041          

   \                                 In segment CODE, align 4, keep-with-next
   1042          vector<PRogramObjectBase *>AnalogInput::GetProgramObjectBaseVector(vector<AnalogInput *>MyVect) {
   \                     ??GetProgramObjectBaseVector:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1043              vector<PRogramObjectBase *>ListVector;
   \   0000000C   ........           _BLF     ??_Zero,??_Zero??rA
   1044              for ( unsigned i = 0; i < MyVect.size(); i++ ) {
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   030000EA           B        ??GetProgramObjectBaseVector_1
   1045                  ListVector.push_back((PRogramObjectBase *)MyVect[i]);
   \                     ??GetProgramObjectBaseVector_2:
   \   00000018   061190E7           LDR      R1,[R0, +R6, LSL #+2]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Push_back0,??_Push_back0??rA_3
   1046              }
   \   00000024   016086E2           ADD      R6,R6,#+1
   \                     ??GetProgramObjectBaseVector_1:
   \   00000028   000095E5           LDR      R0,[R5, #+0]
   \   0000002C   041095E5           LDR      R1,[R5, #+4]
   \   00000030   001041E0           SUB      R1,R1,R0
   \   00000034   210156E1           CMP      R6,R1, LSR #+2
   \   00000038   F6FFFF3A           BCC      ??GetProgramObjectBaseVector_2
   1047              return (ListVector);
   \   0000003C   ........           B        ??Subroutine43_0
   1048          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ServiceReportSensorValueList`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 449, 237, 1201, 390, 237, 1212, 124, 237, 1209
   \              0000E8030000
   \              C1010000ED00
   \              0000B1040000
   \              86010000ED00
   \              0000BC040000
   \              7C000000ED00
   \              0000B9040000
   \   00000030   B2010000ED00       DC32 434, 237, 1202, 126, 237, 1204, 127, 237, 1205, 128, 237, 1208, 36
   \              0000B2040000
   \              7E000000ED00
   \              0000B4040000
   \              7F000000ED00
   \              0000B5040000
   \              80000000ED00
   \              0000B8040000
   \              24000000    
   \   00000064   ED000000C004       DC32 237, 1216, 450, 237, 1206, 451, 237, 1207, 74, 237, 1211, 390, 237
   \              0000C2010000
   \              ED000000B604
   \              0000C3010000
   \              ED000000B704
   \              00004A000000
   \              ED000000BB04
   \              000086010000
   \              ED000000    
   \   00000098   BC040000C401       DC32 1212, 452, 237, 1213, 453, 237, 1214, 454, 237, 1217, 455, 237
   \              0000ED000000
   \              BD040000C501
   \              0000ED000000
   \              BE040000C601
   \              0000ED000000
   \              C1040000C701
   \              0000ED000000
   \   000000C8   E2040000C801       DC32 1250, 456, 237, 1251, 457, 237, 1253, 458, 237, 1254, 459, 237
   \              0000ED000000
   \              E3040000C901
   \              0000ED000000
   \              E5040000CA01
   \              0000ED000000
   \              E6040000CB01
   \              0000ED000000
   \   000000F8   E7040000           DC32 1255

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SensorValueList0>`:
   \   00000000   7C000000ED00       DC32 124, 237, 1209, 434, 237, 1202, 126, 237, 1204, 127, 237, 1205
   \              0000B9040000
   \              B2010000ED00
   \              0000B2040000
   \              7E000000ED00
   \              0000B4040000
   \              7F000000ED00
   \              0000B5040000
   \   00000030   80000000ED00       DC32 128, 237, 1208, 36, 237, 1216
   \              0000B8040000
   \              24000000ED00
   \              0000C0040000
   \                     `?<Initializer for SensorValueList1>`:
   \   00000048   25010000ED00       DC32 293, 237, 1230, 439, 237, 1220, 440, 237, 1221, 441, 237, 1222
   \              0000CE040000
   \              B7010000ED00
   \              0000C4040000
   \              B8010000ED00
   \              0000C5040000
   \              B9010000ED00
   \              0000C6040000
   \   00000078   BA010000ED00       DC32 442, 237, 1223
   \              0000C7040000
   \                     `?<Initializer for SensorValueList2>`:
   \   00000084   B7010000ED00       DC32 439, 237, 1220, 440, 237, 1221, 441, 237, 1222, 442, 237, 1223
   \              0000C4040000
   \              B8010000ED00
   \              0000C5040000
   \              B9010000ED00
   \              0000C6040000
   \              BA010000ED00
   \              0000C7040000
   \   000000B4   BB010000ED00       DC32 443, 237, 1224, 444, 237, 1225
   \              0000C8040000
   \              BC010000ED00
   \              0000C9040000
   \                     `?<Initializer for SensorValueList3>`:
   \   000000CC   A9030000ED00       DC32 937, 237, 1228, 248, 237, 1220, 295, 237, 1221
   \              0000CC040000
   \              F8000000ED00
   \              0000C4040000
   \              27010000ED00
   \              0000C5040000
   \                     `?<Initializer for SensorValueList4>`:
   \   000000F0   B7010000ED00       DC32 439, 237, 1220, 440, 237, 1221, 935, 237, 1227, 936, 237, 1226
   \              0000C4040000
   \              B8010000ED00
   \              0000C5040000
   \              A7030000ED00
   \              0000CB040000
   \              A8030000ED00
   \              0000CA040000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Analog input">`:
   \   00000000   416E616C6F67       DC8 "Analog input"
   \              20696E707574
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   0000002D   000000             DC8 0, 0, 0
   \   00000030   546865206B65       DC8 "The keyword "
   \              79776F726420
   \              00          
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   556E6B6E6F77       DC8 "Unknown error started at line:"
   \              6E206572726F
   \              722073746172
   \              746564206174
   \              206C696E653A
   \              00          
   \   0000005F   00                 DC8 0
   \   00000060   2C20666F7220       DC8 ", for "
   \              00          
   \   00000067   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant " Bar">`:
   \   00000000   2042617200         DC8 " Bar"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   20746F2000         DC8 " to "
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   52616E67653A       DC8 "Range:"
   \              00          
   \   00000017   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2900               DC8 ")"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A00               DC8 ":"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2800               DC8 "("

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error">`:
   \   00000000   4572726F7200       DC8 "Error"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "None">`:
   \   00000000   4E6F6E6500         DC8 "None"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   307825307800       DC8 "0x%0x"
   \   0000000E   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput &AnalogInput::new AnalogInput()
   \                     `??new AnalogInput`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   590FA0E3           MOV      R0,#+356
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AnalogInput_1`
   \   00000014   ........           BL       ??AnalogInput
   \                     `??new AnalogInput_1`:
   \   00000018   ........           B        ?Subroutine44

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   3C409FE5           LDR      R4,??__sti__routine_1  ;; ??GlobalAISet
   \   00000008   3C509FE5           LDR      R5,??__sti__routine_1+0x4  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   1400C4E5           STRB     R0,[R4, #+20]
   \   00000038   0C0085E2           ADD      R0,R5,#+12
   \   0000003C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000040   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000048   ........           DC32     ??GlobalAISet
   \   0000004C   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     `?<Constant "None">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   3A0A0000           DC8      ":\n",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     `?<Constant "Analog input">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     SensorValueList0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     ??ServiceReportSensorValueList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnalogInput::AdjustSensor(AnsiString, int, float, float, bool)
                                       80
     AnalogInput::AdjustSensorF(float, bool)
                                       24
     AnalogInput::AnalogInput()         8
     AnalogInput::Calculate()          12
     AnalogInput::CanCalculate()        0
     AnalogInput::CheckInput(float, int &)
                                        0
     AnalogInput::CreateIdNum()        52
     AnalogInput::FindPROStatus(AnsiString &)
                                       44
     AnalogInput::GetBasicSensorType()
                                        0
     AnalogInput::GetErrorStatus()      0
     AnalogInput::GetFirstFreeId(set<unsigned int> &)
                                       32
     AnalogInput::GetIsPressureSns()
                                        0
     AnalogInput::GetName()           264
     AnalogInput::GetProgramObjectBaseVector(vector<AnalogInput *>)
                                       16
     AnalogInput::GetServiceValueInfoTable(int &)
                                        0
     AnalogInput::GetServiceValueInfoTableStatic(int &)
                                        0
     AnalogInput::GetServiceValueInfoVector()
                                       12
     AnalogInput::GetStringValue(int, int, AnsiString &)
                                      300
     AnalogInput::GetValue(int, int, float &, int &, int &)
                                       32
     AnalogInput::GetValueIdVector(int)
                                       16
     AnalogInput::GetValueInfoTable(int &, int)
                                        4
     AnalogInput::GetValueInfoTableStatic(int &, int)
                                        0
     AnalogInput::GetValueInfoVector(int)
                                       16
     AnalogInput::Init()               44
     AnalogInput::LoadConfigString(TSNConfigString &)
                                      264
     AnalogInput::MakeConfigString(int)
                                     3396
     AnalogInput::NewValue(float)       0
     AnalogInput::PutFloatValue(int, float)
                                        0
     AnalogInput::PutValue(int, int, AnsiString, bool, int *)
                                      144
     AnalogInput::ReceiveData(unsigned char *)
                                       60
     AnalogInput::RestoreAISettings(TSNConfigString *)
                                      516
     AnalogInput::SaveAISettings(int)
                                     1004
     AnalogInput::SendData(unsigned short)
                                       88
     AnalogInput::SetIsPressureSns(bool)
                                        0
     AnalogInput::SetLocationKeyWord(int)
                                        0
     AnalogInput::SetModifiedFlag()     8
     AnalogInput::SetNewStatus(bool)
                                        0
     AnalogInput::SetPROPtr(PRogramObject *)
                                       36
     AnalogInput::SetStatus(unsigned char *)
                                        0
     AnalogInput::UpdateAllDependingSensorOffsets(float, bool)
                                        0
     AnalogInput::new AnalogInput()     4
     AnalogInput::~AnalogInput()       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
                                       24
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
                                        0
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
                                       40
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
                                        4
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<ValueList, allocator<ValueList>>::_Insert0(ValueList *, ValueList const &)
                                       28
     _Vector_impl<ValueList, allocator<ValueList>>::_Make_room(ValueList *, unsigned int)
                                       32
     _Vector_impl<ValueList, allocator<ValueList>>::_Push_back0(ValueList const &)
                                       24
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12
     vector<AnalogInput *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
                                     200
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
                                      48
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
                                      96
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
                                      36
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     244
     _Vector_impl<ValueList, allocator<ValueList>>::_Make_room(ValueList *, unsigned int)
                                     272
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     232
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     244
     _Vector_impl<ValueList, allocator<ValueList>>::_Insert0(ValueList *, ValueList const &)
                                     100
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     _Vector_impl<ValueList, allocator<ValueList>>::_Push_back0(ValueList const &)
                                      88
     vector<AnalogInput *>::~vector()
                                      28
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     AnalogInput::ServiceReportSensorValueList
                                     252
     ?_0                              24
     AnalogInput::GlobalAISet         36
     AnalogInput::AnalogInput()       56
     ?Subroutine45                     8
     AnalogInput::Init()             252
     ?Subroutine43                    12
     AnalogInput::~AnalogInput()      48
     ?Subroutine46                     8
     AnalogInput::GetFirstFreeId(set<unsigned int> &)
                                     136
     AnalogInput::CreateIdNum()      188
     AnalogInput::SetPROPtr(PRogramObject *)
                                     448
     AnalogInput::MakeConfigString(int)
                                    5368
     ?Subroutine47                     8
     AnalogInput::LoadConfigString(TSNConfigString &)
                                    1176
     AnalogInput::SetLocationKeyWord(int)
                                       8
     AnalogInput::SaveAISettings(int)
                                    1428
     ?Subroutine48                     8
     AnalogInput::RestoreAISettings(TSNConfigString *)
                                    1088
     AnalogInput::Calculate()         64
     AnalogInput::UpdateAllDependingSensorOffsets(float, bool)
                                       4
     AnalogInput::CheckInput(float, int &)
                                       8
     AnalogInput::AdjustSensor(AnsiString, int, float, float, bool)
                                     164
     AnalogInput::AdjustSensorF(float, bool)
                                     228
     AnalogInput::GetName()          544
     AnalogInput::FindPROStatus(AnsiString &)
                                     112
     AnalogInput::GetStringValue(int, int, AnsiString &)
                                     640
     AnalogInput::GetValue(int, int, float &, int &, int &)
                                     220
     AnalogInput::PutValue(int, int, AnsiString, bool, int *)
                                     672
     AnalogInput::PutFloatValue(int, float)
                                      64
     SensorValueList0                288
     AnalogInput::GetValueInfoTable(int &, int)
                                      16
     ?Subroutine44                     8
     AnalogInput::GetValueInfoTableStatic(int &, int)
                                      92
     AnalogInput::GetServiceValueInfoTable(int &)
                                      12
     ?Subroutine49                     8
     AnalogInput::GetServiceValueInfoTableStatic(int &)
                                       8
     AnalogInput::GetValueIdVector(int)
                                     244
     AnalogInput::GetValueInfoVector(int)
                                     244
     AnalogInput::GetServiceValueInfoVector()
                                      52
     AnalogInput::ReceiveData(unsigned char *)
                                     480
     AnalogInput::SendData(unsigned short)
                                     520
     AnalogInput::NewValue(float)     16
     AnalogInput::SetStatus(unsigned char *)
                                       4
     AnalogInput::SetModifiedFlag()   76
     AnalogInput::GetBasicSensorType()
                                       8
     AnalogInput::SetIsPressureSns(bool)
                                       8
     AnalogInput::GetIsPressureSns()
                                       8
     AnalogInput::CanCalculate()      68
     AnalogInput::SetNewStatus(bool)
                                       4
     AnalogInput::GetErrorStatus()    16
     AnalogInput::GetProgramObjectBaseVector(vector<AnalogInput *>)
                                      64
     ?<Initializer for ServiceReportSensorValueList
                                     252
     ?<Initializer for SensorValueList0>
                                     288
     ?<Constant "Analog input">      104
     ?<Constant " Bar">               24
     ?<Constant "">                    1
     ?<Constant ")">                   2
     ?<Constant ":">                   2
     ?<Constant "(">                   2
     ?<Constant "Error">               8
     ?<Constant ":\n">                 3
     ?<Constant "None">               16
     AnalogInput::new AnalogInput()   28
     __sti__routine()                 80
     ??DataTable0                      4
     ??DataTable2                      4
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable22                     4
      Others                        1408

 
 19 580 bytes in segment CODE
    318 bytes in segment DATA_C
    540 bytes in segment DATA_I
    540 bytes in segment DATA_ID
     44 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 15 064 bytes of CODE  memory (+ 4 544 bytes shared)
    858 bytes of CONST memory
    584 bytes of DATA  memory

Errors: none
Warnings: none
