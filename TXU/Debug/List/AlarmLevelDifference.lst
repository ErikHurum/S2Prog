##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:32 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLevelDifference.Cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLevelDifference.Cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLevelDifference.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLevelDifference.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLevelDifference.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelDifference::~AlarmLevelDifference()
   \                     `?~AlarmLevelDifference`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLevelDifference_1`
   \   00000014   0100000A           BEQ      `?~AlarmLevelDifference_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLevelDifference_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLevelDifference_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLevelDifference_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLevelDifference::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLevelDifference::AlarmLevelDifference(PRogramObjectBase *PROPtr,float Lim, bool Lock):AlarmBasic(PROPtr)
   \                     ??AlarmLevelDifference:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     12          {
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   64009FE5           LDR      R0,??AlarmLevelDifference_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer = PROPtr;
     14          	PROTankPtr =(PROTank*)PROPtr;
     15          
     16          	Locked              = Lock;
     17          	Limit               = Lim;
     18          	NumberOfAlarmSettings++;
   \   00000020   60009FE5           LDR      R0,??AlarmLevelDifference_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   C45084E5           STR      R5,[R4, #+196]
   \   00000028   EC5084E5           STR      R5,[R4, #+236]
   \   0000002C   E870C4E5           STRB     R7,[R4, #+232]
   \   00000030   E46084E5           STR      R6,[R4, #+228]
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
     19          	IDNumber            = (ID_AL_SNS_LEVEL_DIFFERENCE << 16)+NumberOfAlarmSettings;
   \   00000040   8006A0E3           MOV      R0,#+134217728
   \   00000044   F30780E3           ORR      R0,R0,#0x3CC0000
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   9C0084E5           STR      R0,[R4, #+156]
     20          	Type                = ID_AL_SNS_LEVEL_DIFFERENCE;
   \   00000050   CC00A0E3           MOV      R0,#+204
   \   00000054   B00E80E3           ORR      R0,R0,#0xB00
   \   00000058   A00084E5           STR      R0,[R4, #+160]
     21          	Deadband            = 0.1;
   \   0000005C   28009FE5           LDR      R0,??AlarmLevelDifference_1+0x8  ;; 0x3dcccccd
   \   00000060   BC0084E5           STR      R0,[R4, #+188]
     22          	MessageKey          = L_WORD747; // Level diff.
   \   00000064   EB00A0E3           MOV      R0,#+235
   \   00000068   800F80E3           ORR      R0,R0,#0x200
   \   0000006C   B80084E5           STR      R0,[R4, #+184]
     23          	TPCMessageKey       = L_WORD748; // LDif
   \   00000070   BB0FA0E3           MOV      R0,#+748
   \   00000074   B40084E5           STR      R0,[R4, #+180]
     24          }
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   F040BDE8           POP      {R4-R7,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLevelDifference_1:
   \   00000084   ........           DC32     ??__vtbl
   \   00000088   ........           DC32     ??NumberOfAlarmSettings
   \   0000008C   CDCCCC3D           DC32     0x3dcccccd
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          void AlarmLevelDifference::Check(void)
     27          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     28          	int Status = AL_STAT_IN_DEADBAND;
     29          
     30          	if ( PROTankPtr->HasLevelSensors ) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   3212D0E5           LDRB     R1,[R0, #+562]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0900000A           BEQ      ??Check_1
     31          		float Val = PROTankPtr->LevelDifference;
   \   0000001C   C06290E5           LDR      R6,[R0, #+704]
     32          		if ( Val < Limit - Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC1094E5           LDR      R1,[R4, #+188]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     __fLess,??__fLess??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??Check_2
     33          			Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000044   0050A0E3           MOV      R5,#+0
   \   00000048   040000EA           B        ??Check_3
     34          		} else if ( Val >= Limit ) {
   \                     ??Check_2:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     35          			Status = AL_STAT_IN_ALARM;
   \   0000005C   0150A013           MOVNE    R5,#+1
     36          		}
     37          	} else {
     38          		Status = AL_STAT_IN_NORMAL;
     39          	}
     40          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     41          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     42          
     43          ///////////////////////////////////////////////////////////////
     44          //
     45          // Routines for the librarian for input
     46          //
     47          ///////////////////////////////////////////////////////////////
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          int AlarmLevelDifference::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     50          {
   \                     ??PutValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   8490DDE5           LDRB     R9,[SP, #+132]
   \   00000010   88409DE5           LDR      R4,[SP, #+136]
   \   00000014   0170A0E1           MOV      R7,R1
     51          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     52          	if ( Locked ) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   000050E3           CMP      R0,#+0
     53          		Status = E_NO_INPUT_PERMISSION;
   \   00000030   2A10A013           MOVNE    R1,#+42
   \   00000034   00108D15           STRNE    R1,[SP, #+0]
   \   00000038   7800001A           BNE      ??PutValue_3
     54          	} else {
     55          		int Key = FindConfigKey(NewValue);
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   40008DE2           ADD      R0,SP,#+64
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   EC019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   00A090E5           LDR      R10,[R0, #+0]
   \   00000054   0810A0E1           MOV      R1,R8
   \   00000058   0A30A0E1           MOV      R3,R10
   \   0000005C   40008DE2           ADD      R0,SP,#+64
   \   00000060   ........           _BLF     ??assign,??assign??rA
   \   00000064   40008DE2           ADD      R0,SP,#+64
   \   00000068   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000006C   00B0A0E1           MOV      R11,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   40008DE2           ADD      R0,SP,#+64
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     56                  float OrgLimit = Limit;
   \   00000080   E46095E5           LDR      R6,[R5, #+228]
     57          		switch ( Key ) {
   \   00000084   64B04BE2           SUB      R11,R11,#+100
   \   00000088   05005BE3           CMP      R11,#+5
   \   0000008C   1100008A           BHI      ??PutValue_5
   \   00000090   010F8FE2           ADR      R0,??PutValue_1
   \   00000094   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000098   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   0000009C   010C010C           DC8      +1,+12,+1,+12
   \   000000A0   010C0000           DC8      +1,+12,+0,+0
     58          			case C_ON:
     59          			case C_OPEN:
     60          			case C_ENABLE:
     61                          SetEnable(EnableTrue);
   \                     ??PutValue_6:
   \   000000A4   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_7:
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??SetEnable,??SetEnable??rA
     62          				PROTankPtr->SetState(tUndefined);
   \   000000B0   EC2095E5           LDR      R2,[R5, #+236]
   \   000000B4   0410A0E3           MOV      R1,#+4
   \   000000B8   0200A0E1           MOV      R0,R2
   \   000000BC   A42092E5           LDR      R2,[R2, #+164]
   \   000000C0   7C2092E5           LDR      R2,[R2, #+124]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   12FF2FE1           BX       R2
   \   000000CC   3C0000EA           B        ??PutValue_8
     63          			 break;
     64          			case C_OFF:
     65          			case C_CLOSE:
     66          			case C_DISABLE:
     67                          SetEnable(EnableFalse);
   \                     ??PutValue_9:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   F3FFFFEA           B        ??PutValue_7
     68          				PROTankPtr->SetState(tUndefined);
     69          			 break;
     70          			default:
     71          				switch ( ValueId ) {
   \                     ??PutValue_5:
   \   000000D8   3210A0E3           MOV      R1,#+50
   \   000000DC   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000E0   010057E1           CMP      R7,R1
   \   000000E4   1F00001A           BNE      ??PutValue_10
     72          					case SVT_AL_LIMIT:
     73          						Limit = ConvertToSi(NewValue, ValUnitId=LENGTH_UNIT, Status,0.0 ,1.0,Limit);
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   04108DE5           STR      R1,[SP, #+4]
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   24008DE2           ADD      R0,SP,#+36
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0A30A0E1           MOV      R3,R10
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0810A0E1           MOV      R1,R8
   \   0000010C   24008DE2           ADD      R0,SP,#+36
   \   00000110   ........           _BLF     ??assign,??assign??rA
   \   00000114   E40095E5           LDR      R0,[R5, #+228]
   \   00000118   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000011C   03002DE9           PUSH     {R0,R1}
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   C015A0E3           MOV      R1,#+805306368
   \   00000128   FF1681E3           ORR      R1,R1,#0xFF00000
   \   0000012C   03002DE9           PUSH     {R0,R1}
   \   00000130   0010A0E1           MOV      R1,R0
   \   00000134   03002DE9           PUSH     {R0,R1}
   \   00000138   18208DE2           ADD      R2,SP,#+24
   \   0000013C   3C008DE2           ADD      R0,SP,#+60
   \   00000140   0800BDE8           POP      {R3}
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   0000014C   E40085E5           STR      R0,[R5, #+228]
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   38008DE2           ADD      R0,SP,#+56
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000160   14D08DE2           ADD      SP,SP,#+20
   \   00000164   160000EA           B        ??PutValue_8
     74          						break;
     75          					default:
     76          						Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_10:
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   08008DE2           ADD      R0,SP,#+8
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0A30A0E1           MOV      R3,R10
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0810A0E1           MOV      R1,R8
   \   00000184   08008DE2           ADD      R0,SP,#+8
   \   00000188   ........           _BLF     ??assign,??assign??rA
   \   0000018C   04008DE2           ADD      R0,SP,#+4
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   00022DE9           PUSH     {R9}
   \   00000198   64209DE5           LDR      R2,[SP, #+100]
   \   0000019C   10308DE2           ADD      R3,SP,#+16
   \   000001A0   0710A0E1           MOV      R1,R7
   \   000001A4   0500A0E1           MOV      R0,R5
   \   000001A8   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001AC   08008DE5           STR      R0,[SP, #+8]
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   10008DE2           ADD      R0,SP,#+16
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   08D08DE2           ADD      SP,SP,#+8
     77          						break;
     78          				}
     79          				break; // switch ( ValueId )
     80          		}//switch ( Key )
     81          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_8:
   \   000001C4   00009DE5           LDR      R0,[SP, #+0]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   1300001A           BNE      ??PutValue_3
     82          			SetModifiedFlag();
   \   000001D0   A41095E5           LDR      R1,[R5, #+164]
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   541091E5           LDR      R1,[R1, #+84]
   \   000001DC   0FE0A0E1           MOV      LR,PC
   \   000001E0   11FF2FE1           BX       R1
     83          			if ( Limit != OrgLimit ) {
   \   000001E4   E40095E5           LDR      R0,[R5, #+228]
   \   000001E8   0610A0E1           MOV      R1,R6
   \   000001EC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0900000A           BEQ      ??PutValue_3
     84          				LogEvent("New limit");
   \   000001F8   40109FE5           LDR      R1,??PutValue_4+0x4  ;; `?<Constant "New limit">`
   \   000001FC   08008DE2           ADD      R0,SP,#+8
   \   00000200   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000204   0010A0E1           MOV      R1,R0
   \   00000208   0500A0E1           MOV      R0,R5
   \   0000020C   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   08008DE2           ADD      R0,SP,#+8
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
     85          			}
     86          		}
     87          	}// if ( Locked ) else
     88          	if (UnitId) {
   \                     ??PutValue_3:
   \   00000220   000054E3           CMP      R4,#+0
     89          		*UnitId = ValUnitId;
   \   00000224   04009D15           LDRNE    R0,[SP, #+4]
   \   00000228   00008415           STRNE    R0,[R4, #+0]
     90          	}
     91          	return(Status);
   \   0000022C   00009DE5           LDR      R0,[SP, #+0]
   \   00000230   60D08DE2           ADD      SP,SP,#+96
   \   00000234   F04FBDE8           POP      {R4-R11,LR}
   \   00000238   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   0000023C   ........           DC32     ??npos
   \   00000240   ........           DC32     `?<Constant "New limit">`
     92          }
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          int  AlarmLevelDifference::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     95          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     96          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     97          	switch ( ValueId ) {
   \   00000010   0160A0E3           MOV      R6,#+1
   \   00000014   0270A0E3           MOV      R7,#+2
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
     98          		case SVT_AL_LIMIT:
     99          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    100          			DecPnt     = 2;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    101          			Unit       = LENGTH_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    102          			if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    103          				Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    104          			}
    105          			break;
    106          		case SVT_AL_VALUE:
    107          			MyRetValue = PROTankPtr->LevelDifference;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   C00290E5           LDR      R0,[R0, #+704]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    108          			DecPnt     = 2;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    109          			Unit       = LENGTH_UNIT;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    110          			break;
    111          		default:
    112          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    113          			break;
    114          	}
    115          	return(Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    116          }
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          int AlarmLevelDifference::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    119          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    120          	int Status = GETVAL_NO_ERR;
    121          	//switch ( ValueId ) {
    122          	//	default:
    123          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    124          	//		break;
    125          	//}
    126          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
    127          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    128          

   \                                 In segment CODE, align 4, keep-with-next
    129          int AlarmLevelDifference::PutFloatValue( int ValueId, float NewValue)
    130          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    131          	int Status= E_NO_ERR;
    132          	//switch ( ValueId ) {
    133          	//   default:
    134          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    135          	//     break;
    136          	//}
    137          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
    138          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelDifference &AlarmLevelDifference::new AlarmLevelDifference(PRogramObjectBase *, float, bool)
   \                     `??new AlarmLevelDifference`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLevelDifference_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLevelDifference
   \                     `??new AlarmLevelDifference_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    139          
    140          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLevelDifference::AlarmLevelDifference(PRogramObjectBase *, float, bool)
                                       20
     AlarmLevelDifference::Check()     24
     AlarmLevelDifference::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLevelDifference::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLevelDifference::PutFloatValue(int, float)
                                        4
     AlarmLevelDifference::PutValue(int, int, AnsiString, bool, int *)
                                      156
     AlarmLevelDifference::new AlarmLevelDifference(PRogramObjectBase *, float, bool)
                                       16
     AlarmLevelDifference::~AlarmLevelDifference()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLevelDifference::~AlarmLevelDifference()
                                      56
     AlarmLevelDifference::NumberOfAlarmSettings
                                       4
     AlarmLevelDifference::AlarmLevelDifference(PRogramObjectBase *, float, bool)
                                     144
     AlarmLevelDifference::Check()   116
     AlarmLevelDifference::PutValue(int, int, AnsiString, bool, int *)
                                     580
     AlarmLevelDifference::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmLevelDifference::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AlarmLevelDifference::PutFloatValue(int, float)
                                       8
     ?<Constant "New limit">          12
     AlarmLevelDifference::new AlarmLevelDifference(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         416

 
 1 416 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 080 bytes of CODE  memory (+ 352 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
