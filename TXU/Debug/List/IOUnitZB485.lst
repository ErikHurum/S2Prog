##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:50 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\IOUnitZB485.cpp                 #
#    Command line    =  D:\S2Prog\Shared\Src\IOUnitZB485.cpp --fpu None -D   #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\IOUnitZB485.lst             #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\IOUnitZB485.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\IOUnitZB485.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          #include "TSNVersion.h"

   \                                 In segment DATA_Z, align 4, align-sorted
      8              set<PRogramObjectBase*>IOUnitZB485::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
      9          
     10          //---------------------------------------------------------------------------
     11          
     12          

   \                                 In segment DATA_I, align 4, align-sorted
     13          ValueList IOUnitZB485::IOUnitZB485ValueList[] =  {
   \                     ??IOUnitZB485ValueList:
   \   00000000                      DS8 156
   \   0000009C                      REQUIRE `?<Initializer for IOUnitZB485ValueList>`
     14          	{L_WORD304      ,L_WORD237,SVT_BLANK},                               //   {"Unused"       ,"",SVT_BLANK},
     15          	{L_WORD379      ,L_WORD237,SVT_IO_COM_CHANNEL},                      //   {"Com Channel"  ,"",SVT_IO_COM_CHANNEL},
     16          	{L_WORD24       ,L_WORD237,SVT_IO_PROG_VERSION},                     //   {"ProgVersion"  ,"",SVT_IO_PROG_VERSION},
     17          	{L_WORD380      ,L_WORD237,SVT_IO_COM_VERSION},                      //   {"Com Version"  ,"",SVT_IO_COM_VERSION},
     18          	{L_WORD381      ,L_WORD237,SVT_IO_STORE_VERSION},                    //   {"Store Ver."   ,"",SVT_IO_STORE_VERSION},
     19          	{L_WORD382      ,L_WORD237,SVT_IO_RXBUF_SIZE},                       //   {"Rx Buf Size"  ,"",SVT_IO_RXBUF_SIZE},
     20          	{L_WORD383      ,L_WORD237,SVT_IO_TXBUF_SIZE},                       //   {"Tx Buf Size"  ,"",SVT_IO_TXBUF_SIZE},
     21          	{L_WORD384      ,L_WORD237,SVT_IO_RESET_STATUS},                     //   {"Reset Status" ,"",SVT_IO_RESET_STATUS},
     22          	{L_WORD385      ,L_WORD237,SVT_IO_TOTAL_RESTARTS},                   //   {"Total Restart","",SVT_IO_TOTAL_RESTARTS},
     23          	{L_WORD386      ,L_WORD237,SVT_IO_FAIL_CNT_CHK},                     //   {"Fail count"   ,"",SVT_IO_FAIL_CNT_CHK},
     24          	{L_WORD387      ,L_WORD237,SVT_IO_FAIL_CNT_TOT},                     //   {"Tot. fail cnt","",SVT_IO_FAIL_CNT_TOT},
     25          	{L_WORD388      ,L_WORD237,SVT_IO_P_TYPE_RUNNING},                   //   {"Program"      ,"",SVT_IO_P_TYPE_RUNNING},
     26          	{L_WORD389      ,L_WORD237,SVT_IO_CARD_VOLTAGE},                     //   {"Pwr 24V"      ,"",SVT_IO_CARD_VOLTAGE},
     27          
     28          };
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          IOUnitZB485::IOUnitZB485(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr):IOUnit(IOCompPtr->TCUPortNo)
   \                     ??IOUnitZB485:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     31          {
   \   00000004   ........           LDR      R7,??DataTable4  ;; ??__vtbl
     32              ObjectSet.insert(this);
   \   00000008   ........           LDR      R8,??DataTable5  ;; ??ObjectSet
   \   0000000C   5CD04DE2           SUB      SP,SP,#+92
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   F81095E5           LDR      R1,[R5, #+248]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   ........           _BLF     ??IOUnit,??IOUnit??rA
   \   00000024   A47084E5           STR      R7,[R4, #+164]
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   0810A0E1           MOV      R1,R8
   \   00000030   1C008DE2           ADD      R0,SP,#+28
   \   00000034   ........           _BLF     ??insert_1,??insert??rA
     33              Type        = C_IO_AN_ZB485;
   \   00000038   1800A0E3           MOV      R0,#+24
   \   0000003C   800E80E3           ORR      R0,R0,#0x800
   \   00000040   A00084E5           STR      R0,[R4, #+160]
     34              IDNumber    = (C_IO_AN_ZB485 << 16 )+ObjectSet.size();
   \   00000044   100098E5           LDR      R0,[R8, #+16]
   \   00000048   8016A0E3           MOV      R1,#+134217728
   \   0000004C   601981E3           ORR      R1,R1,#0x180000
   \   00000050   000081E0           ADD      R0,R1,R0
   \   00000054   9C0084E5           STR      R0,[R4, #+156]
     35              SCType[0]   = 0;    // All channels set to standard ADConverter
   \   00000058   0080A0E3           MOV      R8,#+0
   \   0000005C   A881C4E5           STRB     R8,[R4, #+424]
     36              SCType[1]   = 0;    // All channels set to standard ADConverter
   \   00000060   A981C4E5           STRB     R8,[R4, #+425]
     37              for ( int i=0; i < MAX_AN_ZB485_CHANNELS; i++ ) {
   \   00000064   0000A0E3           MOV      R0,#+0
     38                  SConverter[i]   = NULL;
   \                     ??IOUnitZB485_1:
   \   00000068   001184E0           ADD      R1,R4,R0, LSL #+2
   \   0000006C   B48181E5           STR      R8,[R1, #+436]
     39              }
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   080050E3           CMP      R0,#+8
   \   00000078   FAFFFFBA           BLT      ??IOUnitZB485_1
     40              TCUAddress  = IOCompPtr->TCUAddress;
   \   0000007C   F40095E5           LDR      R0,[R5, #+244]
   \   00000080   940184E5           STR      R0,[R4, #+404]
     41              TCUPortNo   = IOCompPtr->TCUPortNo;
   \   00000084   F80095E5           LDR      R0,[R5, #+248]
   \   00000088   980184E5           STR      R0,[R4, #+408]
     42              IOType      = IOCompPtr->IOType;
   \   0000008C   FC0095E5           LDR      R0,[R5, #+252]
   \   00000090   9C0184E5           STR      R0,[R4, #+412]
     43              IOAddress   = IOCompPtr->IOAddress;
   \   00000094   001195E5           LDR      R1,[R5, #+256]
   \   00000098   680FA0E3           MOV      R0,#+416
   \   0000009C   041080E7           STR      R1,[R0, +R4]
     44              Name        = "ZB485:"+(AnsiString)IOAddress;
   \   000000A0   40008DE2           ADD      R0,SP,#+64
   \   000000A4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000A8   0020A0E1           MOV      R2,R0
   \   000000AC   941087E2           ADD      R1,R7,#+148
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   ........           _BLF     `??operator+_1`,`??operator+??rA`
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   24008DE2           ADD      R0,SP,#+36
   \   000000C0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000C4   0010A0E1           MOV      R1,R0
   \   000000C8   ........           LDR      R0,??DataTable3  ;; ??npos
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   003090E5           LDR      R3,[R0, #+0]
   \   000000D4   440084E2           ADD      R0,R4,#+68
   \   000000D8   ........           _BLF     ??assign,??assign??rA
   \   000000DC   0820A0E1           MOV      R2,R8
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   24008DE2           ADD      R0,SP,#+36
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0820A0E1           MOV      R2,R8
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0820A0E1           MOV      R2,R8
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   40008DE2           ADD      R0,SP,#+64
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
     45              Add(IOCompPtr,ElementPtr);
   \   0000010C   A43094E5           LDR      R3,[R4, #+164]
   \   00000110   0620A0E1           MOV      R2,R6
   \   00000114   803093E5           LDR      R3,[R3, #+128]
   \   00000118   0510A0E1           MOV      R1,R5
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   0FE0A0E1           MOV      LR,PC
   \   00000124   13FF2FE1           BX       R3
     46              DownloadEEPROMTime[0] = 0;
   \   00000128   AC8184E5           STR      R8,[R4, #+428]
     47              DownloadEEPROMTime[1] = 0;
   \   0000012C   B08184E5           STR      R8,[R4, #+432]
     48          }
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   5CD08DE2           ADD      SP,SP,#+92
   \   00000138   ........           B        ?Subroutine19

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          IOUnitZB485::~IOUnitZB485(void)
     51          {
   \                     `?~IOUnitZB485`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0B00000A           BEQ      `?~IOUnitZB485_1`
   \   00000014   ........           LDR      R0,??DataTable4  ;; ??__vtbl
     52          
     53             /*
     54              for ( int i=0; i < MAX_AN_ZB485_CHANNELS; i++ ) {
     55                  if ( SConverter[i] ) delete SConverter[i];
     56                  SConverter[i] = NULL;
     57              }
     58              */
     59              ObjectSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable5  ;; ??ObjectSet
   \   00000024   ........           _BLF     ??erase_1,??erase??rA_1
     60          }
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     `?~IOUnit`,`?~IOUnit??rA`
   \   00000034   010015E3           TST      R5,#0x1
   \   00000038   0100000A           BEQ      `?~IOUnitZB485_1`
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~IOUnitZB485_1`:
   \   00000044                      REQUIRE ?Subroutine18
   \   00000044                      ;; // Fall through to label ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     61          //---------------------------------------------------------------------------
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          bool IOUnitZB485::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr)
     64          {
   \                     ??Add:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ADDF4DE2           SUB      SP,SP,#+692
     65              bool Error = false;
     66              int tmpIOChannel=IOCompPtr->IOChannel;
   \   00000008   10919FE5           LDR      R9,??Add_3+0x4   ;; `?<Constant "TCU ">`
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   041194E5           LDR      R1,[R4, #+260]
   \   00000014   00A0A0E1           MOV      R10,R0
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   00B0A0E3           MOV      R11,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   5C6F8AE2           ADD      R6,R10,#+368
   \   00000028   0170A0E3           MOV      R7,#+1
   \   0000002C   3A8F8FE2           ADR      R8,??Add_3       ;; ".\n"
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   EA04004A           BMI      ??Add_4
   \   00000038   080051E3           CMP      R1,#+8
   \   0000003C   E80400AA           BGE      ??Add_4
     67              if ( tmpIOChannel >= 0 && tmpIOChannel < MAX_AN_ZB485_CHANNELS ) {
     68                  SignalConverter *SConvPtr = SConverter[tmpIOChannel];
     69                  if ( SConvPtr ) {
   \   00000040   01118AE0           ADD      R1,R10,R1, LSL #+2
   \   00000044   08108DE5           STR      R1,[SP, #+8]
   \   00000048   B41191E5           LDR      R1,[R1, #+436]
   \   0000004C   A00094E5           LDR      R0,[R4, #+160]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   C103000A           BEQ      ??Add_5
     70                      switch ( IOCompPtr->Type ) {
   \   00000058   081194E5           LDR      R1,[R4, #+264]
   \   0000005C   682FA0E3           MOV      R2,#+416
   \   00000060   3E0040E2           SUB      R0,R0,#+62
   \   00000064   800E40E2           SUB      R0,R0,#+2048
   \   00000068   4C0050E3           CMP      R0,#+76
   \   0000006C   FD02008A           BHI      ??Add_6
   \   00000070   023F8FE2           ADR      R3,??Add_1
   \   00000074   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000078   B03093E1           LDRH     R3,[R3, R0]
   \   0000007C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??Add_1:
   \   00000080   28002800F902       DC16     +40,+40,+761,+761
   \              F902        
   \   00000088   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   00000090   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   00000098   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000A0   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000A8   F902F9022800       DC16     +761,+761,+40,+761
   \              F902        
   \   000000B0   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000B8   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000C0   28002800F902       DC16     +40,+40,+761,+761
   \              F902        
   \   000000C8   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000D0   F902F9022800       DC16     +761,+761,+40,+40
   \              2800        
   \   000000D8   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000E0   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000E8   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000F0   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   000000F8   F902F902F902       DC16     +761,+761,+761,+761
   \              F902        
   \   00000100   F9022F01F902       DC16     +761,+303,+761,+761
   \              F902        
   \   00000108   F902F902F902       DC16     +761,+761,+761,+528
   \              1002        
   \   00000110   100210021002       DC16     +528,+528,+528,+528
   \              1002        
   \   00000118   10020000           DC16     +528,+0
   \                     ??Add_3:
   \   0000011C   2E0A0000           DC8      ".\n",+0
   \   00000120   ........           DC32     `?<Constant "TCU ">`
     71                      case C_AI_P906_0110         :
     72                      case C_AI_P906_0111         :
     73                      case C_AI_1728              :
     74                      case C_AI_Pt100             :
     75                      case C_AI_Pt1000            :
     76                      case C_AI_TEMP_AD590        :
     77                      case C_AI_LeSw_ADCard       :
     78                          {
     79                              SCADCard *SCADPtr = (SCADCard*)SConverter[tmpIOChannel];
   \                     ??Add_7:
   \   00000124   08009DE5           LDR      R0,[SP, #+8]
   \   00000128   B43190E5           LDR      R3,[R0, #+436]
     80                              if ( SCADPtr->IOComponent[IOCompPtr->ADCardChannel] ) {
   \   0000012C   010183E0           ADD      R0,R3,R1, LSL #+2
   \   00000130   000092E7           LDR      R0,[R2, +R0]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   DB00000A           BEQ      ??Add_8
     81                                  AnsiString Message =(AnsiString)"TCU "+(AnsiString)IOCompPtr->TCUAddress;
   \   0000013C   F41094E5           LDR      R1,[R4, #+244]
   \   00000140   960F8DE2           ADD      R0,SP,#+600
   \   00000144   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000148   00A0A0E1           MOV      R10,R0
   \   0000014C   0910A0E1           MOV      R1,R9
   \   00000150   60008DE2           ADD      R0,SP,#+96
   \   00000154   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000158   0A20A0E1           MOV      R2,R10
   \   0000015C   0010A0E1           MOV      R1,R0
   \   00000160   6C0F8DE2           ADD      R0,SP,#+432
   \   00000164   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000168   6C1F8DE2           ADD      R1,SP,#+432
   \   0000016C   0C008DE2           ADD      R0,SP,#+12
   \   00000170   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0710A0E1           MOV      R1,R7
   \   0000017C   6C0F8DE2           ADD      R0,SP,#+432
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000184   0B20A0E1           MOV      R2,R11
   \   00000188   0710A0E1           MOV      R1,R7
   \   0000018C   960F8DE2           ADD      R0,SP,#+600
   \   00000190   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000194   0B20A0E1           MOV      R2,R11
   \   00000198   0710A0E1           MOV      R1,R7
   \   0000019C   60008DE2           ADD      R0,SP,#+96
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
     82                                  Message +=(AnsiString)" com-port "+(AnsiString)IOCompPtr->TCUPortNo+".\n";
   \   000001A4   F81094E5           LDR      R1,[R4, #+248]
   \   000001A8   5E0F8DE2           ADD      R0,SP,#+376
   \   000001AC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001B0   00A0A0E1           MOV      R10,R0
   \   000001B4   081089E2           ADD      R1,R9,#+8
   \   000001B8   7A0F8DE2           ADD      R0,SP,#+488
   \   000001BC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001C0   0010A0E1           MOV      R1,R0
   \   000001C4   0A20A0E1           MOV      R2,R10
   \   000001C8   490F8DE2           ADD      R0,SP,#+292
   \   000001CC   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000001D0   0820A0E1           MOV      R2,R8
   \   000001D4   491F8DE2           ADD      R1,SP,#+292
   \   000001D8   500F8DE2           ADD      R0,SP,#+320
   \   000001DC   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000001E0   000F9FE5           LDR      R0,??Add_9       ;; ??npos
   \   000001E4   0B20A0E1           MOV      R2,R11
   \   000001E8   00A090E5           LDR      R10,[R0, #+0]
   \   000001EC   501F8DE2           ADD      R1,SP,#+320
   \   000001F0   0A30A0E1           MOV      R3,R10
   \   000001F4   0C008DE2           ADD      R0,SP,#+12
   \   000001F8   ........           _BLF     ??append,??append??rA
   \   000001FC   0B20A0E1           MOV      R2,R11
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   500F8DE2           ADD      R0,SP,#+320
   \   00000208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000020C   0B20A0E1           MOV      R2,R11
   \   00000210   0710A0E1           MOV      R1,R7
   \   00000214   490F8DE2           ADD      R0,SP,#+292
   \   00000218   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000021C   0B20A0E1           MOV      R2,R11
   \   00000220   0710A0E1           MOV      R1,R7
   \   00000224   5E0F8DE2           ADD      R0,SP,#+376
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000022C   0B20A0E1           MOV      R2,R11
   \   00000230   0710A0E1           MOV      R1,R7
   \   00000234   7A0F8DE2           ADD      R0,SP,#+488
   \   00000238   ........           _BLF     ??_Tidy,??_Tidy??rA
     83                                  Message +=(AnsiString)"Channel "+(AnsiString)(IOCompPtr->ADCardChannel+1);
   \   0000023C   080194E5           LDR      R0,[R4, #+264]
   \   00000240   011080E2           ADD      R1,R0,#+1
   \   00000244   650F8DE2           ADD      R0,SP,#+404
   \   00000248   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000024C   00B0A0E1           MOV      R11,R0
   \   00000250   141089E2           ADD      R1,R9,#+20
   \   00000254   28008DE2           ADD      R0,SP,#+40
   \   00000258   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000025C   0B20A0E1           MOV      R2,R11
   \   00000260   0010A0E1           MOV      R1,R0
   \   00000264   98008DE2           ADD      R0,SP,#+152
   \   00000268   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   0000026C   0A30A0E1           MOV      R3,R10
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   98108DE2           ADD      R1,SP,#+152
   \   00000278   0C008DE2           ADD      R0,SP,#+12
   \   0000027C   ........           _BLF     ??append,??append??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0710A0E1           MOV      R1,R7
   \   00000288   98008DE2           ADD      R0,SP,#+152
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0710A0E1           MOV      R1,R7
   \   00000298   650F8DE2           ADD      R0,SP,#+404
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0710A0E1           MOV      R1,R7
   \   000002A8   28008DE2           ADD      R0,SP,#+40
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     84                                  Message +=(AnsiString)" on ADCard on channel"+(AnsiString)(IOCompPtr->IOChannel+1);
   \   000002B0   040194E5           LDR      R0,[R4, #+260]
   \   000002B4   011080E2           ADD      R1,R0,#+1
   \   000002B8   44008DE2           ADD      R0,SP,#+68
   \   000002BC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000002C0   0040A0E1           MOV      R4,R0
   \   000002C4   201089E2           ADD      R1,R9,#+32
   \   000002C8   9D0F8DE2           ADD      R0,SP,#+628
   \   000002CC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002D0   0420A0E1           MOV      R2,R4
   \   000002D4   0010A0E1           MOV      R1,R0
   \   000002D8   730F8DE2           ADD      R0,SP,#+460
   \   000002DC   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000002E0   0A30A0E1           MOV      R3,R10
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   731F8DE2           ADD      R1,SP,#+460
   \   000002EC   0C008DE2           ADD      R0,SP,#+12
   \   000002F0   ........           _BLF     ??append,??append??rA
   \   000002F4   0020A0E3           MOV      R2,#+0
   \   000002F8   0710A0E1           MOV      R1,R7
   \   000002FC   730F8DE2           ADD      R0,SP,#+460
   \   00000300   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   0710A0E1           MOV      R1,R7
   \   0000030C   44008DE2           ADD      R0,SP,#+68
   \   00000310   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   0710A0E1           MOV      R1,R7
   \   0000031C   9D0F8DE2           ADD      R0,SP,#+628
   \   00000320   ........           _BLF     ??_Tidy,??_Tidy??rA
     85                                  Message +=(AnsiString)" on IO "+KeyWord(IOType)+" addr."+(AnsiString)IOAddress;
   \   00000324   301096E5           LDR      R1,[R6, #+48]
   \   00000328   570F8DE2           ADD      R0,SP,#+348
   \   0000032C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000330   2C1096E5           LDR      R1,[R6, #+44]
   \   00000334   0040A0E1           MOV      R4,R0
   \   00000338   EC008DE2           ADD      R0,SP,#+236
   \   0000033C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000340   381089E2           ADD      R1,R9,#+56
   \   00000344   A40F8DE2           ADD      R0,SP,#+656
   \   00000348   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000034C   EC208DE2           ADD      R2,SP,#+236
   \   00000350   0010A0E1           MOV      R1,R0
   \   00000354   810F8DE2           ADD      R0,SP,#+516
   \   00000358   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   0000035C   402089E2           ADD      R2,R9,#+64
   \   00000360   811F8DE2           ADD      R1,SP,#+516
   \   00000364   8F0F8DE2           ADD      R0,SP,#+572
   \   00000368   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   0000036C   0420A0E1           MOV      R2,R4
   \   00000370   8F1F8DE2           ADD      R1,SP,#+572
   \   00000374   420F8DE2           ADD      R0,SP,#+264
   \   00000378   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   0000037C   0A30A0E1           MOV      R3,R10
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   421F8DE2           ADD      R1,SP,#+264
   \   00000388   0C008DE2           ADD      R0,SP,#+12
   \   0000038C   ........           _BLF     ??append,??append??rA
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0710A0E1           MOV      R1,R7
   \   00000398   420F8DE2           ADD      R0,SP,#+264
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0710A0E1           MOV      R1,R7
   \   000003A8   570F8DE2           ADD      R0,SP,#+348
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0710A0E1           MOV      R1,R7
   \   000003B8   8F0F8DE2           ADD      R0,SP,#+572
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0710A0E1           MOV      R1,R7
   \   000003C8   810F8DE2           ADD      R0,SP,#+516
   \   000003CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0710A0E1           MOV      R1,R7
   \   000003D8   EC008DE2           ADD      R0,SP,#+236
   \   000003DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0710A0E1           MOV      R1,R7
   \   000003E8   A40F8DE2           ADD      R0,SP,#+656
   \   000003EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     86                                  Message +=(AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
   \   000003F0   481089E2           ADD      R1,R9,#+72
   \   000003F4   7C008DE2           ADD      R0,SP,#+124
   \   000003F8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000003FC   0A30A0E1           MOV      R3,R10
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0010A0E1           MOV      R1,R0
   \   00000408   0C008DE2           ADD      R0,SP,#+12
   \   0000040C   ........           _BLF     ??append,??append??rA
   \   00000410   0020A0E3           MOV      R2,#+0
   \   00000414   0710A0E1           MOV      R1,R7
   \   00000418   7C008DE2           ADD      R0,SP,#+124
   \   0000041C   ........           _BLF     ??_Tidy,??_Tidy??rA
     87                                  Message +=(AnsiString)ElementPtr->Name+".\n";
   \   00000420   441085E2           ADD      R1,R5,#+68
   \   00000424   880F8DE2           ADD      R0,SP,#+544
   \   00000428   ........           _BLF     ??string,??string??rA
   \   0000042C   0820A0E1           MOV      R2,R8
   \   00000430   881F8DE2           ADD      R1,SP,#+544
   \   00000434   D0008DE2           ADD      R0,SP,#+208
   \   00000438   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   0000043C   0A30A0E1           MOV      R3,R10
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   D0108DE2           ADD      R1,SP,#+208
   \   00000448   0C008DE2           ADD      R0,SP,#+12
   \   0000044C   ........           _BLF     ??append,??append??rA
   \   00000450   0020A0E3           MOV      R2,#+0
   \   00000454   0710A0E1           MOV      R1,R7
   \   00000458   D0008DE2           ADD      R0,SP,#+208
   \   0000045C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   0710A0E1           MOV      R1,R7
   \   00000468   880F8DE2           ADD      R0,SP,#+544
   \   0000046C   ........           _BLF     ??_Tidy,??_Tidy??rA
     88                                  HardwareSetupWarning(Message);
   \   00000470   0C108DE2           ADD      R1,SP,#+12
   \   00000474   B4008DE2           ADD      R0,SP,#+180
   \   00000478   ........           _BLF     ??string,??string??rA
   \   0000047C   B4008DE2           ADD      R0,SP,#+180
   \   00000480   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000484   0020A0E3           MOV      R2,#+0
   \   00000488   0710A0E1           MOV      R1,R7
   \   0000048C   B4008DE2           ADD      R0,SP,#+180
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
     89                                  Error = true;
   \   00000494   07B0A0E1           MOV      R11,R7
     90                              } else {
   \   00000498   0020A0E3           MOV      R2,#+0
   \   0000049C   0710A0E1           MOV      R1,R7
   \   000004A0   0C008DE2           ADD      R0,SP,#+12
   \                     ??Add_10:
   \   000004A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A8   1F0000EA           B        ??Add_11
     91                                  Error = !SCADPtr->Add(IOCompPtr,ElementPtr);
   \                     ??Add_8:
   \   000004AC   0300A0E1           MOV      R0,R3
   \   000004B0   A43093E5           LDR      R3,[R3, #+164]
   \   000004B4   0520A0E1           MOV      R2,R5
   \   000004B8   803093E5           LDR      R3,[R3, #+128]
   \   000004BC   0410A0E1           MOV      R1,R4
   \   000004C0   0FE0A0E1           MOV      LR,PC
   \   000004C4   13FF2FE1           BX       R3
   \                     ??Add_12:
   \   000004C8   010000E2           AND      R0,R0,#0x1
   \   000004CC   01B020E2           EOR      R11,R0,#0x1
     92                              }
     93                          }
     94                          break;
     95                      case C_AI_WashTrackSensor      :
     96                          {
     97                              SCADCard *SCADPtr = (SCADCard *)SConverter[tmpIOChannel];
     98                              if (SCADPtr->IOComponentWT[IOCompPtr->ADCardChannel]) {
     99                                  AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
    100                                  Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
    101                                  Message += (AnsiString)"Channel " + (AnsiString)(IOCompPtr->ADCardChannel + 1);
    102                                  Message += (AnsiString)" on ADCard on channel" + (AnsiString)(IOCompPtr->IOChannel + 1);
    103                                  Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
    104                                  Message += (AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
    105                                  Message += (AnsiString)ElementPtr->Name + ".\n";
    106                                  HardwareSetupWarning(Message);
    107                                  Error = true;
    108                              } else {
    109                                  Error = !SCADPtr->Add(IOCompPtr, ElementPtr);
    110                              }
    111                          }
    112                          break;
    113                      case C_AI_WATERINGRESS      :
    114                      case C_AI_WATERINGR_MAIN    :
    115                      case C_AI_WATERINGR_PRE     :
    116                      case C_AI_WATERINGR_TEMP    :
    117                      case C_AI_WATERINGR_TEMP_M  :
    118                      case C_AI_WATERINGR_TEMP_P  :
    119                          {
    120                              SCWaterIngress *SCADPtr = (SCWaterIngress*)SConverter[tmpIOChannel];
    121                              if ( SCADPtr->IOComponent[IOCompPtr->ADCardChannel] ) {
    122                                  AnsiString Message =(AnsiString)"TCU "+(AnsiString)IOCompPtr->TCUAddress;
    123                                  Message +=(AnsiString)" com-port "+(AnsiString)IOCompPtr->TCUPortNo+".\n";
    124                                  Message +=(AnsiString)"Channel "+(AnsiString)(IOCompPtr->ADCardChannel+1);
    125                                  Message +=(AnsiString)" on WIS on channel"+(AnsiString)(IOCompPtr->IOChannel+1);
    126                                  Message +=(AnsiString)" on IO "+KeyWord(IOType)+" addr."+(AnsiString)IOAddress;
    127                                  Message +=(AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
    128                                  Message +=(AnsiString)ElementPtr->Name+".\n";
    129                                  HardwareSetupWarning(Message);
    130                                  Error = true;
    131                              } else {
    132                                  Error = !SCADPtr->Add(IOCompPtr,ElementPtr);
    133                              }
    134                          }
    135                          break;
    136                      case C_AI_INCLINOMETER  :
    137                      case C_AI_INC1_N2       :
    138                      case C_AI_INC2_N2       :
    139                      case C_AI_INC1_MACRON   :
    140                      case C_AI_INC2_MACRON   :
    141                      default:
    142                          {
    143                              AnsiString Message =(AnsiString)"TCU "+(AnsiString)IOCompPtr->TCUAddress;
    144                              Message +=(AnsiString)" com-port "+(AnsiString)IOCompPtr->TCUPortNo+".\n";
    145                              Message +=(AnsiString)"Channel "+(AnsiString)(IOCompPtr->IOChannel+1);
    146                              Message +=(AnsiString)" on IO "+KeyWord(IOType)+" addr."+(AnsiString)IOAddress;
    147                              Message +=(AnsiString)" Not legal.\n Try to set sensor for ";
    148                              Message +=(AnsiString)ElementPtr->Name+".\n";
    149                              HardwareSetupWarning(Message);
    150                              Error = true;
    151                          }
    152                          break;
    153                      }
    154                  } else {
    155                      switch ( IOCompPtr->Type ) {
    156                      case C_AI_1728              :
    157                      case C_AI_P906_0111         :
    158                      case C_AI_ATM_N_Ex          :
    159                      case C_AI_ATM_Ex            :
    160                      case C_AI_ATM_Ex_H          :
    161                      case C_AI_ATM_N_Ex_0_1      :
    162          			case C_AI_APT500		  :
    163          			case C_AI_SPT900		  :
    164                      case C_AI_Gen_4_20mA        :
    165                      case C_AI_Radar_4_20mA      :
    166                      case C_AI_Float_4_20mA      :
    167                      case C_AI_Pt100             :
    168                      case C_AI_Pt1000            :
    169                      case C_AI_TEMP_mA           :
    170                      case C_AI_TEMP_AD590        :
    171                      case C_AI_LeSw_ADCard       :
    172                      case C_AI_DIFF_PRESSURE_mA  :
    173                      case C_AI_WashTrackSensor      :
    174                          SConvPtr = new SCADCard(IOCompPtr,ElementPtr,this);
    175                          SConvPtr->Add(IOCompPtr, ElementPtr);
    176                          break;
    177                      case C_AI_WATERINGRESS      :
    178                      case C_AI_WATERINGR_MAIN    :
    179                      case C_AI_WATERINGR_PRE     :
    180                      case C_AI_WATERINGR_TEMP    :
    181                      case C_AI_WATERINGR_TEMP_M  :
    182                      case C_AI_WATERINGR_TEMP_P  :
    183                          SConvPtr = new SCWaterIngress(IOCompPtr,ElementPtr,this);
    184                          SConvPtr->Add(IOCompPtr, ElementPtr);
    185                          if (tmpIOChannel<4) {
    186                              SCType[0] |= 0x01 << (2 * tmpIOChannel);
    187                          } else {
    188                              SCType[1] |= 0x01 << (2 * (tmpIOChannel-4));
    189                          }
    190                          //SCType |= 2 << 2 * tmpIOChannel;
    191                          break;
    192                      case C_AI_GODA_RADAR        :
    193                          SConvPtr = new SCWaterIngress(IOCompPtr, ElementPtr, this);
    194                          SConvPtr->Add(IOCompPtr, ElementPtr);
    195                          if (tmpIOChannel < 4) {
    196                              SCType[0] |= 0x02 << (2 * tmpIOChannel);
    197                          } else {
    198                              SCType[1] |= 0x02 << (2 * (tmpIOChannel - 4));
    199                          }
    200                         break;
    201                      case C_AI_INCLINOMETER      :
    202                      case C_AI_INC1_N2           :
    203                      case C_AI_INC2_N2           :
    204                      default:
    205                          {
    206                              AnsiString Message =(AnsiString)"TCU "+(AnsiString)IOCompPtr->TCUAddress;
    207                              Message +=(AnsiString)" com-port "+(AnsiString)IOCompPtr->TCUPortNo+".\n";
    208                              Message +=(AnsiString)"Channel "+(AnsiString)(IOCompPtr->IOChannel+1);
    209                              Message +=(AnsiString)" on IO "+KeyWord(IOType)+" addr."+(AnsiString)IOAddress;
    210                              Message +=(AnsiString)" Not legal.\n Try to set sensor for ";
    211                              Message +=(AnsiString)ElementPtr->Name+".\n";
    212                              HardwareSetupWarning(Message);
    213                              Error = true;
    214                          }
    215                          break;
    216                      }
    217                      if ( !Error ) {
    218                          SConverter[tmpIOChannel] = SConvPtr;
    219                      }
    220                  }
    221              } else {
    222                  AnsiString Message =(AnsiString)"TCU "+(AnsiString)IOCompPtr->TCUAddress;
    223                  Message +=(AnsiString)" com-port "+(AnsiString)IOCompPtr->TCUPortNo+".\n";
    224                  Message +=(AnsiString)"Channel "+(AnsiString)(IOCompPtr->IOChannel+1);
    225                  Message +=(AnsiString)" on IO "+KeyWord(IOType)+" addr."+(AnsiString)IOAddress;
    226                  Message +=(AnsiString)".\n Not legal ZB485 Channel.\n Try to set sensor for ";
    227                  Message +=(AnsiString)ElementPtr->Name+".\n";
    228                  HardwareSetupWarning(Message);
    229                  Error = true;
    230              }
    231              if ( !Error ) {
   \   000004D0   FFB01BE2           ANDS     R11,R11,#0xFF
   \   000004D4   1400001A           BNE      ??Add_11
    232                  pair<set<PRogramObject*>::iterator,bool> Ret;
    233                  Ret = IOUniquePROSet.insert(ElementPtr);
   \                     ??Add_13:
   \   000004D8   0520A0E1           MOV      R2,R5
   \   000004DC   5F1F8AE2           ADD      R1,R10,#+380
   \   000004E0   AB0F8DE2           ADD      R0,SP,#+684
   \   000004E4   ........           _BLF     ??insert,??insert??rA_1
    234          
    235                  if ( Ret.second ) {
   \   000004E8   B002DDE5           LDRB     R0,[SP, #+688]
   \   000004EC   000050E3           CMP      R0,#+0
   \   000004F0   0200000A           BEQ      ??Add_14
    236                      AddAlarms(ElementPtr->CompleteAlarmInfoList);
   \   000004F4   FC1085E2           ADD      R1,R5,#+252
   \   000004F8   0A00A0E1           MOV      R0,R10
   \   000004FC   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    237                  }
    238                  PowerStatus |= 1 << tmpIOChannel;
   \                     ??Add_14:
   \   00000500   B000D6E1           LDRH     R0,[R6, #+0]
   \   00000504   00109DE5           LDR      R1,[SP, #+0]
   \   00000508   1711A0E1           LSL      R1,R7,R1
   \   0000050C   000081E1           ORR      R0,R1,R0
   \   00000510   B000C6E1           STRH     R0,[R6, #+0]
    239                  IOCompPtr->AddIOMdulePtr((ANPRO10Object*)this);
   \   00000514   0A10A0E1           MOV      R1,R10
   \   00000518   0400A0E1           MOV      R0,R4
   \   0000051C   ........           _BLF     ??AddIOMdulePtr,??AddIOMdulePtr??rA
    240                  ElementPtr->MergeChildUserRights(this);
   \   00000520   0A10A0E1           MOV      R1,R10
   \   00000524   0500A0E1           MOV      R0,R5
   \   00000528   ........           _BLF     ??MergeChildUserRights,??MergeChildUserRights??rA
    241              }
    242              return(!Error);
   \                     ??Add_11:
   \   0000052C   01002BE2           EOR      R0,R11,#0x1
   \   00000530   ADDF8DE2           ADD      SP,SP,#+692
   \   00000534   F04FBDE8           POP      {R4-R11,LR}
   \   00000538   FF0000E2           AND      R0,R0,#0xFF
   \   0000053C   1EFF2FE1           BX       LR               ;; return
   \                     ??Add_15:
   \   00000540   08009DE5           LDR      R0,[SP, #+8]
   \   00000544   B43190E5           LDR      R3,[R0, #+436]
   \   00000548   010183E0           ADD      R0,R3,R1, LSL #+2
   \   0000054C   E40290E5           LDR      R0,[R0, #+740]
   \   00000550   000050E3           CMP      R0,#+0
   \   00000554   D4FFFF0A           BEQ      ??Add_8
   \   00000558   F41094E5           LDR      R1,[R4, #+244]
   \   0000055C   880F8DE2           ADD      R0,SP,#+544
   \   00000560   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000564   00A0A0E1           MOV      R10,R0
   \   00000568   0910A0E1           MOV      R1,R9
   \   0000056C   B4008DE2           ADD      R0,SP,#+180
   \   00000570   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000574   0A20A0E1           MOV      R2,R10
   \   00000578   0010A0E1           MOV      R1,R0
   \   0000057C   0C008DE2           ADD      R0,SP,#+12
   \   00000580   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000584   0C108DE2           ADD      R1,SP,#+12
   \   00000588   60008DE2           ADD      R0,SP,#+96
   \   0000058C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000590   0020A0E3           MOV      R2,#+0
   \   00000594   0710A0E1           MOV      R1,R7
   \   00000598   0C008DE2           ADD      R0,SP,#+12
   \   0000059C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A0   0B20A0E1           MOV      R2,R11
   \   000005A4   0710A0E1           MOV      R1,R7
   \   000005A8   880F8DE2           ADD      R0,SP,#+544
   \   000005AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B0   0B20A0E1           MOV      R2,R11
   \   000005B4   0710A0E1           MOV      R1,R7
   \   000005B8   B4008DE2           ADD      R0,SP,#+180
   \   000005BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C0   F81094E5           LDR      R1,[R4, #+248]
   \   000005C4   8F0F8DE2           ADD      R0,SP,#+572
   \   000005C8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000005CC   00A0A0E1           MOV      R10,R0
   \   000005D0   081089E2           ADD      R1,R9,#+8
   \   000005D4   810F8DE2           ADD      R0,SP,#+516
   \   000005D8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000005DC   0A20A0E1           MOV      R2,R10
   \   000005E0   0010A0E1           MOV      R1,R0
   \   000005E4   EC008DE2           ADD      R0,SP,#+236
   \   000005E8   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000005EC   0820A0E1           MOV      R2,R8
   \   000005F0   EC108DE2           ADD      R1,SP,#+236
   \   000005F4   D0008DE2           ADD      R0,SP,#+208
   \   000005F8   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000005FC   E40A9FE5           LDR      R0,??Add_9       ;; ??npos
   \   00000600   0B20A0E1           MOV      R2,R11
   \   00000604   00A090E5           LDR      R10,[R0, #+0]
   \   00000608   D0108DE2           ADD      R1,SP,#+208
   \   0000060C   0A30A0E1           MOV      R3,R10
   \   00000610   60008DE2           ADD      R0,SP,#+96
   \   00000614   ........           _BLF     ??append,??append??rA
   \   00000618   0B20A0E1           MOV      R2,R11
   \   0000061C   0710A0E1           MOV      R1,R7
   \   00000620   D0008DE2           ADD      R0,SP,#+208
   \   00000624   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000628   0B20A0E1           MOV      R2,R11
   \   0000062C   0710A0E1           MOV      R1,R7
   \   00000630   EC008DE2           ADD      R0,SP,#+236
   \   00000634   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000638   0B20A0E1           MOV      R2,R11
   \   0000063C   0710A0E1           MOV      R1,R7
   \   00000640   8F0F8DE2           ADD      R0,SP,#+572
   \   00000644   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000648   0B20A0E1           MOV      R2,R11
   \   0000064C   0710A0E1           MOV      R1,R7
   \   00000650   810F8DE2           ADD      R0,SP,#+516
   \   00000654   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000658   080194E5           LDR      R0,[R4, #+264]
   \   0000065C   011080E2           ADD      R1,R0,#+1
   \   00000660   98008DE2           ADD      R0,SP,#+152
   \   00000664   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000668   00B0A0E1           MOV      R11,R0
   \   0000066C   141089E2           ADD      R1,R9,#+20
   \   00000670   730F8DE2           ADD      R0,SP,#+460
   \   00000674   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000678   0B20A0E1           MOV      R2,R11
   \   0000067C   0010A0E1           MOV      R1,R0
   \   00000680   420F8DE2           ADD      R0,SP,#+264
   \   00000684   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000688   0A30A0E1           MOV      R3,R10
   \   0000068C   0020A0E3           MOV      R2,#+0
   \   00000690   421F8DE2           ADD      R1,SP,#+264
   \   00000694   60008DE2           ADD      R0,SP,#+96
   \   00000698   ........           _BLF     ??append,??append??rA
   \   0000069C   0020A0E3           MOV      R2,#+0
   \   000006A0   0710A0E1           MOV      R1,R7
   \   000006A4   420F8DE2           ADD      R0,SP,#+264
   \   000006A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006AC   0020A0E3           MOV      R2,#+0
   \   000006B0   0710A0E1           MOV      R1,R7
   \   000006B4   98008DE2           ADD      R0,SP,#+152
   \   000006B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006BC   0020A0E3           MOV      R2,#+0
   \   000006C0   0710A0E1           MOV      R1,R7
   \   000006C4   730F8DE2           ADD      R0,SP,#+460
   \   000006C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006CC   040194E5           LDR      R0,[R4, #+260]
   \   000006D0   011080E2           ADD      R1,R0,#+1
   \   000006D4   6C0F8DE2           ADD      R0,SP,#+432
   \   000006D8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000006DC   0040A0E1           MOV      R4,R0
   \   000006E0   201089E2           ADD      R1,R9,#+32
   \   000006E4   500F8DE2           ADD      R0,SP,#+320
   \   000006E8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000006EC   0420A0E1           MOV      R2,R4
   \   000006F0   0010A0E1           MOV      R1,R0
   \   000006F4   490F8DE2           ADD      R0,SP,#+292
   \   000006F8   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000006FC   0A30A0E1           MOV      R3,R10
   \   00000700   0020A0E3           MOV      R2,#+0
   \   00000704   491F8DE2           ADD      R1,SP,#+292
   \   00000708   60008DE2           ADD      R0,SP,#+96
   \   0000070C   ........           _BLF     ??append,??append??rA
   \   00000710   0020A0E3           MOV      R2,#+0
   \   00000714   0710A0E1           MOV      R1,R7
   \   00000718   490F8DE2           ADD      R0,SP,#+292
   \   0000071C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000720   0020A0E3           MOV      R2,#+0
   \   00000724   0710A0E1           MOV      R1,R7
   \   00000728   6C0F8DE2           ADD      R0,SP,#+432
   \   0000072C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000730   0020A0E3           MOV      R2,#+0
   \   00000734   0710A0E1           MOV      R1,R7
   \   00000738   500F8DE2           ADD      R0,SP,#+320
   \   0000073C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000740   301096E5           LDR      R1,[R6, #+48]
   \   00000744   650F8DE2           ADD      R0,SP,#+404
   \   00000748   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000074C   2C1096E5           LDR      R1,[R6, #+44]
   \   00000750   0040A0E1           MOV      R4,R0
   \   00000754   9D0F8DE2           ADD      R0,SP,#+628
   \   00000758   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000075C   381089E2           ADD      R1,R9,#+56
   \   00000760   44008DE2           ADD      R0,SP,#+68
   \   00000764   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000768   9D2F8DE2           ADD      R2,SP,#+628
   \   0000076C   0010A0E1           MOV      R1,R0
   \   00000770   A40F8DE2           ADD      R0,SP,#+656
   \   00000774   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000778   402089E2           ADD      R2,R9,#+64
   \   0000077C   A41F8DE2           ADD      R1,SP,#+656
   \   00000780   570F8DE2           ADD      R0,SP,#+348
   \   00000784   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000788   0420A0E1           MOV      R2,R4
   \   0000078C   571F8DE2           ADD      R1,SP,#+348
   \   00000790   7C008DE2           ADD      R0,SP,#+124
   \   00000794   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000798   0A30A0E1           MOV      R3,R10
   \   0000079C   0020A0E3           MOV      R2,#+0
   \   000007A0   7C108DE2           ADD      R1,SP,#+124
   \   000007A4   60008DE2           ADD      R0,SP,#+96
   \   000007A8   ........           _BLF     ??append,??append??rA
   \   000007AC   0020A0E3           MOV      R2,#+0
   \   000007B0   0710A0E1           MOV      R1,R7
   \   000007B4   7C008DE2           ADD      R0,SP,#+124
   \   000007B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007BC   0020A0E3           MOV      R2,#+0
   \   000007C0   0710A0E1           MOV      R1,R7
   \   000007C4   650F8DE2           ADD      R0,SP,#+404
   \   000007C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007CC   0020A0E3           MOV      R2,#+0
   \   000007D0   0710A0E1           MOV      R1,R7
   \   000007D4   570F8DE2           ADD      R0,SP,#+348
   \   000007D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007DC   0020A0E3           MOV      R2,#+0
   \   000007E0   0710A0E1           MOV      R1,R7
   \   000007E4   A40F8DE2           ADD      R0,SP,#+656
   \   000007E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007EC   0020A0E3           MOV      R2,#+0
   \   000007F0   0710A0E1           MOV      R1,R7
   \   000007F4   9D0F8DE2           ADD      R0,SP,#+628
   \   000007F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007FC   0020A0E3           MOV      R2,#+0
   \   00000800   0710A0E1           MOV      R1,R7
   \   00000804   44008DE2           ADD      R0,SP,#+68
   \   00000808   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000080C   481089E2           ADD      R1,R9,#+72
   \   00000810   28008DE2           ADD      R0,SP,#+40
   \   00000814   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000818   0A30A0E1           MOV      R3,R10
   \   0000081C   0020A0E3           MOV      R2,#+0
   \   00000820   0010A0E1           MOV      R1,R0
   \   00000824   60008DE2           ADD      R0,SP,#+96
   \   00000828   ........           _BLF     ??append,??append??rA
   \   0000082C   0020A0E3           MOV      R2,#+0
   \   00000830   0710A0E1           MOV      R1,R7
   \   00000834   28008DE2           ADD      R0,SP,#+40
   \   00000838   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000083C   441085E2           ADD      R1,R5,#+68
   \   00000840   7A0F8DE2           ADD      R0,SP,#+488
   \   00000844   ........           _BLF     ??string,??string??rA
   \   00000848   0820A0E1           MOV      R2,R8
   \   0000084C   7A1F8DE2           ADD      R1,SP,#+488
   \   00000850   5E0F8DE2           ADD      R0,SP,#+376
   \   00000854   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000858   0A30A0E1           MOV      R3,R10
   \   0000085C   0020A0E3           MOV      R2,#+0
   \   00000860   5E1F8DE2           ADD      R1,SP,#+376
   \   00000864   60008DE2           ADD      R0,SP,#+96
   \   00000868   ........           _BLF     ??append,??append??rA
   \   0000086C   0020A0E3           MOV      R2,#+0
   \   00000870   0710A0E1           MOV      R1,R7
   \   00000874   5E0F8DE2           ADD      R0,SP,#+376
   \   00000878   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000087C   0020A0E3           MOV      R2,#+0
   \   00000880   0710A0E1           MOV      R1,R7
   \   00000884   7A0F8DE2           ADD      R0,SP,#+488
   \   00000888   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000088C   60108DE2           ADD      R1,SP,#+96
   \   00000890   960F8DE2           ADD      R0,SP,#+600
   \   00000894   ........           _BLF     ??string,??string??rA
   \   00000898   960F8DE2           ADD      R0,SP,#+600
   \   0000089C   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   000008A0   0020A0E3           MOV      R2,#+0
   \   000008A4   0710A0E1           MOV      R1,R7
   \   000008A8   960F8DE2           ADD      R0,SP,#+600
   \   000008AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008B0   07B0A0E1           MOV      R11,R7
   \   000008B4   0020A0E3           MOV      R2,#+0
   \   000008B8   0710A0E1           MOV      R1,R7
   \   000008BC   60008DE2           ADD      R0,SP,#+96
   \   000008C0   F7FEFFEA           B        ??Add_10
   \                     ??Add_16:
   \   000008C4   08009DE5           LDR      R0,[SP, #+8]
   \   000008C8   B43190E5           LDR      R3,[R0, #+436]
   \   000008CC   010183E0           ADD      R0,R3,R1, LSL #+2
   \   000008D0   000092E7           LDR      R0,[R2, +R0]
   \   000008D4   000050E3           CMP      R0,#+0
   \   000008D8   DA00000A           BEQ      ??Add_17
   \   000008DC   F41094E5           LDR      R1,[R4, #+244]
   \   000008E0   960F8DE2           ADD      R0,SP,#+600
   \   000008E4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000008E8   00A0A0E1           MOV      R10,R0
   \   000008EC   0910A0E1           MOV      R1,R9
   \   000008F0   60008DE2           ADD      R0,SP,#+96
   \   000008F4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000008F8   0A20A0E1           MOV      R2,R10
   \   000008FC   0010A0E1           MOV      R1,R0
   \   00000900   0C008DE2           ADD      R0,SP,#+12
   \   00000904   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000908   0C108DE2           ADD      R1,SP,#+12
   \   0000090C   44008DE2           ADD      R0,SP,#+68
   \   00000910   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000914   0020A0E3           MOV      R2,#+0
   \   00000918   0710A0E1           MOV      R1,R7
   \   0000091C   0C008DE2           ADD      R0,SP,#+12
   \   00000920   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000924   0B20A0E1           MOV      R2,R11
   \   00000928   0710A0E1           MOV      R1,R7
   \   0000092C   960F8DE2           ADD      R0,SP,#+600
   \   00000930   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000934   0B20A0E1           MOV      R2,R11
   \   00000938   0710A0E1           MOV      R1,R7
   \   0000093C   60008DE2           ADD      R0,SP,#+96
   \   00000940   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000944   F81094E5           LDR      R1,[R4, #+248]
   \   00000948   A40F8DE2           ADD      R0,SP,#+656
   \   0000094C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000950   00A0A0E1           MOV      R10,R0
   \   00000954   081089E2           ADD      R1,R9,#+8
   \   00000958   9D0F8DE2           ADD      R0,SP,#+628
   \   0000095C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000960   0A20A0E1           MOV      R2,R10
   \   00000964   0010A0E1           MOV      R1,R0
   \   00000968   5E0F8DE2           ADD      R0,SP,#+376
   \   0000096C   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000970   0820A0E1           MOV      R2,R8
   \   00000974   5E1F8DE2           ADD      R1,SP,#+376
   \   00000978   7A0F8DE2           ADD      R0,SP,#+488
   \   0000097C   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000980   60079FE5           LDR      R0,??Add_9       ;; ??npos
   \   00000984   0B20A0E1           MOV      R2,R11
   \   00000988   00A090E5           LDR      R10,[R0, #+0]
   \   0000098C   7A1F8DE2           ADD      R1,SP,#+488
   \   00000990   0A30A0E1           MOV      R3,R10
   \   00000994   44008DE2           ADD      R0,SP,#+68
   \   00000998   ........           _BLF     ??append,??append??rA
   \   0000099C   0B20A0E1           MOV      R2,R11
   \   000009A0   0710A0E1           MOV      R1,R7
   \   000009A4   7A0F8DE2           ADD      R0,SP,#+488
   \   000009A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009AC   0B20A0E1           MOV      R2,R11
   \   000009B0   0710A0E1           MOV      R1,R7
   \   000009B4   5E0F8DE2           ADD      R0,SP,#+376
   \   000009B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009BC   0B20A0E1           MOV      R2,R11
   \   000009C0   0710A0E1           MOV      R1,R7
   \   000009C4   A40F8DE2           ADD      R0,SP,#+656
   \   000009C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009CC   0B20A0E1           MOV      R2,R11
   \   000009D0   0710A0E1           MOV      R1,R7
   \   000009D4   9D0F8DE2           ADD      R0,SP,#+628
   \   000009D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009DC   080194E5           LDR      R0,[R4, #+264]
   \   000009E0   011080E2           ADD      R1,R0,#+1
   \   000009E4   6C0F8DE2           ADD      R0,SP,#+432
   \   000009E8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000009EC   00B0A0E1           MOV      R11,R0
   \   000009F0   141089E2           ADD      R1,R9,#+20
   \   000009F4   7C008DE2           ADD      R0,SP,#+124
   \   000009F8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000009FC   0B20A0E1           MOV      R2,R11
   \   00000A00   0010A0E1           MOV      R1,R0
   \   00000A04   570F8DE2           ADD      R0,SP,#+348
   \   00000A08   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000A0C   0A30A0E1           MOV      R3,R10
   \   00000A10   0020A0E3           MOV      R2,#+0
   \   00000A14   571F8DE2           ADD      R1,SP,#+348
   \   00000A18   44008DE2           ADD      R0,SP,#+68
   \   00000A1C   ........           _BLF     ??append,??append??rA
   \   00000A20   0020A0E3           MOV      R2,#+0
   \   00000A24   0710A0E1           MOV      R1,R7
   \   00000A28   570F8DE2           ADD      R0,SP,#+348
   \   00000A2C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A30   0020A0E3           MOV      R2,#+0
   \   00000A34   0710A0E1           MOV      R1,R7
   \   00000A38   6C0F8DE2           ADD      R0,SP,#+432
   \   00000A3C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A40   0020A0E3           MOV      R2,#+0
   \   00000A44   0710A0E1           MOV      R1,R7
   \   00000A48   7C008DE2           ADD      R0,SP,#+124
   \   00000A4C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A50   040194E5           LDR      R0,[R4, #+260]
   \   00000A54   011080E2           ADD      R1,R0,#+1
   \   00000A58   98008DE2           ADD      R0,SP,#+152
   \   00000A5C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000A60   0040A0E1           MOV      R4,R0
   \   00000A64   781089E2           ADD      R1,R9,#+120
   \   00000A68   490F8DE2           ADD      R0,SP,#+292
   \   00000A6C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000A70   0420A0E1           MOV      R2,R4
   \   00000A74   0010A0E1           MOV      R1,R0
   \   00000A78   500F8DE2           ADD      R0,SP,#+320
   \   00000A7C   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000A80   0A30A0E1           MOV      R3,R10
   \   00000A84   0020A0E3           MOV      R2,#+0
   \   00000A88   501F8DE2           ADD      R1,SP,#+320
   \   00000A8C   44008DE2           ADD      R0,SP,#+68
   \   00000A90   ........           _BLF     ??append,??append??rA
   \   00000A94   0020A0E3           MOV      R2,#+0
   \   00000A98   0710A0E1           MOV      R1,R7
   \   00000A9C   500F8DE2           ADD      R0,SP,#+320
   \   00000AA0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AA4   0020A0E3           MOV      R2,#+0
   \   00000AA8   0710A0E1           MOV      R1,R7
   \   00000AAC   98008DE2           ADD      R0,SP,#+152
   \   00000AB0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AB4   0020A0E3           MOV      R2,#+0
   \   00000AB8   0710A0E1           MOV      R1,R7
   \   00000ABC   490F8DE2           ADD      R0,SP,#+292
   \   00000AC0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AC4   301096E5           LDR      R1,[R6, #+48]
   \   00000AC8   D0008DE2           ADD      R0,SP,#+208
   \   00000ACC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000AD0   2C1096E5           LDR      R1,[R6, #+44]
   \   00000AD4   0040A0E1           MOV      R4,R0
   \   00000AD8   EC008DE2           ADD      R0,SP,#+236
   \   00000ADC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000AE0   381089E2           ADD      R1,R9,#+56
   \   00000AE4   810F8DE2           ADD      R0,SP,#+516
   \   00000AE8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000AEC   EC208DE2           ADD      R2,SP,#+236
   \   00000AF0   0010A0E1           MOV      R1,R0
   \   00000AF4   8F0F8DE2           ADD      R0,SP,#+572
   \   00000AF8   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000AFC   402089E2           ADD      R2,R9,#+64
   \   00000B00   8F1F8DE2           ADD      R1,SP,#+572
   \   00000B04   420F8DE2           ADD      R0,SP,#+264
   \   00000B08   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000B0C   0420A0E1           MOV      R2,R4
   \   00000B10   421F8DE2           ADD      R1,SP,#+264
   \   00000B14   730F8DE2           ADD      R0,SP,#+460
   \   00000B18   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000B1C   0A30A0E1           MOV      R3,R10
   \   00000B20   0020A0E3           MOV      R2,#+0
   \   00000B24   731F8DE2           ADD      R1,SP,#+460
   \   00000B28   44008DE2           ADD      R0,SP,#+68
   \   00000B2C   ........           _BLF     ??append,??append??rA
   \   00000B30   0020A0E3           MOV      R2,#+0
   \   00000B34   0710A0E1           MOV      R1,R7
   \   00000B38   730F8DE2           ADD      R0,SP,#+460
   \   00000B3C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B40   0020A0E3           MOV      R2,#+0
   \   00000B44   0710A0E1           MOV      R1,R7
   \   00000B48   D0008DE2           ADD      R0,SP,#+208
   \   00000B4C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B50   0020A0E3           MOV      R2,#+0
   \   00000B54   0710A0E1           MOV      R1,R7
   \   00000B58   420F8DE2           ADD      R0,SP,#+264
   \   00000B5C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B60   0020A0E3           MOV      R2,#+0
   \   00000B64   0710A0E1           MOV      R1,R7
   \   00000B68   8F0F8DE2           ADD      R0,SP,#+572
   \   00000B6C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B70   0020A0E3           MOV      R2,#+0
   \   00000B74   0710A0E1           MOV      R1,R7
   \   00000B78   EC008DE2           ADD      R0,SP,#+236
   \   00000B7C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B80   0020A0E3           MOV      R2,#+0
   \   00000B84   0710A0E1           MOV      R1,R7
   \   00000B88   810F8DE2           ADD      R0,SP,#+516
   \   00000B8C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B90   481089E2           ADD      R1,R9,#+72
   \   00000B94   880F8DE2           ADD      R0,SP,#+544
   \   00000B98   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000B9C   0A30A0E1           MOV      R3,R10
   \   00000BA0   0020A0E3           MOV      R2,#+0
   \   00000BA4   0010A0E1           MOV      R1,R0
   \   00000BA8   44008DE2           ADD      R0,SP,#+68
   \   00000BAC   ........           _BLF     ??append,??append??rA
   \   00000BB0   0020A0E3           MOV      R2,#+0
   \   00000BB4   0710A0E1           MOV      R1,R7
   \   00000BB8   880F8DE2           ADD      R0,SP,#+544
   \   00000BBC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BC0   441085E2           ADD      R1,R5,#+68
   \   00000BC4   28008DE2           ADD      R0,SP,#+40
   \   00000BC8   ........           _BLF     ??string,??string??rA
   \   00000BCC   0820A0E1           MOV      R2,R8
   \   00000BD0   28108DE2           ADD      R1,SP,#+40
   \   00000BD4   B4008DE2           ADD      R0,SP,#+180
   \   00000BD8   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000BDC   0A30A0E1           MOV      R3,R10
   \   00000BE0   0020A0E3           MOV      R2,#+0
   \   00000BE4   B4108DE2           ADD      R1,SP,#+180
   \   00000BE8   44008DE2           ADD      R0,SP,#+68
   \   00000BEC   ........           _BLF     ??append,??append??rA
   \   00000BF0   0020A0E3           MOV      R2,#+0
   \   00000BF4   0710A0E1           MOV      R1,R7
   \   00000BF8   B4008DE2           ADD      R0,SP,#+180
   \   00000BFC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C00   0020A0E3           MOV      R2,#+0
   \   00000C04   0710A0E1           MOV      R1,R7
   \   00000C08   28008DE2           ADD      R0,SP,#+40
   \   00000C0C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C10   44108DE2           ADD      R1,SP,#+68
   \   00000C14   650F8DE2           ADD      R0,SP,#+404
   \   00000C18   ........           _BLF     ??string,??string??rA
   \   00000C1C   650F8DE2           ADD      R0,SP,#+404
   \   00000C20   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000C24   0020A0E3           MOV      R2,#+0
   \   00000C28   0710A0E1           MOV      R1,R7
   \   00000C2C   650F8DE2           ADD      R0,SP,#+404
   \   00000C30   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C34   07B0A0E1           MOV      R11,R7
   \   00000C38   0020A0E3           MOV      R2,#+0
   \   00000C3C   0710A0E1           MOV      R1,R7
   \   00000C40   44008DE2           ADD      R0,SP,#+68
   \                     ??Add_18:
   \   00000C44   16FEFFEA           B        ??Add_10
   \                     ??Add_17:
   \   00000C48   0300A0E1           MOV      R0,R3
   \   00000C4C   A43093E5           LDR      R3,[R3, #+164]
   \   00000C50   0520A0E1           MOV      R2,R5
   \   00000C54   803093E5           LDR      R3,[R3, #+128]
   \   00000C58   0410A0E1           MOV      R1,R4
   \   00000C5C   0FE0A0E1           MOV      LR,PC
   \   00000C60   13FF2FE1           BX       R3
   \   00000C64   17FEFFEA           B        ??Add_12
   \                     ??Add_6:
   \   00000C68   F41094E5           LDR      R1,[R4, #+244]
   \   00000C6C   60008DE2           ADD      R0,SP,#+96
   \   00000C70   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000C74   00A0A0E1           MOV      R10,R0
   \   00000C78   0910A0E1           MOV      R1,R9
   \   00000C7C   44008DE2           ADD      R0,SP,#+68
   \   00000C80   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000C84   0A20A0E1           MOV      R2,R10
   \   00000C88   0010A0E1           MOV      R1,R0
   \   00000C8C   0C008DE2           ADD      R0,SP,#+12
   \   00000C90   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000C94   0C108DE2           ADD      R1,SP,#+12
   \   00000C98   7C008DE2           ADD      R0,SP,#+124
   \   00000C9C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000CA0   0020A0E3           MOV      R2,#+0
   \   00000CA4   0710A0E1           MOV      R1,R7
   \   00000CA8   0C008DE2           ADD      R0,SP,#+12
   \   00000CAC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CB0   0B20A0E1           MOV      R2,R11
   \   00000CB4   0710A0E1           MOV      R1,R7
   \   00000CB8   60008DE2           ADD      R0,SP,#+96
   \   00000CBC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CC0   0B20A0E1           MOV      R2,R11
   \   00000CC4   0710A0E1           MOV      R1,R7
   \   00000CC8   44008DE2           ADD      R0,SP,#+68
   \   00000CCC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CD0   F81094E5           LDR      R1,[R4, #+248]
   \   00000CD4   8F0F8DE2           ADD      R0,SP,#+572
   \   00000CD8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000CDC   00A0A0E1           MOV      R10,R0
   \   00000CE0   081089E2           ADD      R1,R9,#+8
   \   00000CE4   EC008DE2           ADD      R0,SP,#+236
   \   00000CE8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000CEC   0A20A0E1           MOV      R2,R10
   \   00000CF0   0010A0E1           MOV      R1,R0
   \   00000CF4   D0008DE2           ADD      R0,SP,#+208
   \   00000CF8   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000CFC   0820A0E1           MOV      R2,R8
   \   00000D00   D0108DE2           ADD      R1,SP,#+208
   \   00000D04   B4008DE2           ADD      R0,SP,#+180
   \   00000D08   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000D0C   D4039FE5           LDR      R0,??Add_9       ;; ??npos
   \   00000D10   0B20A0E1           MOV      R2,R11
   \   00000D14   00A090E5           LDR      R10,[R0, #+0]
   \   00000D18   B4108DE2           ADD      R1,SP,#+180
   \   00000D1C   0A30A0E1           MOV      R3,R10
   \   00000D20   7C008DE2           ADD      R0,SP,#+124
   \   00000D24   ........           _BLF     ??append,??append??rA
   \   00000D28   0B20A0E1           MOV      R2,R11
   \   00000D2C   0710A0E1           MOV      R1,R7
   \   00000D30   B4008DE2           ADD      R0,SP,#+180
   \   00000D34   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D38   0B20A0E1           MOV      R2,R11
   \   00000D3C   0710A0E1           MOV      R1,R7
   \   00000D40   D0008DE2           ADD      R0,SP,#+208
   \   00000D44   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D48   0B20A0E1           MOV      R2,R11
   \   00000D4C   0710A0E1           MOV      R1,R7
   \   00000D50   8F0F8DE2           ADD      R0,SP,#+572
   \   00000D54   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D58   0B20A0E1           MOV      R2,R11
   \   00000D5C   0710A0E1           MOV      R1,R7
   \   00000D60   EC008DE2           ADD      R0,SP,#+236
   \   00000D64   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D68   040194E5           LDR      R0,[R4, #+260]
   \   00000D6C   011080E2           ADD      R1,R0,#+1
   \   00000D70   490F8DE2           ADD      R0,SP,#+292
   \   00000D74   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000D78   0040A0E1           MOV      R4,R0
   \   00000D7C   141089E2           ADD      R1,R9,#+20
   \   00000D80   730F8DE2           ADD      R0,SP,#+460
   \   00000D84   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000D88   0420A0E1           MOV      R2,R4
   \   00000D8C   0010A0E1           MOV      R1,R0
   \   00000D90   420F8DE2           ADD      R0,SP,#+264
   \   00000D94   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000D98   0A30A0E1           MOV      R3,R10
   \   00000D9C   0B20A0E1           MOV      R2,R11
   \   00000DA0   421F8DE2           ADD      R1,SP,#+264
   \   00000DA4   7C008DE2           ADD      R0,SP,#+124
   \   00000DA8   ........           _BLF     ??append,??append??rA
   \   00000DAC   0B20A0E1           MOV      R2,R11
   \   00000DB0   0710A0E1           MOV      R1,R7
   \   00000DB4   420F8DE2           ADD      R0,SP,#+264
   \   00000DB8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DBC   0B20A0E1           MOV      R2,R11
   \   00000DC0   0710A0E1           MOV      R1,R7
   \   00000DC4   490F8DE2           ADD      R0,SP,#+292
   \   00000DC8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DCC   0B20A0E1           MOV      R2,R11
   \   00000DD0   0710A0E1           MOV      R1,R7
   \   00000DD4   730F8DE2           ADD      R0,SP,#+460
   \   00000DD8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DDC   301096E5           LDR      R1,[R6, #+48]
   \   00000DE0   28008DE2           ADD      R0,SP,#+40
   \   00000DE4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000DE8   2C1096E5           LDR      R1,[R6, #+44]
   \   00000DEC   0040A0E1           MOV      R4,R0
   \   00000DF0   650F8DE2           ADD      R0,SP,#+404
   \   00000DF4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000DF8   381089E2           ADD      R1,R9,#+56
   \   00000DFC   7A0F8DE2           ADD      R0,SP,#+488
   \   00000E00   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000E04   652F8DE2           ADD      R2,SP,#+404
   \   00000E08   0010A0E1           MOV      R1,R0
   \   00000E0C   5E0F8DE2           ADD      R0,SP,#+376
   \   00000E10   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000E14   402089E2           ADD      R2,R9,#+64
   \   00000E18   5E1F8DE2           ADD      R1,SP,#+376
   \   00000E1C   570F8DE2           ADD      R0,SP,#+348
   \   00000E20   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000E24   0420A0E1           MOV      R2,R4
   \   00000E28   571F8DE2           ADD      R1,SP,#+348
   \   00000E2C   500F8DE2           ADD      R0,SP,#+320
   \   00000E30   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000E34   0A30A0E1           MOV      R3,R10
   \   00000E38   0B20A0E1           MOV      R2,R11
   \   00000E3C   501F8DE2           ADD      R1,SP,#+320
   \   00000E40   7C008DE2           ADD      R0,SP,#+124
   \   00000E44   ........           _BLF     ??append,??append??rA
   \   00000E48   0B20A0E1           MOV      R2,R11
   \   00000E4C   0710A0E1           MOV      R1,R7
   \   00000E50   500F8DE2           ADD      R0,SP,#+320
   \   00000E54   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E58   0B20A0E1           MOV      R2,R11
   \   00000E5C   0710A0E1           MOV      R1,R7
   \   00000E60   28008DE2           ADD      R0,SP,#+40
   \   00000E64   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E68   0B20A0E1           MOV      R2,R11
   \   00000E6C   0710A0E1           MOV      R1,R7
   \   00000E70   570F8DE2           ADD      R0,SP,#+348
   \   00000E74   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E78   0B20A0E1           MOV      R2,R11
   \   00000E7C   0710A0E1           MOV      R1,R7
   \   00000E80   5E0F8DE2           ADD      R0,SP,#+376
   \   00000E84   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E88   0B20A0E1           MOV      R2,R11
   \   00000E8C   0710A0E1           MOV      R1,R7
   \   00000E90   650F8DE2           ADD      R0,SP,#+404
   \   00000E94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E98   0B20A0E1           MOV      R2,R11
   \   00000E9C   0710A0E1           MOV      R1,R7
   \   00000EA0   7A0F8DE2           ADD      R0,SP,#+488
   \   00000EA4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000EA8   8C1089E2           ADD      R1,R9,#+140
   \   00000EAC   880F8DE2           ADD      R0,SP,#+544
   \   00000EB0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000EB4   0A30A0E1           MOV      R3,R10
   \   00000EB8   0B20A0E1           MOV      R2,R11
   \   00000EBC   0010A0E1           MOV      R1,R0
   \   00000EC0   7C008DE2           ADD      R0,SP,#+124
   \   00000EC4   ........           _BLF     ??append,??append??rA
   \   00000EC8   0B20A0E1           MOV      R2,R11
   \   00000ECC   0710A0E1           MOV      R1,R7
   \   00000ED0   880F8DE2           ADD      R0,SP,#+544
   \   00000ED4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000ED8   441085E2           ADD      R1,R5,#+68
   \   00000EDC   98008DE2           ADD      R0,SP,#+152
   \   00000EE0   ........           _BLF     ??string,??string??rA
   \   00000EE4   0820A0E1           MOV      R2,R8
   \   00000EE8   98108DE2           ADD      R1,SP,#+152
   \   00000EEC   810F8DE2           ADD      R0,SP,#+516
   \   00000EF0   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000EF4   0A30A0E1           MOV      R3,R10
   \   00000EF8   0B20A0E1           MOV      R2,R11
   \   00000EFC   811F8DE2           ADD      R1,SP,#+516
   \   00000F00   7C008DE2           ADD      R0,SP,#+124
   \   00000F04   ........           _BLF     ??append,??append??rA
   \   00000F08   0B20A0E1           MOV      R2,R11
   \   00000F0C   0710A0E1           MOV      R1,R7
   \   00000F10   810F8DE2           ADD      R0,SP,#+516
   \   00000F14   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F18   0B20A0E1           MOV      R2,R11
   \   00000F1C   0710A0E1           MOV      R1,R7
   \   00000F20   98008DE2           ADD      R0,SP,#+152
   \   00000F24   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F28   7C108DE2           ADD      R1,SP,#+124
   \   00000F2C   6C0F8DE2           ADD      R0,SP,#+432
   \   00000F30   ........           _BLF     ??string,??string??rA
   \   00000F34   6C0F8DE2           ADD      R0,SP,#+432
   \   00000F38   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   00000F3C   0B20A0E1           MOV      R2,R11
   \   00000F40   0710A0E1           MOV      R1,R7
   \   00000F44   6C0F8DE2           ADD      R0,SP,#+432
   \   00000F48   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F4C   07B0A0E1           MOV      R11,R7
   \   00000F50   0020A0E3           MOV      R2,#+0
   \   00000F54   0710A0E1           MOV      R1,R7
   \   00000F58   7C008DE2           ADD      R0,SP,#+124
   \   00000F5C   50FDFFEA           B        ??Add_10
   \                     ??Add_5:
   \   00000F60   00209DE5           LDR      R2,[SP, #+0]
   \   00000F64   3F0040E2           SUB      R0,R0,#+63
   \   00000F68   FC2082E2           ADD      R2,R2,#+252
   \   00000F6C   8220A0E1           LSL      R2,R2,#+1
   \   00000F70   0520CDE5           STRB     R2,[SP, #+5]
   \   00000F74   00209DE5           LDR      R2,[SP, #+0]
   \   00000F78   800E40E2           SUB      R0,R0,#+2048
   \   00000F7C   8220A0E1           LSL      R2,R2,#+1
   \   00000F80   0420CDE5           STRB     R2,[SP, #+4]
   \   00000F84   4C0050E3           CMP      R0,#+76
   \   00000F88   5700008A           BHI      ??Add_19
   \   00000F8C   011F8FE2           ADR      R1,??Add_2
   \   00000F90   0010D1E7           LDRB     R1,[R1, R0]
   \   00000F94   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??Add_2:
   \   00000F98   13545454           DC8      +19,+84,+84,+84
   \   00000F9C   54545454           DC8      +84,+84,+84,+84
   \   00000FA0   54131313           DC8      +84,+19,+19,+19
   \   00000FA4   13131354           DC8      +19,+19,+19,+84
   \   00000FA8   54545413           DC8      +84,+84,+84,+19
   \   00000FAC   13135454           DC8      +19,+19,+84,+84
   \   00000FB0   13545454           DC8      +19,+84,+84,+84
   \   00000FB4   54541313           DC8      +84,+84,+19,+19
   \   00000FB8   13545454           DC8      +19,+84,+84,+84
   \   00000FBC   54545413           DC8      +84,+84,+84,+19
   \   00000FC0   54131354           DC8      +84,+19,+19,+84
   \   00000FC4   54545454           DC8      +84,+84,+84,+84
   \   00000FC8   54545454           DC8      +84,+84,+84,+84
   \   00000FCC   54545454           DC8      +84,+84,+84,+84
   \   00000FD0   54545454           DC8      +84,+84,+84,+84
   \   00000FD4   54545454           DC8      +84,+84,+84,+84
   \   00000FD8   13545454           DC8      +19,+84,+84,+84
   \   00000FDC   54542121           DC8      +84,+84,+33,+33
   \   00000FE0   21212121           DC8      +33,+33,+33,+33
   \   00000FE4   3B000000           DC8      +59,+0,+0,+0
   \                     ??Add_20:
   \   00000FE8   0A20A0E1           MOV      R2,R10
   \   00000FEC   0510A0E1           MOV      R1,R5
   \   00000FF0   0400A0E1           MOV      R0,R4
   \   00000FF4   ........           _BLF     `??new SCADCard`,`??new SCADCard??rA`
   \   00000FF8   0080A0E1           MOV      R8,R0
   \   00000FFC   A43098E5           LDR      R3,[R8, #+164]
   \   00001000   0520A0E1           MOV      R2,R5
   \   00001004   803093E5           LDR      R3,[R3, #+128]
   \   00001008   0410A0E1           MOV      R1,R4
   \   0000100C   0FE0A0E1           MOV      LR,PC
   \   00001010   13FF2FE1           BX       R3
   \                     ??Add_21:
   \   00001014   08009DE5           LDR      R0,[SP, #+8]
   \   00001018   B48180E5           STR      R8,[R0, #+436]
   \   0000101C   2DFDFFEA           B        ??Add_13
   \                     ??Add_22:
   \   00001020   0A20A0E1           MOV      R2,R10
   \   00001024   0510A0E1           MOV      R1,R5
   \   00001028   0400A0E1           MOV      R0,R4
   \   0000102C   ........           _BLF     `??new SCWaterIngress`,`??new SCWaterIngress??rA`
   \   00001030   0080A0E1           MOV      R8,R0
   \   00001034   A43098E5           LDR      R3,[R8, #+164]
   \   00001038   0520A0E1           MOV      R2,R5
   \   0000103C   803093E5           LDR      R3,[R3, #+128]
   \   00001040   0410A0E1           MOV      R1,R4
   \   00001044   0FE0A0E1           MOV      LR,PC
   \   00001048   13FF2FE1           BX       R3
   \   0000104C   00009DE5           LDR      R0,[SP, #+0]
   \   00001050   040050E3           CMP      R0,#+4
   \   00001054   050000AA           BGE      ??Add_23
   \   00001058   3800D6E5           LDRB     R0,[R6, #+56]
   \   0000105C   D410DDE1           LDRSB    R1,[SP, #+4]
   \   00001060   1711A0E1           LSL      R1,R7,R1
   \   00001064   000081E1           ORR      R0,R1,R0
   \                     ??Add_24:
   \   00001068   3800C6E5           STRB     R0,[R6, #+56]
   \   0000106C   E8FFFFEA           B        ??Add_21
   \                     ??Add_23:
   \   00001070   3900D6E5           LDRB     R0,[R6, #+57]
   \   00001074   D510DDE1           LDRSB    R1,[SP, #+5]
   \   00001078   1711A0E1           LSL      R1,R7,R1
   \   0000107C   000081E1           ORR      R0,R1,R0
   \                     ??Add_25:
   \   00001080   3900C6E5           STRB     R0,[R6, #+57]
   \   00001084   E2FFFFEA           B        ??Add_21
   \                     ??Add_26:
   \   00001088   0A20A0E1           MOV      R2,R10
   \   0000108C   0510A0E1           MOV      R1,R5
   \   00001090   0400A0E1           MOV      R0,R4
   \   00001094   ........           _BLF     `??new SCWaterIngress`,`??new SCWaterIngress??rA`
   \   00001098   0080A0E1           MOV      R8,R0
   \   0000109C   A43098E5           LDR      R3,[R8, #+164]
   \   000010A0   0520A0E1           MOV      R2,R5
   \   000010A4   803093E5           LDR      R3,[R3, #+128]
   \   000010A8   0410A0E1           MOV      R1,R4
   \   000010AC   0FE0A0E1           MOV      LR,PC
   \   000010B0   13FF2FE1           BX       R3
   \   000010B4   00109DE5           LDR      R1,[SP, #+0]
   \   000010B8   0200A0E3           MOV      R0,#+2
   \   000010BC   040051E3           CMP      R1,#+4
   \   000010C0   3810D6B5           LDRBLT   R1,[R6, #+56]
   \   000010C4   D420DDB1           LDRSBLT  R2,[SP, #+4]
   \   000010C8   1002A0B1           LSLLT    R0,R0,R2
   \   000010CC   010080B1           ORRLT    R0,R0,R1
   \   000010D0   E4FFFFBA           BLT      ??Add_24
   \   000010D4   3910D6E5           LDRB     R1,[R6, #+57]
   \   000010D8   D520DDE1           LDRSB    R2,[SP, #+5]
   \   000010DC   1002A0E1           LSL      R0,R0,R2
   \   000010E0   010080E1           ORR      R0,R0,R1
   \   000010E4   E5FFFFEA           B        ??Add_25
   \                     ??Add_9:
   \   000010E8   ........           DC32     ??npos
   \                     ??Add_19:
   \   000010EC   F41094E5           LDR      R1,[R4, #+244]
   \   000010F0   60008DE2           ADD      R0,SP,#+96
   \   000010F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000010F8   00A0A0E1           MOV      R10,R0
   \   000010FC   0910A0E1           MOV      R1,R9
   \   00001100   7C008DE2           ADD      R0,SP,#+124
   \   00001104   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001108   0A20A0E1           MOV      R2,R10
   \   0000110C   0010A0E1           MOV      R1,R0
   \   00001110   0C008DE2           ADD      R0,SP,#+12
   \   00001114   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001118   0C108DE2           ADD      R1,SP,#+12
   \   0000111C   28008DE2           ADD      R0,SP,#+40
   \   00001120   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00001124   0020A0E3           MOV      R2,#+0
   \   00001128   0710A0E1           MOV      R1,R7
   \   0000112C   0C008DE2           ADD      R0,SP,#+12
   \   00001130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001134   0B20A0E1           MOV      R2,R11
   \   00001138   0710A0E1           MOV      R1,R7
   \   0000113C   60008DE2           ADD      R0,SP,#+96
   \   00001140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001144   0B20A0E1           MOV      R2,R11
   \   00001148   0710A0E1           MOV      R1,R7
   \   0000114C   7C008DE2           ADD      R0,SP,#+124
   \   00001150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001154   F81094E5           LDR      R1,[R4, #+248]
   \   00001158   810F8DE2           ADD      R0,SP,#+516
   \   0000115C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00001160   00A0A0E1           MOV      R10,R0
   \   00001164   081089E2           ADD      R1,R9,#+8
   \   00001168   98008DE2           ADD      R0,SP,#+152
   \   0000116C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001170   0A20A0E1           MOV      R2,R10
   \   00001174   0010A0E1           MOV      R1,R0
   \   00001178   6C0F8DE2           ADD      R0,SP,#+432
   \   0000117C   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001180   0820A0E1           MOV      R2,R8
   \   00001184   6C1F8DE2           ADD      R1,SP,#+432
   \   00001188   44008DE2           ADD      R0,SP,#+68
   \   0000118C   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00001190   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00001194   0B20A0E1           MOV      R2,R11
   \   00001198   00A090E5           LDR      R10,[R0, #+0]
   \   0000119C   44108DE2           ADD      R1,SP,#+68
   \   000011A0   0A30A0E1           MOV      R3,R10
   \   000011A4   28008DE2           ADD      R0,SP,#+40
   \   000011A8   ........           _BLF     ??append,??append??rA
   \   000011AC   0B20A0E1           MOV      R2,R11
   \   000011B0   0710A0E1           MOV      R1,R7
   \   000011B4   44008DE2           ADD      R0,SP,#+68
   \   000011B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011BC   0B20A0E1           MOV      R2,R11
   \   000011C0   0710A0E1           MOV      R1,R7
   \   000011C4   6C0F8DE2           ADD      R0,SP,#+432
   \   000011C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011CC   0B20A0E1           MOV      R2,R11
   \   000011D0   0710A0E1           MOV      R1,R7
   \   000011D4   810F8DE2           ADD      R0,SP,#+516
   \   000011D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011DC   0B20A0E1           MOV      R2,R11
   \   000011E0   0710A0E1           MOV      R1,R7
   \   000011E4   98008DE2           ADD      R0,SP,#+152
   \   000011E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011EC   040194E5           LDR      R0,[R4, #+260]
   \   000011F0   011080E2           ADD      R1,R0,#+1
   \   000011F4   5E0F8DE2           ADD      R0,SP,#+376
   \   000011F8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000011FC   0040A0E1           MOV      R4,R0
   \   00001200   141089E2           ADD      R1,R9,#+20
   \   00001204   7A0F8DE2           ADD      R0,SP,#+488
   \   00001208   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000120C   0420A0E1           MOV      R2,R4
   \   00001210   0010A0E1           MOV      R1,R0
   \   00001214   650F8DE2           ADD      R0,SP,#+404
   \   00001218   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   0000121C   0A30A0E1           MOV      R3,R10
   \   00001220   0B20A0E1           MOV      R2,R11
   \   00001224   651F8DE2           ADD      R1,SP,#+404
   \   00001228   28008DE2           ADD      R0,SP,#+40
   \   0000122C   ........           _BLF     ??append,??append??rA
   \   00001230   0B20A0E1           MOV      R2,R11
   \   00001234   0710A0E1           MOV      R1,R7
   \   00001238   650F8DE2           ADD      R0,SP,#+404
   \   0000123C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001240   0B20A0E1           MOV      R2,R11
   \   00001244   0710A0E1           MOV      R1,R7
   \   00001248   5E0F8DE2           ADD      R0,SP,#+376
   \   0000124C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001250   0B20A0E1           MOV      R2,R11
   \   00001254   0710A0E1           MOV      R1,R7
   \   00001258   7A0F8DE2           ADD      R0,SP,#+488
   \   0000125C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001260   301096E5           LDR      R1,[R6, #+48]
   \   00001264   8F0F8DE2           ADD      R0,SP,#+572
   \   00001268   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000126C   2C1096E5           LDR      R1,[R6, #+44]
   \   00001270   0040A0E1           MOV      R4,R0
   \   00001274   420F8DE2           ADD      R0,SP,#+264
   \   00001278   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000127C   381089E2           ADD      R1,R9,#+56
   \   00001280   730F8DE2           ADD      R0,SP,#+460
   \   00001284   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001288   422F8DE2           ADD      R2,SP,#+264
   \   0000128C   0010A0E1           MOV      R1,R0
   \   00001290   490F8DE2           ADD      R0,SP,#+292
   \   00001294   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001298   402089E2           ADD      R2,R9,#+64
   \   0000129C   491F8DE2           ADD      R1,SP,#+292
   \   000012A0   500F8DE2           ADD      R0,SP,#+320
   \   000012A4   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000012A8   0420A0E1           MOV      R2,R4
   \   000012AC   501F8DE2           ADD      R1,SP,#+320
   \   000012B0   570F8DE2           ADD      R0,SP,#+348
   \   000012B4   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000012B8   0A30A0E1           MOV      R3,R10
   \   000012BC   0B20A0E1           MOV      R2,R11
   \   000012C0   571F8DE2           ADD      R1,SP,#+348
   \   000012C4   28008DE2           ADD      R0,SP,#+40
   \   000012C8   ........           _BLF     ??append,??append??rA
   \   000012CC   0B20A0E1           MOV      R2,R11
   \   000012D0   0710A0E1           MOV      R1,R7
   \   000012D4   570F8DE2           ADD      R0,SP,#+348
   \   000012D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012DC   0B20A0E1           MOV      R2,R11
   \   000012E0   0710A0E1           MOV      R1,R7
   \   000012E4   8F0F8DE2           ADD      R0,SP,#+572
   \   000012E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012EC   0B20A0E1           MOV      R2,R11
   \   000012F0   0710A0E1           MOV      R1,R7
   \   000012F4   500F8DE2           ADD      R0,SP,#+320
   \   000012F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012FC   0B20A0E1           MOV      R2,R11
   \   00001300   0710A0E1           MOV      R1,R7
   \   00001304   490F8DE2           ADD      R0,SP,#+292
   \   00001308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000130C   0B20A0E1           MOV      R2,R11
   \   00001310   0710A0E1           MOV      R1,R7
   \   00001314   420F8DE2           ADD      R0,SP,#+264
   \   00001318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000131C   0B20A0E1           MOV      R2,R11
   \   00001320   0710A0E1           MOV      R1,R7
   \   00001324   730F8DE2           ADD      R0,SP,#+460
   \   00001328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000132C   8C1089E2           ADD      R1,R9,#+140
   \   00001330   EC008DE2           ADD      R0,SP,#+236
   \   00001334   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001338   0A30A0E1           MOV      R3,R10
   \   0000133C   0B20A0E1           MOV      R2,R11
   \   00001340   0010A0E1           MOV      R1,R0
   \   00001344   28008DE2           ADD      R0,SP,#+40
   \   00001348   ........           _BLF     ??append,??append??rA
   \   0000134C   0B20A0E1           MOV      R2,R11
   \   00001350   0710A0E1           MOV      R1,R7
   \   00001354   EC008DE2           ADD      R0,SP,#+236
   \   00001358   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000135C   441085E2           ADD      R1,R5,#+68
   \   00001360   B4008DE2           ADD      R0,SP,#+180
   \   00001364   ........           _BLF     ??string,??string??rA
   \   00001368   0820A0E1           MOV      R2,R8
   \   0000136C   B4108DE2           ADD      R1,SP,#+180
   \   00001370   D0008DE2           ADD      R0,SP,#+208
   \   00001374   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00001378   0A30A0E1           MOV      R3,R10
   \   0000137C   0B20A0E1           MOV      R2,R11
   \   00001380   D0108DE2           ADD      R1,SP,#+208
   \   00001384   28008DE2           ADD      R0,SP,#+40
   \   00001388   ........           _BLF     ??append,??append??rA
   \   0000138C   0B20A0E1           MOV      R2,R11
   \   00001390   0710A0E1           MOV      R1,R7
   \   00001394   D0008DE2           ADD      R0,SP,#+208
   \   00001398   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000139C   0B20A0E1           MOV      R2,R11
   \   000013A0   0710A0E1           MOV      R1,R7
   \   000013A4   B4008DE2           ADD      R0,SP,#+180
   \   000013A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013AC   28108DE2           ADD      R1,SP,#+40
   \   000013B0   880F8DE2           ADD      R0,SP,#+544
   \   000013B4   ........           _BLF     ??string,??string??rA
   \   000013B8   880F8DE2           ADD      R0,SP,#+544
   \   000013BC   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   000013C0   0B20A0E1           MOV      R2,R11
   \   000013C4   0710A0E1           MOV      R1,R7
   \   000013C8   880F8DE2           ADD      R0,SP,#+544
   \   000013CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013D0   07B0A0E1           MOV      R11,R7
   \   000013D4   0020A0E3           MOV      R2,#+0
   \   000013D8   0710A0E1           MOV      R1,R7
   \   000013DC   28008DE2           ADD      R0,SP,#+40
   \   000013E0   2FFCFFEA           B        ??Add_10
   \                     ??Add_4:
   \   000013E4   F41094E5           LDR      R1,[R4, #+244]
   \   000013E8   44008DE2           ADD      R0,SP,#+68
   \   000013EC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000013F0   00A0A0E1           MOV      R10,R0
   \   000013F4   0910A0E1           MOV      R1,R9
   \   000013F8   28008DE2           ADD      R0,SP,#+40
   \   000013FC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001400   0A20A0E1           MOV      R2,R10
   \   00001404   0010A0E1           MOV      R1,R0
   \   00001408   0C008DE2           ADD      R0,SP,#+12
   \   0000140C   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001410   0C108DE2           ADD      R1,SP,#+12
   \   00001414   98008DE2           ADD      R0,SP,#+152
   \   00001418   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000141C   0020A0E3           MOV      R2,#+0
   \   00001420   0710A0E1           MOV      R1,R7
   \   00001424   0C008DE2           ADD      R0,SP,#+12
   \   00001428   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000142C   0B20A0E1           MOV      R2,R11
   \   00001430   0710A0E1           MOV      R1,R7
   \   00001434   44008DE2           ADD      R0,SP,#+68
   \   00001438   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000143C   0B20A0E1           MOV      R2,R11
   \   00001440   0710A0E1           MOV      R1,R7
   \   00001444   28008DE2           ADD      R0,SP,#+40
   \   00001448   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000144C   F81094E5           LDR      R1,[R4, #+248]
   \   00001450   D0008DE2           ADD      R0,SP,#+208
   \   00001454   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00001458   00A0A0E1           MOV      R10,R0
   \   0000145C   081089E2           ADD      R1,R9,#+8
   \   00001460   B4008DE2           ADD      R0,SP,#+180
   \   00001464   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001468   0A20A0E1           MOV      R2,R10
   \   0000146C   0010A0E1           MOV      R1,R0
   \   00001470   7C008DE2           ADD      R0,SP,#+124
   \   00001474   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001478   0820A0E1           MOV      R2,R8
   \   0000147C   7C108DE2           ADD      R1,SP,#+124
   \   00001480   60008DE2           ADD      R0,SP,#+96
   \   00001484   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00001488   ........           LDR      R0,??DataTable7  ;; ??npos
   \   0000148C   0B20A0E1           MOV      R2,R11
   \   00001490   00A090E5           LDR      R10,[R0, #+0]
   \   00001494   60108DE2           ADD      R1,SP,#+96
   \   00001498   0A30A0E1           MOV      R3,R10
   \   0000149C   98008DE2           ADD      R0,SP,#+152
   \   000014A0   ........           _BLF     ??append,??append??rA
   \   000014A4   0B20A0E1           MOV      R2,R11
   \   000014A8   0710A0E1           MOV      R1,R7
   \   000014AC   60008DE2           ADD      R0,SP,#+96
   \   000014B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014B4   0B20A0E1           MOV      R2,R11
   \   000014B8   0710A0E1           MOV      R1,R7
   \   000014BC   7C008DE2           ADD      R0,SP,#+124
   \   000014C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014C4   0B20A0E1           MOV      R2,R11
   \   000014C8   0710A0E1           MOV      R1,R7
   \   000014CC   D0008DE2           ADD      R0,SP,#+208
   \   000014D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014D4   0B20A0E1           MOV      R2,R11
   \   000014D8   0710A0E1           MOV      R1,R7
   \   000014DC   B4008DE2           ADD      R0,SP,#+180
   \   000014E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000014E4   040194E5           LDR      R0,[R4, #+260]
   \   000014E8   011080E2           ADD      R1,R0,#+1
   \   000014EC   490F8DE2           ADD      R0,SP,#+292
   \   000014F0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000014F4   0040A0E1           MOV      R4,R0
   \   000014F8   141089E2           ADD      R1,R9,#+20
   \   000014FC   420F8DE2           ADD      R0,SP,#+264
   \   00001500   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001504   0420A0E1           MOV      R2,R4
   \   00001508   0010A0E1           MOV      R1,R0
   \   0000150C   EC008DE2           ADD      R0,SP,#+236
   \   00001510   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001514   0A30A0E1           MOV      R3,R10
   \   00001518   0B20A0E1           MOV      R2,R11
   \   0000151C   EC108DE2           ADD      R1,SP,#+236
   \   00001520   98008DE2           ADD      R0,SP,#+152
   \   00001524   ........           _BLF     ??append,??append??rA
   \   00001528   0B20A0E1           MOV      R2,R11
   \   0000152C   0710A0E1           MOV      R1,R7
   \   00001530   EC008DE2           ADD      R0,SP,#+236
   \   00001534   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001538   0B20A0E1           MOV      R2,R11
   \   0000153C   0710A0E1           MOV      R1,R7
   \   00001540   490F8DE2           ADD      R0,SP,#+292
   \   00001544   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001548   0B20A0E1           MOV      R2,R11
   \   0000154C   0710A0E1           MOV      R1,R7
   \   00001550   420F8DE2           ADD      R0,SP,#+264
   \   00001554   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001558   301096E5           LDR      R1,[R6, #+48]
   \   0000155C   880F8DE2           ADD      R0,SP,#+544
   \   00001560   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00001564   2C1096E5           LDR      R1,[R6, #+44]
   \   00001568   0040A0E1           MOV      R4,R0
   \   0000156C   6C0F8DE2           ADD      R0,SP,#+432
   \   00001570   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001574   381089E2           ADD      R1,R9,#+56
   \   00001578   650F8DE2           ADD      R0,SP,#+404
   \   0000157C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001580   6C2F8DE2           ADD      R2,SP,#+432
   \   00001584   0010A0E1           MOV      R1,R0
   \   00001588   5E0F8DE2           ADD      R0,SP,#+376
   \   0000158C   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00001590   402089E2           ADD      R2,R9,#+64
   \   00001594   5E1F8DE2           ADD      R1,SP,#+376
   \   00001598   570F8DE2           ADD      R0,SP,#+348
   \   0000159C   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000015A0   0420A0E1           MOV      R2,R4
   \   000015A4   571F8DE2           ADD      R1,SP,#+348
   \   000015A8   500F8DE2           ADD      R0,SP,#+320
   \   000015AC   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000015B0   0A30A0E1           MOV      R3,R10
   \   000015B4   0B20A0E1           MOV      R2,R11
   \   000015B8   501F8DE2           ADD      R1,SP,#+320
   \   000015BC   98008DE2           ADD      R0,SP,#+152
   \   000015C0   ........           _BLF     ??append,??append??rA
   \   000015C4   0B20A0E1           MOV      R2,R11
   \   000015C8   0710A0E1           MOV      R1,R7
   \   000015CC   500F8DE2           ADD      R0,SP,#+320
   \   000015D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000015D4   0B20A0E1           MOV      R2,R11
   \   000015D8   0710A0E1           MOV      R1,R7
   \   000015DC   880F8DE2           ADD      R0,SP,#+544
   \   000015E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000015E4   0B20A0E1           MOV      R2,R11
   \   000015E8   0710A0E1           MOV      R1,R7
   \   000015EC   570F8DE2           ADD      R0,SP,#+348
   \   000015F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000015F4   0B20A0E1           MOV      R2,R11
   \   000015F8   0710A0E1           MOV      R1,R7
   \   000015FC   5E0F8DE2           ADD      R0,SP,#+376
   \   00001600   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001604   0B20A0E1           MOV      R2,R11
   \   00001608   0710A0E1           MOV      R1,R7
   \   0000160C   6C0F8DE2           ADD      R0,SP,#+432
   \   00001610   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001614   0B20A0E1           MOV      R2,R11
   \   00001618   0710A0E1           MOV      R1,R7
   \   0000161C   650F8DE2           ADD      R0,SP,#+404
   \   00001620   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001624   B01089E2           ADD      R1,R9,#+176
   \   00001628   8F0F8DE2           ADD      R0,SP,#+572
   \   0000162C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00001630   0A30A0E1           MOV      R3,R10
   \   00001634   0B20A0E1           MOV      R2,R11
   \   00001638   0010A0E1           MOV      R1,R0
   \   0000163C   98008DE2           ADD      R0,SP,#+152
   \   00001640   ........           _BLF     ??append,??append??rA
   \   00001644   0B20A0E1           MOV      R2,R11
   \   00001648   0710A0E1           MOV      R1,R7
   \   0000164C   8F0F8DE2           ADD      R0,SP,#+572
   \   00001650   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001654   441085E2           ADD      R1,R5,#+68
   \   00001658   7A0F8DE2           ADD      R0,SP,#+488
   \   0000165C   ........           _BLF     ??string,??string??rA
   \   00001660   0820A0E1           MOV      R2,R8
   \   00001664   7A1F8DE2           ADD      R1,SP,#+488
   \   00001668   730F8DE2           ADD      R0,SP,#+460
   \   0000166C   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00001670   0A30A0E1           MOV      R3,R10
   \   00001674   0B20A0E1           MOV      R2,R11
   \   00001678   731F8DE2           ADD      R1,SP,#+460
   \   0000167C   98008DE2           ADD      R0,SP,#+152
   \   00001680   ........           _BLF     ??append,??append??rA
   \   00001684   0B20A0E1           MOV      R2,R11
   \   00001688   0710A0E1           MOV      R1,R7
   \   0000168C   730F8DE2           ADD      R0,SP,#+460
   \   00001690   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001694   0B20A0E1           MOV      R2,R11
   \   00001698   0710A0E1           MOV      R1,R7
   \   0000169C   7A0F8DE2           ADD      R0,SP,#+488
   \   000016A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000016A4   98108DE2           ADD      R1,SP,#+152
   \   000016A8   810F8DE2           ADD      R0,SP,#+516
   \   000016AC   ........           _BLF     ??string,??string??rA
   \   000016B0   810F8DE2           ADD      R0,SP,#+516
   \   000016B4   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   000016B8   0B20A0E1           MOV      R2,R11
   \   000016BC   0710A0E1           MOV      R1,R7
   \   000016C0   810F8DE2           ADD      R0,SP,#+516
   \   000016C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000016C8   07B0A0E1           MOV      R11,R7
   \   000016CC   0020A0E3           MOV      R2,#+0
   \   000016D0   0710A0E1           MOV      R1,R7
   \   000016D4   98008DE2           ADD      R0,SP,#+152
   \   000016D8   71FBFFEA           B        ??Add_10
    243          }
    244          //---------------------------------------------------------------------------
    245          
    246          #ifndef ANCONF
    247          ///////////////////////////////////////////////////////////////
    248          //
    249          // Routines for the librarian
    250          //
    251          ///////////////////////////////////////////////////////////////
    252          

   \                                 In segment CODE, align 4, keep-with-next
    253          int  IOUnitZB485::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    254          {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
    255              return(IOUnit::GetValue(ValueId, Index, MyRetValue,  DecPnt,Unit));
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    256          }
    257          

   \                                 In segment CODE, align 4, keep-with-next
    258          int IOUnitZB485::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    259          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    260              return(IOUnit::GetStringValue(ValueId,Index, MyString));
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine20
    261          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    262          

   \                                 In segment CODE, align 4, keep-with-next
    263          int IOUnitZB485::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    264          {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3470DDE5           LDRB     R7,[SP, #+52]
   \   0000000C   38809DE5           LDR      R8,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    265              return(IOUnit::PutValue( ValueId, Index, NewValue, Local,UnitId));
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??string,??string??rA
   \   00000028   00012DE9           PUSH     {R8}
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   24D08DE2           ADD      SP,SP,#+36
   \   00000060                      REQUIRE ?Subroutine19
   \   00000060                      ;; // Fall through to label ?Subroutine19
    266          }
    267          

   \                                 In segment CODE, align 4, keep-with-next
    268          int IOUnitZB485::PutFloatValue( int ValueId, float NewValue)
    269          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    270              return(IOUnit::PutFloatValue(ValueId,NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine20
   \   00000008                      ;; // Fall through to label ?Subroutine20
    271          }
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          ValueList *IOUnitZB485::GetValueInfoTable(int &Entries, int Index)
    274          {
    275              Entries = NELEMENTS(IOUnitZB485ValueList);
   \                     ??GetValueInfoTable:
   \   00000000   0D00A0E3           MOV      R0,#+13
   \   00000004   000081E5           STR      R0,[R1, #+0]
    276              return(IOUnitZB485ValueList);
   \   00000008   00009FE5           LDR      R0,??GetValueInfoTable_1  ;; ??IOUnitZB485ValueList
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTable_1:
   \   00000010   ........           DC32     ??IOUnitZB485ValueList
    277          }
    278          
    279          
    280          ///////////////////////////////////////////////////////////////
    281          //
    282          // Routines for communication
    283          //
    284          ///////////////////////////////////////////////////////////////
    285          
    286          

   \                                 In segment CODE, align 4, keep-with-next
    287          bool IOUnitZB485::ANPRO10_IO_UnpackPacket(U8 *Buf)
    288          {
   \                     ??ANPRO10_IO_UnpackPacket:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0090A0E1           MOV      R9,R0
    289              ANPRO10_PacketHeading *pPH = (ANPRO10_PacketHeading*)Buf;
    290              Buf += sizeof(ANPRO10_PacketHeading);
   \   00000008   070081E2           ADD      R0,R1,#+7
    291          
    292              ANPRO10_CommandHeading *pCH;
    293              //bool RecalcTanks=false;
    294              bool MyPacket= (pPH->txadr == this->IOAddress);
   \   0000000C   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000010   A44089E2           ADD      R4,R9,#+164
   \   00000014   FC2094E5           LDR      R2,[R4, #+252]
   \   00000018   020051E1           CMP      R1,R2
   \   0000001C   1500001A           BNE      ??ANPRO10_IO_UnpackPacket_1
   \   00000020   0180A0E3           MOV      R8,#+1
   \   00000024   0170A0E3           MOV      R7,#+1
    295              if ( MyPacket ) {
    296                  do {
    297                      pCH = (ANPRO10_CommandHeading*)Buf;
   \                     ??ANPRO10_IO_UnpackPacket_2:
   \   00000028   0050A0E1           MOV      R5,R0
    298                      Buf += sizeof(ANPRO10_CommandHeading);  // ??
    299                      switch ( pCH->CommandNo ) {
   \   0000002C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000030   046080E2           ADD      R6,R0,#+4
   \   00000034   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000038   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000003C   FA1F87E3           ORR      R1,R7,#0x3E8
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   1000000A           BEQ      ??ANPRO10_IO_UnpackPacket_3
   \   00000048   5A1081E2           ADD      R1,R1,#+90
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   3300000A           BEQ      ??ANPRO10_IO_UnpackPacket_4
   \   00000054   D71F81E2           ADD      R1,R1,#+860
   \   00000058   010050E1           CMP      R0,R1
   \   0000005C   0700000A           BEQ      ??ANPRO10_IO_UnpackPacket_5
   \   00000060   0A1081E2           ADD      R1,R1,#+10
   \   00000064   010050E1           CMP      R0,R1
   \   00000068   4200001A           BNE      ??ANPRO10_IO_UnpackPacket_6
    300                      case CMD_TXU_COMPRESSED_PACKET:
    301                          //Decompress(Size,Buf,Port);
    302                          break;
    303                      case CMD_REP_FLASH_PROG:
    304                          ProgrammingStatus = *Buf;
   \   0000006C   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000070   CF00C4E5           STRB     R0,[R4, #+207]
   \   00000074   3F0000EA           B        ??ANPRO10_IO_UnpackPacket_6
   \                     ??ANPRO10_IO_UnpackPacket_1:
   \   00000078   0070A0E3           MOV      R7,#+0
   \   0000007C   460000EA           B        ??ANPRO10_IO_UnpackPacket_7
    305                          break;
    306                      case  CMD_REP_FLASH_ERASE:
    307                          FlashEraseStatus = *Buf;
   \                     ??ANPRO10_IO_UnpackPacket_5:
   \   00000080   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000084   CE00C4E5           STRB     R0,[R4, #+206]
   \   00000088   3A0000EA           B        ??ANPRO10_IO_UnpackPacket_6
    308                          break;
    309                      case CMD_REP_STATUS:
    310                          {
    311                              ANPRO10_COMMAND_1001 *CardInfo = (ANPRO10_COMMAND_1001*)Buf;
    312                              CardChannel       = CardInfo->CardChannel;
   \                     ??ANPRO10_IO_UnpackPacket_3:
   \   0000008C   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000090   B400C4E5           STRB     R0,[R4, #+180]
    313                              CardId            = CardInfo->CardId;
   \   00000094   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000098   B500C4E5           STRB     R0,[R4, #+181]
    314                              CardAddress       = CardInfo->CardAddress;
   \   0000009C   0200D6E5           LDRB     R0,[R6, #+2]
   \   000000A0   B600C4E5           STRB     R0,[R4, #+182]
    315                              UnitProgVersion   = CardInfo->UnitProgVersion;
   \   000000A4   0300D6E5           LDRB     R0,[R6, #+3]
   \   000000A8   B700C4E5           STRB     R0,[R4, #+183]
    316                              ComVersion        = CardInfo->ComVersion;
   \   000000AC   0400D6E5           LDRB     R0,[R6, #+4]
   \   000000B0   B800C4E5           STRB     R0,[R4, #+184]
    317                              StoreVersion      = CardInfo->StoreVersion;
   \   000000B4   0500D6E5           LDRB     R0,[R6, #+5]
   \   000000B8   B900C4E5           STRB     R0,[R4, #+185]
    318                              RxBufSize         = CardInfo->RxBufSize;
   \   000000BC   0700D6E5           LDRB     R0,[R6, #+7]
   \   000000C0   0610D6E5           LDRB     R1,[R6, #+6]
   \   000000C4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000C8   BA0BC4E1           STRH     R0,[R4, #+186]
    319                              TxBufSize         = CardInfo->TxBufSize;
   \   000000CC   0900D6E5           LDRB     R0,[R6, #+9]
   \   000000D0   0810D6E5           LDRB     R1,[R6, #+8]
   \   000000D4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000D8   BC0BC4E1           STRH     R0,[R4, #+188]
    320                              ProgamTypeRunning = CardInfo->ProgamTypeRunning;
   \   000000DC   0B00D6E5           LDRB     R0,[R6, #+11]
   \   000000E0   BE00C4E5           STRB     R0,[R4, #+190]
    321                              if ( CardInfo->ResetStatus ) {
   \   000000E4   0A00D6E5           LDRB     R0,[R6, #+10]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0500000A           BEQ      ??ANPRO10_IO_UnpackPacket_8
    322                                  Restart         = true;
   \   000000F0   0181C4E5           STRB     R8,[R4, #+257]
    323                                  ResetStatus     = CardInfo->ResetStatus;
   \   000000F4   0A00D6E5           LDRB     R0,[R6, #+10]
   \   000000F8   0001C4E5           STRB     R0,[R4, #+256]
    324                                  TotalUnitRestart++;
   \   000000FC   F00DD4E1           LDRSH    R0,[R4, #+208]
   \   00000100   010080E2           ADD      R0,R0,#+1
   \   00000104   B00DC4E1           STRH     R0,[R4, #+208]
    325                              }
    326                          }
    327                          SendData(CMD_GENERIC_STATIC_DATA);
   \                     ??ANPRO10_IO_UnpackPacket_8:
   \   00000108   002094E5           LDR      R2,[R4, #+0]
   \   0000010C   6610A0E3           MOV      R1,#+102
   \   00000110   402092E5           LDR      R2,[R2, #+64]
   \   00000114   0900A0E1           MOV      R0,R9
   \   00000118   0FE0A0E1           MOV      LR,PC
   \   0000011C   12FF2FE1           BX       R2
   \   00000120   140000EA           B        ??ANPRO10_IO_UnpackPacket_6
    328                          break;
    329                      case CMD_REP_INT_DATA:
    330                          {
    331                              ANPRO10_COMMAND_1091 *CardInfo = (ANPRO10_COMMAND_1091*)Buf;
    332                              CardVoltage  = CardInfo->InternalAD[0]/1024.0*2.56*16.0;
   \                     ??ANPRO10_IO_UnpackPacket_4:
   \   00000124   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000128   0010D6E5           LDRB     R1,[R6, #+0]
   \   0000012C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000130   ........           _BLF     __ulongToDouble,??__ulongToDouble??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   4034A0E3           MOV      R3,#+1073741824
   \   0000013C   903883E3           ORR      R3,R3,#0x900000
   \   00000140   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000144   0020A0E1           MOV      R2,R0
   \   00000148   54009FE5           LDR      R0,??ANPRO10_IO_UnpackPacket_9  ;; 0x47ae147b
   \   0000014C   0130A0E1           MOV      R3,R1
   \   00000150   50109FE5           LDR      R1,??ANPRO10_IO_UnpackPacket_9+0x4  ;; 0x40047ae1
   \   00000154   ........           _BLF     __dMul,??__dMul??rA
   \   00000158   0020A0E1           MOV      R2,R0
   \   0000015C   0130A0E1           MOV      R3,R1
   \   00000160   0000A0E3           MOV      R0,#+0
   \   00000164   4014A0E3           MOV      R1,#+1073741824
   \   00000168   C01981E3           ORR      R1,R1,#0x300000
   \   0000016C   ........           _BLF     __dMul,??__dMul??rA
   \   00000170   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000174   C00084E5           STR      R0,[R4, #+192]
    333                          }
    334                          break;
    335                      case CMD_REP_ANA_SETUP:
    336                          break;
    337                      default:
    338                          break;
    339          
    340                      }
    341                      Buf += pCH->ndb;
   \                     ??ANPRO10_IO_UnpackPacket_6:
   \   00000178   0300D5E5           LDRB     R0,[R5, #+3]
   \   0000017C   0210D5E5           LDRB     R1,[R5, #+2]
    342                  } while ( ( pCH->CommandNo != ECMD_NMDWOACK ) && (  pCH->CommandNo != ECMD_NMDRQACK ) );
   \   00000180   0020D5E5           LDRB     R2,[R5, #+0]
   \   00000184   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000188   0110D5E5           LDRB     R1,[R5, #+1]
   \   0000018C   060080E0           ADD      R0,R0,R6
   \   00000190   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   00000194   01005113           CMPNE    R1,#+1
   \   00000198   A2FFFF1A           BNE      ??ANPRO10_IO_UnpackPacket_2
    343              }
    344              return(MyPacket);
   \                     ??ANPRO10_IO_UnpackPacket_7:
   \   0000019C   0700A0E1           MOV      R0,R7
   \   000001A0   ........           B        ?Subroutine21
   \                     ??ANPRO10_IO_UnpackPacket_9:
   \   000001A4   7B14AE47           DC32     0x47ae147b
   \   000001A8   E17A0440           DC32     0x40047ae1
    345          
    346          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine21:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    347          

   \                                 In segment CODE, align 4, keep-with-next
    348          void IOUnitZB485::SendToIO(U16 Command, void* Data, U16 Size, bool RequestAck)
    349          {
   \                     ??SendToIO:
   \   00000000   04402DE9           PUSH     {R2,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   1420DDE5           LDRB     R2,[SP, #+20]
    350              NetPacket Packet;
    351              Packet.Command    = Command;
   \   0000000C   B010CDE1           STRH     R1,[SP, #+0]
    352              Packet.RxAddress  = IOAddress;
   \   00000010   A0C190E5           LDR      R12,[R0, #+416]
    353              Packet.RxTypeId   = DEVICE_ZB485;
    354              Packet.RequestAck = RequestAck;
   \   00000014   0620CDE5           STRB     R2,[SP, #+6]
   \   00000018   05C0CDE5           STRB     R12,[SP, #+5]
   \   0000001C   10C0A0E3           MOV      R12,#+16
   \   00000020   04C0CDE5           STRB     R12,[SP, #+4]
    355              Packet.Size       = Size;
   \   00000024   B230CDE1           STRH     R3,[SP, #+2]
    356              Packet.Data       = Data;
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   07208DE2           ADD      R2,SP,#+7
   \                     ??SendToIO_1:
   \   00000030   0C308DE2           ADD      R3,SP,#+12
   \   00000034   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000038   0230C1E7           STRB     R3,[R1, +R2]
   \   0000003C   011081E2           ADD      R1,R1,#+1
   \   00000040   040051E3           CMP      R1,#+4
   \   00000044   F9FFFFBA           BLT      ??SendToIO_1
    357              SendPacket(Packet);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   ........           _BLF     ??SendPacket,??SendPacket??rA
    358          }
   \   00000050   0F40BDE8           POP      {R0-R3,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    359          

   \                                 In segment CODE, align 4, keep-with-next
    360          void IOUnitZB485::PowerOn(void)
    361          {
   \                     ??PowerOn:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
    362              #ifdef S2TXU
    363              U8 Data[3] = { (U8)PowerStatus, SCType[0], SCType[1]};
   \   00000004   A44080E2           ADD      R4,R0,#+164
   \   00000008   BC2CD4E1           LDRH     R2,[R4, #+204]
    364          
    365              SendToIO(CMD_SND_RS4_SETUP,Data,sizeof(Data),false);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0330A0E3           MOV      R3,#+3
   \   00000014   0020CDE5           STRB     R2,[SP, #+0]
   \   00000018   0421D4E5           LDRB     R2,[R4, #+260]
   \   0000001C   0120CDE5           STRB     R2,[SP, #+1]
   \   00000020   0521D4E5           LDRB     R2,[R4, #+261]
   \   00000024   0220CDE5           STRB     R2,[SP, #+2]
   \   00000028   02002DE9           PUSH     {R1}
   \   0000002C   00C094E5           LDR      R12,[R4, #+0]
   \   00000030   04208DE2           ADD      R2,SP,#+4
   \   00000034   8CC09CE5           LDR      R12,[R12, #+140]
   \   00000038   4C10A0E3           MOV      R1,#+76
   \   0000003C   401E81E3           ORR      R1,R1,#0x400
   \   00000040   0FE0A0E1           MOV      LR,PC
   \   00000044   1CFF2FE1           BX       R12
    366              PowerOnTime = RunningTime;
   \   00000048   ........           LDR      R0,??DataTable9  ;; RunningTime
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   C80084E5           STR      R0,[R4, #+200]
    367              #endif
    368          }
   \   00000054   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
    369          

   \                                 In segment CODE, align 4, keep-with-next
    370          void IOUnitZB485::PowerOff(int Ch) {
   \                     ??PowerOff:
   \   00000000   01402DE9           PUSH     {R0,LR}
    371          #ifdef S2TXU
    372              U8 tmpPowerStatus = PowerStatus & ~(1 << Ch);
    373              U8 Data[3] = { tmpPowerStatus, SCType[0], SCType[1] };
   \   00000004   A4C080E2           ADD      R12,R0,#+164
   \   00000008   BC3CDCE1           LDRH     R3,[R12, #+204]
   \   0000000C   01E0A0E3           MOV      LR,#+1
   \   00000010   1E11A0E1           LSL      R1,LR,R1
   \   00000014   0110C3E1           BIC      R1,R3,R1
   \   00000018   0010CDE5           STRB     R1,[SP, #+0]
   \   0000001C   0421DCE5           LDRB     R2,[R12, #+260]
    374          
    375              SendToIO(CMD_SND_RS4_SETUP, Data, sizeof(Data), false);
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0330A0E3           MOV      R3,#+3
   \   00000028   0120CDE5           STRB     R2,[SP, #+1]
   \   0000002C   0521DCE5           LDRB     R2,[R12, #+261]
   \   00000030   0220CDE5           STRB     R2,[SP, #+2]
   \   00000034   02002DE9           PUSH     {R1}
   \   00000038   00C09CE5           LDR      R12,[R12, #+0]
   \   0000003C   04208DE2           ADD      R2,SP,#+4
   \   00000040   8CC09CE5           LDR      R12,[R12, #+140]
   \   00000044   4C10A0E3           MOV      R1,#+76
   \   00000048   401E81E3           ORR      R1,R1,#0x400
   \   0000004C   0FE0A0E1           MOV      LR,PC
   \   00000050   1CFF2FE1           BX       R12
    376              //PowerOnTime = RunningTime;
    377          #endif
    378          }
   \   00000054   0340BDE8           POP      {R0,R1,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
    379          
    380          
    381          

   \                                 In segment CODE, align 4, keep-with-next
    382          void IOUnitZB485::HandleIO(int Delay)
    383          {
   \                     ??HandleIO:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    384              #ifdef S2TXU
    385              time_t MyCurentTime = RunningTime;
   \   00000008   ........           LDR      R0,??DataTable9  ;; RunningTime
    386              if ( Restart ) {
   \   0000000C   A580A0E3           MOV      R8,#+165
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   408F88E3           ORR      R8,R8,#0x100
   \   00000018   0400D8E7           LDRB     R0,[R8, +R4]
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1100000A           BEQ      ??HandleIO_1
    387                  Request(CMD_REQ_STATUS);
   \   00000028   FA1FA0E3           MOV      R1,#+1000
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??Request,??Request??rA
    388                  if ( ANPRO10_IO_Receive() ) {
   \   00000034   1E10A0E3           MOV      R1,#+30
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   5000000A           BEQ      ??HandleIO_2
    389                      PowerOn();
   \   00000048   A41094E5           LDR      R1,[R4, #+164]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   841091E5           LDR      R1,[R1, #+132]
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   11FF2FE1           BX       R1
    390                      Restart = false;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   0400C8E7           STRB     R0,[R8, +R4]
    391                      TSN_Delay(Delay);
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   0000006C   460000EA           B        ??HandleIO_2
    392                  }
    393              } else {
    394                  for ( int i=0; i < MAX_AN_ZB485_CHANNELS; i++ ) {
   \                     ??HandleIO_1:
   \   00000070   0080A0E3           MOV      R8,#+0
    395                      SignalConverter *SgCnvPtr =SConverter[i];
   \                     ??HandleIO_3:
   \   00000074   080184E0           ADD      R0,R4,R8, LSL #+2
   \   00000078   B49190E5           LDR      R9,[R0, #+436]
    396                      if ( SgCnvPtr ) {
   \   0000007C   000059E3           CMP      R9,#+0
   \   00000080   1600000A           BEQ      ??HandleIO_4
    397                          SgCnvPtr->HandleCard(Delay);
   \   00000084   A42099E5           LDR      R2,[R9, #+164]
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   902092E5           LDR      R2,[R2, #+144]
   \   00000090   0900A0E1           MOV      R0,R9
   \   00000094   0FE0A0E1           MOV      LR,PC
   \   00000098   12FF2FE1           BX       R2
    398                          TSN_Delay(Delay);
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     OS_Delay,??OS_Delay??rA
    399                          if (SgCnvPtr->ForcePowerOff) {
   \   000000A4   8501D9E5           LDRB     R0,[R9, #+389]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0B00000A           BEQ      ??HandleIO_4
    400                              SgCnvPtr->ForcePowerOff = false;
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   8501C9E5           STRB     R0,[R9, #+389]
    401                              PowerOff(i);
   \   000000B8   0810A0E1           MOV      R1,R8
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       ??PowerOff
    402                              TSN_Delay(1000);
   \   000000C4   FA0FA0E3           MOV      R0,#+1000
   \   000000C8   ........           _BLF     OS_Delay,??OS_Delay??rA
    403                              PowerOn();
   \   000000CC   A41094E5           LDR      R1,[R4, #+164]
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   841091E5           LDR      R1,[R1, #+132]
   \   000000D8   0FE0A0E1           MOV      LR,PC
   \   000000DC   11FF2FE1           BX       R1
    404                          }
    405                      }
    406                  }
   \                     ??HandleIO_4:
   \   000000E0   018088E2           ADD      R8,R8,#+1
   \   000000E4   080058E3           CMP      R8,#+8
   \   000000E8   E1FFFFBA           BLT      ??HandleIO_3
    407                  if ( MyCurentTime > ReqStatusTime ) {
   \   000000EC   5E0FA0E3           MOV      R0,#+376
   \   000000F0   041090E7           LDR      R1,[R0, +R4]
   \   000000F4   060051E1           CMP      R1,R6
   \   000000F8   230000AA           BGE      ??HandleIO_2
    408                      ReqStatusTime = MyCurentTime+IO_STATUS_REQ_DELAY;
   \   000000FC   0F1086E2           ADD      R1,R6,#+15
   \   00000100   041080E7           STR      R1,[R0, +R4]
    409                      Request(CMD_REQ_INT_DATA);
   \   00000104   4210A0E3           MOV      R1,#+66
   \   00000108   401E81E3           ORR      R1,R1,#0x400
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           _BLF     ??Request,??Request??rA
    410                      ANPRO10_IO_Receive();
   \   00000114   1E10A0E3           MOV      R1,#+30
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    411                      TSN_Delay(Delay);
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           _BLF     OS_Delay,??OS_Delay??rA
    412                      Request(CMD_REQ_STATUS);
   \   00000128   FA1FA0E3           MOV      R1,#+1000
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           _BLF     ??Request,??Request??rA
    413                      ANPRO10_IO_Receive();
   \   00000134   1E10A0E3           MOV      R1,#+30
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           _BLF     ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
    414                      TSN_Delay(Delay);
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           _BLF     OS_Delay,??OS_Delay??rA
    415                      if ( ( !ActiveAlarms )
    416                           &&  (     (  ( UnitProgVersion != VERSION_ANZB_PROG ) && ( UnitProgVersion < 100 ))
    417                                     || ( ComVersion  != VERSION_ANZB_COMP )
    418                                     || ( StoreVersion!= VERSION_ANZB_EEPROM) ) ) {
   \   00000148   380094E5           LDR      R0,[R4, #+56]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0D00001A           BNE      ??HandleIO_2
   \   00000154   5B00A0E3           MOV      R0,#+91
   \   00000158   400F80E3           ORR      R0,R0,#0x100
   \   0000015C   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000160   280051E3           CMP      R1,#+40
   \   00000164   0100000A           BEQ      ??HandleIO_5
   \   00000168   640051E3           CMP      R1,#+100
   \   0000016C   0400003A           BCC      ??HandleIO_6
   \                     ??HandleIO_5:
   \   00000170   5C01D4E5           LDRB     R0,[R4, #+348]
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   5D01D405           LDRBEQ   R0,[R4, #+349]
   \   0000017C   02005003           CMPEQ    R0,#+2
   \   00000180   0100000A           BEQ      ??HandleIO_2
    419                          UpdateProgram();
   \                     ??HandleIO_6:
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           _BLF     ??UpdateProgram,??UpdateProgram??rA
    420                      }
    421                  }
    422              }
    423              ActiveAlarms = CheckAlarms(AlarmSet);
   \                     ??HandleIO_2:
   \   0000018C   0010A0E3           MOV      R1,#+0
   \   00000190   E40084E2           ADD      R0,R4,#+228
   \   00000194   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000198   380084E5           STR      R0,[R4, #+56]
    424              SendData();
   \   0000019C   A42094E5           LDR      R2,[R4, #+164]
   \   000001A0   6510A0E3           MOV      R1,#+101
   \   000001A4   402092E5           LDR      R2,[R2, #+64]
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   0FE0A0E1           MOV      LR,PC
   \   000001B0   12FF2FE1           BX       R2
    425          
    426              if ( ActiveAlarms ) {
   \   000001B4   380094E5           LDR      R0,[R4, #+56]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0D00000A           BEQ      ??HandleIO_7
    427                  for ( int i=0; i < MAX_AN_ZB485_CHANNELS; i++ ) {
   \   000001C0   0050A0E3           MOV      R5,#+0
    428                      SignalConverter *SgCnvPtr =SConverter[i];
   \                     ??HandleIO_8:
   \   000001C4   050184E0           ADD      R0,R4,R5, LSL #+2
   \   000001C8   B42190E5           LDR      R2,[R0, #+436]
    429                      if ( SgCnvPtr ) {
   \   000001CC   000052E3           CMP      R2,#+0
   \   000001D0   0500000A           BEQ      ??HandleIO_9
    430                          SgCnvPtr->SetHWFailure(true);
   \   000001D4   0200A0E1           MOV      R0,R2
   \   000001D8   A42092E5           LDR      R2,[R2, #+164]
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   842092E5           LDR      R2,[R2, #+132]
   \   000001E4   0FE0A0E1           MOV      LR,PC
   \   000001E8   12FF2FE1           BX       R2
    431                      }
    432                  }
   \                     ??HandleIO_9:
   \   000001EC   015085E2           ADD      R5,R5,#+1
   \   000001F0   080055E3           CMP      R5,#+8
   \   000001F4   F2FFFFBA           BLT      ??HandleIO_8
    433              }
    434              #endif
    435          }
   \                     ??HandleIO_7:
   \   000001F8                      REQUIRE ?Subroutine21
   \   000001F8                      ;; // Fall through to label ?Subroutine21
    436          

   \                                 In segment CODE, align 4, keep-with-next
    437          int IOUnitZB485::ReceiveData(U8* data)
    438          {
   \                     ??ReceiveData:
   \   00000000   04D04DE2           SUB      SP,SP,#+4
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   540F80E2           ADD      R0,R0,#+336
   \   00000010   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000014   652052E2           SUBS     R2,R2,#+101
   \   00000018   0200000A           BEQ      ??ReceiveData_1
   \   0000001C   012052E2           SUBS     R2,R2,#+1
   \   00000020   1600000A           BEQ      ??ReceiveData_2
   \   00000024   3C0000EA           B        ??ReceiveData_3
    439              int ErrorStatus = E_OK;
    440              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
    441              switch ( pCH->CommandNo ) {
    442              case CMD_GENERIC_REALTIME_DATA:
    443                  {
    444                      ANPRO10_COMMAND_2610  *pData = (ANPRO10_COMMAND_2610*) data;
    445                      PowerStatus   = pData->PowerStatus;
   \                     ??ReceiveData_1:
   \   00000028   1120D1E5           LDRB     R2,[R1, #+17]
   \   0000002C   1030D1E5           LDRB     R3,[R1, #+16]
   \   00000030   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000034   B022C0E1           STRH     R2,[R0, #+32]
    446                      FailCnt      = pData->FailCnt;
   \   00000038   0F20D1E5           LDRB     R2,[R1, #+15]
   \   0000003C   0E30D1E5           LDRB     R3,[R1, #+14]
   \   00000040   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000044   0D30D1E5           LDRB     R3,[R1, #+13]
   \   00000048   022483E1           ORR      R2,R3,R2, LSL #+8
   \   0000004C   0C30D1E5           LDRB     R3,[R1, #+12]
   \   00000050   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000054   042080E5           STR      R2,[R0, #+4]
    447                      FailCntTotal = pData->FailCntTotal;
   \   00000058   0B20D1E5           LDRB     R2,[R1, #+11]
   \   0000005C   0A30D1E5           LDRB     R3,[R1, #+10]
   \   00000060   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000064   0930D1E5           LDRB     R3,[R1, #+9]
   \   00000068   0810D1E5           LDRB     R1,[R1, #+8]
   \   0000006C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000070   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000074   001080E5           STR      R1,[R0, #+0]
    448                      ErrorStatus =  E_OK;
   \                     ??ReceiveData_4:
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   270000EA           B        ??ReceiveData_5
    449                  }
    450                  break;
    451              case CMD_GENERIC_STATIC_DATA    :
    452                  {
    453                      ANPRO10_COMMAND_2611  *pData = (ANPRO10_COMMAND_2611*) data;
    454                      CardChannel      = pData->CardChannel;
   \                     ??ReceiveData_2:
   \   00000080   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000084   0820C0E5           STRB     R2,[R0, #+8]
    455                      CardId           = pData->CardId;
   \   00000088   0920D1E5           LDRB     R2,[R1, #+9]
   \   0000008C   0920C0E5           STRB     R2,[R0, #+9]
    456                      CardAddress      = pData->CardAddress;
   \   00000090   0A20D1E5           LDRB     R2,[R1, #+10]
   \   00000094   0A20C0E5           STRB     R2,[R0, #+10]
    457                      UnitProgVersion  = pData->UnitProgVersion;
   \   00000098   0B20D1E5           LDRB     R2,[R1, #+11]
   \   0000009C   0B20C0E5           STRB     R2,[R0, #+11]
    458                      ComVersion       = pData->ComVersion;
   \   000000A0   0C20D1E5           LDRB     R2,[R1, #+12]
   \   000000A4   0C20C0E5           STRB     R2,[R0, #+12]
    459                      StoreVersion     = pData->StoreVersion;
   \   000000A8   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000AC   0D20C0E5           STRB     R2,[R0, #+13]
    460                      RxBufSize        = pData->RxBufSize;
   \   000000B0   0F20D1E5           LDRB     R2,[R1, #+15]
   \   000000B4   0E30D1E5           LDRB     R3,[R1, #+14]
   \   000000B8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000BC   BE20C0E1           STRH     R2,[R0, #+14]
    461                      TxBufSize        = pData->TxBufSize;
   \   000000C0   1120D1E5           LDRB     R2,[R1, #+17]
   \   000000C4   1030D1E5           LDRB     R3,[R1, #+16]
   \   000000C8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000CC   B021C0E1           STRH     R2,[R0, #+16]
    462                      ResetStatus      = pData->ResetStatus;
   \   000000D0   1220D1E5           LDRB     R2,[R1, #+18]
   \   000000D4   5420C0E5           STRB     R2,[R0, #+84]
    463                      ProgamTypeRunning= pData->ProgamTypeRunning;
   \   000000D8   1320D1E5           LDRB     R2,[R1, #+19]
   \   000000DC   1220C0E5           STRB     R2,[R0, #+18]
    464                      TotalUnitRestart = pData->TotalUnitRestart;
   \   000000E0   1520D1E5           LDRB     R2,[R1, #+21]
   \   000000E4   1430D1E5           LDRB     R3,[R1, #+20]
   \   000000E8   022483E1           ORR      R2,R3,R2, LSL #+8
   \   000000EC   B422C0E1           STRH     R2,[R0, #+36]
    465                      CardVoltage      = pData->CardVoltage;
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0D30A0E1           MOV      R3,SP
   \                     ??ReceiveData_6:
   \   000000F8   16C081E2           ADD      R12,R1,#+22
   \   000000FC   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000100   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000104   012082E2           ADD      R2,R2,#+1
   \   00000108   040052E3           CMP      R2,#+4
   \   0000010C   F9FFFFBA           BLT      ??ReceiveData_6
   \   00000110   00109DE5           LDR      R1,[SP, #+0]
   \   00000114   141080E5           STR      R1,[R0, #+20]
    466                      ErrorStatus =  E_OK;
   \   00000118   D6FFFFEA           B        ??ReceiveData_4
    467                  }
    468                  break;
    469              default:
    470                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_3:
   \   0000011C   0100A0E3           MOV      R0,#+1
    471                  break;
    472              }
    473              return(ErrorStatus);
   \                     ??ReceiveData_5:
   \   00000120   0200BDE8           POP      {R1}
   \   00000124   1EFF2FE1           BX       LR               ;; return
    474          }
    475          

   \                                 In segment CODE, align 4, keep-with-next
    476          int IOUnitZB485::SendData(U16 cmd)
    477          {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
    478              int ErrorStatus = E_OK;
    479              switch ( cmd ) {
   \   00000008   9C0080E2           ADD      R0,R0,#+156
   \   0000000C   0E20A0E3           MOV      R2,#+14
   \   00000010   FF30A0E3           MOV      R3,#+255
   \   00000014   00C0A0E3           MOV      R12,#+0
   \   00000018   651051E2           SUBS     R1,R1,#+101
   \   0000001C   0200000A           BEQ      ??SendData_1
   \   00000020   011051E2           SUBS     R1,R1,#+1
   \   00000024   2800000A           BEQ      ??SendData_2
   \   00000028   530000EA           B        ??SendData_3
    480              case CMD_GENERIC_REALTIME_DATA:
    481                  {
    482                      QueueANPRO10_COMMAND_2610 Cmd;
    483          
    484                      Cmd.TxInfo.Port        = NULL;
   \                     ??SendData_1:
   \   0000002C   00C08DE5           STR      R12,[SP, #+0]
    485                      Cmd.TxInfo.rxAddr      = DEVICE_BROADCAST_ADDR;
   \   00000030   0430CDE5           STRB     R3,[SP, #+4]
    486                      Cmd.TxInfo.rxId        = DEVICE_BROADCAST_TXU;
   \   00000034   0520CDE5           STRB     R2,[SP, #+5]
    487          
    488                      Cmd.Data.ObjectId      = IDNumber;
   \   00000038   001090E5           LDR      R1,[R0, #+0]
    489                      Cmd.Data.ndb           = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   B820CDE1           STRH     R2,[SP, #+8]
   \   00000040   0A10CDE5           STRB     R1,[SP, #+10]
   \   00000044   2114A0E1           LSR      R1,R1,#+8
   \   00000048   0B10CDE5           STRB     R1,[SP, #+11]
   \   0000004C   2114A0E1           LSR      R1,R1,#+8
   \   00000050   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   0D10CDE5           STRB     R1,[SP, #+13]
    490                      Cmd.Data.CommandNo     = CMD_GENERIC_REALTIME_DATA;
   \   0000005C   6520A0E3           MOV      R2,#+101
   \   00000060   B620CDE1           STRH     R2,[SP, #+6]
    491          
    492                      Cmd.Data.PowerStatus   = PowerStatus;
   \   00000064   B42DD0E1           LDRH     R2,[R0, #+212]
   \   00000068   B621CDE1           STRH     R2,[SP, #+22]
    493                      Cmd.Data.FailCnt      = FailCnt;
   \   0000006C   B81090E5           LDR      R1,[R0, #+184]
   \   00000070   1210CDE5           STRB     R1,[SP, #+18]
   \   00000074   2114A0E1           LSR      R1,R1,#+8
   \   00000078   1310CDE5           STRB     R1,[SP, #+19]
   \   0000007C   2114A0E1           LSR      R1,R1,#+8
   \   00000080   1410CDE5           STRB     R1,[SP, #+20]
   \   00000084   2114A0E1           LSR      R1,R1,#+8
   \   00000088   1510CDE5           STRB     R1,[SP, #+21]
    494                      Cmd.Data.FailCntTotal = FailCntTotal;
   \   0000008C   B40090E5           LDR      R0,[R0, #+180]
   \   00000090   0E00CDE5           STRB     R0,[SP, #+14]
   \   00000094   2004A0E1           LSR      R0,R0,#+8
   \   00000098   0F00CDE5           STRB     R0,[SP, #+15]
   \   0000009C   2004A0E1           LSR      R0,R0,#+8
   \   000000A0   1000CDE5           STRB     R0,[SP, #+16]
   \   000000A4   2004A0E1           LSR      R0,R0,#+8
   \   000000A8   1100CDE5           STRB     R0,[SP, #+17]
    495                      bool sent = ANPRO10SendNormal(&Cmd);
    496                      if ( !sent )
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0100001A           BNE      ??SendData_4
    497                          ErrorStatus =  E_QUEUE_FULL;
   \                     ??SendData_5:
   \   000000BC   0300A0E3           MOV      R0,#+3
   \   000000C0   2E0000EA           B        ??SendData_6
    498                      else
    499                          ErrorStatus =  E_OK;
   \                     ??SendData_4:
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   2C0000EA           B        ??SendData_6
    500                  }
    501                  break;
    502              case CMD_GENERIC_STATIC_DATA   :
    503                  {
    504                      QueueANPRO10_COMMAND_2611 Cmd;
    505          
    506                      Cmd.TxInfo.Port           = NULL;
   \                     ??SendData_2:
   \   000000CC   18C08DE5           STR      R12,[SP, #+24]
    507                      Cmd.TxInfo.rxAddr         = DEVICE_BROADCAST_ADDR;
   \   000000D0   1C30CDE5           STRB     R3,[SP, #+28]
    508                      Cmd.TxInfo.rxId           = DEVICE_BROADCAST_TXU;
   \   000000D4   1D20CDE5           STRB     R2,[SP, #+29]
    509          
    510                      Cmd.Data.ObjectId         = IDNumber;
   \   000000D8   001090E5           LDR      R1,[R0, #+0]
    511                      Cmd.Data.ndb              = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   000000DC   1620A0E3           MOV      R2,#+22
   \   000000E0   2210CDE5           STRB     R1,[SP, #+34]
   \   000000E4   2114A0E1           LSR      R1,R1,#+8
   \   000000E8   2310CDE5           STRB     R1,[SP, #+35]
   \   000000EC   2114A0E1           LSR      R1,R1,#+8
   \   000000F0   2410CDE5           STRB     R1,[SP, #+36]
   \   000000F4   2114A0E1           LSR      R1,R1,#+8
   \   000000F8   2510CDE5           STRB     R1,[SP, #+37]
   \   000000FC   B022CDE1           STRH     R2,[SP, #+32]
    512                      Cmd.Data.CommandNo        = CMD_GENERIC_STATIC_DATA;
   \   00000100   6620A0E3           MOV      R2,#+102
   \   00000104   BE21CDE1           STRH     R2,[SP, #+30]
    513                      //int Size = sizeof(Cmd);
    514                      Cmd.Data.CardChannel      =  CardChannel;
   \   00000108   BC20D0E5           LDRB     R2,[R0, #+188]
   \   0000010C   2620CDE5           STRB     R2,[SP, #+38]
    515                      Cmd.Data.CardId           =  CardId;
   \   00000110   BD20D0E5           LDRB     R2,[R0, #+189]
   \   00000114   2720CDE5           STRB     R2,[SP, #+39]
    516                      Cmd.Data.CardAddress      =  CardAddress;
   \   00000118   BE20D0E5           LDRB     R2,[R0, #+190]
   \   0000011C   2820CDE5           STRB     R2,[SP, #+40]
    517                      Cmd.Data.UnitProgVersion  =  UnitProgVersion;
   \   00000120   BF20D0E5           LDRB     R2,[R0, #+191]
   \   00000124   2920CDE5           STRB     R2,[SP, #+41]
    518                      Cmd.Data.ComVersion       =  ComVersion;
   \   00000128   C020D0E5           LDRB     R2,[R0, #+192]
   \   0000012C   2A20CDE5           STRB     R2,[SP, #+42]
    519                      Cmd.Data.StoreVersion     =  StoreVersion;
   \   00000130   C120D0E5           LDRB     R2,[R0, #+193]
   \   00000134   2B20CDE5           STRB     R2,[SP, #+43]
    520                      Cmd.Data.RxBufSize        =  RxBufSize;
   \   00000138   B22CD0E1           LDRH     R2,[R0, #+194]
   \   0000013C   BC22CDE1           STRH     R2,[SP, #+44]
    521                      Cmd.Data.TxBufSize        =  TxBufSize;
   \   00000140   B42CD0E1           LDRH     R2,[R0, #+196]
   \   00000144   BE22CDE1           STRH     R2,[SP, #+46]
    522                      Cmd.Data.ResetStatus      =  ResetStatus;
   \   00000148   0821D0E5           LDRB     R2,[R0, #+264]
   \   0000014C   3020CDE5           STRB     R2,[SP, #+48]
    523                      Cmd.Data.ProgamTypeRunning=  ProgamTypeRunning;
   \   00000150   C620D0E5           LDRB     R2,[R0, #+198]
   \   00000154   3120CDE5           STRB     R2,[SP, #+49]
    524                      Cmd.Data.TotalUnitRestart =  TotalUnitRestart;
   \   00000158   B82DD0E1           LDRH     R2,[R0, #+216]
   \   0000015C   B223CDE1           STRH     R2,[SP, #+50]
    525                      Cmd.Data.CardVoltage      =  CardVoltage;
   \   00000160   C80090E5           LDR      R0,[R0, #+200]
   \   00000164   34008DE5           STR      R0,[SP, #+52]
    526                      bool sent = ANPRO10SendNormal(&Cmd);
    527                      if ( !sent )
   \   00000168   18008DE2           ADD      R0,SP,#+24
   \   0000016C   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   D2FFFF1A           BNE      ??SendData_4
    528                          ErrorStatus =  E_QUEUE_FULL;
   \   00000178   CFFFFFEA           B        ??SendData_5
    529                      else
    530                          ErrorStatus =  E_OK;
    531                  }
    532                  break;
    533          
    534              default:
    535                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_3:
   \   0000017C   0100A0E3           MOV      R0,#+1
    536                  break;
    537              }
    538              return(ErrorStatus);
   \                     ??SendData_6:
   \   00000180   38D08DE2           ADD      SP,SP,#+56
   \   00000184   ........           B        ?Subroutine20
    539          }
    540          
    541          #endif
    542          //-----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    543          int IOUnitZB485::GetRequestNumber(void)
    544          {
    545              int Cnt = 0;
   \                     ??GetRequestNumber:
   \   00000000   0010A0E3           MOV      R1,#+0
    546              for ( int i=0; i <MAX_AN_ZB485_CHANNELS; i++ ) {
   \   00000004   0020A0E3           MOV      R2,#+0
    547                  if ( SConverter[i] ) {
   \                     ??GetRequestNumber_1:
   \   00000008   023180E0           ADD      R3,R0,R2, LSL #+2
   \   0000000C   B43193E5           LDR      R3,[R3, #+436]
    548                      Cnt++;
    549                  }
    550              }
   \   00000010   012082E2           ADD      R2,R2,#+1
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   01108112           ADDNE    R1,R1,#+1
   \   0000001C   080052E3           CMP      R2,#+8
   \   00000020   F8FFFFBA           BLT      ??GetRequestNumber_1
    551              return Cnt;
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   1EFF2FE1           BX       LR               ;; return
    552          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IOUnitZB485ValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 379, 237, 4501, 24, 237, 4502, 380, 237, 4503, 381
   \              0000E8030000
   \              7B010000ED00
   \              000095110000
   \              18000000ED00
   \              000096110000
   \              7C010000ED00
   \              000097110000
   \              7D010000    
   \   00000034   ED0000009811       DC32 237, 4504, 382, 237, 4505, 383, 237, 4506, 384, 237, 4507, 385
   \              00007E010000
   \              ED0000009911
   \              00007F010000
   \              ED0000009A11
   \              000080010000
   \              ED0000009B11
   \              000081010000
   \   00000064   ED0000009F11       DC32 237, 4511, 386, 237, 4655, 387, 237, 4656, 388, 237, 4508, 389
   \              000082010000
   \              ED0000002F12
   \              000083010000
   \              ED0000003012
   \              000084010000
   \              ED0000009C11
   \              000085010000
   \   00000094   ED0000009D11       DC32 237, 4509
   \              0000        

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data IOUnitZB485::__vtbl[37]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~IOUnitZB485`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??SortAnalogInputs
   \              ............
   \   00000060   ............       DC32 ??SaveSettings, ??Calculate, ??CreateAlarms, ??WriteXML
   \              ............
   \              ........    
   \   00000070   ............       DC32 ??LCWriteXML, ??RefreshData, ??IsStaticValue
   \              ............
   \   0000007C   ............       DC32 ??ANPRO10_IO_UnpackPacket, ??Add, ??PowerOn, ??HandleIO
   \              ............
   \              ........    
   \   0000008C   ............       DC32 ??SendToIO, ??GetRequestNumber
   \              ....        
   \   00000094   5A423438353A       DC8 "ZB485:"
   \              00          
   \   0000009B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TCU ">`:
   \   00000000   5443552000         DC8 "TCU "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   20636F6D2D70       DC8 " com-port "
   \              6F72742000  
   \   00000013   00                 DC8 0
   \   00000014   4368616E6E65       DC8 "Channel "
   \              6C2000      
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   206F6E204144       DC8 " on ADCard on channel"
   \              43617264206F
   \              6E206368616E
   \              6E656C00    
   \   00000036   0000               DC8 0, 0
   \   00000038   206F6E20494F       DC8 " on IO "
   \              2000        
   \   00000040   20616464722E       DC8 " addr."
   \              00          
   \   00000047   00                 DC8 0
   \   00000048   0A4368616E6E       DC8 "\012Channel allredy used.\012 Try to set sensor for "
   \              656C20616C6C
   \              726564792075
   \              7365642E0A20
   \              54727920746F
   \              207365742073
   \              656E736F7220
   \              666F722000  
   \   00000077   00                 DC8 0
   \   00000078   206F6E205749       DC8 " on WIS on channel"
   \              53206F6E2063
   \              68616E6E656C
   \              00          
   \   0000008B   00                 DC8 0
   \   0000008C   204E6F74206C       DC8 " Not legal.\012 Try to set sensor for "
   \              6567616C2E0A
   \              205472792074
   \              6F2073657420
   \              73656E736F72
   \              20666F722000
   \   000000B0   2E0A204E6F74       DC8 2EH, 0AH, 20H, 4EH, 6FH, 74H, 20H, 6CH
   \              206C        
   \   000000B8   6567616C205A       DC8 65H, 67H, 61H, 6CH, 20H, 5AH, 42H, 34H
   \              4234        
   \   000000C0   383520436861       DC8 38H, 35H, 20H, 43H, 68H, 61H, 6EH, 6EH
   \              6E6E        
   \   000000C8   656C2E0A2054       DC8 65H, 6CH, 2EH, 0AH, 20H, 54H, 72H, 79H
   \              7279        
   \   000000D0   20746F207365       DC8 20H, 74H, 6FH, 20H, 73H, 65H, 74H, 20H
   \              7420        
   \   000000D8   73656E736F72       DC8 73H, 65H, 6EH, 73H, 6FH, 72H, 20H, 66H
   \              2066        
   \   000000E0   6F722000           DC8 6FH, 72H, 20H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E0A00             DC8 ".\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; ??ObjectSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs IOUnitZB485 &IOUnitZB485::new IOUnitZB485(PROIOComponent *, PRogramObject *)
   \                     `??new IOUnitZB485`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   750FA0E3           MOV      R0,#+468
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new IOUnitZB485_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??IOUnitZB485
   \                     `??new IOUnitZB485_1`:
   \   00000028   ........           B        ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     RunningTime
    553          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     IOUnitZB485::ANPRO10_IO_UnpackPacket(unsigned char *)
                                       28
     IOUnitZB485::Add(PROIOComponent *, PRogramObject *)
                                      728
     IOUnitZB485::GetRequestNumber()
                                        0
     IOUnitZB485::GetStringValue(int, int, AnsiString &)
                                        4
     IOUnitZB485::GetValue(int, int, float &, int &, int &)
                                       16
     IOUnitZB485::GetValueInfoTable(int &, int)
                                        0
     IOUnitZB485::HandleIO(int)        28
     IOUnitZB485::IOUnitZB485(PROIOComponent *, PRogramObject *)
                                      116
     IOUnitZB485::PowerOff(int)        12
     IOUnitZB485::PowerOn()            16
     IOUnitZB485::PutFloatValue(int, float)
                                        4
     IOUnitZB485::PutValue(int, int, AnsiString, bool, int *)
                                       60
     IOUnitZB485::ReceiveData(unsigned char *)
                                        4
     IOUnitZB485::SendData(unsigned short)
                                       60
     IOUnitZB485::SendToIO(unsigned short, void *, unsigned short, bool)
                                       20
     IOUnitZB485::new IOUnitZB485(PROIOComponent *, PRogramObject *)
                                       12
     IOUnitZB485::~IOUnitZB485()       12
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     IOUnitZB485::ObjectSet           24
     IOUnitZB485::IOUnitZB485ValueList
                                     156
     IOUnitZB485::IOUnitZB485(PROIOComponent *, PRogramObject *)
                                     316
     ?Subroutine19                     8
     IOUnitZB485::~IOUnitZB485()      68
     ?Subroutine18                     8
     IOUnitZB485::Add(PROIOComponent *, PRogramObject *)
                                    5852
     IOUnitZB485::GetValue(int, int, float &, int &, int &)
                                      32
     IOUnitZB485::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine20                     8
     IOUnitZB485::PutValue(int, int, AnsiString, bool, int *)
                                      96
     IOUnitZB485::PutFloatValue(int, float)
                                       8
     IOUnitZB485::GetValueInfoTable(int &, int)
                                      20
     IOUnitZB485::ANPRO10_IO_UnpackPacket(unsigned char *)
                                     428
     ?Subroutine21                     8
     IOUnitZB485::SendToIO(unsigned short, void *, unsigned short, bool)
                                      88
     IOUnitZB485::PowerOn()           92
     IOUnitZB485::PowerOff(int)       92
     IOUnitZB485::HandleIO(int)      504
     IOUnitZB485::ReceiveData(unsigned char *)
                                     296
     IOUnitZB485::SendData(unsigned short)
                                     392
     IOUnitZB485::GetRequestNumber()
                                      44
     ?<Initializer for IOUnitZB485ValueList>
                                     156
     IOUnitZB485::__vtbl             156
     ?<Constant "TCU ">              228
     ?<Constant ".\n">                 3
     __sti__routine()                 56
     IOUnitZB485::new IOUnitZB485(PROIOComponent *, PRogramObject *)
                                      44
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable7                      4
     ??DataTable9                      4
      Others                         824

 
 12 256 bytes in segment CODE
    399 bytes in segment DATA_C
    156 bytes in segment DATA_I
    156 bytes in segment DATA_ID
     28 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 8 496 bytes of CODE  memory (+ 3 788 bytes shared)
   555 bytes of CONST memory
   184 bytes of DATA  memory

Errors: none
Warnings: none
