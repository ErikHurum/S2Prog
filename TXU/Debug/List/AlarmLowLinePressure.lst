##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLowLinePressure.Cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLowLinePressure.Cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLowLinePressure.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLowLinePressure.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLowLinePressure.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowLinePressure::~AlarmLowLinePressure()
   \                     `?~AlarmLowLinePressure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLowLinePressure_1`
   \   00000014   0100000A           BEQ      `?~AlarmLowLinePressure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLowLinePressure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLowLinePressure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLowLinePressure_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLowLinePressure::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLowLinePressure::AlarmLowLinePressure(void):AlarmBasic(NULL){
   \                     ??AlarmLowLinePressure:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     12          	Deadband            = 10.0 / MH2O_TO_MBAR;
   \   00000018   ........           LDR      R0,??DataTable3  ;; 0x3dd0d67f
   \   0000001C   BC0084E5           STR      R0,[R4, #+188]
     13          }
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024                      REQUIRE ?Subroutine11
   \   00000024                      ;; // Fall through to label ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AlarmLowLinePressure::AlarmLowLinePressure(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmLowLinePressure_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     16          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     17          	NumberOfAlarmSettings++;
   \   00000018   68009FE5           LDR      R0,??AlarmLowLinePressure_2  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     18          	PROPointer          = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     19          	PROLPressPtr        = (PROLinePressure*)PROPtr;
   \   0000002C   EC5084E5           STR      R5,[R4, #+236]
     20          	IDNumber            = (ID_AL_LOW_LINE_PRESS << 16)+NumberOfAlarmSettings;
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   B016A0E3           MOV      R1,#+184549376
   \   00000038   DB1881E3           ORR      R1,R1,#0xDB0000
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
     21          	Type                = ID_AL_LOW_LINE_PRESS;
   \   00000044   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     22          	Deadband            = 10.0 / MH2O_TO_MBAR;
   \   0000004C   ........           LDR      R0,??DataTable3  ;; 0x3dd0d67f
   \   00000050   BC0084E5           STR      R0,[R4, #+188]
     23          	Locked              = PROLPressPtr->LowLinePressLocked;
   \   00000054   9101D5E5           LDRB     R0,[R5, #+401]
   \   00000058   E800C4E5           STRB     R0,[R4, #+232]
     24          	Limit               = PROLPressPtr->LowPressLimit;
   \   0000005C   8C0195E5           LDR      R0,[R5, #+396]
   \   00000060   E40084E5           STR      R0,[R4, #+228]
     25          	MessageKey          = L_WORD520;	// LowLinePress
   \   00000064   820FA0E3           MOV      R0,#+520
   \   00000068   B80084E5           STR      R0,[R4, #+184]
     26          	TPCMessageKey       = L_WORD521;	// LLPr
   \   0000006C   010080E3           ORR      R0,R0,#0x1
   \   00000070   B40084E5           STR      R0,[R4, #+180]
     27          	Enable              = false;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   E200C4E5           STRB     R0,[R4, #+226]
     28          }
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   3040BDE8           POP      {R4,R5,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLowLinePressure_2:
   \   00000088   ........           DC32     ??NumberOfAlarmSettings
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void AlarmLowLinePressure::Check(void)
     31          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     32          	int Status = AL_STAT_IN_DEADBAND;
     33          	if ( PROLPressPtr->HasPressure ) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   5C11D0E5           LDRB     R1,[R0, #+348]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0800000A           BEQ      ??Check_1
     34          		float Val = PROLPressPtr->Pressure;
   \   0000001C   746190E5           LDR      R6,[R0, #+372]
     35          		if ( Val > Limit + Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC0094E5           LDR      R0,[R4, #+188]
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   ........           _BLF     __fLess,??__fLess??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0100000A           BEQ      ??Check_2
     36          			Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   040000EA           B        ??Check_3
     37          		} else if ( Val <= Limit ) {
   \                     ??Check_2:
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000054   000050E3           CMP      R0,#+0
     38          			Status = AL_STAT_IN_ALARM;
   \   00000058   0150A013           MOVNE    R5,#+1
     39          		}
     40          	} else {
     41          		Status = AL_STAT_IN_NORMAL;
     42          	}
     43          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     44          }
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     45          
     46          ///////////////////////////////////////////////////////////////
     47          //
     48          // Routines for the librarian for input
     49          //
     50          ///////////////////////////////////////////////////////////////
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          int AlarmLowLinePressure::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     53          {
   \                     ??PutValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   84A0DDE5           LDRB     R10,[SP, #+132]
   \   00000010   88509DE5           LDR      R5,[SP, #+136]
   \   00000014   0190A0E1           MOV      R9,R1
     54          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     55          	if ( Locked ) {
   \   00000024   E800D4E5           LDRB     R0,[R4, #+232]
   \   00000028   0370A0E1           MOV      R7,R3
   \   0000002C   000050E3           CMP      R0,#+0
     56          		Status = E_NO_INPUT_PERMISSION;
   \   00000030   2A10A013           MOVNE    R1,#+42
   \   00000034   00108D15           STRNE    R1,[SP, #+0]
   \   00000038   7800001A           BNE      ??PutValue_3
     57          	} else {
     58                  float OrgLimit = Limit;
   \   0000003C   E46094E5           LDR      R6,[R4, #+228]
     59          		int Key = FindConfigKey(NewValue);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   40008DE2           ADD      R0,SP,#+64
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   E8019FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   008090E5           LDR      R8,[R0, #+0]
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0830A0E1           MOV      R3,R8
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   40008DE2           ADD      R0,SP,#+64
   \   0000006C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000070   00B0A0E1           MOV      R11,R0
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   40008DE2           ADD      R0,SP,#+64
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
     60          		switch ( Key ) {
   \   00000084   64B04BE2           SUB      R11,R11,#+100
   \   00000088   05005BE3           CMP      R11,#+5
   \   0000008C   0A00008A           BHI      ??PutValue_5
   \   00000090   010F8FE2           ADR      R0,??PutValue_1
   \   00000094   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000098   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   0000009C   01050105           DC8      +1,+5,+1,+5
   \   000000A0   01050000           DC8      +1,+5,+0,+0
     61          			case C_ON:
     62          			case C_OPEN:
     63          			case C_ENABLE:
     64                          SetEnable(EnableTrue);
   \                     ??PutValue_6:
   \   000000A4   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_7:
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??SetEnable,??SetEnable??rA
   \   000000B0   430000EA           B        ??PutValue_8
     65          				break;
     66          			case C_OFF:
     67          			case C_CLOSE:
     68          			case C_DISABLE:
     69                          SetEnable(EnableFalse);
   \                     ??PutValue_9:
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   FAFFFFEA           B        ??PutValue_7
     70          				break;
     71          			default:
     72          				switch ( ValueId ) {
   \                     ??PutValue_5:
   \   000000BC   3210A0E3           MOV      R1,#+50
   \   000000C0   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000C4   010059E1           CMP      R9,R1
   \   000000C8   2600001A           BNE      ??PutValue_10
     73          					case SVT_AL_LIMIT:
     74          						{
     75          							float Value = ConvertToSi(NewValue, ValUnitId=PRESSURE_UNIT3, Status,LIMIT_LOW_LINEPRESS ,PROLPressPtr->GetHiHiPressLimit(),0.0);
   \   000000CC   EC0094E5           LDR      R0,[R4, #+236]
   \   000000D0   ........           _BLF     ??GetHiHiPressLimit,??GetHiHiPressLimit??rA
   \   000000D4   0090A0E1           MOV      R9,R0
   \   000000D8   0810A0E3           MOV      R1,#+8
   \   000000DC   04108DE5           STR      R1,[SP, #+4]
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   24008DE2           ADD      R0,SP,#+36
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0710A0E1           MOV      R1,R7
   \   000000FC   24008DE2           ADD      R0,SP,#+36
   \   00000100   ........           _BLF     ??assign,??assign??rA
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   0010A0E1           MOV      R1,R0
   \   0000010C   03002DE9           PUSH     {R0,R1}
   \   00000110   0900A0E1           MOV      R0,R9
   \   00000114   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000118   03002DE9           PUSH     {R0,R1}
   \   0000011C   1C019FE5           LDR      R0,??PutValue_4+0x4  ;; 0x6f46d2ce
   \   00000120   1C119FE5           LDR      R1,??PutValue_4+0x8  ;; 0xffffffffc02464f2
   \   00000124   03002DE9           PUSH     {R0,R1}
   \   00000128   18208DE2           ADD      R2,SP,#+24
   \   0000012C   3C008DE2           ADD      R0,SP,#+60
   \   00000130   0800BDE8           POP      {R3}
   \   00000134   0810A0E3           MOV      R1,#+8
   \   00000138   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   0000013C   0070A0E1           MOV      R7,R0
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   38008DE2           ADD      R0,SP,#+56
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
     76          							if ( Status== E_NO_ERR ) {
   \   00000150   14009DE5           LDR      R0,[SP, #+20]
   \   00000154   14D08DE2           ADD      SP,SP,#+20
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   1800001A           BNE      ??PutValue_8
     77          								Limit = Value;
   \   00000160   E47084E5           STR      R7,[R4, #+228]
   \   00000164   190000EA           B        ??PutValue_11
     78          							}
     79          						}
     80          						break;
     81          					default:
     82          						Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_10:
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   08008DE2           ADD      R0,SP,#+8
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0830A0E1           MOV      R3,R8
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0710A0E1           MOV      R1,R7
   \   00000184   08008DE2           ADD      R0,SP,#+8
   \   00000188   ........           _BLF     ??assign,??assign??rA
   \   0000018C   04008DE2           ADD      R0,SP,#+4
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   00042DE9           PUSH     {R10}
   \   00000198   64209DE5           LDR      R2,[SP, #+100]
   \   0000019C   10308DE2           ADD      R3,SP,#+16
   \   000001A0   0910A0E1           MOV      R1,R9
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001AC   08008DE5           STR      R0,[SP, #+8]
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   10008DE2           ADD      R0,SP,#+16
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   08D08DE2           ADD      SP,SP,#+8
     83          						break;
     84          				}
     85          				break; // switch ( ValueId )
     86          		}//switch ( Key )
     87          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_8:
   \   000001C4   00009DE5           LDR      R0,[SP, #+0]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   1300001A           BNE      ??PutValue_3
     88          			SetModifiedFlag();
   \                     ??PutValue_11:
   \   000001D0   A41094E5           LDR      R1,[R4, #+164]
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   541091E5           LDR      R1,[R1, #+84]
   \   000001DC   0FE0A0E1           MOV      LR,PC
   \   000001E0   11FF2FE1           BX       R1
     89          			if ( Limit != OrgLimit ) {
   \   000001E4   E40094E5           LDR      R0,[R4, #+228]
   \   000001E8   0610A0E1           MOV      R1,R6
   \   000001EC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0900000A           BEQ      ??PutValue_3
     90          				LogEvent("New limit");
   \   000001F8   48109FE5           LDR      R1,??PutValue_4+0xC  ;; `?<Constant "New limit">`
   \   000001FC   08008DE2           ADD      R0,SP,#+8
   \   00000200   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000204   0010A0E1           MOV      R1,R0
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   08008DE2           ADD      R0,SP,#+8
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
     91          			}
     92          		}
     93          	}// if ( Locked ) else
     94          	if (UnitId) {
   \                     ??PutValue_3:
   \   00000220   000055E3           CMP      R5,#+0
     95          		*UnitId = ValUnitId;
   \   00000224   04009D15           LDRNE    R0,[SP, #+4]
   \   00000228   00008515           STRNE    R0,[R5, #+0]
     96          	}
     97          	return(Status);
   \   0000022C   00009DE5           LDR      R0,[SP, #+0]
   \   00000230   60D08DE2           ADD      SP,SP,#+96
   \   00000234   F04FBDE8           POP      {R4-R11,LR}
   \   00000238   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   0000023C   ........           DC32     ??npos
   \   00000240   CED2466F           DC32     0x6f46d2ce
   \   00000244   F26424C0           DC32     0xffffffffc02464f2
   \   00000248   ........           DC32     `?<Constant "New limit">`
     98          }
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          int  AlarmLowLinePressure::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    101          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
    102          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    103          	switch ( ValueId ) {
   \   00000010   0860A0E3           MOV      R6,#+8
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    104          		case SVT_AL_LIMIT:
    105          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    106          			DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    107          			Unit       = PRESSURE_UNIT3;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    108          			if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    109          				Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    110          			}
    111          			break;
    112          		case SVT_AL_VALUE:
    113          			MyRetValue =PROLPressPtr->Pressure;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   740190E5           LDR      R0,[R0, #+372]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    114          			DecPnt     = 1;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    115          			Unit       = PRESSURE_UNIT3;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    116          			break;
    117          		default:
    118          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    119          			break;
    120          	}
    121          	return(Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    122          }
    123          

   \                                 In segment CODE, align 4, keep-with-next
    124          int AlarmLowLinePressure::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    125          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    126          	int Status = GETVAL_NO_ERR;
    127          	//switch ( ValueId ) {
    128          	//	default:
    129          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    130          	//		break;
    131          	//}
    132          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    133          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          int AlarmLowLinePressure::PutFloatValue( int ValueId, float NewValue)
    136          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    137          	int Status= E_NO_ERR;
    138          	//switch ( ValueId ) {
    139          	//   default:
    140          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    141          	//     break;
    142          	//}
    143          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine10
    144          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowLinePressure &AlarmLowLinePressure::new AlarmLowLinePressure()
   \                     `??new AlarmLowLinePressure`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   F000A0E3           MOV      R0,#+240
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AlarmLowLinePressure_2`
   \   00000014   ........           BL       ??AlarmLowLinePressure
   \                     `??new AlarmLowLinePressure_2`:
   \   00000018   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowLinePressure &AlarmLowLinePressure::new AlarmLowLinePressure(PRogramObjectBase *)
   \                     `??new AlarmLowLinePressure_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmLowLinePressure_3`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmLowLinePressure_1
   \                     `??new AlarmLowLinePressure_3`:
   \   00000020   ........           B        ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   7FD6D03D           DC32     0x3dd0d67f
    145          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLowLinePressure::AlarmLowLinePressure()
                                        8
     AlarmLowLinePressure::AlarmLowLinePressure(PRogramObjectBase *)
                                       12
     AlarmLowLinePressure::Check()     20
     AlarmLowLinePressure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLowLinePressure::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLowLinePressure::PutFloatValue(int, float)
                                        4
     AlarmLowLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                      156
     AlarmLowLinePressure::new AlarmLowLinePressure()
                                        4
     AlarmLowLinePressure::new AlarmLowLinePressure(PRogramObjectBase *)
                                        8
     AlarmLowLinePressure::~AlarmLowLinePressure()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLowLinePressure::~AlarmLowLinePressure()
                                      56
     AlarmLowLinePressure::NumberOfAlarmSettings
                                       4
     AlarmLowLinePressure::AlarmLowLinePressure()
                                      36
     ?Subroutine11                     8
     AlarmLowLinePressure::AlarmLowLinePressure(PRogramObjectBase *)
                                     140
     AlarmLowLinePressure::Check()   112
     AlarmLowLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                     588
     AlarmLowLinePressure::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmLowLinePressure::GetStringValue(int, int, AnsiString &)
                                       8
     ?Subroutine10                     8
     AlarmLowLinePressure::PutFloatValue(int, float)
                                      12
     ?<Constant "New limit">          12
     AlarmLowLinePressure::new AlarmLowLinePressure()
                                      28
     AlarmLowLinePressure::new AlarmLowLinePressure(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
     ??DataTable2                      4
     ??DataTable3                      4
      Others                         436

 
 1 496 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 140 bytes of CODE  memory (+ 372 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
