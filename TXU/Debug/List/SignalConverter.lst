##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:17:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\SignalConverter.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\SignalConverter.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\SignalConverter.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\SignalConverter.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\SignalConverter.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_3
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_4
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_3:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_4:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_5
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_6
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_6:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_7
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_8
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_9
   \                     ??_Erase_10:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_9:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_10
   \                     ??_Erase_8:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_7:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_11
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_12
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_13
   \                     ??_Erase_14:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_13:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_14
   \                     ??_Erase_12:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_11
   \                     ??_Erase_5:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_15
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_15:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_16
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_16:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_11:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_17
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_18
   \                     ??_Erase_19:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_20
   \                     ??_Erase_21:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_22:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_18:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_23
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_23
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_24
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_25
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_22
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_19
   \                     ??_Erase_20:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_26
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_26:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_23
   \                     ??_Erase_24:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_27
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_22
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_21
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_28
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_28:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_23:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_17:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_4
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_5:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_6
   \                     ??_Insert_4:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_7
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_6
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_6
   \                     ??_Insert_7:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_6
   \   00000060   F0FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_6:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_9
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_10
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_8
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_11
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_11:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_6
   \                     ??_Insert_10:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_8
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_12
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_12:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_4
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_5
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_6
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_9
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_18
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_19
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_20
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_23
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_29
   \                     ??_Erase_30:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_29:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_30
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_31
   \                     ??_Erase_32:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_31:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_32
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA_2
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
      8          set<PRogramObjectBase *>SignalConverter::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          SignalConverter::SignalConverter(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr, IOUnit *IOModulePtr) : ANPRO10Object(TSNUart::Channels[IOCompPtr->TCUPortNo]) {
   \                     ??SignalConverter:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   F80095E5           LDR      R0,[R5, #+248]
   \   00000014   28119FE5           LDR      R1,??SignalConverter_1  ;; ??Channels
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??ANPRO10Object,??ANPRO10Object??rA
   \   00000028   ........           LDR      R0,??DataTable5  ;; ??__vtbl
   \   0000002C   627F84E2           ADD      R7,R4,#+392
   \   00000030   A40084E5           STR      R0,[R4, #+164]
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000048   0000DDE5           LDRB     R0,[SP, #+0]
     11              ObjectSet.insert(this);
   \   0000004C   ........           LDR      R1,??DataTable2  ;; ??ObjectSet
   \   00000050   0420A0E1           MOV      R2,R4
   \   00000054   1400C7E5           STRB     R0,[R7, #+20]
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           _BLF     ??insert_1,??insert??rA
     12              Restart               = true;
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   5801C4E5           STRB     R0,[R4, #+344]
     13              NewSensor             = true;
   \   00000068   5901C4E5           STRB     R0,[R4, #+345]
     14              SoftwareVersion       = 0;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   5C0184E5           STR      R0,[R4, #+348]
     15              SerialNumber          = 0;
   \   00000074   600184E5           STR      R0,[R4, #+352]
     16              IOUnitStatus          = 0;
   \   00000078   8401C4E5           STRB     R0,[R4, #+388]
     17              CardStatus            = 0;
   \   0000007C   6401C4E5           STRB     R0,[R4, #+356]
     18              SCAddress             = 0;
   \   00000080   800184E5           STR      R0,[R4, #+384]
     19              IOModule              = IOModulePtr;
   \   00000084   686184E5           STR      R6,[R4, #+360]
     20              ForcePowerOff         = false; 
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   8511C4E5           STRB     R1,[R4, #+389]
     21          
     22          
     23              for (int i = 0; i < MAX_AN_SGCNV_CHANNELS; i++) {
   \   00000090   0030A0E1           MOV      R3,R0
     24                  IOComponent[i] = NULL;
   \                     ??SignalConverter_2:
   \   00000094   012184E0           ADD      R2,R4,R1, LSL #+2
   \   00000098   A00182E5           STR      R0,[R2, #+416]
     25                  MsrdValues[i] = 0.0;
   \   0000009C   D83182E5           STR      R3,[R2, #+472]
     26                  CalValues[i] = 0.0;
   \   000000A0   812084E0           ADD      R2,R4,R1, LSL #+1
   \   000000A4   842F82E2           ADD      R2,R2,#+528
   \   000000A8   B000C2E1           STRH     R0,[R2, #+0]
     27                  RawValues[i] = 0.0;
   \   000000AC   BC01C2E1           STRH     R0,[R2, #+28]
     28              }
   \   000000B0   011081E2           ADD      R1,R1,#+1
   \   000000B4   0E0051E3           CMP      R1,#+14
   \   000000B8   F5FFFFBA           BLT      ??SignalConverter_2
     29              TCUAddress            = IOCompPtr->TCUAddress;
   \   000000BC   F40095E5           LDR      R0,[R5, #+244]
     30              TCUPortNo             = IOCompPtr->TCUPortNo;;
     31              IOType                = IOCompPtr->IOType;
     32              IOAddress             = IOCompPtr->IOAddress;
     33              IOChannel             = IOCompPtr->IOChannel;
     34              SCAddress             = IOCompPtr->ADCardChannel;
     35          #ifndef ANCONF
     36              AlarmSCComFailure *tmpPtr = new AlarmSCComFailure(this, 1);
   \   000000C0   FE15A0E3           MOV      R1,#+1065353216
   \   000000C4   6C0184E5           STR      R0,[R4, #+364]
   \   000000C8   F80095E5           LDR      R0,[R5, #+248]
   \   000000CC   700184E5           STR      R0,[R4, #+368]
   \   000000D0   FC0095E5           LDR      R0,[R5, #+252]
   \   000000D4   740184E5           STR      R0,[R4, #+372]
   \   000000D8   000195E5           LDR      R0,[R5, #+256]
   \   000000DC   780184E5           STR      R0,[R4, #+376]
   \   000000E0   040195E5           LDR      R0,[R5, #+260]
   \   000000E4   7C0184E5           STR      R0,[R4, #+380]
   \   000000E8   080195E5           LDR      R0,[R5, #+264]
   \   000000EC   800184E5           STR      R0,[R4, #+384]
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           _BLF     `??new AlarmSCComFailure`,`??new AlarmSCComFailure??rA`
     37              AlarmSet.insert(tmpPtr);
   \   000000F8   0020A0E1           MOV      R2,R0
   \   000000FC   E41084E2           ADD      R1,R4,#+228
   \   00000100   04008DE2           ADD      R0,SP,#+4
   \   00000104   ........           _BLF     ??insert_2,??insert??rA_1
     38              AddAlarms(CompleteAlarmInfoList);
   \   00000108   FC1084E2           ADD      R1,R4,#+252
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     39          #endif
     40              IOUnit::GlobalPRO_IOList.insert(this);
   \   00000114   ........           LDR      R1,??DataTable7  ;; ??GlobalPRO_IOList
   \   00000118   0420A0E1           MOV      R2,R4
   \   0000011C   0C008DE2           ADD      R0,SP,#+12
   \   00000120   ........           _BLF     ??insert,??insert??rA_2
     41              IOUnit::GlobalHW_UnitSet.insert(this);
   \   00000124   ........           LDR      R1,??DataTable6  ;; ??GlobalHW_UnitSet
   \   00000128   0420A0E1           MOV      R2,R4
   \   0000012C   14008DE2           ADD      R0,SP,#+20
   \   00000130   ........           _BLF     ??insert,??insert??rA_2
     42          }
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   1CD08DE2           ADD      SP,SP,#+28
   \   0000013C   F040BDE8           POP      {R4-R7,LR}
   \   00000140   1EFF2FE1           BX       LR               ;; return
   \                     ??SignalConverter_1:
   \   00000144   ........           DC32     ??Channels
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          SignalConverter::~SignalConverter(void) {
   \                     `?~SignalConverter`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1000000A           BEQ      `?~SignalConverter_1`
   \   00000014   ........           LDR      R0,??DataTable5  ;; ??__vtbl
     45              IOUnit::GlobalHW_UnitSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable6  ;; ??GlobalHW_UnitSet
   \   00000024   ........           _BLF     ??erase_1,??erase??rA_1
     46              IOUnit::GlobalPRO_IOList.erase(this);
   \   00000028   ........           LDR      R0,??DataTable7  ;; ??GlobalPRO_IOList
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   ........           _BLF     ??erase_1,??erase??rA_1
     47          }
   \   00000034   620F84E2           ADD      R0,R4,#+392
   \   00000038   ........           _BLF     ??clear,??clear??rA
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `?~ANPRO10Object`,`?~ANPRO10Object??rA`
   \   00000048   010015E3           TST      R5,#0x1
   \   0000004C   0100000A           BEQ      `?~SignalConverter_1`
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~SignalConverter_1`:
   \   00000058   ........           B        ?Subroutine17

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     48          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     49          bool SignalConverter::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr) {
   \                     ??Add:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   AADF4DE2           SUB      SP,SP,#+680
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     50              bool SensorAdded = false;
     51              if (IOCompPtr->ADCardChannel >= 0 && IOCompPtr->ADCardChannel < MAX_AN_SGCNV_CHANNELS) {
   \   00000010   080195E5           LDR      R0,[R5, #+264]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F000004A           BMI      ??Add_1
   \   00000024   0E0050E3           CMP      R0,#+14
   \   00000028   EE0000AA           BGE      ??Add_1
     52                  if (IOComponent[IOCompPtr->ADCardChannel]) {
   \   0000002C   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000030   A01190E5           LDR      R1,[R0, #+416]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   DC00000A           BEQ      ??Add_2
     53                      AnsiString Message = (AnsiString)"TCU " + (AnsiString)IOCompPtr->TCUAddress;
   \   0000003C   F41095E5           LDR      R1,[R5, #+244]
   \   00000040   C0839FE5           LDR      R8,??Add_3+0x4   ;; `?<Constant "TCU ">`
   \   00000044   640F8DE2           ADD      R0,SP,#+400
   \   00000048   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000004C   0090A0E1           MOV      R9,R0
   \   00000050   0810A0E1           MOV      R1,R8
   \   00000054   5D0F8DE2           ADD      R0,SP,#+372
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000005C   0920A0E1           MOV      R2,R9
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   24008DE2           ADD      R0,SP,#+36
   \   00000068   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000006C   24108DE2           ADD      R1,SP,#+36
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   24008DE2           ADD      R0,SP,#+36
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   640F8DE2           ADD      R0,SP,#+400
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000098   0720A0E1           MOV      R2,R7
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   5D0F8DE2           ADD      R0,SP,#+372
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     54                      Message += (AnsiString)" com-port " + (AnsiString)IOCompPtr->TCUPortNo + ".\n";
   \   000000A8   F81095E5           LDR      R1,[R5, #+248]
   \   000000AC   720F8DE2           ADD      R0,SP,#+456
   \   000000B0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000B4   0090A0E1           MOV      R9,R0
   \   000000B8   081088E2           ADD      R1,R8,#+8
   \   000000BC   6B0F8DE2           ADD      R0,SP,#+428
   \   000000C0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000C4   0010A0E1           MOV      R1,R0
   \   000000C8   0920A0E1           MOV      R2,R9
   \   000000CC   5C008DE2           ADD      R0,SP,#+92
   \   000000D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D4   CA9F8FE2           ADR      R9,??Add_3       ;; ".\n"
   \   000000D8   0920A0E1           MOV      R2,R9
   \   000000DC   5C108DE2           ADD      R1,SP,#+92
   \   000000E0   40008DE2           ADD      R0,SP,#+64
   \   000000E4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000000E8   ........           LDR      R0,??DataTable9  ;; ??npos
   \   000000EC   0720A0E1           MOV      R2,R7
   \   000000F0   00A090E5           LDR      R10,[R0, #+0]
   \   000000F4   40108DE2           ADD      R1,SP,#+64
   \   000000F8   0A30A0E1           MOV      R3,R10
   \   000000FC   0D00A0E1           MOV      R0,SP
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0720A0E1           MOV      R2,R7
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   40008DE2           ADD      R0,SP,#+64
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0720A0E1           MOV      R2,R7
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   5C008DE2           ADD      R0,SP,#+92
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0720A0E1           MOV      R2,R7
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   720F8DE2           ADD      R0,SP,#+456
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0720A0E1           MOV      R2,R7
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   6B0F8DE2           ADD      R0,SP,#+428
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     55                      Message += (AnsiString)"Channel " + (AnsiString)(IOCompPtr->ADCardChannel + 1);
   \   00000144   080195E5           LDR      R0,[R5, #+264]
   \   00000148   011080E2           ADD      R1,R0,#+1
   \   0000014C   800F8DE2           ADD      R0,SP,#+512
   \   00000150   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000154   00B0A0E1           MOV      R11,R0
   \   00000158   141088E2           ADD      R1,R8,#+20
   \   0000015C   790F8DE2           ADD      R0,SP,#+484
   \   00000160   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000164   0B20A0E1           MOV      R2,R11
   \   00000168   0010A0E1           MOV      R1,R0
   \   0000016C   78008DE2           ADD      R0,SP,#+120
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   0A30A0E1           MOV      R3,R10
   \   00000178   0720A0E1           MOV      R2,R7
   \   0000017C   78108DE2           ADD      R1,SP,#+120
   \   00000180   0D00A0E1           MOV      R0,SP
   \   00000184   ........           _BLF     ??append,??append??rA
   \   00000188   0720A0E1           MOV      R2,R7
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   78008DE2           ADD      R0,SP,#+120
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0720A0E1           MOV      R2,R7
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   800F8DE2           ADD      R0,SP,#+512
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0720A0E1           MOV      R2,R7
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   790F8DE2           ADD      R0,SP,#+484
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     56                      Message += (AnsiString)" on ADCard on channel" + (AnsiString)(IOCompPtr->IOChannel + 1);
   \   000001B8   040195E5           LDR      R0,[R5, #+260]
   \   000001BC   011080E2           ADD      R1,R0,#+1
   \   000001C0   8E0F8DE2           ADD      R0,SP,#+568
   \   000001C4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001C8   0050A0E1           MOV      R5,R0
   \   000001CC   201088E2           ADD      R1,R8,#+32
   \   000001D0   870F8DE2           ADD      R0,SP,#+540
   \   000001D4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001D8   0520A0E1           MOV      R2,R5
   \   000001DC   0010A0E1           MOV      R1,R0
   \   000001E0   94008DE2           ADD      R0,SP,#+148
   \   000001E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001E8   0A30A0E1           MOV      R3,R10
   \   000001EC   0720A0E1           MOV      R2,R7
   \   000001F0   94108DE2           ADD      R1,SP,#+148
   \   000001F4   0D00A0E1           MOV      R0,SP
   \   000001F8   ........           _BLF     ??append,??append??rA
   \   000001FC   0720A0E1           MOV      R2,R7
   \   00000200   0110A0E3           MOV      R1,#+1
   \   00000204   94008DE2           ADD      R0,SP,#+148
   \   00000208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000020C   0720A0E1           MOV      R2,R7
   \   00000210   0110A0E3           MOV      R1,#+1
   \   00000214   8E0F8DE2           ADD      R0,SP,#+568
   \   00000218   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000021C   0720A0E1           MOV      R2,R7
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   870F8DE2           ADD      R0,SP,#+540
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
     57                      Message += (AnsiString)" on IO " + KeyWord(IOType) + " addr." + (AnsiString)IOAddress;
   \   0000022C   781194E5           LDR      R1,[R4, #+376]
   \   00000230   9C0F8DE2           ADD      R0,SP,#+624
   \   00000234   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000238   0050A0E1           MOV      R5,R0
   \   0000023C   741194E5           LDR      R1,[R4, #+372]
   \   00000240   410F8DE2           ADD      R0,SP,#+260
   \   00000244   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000248   381088E2           ADD      R1,R8,#+56
   \   0000024C   950F8DE2           ADD      R0,SP,#+596
   \   00000250   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000254   412F8DE2           ADD      R2,SP,#+260
   \   00000258   0010A0E1           MOV      R1,R0
   \   0000025C   E8008DE2           ADD      R0,SP,#+232
   \   00000260   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000264   402088E2           ADD      R2,R8,#+64
   \   00000268   E8108DE2           ADD      R1,SP,#+232
   \   0000026C   CC008DE2           ADD      R0,SP,#+204
   \   00000270   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000274   0520A0E1           MOV      R2,R5
   \   00000278   CC108DE2           ADD      R1,SP,#+204
   \   0000027C   B0008DE2           ADD      R0,SP,#+176
   \   00000280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000284   0A30A0E1           MOV      R3,R10
   \   00000288   0720A0E1           MOV      R2,R7
   \   0000028C   B0108DE2           ADD      R1,SP,#+176
   \   00000290   0D00A0E1           MOV      R0,SP
   \   00000294   ........           _BLF     ??append,??append??rA
   \   00000298   0720A0E1           MOV      R2,R7
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   B0008DE2           ADD      R0,SP,#+176
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0720A0E1           MOV      R2,R7
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   9C0F8DE2           ADD      R0,SP,#+624
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B8   0720A0E1           MOV      R2,R7
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   CC008DE2           ADD      R0,SP,#+204
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0720A0E1           MOV      R2,R7
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   E8008DE2           ADD      R0,SP,#+232
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0720A0E1           MOV      R2,R7
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   410F8DE2           ADD      R0,SP,#+260
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0720A0E1           MOV      R2,R7
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   950F8DE2           ADD      R0,SP,#+596
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
     58                      Message += (AnsiString)"\nChannel allredy used.\n Try to set sensor for ";
   \   000002F8   481088E2           ADD      R1,R8,#+72
   \   000002FC   A30F8DE2           ADD      R0,SP,#+652
   \   00000300   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000304   0A30A0E1           MOV      R3,R10
   \   00000308   0720A0E1           MOV      R2,R7
   \   0000030C   0010A0E1           MOV      R1,R0
   \   00000310   0D00A0E1           MOV      R0,SP
   \   00000314   ........           _BLF     ??append,??append??rA
   \   00000318   0720A0E1           MOV      R2,R7
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   A30F8DE2           ADD      R0,SP,#+652
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
     59                      Message += (AnsiString)ElementPtr->Name + ".\n";
   \   00000328   441086E2           ADD      R1,R6,#+68
   \   0000032C   4F0F8DE2           ADD      R0,SP,#+316
   \   00000330   ........           _BLF     ??string,??string??rA
   \   00000334   0920A0E1           MOV      R2,R9
   \   00000338   4F1F8DE2           ADD      R1,SP,#+316
   \   0000033C   480F8DE2           ADD      R0,SP,#+288
   \   00000340   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000344   0A30A0E1           MOV      R3,R10
   \   00000348   0720A0E1           MOV      R2,R7
   \   0000034C   481F8DE2           ADD      R1,SP,#+288
   \   00000350   0D00A0E1           MOV      R0,SP
   \   00000354   ........           _BLF     ??append,??append??rA
   \   00000358   0720A0E1           MOV      R2,R7
   \   0000035C   0110A0E3           MOV      R1,#+1
   \   00000360   480F8DE2           ADD      R0,SP,#+288
   \   00000364   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000368   0720A0E1           MOV      R2,R7
   \   0000036C   0110A0E3           MOV      R1,#+1
   \   00000370   4F0F8DE2           ADD      R0,SP,#+316
   \   00000374   ........           _BLF     ??_Tidy,??_Tidy??rA
     60                      HardwareSetupWarning(Message);
   \   00000378   0D10A0E1           MOV      R1,SP
   \   0000037C   560F8DE2           ADD      R0,SP,#+344
   \   00000380   ........           _BLF     ??string,??string??rA
   \   00000384   560F8DE2           ADD      R0,SP,#+344
   \   00000388   ........           _BLF     ??HardwareSetupWarning,??HardwareSetupWarning??rA
   \   0000038C   0720A0E1           MOV      R2,R7
   \   00000390   0110A0E3           MOV      R1,#+1
   \   00000394   560F8DE2           ADD      R0,SP,#+344
   \   00000398   ........           _BLF     ??_Tidy,??_Tidy??rA
     61                      SensorAdded = false;
     62                  } else {
   \   0000039C   0720A0E1           MOV      R2,R7
   \   000003A0   0110A0E3           MOV      R1,#+1
   \   000003A4   0D00A0E1           MOV      R0,SP
   \   000003A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003AC   0D0000EA           B        ??Add_1
     63                      SensorAdded = true;
     64                      IOComponent[IOCompPtr->ADCardChannel] = IOCompPtr;
   \                     ??Add_2:
   \   000003B0   A05180E5           STR      R5,[R0, #+416]
     65                      pair<set<PRogramObject *>::iterator, bool> Ret;
     66                      Ret = UniquePROList.insert(ElementPtr);
   \   000003B4   621F84E2           ADD      R1,R4,#+392
   \   000003B8   1C008DE2           ADD      R0,SP,#+28
   \   000003BC   ........           _BLF     ??insert,??insert??rA_2
     67          
     68                      if (Ret.second) {
   \   000003C0   2000DDE5           LDRB     R0,[SP, #+32]
   \   000003C4   0170A0E3           MOV      R7,#+1
   \   000003C8   000050E3           CMP      R0,#+0
   \   000003CC   0200000A           BEQ      ??Add_4
     69                          AddAlarms(ElementPtr->CompleteAlarmInfoList);
   \   000003D0   FC1086E2           ADD      R1,R6,#+252
   \   000003D4   0400A0E1           MOV      R0,R4
   \   000003D8   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     70                      }
     71          
     72                      //((AnalogInput*)IOCompPtr)->SetPROPtr(ElementPtr);
     73                      IOCompPtr->AddIOMdulePtr((ANPRO10Object *)this);
   \                     ??Add_4:
   \   000003DC   0410A0E1           MOV      R1,R4
   \   000003E0   0500A0E1           MOV      R0,R5
   \   000003E4   ........           _BLF     ??AddIOMdulePtr,??AddIOMdulePtr??rA
     74                  }
     75              }
     76              ElementPtr->MergeChildUserRights(this);
   \                     ??Add_1:
   \   000003E8   0410A0E1           MOV      R1,R4
   \   000003EC   0600A0E1           MOV      R0,R6
   \   000003F0   ........           _BLF     ??MergeChildUserRights,??MergeChildUserRights??rA
     77              return (SensorAdded);
   \   000003F4   0700A0E1           MOV      R0,R7
   \   000003F8   AADF8DE2           ADD      SP,SP,#+680
   \   000003FC   F04FBDE8           POP      {R4-R11,LR}
   \   00000400   1EFF2FE1           BX       LR               ;; return
   \                     ??Add_3:
   \   00000404   2E0A0000           DC8      ".\n",+0
   \   00000408   ........           DC32     `?<Constant "TCU ">`
     78          }
     79          
     80          ///////////////////////////////////////////////////////////////
     81          //
     82          // Routines for the Configuration
     83          //
     84          ///////////////////////////////////////////////////////////////
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          AnsiString SignalConverter::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
     87              return (""); //PRogramObjectBase::MakeConfigString();
   \   00000008   011F8FE2           ADR      R1,??MakeConfigString_1  ;; ""
   \   0000000C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000010   ........           B        ?Subroutine18
   \                     ??MakeConfigString_1:
   \   00000014   00000000           DC8      "",+0,+0,+0
     88          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     89          //---------------------------------------------------------------------------
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          bool SignalConverter::LoadConfigString(TSNConfigString &ConfigString) {
     92              return (true); //PRogramObjectBase::LoadConfigString(ConfigString);
   \                     ??LoadConfigString:
   \   00000000   ........           B        ?Subroutine19
     93          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     94          //---------------------------------------------------------------------------
     95          /*
     96          bool SignalConverter::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr)
     97          {
     98              return false;
     99          }
    100          //---------------------------------------------------------------------------
    101          */
    102          
    103          #ifndef ANCONF

   \                                 In segment CODE, align 4, keep-with-next
    104          void SignalConverter::SetHWFailure(bool Failure) {
    105          
    106          }
   \                     ??SetHWFailure:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    107          
    108          ///////////////////////////////////////////////////////////////
    109          //
    110          // Routines for the librarian
    111          //
    112          ///////////////////////////////////////////////////////////////
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          int  SignalConverter::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
    115              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
    116              switch (ValueId) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   96C0A0E3           MOV      R12,#+150
   \   0000001C   44CD8CE3           ORR      R12,R12,#0x1100
   \   00000020   0C0051E1           CMP      R1,R12
   \   00000024   1100000A           BEQ      ??GetValue_2
   \   00000028   05C08CE2           ADD      R12,R12,#+5
   \   0000002C   0C0051E1           CMP      R1,R12
   \   00000030   1000000A           BEQ      ??GetValue_3
   \   00000034   92C08CE2           ADD      R12,R12,#+146
   \   00000038   0C0051E1           CMP      R1,R12
   \   0000003C   0300000A           BEQ      ??GetValue_4
   \   00000040   01C08CE2           ADD      R12,R12,#+1
   \   00000044   0C0051E1           CMP      R1,R12
   \   00000048   0600000A           BEQ      ??GetValue_5
   \   0000004C   0B0000EA           B        ??GetValue_6
    117              case SVT_IO_UNIT_STATUS:
    118                  MyRetValue = IOUnitStatus;
   \                     ??GetValue_4:
   \   00000050   8401D0E5           LDRB     R0,[R0, #+388]
   \                     ??GetValue_7:
   \   00000054   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000058   000084E5           STR      R0,[R4, #+0]
    119                  DecPnt     = 0;
   \   0000005C   008085E5           STR      R8,[R5, #+0]
    120                  Unit       = NO_UNIT;
   \   00000060   008086E5           STR      R8,[R6, #+0]
   \   00000064   0A0000EA           B        ??GetValue_8
    121                  break;
    122              case SVT_IO_CARD_STATUS:
    123                  MyRetValue = CardStatus;
   \                     ??GetValue_5:
   \   00000068   6401D0E5           LDRB     R0,[R0, #+356]
   \   0000006C   F8FFFFEA           B        ??GetValue_7
    124                  DecPnt     = 0;
    125                  Unit       = NO_UNIT;
    126                  break;
    127              case SVT_IO_PROG_VERSION:
    128                  MyRetValue = SoftwareVersion;
   \                     ??GetValue_2:
   \   00000070   5C0190E5           LDR      R0,[R0, #+348]
   \   00000074   F6FFFFEA           B        ??GetValue_7
    129                  DecPnt     = 0;
    130                  Unit       = NO_UNIT;
    131                  break;
    132              case SVT_IO_RESET_STATUS:
    133                  MyRetValue = Restart;
   \                     ??GetValue_3:
   \   00000078   5801D0E5           LDRB     R0,[R0, #+344]
   \   0000007C   F4FFFFEA           B        ??GetValue_7
    134                  DecPnt     = 0;
    135                  Unit       = NO_UNIT;
    136                  break;
    137          
    138              default:
    139                  Status = ANPRO10Object::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_6:
   \   00000080   40002DE9           PUSH     {R6}
   \   00000084   20002DE9           PUSH     {R5}
   \   00000088   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   0000008C   0070A0E1           MOV      R7,R0
   \   00000090   08D08DE2           ADD      SP,SP,#+8
    140                  break;
    141              }
    142              return (Status);
   \                     ??GetValue_8:
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           B        ?Subroutine20
    143          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          int SignalConverter::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    146              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    147              switch (ValueId) {
   \   00000010   2AC0A0E3           MOV      R12,#+42
   \   00000014   48CD8CE3           ORR      R12,R12,#0x1200
   \   00000018   0C0051E1           CMP      R1,R12
   \   0000001C   0D00001A           BNE      ??GetStringValue_2
    148              case SVT_IO_SERIAL_NUMBER:
    149                  MyString = (AnsiString)SerialNumber;
   \   00000020   601190E5           LDR      R1,[R0, #+352]
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000002C   ........           LDR      R1,??DataTable9  ;; ??npos
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   003091E5           LDR      R3,[R1, #+0]
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??assign,??assign??rA
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   010000EA           B        ??GetStringValue_3
    150                  break;
    151              default:
    152                  Status = ANPRO10Object::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000058   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   0000005C   0050A0E1           MOV      R5,R0
    153                  break;
    154              }
    155              return (Status);
   \                     ??GetStringValue_3:
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   1CD08DE2           ADD      SP,SP,#+28
   \   00000068                      REQUIRE ?Subroutine17
   \   00000068                      ;; // Fall through to label ?Subroutine17
    156          }
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          int SignalConverter::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3470DDE5           LDRB     R7,[SP, #+52]
   \   0000000C   38809DE5           LDR      R8,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    159              return (ANPRO10Object::PutValue(ValueId, Index, NewValue, Local, UnitId));
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??string,??string??rA
   \   00000028   00012DE9           PUSH     {R8}
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   24D08DE2           ADD      SP,SP,#+36
   \   00000060                      REQUIRE ?Subroutine20
   \   00000060                      ;; // Fall through to label ?Subroutine20
    160          }
    161          

   \                                 In segment CODE, align 4, keep-with-next
    162          int SignalConverter::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    163              return (ANPRO10Object::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine18
   \   00000008                      ;; // Fall through to label ?Subroutine18
    164          }
    165          
    166          // For communication
    167          

   \                                 In segment CODE, align 4, keep-with-next
    168          bool SignalConverter::ANPRO10_IO_UnpackPacket(U8 *Buf) {
    169              return (true);       // We came from ObjectSet
   \                     ??ANPRO10_IO_UnpackPacket:
   \   00000000                      REQUIRE ?Subroutine19
   \   00000000                      ;; // Fall through to label ?Subroutine19
    170          }
    171          
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          void SignalConverter::RequestMeasuredData(int  DataType) {
    174          }
   \                     ??RequestMeasuredData:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          void SignalConverter::GetEEPromData(U8 *DataPtr) {
    177          
    178          }
   \                     ??GetEEPromData:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          SignalConverter* SignalConverter::FindSignalConverter(U8 IOChannel) {
    181              return ((IOUnitZB485 *)IOModule)->SConverter[IOChannel];
   \                     ??FindSignalConverter:
   \   00000000   680190E5           LDR      R0,[R0, #+360]
   \   00000004   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000008   B40190E5           LDR      R0,[R0, #+436]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    182          }
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          bool SignalConverter::HandleCard(int Delay) {
    185              return true;
   \                     ??HandleCard:
   \   00000000   ........           B        ?Subroutine19
    186          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TCU ">`:
   \   00000000   5443552000         DC8 "TCU "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   20636F6D2D70       DC8 " com-port "
   \              6F72742000  
   \   00000013   00                 DC8 0
   \   00000014   4368616E6E65       DC8 "Channel "
   \              6C2000      
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   206F6E204144       DC8 " on ADCard on channel"
   \              43617264206F
   \              6E206368616E
   \              6E656C00    
   \   00000036   0000               DC8 0, 0
   \   00000038   206F6E20494F       DC8 " on IO "
   \              2000        
   \   00000040   20616464722E       DC8 " addr."
   \              00          
   \   00000047   00                 DC8 0
   \   00000048   0A4368616E6E       DC8 "\012Channel allredy used.\012 Try to set sensor for "
   \              656C20616C6C
   \              726564792075
   \              7365642E0A20
   \              54727920746F
   \              207365742073
   \              656E736F7220
   \              666F722000  
   \   00000077   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E0A00             DC8 ".\012"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SignalConverter &SignalConverter::new SignalConverter(PROIOComponent *, PRogramObject *, IOUnit *)
   \                     `??new SignalConverter`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   920FA0E3           MOV      R0,#+584
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new SignalConverter_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??SignalConverter
   \                     `??new SignalConverter_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ObjectSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??GlobalHW_UnitSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??GlobalPRO_IOList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??npos
    187          
    188          
    189          
    190          #endif

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     SignalConverter::ANPRO10_IO_UnpackPacket(unsigned char *)
                                        0
     SignalConverter::Add(PROIOComponent *, PRogramObject *)
                                      716
     SignalConverter::FindSignalConverter(unsigned char)
                                        0
     SignalConverter::GetEEPromData(unsigned char *)
                                        0
     SignalConverter::GetStringValue(int, int, AnsiString &)
                                       40
     SignalConverter::GetValue(int, int, float &, int &, int &)
                                       32
     SignalConverter::HandleCard(int)
                                        0
     SignalConverter::LoadConfigString(TSNConfigString &)
                                        0
     SignalConverter::MakeConfigString(int)
                                        4
     SignalConverter::PutFloatValue(int, float)
                                        4
     SignalConverter::PutValue(int, int, AnsiString, bool, int *)
                                       60
     SignalConverter::RequestMeasuredData(int)
                                        0
     SignalConverter::SetHWFailure(bool)
                                        0
     SignalConverter::SignalConverter(PROIOComponent *, PRogramObject *, IOUnit *)
                                       48
     SignalConverter::new SignalConverter(PROIOComponent *, PRogramObject *, IOUnit *)
                                       16
     SignalConverter::~SignalConverter()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
                                        0
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
                                        0
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
                                       28
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
                                      84
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
                                      76
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
                                      40
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      32
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     SignalConverter::ObjectSet       24
     SignalConverter::SignalConverter(PROIOComponent *, PRogramObject *, IOUnit *)
                                     328
     SignalConverter::~SignalConverter()
                                      92
     ?Subroutine17                     8
     SignalConverter::Add(PROIOComponent *, PRogramObject *)
                                    1036
     SignalConverter::MakeConfigString(int)
                                      24
     ?Subroutine18                     8
     SignalConverter::LoadConfigString(TSNConfigString &)
                                       4
     ?Subroutine19                     8
     SignalConverter::SetHWFailure(bool)
                                       4
     SignalConverter::GetValue(int, int, float &, int &, int &)
                                     156
     ?Subroutine20                     8
     SignalConverter::GetStringValue(int, int, AnsiString &)
                                     104
     SignalConverter::PutValue(int, int, AnsiString, bool, int *)
                                      96
     SignalConverter::PutFloatValue(int, float)
                                       8
     SignalConverter::ANPRO10_IO_UnpackPacket(unsigned char *)
                                       0
     SignalConverter::RequestMeasuredData(int)
                                       4
     SignalConverter::GetEEPromData(unsigned char *)
                                       4
     SignalConverter::FindSignalConverter(unsigned char)
                                      16
     SignalConverter::HandleCard(int)
                                       4
     ?<Constant "TCU ">              120
     ?<Constant ".\n">                 3
     ?<Constant "">                    1
     SignalConverter::new SignalConverter(PROIOComponent *, PRogramObject *, IOUnit *)
                                      56
     __sti__routine()                 56
     ??DataTable2                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable9                      4
      Others                         848

 
 5 948 bytes in segment CODE
   284 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 048 bytes of CODE  memory (+ 3 916 bytes shared)
   284 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
