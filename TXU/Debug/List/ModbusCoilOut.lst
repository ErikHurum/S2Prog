##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusCoilOut.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusCoilOut.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusCoilOut.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusCoilOut.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusCoilOut.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_4
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_5
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_4:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_5:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_6
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_7
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_7:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_8
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_9
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_10
   \                     ??_Erase_11:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_10:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_11
   \                     ??_Erase_9:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_8:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_12
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_13
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_13:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_12
   \                     ??_Erase_6:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_14
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_15
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_12:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_16
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_22
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_22
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_23
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_24
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_21
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_25
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_26
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_21
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_20
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_27
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_7
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_8:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_9
   \                     ??_Insert_7:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_10
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_9
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_9
   \                     ??_Insert_10:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_9
   \   00000060   F0FFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_9:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_12
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_13
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_11
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_14
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_14:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_9
   \                     ??_Insert_13:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_11
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_15
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_15:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_9
   \                     ??_Insert_12:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_4:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_5
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_4
   \                     ??insert_5:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_6
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_7
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_8:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_9
   \                     ??insert_7:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_6:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_10
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_8
   \                     ??insert_10:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_9:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_11:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_12
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_11
   \                     ??insert_12:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_13
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_14
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_15:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_16
   \                     ??insert_14:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_13:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_17
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_15
   \                     ??insert_17:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_16:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_18:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_19
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_18
   \                     ??insert_19:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_20
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_21
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_22:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_23
   \                     ??insert_21:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_20:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_24
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_22
   \                     ??insert_24:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_23:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert_3:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_25:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_26
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_25
   \                     ??insert_26:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_27
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_28
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_29:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_4,??_Insert??rA_3
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_30
   \                     ??insert_28:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_27:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_31
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_29
   \                     ??insert_31:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_30:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_1
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_2
   \                     ??erase_3:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_1:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_3
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_2:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
   \                     ??clear_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_3,??_Erase??rA_2
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_5
   \                     ??_Copy_2:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_5:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_6
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_7
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_7:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_6:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_30
   \                     ??_Erase_31:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_30:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_31
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_32
   \                     ??_Erase_33:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_3
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_32:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_33
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_17
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_17:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_18
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_18:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_4:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_19
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_19:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA_3
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_20:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_20
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_6:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_21:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_21
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_6,??_Insert??rA_5
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_6
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          

   \                                 In segment DATA_Z, align 4, align-sorted
      7          set<PRogramObjectBase *>ModbusCoilOut::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      8          
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          ModbusCoilOut::ModbusCoilOut(bool pIsCreatedFromMultiple) {
   \                     ??ModbusCoilOut:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusCoil,??ModbusCoil??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   686F84E2           ADD      R6,R4,#+416
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   1400C6E5           STRB     R0,[R6, #+20]
   \   0000003C   6E6F84E2           ADD      R6,R4,#+440
   \   00000040   01008DE2           ADD      R0,SP,#+1
   \   00000044   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000050   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000054   1400C6E5           STRB     R0,[R6, #+20]
     11              ModbusSet.insert(this);
   \   00000058   ........           LDR      R6,??DataTable2  ;; ??ModbusSet
   \   0000005C   750F84E2           ADD      R0,R4,#+468
   \   00000060   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000064   780F84E2           ADD      R0,R4,#+480
   \   00000068   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000006C   0420A0E1           MOV      R2,R4
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     ??insert_1,??insert??rA
     12              IDNumber            = (C_PRO_MODBUS_COIL_OUT << 16) + ModbusSet.size();
   \   0000007C   100096E5           LDR      R0,[R6, #+16]
   \   00000080   A016A0E3           MOV      R1,#+167772160
   \   00000084   F71881E3           ORR      R1,R1,#0xF70000
   \   00000088   000081E0           ADD      R0,R1,R0
   \   0000008C   9C0084E5           STR      R0,[R4, #+156]
     13              Type                = C_PRO_MODBUS_COIL_OUT;
   \   00000090   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000094   A00084E5           STR      R0,[R4, #+160]
     14              PulseTime           = 0;
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   946184E5           STR      R6,[R4, #+404]
     15              ActivatedTime       = clock();
   \   000000A0   ........           _BLF     clock,??clock??rA
   \   000000A4   900184E5           STR      R0,[R4, #+400]
     16              CurrentState        = 0;
   \   000000A8   846184E5           STR      R6,[R4, #+388]
     17              SetToNormal         = false;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   9801C4E5           STRB     R0,[R4, #+408]
     18              ValueKey            = NOT_FOUND;
   \   000000B4   0000E0E1           MVN      R0,R0
   \   000000B8   9C0184E5           STR      R0,[R4, #+412]
     19              SingleObject        = NULL;
   \   000000BC   EC6184E5           STR      R6,[R4, #+492]
     20          
     21              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   000000C0   7851C4E5           STRB     R5,[R4, #+376]
     22          }
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   7E40BDE8           POP      {R1-R6,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          ModbusCoilOut::~ModbusCoilOut() {
   \                     `?~ModbusCoilOut`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1600000A           BEQ      `?~ModbusCoilOut_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     25          }
   \   00000018   786F84E2           ADD      R6,R4,#+480
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000030   756F84E2           ADD      R6,R4,#+468
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000044   6E0F84E2           ADD      R0,R4,#+440
   \   00000048   ........           _BLF     ??clear,??clear??rA
   \   0000004C   680F84E2           ADD      R0,R4,#+416
   \   00000050   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     `?~ModbusCoil`,`?~ModbusCoil??rA`
   \   00000060   010015E3           TST      R5,#0x1
   \   00000064   0100000A           BEQ      `?~ModbusCoilOut_1`
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusCoilOut_1`:
   \   00000070   ........           B        ?Subroutine17

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   4F6E0000           DC8      "On",+0
   \   0000000C   4F666600           DC8      "Off"
   \   00000010   ........           DC32     `?<Constant "Active">`
     26          
     27          
     28          ///////////////////////////////////////////////////////////////
     29          //
     30          // Routines for the Configuration
     31          //
     32          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     33          AnsiString ModbusCoilOut::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     34              AnsiString LocalString = ModbusObject::MakeConfigString();
     35          
     36              LocalString += TabStr1 + KeyWord(C_OBJECT_ID_LIST);
   \   00000004   28559FE5           LDR      R5,??MakeConfigString_2  ;; TabStr1
   \   00000008   A1DF4DE2           SUB      SP,SP,#+644
   \   0000000C   0070A0E1           MOV      R7,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000001C   D210A0E3           MOV      R1,#+210
   \   00000020   8C008DE2           ADD      R0,SP,#+140
   \   00000024   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000028   8C208DE2           ADD      R2,SP,#+140
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   70008DE2           ADD      R0,SP,#+112
   \   00000034   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000038   ........           LDR      R0,??DataTable5  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   006090E5           LDR      R6,[R0, #+0]
   \   00000044   70108DE2           ADD      R1,SP,#+112
   \   00000048   0630A0E1           MOV      R3,R6
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   70008DE2           ADD      R0,SP,#+112
   \   00000060   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   8C008DE2           ADD      R0,SP,#+140
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
     37              set<PRogramObject *>::iterator pBIt;
     38              for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000074   688FA0E3           MOV      R8,#+416
   \   00000078   079098E7           LDR      R9,[R8, +R7]
   \   0000007C   180000EA           B        ??MakeConfigString_3
     39                  PRogramObject *Element = (PRogramObject *)*pBIt;
     40                  int PROIDNumber = Element->IDNumber;
   \                     ??MakeConfigString_4:
   \   00000080   100099E5           LDR      R0,[R9, #+16]
   \   00000084   9CA090E5           LDR      R10,[R0, #+156]
     41                  AnsiString IdNumStr;
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??AnsiString,??AnsiString??rA
     42                  IdNumStr.cat_sprintf("0x%0X\t", PROIDNumber);
   \   00000090   A0249FE5           LDR      R2,??MakeConfigString_2+0x4  ;; `?<Constant "0x%0X     ">`
   \   00000094   0A30A0E1           MOV      R3,R10
   \   00000098   1C108DE2           ADD      R1,SP,#+28
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     43                  LocalString += IdNumStr;
   \   000000B4   0630A0E1           MOV      R3,R6
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0D10A0E1           MOV      R1,SP
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           _BLF     ??append,??append??rA
     44              }
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0900A0E1           MOV      R0,R9
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0090A0E1           MOV      R9,R0
   \                     ??MakeConfigString_3:
   \   000000E4   070088E0           ADD      R0,R8,R7
   \   000000E8   000059E1           CMP      R9,R0
   \   000000EC   E3FFFF1A           BNE      ??MakeConfigString_4
     45              LocalString += TabStr1 + KeyWord(C_PROLIST_END);
   \   000000F0   4910A0E3           MOV      R1,#+73
   \   000000F4   501E81E3           ORR      R1,R1,#0x500
   \   000000F8   C4008DE2           ADD      R0,SP,#+196
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   C4208DE2           ADD      R2,SP,#+196
   \   00000104   0510A0E1           MOV      R1,R5
   \   00000108   A8008DE2           ADD      R0,SP,#+168
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   0630A0E1           MOV      R3,R6
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   A8108DE2           ADD      R1,SP,#+168
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   A8008DE2           ADD      R0,SP,#+168
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   C4008DE2           ADD      R0,SP,#+196
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     46              if ( ValueKey != NOT_FOUND) {
   \   00000144   9C1197E5           LDR      R1,[R7, #+412]
   \   00000148   010071E3           CMN      R1,#+1
   \   0000014C   2100000A           BEQ      ??MakeConfigString_5
     47                  LocalString += TabStr1 + KeyWord(C_VALUE_KEY) + ValueKeyWord(ValueKey);
   \   00000150   38008DE2           ADD      R0,SP,#+56
   \   00000154   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   00000158   D510A0E3           MOV      R1,#+213
   \   0000015C   54008DE2           ADD      R0,SP,#+84
   \   00000160   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000164   54208DE2           ADD      R2,SP,#+84
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   1C008DE2           ADD      R0,SP,#+28
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   38208DE2           ADD      R2,SP,#+56
   \   00000178   1C108DE2           ADD      R1,SP,#+28
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000184   0630A0E1           MOV      R3,R6
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0D10A0E1           MOV      R1,SP
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   ........           _BLF     ??append,??append??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   0D00A0E1           MOV      R0,SP
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   38008DE2           ADD      R0,SP,#+56
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   1C008DE2           ADD      R0,SP,#+28
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   54008DE2           ADD      R0,SP,#+84
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     48              }
     49          
     50              LocalString += TabStr1 + KeyWord(NormalState);
   \                     ??MakeConfigString_5:
   \   000001D8   881197E5           LDR      R1,[R7, #+392]
   \   000001DC   FC008DE2           ADD      R0,SP,#+252
   \   000001E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001E4   FC208DE2           ADD      R2,SP,#+252
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   E0008DE2           ADD      R0,SP,#+224
   \   000001F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F4   0630A0E1           MOV      R3,R6
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   E0108DE2           ADD      R1,SP,#+224
   \   00000200   0400A0E1           MOV      R0,R4
   \   00000204   ........           _BLF     ??append,??append??rA
   \   00000208   0020A0E3           MOV      R2,#+0
   \   0000020C   0110A0E3           MOV      R1,#+1
   \   00000210   E0008DE2           ADD      R0,SP,#+224
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   FC008DE2           ADD      R0,SP,#+252
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
     51          	LocalString += TabStr1 + KeyWord(C_CTRL_DEACTIVATE) + KeyWord(DeactivateBy);
   \   00000228   8C1197E5           LDR      R1,[R7, #+396]
   \   0000022C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000230   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000234   B210A0E3           MOV      R1,#+178
   \   00000238   701E81E3           ORR      R1,R1,#0x700
   \   0000023C   540F8DE2           ADD      R0,SP,#+336
   \   00000240   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000244   542F8DE2           ADD      R2,SP,#+336
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000250   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000254   5B2F8DE2           ADD      R2,SP,#+364
   \   00000258   4D1F8DE2           ADD      R1,SP,#+308
   \   0000025C   460F8DE2           ADD      R0,SP,#+280
   \   00000260   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000264   0630A0E1           MOV      R3,R6
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   461F8DE2           ADD      R1,SP,#+280
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   ........           _BLF     ??append,??append??rA
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   0110A0E3           MOV      R1,#+1
   \   00000280   460F8DE2           ADD      R0,SP,#+280
   \   00000284   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   5B0F8DE2           ADD      R0,SP,#+364
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   4D0F8DE2           ADD      R0,SP,#+308
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   540F8DE2           ADD      R0,SP,#+336
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     52          	LocalString += TabStr1 + KeyWord(C_CTRL_PULSE_WIDTH) + (AnsiString)PulseTime;
   \   000002B8   941197E5           LDR      R1,[R7, #+404]
   \   000002BC   9A0F8DE2           ADD      R0,SP,#+616
   \   000002C0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000002C4   0080A0E1           MOV      R8,R0
   \   000002C8   B810A0E3           MOV      R1,#+184
   \   000002CC   701E81E3           ORR      R1,R1,#0x700
   \   000002D0   700F8DE2           ADD      R0,SP,#+448
   \   000002D4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002D8   702F8DE2           ADD      R2,SP,#+448
   \   000002DC   0510A0E1           MOV      R1,R5
   \   000002E0   690F8DE2           ADD      R0,SP,#+420
   \   000002E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E8   0820A0E1           MOV      R2,R8
   \   000002EC   691F8DE2           ADD      R1,SP,#+420
   \   000002F0   620F8DE2           ADD      R0,SP,#+392
   \   000002F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002F8   0630A0E1           MOV      R3,R6
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   621F8DE2           ADD      R1,SP,#+392
   \   00000304   0400A0E1           MOV      R0,R4
   \   00000308   ........           _BLF     ??append,??append??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   620F8DE2           ADD      R0,SP,#+392
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   9A0F8DE2           ADD      R0,SP,#+616
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   690F8DE2           ADD      R0,SP,#+420
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   700F8DE2           ADD      R0,SP,#+448
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
     53              LocalString += TabStr1 + KeyWord(AlarmAlternative);
   \   0000034C   D01197E5           LDR      R1,[R7, #+464]
   \   00000350   7E0F8DE2           ADD      R0,SP,#+504
   \   00000354   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000358   7E2F8DE2           ADD      R2,SP,#+504
   \   0000035C   0510A0E1           MOV      R1,R5
   \   00000360   770F8DE2           ADD      R0,SP,#+476
   \   00000364   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000368   0630A0E1           MOV      R3,R6
   \   0000036C   0020A0E3           MOV      R2,#+0
   \   00000370   771F8DE2           ADD      R1,SP,#+476
   \   00000374   0400A0E1           MOV      R0,R4
   \   00000378   ........           _BLF     ??append,??append??rA
   \   0000037C   0020A0E3           MOV      R2,#+0
   \   00000380   0110A0E3           MOV      R1,#+1
   \   00000384   770F8DE2           ADD      R0,SP,#+476
   \   00000388   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000038C   0020A0E3           MOV      R2,#+0
   \   00000390   0110A0E3           MOV      R1,#+1
   \   00000394   7E0F8DE2           ADD      R0,SP,#+504
   \   00000398   ........           _BLF     ??_Tidy,??_Tidy??rA
     54          
     55          	for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
   \   0000039C   0090A0E3           MOV      R9,#+0
   \   000003A0   758FA0E3           MOV      R8,#+468
   \   000003A4   150000EA           B        ??MakeConfigString_6
     56                  LocalString += TabStr1 + KeyWord(AlarmTypeList[j]);
   \                     ??MakeConfigString_7:
   \   000003A8   070098E7           LDR      R0,[R8, +R7]
   \   000003AC   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   000003B0   0D00A0E1           MOV      R0,SP
   \   000003B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003B8   0D20A0E1           MOV      R2,SP
   \   000003BC   0510A0E1           MOV      R1,R5
   \   000003C0   1C008DE2           ADD      R0,SP,#+28
   \   000003C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C8   0630A0E1           MOV      R3,R6
   \   000003CC   0020A0E3           MOV      R2,#+0
   \   000003D0   1C108DE2           ADD      R1,SP,#+28
   \   000003D4   0400A0E1           MOV      R0,R4
   \   000003D8   ........           _BLF     ??append,??append??rA
   \   000003DC   0020A0E3           MOV      R2,#+0
   \   000003E0   0110A0E3           MOV      R1,#+1
   \   000003E4   1C008DE2           ADD      R0,SP,#+28
   \   000003E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   0110A0E3           MOV      R1,#+1
   \   000003F4   0D00A0E1           MOV      R0,SP
   \   000003F8   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              }
   \   000003FC   019089E2           ADD      R9,R9,#+1
   \                     ??MakeConfigString_6:
   \   00000400   070088E0           ADD      R0,R8,R7
   \   00000404   041090E5           LDR      R1,[R0, #+4]
   \   00000408   000090E5           LDR      R0,[R0, #+0]
   \   0000040C   000041E0           SUB      R0,R1,R0
   \   00000410   200159E1           CMP      R9,R0, LSR #+2
   \   00000414   E3FFFF3A           BCC      ??MakeConfigString_7
   \   00000418   7C1197E5           LDR      R1,[R7, #+380]
   \   0000041C   000051E3           CMP      R1,#+0
   \   00000420   2300000A           BEQ      ??MakeConfigString_8
     58              if (AlarmDelay) {
     59                  LocalString += TabStr1 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay;
   \   00000424   54008DE2           ADD      R0,SP,#+84
   \   00000428   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000042C   0070A0E1           MOV      R7,R0
   \   00000430   A810A0E3           MOV      R1,#+168
   \   00000434   701E81E3           ORR      R1,R1,#0x700
   \   00000438   38008DE2           ADD      R0,SP,#+56
   \   0000043C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000440   38208DE2           ADD      R2,SP,#+56
   \   00000444   0510A0E1           MOV      R1,R5
   \   00000448   1C008DE2           ADD      R0,SP,#+28
   \   0000044C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000450   0720A0E1           MOV      R2,R7
   \   00000454   1C108DE2           ADD      R1,SP,#+28
   \   00000458   0D00A0E1           MOV      R0,SP
   \   0000045C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000460   0630A0E1           MOV      R3,R6
   \   00000464   0020A0E3           MOV      R2,#+0
   \   00000468   0D10A0E1           MOV      R1,SP
   \   0000046C   0400A0E1           MOV      R0,R4
   \   00000470   ........           _BLF     ??append,??append??rA
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0110A0E3           MOV      R1,#+1
   \   0000047C   0D00A0E1           MOV      R0,SP
   \   00000480   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000484   0020A0E3           MOV      R2,#+0
   \   00000488   0110A0E3           MOV      R1,#+1
   \   0000048C   54008DE2           ADD      R0,SP,#+84
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000494   0020A0E3           MOV      R2,#+0
   \   00000498   0110A0E3           MOV      R1,#+1
   \   0000049C   1C008DE2           ADD      R0,SP,#+28
   \   000004A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A4   0020A0E3           MOV      R2,#+0
   \   000004A8   0110A0E3           MOV      R1,#+1
   \   000004AC   38008DE2           ADD      R0,SP,#+56
   \   000004B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     60              }
     61              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \                     ??MakeConfigString_8:
   \   000004B4   6110A0E3           MOV      R1,#+97
   \   000004B8   901E81E3           ORR      R1,R1,#0x900
   \   000004BC   930F8DE2           ADD      R0,SP,#+588
   \   000004C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004C4   932F8DE2           ADD      R2,SP,#+588
   \   000004C8   0510A0E1           MOV      R1,R5
   \   000004CC   8C0F8DE2           ADD      R0,SP,#+560
   \   000004D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004D4   60209FE5           LDR      R2,??MakeConfigString_2+0x8  ;; CrLfStr
   \   000004D8   8C1F8DE2           ADD      R1,SP,#+560
   \   000004DC   850F8DE2           ADD      R0,SP,#+532
   \   000004E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004E4   0630A0E1           MOV      R3,R6
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   851F8DE2           ADD      R1,SP,#+532
   \   000004F0   0400A0E1           MOV      R0,R4
   \   000004F4   ........           _BLF     ??append,??append??rA
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   850F8DE2           ADD      R0,SP,#+532
   \   00000504   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0110A0E3           MOV      R1,#+1
   \   00000510   8C0F8DE2           ADD      R0,SP,#+560
   \   00000514   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   0110A0E3           MOV      R1,#+1
   \   00000520   930F8DE2           ADD      R0,SP,#+588
   \   00000524   ........           _BLF     ??_Tidy,??_Tidy??rA
     62              return (LocalString);
   \   00000528   A1DF8DE2           ADD      SP,SP,#+644
   \   0000052C   F047BDE8           POP      {R4-R10,LR}
   \   00000530   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000534   ........           DC32     TabStr1
   \   00000538   ........           DC32     `?<Constant "0x%0X     ">`
   \   0000053C   ........           DC32     CrLfStr
     63          }
     64          //---------------------------------------------------------------------------
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          bool ModbusCoilOut::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     67              int ErrorLine = 0;
     68              bool NoError = true;
     69              if (ModbusObject::LoadConfigString(ConfigString)) {
   \   00000004   CCB59FE5           LDR      R11,??LoadConfigString_3  ;; `?<Constant "Modbus Coil value">`
   \   00000008   E4D04DE2           SUB      SP,SP,#+228
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0170A0E3           MOV      R7,#+1
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0080A0E3           MOV      R8,#+0
   \   00000030   789FA0E3           MOV      R9,#+480
   \   00000034   49A0A0E3           MOV      R10,#+73
   \   00000038   50AE8AE3           ORR      R10,R10,#0x500
   \   0000003C   5001000A           BEQ      ??LoadConfigString_4
     70                  int Key;
     71                  do {
     72                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_5:
   \   00000040   0030A0E3           MOV      R3,#+0
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   74108DE2           ADD      R1,SP,#+116
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??NextWord,??NextWord??rA
     73                      Key = FindConfigKey(InputKeyWord);
   \   00000054   74108DE2           ADD      R1,SP,#+116
   \   00000058   58008DE2           ADD      R0,SP,#+88
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   58008DE2           ADD      R0,SP,#+88
   \   00000064   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000068   0060A0E1           MOV      R6,R0
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   58008DE2           ADD      R0,SP,#+88
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
     74                      switch (Key) {
   \   0000007C   D10056E3           CMP      R6,#+209
   \   00000080   D2005613           CMPNE    R6,#+210
   \   00000084   8F00000A           BEQ      ??LoadConfigString_6
   \   00000088   D40056E3           CMP      R6,#+212
   \   0000008C   A000000A           BEQ      ??LoadConfigString_7
   \   00000090   D50056E3           CMP      R6,#+213
   \   00000094   A900000A           BEQ      ??LoadConfigString_8
   \   00000098   FA0F56E3           CMP      R6,#+1000
   \   0000009C   EA10A013           MOVNE    R1,#+234
   \   000000A0   C01F8113           ORRNE    R1,R1,#0x300
   \   000000A4   01005611           CMPNE    R6,R1
   \   000000A8   6C10A013           MOVNE    R1,#+108
   \   000000AC   701E8113           ORRNE    R1,R1,#0x700
   \   000000B0   01005611           CMPNE    R6,R1
   \   000000B4   02108113           ORRNE    R1,R1,#0x2
   \   000000B8   01005611           CMPNE    R6,R1
   \   000000BC   0E01000A           BEQ      ??LoadConfigString_9
   \   000000C0   091081E2           ADD      R1,R1,#+9
   \   000000C4   010056E1           CMP      R6,R1
   \   000000C8   01108112           ADDNE    R1,R1,#+1
   \   000000CC   01005611           CMPNE    R6,R1
   \   000000D0   01108113           ORRNE    R1,R1,#0x1
   \   000000D4   01005611           CMPNE    R6,R1
   \   000000D8   01108112           ADDNE    R1,R1,#+1
   \   000000DC   01005611           CMPNE    R6,R1
   \   000000E0   F900000A           BEQ      ??LoadConfigString_10
   \   000000E4   251081E2           ADD      R1,R1,#+37
   \   000000E8   010056E1           CMP      R6,R1
   \   000000EC   02108112           ADDNE    R1,R1,#+2
   \   000000F0   01005611           CMPNE    R6,R1
   \   000000F4   F200000A           BEQ      ??LoadConfigString_11
   \   000000F8   071081E2           ADD      R1,R1,#+7
   \   000000FC   010056E1           CMP      R6,R1
   \   00000100   BF00000A           BEQ      ??LoadConfigString_12
   \   00000104   0A1081E2           ADD      R1,R1,#+10
   \   00000108   010056E1           CMP      R6,R1
   \   0000010C   C500000A           BEQ      ??LoadConfigString_13
   \   00000110   061081E2           ADD      R1,R1,#+6
   \   00000114   010056E1           CMP      R6,R1
   \   00000118   F100000A           BEQ      ??LoadConfigString_14
   \   0000011C   6110A0E3           MOV      R1,#+97
   \   00000120   901E81E3           ORR      R1,R1,#0x900
   \   00000124   010056E1           CMP      R6,R1
   \   00000128   F400000A           BEQ      ??LoadConfigString_15
   \   0000012C   C210A0E3           MOV      R1,#+194
   \   00000130   B01E81E3           ORR      R1,R1,#0xB00
   \   00000134   010056E1           CMP      R6,R1
   \   00000138   01108113           ORRNE    R1,R1,#0x1
   \   0000013C   01005611           CMPNE    R6,R1
   \   00000140   01108112           ADDNE    R1,R1,#+1
   \   00000144   01005611           CMPNE    R6,R1
   \   00000148   01108113           ORRNE    R1,R1,#0x1
   \   0000014C   01005611           CMPNE    R6,R1
   \   00000150   01108112           ADDNE    R1,R1,#+1
   \   00000154   01005611           CMPNE    R6,R1
   \   00000158   01108113           ORRNE    R1,R1,#0x1
   \   0000015C   01005611           CMPNE    R6,R1
   \   00000160   01108112           ADDNE    R1,R1,#+1
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   01108113           ORRNE    R1,R1,#0x1
   \   0000016C   01005611           CMPNE    R6,R1
   \   00000170   04108113           ORRNE    R1,R1,#0x4
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   01108112           ADDNE    R1,R1,#+1
   \   0000017C   01005611           CMPNE    R6,R1
   \   00000180   01108113           ORRNE    R1,R1,#0x1
   \   00000184   01005611           CMPNE    R6,R1
   \   00000188   BD0E5613           CMPNE    R6,#+3024
   \   0000018C   02108112           ADDNE    R1,R1,#+2
   \   00000190   01005611           CMPNE    R6,R1
   \   00000194   01108112           ADDNE    R1,R1,#+1
   \   00000198   01005611           CMPNE    R6,R1
   \   0000019C   01108113           ORRNE    R1,R1,#0x1
   \   000001A0   01005611           CMPNE    R6,R1
   \   000001A4   01108112           ADDNE    R1,R1,#+1
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   01108113           ORRNE    R1,R1,#0x1
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108112           ADDNE    R1,R1,#+1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108113           ORRNE    R1,R1,#0x1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108112           ADDNE    R1,R1,#+1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   01108113           ORRNE    R1,R1,#0x1
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   01108112           ADDNE    R1,R1,#+1
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   01108113           ORRNE    R1,R1,#0x1
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108112           ADDNE    R1,R1,#+1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   01108113           ORRNE    R1,R1,#0x1
   \   000001F0   01005611           CMPNE    R6,R1
   \   000001F4   01108112           ADDNE    R1,R1,#+1
   \   000001F8   01005611           CMPNE    R6,R1
   \   000001FC   01108113           ORRNE    R1,R1,#0x1
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   BE0E5613           CMPNE    R6,#+3040
   \   00000208   02108112           ADDNE    R1,R1,#+2
   \   0000020C   01005611           CMPNE    R6,R1
   \   00000210   01108112           ADDNE    R1,R1,#+1
   \   00000214   01005611           CMPNE    R6,R1
   \   00000218   01108113           ORRNE    R1,R1,#0x1
   \   0000021C   01005611           CMPNE    R6,R1
   \   00000220   02108112           ADDNE    R1,R1,#+2
   \   00000224   01005611           CMPNE    R6,R1
   \   00000228   01108112           ADDNE    R1,R1,#+1
   \   0000022C   01005611           CMPNE    R6,R1
   \   00000230   01108113           ORRNE    R1,R1,#0x1
   \   00000234   01005611           CMPNE    R6,R1
   \   00000238   01108112           ADDNE    R1,R1,#+1
   \   0000023C   01005611           CMPNE    R6,R1
   \   00000240   01108113           ORRNE    R1,R1,#0x1
   \   00000244   01005611           CMPNE    R6,R1
   \   00000248   A1108112           ADDNE    R1,R1,#+161
   \   0000024C   01005611           CMPNE    R6,R1
   \   00000250   01108113           ORRNE    R1,R1,#0x1
   \   00000254   01005611           CMPNE    R6,R1
   \   00000258   02108112           ADDNE    R1,R1,#+2
   \   0000025C   01005611           CMPNE    R6,R1
   \   00000260   01108112           ADDNE    R1,R1,#+1
   \   00000264   01005611           CMPNE    R6,R1
   \   00000268   01108113           ORRNE    R1,R1,#0x1
   \   0000026C   01005611           CMPNE    R6,R1
   \   00000270   C90E5613           CMPNE    R6,#+3216
   \   00000274   02108112           ADDNE    R1,R1,#+2
   \   00000278   01005611           CMPNE    R6,R1
   \   0000027C   01108112           ADDNE    R1,R1,#+1
   \   00000280   01005611           CMPNE    R6,R1
   \   00000284   01108113           ORRNE    R1,R1,#0x1
   \   00000288   01005611           CMPNE    R6,R1
   \   0000028C   0C108113           ORRNE    R1,R1,#0xC
   \   00000290   01005611           CMPNE    R6,R1
   \   00000294   CA0E5613           CMPNE    R6,#+3232
   \   00000298   02108112           ADDNE    R1,R1,#+2
   \   0000029C   01005611           CMPNE    R6,R1
   \   000002A0   01108112           ADDNE    R1,R1,#+1
   \   000002A4   01005611           CMPNE    R6,R1
   \   000002A8   03108112           ADDNE    R1,R1,#+3
   \   000002AC   01005611           CMPNE    R6,R1
   \   000002B0   01108112           ADDNE    R1,R1,#+1
   \   000002B4   01005611           CMPNE    R6,R1
   \   000002B8   01108113           ORRNE    R1,R1,#0x1
   \   000002BC   01005611           CMPNE    R6,R1
   \   000002C0   8300000A           BEQ      ??LoadConfigString_16
   \   000002C4   900000EA           B        ??LoadConfigString_17
     75                      case C_OBJECT_ID_LIST:
     76                      case C_OBJECT_ID     :
     77                          do {
     78                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_6:
   \   000002C8   0A20A0E1           MOV      R2,R10
   \   000002CC   0D10A0E1           MOV      R1,SP
   \   000002D0   0500A0E1           MOV      R0,R5
   \   000002D4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
     79                              if (!ErrorLine) {
   \   000002D8   00109DE5           LDR      R1,[SP, #+0]
   \   000002DC   000051E3           CMP      R1,#+0
   \   000002E0   0200001A           BNE      ??LoadConfigString_18
     80                                  IdNumbers.push_back(tmpIDNumber);
   \   000002E4   0010A0E1           MOV      R1,R0
   \   000002E8   040089E0           ADD      R0,R9,R4
   \   000002EC   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     81                              }
     82                          }while (!ErrorLine);
   \                     ??LoadConfigString_18:
   \   000002F0   00009DE5           LDR      R0,[SP, #+0]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   F2FFFF0A           BEQ      ??LoadConfigString_6
     83                          if (ErrorLine == END_FOUND) {
   \   000002FC   020070E3           CMN      R0,#+2
   \   00000300   9200001A           BNE      ??LoadConfigString_19
     84                              ErrorLine = 0;
   \   00000304   0010A0E3           MOV      R1,#+0
   \   00000308   00108DE5           STR      R1,[SP, #+0]
   \                     ??LoadConfigString_20:
   \   0000030C   0170A0E3           MOV      R7,#+1
   \   00000310   8F0000EA           B        ??LoadConfigString_21
     85                          }
     86                          NoError = !ErrorLine;
     87                          break;
     88                      case C_REF_OBJECT_ID :
     89                          {
     90                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_7:
   \   00000314   0A20A0E1           MOV      R2,R10
   \   00000318   0D10A0E1           MOV      R1,SP
   \   0000031C   0500A0E1           MOV      R0,R5
   \   00000320   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000324   0010A0E1           MOV      R1,R0
     91                              if (!ErrorLine) {
   \   00000328   00009DE5           LDR      R0,[SP, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   8700001A           BNE      ??LoadConfigString_21
     92                                  IdNumbers.push_back(tmpIDNumber);
   \   00000334   040089E0           ADD      R0,R9,R4
   \   00000338   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
   \   0000033C   840000EA           B        ??LoadConfigString_21
     93                              }
     94                          }
     95                          break;
     96                      case C_VALUE_KEY        :
     97                          {
     98                              AnsiString tempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_8:
   \   00000340   0030A0E3           MOV      R3,#+0
   \   00000344   0D20A0E1           MOV      R2,SP
   \   00000348   04108DE2           ADD      R1,SP,#+4
   \   0000034C   0500A0E1           MOV      R0,R5
   \   00000350   ........           _BLF     ??NextWord,??NextWord??rA
     99                              NoError = !ErrorLine;
   \   00000354   00009DE5           LDR      R0,[SP, #+0]
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   2600001A           BNE      ??LoadConfigString_22
   \   00000360   0170A0E3           MOV      R7,#+1
    100                              if (NoError) {
    101                                  ValueKey = FindValueConfigKey(tempStr);
   \   00000364   04108DE2           ADD      R1,SP,#+4
   \   00000368   3C008DE2           ADD      R0,SP,#+60
   \   0000036C   ........           _BLF     ??string,??string??rA
   \   00000370   3C008DE2           ADD      R0,SP,#+60
   \   00000374   ........           _BLF     ??FindValueConfigKey,??FindValueConfigKey??rA
   \   00000378   9C0184E5           STR      R0,[R4, #+412]
   \   0000037C   0020A0E3           MOV      R2,#+0
   \   00000380   0710A0E1           MOV      R1,R7
   \   00000384   3C008DE2           ADD      R0,SP,#+60
   \   00000388   ........           _BLF     ??_Tidy,??_Tidy??rA
    102                                  if (ValueKey == NOT_FOUND) {
   \   0000038C   9C0194E5           LDR      R0,[R4, #+412]
   \   00000390   010070E3           CMN      R0,#+1
   \   00000394   1300001A           BNE      ??LoadConfigString_23
    103                                      ErrorLine = ConfigString.LineCount;
   \   00000398   1C1095E5           LDR      R1,[R5, #+28]
    104                                      NoError = false;
    105                                      GiveConfigWarning("Modbus Coil value", InputKeyWord, ConfigString.LineCount);
   \   0000039C   20008DE2           ADD      R0,SP,#+32
   \   000003A0   00108DE5           STR      R1,[SP, #+0]
   \   000003A4   74108DE2           ADD      R1,SP,#+116
   \   000003A8   ........           _BLF     ??string,??string??rA
   \   000003AC   0B10A0E1           MOV      R1,R11
   \   000003B0   90008DE2           ADD      R0,SP,#+144
   \   000003B4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000003B8   1C2095E5           LDR      R2,[R5, #+28]
   \   000003BC   0070A0E3           MOV      R7,#+0
   \   000003C0   20108DE2           ADD      R1,SP,#+32
   \   000003C4   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000003C8   0720A0E1           MOV      R2,R7
   \   000003CC   0110A0E3           MOV      R1,#+1
   \   000003D0   20008DE2           ADD      R0,SP,#+32
   \   000003D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D8   0720A0E1           MOV      R2,R7
   \   000003DC   0110A0E3           MOV      R1,#+1
   \   000003E0   90008DE2           ADD      R0,SP,#+144
   \   000003E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    106                                  }
    107                              }
    108                          }
   \                     ??LoadConfigString_23:
   \   000003E8   0020A0E3           MOV      R2,#+0
   \   000003EC   0110A0E3           MOV      R1,#+1
   \   000003F0   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_24:
   \   000003F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F8   550000EA           B        ??LoadConfigString_21
   \                     ??LoadConfigString_22:
   \   000003FC   0070A0E3           MOV      R7,#+0
   \   00000400   F8FFFFEA           B        ??LoadConfigString_23
    109                          break;
    110                      case C_CTRL_AL_DELAY:
    111                          AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   0D10A0E1           MOV      R1,SP
   \   0000040C   0500A0E1           MOV      R0,R5
   \   00000410   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000414   7C0184E5           STR      R0,[R4, #+380]
    112                          NoError = !ErrorLine;
   \                     ??LoadConfigString_25:
   \   00000418   00009DE5           LDR      R0,[SP, #+0]
   \   0000041C   000050E3           CMP      R0,#+0
   \   00000420   4A00001A           BNE      ??LoadConfigString_19
   \   00000424   B8FFFFEA           B        ??LoadConfigString_20
    113                          break;
    114                      case C_CTRL_DEACTIVATE      :
    115                          {
    116                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_13:
   \   00000428   0030A0E3           MOV      R3,#+0
   \   0000042C   0D20A0E1           MOV      R2,SP
   \   00000430   20108DE2           ADD      R1,SP,#+32
   \   00000434   0500A0E1           MOV      R0,R5
   \   00000438   ........           _BLF     ??NextWord,??NextWord??rA
    117                              if (!ErrorLine) {
   \   0000043C   00009DE5           LDR      R0,[SP, #+0]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   1600001A           BNE      ??LoadConfigString_26
    118                                  int tmpKey = FindConfigKey(TempStr);
   \   00000448   20108DE2           ADD      R1,SP,#+32
   \   0000044C   04008DE2           ADD      R0,SP,#+4
   \   00000450   ........           _BLF     ??string,??string??rA
   \   00000454   04008DE2           ADD      R0,SP,#+4
   \   00000458   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000045C   0070A0E1           MOV      R7,R0
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   0110A0E3           MOV      R1,#+1
   \   00000468   04008DE2           ADD      R0,SP,#+4
   \   0000046C   ........           _BLF     ??_Tidy,??_Tidy??rA
    119                                  switch (tmpKey) {
   \   00000470   B30047E2           SUB      R0,R7,#+179
   \   00000474   700E40E2           SUB      R0,R0,#+1792
   \   00000478   040050E3           CMP      R0,#+4
   \   0000047C   0600008A           BHI      ??LoadConfigString_27
   \   00000480   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000484   0010D1E7           LDRB     R1,[R1, R0]
   \   00000488   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   0000048C   01010101           DC8      +1,+1,+1,+1
   \   00000490   01000000           DC8      +1,+0,+0,+0
    120                                  case C_CTRL_DE_ACKNOW       :
    121                                  case C_CTRL_DE_IDLE         :
    122                                  case C_CTRL_DE_VALUE        :
    123                                  case C_CTRL_DE_SILENCE      :
    124                                  case C_CTRL_DE_VAL_ENABLED  :
    125                                      DeactivateBy = tmpKey;
   \                     ??LoadConfigString_28:
   \   00000494   8C7184E5           STR      R7,[R4, #+396]
   \   00000498   010000EA           B        ??LoadConfigString_26
    126                                      break;
    127                                  default:
    128                                      ErrorLine = ConfigString.LineCount;
   \                     ??LoadConfigString_27:
   \   0000049C   1C1095E5           LDR      R1,[R5, #+28]
   \   000004A0   00108DE5           STR      R1,[SP, #+0]
    129                                      break;
    130                                  }
    131                              }
    132                              NoError = !ErrorLine;
   \                     ??LoadConfigString_26:
   \   000004A4   00009DE5           LDR      R0,[SP, #+0]
    133                          }
   \   000004A8   0020A0E3           MOV      R2,#+0
   \   000004AC   000050E3           CMP      R0,#+0
   \   000004B0   0170A003           MOVEQ    R7,#+1
   \   000004B4   0070A013           MOVNE    R7,#+0
   \   000004B8   0110A0E3           MOV      R1,#+1
   \   000004BC   20008DE2           ADD      R0,SP,#+32
   \   000004C0   CBFFFFEA           B        ??LoadConfigString_24
    134                          break;
    135                      case C_CTRL_NS_POWERED              :
    136                      case C_CTRL_NS_UNPOWERED            :
    137                          NormalState = Key;
   \                     ??LoadConfigString_11:
   \   000004C4   886184E5           STR      R6,[R4, #+392]
   \   000004C8   210000EA           B        ??LoadConfigString_21
    138                          break;
    139                      case C_CTRL_ALT_ALL                 :
    140                      case C_CTRL_ALT_AL_TYPES            :
    141                      case C_CTRL_ALT_PRO_LIST            :
    142                      case C_CTRL_ALT_TYPE_PRO            :
    143                          AlarmAlternative = Key;
   \                     ??LoadConfigString_10:
   \   000004CC   D06184E5           STR      R6,[R4, #+464]
   \   000004D0   1F0000EA           B        ??LoadConfigString_21
    144                          break;
    145                      case ID_AL_OVERFILL                 :
    146                      case ID_AL_HIGH_LEVEL               :
    147                      case ID_AL_LOWLOW_LEVEL             :
    148                      case ID_AL_LOW_LEVEL                :
    149                      case ID_AL_HIGH_TEMP                :
    150                      case ID_AL_LOW_TEMP                 :
    151                      case ID_AL_LOW_BOT_TEMP             :
    152                      case ID_AL_HIGH_BOT_TEMP            :
    153                      case ID_AL_MAIN_WATERINGR           :
    154                      case ID_AL_PRE_WATERINGR            :
    155                      case ID_AL_LOW_T_PRESS              :
    156                      case ID_AL_HIGH_T_PRESS             :
    157          			case ID_AL_LOW_INERT_GAS_PRESS      :
    158          			case ID_AL_HIGH_INERT_GAS_PRESS     :
    159                      case ID_AL_LOW_PRESS_VAC            :
    160                      case ID_AL_HIGH_PRESS_VAC           :
    161                      case ID_AL_LOW_VAPOUR_RETURN        :
    162                      case ID_AL_HIGH_VAPOUR_RETURN       :
    163                      case ID_AL_X_LOW_T_PRESS1           :
    164                      case ID_AL_X_HIGH_T_PRESS1          :
    165                      case ID_AL_X_LOW_T_PRESS2           :
    166                      case ID_AL_X_HIGH_T_PRESS2          :
    167                      case ID_AL_LOW_LOADRATE             :
    168                      case ID_AL_HIGH_LOADRATE            :
    169                      case ID_AL_LEVEL_CHANGE             :
    170                      case ID_AL_DENS_DIFF                :
    171                      case ID_AL_LOW_LINE_PRESS           :
    172                      case ID_AL_HIGH_LINE_PRESS          :
    173                      case ID_AL_HIGHHIGH_LINE_PRESS      :
    174                      case ID_AL_SNS_OPEN_LOOP            :
    175                      case ID_AL_LEVEL_SWITCH             :
    176                      case ID_AL_LSWITCH_TEST             :
    177                      case ID_AL_LSWITCH_FAILURE          :
    178                      case ID_AL_SNS_SHORT_CIRCUIT        :
    179                      case ID_AL_SNS_HART_COM_ERROR       :
    180                      case ID_AL_SNS_HART_OPEN_LOOP       :
    181                      case ID_AL_SNS_HART_SHORT_CIRCUIT   :
    182                      case ID_AL_SNS_AIR_PURGE_FAILURE    :
    183                      case ID_AL_SNS_ERROR                :
    184                      case ID_AL_SNS_CONCAL_ERROR         :
    185                      case ID_AL_SNS_CONV_ERROR           :
    186                      case ID_AL_IO_COM_ERROR             :
    187                      case ID_AL_SC_COM_ERROR             :
    188                      case ID_AL_MODBUS_COM_ERROR         :
    189                      case ID_AL_MODBUS_INPUT_STATUS      :
    190                      case ID_AL_WATER_DETECT             :
    191                      case ID_AL_FUSE                     :
    192                      case ID_AL_AC_VOLTAGE               :
    193                      case ID_AL_LOW_VOLTAGE              :
    194                      case ID_AL_HI_VOLTAGE               :
    195                      case ID_AL_TWM_ELAPSED_TIME      :
    196                      case ID_AL_TWM_LOW_SPEED      :
    197                          AlarmTypeList.push_back(Key);
   \                     ??LoadConfigString_16:
   \   000004D4   0610A0E1           MOV      R1,R6
   \   000004D8   750F84E2           ADD      R0,R4,#+468
   \   000004DC   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
   \   000004E0   1B0000EA           B        ??LoadConfigString_21
    198                          break;
    199                      case C_CTRL_PULSE_WIDTH             :
    200                          PulseTime = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_14:
   \   000004E4   0020A0E3           MOV      R2,#+0
   \   000004E8   0D10A0E1           MOV      R1,SP
   \   000004EC   0500A0E1           MOV      R0,R5
   \   000004F0   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   000004F4   940184E5           STR      R0,[R4, #+404]
    201                          NoError = !ErrorLine;
   \   000004F8   C6FFFFEA           B        ??LoadConfigString_25
    202                          break;
    203                      case C_PRO_END_COMMON               :
    204                      case C_PRO_END                      :
    205                      case C_CTRL_END_COMMON              :
    206                      case C_CTRL_END                     :
    207                          NoError = false;
   \                     ??LoadConfigString_9:
   \   000004FC   0070A0E3           MOV      R7,#+0
    208                      case C_MODBUS_END                   :
    209                          Key = C_MODBUS_END;
   \                     ??LoadConfigString_15:
   \   00000500   6160A0E3           MOV      R6,#+97
   \   00000504   906E86E3           ORR      R6,R6,#0x900
   \   00000508   110000EA           B        ??LoadConfigString_21
    210                          break;
    211                      default:
    212                          GiveConfigWarning("ModbusCoilOut", InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_17:
   \   0000050C   74108DE2           ADD      R1,SP,#+116
   \   00000510   C8008DE2           ADD      R0,SP,#+200
   \   00000514   ........           _BLF     ??string,??string??rA
   \   00000518   14108BE2           ADD      R1,R11,#+20
   \   0000051C   AC008DE2           ADD      R0,SP,#+172
   \   00000520   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000524   1C2095E5           LDR      R2,[R5, #+28]
   \   00000528   C8108DE2           ADD      R1,SP,#+200
   \   0000052C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000530   0020A0E3           MOV      R2,#+0
   \   00000534   0110A0E3           MOV      R1,#+1
   \   00000538   C8008DE2           ADD      R0,SP,#+200
   \   0000053C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000540   0820A0E1           MOV      R2,R8
   \   00000544   0110A0E3           MOV      R1,#+1
   \   00000548   AC008DE2           ADD      R0,SP,#+172
   \   0000054C   ........           _BLF     ??_Tidy,??_Tidy??rA
    213                          NoError = false;
   \                     ??LoadConfigString_19:
   \   00000550   0070A0E3           MOV      R7,#+0
    214                          break;
    215          
    216                      }
    217                  }while (NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END));
   \                     ??LoadConfigString_21:
   \   00000554   0020A0E3           MOV      R2,#+0
   \   00000558   0110A0E3           MOV      R1,#+1
   \   0000055C   74008DE2           ADD      R0,SP,#+116
   \   00000560   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000564   000057E3           CMP      R7,#+0
   \   00000568   1600000A           BEQ      ??LoadConfigString_29
   \   0000056C   00009DE5           LDR      R0,[SP, #+0]
   \   00000570   010070E3           CMN      R0,#+1
   \   00000574   6100A013           MOVNE    R0,#+97
   \   00000578   900E8013           ORRNE    R0,R0,#0x900
   \   0000057C   00005611           CMPNE    R6,R0
   \   00000580   AEFEFF1A           BNE      ??LoadConfigString_5
   \                     ??LoadConfigString_4:
   \   00000584   7801D4E5           LDRB     R0,[R4, #+376]
   \   00000588   000050E3           CMP      R0,#+0
   \   0000058C   0D00001A           BNE      ??LoadConfigString_29
    218              }
    219              if (NoError && !IsCreatedFromMultiple) {
    220                  ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel);
   \   00000590   01002DE9           PUSH     {R0}
   \   00000594   01002DE9           PUSH     {R0}
   \   00000598   700194E5           LDR      R0,[R4, #+368]
   \   0000059C   01002DE9           PUSH     {R0}
   \   000005A0   A03094E5           LDR      R3,[R4, #+160]
   \   000005A4   6C2194E5           LDR      R2,[R4, #+364]
   \   000005A8   681194E5           LDR      R1,[R4, #+360]
   \   000005AC   640194E5           LDR      R0,[R4, #+356]
   \   000005B0   FF2002E2           AND      R2,R2,#0xFF
   \   000005B4   0118A0E1           MOV      R1,R1, LSL #+16
   \   000005B8   2118A0E1           MOV      R1,R1, LSR #+16
   \   000005BC   FF0000E2           AND      R0,R0,#0xFF
   \   000005C0   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   000005C4   0CD08DE2           ADD      SP,SP,#+12
    221              }
    222              return (NoError);
   \                     ??LoadConfigString_29:
   \   000005C8   0700A0E1           MOV      R0,R7
   \   000005CC   E4D08DE2           ADD      SP,SP,#+228
   \   000005D0   F04FBDE8           POP      {R4-R11,LR}
   \   000005D4   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_3:
   \   000005D8   ........           DC32     `?<Constant "Modbus Coil value">`
    223          }
    224          
    225          //--------------------------------------------------------------------------- '
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          void ModbusCoilOut::SetAlarmList(void) {
   \                     ??SetAlarmList:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000004   00429FE5           LDR      R4,??SetAlarmList_2  ;; ??AlarmSet
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   D01196E5           LDR      R1,[R6, #+464]
   \   00000010   A05196E5           LDR      R5,[R6, #+416]
   \   00000014   B00196E5           LDR      R0,[R6, #+432]
   \   00000018   009094E5           LDR      R9,[R4, #+0]
   \   0000001C   6E7FA0E3           MOV      R7,#+440
   \   00000020   758FA0E3           MOV      R8,#+468
   \   00000024   771041E2           SUB      R1,R1,#+119
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   030051E3           CMP      R1,#+3
   \   00000030   7300008A           BHI      ??SetAlarmList_3
   \   00000034   012F8FE2           ADR      R2,??SetAlarmList_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SetAlarmList_1:
   \   00000040   001E2247           DC8      +0,+30,+34,+71
    228              switch (AlarmAlternative) {
    229              case C_CTRL_ALT_ALL      :
    230                  {
    231                      set<AlarmBasic *>::iterator APtrIt;
    232                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
   \                     ??SetAlarmList_4:
   \   00000044   040059E1           CMP      R9,R4
   \   00000048   6D00000A           BEQ      ??SetAlarmList_3
    233                          AlarmList.insert(*APtrIt);
   \   0000004C   102099E5           LDR      R2,[R9, #+16]
   \   00000050   061087E0           ADD      R1,R7,R6
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??insert,??insert??rA_1
    234                      }
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000064   0090A0E1           MOV      R9,R0
   \   00000068   F5FFFFEA           B        ??SetAlarmList_4
    235                  }
    236                  break;
    237              case C_CTRL_ALT_AL_TYPES :
    238                  {
    239                      set<AlarmBasic *>::iterator APtrIt;
    240                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
    241                          for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    242                              if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_5:
   \   0000006C   100099E5           LDR      R0,[R9, #+16]
   \   00000070   061098E7           LDR      R1,[R8, +R6]
   \   00000074   A00090E5           LDR      R0,[R0, #+160]
   \   00000078   051191E7           LDR      R1,[R1, +R5, LSL #+2]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   0300001A           BNE      ??SetAlarmList_6
    243                                  AlarmList.insert(*APtrIt);
   \   00000084   102099E5           LDR      R2,[R9, #+16]
   \   00000088   061087E0           ADD      R1,R7,R6
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??insert,??insert??rA_1
    244                              }
    245                          }
   \                     ??SetAlarmList_6:
   \   00000094   015085E2           ADD      R5,R5,#+1
   \                     ??SetAlarmList_7:
   \   00000098   060088E0           ADD      R0,R8,R6
   \   0000009C   041090E5           LDR      R1,[R0, #+4]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   000041E0           SUB      R0,R1,R0
   \   000000A8   200155E1           CMP      R5,R0, LSR #+2
   \   000000AC   EEFFFF3A           BCC      ??SetAlarmList_5
   \   000000B0   0900A0E1           MOV      R0,R9
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000B8   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_8:
   \   000000BC   040059E1           CMP      R9,R4
   \   000000C0   4F00000A           BEQ      ??SetAlarmList_3
   \   000000C4   0050A0E3           MOV      R5,#+0
   \   000000C8   F2FFFFEA           B        ??SetAlarmList_7
    246                      }
    247                  }
    248                  break;
    249              case C_CTRL_ALT_PRO_LIST :
    250                  if (!PROList.empty()) {
   \                     ??SetAlarmList_9:
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   4B00000A           BEQ      ??SetAlarmList_3
    251                      set<PRogramObject *>::iterator pBIt;
    252                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   000000D4   020000EA           B        ??SetAlarmList_10
   \                     ??SetAlarmList_11:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_10:
   \   000000E4   680F86E2           ADD      R0,R6,#+416
   \   000000E8   000055E1           CMP      R5,R0
   \   000000EC   4400000A           BEQ      ??SetAlarmList_3
    253                          PRogramObject *TElement = (PRogramObject *)*pBIt;
   \   000000F0   104095E5           LDR      R4,[R5, #+16]
    254                          set<AlarmBasic *>::iterator APtrIt;
    255                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
   \   000000F4   FC9094E5           LDR      R9,[R4, #+252]
   \   000000F8   130000EA           B        ??SetAlarmList_12
    256                              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    257                                  if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_13:
   \   000000FC   100099E5           LDR      R0,[R9, #+16]
   \   00000100   061098E7           LDR      R1,[R8, +R6]
   \   00000104   A00090E5           LDR      R0,[R0, #+160]
   \   00000108   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   0000010C   010050E1           CMP      R0,R1
   \   00000110   0300001A           BNE      ??SetAlarmList_14
    258                                      AlarmList.insert(*APtrIt);
   \   00000114   102099E5           LDR      R2,[R9, #+16]
   \   00000118   061087E0           ADD      R1,R7,R6
   \   0000011C   0D00A0E1           MOV      R0,SP
   \   00000120   ........           _BLF     ??insert,??insert??rA_1
    259                                  }
    260                              }
   \                     ??SetAlarmList_14:
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \                     ??SetAlarmList_15:
   \   00000128   060088E0           ADD      R0,R8,R6
   \   0000012C   041090E5           LDR      R1,[R0, #+4]
   \   00000130   000090E5           LDR      R0,[R0, #+0]
   \   00000134   000041E0           SUB      R0,R1,R0
   \   00000138   20015AE1           CMP      R10,R0, LSR #+2
   \   0000013C   EEFFFF3A           BCC      ??SetAlarmList_13
   \   00000140   0900A0E1           MOV      R0,R9
   \   00000144   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000148   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_12:
   \   0000014C   FC0084E2           ADD      R0,R4,#+252
   \   00000150   000059E1           CMP      R9,R0
   \   00000154   DFFFFF0A           BEQ      ??SetAlarmList_11
   \   00000158   00A0A0E3           MOV      R10,#+0
   \   0000015C   F1FFFFEA           B        ??SetAlarmList_15
    261                          }
    262                      }
    263                  }
    264                  break;
    265              case C_CTRL_ALT_TYPE_PRO :
    266                  if (!PROList.empty()) {
   \                     ??SetAlarmList_16:
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   2600000A           BEQ      ??SetAlarmList_3
    267                      set<PRogramObject *>::iterator pBIt;
    268                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000168   200000EA           B        ??SetAlarmList_17
    269                          PRogramObject *TElement = (PRogramObject *)*pBIt;
    270                          set<AlarmBasic *>::iterator APtrIt;
    271                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
    272                              AlarmBasic *AlPtr = *APtrIt;
   \                     ??SetAlarmList_18:
   \   0000016C   10A094E5           LDR      R10,[R4, #+16]
    273                              if (AlPtr) {
   \   00000170   00005AE3           CMP      R10,#+0
   \   00000174   1400000A           BEQ      ??SetAlarmList_19
    274                                  bool Found = false;
   \   00000178   0000A0E3           MOV      R0,#+0
    275                                  for (unsigned j = 0; !Found && j < AlarmTypeList.size(); j++) {
   \   0000017C   00B0A0E3           MOV      R11,#+0
   \                     ??SetAlarmList_20:
   \   00000180   061088E0           ADD      R1,R8,R6
   \   00000184   042091E5           LDR      R2,[R1, #+4]
   \   00000188   001091E5           LDR      R1,[R1, #+0]
   \   0000018C   011042E0           SUB      R1,R2,R1
   \   00000190   21015BE1           CMP      R11,R1, LSR #+2
   \   00000194   0C00002A           BCS      ??SetAlarmList_19
    276                                      if (AlPtr->Type == AlarmTypeList[j]) {
   \   00000198   062098E7           LDR      R2,[R8, +R6]
   \   0000019C   A0109AE5           LDR      R1,[R10, #+160]
   \   000001A0   0B2192E7           LDR      R2,[R2, +R11, LSL #+2]
   \   000001A4   020051E1           CMP      R1,R2
   \   000001A8   0400001A           BNE      ??SetAlarmList_21
    277                                          AlarmList.insert(AlPtr);
   \   000001AC   0A20A0E1           MOV      R2,R10
   \   000001B0   061087E0           ADD      R1,R7,R6
   \   000001B4   0D00A0E1           MOV      R0,SP
   \   000001B8   ........           _BLF     ??insert,??insert??rA_1
    278                                          Found = true;
   \   000001BC   0100A0E3           MOV      R0,#+1
    279                                      }
    280                                  }
   \                     ??SetAlarmList_21:
   \   000001C0   01B08BE2           ADD      R11,R11,#+1
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   ECFFFF0A           BEQ      ??SetAlarmList_20
    281                              }
    282                          }
   \                     ??SetAlarmList_19:
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001D4   0040A0E1           MOV      R4,R0
   \                     ??SetAlarmList_22:
   \   000001D8   FC0089E2           ADD      R0,R9,#+252
   \   000001DC   000054E1           CMP      R4,R0
   \   000001E0   E1FFFF1A           BNE      ??SetAlarmList_18
   \   000001E4   0500A0E1           MOV      R0,R5
   \   000001E8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001EC   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_17:
   \   000001F0   680F86E2           ADD      R0,R6,#+416
   \   000001F4   000055E1           CMP      R5,R0
   \   000001F8   10909515           LDRNE    R9,[R5, #+16]
   \   000001FC   FC409915           LDRNE    R4,[R9, #+252]
   \   00000200   F4FFFF1A           BNE      ??SetAlarmList_22
    283                      }
    284                  }
    285                  break;
    286              }
    287          }
   \                     ??SetAlarmList_3:
   \   00000204   F34FBDE8           POP      {R0,R1,R4-R11,LR}
   \   00000208   1EFF2FE1           BX       LR               ;; return
   \                     ??SetAlarmList_2:
   \   0000020C   ........           DC32     ??AlarmSet
    288          
    289          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    290          void ModbusCoilOut::SetProList(void) {
   \                     ??SetProList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040A0E1           MOV      R4,R0
    291              if (!IdNumbers.empty()) {
   \   0000000C   785FA0E3           MOV      R5,#+480
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   686FA0E3           MOV      R6,#+416
   \   00000020   000041E0           SUB      R0,R1,R0
   \   00000024   2001B0E1           LSRS     R0,R0,#+2
   \   00000028   3E00000A           BEQ      ??SetProList_1
    292                  PROList.clear();
   \   0000002C   040086E0           ADD      R0,R6,R4
   \   00000030   ........           _BLF     ??clear_1,??clear??rA_1
    293                  for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   1B0000EA           B        ??SetProList_2
    294                      PRogramObject *PROPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[i]);
    295                      if (PROPtr) {
    296                          PROList.insert(PROPtr);
    297                      } else {
    298                          AnsiString InfoStr;
    299                          if (IsCreatedFromMultiple) {
    300                              InfoStr.cat_sprintf("Created by ModbusMultiple(Line number %i): ModbusCoilOut RefIDNumber %i (0x%0x) is incorrect", LineNumber, IdNumbers[i], IdNumbers[i]);
    301                          } else {
    302                              InfoStr.cat_sprintf("ModbusCoilOut RefIDNumber %i (0x%0x) is incorrect. Line Number %i", IdNumbers[i], IdNumbers[i], LineNumber);
   \                     ??SetProList_3:
   \   0000003C   041094E5           LDR      R1,[R4, #+4]
   \   00000040   602082E2           ADD      R2,R2,#+96
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   001090E5           LDR      R1,[R0, #+0]
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   003090E5           LDR      R3,[R0, #+0]
   \                     ??SetProList_4:
   \   00000054   08108DE2           ADD      R1,SP,#+8
   \   00000058   24008DE2           ADD      R0,SP,#+36
   \   0000005C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   08008DE2           ADD      R0,SP,#+8
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   08D08DE2           ADD      SP,SP,#+8
    303                          }
    304                          GiveConfigWarning(InfoStr);
   \   00000074   1C108DE2           ADD      R1,SP,#+28
   \   00000078   38008DE2           ADD      R0,SP,#+56
   \   0000007C   ........           _BLF     ??string,??string??rA
   \   00000080   38008DE2           ADD      R0,SP,#+56
   \   00000084   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   38008DE2           ADD      R0,SP,#+56
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
    305                      }
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   1C008DE2           ADD      R0,SP,#+28
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SetProList_5:
   \   000000A8   017087E2           ADD      R7,R7,#+1
   \                     ??SetProList_2:
   \   000000AC   040085E0           ADD      R0,R5,R4
   \   000000B0   041090E5           LDR      R1,[R0, #+4]
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000041E0           SUB      R0,R1,R0
   \   000000BC   200157E1           CMP      R7,R0, LSR #+2
   \   000000C0   1800002A           BCS      ??SetProList_1
   \   000000C4   040095E7           LDR      R0,[R5, +R4]
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   070190E7           LDR      R0,[R0, +R7, LSL #+2]
   \   000000D0   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0400000A           BEQ      ??SetProList_6
   \   000000DC   0020A0E1           MOV      R2,R0
   \   000000E0   041086E0           ADD      R1,R6,R4
   \   000000E4   54008DE2           ADD      R0,SP,#+84
   \   000000E8   ........           _BLF     ??insert_3,??insert??rA_2
   \   000000EC   EDFFFFEA           B        ??SetProList_5
   \                     ??SetProList_6:
   \   000000F0   1C008DE2           ADD      R0,SP,#+28
   \   000000F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000F8   7801D4E5           LDRB     R0,[R4, #+376]
   \   000000FC   C8209FE5           LDR      R2,??SetProList_7+0x4  ;; `?<Constant "Created by ModbusMult...">`
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   040095E7           LDR      R0,[R5, +R4]
   \   00000108   070180E0           ADD      R0,R0,R7, LSL #+2
   \   0000010C   CAFFFF0A           BEQ      ??SetProList_3
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   043094E5           LDR      R3,[R4, #+4]
   \   00000124   CAFFFFEA           B        ??SetProList_4
    306                  }
    307              }
    308              if (PROList.size() == 1 ) {
   \                     ??SetProList_1:
   \   00000128   B00194E5           LDR      R0,[R4, #+432]
   \   0000012C   010050E3           CMP      R0,#+1
   \   00000130   2100001A           BNE      ??SetProList_8
    309                  set<PRogramObject*>::iterator PROgramObjectITR = PROList.begin();
   \   00000134   045096E7           LDR      R5,[R6, +R4]
    310                  Name = (*PROgramObjectITR)->Name +" "+ (*PROgramObjectITR)->Description;
   \   00000138   222F8FE2           ADR      R2,??SetProList_7  ;; " "
   \   0000013C   100095E5           LDR      R0,[R5, #+16]
   \   00000140   441080E2           ADD      R1,R0,#+68
   \   00000144   38008DE2           ADD      R0,SP,#+56
   \   00000148   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000014C   100095E5           LDR      R0,[R5, #+16]
   \   00000150   38108DE2           ADD      R1,SP,#+56
   \   00000154   7C2080E2           ADD      R2,R0,#+124
   \   00000158   1C008DE2           ADD      R0,SP,#+28
   \   0000015C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000160   1C108DE2           ADD      R1,SP,#+28
   \   00000164   0D00A0E1           MOV      R0,SP
   \   00000168   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000016C   0010A0E1           MOV      R1,R0
   \   00000170   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   003090E5           LDR      R3,[R0, #+0]
   \   0000017C   440084E2           ADD      R0,R4,#+68
   \   00000180   ........           _BLF     ??assign,??assign??rA
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0110A0E3           MOV      R1,#+1
   \   0000018C   0D00A0E1           MOV      R0,SP
   \   00000190   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   1C008DE2           ADD      R0,SP,#+28
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   38008DE2           ADD      R0,SP,#+56
   \   000001B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    311                  SingleObject =  (*PROgramObjectITR);
   \   000001B4   100095E5           LDR      R0,[R5, #+16]
   \   000001B8   EC0184E5           STR      R0,[R4, #+492]
    312              }
    313          }
   \                     ??SetProList_8:
   \   000001BC   5CD08DE2           ADD      SP,SP,#+92
   \   000001C0   F040BDE8           POP      {R4-R7,LR}
   \   000001C4   1EFF2FE1           BX       LR               ;; return
   \                     ??SetProList_7:
   \   000001C8   20000000           DC8      " ",+0,+0
   \   000001CC   ........           DC32     `?<Constant "Created by ModbusMult...">`
    314          
    315          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    316          bool ModbusCoilOut::GetOutputVal(void)
    317          {
   \                     ??GetOutputVal:
   \   00000000   01402DE9           PUSH     {R0,LR}
    318              bool ReturnVal = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0020CDE5           STRB     R2,[SP, #+0]
    319          	if ( SingleObject ) {
   \   0000000C   ECC190E5           LDR      R12,[R0, #+492]
   \   00000010   00005CE3           CMP      R12,#+0
   \   00000014   0600000A           BEQ      ??GetOutputVal_1
    320          		int Status = SingleObject->GetBitValue(ValueKey, 0, ReturnVal);
   \   00000018   9C1190E5           LDR      R1,[R0, #+412]
   \   0000001C   0C00A0E1           MOV      R0,R12
   \   00000020   A4C09CE5           LDR      R12,[R12, #+164]
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   2CC09CE5           LDR      R12,[R12, #+44]
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   1CFF2FE1           BX       R12
    321          
    322              }
    323              return ReturnVal;
   \                     ??GetOutputVal_1:
   \   00000034   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000038   0240BDE8           POP      {R1,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    324          
    325          }
    326          

   \                                 In segment CODE, align 4, keep-with-next
    327          int ModbusCoilOut::GetAlarmOutputVal(void) {
   \                     ??GetAlarmOutputVal:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
    328              int AlStat = 0;
    329              if (!AlarmList.empty()) {
   \   0000000C   C80194E5           LDR      R0,[R4, #+456]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   5100000A           BEQ      ??GetAlarmOutputVal_2
    330                  switch (DeactivateBy) {
   \   0000001C   8C1194E5           LDR      R1,[R4, #+396]
   \   00000020   6E0FA0E3           MOV      R0,#+440
   \   00000024   B31041E2           SUB      R1,R1,#+179
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   040051E3           CMP      R1,#+4
   \   00000030   4B00008A           BHI      ??GetAlarmOutputVal_2
   \   00000034   012F8FE2           ADR      R2,??GetAlarmOutputVal_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??GetAlarmOutputVal_1:
   \   00000040   01380F1E           DC8      +1,+56,+15,+30
   \   00000044   2B000000           DC8      +43,+0,+0,+0
    331                  case C_CTRL_DE_ACKNOW  :
    332                      {
    333                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    334                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetAlarmOutputVal_3:
   \   00000048   08108DE2           ADD      R1,SP,#+8
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   14108DE2           ADD      R1,SP,#+20
   \   00000054   02002DE9           PUSH     {R1}
   \   00000058   14108DE2           ADD      R1,SP,#+20
   \   0000005C   02002DE9           PUSH     {R1}
   \   00000060   20308DE2           ADD      R3,SP,#+32
   \   00000064   10208DE2           ADD      R2,SP,#+16
   \   00000068   0C108DE2           ADD      R1,SP,#+12
   \   0000006C   040080E0           ADD      R0,R0,R4
   \   00000070   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    335                          AlStat = ActiveAl;
   \   00000074   0C509DE5           LDR      R5,[SP, #+12]
   \                     ??GetAlarmOutputVal_4:
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   380000EA           B        ??GetAlarmOutputVal_2
    336                      }
    337                      break;
    338                  case C_CTRL_DE_IDLE    :
    339                      {
    340                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    341                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetAlarmOutputVal_5:
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   02002DE9           PUSH     {R1}
   \   00000088   18108DE2           ADD      R1,SP,#+24
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   14108DE2           ADD      R1,SP,#+20
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   1C308DE2           ADD      R3,SP,#+28
   \   0000009C   14208DE2           ADD      R2,SP,#+20
   \   000000A0   0C108DE2           ADD      R1,SP,#+12
   \   000000A4   040080E0           ADD      R0,R0,R4
   \   000000A8   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    342                          AlStat = ActiveAl + AcknowledgedAl;
   \   000000AC   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B0   14109DE5           LDR      R1,[SP, #+20]
   \   000000B4   005081E0           ADD      R5,R1,R0
   \   000000B8   EEFFFFEA           B        ??GetAlarmOutputVal_4
    343                      }
    344                      break;
    345                  case C_CTRL_DE_VALUE   :
    346                      {
    347                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    348                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetAlarmOutputVal_6:
   \   000000BC   10108DE2           ADD      R1,SP,#+16
   \   000000C0   02002DE9           PUSH     {R1}
   \   000000C4   10108DE2           ADD      R1,SP,#+16
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   1C108DE2           ADD      R1,SP,#+28
   \   000000D0   02002DE9           PUSH     {R1}
   \   000000D4   10308DE2           ADD      R3,SP,#+16
   \   000000D8   14208DE2           ADD      R2,SP,#+20
   \   000000DC   0C108DE2           ADD      R1,SP,#+12
   \   000000E0   040080E0           ADD      R0,R0,R4
   \   000000E4   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    349                          AlStat = OutsideLim;
   \   000000E8   18509DE5           LDR      R5,[SP, #+24]
   \   000000EC   E1FFFFEA           B        ??GetAlarmOutputVal_4
    350                      }
    351                      break;
    352                  case C_CTRL_DE_VAL_ENABLED:
    353                      {
    354                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    355                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetAlarmOutputVal_7:
   \   000000F0   04108DE2           ADD      R1,SP,#+4
   \   000000F4   02002DE9           PUSH     {R1}
   \   000000F8   18108DE2           ADD      R1,SP,#+24
   \   000000FC   02002DE9           PUSH     {R1}
   \   00000100   18108DE2           ADD      R1,SP,#+24
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   14308DE2           ADD      R3,SP,#+20
   \   0000010C   18208DE2           ADD      R2,SP,#+24
   \   00000110   0C108DE2           ADD      R1,SP,#+12
   \   00000114   040080E0           ADD      R0,R0,R4
   \   00000118   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    356                          AlStat = OutsideLimEnabled;
   \   0000011C   10509DE5           LDR      R5,[SP, #+16]
   \   00000120   D4FFFFEA           B        ??GetAlarmOutputVal_4
    357                      }
    358                      break;
    359                  case C_CTRL_DE_SILENCE:
    360                      {
    361                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    362                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetAlarmOutputVal_8:
   \   00000124   14108DE2           ADD      R1,SP,#+20
   \   00000128   02002DE9           PUSH     {R1}
   \   0000012C   10108DE2           ADD      R1,SP,#+16
   \   00000130   02002DE9           PUSH     {R1}
   \   00000134   10108DE2           ADD      R1,SP,#+16
   \   00000138   02002DE9           PUSH     {R1}
   \   0000013C   10308DE2           ADD      R3,SP,#+16
   \   00000140   0C208DE2           ADD      R2,SP,#+12
   \   00000144   1C108DE2           ADD      R1,SP,#+28
   \   00000148   040080E0           ADD      R0,R0,R4
   \   0000014C   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    363                          if (AlarmBasic::AlarmSilence) {
   \   00000150   3C009FE5           LDR      R0,??GetAlarmOutputVal_9  ;; ??AlarmSilence
   \   00000154   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000158   0CD08DE2           ADD      SP,SP,#+12
   \   0000015C   000050E3           CMP      R0,#+0
    364                              AlStat = 0;
    365                          } else {
    366                              AlStat = ActiveAl;
   \   00000160   10509D05           LDREQ    R5,[SP, #+16]
    367                          }
    368                      }
    369                      break;
    370                  }
    371              } else {
    372                  switch (DeactivateBy) {
    373                  case C_CTRL_DE_IDLE         :
    374                  case C_CTRL_DE_VALUE        :
    375                  case C_CTRL_DE_ACKNOW       :
    376                  case C_CTRL_DE_SILENCE      :
    377                  case C_CTRL_DE_VAL_ENABLED  :
    378                      break;
    379                  }
    380              }
    381              switch (NormalState) {
   \                     ??GetAlarmOutputVal_2:
   \   00000164   880194E5           LDR      R0,[R4, #+392]
   \   00000168   9F10A0E3           MOV      R1,#+159
   \   0000016C   701E81E3           ORR      R1,R1,#0x700
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   0200001A           BNE      ??GetAlarmOutputVal_10
    382              case C_CTRL_NS_UNPOWERED:
    383                  break;
    384              case C_CTRL_NS_POWERED  :
    385                  AlStat = !AlStat;
   \   00000178   000055E3           CMP      R5,#+0
   \   0000017C   0150A003           MOVEQ    R5,#+1
   \   00000180   0050A013           MOVNE    R5,#+0
    386                  break;
    387              }
    388              return AlStat;
   \                     ??GetAlarmOutputVal_10:
   \   00000184   0500A0E1           MOV      R0,R5
   \   00000188   18D08DE2           ADD      SP,SP,#+24
   \   0000018C   3040BDE8           POP      {R4,R5,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
   \                     ??GetAlarmOutputVal_9:
   \   00000194   ........           DC32     ??AlarmSilence
    389          }
    390          

   \                                 In segment CODE, align 4, keep-with-next
    391          void ModbusCoilOut::Update(void) {
   \                     ??Update:
   \   00000000   70412DE9           PUSH     {R4-R6,R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    392              ModbusUnit *tmpPtr = FindUnit();
   \   00000008   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   0000000C   0050B0E1           MOVS     R5,R0
    393              if (tmpPtr) {
   \   00000010   4500000A           BEQ      ??Update_3
    394                  if ( ValueKey != NOT_FOUND ) {
   \   00000014   9C0194E5           LDR      R0,[R4, #+412]
   \   00000018   5C6FA0E3           MOV      R6,#+368
   \   0000001C   010070E3           CMN      R0,#+1
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   0D00000A           BEQ      ??Update_4
    395                      bool State     = GetOutputVal();
   \   00000028   ........           BL       ??GetOutputVal
    396                      switch (NormalState) {
   \   0000002C   881194E5           LDR      R1,[R4, #+392]
   \   00000030   9F1041E2           SUB      R1,R1,#+159
   \   00000034   701E41E2           SUB      R1,R1,#+1792
   \   00000038   020051E3           CMP      R1,#+2
   \   0000003C   3A00008A           BHI      ??Update_3
   \   00000040   012F8FE2           ADR      R2,??Update_1
   \   00000044   0120D2E7           LDRB     R2,[R2, R1]
   \   00000048   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??Update_1:
   \   0000004C   02370000           DC8      +2,+55,+0,+0
    397                      case C_CTRL_NS_UNPOWERED:
    398                          tmpPtr->SetCoil(Channel, State);
   \                     ??Update_5:
   \   00000050   0020A0E1           MOV      R2,R0
   \   00000054   310000EA           B        ??Update_6
    399                          break;
    400                      case C_CTRL_NS_POWERED  :
    401                          tmpPtr->SetCoil(Channel, !State);
   \                     ??Update_7:
   \   00000058   012020E2           EOR      R2,R0,#0x1
   \   0000005C   2F0000EA           B        ??Update_6
    402                          break;
    403                      }
    404                  }else{
    405                      int alState     = GetAlarmOutputVal();
   \                     ??Update_4:
   \   00000060   ........           BL       ??GetAlarmOutputVal
   \   00000064   0080A0E1           MOV      R8,R0
    406                      if (PulseTime) {
   \   00000068   940194E5           LDR      R0,[R4, #+404]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   2700000A           BEQ      ??Update_8
    407                          if (CurrentState != alState) {
   \   00000074   840194E5           LDR      R0,[R4, #+388]
   \   00000078   080050E1           CMP      R0,R8
   \   0000007C   0B00000A           BEQ      ??Update_9
    408                              CurrentState = alState;
   \   00000080   848184E5           STR      R8,[R4, #+388]
    409                              ActivatedTime        = clock();
   \   00000084   ........           _BLF     clock,??clock??rA
   \   00000088   900184E5           STR      R0,[R4, #+400]
    410                              tmpPtr->SetCoilDirect(Channel, alState);
   \   0000008C   041096E7           LDR      R1,[R6, +R4]
   \   00000090   000058E3           CMP      R8,#+0
   \   00000094   0120A013           MOVNE    R2,#+1
   \   00000098   0020A003           MOVEQ    R2,#+0
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     ??SetCoilDirect,??SetCoilDirect??rA
    411                              SetToNormal = true;
   \   000000A4   0100A0E3           MOV      R0,#+1
   \                     ??Update_10:
   \   000000A8   9801C4E5           STRB     R0,[R4, #+408]
   \   000000AC   1E0000EA           B        ??Update_3
    412                          }else if ( SetToNormal && TSNElapsedTicks(ActivatedTime)>= PulseTime){
   \                     ??Update_9:
   \   000000B0   9801D4E5           LDRB     R0,[R4, #+408]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   1B00000A           BEQ      ??Update_3
   \   000000BC   900194E5           LDR      R0,[R4, #+400]
   \   000000C0   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   000000C4   941194E5           LDR      R1,[R4, #+404]
   \   000000C8   010050E1           CMP      R0,R1
   \   000000CC   160000BA           BLT      ??Update_3
    413                              switch (NormalState) {
   \   000000D0   880194E5           LDR      R0,[R4, #+392]
   \   000000D4   041096E7           LDR      R1,[R6, +R4]
   \   000000D8   9F0040E2           SUB      R0,R0,#+159
   \   000000DC   700E40E2           SUB      R0,R0,#+1792
   \   000000E0   020050E3           CMP      R0,#+2
   \   000000E4   0800008A           BHI      ??Update_11
   \   000000E8   012F8FE2           ADR      R2,??Update_2
   \   000000EC   0020D2E7           LDRB     R2,[R2, R0]
   \   000000F0   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??Update_2:
   \   000000F4   02050000           DC8      +2,+5,+0,+0
    414                              case C_CTRL_NS_UNPOWERED:
    415                                  tmpPtr->SetCoilDirect(Channel, false);
   \                     ??Update_12:
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   000000EA           B        ??Update_13
    416                                  break;
    417                              case C_CTRL_NS_POWERED  :
    418                                  tmpPtr->SetCoilDirect(Channel, true);
   \                     ??Update_14:
   \   00000100   0120A0E3           MOV      R2,#+1
   \                     ??Update_13:
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   ........           _BLF     ??SetCoilDirect,??SetCoilDirect??rA
    419                                  break;
    420                              }
    421                              SetToNormal =  false;
   \                     ??Update_11:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   E4FFFFEA           B        ??Update_10
    422                          }
    423                      } else {
    424                          tmpPtr->SetCoil(Channel, alState);
   \                     ??Update_8:
   \   00000114   000058E3           CMP      R8,#+0
   \   00000118   0120A013           MOVNE    R2,#+1
   \   0000011C   0020A003           MOVEQ    R2,#+0
   \                     ??Update_6:
   \   00000120   041096E7           LDR      R1,[R6, +R4]
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           _BLF     ??SetCoil,??SetCoil??rA
    425                      }
    426                  }
    427              }
    428          }
   \                     ??Update_3:
   \   0000012C   7041BDE8           POP      {R4-R6,R8,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
    429          
    430          

   \                                 In segment CODE, align 4, keep-with-next
    431          ModbusCoilOut& ModbusCoilOut::operator = (ModbusCoilOut Src) {
   \                     `??operator=`:
   \   00000000   F3412DE9           PUSH     {R0,R1,R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    432              Name             = Src.Name;
   \   00000008   ........           LDR      R0,??DataTable8  ;; ??npos
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0630A0E1           MOV      R3,R6
   \   0000001C   441085E2           ADD      R1,R5,#+68
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??assign,??assign??rA
    433              Description      = Src.Description;
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   7C1085E2           ADD      R1,R5,#+124
   \   00000034   7C0084E2           ADD      R0,R4,#+124
   \   00000038   ........           _BLF     ??assign,??assign??rA
    434          
    435              IPAddress        = Src.IPAddress;
   \   0000003C   520FA0E3           MOV      R0,#+328
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   051080E0           ADD      R1,R0,R5
   \   0000004C   040080E0           ADD      R0,R0,R4
   \   00000050   ........           _BLF     ??assign,??assign??rA
    436              TCUAddress       = Src.TCUAddress;
   \   00000054   596FA0E3           MOV      R6,#+356
   \   00000058   050096E7           LDR      R0,[R6, +R5]
   \   0000005C   040086E7           STR      R0,[R6, +R4]
    437              TCUPortNo        = Src.TCUPortNo;
   \   00000060   5A0FA0E3           MOV      R0,#+360
   \   00000064   051090E7           LDR      R1,[R0, +R5]
   \   00000068   041080E7           STR      R1,[R0, +R4]
    438              Address          = Src.Address;
   \   0000006C   5B0FA0E3           MOV      R0,#+364
   \   00000070   051090E7           LDR      R1,[R0, +R5]
   \   00000074   041080E7           STR      R1,[R0, +R4]
    439              Channel          = Src.Channel;
   \   00000078   5C0FA0E3           MOV      R0,#+368
   \   0000007C   051090E7           LDR      R1,[R0, +R5]
   \   00000080   041080E7           STR      R1,[R0, +R4]
    440          
    441              AlarmDelay       = Src.AlarmDelay;
   \   00000084   5F0FA0E3           MOV      R0,#+380
   \   00000088   051090E7           LDR      R1,[R0, +R5]
   \   0000008C   041080E7           STR      R1,[R0, +R4]
    442              NormalState      = Src.NormalState;
   \   00000090   880195E5           LDR      R0,[R5, #+392]
   \   00000094   880184E5           STR      R0,[R4, #+392]
    443              DeactivateBy     = Src.DeactivateBy;
   \   00000098   8C0195E5           LDR      R0,[R5, #+396]
   \   0000009C   8C0184E5           STR      R0,[R4, #+396]
    444              AlarmAlternative = Src.AlarmAlternative;
   \   000000A0   D00195E5           LDR      R0,[R5, #+464]
   \   000000A4   D00184E5           STR      R0,[R4, #+464]
    445              AlarmTypeList    = Src.AlarmTypeList;
   \   000000A8   750FA0E3           MOV      R0,#+468
   \   000000AC   051080E0           ADD      R1,R0,R5
   \   000000B0   040080E0           ADD      R0,R0,R4
   \   000000B4   ........           _BLF     ??_Assign,??_Assign??rA
    446              AlarmList        = Src.AlarmList;
   \   000000B8   6E0FA0E3           MOV      R0,#+440
   \   000000BC   057080E0           ADD      R7,R0,R5
   \   000000C0   048080E0           ADD      R8,R0,R4
   \   000000C4   070058E1           CMP      R8,R7
   \   000000C8   0600000A           BEQ      `??operator=_1`
   \   000000CC   001098E5           LDR      R1,[R8, #+0]
   \   000000D0   0820A0E1           MOV      R2,R8
   \   000000D4   0800A0E1           MOV      R0,R8
   \   000000D8   ........           _BLF     ??erase,??erase??rA
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   ........           _BLF     ??_Copy,??_Copy??rA_1
    447              ValueKey         = Src.ValueKey;
   \                     `??operator=_1`:
   \   000000E8   9C0195E5           LDR      R0,[R5, #+412]
    448              //IdNumbers        = Src.IdNumbers; // To be set from UpdateFromMultiple
    449              //PROList          = Src.PROList;
    450              if ((TCUAddress == CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU)) {
   \   000000EC   38109FE5           LDR      R1,`??operator=_2`  ;; CurrentDeviceAddress
   \   000000F0   9C0184E5           STR      R0,[R4, #+412]
   \   000000F4   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000F8   040096E7           LDR      R0,[R6, +R4]
   \   000000FC   010050E1           CMP      R0,R1
   \   00000100   28009F05           LDREQ    R0,`??operator=_2`+0x4  ;; CurrentDeviceId
   \   00000104   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   00000108   20005003           CMPEQ    R0,#+32
   \   0000010C   0300001A           BNE      `??operator=_3`
    451                  MyModbusSet.insert(this);
   \   00000110   1C109FE5           LDR      R1,`??operator=_2`+0x8  ;; ??MyModbusSet
   \   00000114   0420A0E1           MOV      R2,R4
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           _BLF     ??insert_2,??insert??rA_3
    452              }
    453              return *this;
   \                     `??operator=_3`:
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   F641BDE8           POP      {R1,R2,R4-R8,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   \                     `??operator=_2`:
   \   0000012C   ........           DC32     CurrentDeviceAddress
   \   00000130   ........           DC32     CurrentDeviceId
   \   00000134   ........           DC32     ??MyModbusSet
    454          }
    455          

   \                                 In segment CODE, align 4, keep-with-next
    456          void ModbusCoilOut::UpdateFromMultiple(unsigned pIdNumber, int pChannel) {
   \                     ??UpdateFromMultiple:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    457              Channel +=  pChannel;
   \   00000008   5C5FA0E3           MOV      R5,#+368
   \   0000000C   040095E7           LDR      R0,[R5, +R4]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   000082E0           ADD      R0,R2,R0
   \   00000018   040085E7           STR      R0,[R5, +R4]
    458              IdNumbers.clear();
   \   0000001C   787FA0E3           MOV      R7,#+480
   \   00000020   048087E0           ADD      R8,R7,R4
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           _BLF     ??_Zero,??_Zero??rA
    459              IdNumbers.push_back(pIdNumber);  // Can only support one reference IDNumber currently
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   040087E0           ADD      R0,R7,R4
   \   0000003C   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
    460              ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel);
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   040095E7           LDR      R0,[R5, +R4]
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   A03094E5           LDR      R3,[R4, #+160]
   \   00000058   6C2194E5           LDR      R2,[R4, #+364]
   \   0000005C   681194E5           LDR      R1,[R4, #+360]
   \   00000060   640194E5           LDR      R0,[R4, #+356]
   \   00000064   FF2002E2           AND      R2,R2,#0xFF
   \   00000068   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000006C   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000070   FF0000E2           AND      R0,R0,#0xFF
   \   00000074   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    461          }
   \   00000078   F741BDE8           POP      {R0-R2,R4-R8,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
    462          

   \                                 In segment CODE, align 4, keep-with-next
    463          int ModbusCoilOut::GetObjectId(void) {
    464              if (!IdNumbers.empty()) {
   \                     ??GetObjectId:
   \   00000000   781FA0E3           MOV      R1,#+480
   \   00000004   002081E0           ADD      R2,R1,R0
   \   00000008   043092E5           LDR      R3,[R2, #+4]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   022043E0           SUB      R2,R3,R2
   \   00000014   2221B0E1           LSRS     R2,R2,#+2
    465                  return IdNumbers[0];
    466              } else {
    467                  return 0;
   \   00000018   0000A003           MOVEQ    R0,#+0
   \   0000001C   1EFF2F01           BXEQ     LR
    468              }
   \   00000020   000091E7           LDR      R0,[R1, +R0]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   1EFF2FE1           BX       LR               ;; return
    469          }
    470          

   \                                 In segment CODE, align 4, keep-with-next
    471          AnsiString ModbusCoilOut::GetValueKey(void) {
   \                     ??GetValueKey:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    472              	if ( ValueKey != NOT_FOUND) {
   \   00000008   9C1190E5           LDR      R1,[R0, #+412]
   \   0000000C   010071E3           CMN      R1,#+1
   \   00000010   0200000A           BEQ      ??GetValueKey_1
    473                  return ValueKeyWord(ValueKey);
   \   00000014   0200A0E1           MOV      R0,R2
   \   00000018   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   0000001C   020000EA           B        ??GetValueKey_2
    474              }else{
    475                  return KeyWord(AlarmAlternative);
   \                     ??GetValueKey_1:
   \   00000020   D01190E5           LDR      R1,[R0, #+464]
   \   00000024   0200A0E1           MOV      R0,R2
   \   00000028   ........           _BLF     ??KeyWord,??KeyWord??rA
   \                     ??GetValueKey_2:
   \   0000002C   ........           B        ?Subroutine18
    476              }
    477          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine18_0:
   \   00000008   ........           DC32     `?<Constant "Status">`
    478          

   \                                 In segment CODE, align 4, keep-with-next
    479          AnsiString ModbusCoilOut::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000   0100A0E1           MOV      R0,R1
    480              return "Status";
   \   00000004   ........           LDR      R1,??Subroutine18_0  ;; `?<Constant "Status">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000010                      REQUIRE ?Subroutine18
   \   00000010                      ;; // Fall through to label ?Subroutine18
    481          }
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          AnsiString ModbusCoilOut::GetRegisterValue(void) {
   \                     ??GetRegisterValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    484              AnsiString tmpStr;
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
    485              if ( ValueKey != NOT_FOUND ) {
   \   00000018   9C0195E5           LDR      R0,[R5, #+412]
   \   0000001C   010070E3           CMN      R0,#+1
   \   00000020   0C00000A           BEQ      ??GetRegisterValue_1
    486                  bool State     = GetOutputVal();
    487                  if ( State) {
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       ??GetOutputVal
   \   0000002C   000050E3           CMP      R0,#+0
    488                      tmpStr = "On";
   \   00000030   ........           ADRNE    R1,??Subroutine17_0  ;; "On"
   \   00000034   0F00001A           BNE      ??GetRegisterValue_2
    489                  }else{
    490                      tmpStr = "Off";
   \   00000038   ........           ADR      R1,??Subroutine17_0+0x4  ;; "Off"
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   ........           LDR      R0,??DataTable8  ;; ??npos
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   003090E5           LDR      R3,[R0, #+0]
   \   00000054   0D0000EA           B        ??GetRegisterValue_3
    491                  }
    492              }else{
    493                  int AlState     = GetAlarmOutputVal();
    494                  if ( AlState ) tmpStr = "Active"; else tmpStr= "Idle";
   \                     ??GetRegisterValue_1:
   \   00000058   ........           LDR      R6,??Subroutine17_0+0x8  ;; `?<Constant "Active">`
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       ??GetAlarmOutputVal
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??GetRegisterValue_4
   \   0000006C   0610A0E1           MOV      R1,R6
   \   00000070   000000EA           B        ??GetRegisterValue_2
   \                     ??GetRegisterValue_4:
   \   00000074   081086E2           ADD      R1,R6,#+8
   \                     ??GetRegisterValue_2:
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000080   ........           LDR      R1,??DataTable8  ;; ??npos
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   003091E5           LDR      R3,[R1, #+0]
   \   0000008C   0010A0E1           MOV      R1,R0
   \                     ??GetRegisterValue_3:
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     ??assign,??assign??rA
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
    495              }
    496              return tmpStr;
   \   000000A8   1CD08DE2           ADD      SP,SP,#+28
   \   000000AC                      REQUIRE ?Subroutine17
   \   000000AC                      ;; // Fall through to label ?Subroutine17
    497          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0X	">`:
   \   00000000   307825305809       DC8 "0x%0X      "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Modbus Coil value">`:
   \   00000000   4D6F64627573       DC8 "Modbus Coil value"
   \              20436F696C20
   \              76616C756500
   \   00000012   0000               DC8 0, 0
   \   00000014   4D6F64627573       DC8 "ModbusCoilOut"
   \              436F696C4F75
   \              7400        
   \   00000022   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   65284C696E65       DC8 65H, 28H, 4CH, 69H, 6EH, 65H, 20H, 6EH
   \              206E        
   \   00000020   756D62657220       DC8 75H, 6DH, 62H, 65H, 72H, 20H, 25H, 69H
   \              2569        
   \   00000028   293A204D6F64       DC8 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000030   73436F696C4F       DC8 73H, 43H, 6FH, 69H, 6CH, 4FH, 75H, 74H
   \              7574        
   \   00000038   205265664944       DC8 20H, 52H, 65H, 66H, 49H, 44H, 4EH, 75H
   \              4E75        
   \   00000040   6D6265722025       DC8 6DH, 62H, 65H, 72H, 20H, 25H, 69H, 20H
   \              6920        
   \   00000048   283078253078       DC8 28H, 30H, 78H, 25H, 30H, 78H, 29H, 20H
   \              2920        
   \   00000050   697320696E63       DC8 69H, 73H, 20H, 69H, 6EH, 63H, 6FH, 72H
   \              6F72        
   \   00000058   7265637400         DC8 72H, 65H, 63H, 74H, 0
   \   0000005D   000000             DC8 0, 0, 0
   \   00000060   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 43H, 6FH
   \              436F        
   \   00000068   696C4F757420       DC8 69H, 6CH, 4FH, 75H, 74H, 20H, 52H, 65H
   \              5265        
   \   00000070   6649444E756D       DC8 66H, 49H, 44H, 4EH, 75H, 6DH, 62H, 65H
   \              6265        
   \   00000078   722025692028       DC8 72H, 20H, 25H, 69H, 20H, 28H, 30H, 78H
   \              3078        
   \   00000080   253078292069       DC8 25H, 30H, 78H, 29H, 20H, 69H, 73H, 20H
   \              7320        
   \   00000088   696E636F7272       DC8 69H, 6EH, 63H, 6FH, 72H, 72H, 65H, 63H
   \              6563        
   \   00000090   742E204C696E       DC8 74H, 2EH, 20H, 4CH, 69H, 6EH, 65H, 20H
   \              6520        
   \   00000098   4E756D626572       DC8 4EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   000000A0   6900               DC8 69H, 0
   \   000000A2   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Status">`:
   \   00000000   537461747573       DC8 "Status"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4F6E00             DC8 "On"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4F666600           DC8 "Off"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Active">`:
   \   00000000   416374697665       DC8 "Active"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   49646C6500         DC8 "Idle"
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoilOut &ModbusCoilOut::new ModbusCoilOut(bool)
   \                     `??new ModbusCoilOut`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   7C0FA0E3           MOV      R0,#+496
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusCoilOut_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusCoilOut
   \                     `??new ModbusCoilOut_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??npos
    498          
    499          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusCoilOut::GetAlarmOutputVal()
                                       48
     ModbusCoilOut::GetObjectId()       0
     ModbusCoilOut::GetOutputVal()      8
     ModbusCoilOut::GetRegisterType()
                                        4
     ModbusCoilOut::GetRegisterValue()
                                       44
     ModbusCoilOut::GetValueKey()       4
     ModbusCoilOut::LoadConfigString(TSNConfigString &)
                                      276
     ModbusCoilOut::MakeConfigString(int)
                                      676
     ModbusCoilOut::ModbusCoilOut(bool)
                                       28
     ModbusCoilOut::SetAlarmList()     44
     ModbusCoilOut::SetProList()      120
     ModbusCoilOut::Update()           24
     ModbusCoilOut::UpdateFromMultiple(unsigned int, int)
                                       36
     ModbusCoilOut::new ModbusCoilOut(bool)
                                        8
     ModbusCoilOut::operator=(ModbusCoilOut)
                                       32
     ModbusCoilOut::~ModbusCoilOut()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                       20
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                        4
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  12
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
                                     112
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                     224
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     ModbusCoilOut::ModbusSet         24
     ModbusCoilOut::ModbusCoilOut(bool)
                                     208
     ModbusCoilOut::~ModbusCoilOut()
                                     116
     ?Subroutine17                    20
     ModbusCoilOut::MakeConfigString(int)
                                    1344
     ModbusCoilOut::LoadConfigString(TSNConfigString &)
                                    1500
     ModbusCoilOut::SetAlarmList()   528
     ModbusCoilOut::SetProList()     464
     ModbusCoilOut::GetOutputVal()    64
     ModbusCoilOut::GetAlarmOutputVal()
                                     408
     ModbusCoilOut::Update()         308
     ModbusCoilOut::operator=(ModbusCoilOut)
                                     312
     ModbusCoilOut::UpdateFromMultiple(unsigned int, int)
                                     128
     ModbusCoilOut::GetObjectId()     44
     ModbusCoilOut::GetValueKey()     48
     ?Subroutine18                    12
     ModbusCoilOut::GetRegisterType()
                                      16
     ModbusCoilOut::GetRegisterValue()
                                     172
     ?<Constant "0x%0X	">              8
     ?<Constant "Modbus Coil value">
                                      36
     ?<Constant "Created by ModbusMult...">
                                     164
     ?<Constant " ">                   2
     ?<Constant "Status">              8
     ?<Constant "On">                  3
     ?<Constant "Off">                 4
     ?<Constant "Active">             16
     __sti__routine()                 56
     ModbusCoilOut::new ModbusCoilOut(bool)
                                      40
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable8                      4
      Others                        1148

 
 11 472 bytes in segment CODE
    413 bytes in segment DATA_C
     28 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 5 808 bytes of CODE  memory (+ 5 680 bytes shared)
   413 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
