##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLowLevel.Cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLowLevel.Cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLowLevel.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLowLevel.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLowLevel.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_2  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_2:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowLevel::~AlarmLowLevel()
   \                     `?~AlarmLowLevel`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLowLevel_1`
   \   00000014   0100000A           BEQ      `?~AlarmLowLevel_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLowLevel_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLowLevel_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLowLevel_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLowLevel::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLowLevel::AlarmLowLevel(PRogramObjectBase *PROPtr, float Lim, bool Lock):AlarmBasic(PROPtr) {
   \                     ??AlarmLowLevel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   CC009FE5           LDR      R0,??AlarmLowLevel_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     12              PROPointer 	= PROPtr;
   \   00000020   C45084E5           STR      R5,[R4, #+196]
     13              PROTankPtr 	= (PROTank *)PROPtr;
   \   00000024   EC5084E5           STR      R5,[R4, #+236]
     14              Locked 		= Lock;
   \   00000028   E870C4E5           STRB     R7,[R4, #+232]
     15              Limit 		= Lim;
   \   0000002C   E46084E5           STR      R6,[R4, #+228]
     16              if (PROTankPtr->LevVolumeTab) {
   \   00000030   901395E5           LDR      R1,[R5, #+912]
   \   00000034   000051E3           CMP      R1,#+0
     17                  LevVolumeTab = PROTankPtr->LevVolumeTab;
   \   00000038   0100A011           MOVNE    R0,R1
     18                  UllVolumeTab = NULL;
   \   0000003C   0010A013           MOVNE    R1,#+0
     19                  VolumeTab    = LevVolumeTab;
   \   00000040   0400001A           BNE      ??AlarmLowLevel_2
     20              } else if (PROTankPtr->UllVolumeTab) {
   \   00000044   941395E5           LDR      R1,[R5, #+916]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   000051E3           CMP      R1,#+0
     21                  UllVolumeTab = PROTankPtr->UllVolumeTab;
     22                  LevVolumeTab = NULL;
     23                  VolumeTab    = UllVolumeTab;
   \   00000050   0120A011           MOVNE    R2,R1
   \   00000054   0000001A           BNE      ??AlarmLowLevel_3
     24              } else {
     25                  UllVolumeTab = NULL;
     26                  LevVolumeTab = NULL;
     27                  VolumeTab    = NULL;
   \                     ??AlarmLowLevel_2:
   \   00000058   0020A0E1           MOV      R2,R0
   \                     ??AlarmLowLevel_3:
   \   0000005C   F81084E5           STR      R1,[R4, #+248]
   \   00000060   F40084E5           STR      R0,[R4, #+244]
   \   00000064   F02084E5           STR      R2,[R4, #+240]
     28              }
     29              if (VolumeTab) {
   \   00000068   000052E3           CMP      R2,#+0
     30                  LimitType = AL_LIM_VOLPERCENT;
   \   0000006C   B610A013           MOVNE    R1,#+182
   \   00000070   D01E8113           ORRNE    R1,R1,#0xD00
     31                  OnlyLevel = false;
   \   00000074   0020A013           MOVNE    R2,#+0
     32              } else {
     33                  LimitType = AL_LIM_LEVEL;
   \   00000078   B710A003           MOVEQ    R1,#+183
   \   0000007C   D01E8103           ORREQ    R1,R1,#0xD00
     34                  OnlyLevel = true;
   \   00000080   0120A003           MOVEQ    R2,#+1
   \   00000084   0021C4E5           STRB     R2,[R4, #+256]
   \   00000088   FC1084E5           STR      R1,[R4, #+252]
     35              }
     36              NumberOfAlarmSettings++;
   \   0000008C   5C109FE5           LDR      R1,??AlarmLowLevel_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   002091E5           LDR      R2,[R1, #+0]
   \   00000098   012082E2           ADD      R2,R2,#+1
   \   0000009C   002081E5           STR      R2,[R1, #+0]
     37              IDNumber =  (ID_AL_LOW_LEVEL << 16) + NumberOfAlarmSettings;
   \   000000A0   8016A0E3           MOV      R1,#+134217728
   \   000000A4   F11781E3           ORR      R1,R1,#0x3C40000
   \   000000A8   021081E0           ADD      R1,R1,R2
   \   000000AC   9C1084E5           STR      R1,[R4, #+156]
     38              Type = ID_AL_LOW_LEVEL;
   \   000000B0   C410A0E3           MOV      R1,#+196
   \   000000B4   B01E81E3           ORR      R1,R1,#0xB00
   \   000000B8   A01084E5           STR      R1,[R4, #+160]
     39              if (!Locked) {
   \   000000BC   E810D4E5           LDRB     R1,[R4, #+232]
   \   000000C0   000051E3           CMP      R1,#+0
     40                  Enable = false; // EHSMark
   \   000000C4   E200C405           STRBEQ   R0,[R4, #+226]
     41              }
     42              Deadband = 0.1;
   \   000000C8   24009FE5           LDR      R0,??AlarmLowLevel_1+0x8  ;; 0x3dcccccd
   \   000000CC   BC0084E5           STR      R0,[R4, #+188]
     43              MessageKey      = L_WORD518;    // LowLevel
   \   000000D0   0600A0E3           MOV      R0,#+6
   \   000000D4   800F80E3           ORR      R0,R0,#0x200
   \   000000D8   B80084E5           STR      R0,[R4, #+184]
     44              TPCMessageKey   = L_WORD519;    // LLev
   \   000000DC   010080E3           ORR      R0,R0,#0x1
   \   000000E0   B40084E5           STR      R0,[R4, #+180]
     45          }
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           B        ?Subroutine8
   \                     ??AlarmLowLevel_1:
   \   000000EC   ........           DC32     ??__vtbl
   \   000000F0   ........           DC32     ??NumberOfAlarmSettings
   \   000000F4   CDCCCC3D           DC32     0x3dcccccd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine8_0:
   \   00000008   ........           DC32     ??AlarmOffDelay
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          void AlarmLowLevel::Check(void) {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     48              int Status = AL_STAT_IN_DEADBAND;
     49              if (PROTankPtr->HasLevelSensors) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   3212D0E5           LDRB     R1,[R0, #+562]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   1200000A           BEQ      ??Check_1
     50                  float Val;
     51                  if (VolumeTab) {
   \   0000001C   F01094E5           LDR      R1,[R4, #+240]
     52                      Val = PROTankPtr->VolumePercent;
     53                  } else {
     54                      Val = PROTankPtr->Level;
     55                  }
     56                  if (Val > Limit + Deadband) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   B8629015           LDRNE    R6,[R0, #+696]
   \   0000002C   0710A0E1           MOV      R1,R7
   \   00000030   A4629005           LDREQ    R6,[R0, #+676]
   \   00000034   BC0094E5           LDR      R0,[R4, #+188]
   \   00000038   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   ........           _BLF     __fLess,??__fLess??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0C00001A           BNE      ??Check_2
     57                      Status = AL_STAT_IN_NORMAL;
     58                  } else if (Val <= Limit) {
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0800000A           BEQ      ??Check_3
     59                      Status = AL_STAT_IN_ALARM;
   \   00000060   0150A0E3           MOV      R5,#+1
   \   00000064   060000EA           B        ??Check_3
     60                  }
     61              } else if (TSNElapsedTicks(LastActiveTime) > PROSystemData::AlarmOffDelay) {
   \                     ??Check_1:
   \   00000068   C00094E5           LDR      R0,[R4, #+192]
   \   0000006C   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000070   ........           LDR      R1,??Subroutine8_0  ;; ??AlarmOffDelay
   \   00000074   001091E5           LDR      R1,[R1, #+0]
   \   00000078   000051E1           CMP      R1,R0
   \   0000007C   000000AA           BGE      ??Check_3
     62                  Status = AL_STAT_IN_NORMAL;
   \                     ??Check_2:
   \   00000080   0050A0E3           MOV      R5,#+0
     63              }
     64              UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     65          }
   \   00000090                      REQUIRE ?Subroutine8
   \   00000090                      ;; // Fall through to label ?Subroutine8
     66          
     67          ///////////////////////////////////////////////////////////////
     68          //
     69          // Routines for the librarian
     70          //
     71          ///////////////////////////////////////////////////////////////
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          int AlarmLowLevel::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   94D04DE2           SUB      SP,SP,#+148
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   B8A0DDE5           LDRB     R10,[SP, #+184]
   \   00000010   BC409DE5           LDR      R4,[SP, #+188]
   \   00000014   0180A0E1           MOV      R8,R1
     74              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     75              if (Locked) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0290A0E1           MOV      R9,R2
   \   0000002C   0370A0E1           MOV      R7,R3
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0200000A           BEQ      ??PutValue_8
     76                  Status = E_NO_INPUT_PERMISSION;
   \   00000038   2A10A0E3           MOV      R1,#+42
   \                     ??PutValue_9:
   \   0000003C   00108DE5           STR      R1,[SP, #+0]
   \   00000040   A80100EA           B        ??PutValue_10
     77              } else {
     78                  float OrgLimit = Limit;
   \                     ??PutValue_8:
   \   00000044   E46095E5           LDR      R6,[R5, #+228]
     79                  int Key = FindConfigKey(NewValue);
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   78008DE2           ADD      R0,SP,#+120
   \   00000050   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000054   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000058   00B0A0E1           MOV      R11,R0
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   78008DE2           ADD      R0,SP,#+120
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
     80                  switch (Key) {
   \   0000006C   64B04BE2           SUB      R11,R11,#+100
   \   00000070   05005BE3           CMP      R11,#+5
   \   00000074   1100008A           BHI      ??PutValue_11
   \   00000078   010F8FE2           ADR      R0,??PutValue_1
   \   0000007C   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000080   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000084   010C010C           DC8      +1,+12,+1,+12
   \   00000088   010C0000           DC8      +1,+12,+0,+0
     81                  case C_ON:
     82                  case C_OPEN:
     83                  case C_ENABLE:
     84                      SetEnable(EnableTrue);
   \                     ??PutValue_12:
   \   0000008C   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_13:
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   ........           _BLF     ??SetEnable,??SetEnable??rA
     85                      PROTankPtr->SetState(tUndefined);
   \   00000098   EC2095E5           LDR      R2,[R5, #+236]
   \   0000009C   0410A0E3           MOV      R1,#+4
   \   000000A0   0200A0E1           MOV      R0,R2
   \   000000A4   A42092E5           LDR      R2,[R2, #+164]
   \   000000A8   7C2092E5           LDR      R2,[R2, #+124]
   \   000000AC   0FE0A0E1           MOV      LR,PC
   \   000000B0   12FF2FE1           BX       R2
   \   000000B4   740100EA           B        ??PutValue_14
     86                      break;
     87                  case C_OFF:
     88                  case C_CLOSE:
     89                  case C_DISABLE:
     90                      SetEnable(EnableFalse);
   \                     ??PutValue_15:
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   F3FFFFEA           B        ??PutValue_13
     91                      PROTankPtr->SetState(tUndefined);
     92                      break;
     93                  default:
     94                      switch (ValueId) {
   \                     ??PutValue_11:
   \   000000C0   0011D5E5           LDRB     R1,[R5, #+256]
   \   000000C4   FC0095E5           LDR      R0,[R5, #+252]
   \   000000C8   3230A0E3           MOV      R3,#+50
   \   000000CC   8C3D83E3           ORR      R3,R3,#0x2300
   \   000000D0   030058E1           CMP      R8,R3
   \   000000D4   2500000A           BEQ      ??PutValue_16
   \   000000D8   913083E2           ADD      R3,R3,#+145
   \   000000DC   030058E1           CMP      R8,R3
   \   000000E0   0F00000A           BEQ      ??PutValue_17
   \   000000E4   353083E2           ADD      R3,R3,#+53
   \   000000E8   030058E1           CMP      R8,R3
   \   000000EC   4F00000A           BEQ      ??PutValue_18
   \   000000F0   013083E3           ORR      R3,R3,#0x1
   \   000000F4   030058E1           CMP      R8,R3
   \   000000F8   6E00000A           BEQ      ??PutValue_19
   \   000000FC   013083E2           ADD      R3,R3,#+1
   \   00000100   030058E1           CMP      R8,R3
   \   00000104   9E00000A           BEQ      ??PutValue_20
   \   00000108   013083E3           ORR      R3,R3,#0x1
   \   0000010C   030058E1           CMP      R8,R3
   \   00000110   CC00000A           BEQ      ??PutValue_21
   \   00000114   013083E2           ADD      R3,R3,#+1
   \   00000118   030058E1           CMP      R8,R3
   \   0000011C   FE00000A           BEQ      ??PutValue_22
   \   00000120   480100EA           B        ??PutValue_23
     95                      case SVT_AL_LIMIT_TYPE_LEV:
     96                          if (!OnlyLevel) {
   \                     ??PutValue_17:
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   0E00001A           BNE      ??PutValue_24
     97                              int Value = GetInt(NewValue, Status);
   \   0000012C   0710A0E1           MOV      R1,R7
   \   00000130   08008DE2           ADD      R0,SP,#+8
   \   00000134   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000138   0D10A0E1           MOV      R1,SP
   \   0000013C   ........           _BLF     ??GetInt,??GetInt??rA
   \   00000140   0070A0E1           MOV      R7,R0
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   08008DE2           ADD      R0,SP,#+8
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
     98                              if (Status == E_NO_ERR) {
   \   00000154   00009DE5           LDR      R0,[SP, #+0]
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   4A01001A           BNE      ??PutValue_14
     99                                  LimitType = Value;
   \   00000160   FC7085E5           STR      R7,[R5, #+252]
   \   00000164   480100EA           B        ??PutValue_14
    100                              }
    101                          } else {
    102                              Status = E_ILLEGAL;
   \                     ??PutValue_24:
   \   00000168   0C10A0E3           MOV      R1,#+12
   \   0000016C   B2FFFFEA           B        ??PutValue_9
    103                          }
    104                          break;
    105                      case SVT_AL_LIMIT:
    106                          if (OnlyLevel) {
   \                     ??PutValue_16:
   \   00000170   000051E3           CMP      R1,#+0
   \   00000174   1B00000A           BEQ      ??PutValue_25
    107                              Limit = ConvertToSi(NewValue, ValUnitId = LENGTH_UNIT, Status, 0.0, PROTankPtr->DBotUllRefPnt, Limit);
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   04108DE5           STR      R1,[SP, #+4]
   \   00000180   0710A0E1           MOV      R1,R7
   \   00000184   08008DE2           ADD      R0,SP,#+8
   \   00000188   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000018C   0070A0E1           MOV      R7,R0
   \   00000190   E40095E5           LDR      R0,[R5, #+228]
   \   00000194   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000198   03002DE9           PUSH     {R0,R1}
   \   0000019C   EC0095E5           LDR      R0,[R5, #+236]
   \   000001A0   500290E5           LDR      R0,[R0, #+592]
   \   000001A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001A8   03002DE9           PUSH     {R0,R1}
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   03002DE9           PUSH     {R0,R1}
   \   000001B8   18208DE2           ADD      R2,SP,#+24
   \   000001BC   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_26:
   \   000001C0   0800BDE8           POP      {R3}
   \   000001C4   0700A0E1           MOV      R0,R7
   \   000001C8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000001CC   E40085E5           STR      R0,[R5, #+228]
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   1C008DE2           ADD      R0,SP,#+28
   \                     ??PutValue_27:
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E0   14D08DE2           ADD      SP,SP,#+20
   \   000001E4   280100EA           B        ??PutValue_14
    108                          } else {
    109                              Limit = ConvertToSi(NewValue, ValUnitId = PERCENT_UNIT, Status, 0.0, 100.0, Limit);
   \                     ??PutValue_25:
   \   000001E8   1010A0E3           MOV      R1,#+16
   \   000001EC   04108DE5           STR      R1,[SP, #+4]
   \   000001F0   0710A0E1           MOV      R1,R7
   \   000001F4   08008DE2           ADD      R0,SP,#+8
   \   000001F8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001FC   0070A0E1           MOV      R7,R0
   \   00000200   E40095E5           LDR      R0,[R5, #+228]
   \   00000204   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000208   03002DE9           PUSH     {R0,R1}
   \   0000020C   0000A0E3           MOV      R0,#+0
   \   00000210   4014A0E3           MOV      R1,#+1073741824
   \   00000214   591881E3           ORR      R1,R1,#0x590000
   \   00000218   03002DE9           PUSH     {R0,R1}
   \   0000021C   0010A0E3           MOV      R1,#+0
   \   00000220   03002DE9           PUSH     {R0,R1}
   \   00000224   18208DE2           ADD      R2,SP,#+24
   \   00000228   1010A0E3           MOV      R1,#+16
   \   0000022C   E3FFFFEA           B        ??PutValue_26
    110                          }
    111                          break;
    112                      case SVT_LO_VOLPCNT_LIM:
    113                          switch (LimitType) {
   \                     ??PutValue_18:
   \   00000230   B60040E2           SUB      R0,R0,#+182
   \   00000234   D00E40E2           SUB      R0,R0,#+3328
   \   00000238   010050E3           CMP      R0,#+1
   \   0000023C   1201008A           BHI      ??PutValue_14
   \   00000240   021F8FE2           ADR      R1,??PutValue_2
   \   00000244   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000248   F01091E1           LDRSH    R1,[R1, R0]
   \   0000024C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_2:
   \   00000250   0000C5FF           DC16     +0,+65477
    114                          case AL_LIM_VOLPERCENT:
    115                              Limit = ConvertToSi(NewValue, ValUnitId = PERCENT_UNIT, Status, 0.0, 100.0, Limit);
   \                     ??PutValue_28:
   \   00000254   1010A0E3           MOV      R1,#+16
   \   00000258   04108DE5           STR      R1,[SP, #+4]
   \   0000025C   0710A0E1           MOV      R1,R7
   \   00000260   24008DE2           ADD      R0,SP,#+36
   \   00000264   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000268   0070A0E1           MOV      R7,R0
   \   0000026C   E40095E5           LDR      R0,[R5, #+228]
   \   00000270   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000274   03002DE9           PUSH     {R0,R1}
   \   00000278   0000A0E3           MOV      R0,#+0
   \   0000027C   4014A0E3           MOV      R1,#+1073741824
   \   00000280   591881E3           ORR      R1,R1,#0x590000
   \   00000284   03002DE9           PUSH     {R0,R1}
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   03002DE9           PUSH     {R0,R1}
   \   00000290   18208DE2           ADD      R2,SP,#+24
   \   00000294   0800BDE8           POP      {R3}
   \   00000298   1010A0E3           MOV      R1,#+16
   \   0000029C   0700A0E1           MOV      R0,R7
   \   000002A0   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000002A4   E40085E5           STR      R0,[R5, #+228]
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   38008DE2           ADD      R0,SP,#+56
   \   000002B4   C8FFFFEA           B        ??PutValue_27
    116                              break;
    117                          case AL_LIM_LEVEL     :
    118                              Status = E_ILLEGAL;
    119                              break;
    120                          }
    121                          break;
    122                      case SVT_LO_VOLUME_LIM :
    123                          switch (LimitType) {
   \                     ??PutValue_19:
   \   000002B8   B60040E2           SUB      R0,R0,#+182
   \   000002BC   D00E40E2           SUB      R0,R0,#+3328
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   F000008A           BHI      ??PutValue_14
   \   000002C8   021F8FE2           ADR      R1,??PutValue_3
   \   000002CC   8000A0E1           MOV      R0,R0, LSL #+1
   \   000002D0   F01091E1           LDRSH    R1,[R1, R0]
   \   000002D4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_3:
   \   000002D8   0000A3FF           DC16     +0,+65443
    124                          case AL_LIM_VOLPERCENT:
    125                              {
    126                                  float MaxVolume = VolumeTab->MaxY;
   \                     ??PutValue_29:
   \   000002DC   F00095E5           LDR      R0,[R5, #+240]
    127                                  float NewLimit = ConvertToSi(NewValue, ValUnitId = VOLUME_UNIT, Status, 0.0, MaxVolume, 0.0);
   \   000002E0   0210A0E3           MOV      R1,#+2
   \   000002E4   188090E5           LDR      R8,[R0, #+24]
   \   000002E8   04108DE5           STR      R1,[SP, #+4]
   \   000002EC   0710A0E1           MOV      R1,R7
   \   000002F0   08008DE2           ADD      R0,SP,#+8
   \   000002F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000002F8   0070A0E1           MOV      R7,R0
   \   000002FC   0000A0E3           MOV      R0,#+0
   \   00000300   0010A0E3           MOV      R1,#+0
   \   00000304   03002DE9           PUSH     {R0,R1}
   \   00000308   0800A0E1           MOV      R0,R8
   \   0000030C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000310   03002DE9           PUSH     {R0,R1}
   \   00000314   0000A0E3           MOV      R0,#+0
   \   00000318   0010A0E1           MOV      R1,R0
   \   0000031C   03002DE9           PUSH     {R0,R1}
   \   00000320   18208DE2           ADD      R2,SP,#+24
   \   00000324   0800BDE8           POP      {R3}
   \   00000328   0210A0E3           MOV      R1,#+2
   \   0000032C   0700A0E1           MOV      R0,R7
   \   00000330   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000334   0070A0E1           MOV      R7,R0
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   1C008DE2           ADD      R0,SP,#+28
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
    128                                  if (Status == E_NO_ERR) {
   \   00000348   14009DE5           LDR      R0,[SP, #+20]
   \   0000034C   14D08DE2           ADD      SP,SP,#+20
   \   00000350   000050E3           CMP      R0,#+0
   \   00000354   CC00001A           BNE      ??PutValue_14
    129                                      Limit = NewLimit / MaxVolume * 100.0;
   \   00000358   0700A0E1           MOV      R0,R7
   \                     ??PutValue_30:
   \   0000035C   0810A0E1           MOV      R1,R8
   \   00000360   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000364   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   4034A0E3           MOV      R3,#+1073741824
   \   00000370   593883E3           ORR      R3,R3,#0x590000
   \   00000374   ........           _BLF     __dMul,??__dMul??rA
   \   00000378   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000037C   E40085E5           STR      R0,[R5, #+228]
   \   00000380   C40000EA           B        ??PutValue_31
    130                                  }
    131                              }
    132                              break;
    133                          case AL_LIM_LEVEL     :
    134                              Status = E_ILLEGAL;
    135                              break;
    136                          }
    137                          break;
    138                      case SVT_LO_WEIGHT_LIM :
    139                          switch (LimitType) {
   \                     ??PutValue_20:
   \   00000384   B60040E2           SUB      R0,R0,#+182
   \   00000388   D00E40E2           SUB      R0,R0,#+3328
   \   0000038C   010050E3           CMP      R0,#+1
   \   00000390   BD00008A           BHI      ??PutValue_14
   \   00000394   021F8FE2           ADR      R1,??PutValue_4
   \   00000398   8000A0E1           MOV      R0,R0, LSL #+1
   \   0000039C   F01091E1           LDRSH    R1,[R1, R0]
   \   000003A0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_4:
   \   000003A4   000070FF           DC16     +0,+65392
    140                          case AL_LIM_VOLPERCENT:
    141                              {
    142                                  float MaxWeight = VolumeTab->MaxY * PROTankPtr->Density;
   \                     ??PutValue_32:
   \   000003A8   F00095E5           LDR      R0,[R5, #+240]
   \   000003AC   181090E5           LDR      R1,[R0, #+24]
   \   000003B0   EC0095E5           LDR      R0,[R5, #+236]
   \   000003B4   940290E5           LDR      R0,[R0, #+660]
   \   000003B8   ........           _BLF     __fMul,??__fMul??rA
   \   000003BC   0080A0E1           MOV      R8,R0
    143                                  float NewLimit = ConvertToSi(NewValue, ValUnitId = WEIGHT_UNIT, Status, 0.0, MaxWeight, 0.0);
   \   000003C0   0310A0E3           MOV      R1,#+3
   \   000003C4   04108DE5           STR      R1,[SP, #+4]
   \   000003C8   0710A0E1           MOV      R1,R7
   \   000003CC   08008DE2           ADD      R0,SP,#+8
   \   000003D0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000003D4   0070A0E1           MOV      R7,R0
   \   000003D8   0000A0E3           MOV      R0,#+0
   \   000003DC   0010A0E3           MOV      R1,#+0
   \   000003E0   03002DE9           PUSH     {R0,R1}
   \   000003E4   0800A0E1           MOV      R0,R8
   \   000003E8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003EC   03002DE9           PUSH     {R0,R1}
   \   000003F0   0000A0E3           MOV      R0,#+0
   \   000003F4   0010A0E1           MOV      R1,R0
   \   000003F8   03002DE9           PUSH     {R0,R1}
   \   000003FC   18208DE2           ADD      R2,SP,#+24
   \   00000400   0800BDE8           POP      {R3}
   \   00000404   0310A0E3           MOV      R1,#+3
   \   00000408   0700A0E1           MOV      R0,R7
   \   0000040C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000410   0070A0E1           MOV      R7,R0
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   1C008DE2           ADD      R0,SP,#+28
   \   00000420   ........           _BLF     ??_Tidy,??_Tidy??rA
    144                                  NewLimit = CorrectToWeightInVacuum(NewLimit, PROTankPtr->Density);
   \   00000424   EC0095E5           LDR      R0,[R5, #+236]
   \   00000428   941290E5           LDR      R1,[R0, #+660]
   \   0000042C   0700A0E1           MOV      R0,R7
   \   00000430   ........           _BLF     ??CorrectToWeightInVacuum,??CorrectToWeightInVacuum??rA
    145                                  if (Status == E_NO_ERR) {
   \   00000434   14109DE5           LDR      R1,[SP, #+20]
   \   00000438   14D08DE2           ADD      SP,SP,#+20
   \   0000043C   000051E3           CMP      R1,#+0
   \   00000440   9100001A           BNE      ??PutValue_14
    146                                      Limit = NewLimit / MaxWeight * 100.0;
   \   00000444   C4FFFFEA           B        ??PutValue_30
    147                                  }
    148                              }
    149                              break;
    150                          case AL_LIM_LEVEL     :
    151                              Status = E_ILLEGAL;
    152                              break;
    153                          }
    154                          break;
    155                      case SVT_LO_ULLAGE_LIM :
    156                          switch (LimitType) {
   \                     ??PutValue_21:
   \   00000448   B60040E2           SUB      R0,R0,#+182
   \   0000044C   D00E40E2           SUB      R0,R0,#+3328
   \   00000450   010050E3           CMP      R0,#+1
   \   00000454   8C00008A           BHI      ??PutValue_14
   \   00000458   021F8FE2           ADR      R1,??PutValue_5
   \   0000045C   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000460   F01091E1           LDRSH    R1,[R1, R0]
   \   00000464   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_5:
   \   00000468   00003FFF           DC16     +0,+65343
    157                          case AL_LIM_VOLPERCENT:
    158                              {
    159                                  float NewLimit = ConvertToSi(NewValue, ValUnitId = LENGTH_UNIT, Status, 0.0, PROTankPtr->DBotUllRefPnt, 0.0);
   \                     ??PutValue_33:
   \   0000046C   0110A0E3           MOV      R1,#+1
   \   00000470   04108DE5           STR      R1,[SP, #+4]
   \   00000474   0710A0E1           MOV      R1,R7
   \   00000478   08008DE2           ADD      R0,SP,#+8
   \   0000047C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000480   0070A0E1           MOV      R7,R0
   \   00000484   0000A0E3           MOV      R0,#+0
   \   00000488   0010A0E3           MOV      R1,#+0
   \   0000048C   03002DE9           PUSH     {R0,R1}
   \   00000490   EC0095E5           LDR      R0,[R5, #+236]
   \   00000494   500290E5           LDR      R0,[R0, #+592]
   \   00000498   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000049C   03002DE9           PUSH     {R0,R1}
   \   000004A0   0000A0E3           MOV      R0,#+0
   \   000004A4   0010A0E1           MOV      R1,R0
   \   000004A8   03002DE9           PUSH     {R0,R1}
   \   000004AC   18208DE2           ADD      R2,SP,#+24
   \   000004B0   0800BDE8           POP      {R3}
   \   000004B4   0110A0E3           MOV      R1,#+1
   \   000004B8   0700A0E1           MOV      R0,R7
   \   000004BC   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000004C0   0070A0E1           MOV      R7,R0
   \   000004C4   0020A0E3           MOV      R2,#+0
   \   000004C8   0110A0E3           MOV      R1,#+1
   \   000004CC   1C008DE2           ADD      R0,SP,#+28
   \   000004D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    160                                  if (Status == E_NO_ERR) {
   \   000004D4   14009DE5           LDR      R0,[SP, #+20]
   \   000004D8   14D08DE2           ADD      SP,SP,#+20
   \   000004DC   000050E3           CMP      R0,#+0
   \   000004E0   6900001A           BNE      ??PutValue_14
    161                                      if (UllVolumeTab) {
   \   000004E4   F80095E5           LDR      R0,[R5, #+248]
   \   000004E8   000050E3           CMP      R0,#+0
   \   000004EC   0300000A           BEQ      ??PutValue_34
    162                                          Limit = UllVolumeTab->Calc_YPercent(NewLimit);
   \   000004F0   0710A0E1           MOV      R1,R7
   \                     ??PutValue_35:
   \   000004F4   ........           _BLF     ??Calc_YPercent,??Calc_YPercent??rA
   \   000004F8   E40085E5           STR      R0,[R5, #+228]
   \   000004FC   620000EA           B        ??PutValue_14
    163                                      } else {
    164                                          float Level = PROTankPtr->DBotUllRefPnt - NewLimit;
    165                                          Limit = LevVolumeTab->Calc_YPercent(Level);
   \                     ??PutValue_34:
   \   00000500   EC0095E5           LDR      R0,[R5, #+236]
   \   00000504   0710A0E1           MOV      R1,R7
   \   00000508   500290E5           LDR      R0,[R0, #+592]
   \   0000050C   ........           _BLF     __fSub,??__fSub??rA
   \   00000510   0010A0E1           MOV      R1,R0
   \   00000514   F40095E5           LDR      R0,[R5, #+244]
   \   00000518   F5FFFFEA           B        ??PutValue_35
    166                                      }
    167                                  }
    168                              }
    169                              break;
    170                          case AL_LIM_LEVEL     :
    171                              Status = E_ILLEGAL;
    172                              break;
    173                          }
    174                          break;
    175                      case SVT_LO_LEVEL_LIM  :
    176                          switch (LimitType) {
   \                     ??PutValue_22:
   \   0000051C   B60040E2           SUB      R0,R0,#+182
   \   00000520   D00E40E2           SUB      R0,R0,#+3328
   \   00000524   010050E3           CMP      R0,#+1
   \   00000528   5700008A           BHI      ??PutValue_14
   \   0000052C   011F8FE2           ADR      R1,??PutValue_6
   \   00000530   0010D1E7           LDRB     R1,[R1, R0]
   \   00000534   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_6:
   \   00000538   00290000           DC8      +0,+41,+0,+0
    177                          case AL_LIM_VOLPERCENT:
    178                              {
    179                                  float NewLimit = ConvertToSi(NewValue, LENGTH_UNIT, Status, 0.0, PROTankPtr->DBotUllRefPnt, 0.0);
   \                     ??PutValue_36:
   \   0000053C   0710A0E1           MOV      R1,R7
   \   00000540   08008DE2           ADD      R0,SP,#+8
   \   00000544   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000548   0070A0E1           MOV      R7,R0
   \   0000054C   0000A0E3           MOV      R0,#+0
   \   00000550   0010A0E3           MOV      R1,#+0
   \   00000554   03002DE9           PUSH     {R0,R1}
   \   00000558   EC0095E5           LDR      R0,[R5, #+236]
   \   0000055C   500290E5           LDR      R0,[R0, #+592]
   \   00000560   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000564   03002DE9           PUSH     {R0,R1}
   \   00000568   0000A0E3           MOV      R0,#+0
   \   0000056C   0010A0E1           MOV      R1,R0
   \   00000570   03002DE9           PUSH     {R0,R1}
   \   00000574   18208DE2           ADD      R2,SP,#+24
   \   00000578   0800BDE8           POP      {R3}
   \   0000057C   0110A0E3           MOV      R1,#+1
   \   00000580   0700A0E1           MOV      R0,R7
   \   00000584   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000588   0070A0E1           MOV      R7,R0
   \   0000058C   0020A0E3           MOV      R2,#+0
   \   00000590   0110A0E3           MOV      R1,#+1
   \   00000594   1C008DE2           ADD      R0,SP,#+28
   \   00000598   ........           _BLF     ??_Tidy,??_Tidy??rA
    180                                  if (Status == E_NO_ERR) {
   \   0000059C   14009DE5           LDR      R0,[SP, #+20]
   \   000005A0   14D08DE2           ADD      SP,SP,#+20
   \   000005A4   000050E3           CMP      R0,#+0
   \   000005A8   3700001A           BNE      ??PutValue_14
    181                                      if (UllVolumeTab) {
   \   000005AC   F88095E5           LDR      R8,[R5, #+248]
   \   000005B0   000058E3           CMP      R8,#+0
   \   000005B4   0600000A           BEQ      ??PutValue_37
    182                                          float UllageRef = PROTankPtr->DBotUllRefPnt - NewLimit;
    183                                          Limit = UllVolumeTab->Calc_YPercent(UllageRef);
   \   000005B8   EC0095E5           LDR      R0,[R5, #+236]
   \   000005BC   0710A0E1           MOV      R1,R7
   \   000005C0   500290E5           LDR      R0,[R0, #+592]
   \   000005C4   ........           _BLF     __fSub,??__fSub??rA
   \   000005C8   0010A0E1           MOV      R1,R0
   \   000005CC   0800A0E1           MOV      R0,R8
   \   000005D0   C7FFFFEA           B        ??PutValue_35
    184                                      } else {
    185                                          Limit = LevVolumeTab->Calc_YPercent(NewLimit);
   \                     ??PutValue_37:
   \   000005D4   F40095E5           LDR      R0,[R5, #+244]
   \   000005D8   0710A0E1           MOV      R1,R7
   \   000005DC   C4FFFFEA           B        ??PutValue_35
    186                                      }
    187                                  }
    188                              }
    189                              break;
    190                          case AL_LIM_LEVEL     :
    191                              Limit = ConvertToSi(NewValue, ValUnitId = LENGTH_UNIT, Status, 0.0, PROTankPtr->DBotUllRefPnt, Limit);
   \                     ??PutValue_38:
   \   000005E0   0110A0E3           MOV      R1,#+1
   \   000005E4   04108DE5           STR      R1,[SP, #+4]
   \   000005E8   0710A0E1           MOV      R1,R7
   \   000005EC   40008DE2           ADD      R0,SP,#+64
   \   000005F0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000005F4   0070A0E1           MOV      R7,R0
   \   000005F8   E40095E5           LDR      R0,[R5, #+228]
   \   000005FC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000600   03002DE9           PUSH     {R0,R1}
   \   00000604   EC0095E5           LDR      R0,[R5, #+236]
   \   00000608   500290E5           LDR      R0,[R0, #+592]
   \   0000060C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000610   03002DE9           PUSH     {R0,R1}
   \   00000614   0000A0E3           MOV      R0,#+0
   \   00000618   0010A0E3           MOV      R1,#+0
   \   0000061C   03002DE9           PUSH     {R0,R1}
   \   00000620   18208DE2           ADD      R2,SP,#+24
   \   00000624   0800BDE8           POP      {R3}
   \   00000628   0110A0E3           MOV      R1,#+1
   \   0000062C   0700A0E1           MOV      R0,R7
   \   00000630   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000634   E40085E5           STR      R0,[R5, #+228]
   \   00000638   0020A0E3           MOV      R2,#+0
   \   0000063C   0110A0E3           MOV      R1,#+1
   \   00000640   54008DE2           ADD      R0,SP,#+84
   \   00000644   E4FEFFEA           B        ??PutValue_27
    192                              break;
    193                          }
    194                          break;
    195                      default:
    196                          Status = AlarmBasic::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_23:
   \   00000648   0710A0E1           MOV      R1,R7
   \   0000064C   5C008DE2           ADD      R0,SP,#+92
   \   00000650   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000654   0030A0E1           MOV      R3,R0
   \   00000658   04008DE2           ADD      R0,SP,#+4
   \   0000065C   01002DE9           PUSH     {R0}
   \   00000660   00042DE9           PUSH     {R10}
   \   00000664   0920A0E1           MOV      R2,R9
   \   00000668   0810A0E1           MOV      R1,R8
   \   0000066C   0500A0E1           MOV      R0,R5
   \   00000670   ........           _BLF     ??PutValue_7,??PutValue??rA
   \   00000674   08008DE5           STR      R0,[SP, #+8]
   \   00000678   0020A0E3           MOV      R2,#+0
   \   0000067C   0110A0E3           MOV      R1,#+1
   \   00000680   64008DE2           ADD      R0,SP,#+100
   \   00000684   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000688   08D08DE2           ADD      SP,SP,#+8
    197                          break;
    198                      }
    199                      break; // switch ( ValueId )
    200                  } //switch ( Key )
    201                  if (Status == E_NO_ERR) {
   \                     ??PutValue_14:
   \   0000068C   00009DE5           LDR      R0,[SP, #+0]
   \   00000690   000050E3           CMP      R0,#+0
   \   00000694   1300001A           BNE      ??PutValue_10
    202          			SetModifiedFlag();
   \                     ??PutValue_31:
   \   00000698   A41095E5           LDR      R1,[R5, #+164]
   \   0000069C   0500A0E1           MOV      R0,R5
   \   000006A0   541091E5           LDR      R1,[R1, #+84]
   \   000006A4   0FE0A0E1           MOV      LR,PC
   \   000006A8   11FF2FE1           BX       R1
    203          			if ( Limit != OrgLimit ) {
   \   000006AC   E40095E5           LDR      R0,[R5, #+228]
   \   000006B0   0610A0E1           MOV      R1,R6
   \   000006B4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000006B8   000050E3           CMP      R0,#+0
   \   000006BC   0900000A           BEQ      ??PutValue_10
    204          				LogEvent("New limit");
   \   000006C0   3C109FE5           LDR      R1,??PutValue_39  ;; `?<Constant "New limit">`
   \   000006C4   08008DE2           ADD      R0,SP,#+8
   \   000006C8   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000006CC   0010A0E1           MOV      R1,R0
   \   000006D0   0500A0E1           MOV      R0,R5
   \   000006D4   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   000006D8   0020A0E3           MOV      R2,#+0
   \   000006DC   0110A0E3           MOV      R1,#+1
   \   000006E0   08008DE2           ADD      R0,SP,#+8
   \   000006E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    205          			}
    206                  }
    207              } // if ( Locked ) else
    208              if (UnitId) {
   \                     ??PutValue_10:
   \   000006E8   000054E3           CMP      R4,#+0
    209                  *UnitId = ValUnitId;
   \   000006EC   04009D15           LDRNE    R0,[SP, #+4]
   \   000006F0   00008415           STRNE    R0,[R4, #+0]
    210              }
    211              return (Status);
   \   000006F4   00009DE5           LDR      R0,[SP, #+0]
   \   000006F8   94D08DE2           ADD      SP,SP,#+148
   \   000006FC   F04FBDE8           POP      {R4-R11,LR}
   \   00000700   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_39:
   \   00000704   ........           DC32     `?<Constant "New limit">`
    212          }
    213          

   \                                 In segment CODE, align 4, keep-with-next
    214          int  AlarmLowLevel::GetValue(int ValueId, int Index, float& MyRetValue, int& DecPnt, int& Unit) {
   \                     ??GetValue:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
    215              int Status = GETVAL_NO_ERR;
   \   00000004   00C09DE5           LDR      R12,[SP, #+0]
   \   00000008   2C709DE5           LDR      R7,[SP, #+44]
   \   0000000C   30809DE5           LDR      R8,[SP, #+48]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   F40095E5           LDR      R0,[R5, #+244]
   \   00000018   F82095E5           LDR      R2,[R5, #+248]
   \   0000001C   ECB095E5           LDR      R11,[R5, #+236]
   \   00000020   FC1095E5           LDR      R1,[R5, #+252]
   \   00000024   0360A0E1           MOV      R6,R3
   \   00000028   E43095E5           LDR      R3,[R5, #+228]
   \   0000002C   0040A0E3           MOV      R4,#+0
   \   00000030   0190A0E3           MOV      R9,#+1
   \   00000034   02A0A0E3           MOV      R10,#+2
   \   00000038   32E0A0E3           MOV      LR,#+50
   \   0000003C   8CED8EE3           ORR      LR,LR,#0x2300
   \   00000040   0E005CE1           CMP      R12,LR
   \   00000044   1C00000A           BEQ      ??GetValue_8
   \   00000048   01E08EE3           ORR      LR,LR,#0x1
   \   0000004C   0E005CE1           CMP      R12,LR
   \   00000050   AB00000A           BEQ      ??GetValue_9
   \   00000054   90E08EE2           ADD      LR,LR,#+144
   \   00000058   0E005CE1           CMP      R12,LR
   \   0000005C   0F00000A           BEQ      ??GetValue_10
   \   00000060   35E08EE2           ADD      LR,LR,#+53
   \   00000064   0E005CE1           CMP      R12,LR
   \   00000068   2000000A           BEQ      ??GetValue_11
   \   0000006C   01E08EE3           ORR      LR,LR,#0x1
   \   00000070   0E005CE1           CMP      R12,LR
   \   00000074   2F00000A           BEQ      ??GetValue_12
   \   00000078   01E08EE2           ADD      LR,LR,#+1
   \   0000007C   0E005CE1           CMP      R12,LR
   \   00000080   4800000A           BEQ      ??GetValue_13
   \   00000084   01E08EE3           ORR      LR,LR,#0x1
   \   00000088   0E005CE1           CMP      R12,LR
   \   0000008C   6900000A           BEQ      ??GetValue_14
   \   00000090   01E08EE2           ADD      LR,LR,#+1
   \   00000094   0E005CE1           CMP      R12,LR
   \   00000098   8000000A           BEQ      ??GetValue_15
   \   0000009C   AB0000EA           B        ??GetValue_16
    216              switch (ValueId) {
    217              case SVT_AL_LIMIT_TYPE_LEV:
    218                  MyRetValue = LimitType;
   \                     ??GetValue_10:
   \   000000A0   0100A0E1           MOV      R0,R1
   \   000000A4   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000A8   000086E5           STR      R0,[R6, #+0]
    219                  DecPnt     = 0;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   000087E5           STR      R0,[R7, #+0]
    220                  Unit       = NO_UNIT;
   \                     ??GetValue_17:
   \   000000B4   000088E5           STR      R0,[R8, #+0]
   \   000000B8   AD0000EA           B        ??GetValue_18
    221                  break;
    222              case SVT_AL_LIMIT:
    223                  MyRetValue = Limit;
   \                     ??GetValue_8:
   \   000000BC   003086E5           STR      R3,[R6, #+0]
    224                  if (OnlyLevel) {
   \   000000C0   0001D5E5           LDRB     R0,[R5, #+256]
   \   000000C4   000050E3           CMP      R0,#+0
    225                      DecPnt     = 2;
   \   000000C8   00A08715           STRNE    R10,[R7, #+0]
    226                      Unit       = LENGTH_UNIT;
   \   000000CC   0100A013           MOVNE    R0,#+1
    227                  } else {
    228                      DecPnt     = 1;
   \   000000D0   00908705           STREQ    R9,[R7, #+0]
    229                      Unit       = PERCENT_UNIT;
   \   000000D4   1000A003           MOVEQ    R0,#+16
   \                     ??GetValue_19:
   \   000000D8   000088E5           STR      R0,[R8, #+0]
    230                  }
    231                  if (!Enable) {
   \                     ??GetValue_20:
   \   000000DC   E200D5E5           LDRB     R0,[R5, #+226]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   A200001A           BNE      ??GetValue_18
    232                      Status     = GETVAL_DISABLED;
   \   000000E8   0940A0E3           MOV      R4,#+9
   \   000000EC   A00000EA           B        ??GetValue_18
    233                  }
    234                  break;
    235              case SVT_LO_VOLPCNT_LIM:
    236                  switch (LimitType) {
   \                     ??GetValue_11:
   \   000000F0   B61041E2           SUB      R1,R1,#+182
   \   000000F4   D01E41E2           SUB      R1,R1,#+3328
   \   000000F8   010051E3           CMP      R1,#+1
   \   000000FC   0A00008A           BHI      ??GetValue_21
   \   00000100   010F8FE2           ADR      R0,??GetValue_1
   \   00000104   0100D0E7           LDRB     R0,[R0, R1]
   \   00000108   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValue_1:
   \   0000010C   00060000           DC8      +0,+6,+0,+0
    237                  case AL_LIM_VOLPERCENT:
    238                      MyRetValue = Limit;
   \                     ??GetValue_22:
   \   00000110   003086E5           STR      R3,[R6, #+0]
    239                      if (!Enable) {
   \   00000114   E200D5E5           LDRB     R0,[R5, #+226]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0200001A           BNE      ??GetValue_21
    240                          Status     = GETVAL_DISABLED;
   \   00000120   0940A0E3           MOV      R4,#+9
   \   00000124   000000EA           B        ??GetValue_21
    241                      }
    242                      break;
    243                  case AL_LIM_LEVEL     :
    244                      Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_23:
   \   00000128   0140A0E3           MOV      R4,#+1
    245                      break;
    246                  }
    247                  DecPnt     = 1;
   \                     ??GetValue_21:
   \   0000012C   009087E5           STR      R9,[R7, #+0]
    248                  Unit       = PERCENT_UNIT;
   \   00000130   1000A0E3           MOV      R0,#+16
   \   00000134   DEFFFFEA           B        ??GetValue_17
    249                  break;
    250              case SVT_LO_VOLUME_LIM :
    251                  switch (LimitType) {
   \                     ??GetValue_12:
   \   00000138   B61041E2           SUB      R1,R1,#+182
   \   0000013C   D01E41E2           SUB      R1,R1,#+3328
   \   00000140   010051E3           CMP      R1,#+1
   \   00000144   1400008A           BHI      ??GetValue_24
   \   00000148   010F8FE2           ADR      R0,??GetValue_2
   \   0000014C   0100D0E7           LDRB     R0,[R0, R1]
   \   00000150   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValue_2:
   \   00000154   00100000           DC8      +0,+16,+0,+0
    252                  case AL_LIM_VOLPERCENT:
    253                      MyRetValue = VolumeTab->MaxY * Limit / 100.0;
   \                     ??GetValue_25:
   \   00000158   F00095E5           LDR      R0,[R5, #+240]
   \   0000015C   0310A0E1           MOV      R1,R3
   \   00000160   180090E5           LDR      R0,[R0, #+24]
   \   00000164   ........           _BLF     __fMul,??__fMul??rA
   \   00000168   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   4034A0E3           MOV      R3,#+1073741824
   \   00000174   593883E3           ORR      R3,R3,#0x590000
   \   00000178   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000017C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000180   000086E5           STR      R0,[R6, #+0]
    254                      if (!Enable) {
   \   00000184   E200D5E5           LDRB     R0,[R5, #+226]
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   0200001A           BNE      ??GetValue_24
    255                          Status     = GETVAL_DISABLED;
   \   00000190   0940A0E3           MOV      R4,#+9
   \   00000194   000000EA           B        ??GetValue_24
    256                      }
    257                      break;
    258                  case AL_LIM_LEVEL     :
    259                      Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_26:
   \   00000198   0140A0E3           MOV      R4,#+1
    260                      break;
    261                  }
    262                  DecPnt     = 1;
   \                     ??GetValue_24:
   \   0000019C   009087E5           STR      R9,[R7, #+0]
    263                  Unit       = VOLUME_UNIT;
   \   000001A0   00A088E5           STR      R10,[R8, #+0]
   \   000001A4   720000EA           B        ??GetValue_18
    264                  break;
    265              case SVT_LO_WEIGHT_LIM :
    266                  switch (LimitType) {
   \                     ??GetValue_13:
   \   000001A8   B61041E2           SUB      R1,R1,#+182
   \   000001AC   D01E41E2           SUB      R1,R1,#+3328
   \   000001B0   010051E3           CMP      R1,#+1
   \   000001B4   1C00008A           BHI      ??GetValue_27
   \   000001B8   010F8FE2           ADR      R0,??GetValue_3
   \   000001BC   0100D0E7           LDRB     R0,[R0, R1]
   \   000001C0   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValue_3:
   \   000001C4   00180000           DC8      +0,+24,+0,+0
    267                  case AL_LIM_VOLPERCENT:
    268                      MyRetValue = GetCorrectedWeight(VolumeTab->MaxY * Limit / 100.0 * PROTankPtr->Density, PROTankPtr->Density);
   \                     ??GetValue_28:
   \   000001C8   F00095E5           LDR      R0,[R5, #+240]
   \   000001CC   94A29BE5           LDR      R10,[R11, #+660]
   \   000001D0   180090E5           LDR      R0,[R0, #+24]
   \   000001D4   0310A0E1           MOV      R1,R3
   \   000001D8   ........           _BLF     __fMul,??__fMul??rA
   \   000001DC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   4034A0E3           MOV      R3,#+1073741824
   \   000001E8   593883E3           ORR      R3,R3,#0x590000
   \   000001EC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000001F0   03002DE9           PUSH     {R0,R1}
   \   000001F4   94029BE5           LDR      R0,[R11, #+660]
   \   000001F8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001FC   0C00BDE8           POP      {R2,R3}
   \   00000200   ........           _BLF     __dMul,??__dMul??rA
   \   00000204   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000208   0A10A0E1           MOV      R1,R10
   \   0000020C   ........           _BLF     ??GetCorrectedWeight,??GetCorrectedWeight??rA
   \   00000210   000086E5           STR      R0,[R6, #+0]
    269                      if (!Enable) {
   \   00000214   E200D5E5           LDRB     R0,[R5, #+226]
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   0200001A           BNE      ??GetValue_27
    270                          Status     = GETVAL_DISABLED;
   \   00000220   0940A0E3           MOV      R4,#+9
   \   00000224   000000EA           B        ??GetValue_27
    271                      }
    272                      break;
    273                  case AL_LIM_LEVEL     :
    274                      Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_29:
   \   00000228   0140A0E3           MOV      R4,#+1
    275                      break;
    276                  }
    277                  DecPnt     = 1;
   \                     ??GetValue_27:
   \   0000022C   009087E5           STR      R9,[R7, #+0]
    278                  Unit       = WEIGHT_UNIT;
   \   00000230   0300A0E3           MOV      R0,#+3
   \   00000234   9EFFFFEA           B        ??GetValue_17
    279                  break;
    280              case SVT_LO_ULLAGE_LIM :
    281                  switch (LimitType) {
   \                     ??GetValue_14:
   \   00000238   B61041E2           SUB      R1,R1,#+182
   \   0000023C   D01E41E2           SUB      R1,R1,#+3328
   \   00000240   010051E3           CMP      R1,#+1
   \   00000244   1200008A           BHI      ??GetValue_30
   \   00000248   01CF8FE2           ADR      R12,??GetValue_4
   \   0000024C   01C0DCE7           LDRB     R12,[R12, R1]
   \   00000250   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_4:
   \   00000254   000B0000           DC8      +0,+11,+0,+0
    282                  case AL_LIM_VOLPERCENT:
    283                      if (UllVolumeTab) {
   \                     ??GetValue_31:
   \   00000258   000052E3           CMP      R2,#+0
   \   0000025C   0310A0E1           MOV      R1,R3
   \   00000260   0200000A           BEQ      ??GetValue_32
    284                          MyRetValue = UllVolumeTab->Calc_XPercent(Limit);
   \   00000264   0200A0E1           MOV      R0,R2
   \   00000268   ........           _BLF     ??Calc_XPercent,??Calc_XPercent??rA
   \   0000026C   070000EA           B        ??GetValue_33
    285                      } else {
    286                          float MyLevel = LevVolumeTab->Calc_XPercent(Limit);
   \                     ??GetValue_32:
   \   00000270   ........           _BLF     ??Calc_XPercent,??Calc_XPercent??rA
   \   00000274   0010A0E1           MOV      R1,R0
    287                          MyRetValue    = PROTankPtr->DBotUllRefPnt - MyLevel;
   \   00000278   EC0095E5           LDR      R0,[R5, #+236]
   \   0000027C   500290E5           LDR      R0,[R0, #+592]
   \   00000280   010000EA           B        ??GetValue_34
    288                      }
    289                      break;
    290                  case AL_LIM_LEVEL     :
    291                      MyRetValue = PROTankPtr->DBotUllRefPnt - Limit;
   \                     ??GetValue_35:
   \   00000284   50029BE5           LDR      R0,[R11, #+592]
   \   00000288   0310A0E1           MOV      R1,R3
   \                     ??GetValue_34:
   \   0000028C   ........           _BLF     __fSub,??__fSub??rA
   \                     ??GetValue_33:
   \   00000290   000086E5           STR      R0,[R6, #+0]
    292                      break;
    293                  }
    294                  DecPnt     = 2;
   \                     ??GetValue_30:
   \   00000294   00A087E5           STR      R10,[R7, #+0]
    295                  Unit       = LENGTH_UNIT;
   \   00000298   009088E5           STR      R9,[R8, #+0]
    296                  if (!Enable) {
   \   0000029C   8EFFFFEA           B        ??GetValue_20
    297                      Status     = GETVAL_DISABLED;
    298                  }
    299                  break;
    300              case SVT_LO_LEVEL_LIM  :
    301                  switch (LimitType) {
   \                     ??GetValue_15:
   \   000002A0   B61041E2           SUB      R1,R1,#+182
   \   000002A4   D01E41E2           SUB      R1,R1,#+3328
   \   000002A8   010051E3           CMP      R1,#+1
   \   000002AC   1100008A           BHI      ??GetValue_36
   \   000002B0   01BF8FE2           ADR      R11,??GetValue_5
   \   000002B4   01B0DBE7           LDRB     R11,[R11, R1]
   \   000002B8   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??GetValue_5:
   \   000002BC   000D0000           DC8      +0,+13,+0,+0
    302                  case AL_LIM_VOLPERCENT:
    303                      if (UllVolumeTab) {
   \                     ??GetValue_37:
   \   000002C0   000052E3           CMP      R2,#+0
   \   000002C4   0310A0E1           MOV      R1,R3
   \   000002C8   0700000A           BEQ      ??GetValue_38
    304                          float MyUllageRef = UllVolumeTab->Calc_XPercent(Limit);
   \   000002CC   0200A0E1           MOV      R0,R2
   \   000002D0   ........           _BLF     ??Calc_XPercent,??Calc_XPercent??rA
   \   000002D4   0010A0E1           MOV      R1,R0
    305                          MyRetValue    = PROTankPtr->DBotUllRefPnt - MyUllageRef;
   \   000002D8   EC0095E5           LDR      R0,[R5, #+236]
   \   000002DC   500290E5           LDR      R0,[R0, #+592]
   \   000002E0   ........           _BLF     __fSub,??__fSub??rA
   \                     ??GetValue_39:
   \   000002E4   000086E5           STR      R0,[R6, #+0]
   \   000002E8   020000EA           B        ??GetValue_36
    306                      } else {
    307                          MyRetValue = LevVolumeTab->Calc_XPercent(Limit);
   \                     ??GetValue_38:
   \   000002EC   ........           _BLF     ??Calc_XPercent,??Calc_XPercent??rA
   \   000002F0   FBFFFFEA           B        ??GetValue_39
    308                      }
    309                      break;
    310                  case AL_LIM_LEVEL     :
    311                      MyRetValue = Limit;
   \                     ??GetValue_40:
   \   000002F4   003086E5           STR      R3,[R6, #+0]
    312                      break;
    313                  }
    314                  DecPnt     = 2;
   \                     ??GetValue_36:
   \   000002F8   00A087E5           STR      R10,[R7, #+0]
    315                  Unit       = LENGTH_UNIT;
   \   000002FC   009088E5           STR      R9,[R8, #+0]
    316                  if (!Enable) {
   \   00000300   75FFFFEA           B        ??GetValue_20
    317                      Status     = GETVAL_DISABLED;
    318                  }
    319                  break;
    320              case SVT_AL_VALUE:
    321                  switch (LimitType) {
   \                     ??GetValue_9:
   \   00000304   B61041E2           SUB      R1,R1,#+182
   \   00000308   D01E41E2           SUB      R1,R1,#+3328
   \   0000030C   010051E3           CMP      R1,#+1
   \   00000310   71FFFF8A           BHI      ??GetValue_20
   \   00000314   020F8FE2           ADR      R0,??GetValue_6
   \   00000318   8110A0E1           MOV      R1,R1, LSL #+1
   \   0000031C   F10090E1           LDRSH    R0,[R0, R1]
   \   00000320   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??GetValue_6:
   \   00000324   00000500           DC16     +0,+5
    322                  case AL_LIM_VOLPERCENT:
    323                      MyRetValue = PROTankPtr->VolumePercent;
   \                     ??GetValue_41:
   \   00000328   B8029BE5           LDR      R0,[R11, #+696]
   \   0000032C   000086E5           STR      R0,[R6, #+0]
    324                      DecPnt     = 1;
   \   00000330   009087E5           STR      R9,[R7, #+0]
    325                      Unit       = PERCENT_UNIT;
   \   00000334   1000A0E3           MOV      R0,#+16
   \   00000338   66FFFFEA           B        ??GetValue_19
    326                      break;
    327                  case AL_LIM_LEVEL     :
    328                      MyRetValue = PROTankPtr->Level;
   \                     ??GetValue_42:
   \   0000033C   A4029BE5           LDR      R0,[R11, #+676]
   \   00000340   000086E5           STR      R0,[R6, #+0]
    329                      DecPnt     = 2;
   \   00000344   00A087E5           STR      R10,[R7, #+0]
    330                      Unit       = LENGTH_UNIT;
   \   00000348   009088E5           STR      R9,[R8, #+0]
    331                      break;
    332                  }
    333                  if (!Enable) {
   \                     ??GetValue_43:
   \   0000034C   62FFFFEA           B        ??GetValue_20
    334                      Status     = GETVAL_DISABLED;
    335                  }
    336                  break;
    337              default:
    338                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_16:
   \   00000350   00012DE9           PUSH     {R8}
   \   00000354   80002DE9           PUSH     {R7}
   \   00000358   0C209DE5           LDR      R2,[SP, #+12]
   \   0000035C   0630A0E1           MOV      R3,R6
   \   00000360   0C10A0E1           MOV      R1,R12
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   ........           _BLF     ??GetValue_7,??GetValue??rA
   \   0000036C   0040A0E1           MOV      R4,R0
   \   00000370   08D08DE2           ADD      SP,SP,#+8
    339                  break;
    340              }
    341              return (Status);
   \                     ??GetValue_18:
   \   00000374   0400A0E1           MOV      R0,R4
   \   00000378   F64FBDE8           POP      {R1,R2,R4-R11,LR}
   \   0000037C   1EFF2FE1           BX       LR               ;; return
    342          }
    343          

   \                                 In segment CODE, align 4, keep-with-next
    344          int AlarmLowLevel::GetStringValue(int ValueId, int Index, AnsiString& MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    345              int Status = GETVAL_NO_ERR;
    346              //switch ( ValueId ) {
    347              //	default:
    348              Status = AlarmBasic::GetStringValue(ValueId, Index, MyString);
    349              //		break;
    350              //}
    351              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    352          }
    353          

   \                                 In segment CODE, align 4, keep-with-next
    354          int AlarmLowLevel::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    355              int Status = E_NO_ERR;
    356              switch (ValueId) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   F46094E5           LDR      R6,[R4, #+244]
   \   00000010   F87094E5           LDR      R7,[R4, #+248]
   \   00000014   FC3094E5           LDR      R3,[R4, #+252]
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   FBC041E2           SUB      R12,R1,#+251
   \   00000020   8CCD4CE2           SUB      R12,R12,#+8960
   \   00000024   01005CE3           CMP      R12,#+1
   \   00000028   3800008A           BHI      ??PutFloatValue_5
   \   0000002C   01EF8FE2           ADR      LR,??PutFloatValue_1
   \   00000030   0CE0DEE7           LDRB     LR,[LR, R12]
   \   00000034   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000038   00210000           DC8      +0,+33,+0,+0
    357              case SVT_LO_ULLAGE_LIM :
    358                  switch (LimitType) {
   \                     ??PutFloatValue_6:
   \   0000003C   B63043E2           SUB      R3,R3,#+182
   \   00000040   D03E43E2           SUB      R3,R3,#+3328
   \   00000044   010053E3           CMP      R3,#+1
   \   00000048   3300008A           BHI      ??PutFloatValue_7
   \   0000004C   011F8FE2           ADR      R1,??PutFloatValue_2
   \   00000050   0310D1E7           LDRB     R1,[R1, R3]
   \   00000054   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutFloatValue_2:
   \   00000058   000D0000           DC8      +0,+13,+0,+0
    359                  case AL_LIM_VOLPERCENT:
    360                      if (UllVolumeTab) {
   \                     ??PutFloatValue_8:
   \   0000005C   000057E3           CMP      R7,#+0
   \   00000060   0400000A           BEQ      ??PutFloatValue_9
    361                          Limit = UllVolumeTab->Calc_YPercent(NewValue);
   \   00000064   0210A0E1           MOV      R1,R2
   \                     ??PutFloatValue_10:
   \   00000068   0700A0E1           MOV      R0,R7
   \                     ??PutFloatValue_11:
   \   0000006C   ........           _BLF     ??Calc_YPercent,??Calc_YPercent??rA
   \   00000070   E40084E5           STR      R0,[R4, #+228]
   \   00000074   280000EA           B        ??PutFloatValue_7
    362                      } else {
    363                          float Level = PROTankPtr->DBotUllRefPnt - NewValue;
    364                          Limit = LevVolumeTab->Calc_YPercent(Level);
   \                     ??PutFloatValue_9:
   \   00000078   500290E5           LDR      R0,[R0, #+592]
   \   0000007C   0210A0E1           MOV      R1,R2
   \   00000080   ........           _BLF     __fSub,??__fSub??rA
   \   00000084   0010A0E1           MOV      R1,R0
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F6FFFFEA           B        ??PutFloatValue_11
    365                      }
    366                      break;
    367                  case AL_LIM_LEVEL     :
    368                      {
    369                          float Lim = PROTankPtr->DBotUllRefPnt - NewValue;
   \                     ??PutFloatValue_12:
   \   00000090   500290E5           LDR      R0,[R0, #+592]
   \   00000094   0210A0E1           MOV      R1,R2
   \   00000098   ........           _BLF     __fSub,??__fSub??rA
   \   0000009C   0060A0E1           MOV      R6,R0
    370                          if (Lim < 0.0) {
   \   000000A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0230A0E1           MOV      R3,R2
   \   000000AC   ........           _BLF     __dLess,??__dLess??rA
   \   000000B0   000050E3           CMP      R0,#+0
    371                              Lim = 0.0;
   \   000000B4   0060A013           MOVNE    R6,#+0
    372                          }
    373                          Limit = Lim;
   \   000000B8   E46084E5           STR      R6,[R4, #+228]
   \   000000BC   160000EA           B        ??PutFloatValue_7
    374                      }
    375                      break;
    376                  }
    377                  break;
    378              case SVT_LO_LEVEL_LIM  :
    379                  switch (LimitType) {
   \                     ??PutFloatValue_13:
   \   000000C0   B63043E2           SUB      R3,R3,#+182
   \   000000C4   D03E43E2           SUB      R3,R3,#+3328
   \   000000C8   010053E3           CMP      R3,#+1
   \   000000CC   1200008A           BHI      ??PutFloatValue_7
   \   000000D0   011F8FE2           ADR      R1,??PutFloatValue_3
   \   000000D4   0310D1E7           LDRB     R1,[R1, R3]
   \   000000D8   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutFloatValue_3:
   \   000000DC   000A0000           DC8      +0,+10,+0,+0
    380                  case AL_LIM_VOLPERCENT:
    381                      if (UllVolumeTab) {
   \                     ??PutFloatValue_14:
   \   000000E0   000057E3           CMP      R7,#+0
   \   000000E4   0400000A           BEQ      ??PutFloatValue_15
    382                          float UllageRef = PROTankPtr->DBotUllRefPnt - NewValue;
    383                          Limit = UllVolumeTab->Calc_YPercent(UllageRef);
   \   000000E8   500290E5           LDR      R0,[R0, #+592]
   \   000000EC   0210A0E1           MOV      R1,R2
   \   000000F0   ........           _BLF     __fSub,??__fSub??rA
   \   000000F4   0010A0E1           MOV      R1,R0
   \   000000F8   DAFFFFEA           B        ??PutFloatValue_10
    384                      } else {
    385                          Limit = LevVolumeTab->Calc_YPercent(NewValue);
   \                     ??PutFloatValue_15:
   \   000000FC   0210A0E1           MOV      R1,R2
   \   00000100   0600A0E1           MOV      R0,R6
   \   00000104   D8FFFFEA           B        ??PutFloatValue_11
    386                      }
    387                      break;
    388                  case AL_LIM_LEVEL     :
    389                      Limit = NewValue;
   \                     ??PutFloatValue_16:
   \   00000108   E42084E5           STR      R2,[R4, #+228]
   \   0000010C   020000EA           B        ??PutFloatValue_7
    390                      break;
    391                  }
    392                  break;
    393              default:
    394                  Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_5:
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     ??PutFloatValue_4,??PutFloatValue??rA
   \   00000118   0050A0E1           MOV      R5,R0
    395                  break;
    396              }
    397              return (Status);
   \                     ??PutFloatValue_7:
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           B        ?Subroutine8
    398          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLowLevel &AlarmLowLevel::new AlarmLowLevel(PRogramObjectBase *, float, bool)
   \                     `??new AlarmLowLevel`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   410FA0E3           MOV      R0,#+260
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLowLevel_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLowLevel
   \                     `??new AlarmLowLevel_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    399          
    400          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLowLevel::AlarmLowLevel(PRogramObjectBase *, float, bool)
                                       20
     AlarmLowLevel::Check()            20
     AlarmLowLevel::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLowLevel::GetValue(int, int, float &, int &, int &)
                                       52
     AlarmLowLevel::PutFloatValue(int, float)
                                       20
     AlarmLowLevel::PutValue(int, int, AnsiString, bool, int *)
                                      208
     AlarmLowLevel::new AlarmLowLevel(PRogramObjectBase *, float, bool)
                                       16
     AlarmLowLevel::~AlarmLowLevel()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AlarmLowLevel::~AlarmLowLevel()
                                      56
     AlarmLowLevel::NumberOfAlarmSettings
                                       4
     AlarmLowLevel::AlarmLowLevel(PRogramObjectBase *, float, bool)
                                     248
     ?Subroutine8                     12
     AlarmLowLevel::Check()          144
     AlarmLowLevel::PutValue(int, int, AnsiString, bool, int *)
                                    1800
     AlarmLowLevel::GetValue(int, int, float &, int &, int &)
                                     896
     AlarmLowLevel::GetStringValue(int, int, AnsiString &)
                                      16
     AlarmLowLevel::PutFloatValue(int, float)
                                     292
     ?<Constant "New limit">          12
     AlarmLowLevel::new AlarmLowLevel(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         596

 
 4 052 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 3 472 bytes of CODE  memory (+ 596 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
