##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:50 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AILevelSwitchSensor_mV.cpp      #
#    Command line    =  D:\S2Prog\Shared\Src\AILevelSwitchSensor_mV.cpp      #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AILevelSwitchSensor_mV.lst  #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AILevelSwitchSensor_mV.r79   #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AILevelSwitchSensor_mV.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
   \                     ??Ref:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
   \                     `??operator less<AlarmBasic *> &`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??Ref,??Ref??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
   \                     ??pair:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??iterator,??iterator??rA
   \   0000001C   0460C4E5           STRB     R6,[R4, #+4]
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_1,??append??rA_1
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *operator new(unsigned int, void *)
   \                     `??operator new`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node * allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
   \                     ??max_size:
   \   00000000   14209FE5           LDR      R2,??max_size_2  ;; 0xccccccc
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_3
   \                     ??max_size_4:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_3:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??max_size_2:
   \   0000001C   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
   \                     `??operator()`:
   \   00000000   020051E1           CMP      R1,R2
   \   00000004   0100002A           BCS      `??operator()_1`
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   000000EA           B        `??operator()_2`
   \                     `??operator()_1`:
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     `??operator()_2`:
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
   \                     ??_GenNode:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   04C0DDE5           LDRB     R12,[SP, #+4]
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   042080E5           STR      R2,[R0, #+4]
   \   00000010   083080E5           STR      R3,[R0, #+8]
   \   00000014   0CC0C0E5           STRB     R12,[R0, #+12]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0D40C0E5           STRB     R4,[R0, #+13]
   \   00000020   1000BDE8           POP      {R4}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Color:
   \   00000000   0C0090E2           ADDS     R0,R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil:
   \   00000000   0D0090E2           ADDS     R0,R0,#+13
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \                     ??_Max_1:
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0400001A           BNE      ??_Max_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0040B0E1           MOVS     R4,R0
   \   00000038   F2FFFFEA           B        ??_Max_1
   \                     ??_Max_2:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_DecP_1
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Right,??_Right??rA
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   240000EA           B        ??_DecP_2
   \                     ??_DecP_1:
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Left,??_Left??rA
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400001A           BNE      ??_DecP_3
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Left,??_Left??rA
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     ??_Max,??_Max??rA
   \   00000060   170000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \                     ??_DecP_4:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0050B0E1           MOVS     R5,R0
   \   00000074   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0600001A           BNE      ??_DecP_5
   \   00000088   0500B0E1           MOVS     R0,R5
   \   0000008C   ........           _BLF     ??_Left,??_Left??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0100001A           BNE      ??_DecP_5
   \   0000009C   0540B0E1           MOVS     R4,R5
   \   000000A0   EFFFFFEA           B        ??_DecP_4
   \                     ??_DecP_5:
   \   000000A4   0500B0E1           MOVS     R0,R5
   \   000000A8   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   000000AC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0000001A           BNE      ??_DecP_6
   \   000000BC   0540B0E1           MOVS     R4,R5
   \                     ??_DecP_6:
   \   000000C0   0400B0E1           MOVS     R0,R4
   \                     ??_DecP_2:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_GenIter:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
   \                     `??operator==`:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0100001A           BNE      `??operator==_2`
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   000000EA           B        `??operator==_3`
   \                     `??operator==_2`:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     `??operator==_3`:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     ??_DecP,??_DecP??rA
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
   \                     ??_Mynode:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Root()
   \                     ??_Root:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Lmost()
   \                     ??_Lmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Left,??_Left??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Rmost()
   \                     ??_Rmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Left,??_Left??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Left,??_Left??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Right,??_Right??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Rrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Right,??_Right??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Rrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Rrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Right,??_Right??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Rrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Right,??_Right??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Left,??_Left??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Rrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Right,??_Right??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Right,??_Right??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Right,??_Right??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Left,??_Left??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Left,??_Left??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Lrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Lrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Lrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Left,??_Left??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Lrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Left,??_Left??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Right,??_Right??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Lrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Left,??_Left??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   100094E5           LDR      R0,[R4, #+16]
   \   00000018   010090E2           ADDS     R0,R0,#+1
   \   0000001C   100084E5           STR      R0,[R4, #+16]
   \   00000020   040056E1           CMP      R6,R4
   \   00000024   0900001A           BNE      ??_Insert_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Root,??_Root??rA
   \   00000030   007080E5           STR      R7,[R0, #+0]
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000003C   007080E5           STR      R7,[R0, #+0]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   00000048   007080E5           STR      R7,[R0, #+0]
   \   0000004C   180000EA           B        ??_Insert_3
   \                     ??_Insert_2:
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0B00000A           BEQ      ??_Insert_4
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   007080E5           STR      R7,[R0, #+0]
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000056E1           CMP      R6,R0
   \   00000074   0E00001A           BNE      ??_Insert_3
   \   00000078   0400B0E1           MOVS     R0,R4
   \   0000007C   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   00000080   007080E5           STR      R7,[R0, #+0]
   \   00000084   0A0000EA           B        ??_Insert_3
   \                     ??_Insert_4:
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     ??_Right,??_Right??rA
   \   00000090   007080E5           STR      R7,[R0, #+0]
   \   00000094   0400B0E1           MOVS     R0,R4
   \   00000098   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000056E1           CMP      R6,R0
   \   000000A4   0200001A           BNE      ??_Insert_3
   \   000000A8   0400B0E1           MOVS     R0,R4
   \   000000AC   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   000000B0   007080E5           STR      R7,[R0, #+0]
   \                     ??_Insert_3:
   \   000000B4   0780B0E1           MOVS     R8,R7
   \                     ??_Insert_5:
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     ??_Color,??_Color??rA
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   A200001A           BNE      ??_Insert_6
   \   000000D8   0800B0E1           MOVS     R0,R8
   \   000000DC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E0   0090B0E1           MOVS     R9,R0
   \   000000E4   0800B0E1           MOVS     R0,R8
   \   000000E8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000F4   009099E5           LDR      R9,[R9, #+0]
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   ........           _BLF     ??_Left,??_Left??rA
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   4A00001A           BNE      ??_Insert_7
   \   0000010C   0800B0E1           MOVS     R0,R8
   \   00000110   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   ........           _BLF     ??_Right,??_Right??rA
   \   00000124   000090E5           LDR      R0,[R0, #+0]
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   0600B0E1           MOVS     R0,R6
   \   00000130   ........           _BLF     ??_Color,??_Color??rA
   \   00000134   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000138   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   1800001A           BNE      ??_Insert_8
   \   00000144   0800B0E1           MOVS     R0,R8
   \   00000148   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     ??_Color,??_Color??rA
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   0010C0E5           STRB     R1,[R0, #+0]
   \   0000015C   0600B0E1           MOVS     R0,R6
   \   00000160   ........           _BLF     ??_Color,??_Color??rA
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   0010C0E5           STRB     R1,[R0, #+0]
   \   0000016C   0800B0E1           MOVS     R0,R8
   \   00000170   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     ??_Color,??_Color??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0010C0E5           STRB     R1,[R0, #+0]
   \   0000018C   0800B0E1           MOVS     R0,R8
   \   00000190   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   0080B0E1           MOVS     R8,R0
   \   000001A4   C3FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   000001A8   0800B0E1           MOVS     R0,R8
   \   000001AC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   ........           _BLF     ??_Right,??_Right??rA
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000058E1           CMP      R8,R0
   \   000001C0   0600001A           BNE      ??_Insert_9
   \   000001C4   0800B0E1           MOVS     R0,R8
   \   000001C8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0080B0E1           MOVS     R8,R0
   \   000001D4   0810B0E1           MOVS     R1,R8
   \   000001D8   0400B0E1           MOVS     R0,R4
   \   000001DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000001E0   0800B0E1           MOVS     R0,R8
   \   000001E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   ........           _BLF     ??_Color,??_Color??rA
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001F8   0800B0E1           MOVS     R0,R8
   \   000001FC   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   ........           _BLF     ??_Color,??_Color??rA
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0010C0E5           STRB     R1,[R0, #+0]
   \   00000218   0800B0E1           MOVS     R0,R8
   \   0000021C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000228   001090E5           LDR      R1,[R0, #+0]
   \   0000022C   0400B0E1           MOVS     R0,R4
   \   00000230   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000234   9FFFFFEA           B        ??_Insert_5
   \                     ??_Insert_7:
   \   00000238   0800B0E1           MOVS     R0,R8
   \   0000023C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   ........           _BLF     ??_Left,??_Left??rA
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   0060B0E1           MOVS     R6,R0
   \   00000258   0600B0E1           MOVS     R0,R6
   \   0000025C   ........           _BLF     ??_Color,??_Color??rA
   \   00000260   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000264   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   1800001A           BNE      ??_Insert_10
   \   00000270   0800B0E1           MOVS     R0,R8
   \   00000274   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           _BLF     ??_Color,??_Color??rA
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   0010C0E5           STRB     R1,[R0, #+0]
   \   00000288   0600B0E1           MOVS     R0,R6
   \   0000028C   ........           _BLF     ??_Color,??_Color??rA
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   0010C0E5           STRB     R1,[R0, #+0]
   \   00000298   0800B0E1           MOVS     R0,R8
   \   0000029C   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A0   000090E5           LDR      R0,[R0, #+0]
   \   000002A4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A8   000090E5           LDR      R0,[R0, #+0]
   \   000002AC   ........           _BLF     ??_Color,??_Color??rA
   \   000002B0   0010A0E3           MOV      R1,#+0
   \   000002B4   0010C0E5           STRB     R1,[R0, #+0]
   \   000002B8   0800B0E1           MOVS     R0,R8
   \   000002BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   0080B0E1           MOVS     R8,R0
   \   000002D0   78FFFFEA           B        ??_Insert_5
   \                     ??_Insert_10:
   \   000002D4   0800B0E1           MOVS     R0,R8
   \   000002D8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002DC   000090E5           LDR      R0,[R0, #+0]
   \   000002E0   ........           _BLF     ??_Left,??_Left??rA
   \   000002E4   000090E5           LDR      R0,[R0, #+0]
   \   000002E8   000058E1           CMP      R8,R0
   \   000002EC   0600001A           BNE      ??_Insert_11
   \   000002F0   0800B0E1           MOVS     R0,R8
   \   000002F4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   0080B0E1           MOVS     R8,R0
   \   00000300   0810B0E1           MOVS     R1,R8
   \   00000304   0400B0E1           MOVS     R0,R4
   \   00000308   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000030C   0800B0E1           MOVS     R0,R8
   \   00000310   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000314   000090E5           LDR      R0,[R0, #+0]
   \   00000318   ........           _BLF     ??_Color,??_Color??rA
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   0010C0E5           STRB     R1,[R0, #+0]
   \   00000324   0800B0E1           MOVS     R0,R8
   \   00000328   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000032C   000090E5           LDR      R0,[R0, #+0]
   \   00000330   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           _BLF     ??_Color,??_Color??rA
   \   0000033C   0010A0E3           MOV      R1,#+0
   \   00000340   0010C0E5           STRB     R1,[R0, #+0]
   \   00000344   0800B0E1           MOVS     R0,R8
   \   00000348   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000354   001090E5           LDR      R1,[R0, #+0]
   \   00000358   0400B0E1           MOVS     R0,R4
   \   0000035C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000360   54FFFFEA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000364   0400B0E1           MOVS     R0,R4
   \   00000368   ........           _BLF     ??_Root,??_Root??rA
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   ........           _BLF     ??_Color,??_Color??rA
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0010C0E5           STRB     R1,[R0, #+0]
   \   0000037C   F043BDE8           POP      {R4-R9,LR}
   \   00000380   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
   \                     ??comp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   140094E2           ADDS     R0,R4,#+20
   \   0000000C   ........           _BLF     `??operator less<AlarmBasic *> &`,`??operator less<AlarmBasic *> &??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
   \                     ??_Node:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   2090DDE5           LDRB     R9,[SP, #+32]
   \   0000001C   0900B0E1           MOVS     R0,R9
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0730B0E1           MOVS     R3,R7
   \   00000028   0620B0E1           MOVS     R2,R6
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_GenNode,??_GenNode??rA
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   108084E5           STR      R8,[R4, #+16]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F043BDE8           POP      {R4-R9,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
   \                     ??_Kfn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Kfn_1,??_Kfn??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
   \                     ??_Alnod:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Myval,??_Myval??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent_1:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right_1:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic *& _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Myval:
   \   00000000   100090E2           ADDS     R0,R0,#+16
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??const_iterator:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_GenIter,??_GenIter??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
   \                     `??operator==_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
   \                     ??_Mynode_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mynode,??_Mynode??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
   \                     ??iterator:
   \   00000000   001091E5           LDR      R1,[R1, #+0]
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??iterator_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??const_iterator,??const_iterator??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator &_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
   \                     `??operator--`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Dec,??_Dec??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
   \                     ??begin:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Lmost_1,??_Lmost??rA_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
   \                     ??max_size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??max_size,??max_size??rA
   \   00000020   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0080B0E1           MOVS     R8,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   \   00000010   0290B0E1           MOVS     R9,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Root_1,??_Root??rA_1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0070B0E1           MOVS     R7,R0
   \                     ??insert_1:
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Isnil_1,??_Isnil??rA_1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1800001A           BNE      ??insert_2
   \   00000050   0560B0E1           MOVS     R6,R5
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??_Key,??_Key??rA
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   0900B0E1           MOVS     R0,R9
   \   00000064   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000068   00B0B0E1           MOVS     R11,R0
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   ........           _BLF     ??comp,??comp??rA
   \   00000074   0A20B0E1           MOVS     R2,R10
   \   00000078   0B10B0E1           MOVS     R1,R11
   \   0000007C   ........           _BLF     `??operator()`,`??operator()??rA`
   \   00000080   0070B0E1           MOVS     R7,R0
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0400000A           BEQ      ??insert_3
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   0050B0E1           MOVS     R5,R0
   \   0000009C   E5FFFFEA           B        ??insert_1
   \                     ??insert_3:
   \   000000A0   0500B0E1           MOVS     R0,R5
   \   000000A4   ........           _BLF     ??_Right_1,??_Right??rA_1
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0050B0E1           MOVS     R5,R0
   \   000000B0   E0FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   000000B4   0610B0E1           MOVS     R1,R6
   \   000000B8   0D00B0E1           MOVS     R0,SP
   \   000000BC   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   1800000A           BEQ      ??insert_4
   \   000000C8   0400B0E1           MOVS     R0,R4
   \   000000CC   ........           _BLF     ??begin,??begin??rA
   \   000000D0   0C008DE5           STR      R0,[SP, #+12]
   \   000000D4   0C108DE2           ADD      R1,SP,#+12
   \   000000D8   0D00B0E1           MOVS     R0,SP
   \   000000DC   ........           _BLF     `??operator==_1`,`??operator==??rA_1`
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0E00000A           BEQ      ??insert_5
   \   000000E8   0930B0E1           MOVS     R3,R9
   \   000000EC   0620B0E1           MOVS     R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   000000FC   08008DE5           STR      R0,[SP, #+8]
   \   00000100   0120A0E3           MOV      R2,#+1
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   20008DE2           ADD      R0,SP,#+32
   \   0000010C   ........           _BLF     ??pair,??pair??rA
   \   00000110   20008DE2           ADD      R0,SP,#+32
   \   00000114   030090E8           LDM      R0,{R0,R1}
   \   00000118   030088E8           STM      R8,{R0,R1}
   \   0000011C   0800B0E1           MOVS     R0,R8
   \   00000120   260000EA           B        ??insert_6
   \                     ??insert_5:
   \   00000124   0D00B0E1           MOVS     R0,SP
   \   00000128   ........           _BLF     `??operator--`,`??operator--??rA`
   \                     ??insert_4:
   \   0000012C   0900B0E1           MOVS     R0,R9
   \   00000130   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000134   00A0B0E1           MOVS     R10,R0
   \   00000138   0D00B0E1           MOVS     R0,SP
   \   0000013C   ........           _BLF     ??_Mynode_1,??_Mynode??rA_1
   \   00000140   ........           _BLF     ??_Key,??_Key??rA
   \   00000144   00B0B0E1           MOVS     R11,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??comp,??comp??rA
   \   00000150   0A20B0E1           MOVS     R2,R10
   \   00000154   0B10B0E1           MOVS     R1,R11
   \   00000158   ........           _BLF     `??operator()`,`??operator()??rA`
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0E00000A           BEQ      ??insert_7
   \   00000164   0930B0E1           MOVS     R3,R9
   \   00000168   0620B0E1           MOVS     R2,R6
   \   0000016C   0710B0E1           MOVS     R1,R7
   \   00000170   0400B0E1           MOVS     R0,R4
   \   00000174   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0120A0E3           MOV      R2,#+1
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   18008DE2           ADD      R0,SP,#+24
   \   00000188   ........           _BLF     ??pair,??pair??rA
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   030090E8           LDM      R0,{R0,R1}
   \   00000194   030088E8           STM      R8,{R0,R1}
   \   00000198   0800B0E1           MOVS     R0,R8
   \   0000019C   070000EA           B        ??insert_6
   \                     ??insert_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10B0E1           MOVS     R1,SP
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??pair,??pair??rA
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   030090E8           LDM      R0,{R0,R1}
   \   000001B8   030088E8           STM      R8,{R0,R1}
   \   000001BC   0800B0E1           MOVS     R0,R8
   \                     ??insert_6:
   \   000001C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C4   F04FBDE8           POP      {R4-R11,LR}
   \   000001C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??max_size_1,??max_size??rA_1
   \   00000020   0090B0E1           MOVS     R9,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   00A0B0E1           MOVS     R10,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Head,??_Head??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0710B0E1           MOVS     R1,R7
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0A30B0E1           MOVS     R3,R10
   \   0000004C   0620B0E1           MOVS     R2,R6
   \   00000050   0010B0E1           MOVS     R1,R0
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??_Buynode,??_Buynode??rA
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   0830B0E1           MOVS     R3,R8
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000078   0810B0E1           MOVS     R1,R8
   \   0000007C   0D00B0E1           MOVS     R0,SP
   \   00000080   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
   \                     ??_Lmost_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
   \                     ??_Root_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Parent_1,??_Parent??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
   \                     ??_Head:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
   \                     ??_Buynode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C90DDE5           LDRB     R9,[SP, #+44]
   \   00000020   0D10B0E1           MOVS     R1,SP
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   00000038   00A0B0E1           MOVS     R10,R0
   \   0000003C   0A10B0E1           MOVS     R1,R10
   \   00000040   1400A0E3           MOV      R0,#+20
   \   00000044   ........           _BLF     `??operator new`,`??operator new??rA_1`
   \   00000048   00B0B0E1           MOVS     R11,R0
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0A00000A           BEQ      ??_Buynode_1
   \   00000054   0900B0E1           MOVS     R0,R9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800B0E1           MOVS     R0,R8
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0730B0E1           MOVS     R3,R7
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0B00B0E1           MOVS     R0,R11
   \   00000074   ........           _BLF     ??_Node,??_Node??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   000000EA           B        ??_Buynode_2
   \                     ??_Buynode_1:
   \   00000080   00B0A0E3           MOV      R11,#+0
   \                     ??_Buynode_2:
   \   00000084   0A00B0E1           MOVS     R0,R10
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F04FBDE8           POP      {R4-R11,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
   \                     ??_Kfn_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AiLevelSwitchSensor_mV::AiLevelSwitchSensor_mV(int SnsType)
   \                     ??AiLevelSwitchSensor_mV:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     10          {
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000018   80029FE5           LDR      R0,??AiLevelSwitchSensor_mV_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     11              Type = SnsType;
   \   00000020   A05084E5           STR      R5,[R4, #+160]
     12              ADConfigData.CalError     = false;
   \   00000024   6901D4E5           LDRB     R0,[R4, #+361]
   \   00000028   6811D4E5           LDRB     R1,[R4, #+360]
   \   0000002C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000030   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000034   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000038   6611D4E5           LDRB     R1,[R4, #+358]
   \   0000003C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000040   0200D0E3           BICS     R0,R0,#0x2
   \   00000044   6601C4E5           STRB     R0,[R4, #+358]
   \   00000048   2004B0E1           LSRS     R0,R0,#+8
   \   0000004C   6701C4E5           STRB     R0,[R4, #+359]
   \   00000050   2004B0E1           LSRS     R0,R0,#+8
   \   00000054   6801C4E5           STRB     R0,[R4, #+360]
   \   00000058   2004B0E1           LSRS     R0,R0,#+8
   \   0000005C   6901C4E5           STRB     R0,[R4, #+361]
     13              ADConfigData.ConvError    = false;
   \   00000060   6901D4E5           LDRB     R0,[R4, #+361]
   \   00000064   6811D4E5           LDRB     R1,[R4, #+360]
   \   00000068   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000006C   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000070   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000074   6611D4E5           LDRB     R1,[R4, #+358]
   \   00000078   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000007C   0100D0E3           BICS     R0,R0,#0x1
   \   00000080   6601C4E5           STRB     R0,[R4, #+358]
   \   00000084   2004B0E1           LSRS     R0,R0,#+8
   \   00000088   6701C4E5           STRB     R0,[R4, #+359]
   \   0000008C   2004B0E1           LSRS     R0,R0,#+8
   \   00000090   6801C4E5           STRB     R0,[R4, #+360]
   \   00000094   2004B0E1           LSRS     R0,R0,#+8
   \   00000098   6901C4E5           STRB     R0,[R4, #+361]
     14              ADConfigData.EEP_PCStatus = AD_EEPROM_OK;
   \   0000009C   6901D4E5           LDRB     R0,[R4, #+361]
   \   000000A0   6811D4E5           LDRB     R1,[R4, #+360]
   \   000000A4   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000A8   6711D4E5           LDRB     R1,[R4, #+359]
   \   000000AC   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000B0   6611D4E5           LDRB     R1,[R4, #+358]
   \   000000B4   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000B8   700ED0E3           BICS     R0,R0,#0x700
   \   000000BC   400F90E3           ORRS     R0,R0,#0x100
   \   000000C0   6601C4E5           STRB     R0,[R4, #+358]
   \   000000C4   2004B0E1           LSRS     R0,R0,#+8
   \   000000C8   6701C4E5           STRB     R0,[R4, #+359]
   \   000000CC   2004B0E1           LSRS     R0,R0,#+8
   \   000000D0   6801C4E5           STRB     R0,[R4, #+360]
   \   000000D4   2004B0E1           LSRS     R0,R0,#+8
   \   000000D8   6901C4E5           STRB     R0,[R4, #+361]
     15              ADConfigData.EEPromStatus = AD_EEPROM_OK;
   \   000000DC   6901D4E5           LDRB     R0,[R4, #+361]
   \   000000E0   6811D4E5           LDRB     R1,[R4, #+360]
   \   000000E4   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000E8   6711D4E5           LDRB     R1,[R4, #+359]
   \   000000EC   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000F0   6611D4E5           LDRB     R1,[R4, #+358]
   \   000000F4   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000F8   F00CD0E3           BICS     R0,R0,#0xF000
   \   000000FC   400D90E3           ORRS     R0,R0,#0x1000
   \   00000100   6601C4E5           STRB     R0,[R4, #+358]
   \   00000104   2004B0E1           LSRS     R0,R0,#+8
   \   00000108   6701C4E5           STRB     R0,[R4, #+359]
   \   0000010C   2004B0E1           LSRS     R0,R0,#+8
   \   00000110   6801C4E5           STRB     R0,[R4, #+360]
   \   00000114   2004B0E1           LSRS     R0,R0,#+8
   \   00000118   6901C4E5           STRB     R0,[R4, #+361]
     16              ADConfigData.EEPUsePCData = false;
   \   0000011C   6901D4E5           LDRB     R0,[R4, #+361]
   \   00000120   6811D4E5           LDRB     R1,[R4, #+360]
   \   00000124   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000128   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000012C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000130   6611D4E5           LDRB     R1,[R4, #+358]
   \   00000134   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000138   800ED0E3           BICS     R0,R0,#0x800
   \   0000013C   6601C4E5           STRB     R0,[R4, #+358]
   \   00000140   2004B0E1           LSRS     R0,R0,#+8
   \   00000144   6701C4E5           STRB     R0,[R4, #+359]
   \   00000148   2004B0E1           LSRS     R0,R0,#+8
   \   0000014C   6801C4E5           STRB     R0,[R4, #+360]
   \   00000150   2004B0E1           LSRS     R0,R0,#+8
   \   00000154   6901C4E5           STRB     R0,[R4, #+361]
     17              ADConfigData.FoundSensor  = AD_NO_SNS;
   \   00000158   6901D4E5           LDRB     R0,[R4, #+361]
   \   0000015C   6811D4E5           LDRB     R1,[R4, #+360]
   \   00000160   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000164   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000168   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000016C   6611D4E5           LDRB     R1,[R4, #+358]
   \   00000170   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000174   6000D0E3           BICS     R0,R0,#0x60
   \   00000178   6601C4E5           STRB     R0,[R4, #+358]
   \   0000017C   2004B0E1           LSRS     R0,R0,#+8
   \   00000180   6701C4E5           STRB     R0,[R4, #+359]
   \   00000184   2004B0E1           LSRS     R0,R0,#+8
   \   00000188   6801C4E5           STRB     R0,[R4, #+360]
   \   0000018C   2004B0E1           LSRS     R0,R0,#+8
   \   00000190   6901C4E5           STRB     R0,[R4, #+361]
     18              ADConfigData.NewSensor    = false;
   \   00000194   6901D4E5           LDRB     R0,[R4, #+361]
   \   00000198   6811D4E5           LDRB     R1,[R4, #+360]
   \   0000019C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001A0   6711D4E5           LDRB     R1,[R4, #+359]
   \   000001A4   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001A8   6611D4E5           LDRB     R1,[R4, #+358]
   \   000001AC   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001B0   8000D0E3           BICS     R0,R0,#0x80
   \   000001B4   6601C4E5           STRB     R0,[R4, #+358]
   \   000001B8   2004B0E1           LSRS     R0,R0,#+8
   \   000001BC   6701C4E5           STRB     R0,[R4, #+359]
   \   000001C0   2004B0E1           LSRS     R0,R0,#+8
   \   000001C4   6801C4E5           STRB     R0,[R4, #+360]
   \   000001C8   2004B0E1           LSRS     R0,R0,#+8
   \   000001CC   6901C4E5           STRB     R0,[R4, #+361]
     19              ADConfigData.PCSensor     = AD_NO_SNS;
   \   000001D0   6901D4E5           LDRB     R0,[R4, #+361]
   \   000001D4   6811D4E5           LDRB     R1,[R4, #+360]
   \   000001D8   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001DC   6711D4E5           LDRB     R1,[R4, #+359]
   \   000001E0   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001E4   6611D4E5           LDRB     R1,[R4, #+358]
   \   000001E8   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000001EC   0C00D0E3           BICS     R0,R0,#0xC
   \   000001F0   6601C4E5           STRB     R0,[R4, #+358]
   \   000001F4   2004B0E1           LSRS     R0,R0,#+8
   \   000001F8   6701C4E5           STRB     R0,[R4, #+359]
   \   000001FC   2004B0E1           LSRS     R0,R0,#+8
   \   00000200   6801C4E5           STRB     R0,[R4, #+360]
   \   00000204   2004B0E1           LSRS     R0,R0,#+8
   \   00000208   6901C4E5           STRB     R0,[R4, #+361]
     20              ADConfigData.UsePCSetUp   = false;
   \   0000020C   6901D4E5           LDRB     R0,[R4, #+361]
   \   00000210   6811D4E5           LDRB     R1,[R4, #+360]
   \   00000214   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000218   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000021C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000220   6611D4E5           LDRB     R1,[R4, #+358]
   \   00000224   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000228   1000D0E3           BICS     R0,R0,#0x10
   \   0000022C   6601C4E5           STRB     R0,[R4, #+358]
   \   00000230   2004B0E1           LSRS     R0,R0,#+8
   \   00000234   6701C4E5           STRB     R0,[R4, #+359]
   \   00000238   2004B0E1           LSRS     R0,R0,#+8
   \   0000023C   6801C4E5           STRB     R0,[R4, #+360]
   \   00000240   2004B0E1           LSRS     R0,R0,#+8
   \   00000244   6901C4E5           STRB     R0,[R4, #+361]
     21          
     22              AlarmSensorConCalError *SnsHWErrAlPtr = new AlarmSensorConCalError( this,&ADConfigData);
   \   00000248   F000A0E3           MOV      R0,#+240
   \   0000024C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000250   0070B0E1           MOVS     R7,R0
   \   00000254   000057E3           CMP      R7,#+0
   \   00000258   0700000A           BEQ      ??AiLevelSwitchSensor_mV_2
   \   0000025C   6600A0E3           MOV      R0,#+102
   \   00000260   400F80E3           ORR      R0,R0,#0x100
   \   00000264   042090E0           ADDS     R2,R0,R4
   \   00000268   0410B0E1           MOVS     R1,R4
   \   0000026C   0700B0E1           MOVS     R0,R7
   \   00000270   ........           _BLF     ??AlarmSensorConCalError,??AlarmSensorConCalError??rA
   \   00000274   0760B0E1           MOVS     R6,R7
   \   00000278   000000EA           B        ??AiLevelSwitchSensor_mV_3
   \                     ??AiLevelSwitchSensor_mV_2:
   \   0000027C   0060A0E3           MOV      R6,#+0
     23              AlarmSet.insert(SnsHWErrAlPtr);
   \                     ??AiLevelSwitchSensor_mV_3:
   \   00000280   0620B0E1           MOVS     R2,R6
   \   00000284   C01094E2           ADDS     R1,R4,#+192
   \   00000288   0D00B0E1           MOVS     R0,SP
   \   0000028C   ........           _BLF     ??insert,??insert??rA
     24          
     25          }
   \   00000290   0400B0E1           MOVS     R0,R4
   \   00000294   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000298   F040BDE8           POP      {R4-R7,LR}
   \   0000029C   1EFF2FE1           BX       LR               ;; return
   \                     ??AiLevelSwitchSensor_mV_1:
   \   000002A0   ........           DC32     ??__vtbl
     26          //---------------------------------------------------------------------------
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          AiLevelSwitchSensor_mV::~AiLevelSwitchSensor_mV(void)
     29          {
   \                     `?~AiLevelSwitchSensor_mV`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AiLevelSwitchSensor_mV_1`
     30          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AiLevelSwitchSensor_mV_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AiLevelSwitchSensor_mV_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     31          //---------------------------------------------------------------------------
     32          ///////////////////////////////////////////////////////////////
     33          //
     34          // Routines for the Configuration
     35          //
     36          ///////////////////////////////////////////////////////////////
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          AnsiString AiLevelSwitchSensor_mV::MakeConfigString(int ExtraTabs)
     39          {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   62DF4DE2           SUB      SP,SP,#+392
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     40              AnsiString TabStr1= AnsiString::StringOfChar('\t',1+ExtraTabs);
   \   00000014   012096E2           ADDS     R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     41              AnsiString TabStr2= AnsiString::StringOfChar('\t',2+ExtraTabs);
   \   00000024   022096E2           ADDS     R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     42              AnsiString TabStr3= AnsiString::StringOfChar('\t',3+ExtraTabs);
   \   00000034   032096E2           ADDS     R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   540F8DE2           ADD      R0,SP,#+336
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     43              AnsiString TabStr4= AnsiString::StringOfChar('\t',4+ExtraTabs);
   \   00000044   042096E2           ADDS     R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     44              AnsiString TabStr5= AnsiString::StringOfChar('\t',5+ExtraTabs);
   \   00000054   052096E2           ADDS     R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   460F8DE2           ADD      R0,SP,#+280
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     45              AnsiString TabStr6= AnsiString::StringOfChar('\t',6+ExtraTabs);
   \   00000064   062096E2           ADDS     R2,R6,#+6
   \   00000068   0910A0E3           MOV      R1,#+9
   \   0000006C   FC008DE2           ADD      R0,SP,#+252
   \   00000070   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     46              AnsiString LocalString;
   \   00000074   0500B0E1           MOVS     R0,R5
   \   00000078   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     47              LocalString +=TabStr1+KeyWord(Type)+CrLfStr;
   \   0000007C   A01094E5           LDR      R1,[R4, #+160]
   \   00000080   8C008DE2           ADD      R0,SP,#+140
   \   00000084   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000088   8C208DE2           ADD      R2,SP,#+140
   \   0000008C   0D10B0E1           MOVS     R1,SP
   \   00000090   A8008DE2           ADD      R0,SP,#+168
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   EC209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   0000009C   A8108DE2           ADD      R1,SP,#+168
   \   000000A0   C4008DE2           ADD      R0,SP,#+196
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   C4108DE2           ADD      R1,SP,#+196
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000B4   C4008DE2           ADD      R0,SP,#+196
   \   000000B8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000BC   A8008DE2           ADD      R0,SP,#+168
   \   000000C0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000C4   8C008DE2           ADD      R0,SP,#+140
   \   000000C8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     48              LocalString += AnalogInput::MakeConfigString();   //common
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   70108DE2           ADD      R1,SP,#+112
   \   000000D4   0400B0E1           MOVS     R0,R4
   \   000000D8   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000DC   70108DE2           ADD      R1,SP,#+112
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000E8   70008DE2           ADD      R0,SP,#+112
   \   000000EC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     49          
     50              LocalString +=TabStr1+KeyWord(C_AI_END)+CrLfStr;
   \   000000F0   9810A0E3           MOV      R1,#+152
   \   000000F4   801E81E3           ORR      R1,R1,#0x800
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   1C208DE2           ADD      R2,SP,#+28
   \   00000104   0D10B0E1           MOVS     R1,SP
   \   00000108   38008DE2           ADD      R0,SP,#+56
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   74209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000114   38108DE2           ADD      R1,SP,#+56
   \   00000118   54008DE2           ADD      R0,SP,#+84
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   54108DE2           ADD      R1,SP,#+84
   \   00000124   0500B0E1           MOVS     R0,R5
   \   00000128   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   0000012C   54008DE2           ADD      R0,SP,#+84
   \   00000130   ........           _BLF     `?~string`,`?~string??rA`
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     `?~string`,`?~string??rA`
   \   0000013C   1C008DE2           ADD      R0,SP,#+28
   \   00000140   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     51              LocalString += CrLfStr;
   \   00000144   40109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   00000148   0500B0E1           MOVS     R0,R5
   \   0000014C   ........           _BLF     `??operator+=`,`??operator+=??rA`
     52          
     53              return(LocalString);
   \   00000150   FC008DE2           ADD      R0,SP,#+252
   \   00000154   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000158   460F8DE2           ADD      R0,SP,#+280
   \   0000015C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000160   4D0F8DE2           ADD      R0,SP,#+308
   \   00000164   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000168   540F8DE2           ADD      R0,SP,#+336
   \   0000016C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000170   5B0F8DE2           ADD      R0,SP,#+364
   \   00000174   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000178   0D00B0E1           MOVS     R0,SP
   \   0000017C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000180   62DF8DE2           ADD      SP,SP,#+392      ;; stack cleaning
   \   00000184   7040BDE8           POP      {R4-R6,LR}
   \   00000188   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   0000018C   ........           DC32     CrLfStr
     54              //ConfigString.AddString(LocalString);
     55          }
     56          //---------------------------------------------------------------------------
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          bool AiLevelSwitchSensor_mV::LoadConfigString(TSNConfigString &ConfigString)
     59          {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     60              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0060B0E1           MOVS     R6,R0
     61              int ErrorLine=0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     62              int Key;
     63              do {
     64                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20B0E1           MOVS     R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0500B0E1           MOVS     R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     65                  if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A00000A           BEQ      ??LoadConfigString_4
     66                      if ( ErrorLine != EOF ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   2900000A           BEQ      ??LoadConfigString_5
     67                          GiveConfigWarning("Voltage level switch sensor",ErrorLine);
   \   0000004C   DC109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Voltage level switch ...">`
   \   00000050   74008DE2           ADD      R0,SP,#+116
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   74008DE2           ADD      R0,SP,#+116
   \   00000064   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000068   210000EA           B        ??LoadConfigString_5
     68                      }
     69                  } else {
     70                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   58008DE2           ADD      R0,SP,#+88
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   58008DE2           ADD      R0,SP,#+88
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     71                      switch ( Key ) {
   \   00000088   0700B0E1           MOVS     R0,R7
   \   0000008C   980040E2           SUB      R0,R0,#+152
   \   00000090   800E40E2           SUB      R0,R0,#+2048
   \   00000094   010050E3           CMP      R0,#+1
   \   00000098   0300008A           BHI      ??LoadConfigString_7
   \   0000009C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000000A0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000000A8   120F0000           DC8      +18,+15,+0,+0
     72                      default:
     73                          GiveConfigWarning("Voltage level switch sensor",InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_7:
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   3C008DE2           ADD      R0,SP,#+60
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   0080B0E1           MOVS     R8,R0
   \   000000BC   6C109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Voltage level switch ...">`
   \   000000C0   20008DE2           ADD      R0,SP,#+32
   \   000000C4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000C8   1C2095E5           LDR      R2,[R5, #+28]
   \   000000CC   0810B0E1           MOVS     R1,R8
   \   000000D0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000000D4   3C008DE2           ADD      R0,SP,#+60
   \   000000D8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000E4   020000EA           B        ??LoadConfigString_5
     74                          break;
     75                      case C_AI_START_COMMON:
     76                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_8:
   \   000000E8   0510B0E1           MOVS     R1,R5
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     77                          break;
     78                      case C_AI_END:
     79                          break;
     80                      }
     81                  }
     82              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_5:
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000FC   000056E3           CMP      R6,#+0
   \   00000100   0600000A           BEQ      ??LoadConfigString_9
   \   00000104   00009DE5           LDR      R0,[SP, #+0]
   \   00000108   010070E3           CMN      R0,#+1
   \   0000010C   0300000A           BEQ      ??LoadConfigString_9
   \   00000110   9800A0E3           MOV      R0,#+152
   \   00000114   800E80E3           ORR      R0,R0,#0x800
   \   00000118   000057E1           CMP      R7,R0
   \   0000011C   BFFFFF1A           BNE      ??LoadConfigString_3
     83              return(NoError);
   \                     ??LoadConfigString_9:
   \   00000120   0600B0E1           MOVS     R0,R6
   \   00000124   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   00000128   F041BDE8           POP      {R4-R8,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_6:
   \   00000130   ........           DC32     `?<Constant "Voltage level switch ...">`
     84          }
     85          //---------------------------------------------------------------------------
     86          
     87          
     88          ///////////////////////////////////////////////////////////////
     89          //
     90          // Routines for the librarian for input
     91          //
     92          ///////////////////////////////////////////////////////////////
     93          
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          int AiLevelSwitchSensor_mV::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     96          {
   \                     ??PutValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   4080DDE5           LDRB     R8,[SP, #+64]
   \   0000001C   44909DE5           LDR      R9,[SP, #+68]
     97              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00A0B0E1           MOVS     R10,R0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
     98              switch ( ValueId ) {
     99              case SVT_AI_OFFSET   :
    100              case SVT_AI_CALC_VAL :
    101              default:
    102                  Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000030   0710B0E1           MOVS     R1,R7
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0810B0E1           MOVS     R1,R8
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   0030B0E1           MOVS     R3,R0
   \   00000050   0620B0E1           MOVS     R2,R6
   \   00000054   0510B0E1           MOVS     R1,R5
   \   00000058   0400B0E1           MOVS     R0,R4
   \   0000005C   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   00A0B0E1           MOVS     R10,R0
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    103                  break;
    104              }
    105              if ( Status==E_NO_ERR ) {
   \   00000070   00005AE3           CMP      R10,#+0
   \   00000074   0500001A           BNE      ??PutValue_2
    106                  SetModifiedFlag();
   \   00000078   A40094E5           LDR      R0,[R4, #+164]
   \   0000007C   541090E2           ADDS     R1,R0,#+84
   \   00000080   0400B0E1           MOVS     R0,R4
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   0FE0A0E1           MOV      LR,PC
   \   0000008C   11FF2FE1           BX       R1
    107              }
    108              if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000090   000059E3           CMP      R9,#+0
   \   00000094   0100000A           BEQ      ??PutValue_3
    109                  *UnitId = ValUnitId;
   \   00000098   00009DE5           LDR      R0,[SP, #+0]
   \   0000009C   000089E5           STR      R0,[R9, #+0]
    110              }
    111              return(Status);
   \                     ??PutValue_3:
   \   000000A0   0A00B0E1           MOVS     R0,R10
   \   000000A4   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000A8   F047BDE8           POP      {R4-R10,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
    112          }
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          int  AiLevelSwitchSensor_mV::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    115          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
    116              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
    117              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1600008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00131307           DC8      +0,+19,+19,+7
    118          	case SVT_AI_OFFSET      :
    119          		// Note that the unit is in Volt for offset and NO_UNIT for calculated value.
    120                  // This should maybe be modified later
    121                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
    122          		DecPnt     = 3;
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   000088E5           STR      R0,[R8, #+0]
    123          		Unit       = VOLTAGE_UNIT;
   \   00000058   1200A0E3           MOV      R0,#+18
   \   0000005C   000089E5           STR      R0,[R9, #+0]
   \   00000060   160000EA           B        ??GetValue_5
    124                  break;
    125              case SVT_AI_CALC_VAL    :
    126                  MyRetValue = Calculate();
   \                     ??GetValue_6:
   \   00000064   A40094E5           LDR      R0,[R4, #+164]
   \   00000068   601090E2           ADDS     R1,R0,#+96
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   11FF2FE1           BX       R1
   \   0000007C   000087E5           STR      R0,[R7, #+0]
    127                  DecPnt     = 0;
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   000088E5           STR      R0,[R8, #+0]
    128                  Unit       = NO_UNIT;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   000089E5           STR      R0,[R9, #+0]
   \   00000090   0A0000EA           B        ??GetValue_5
    129                  break;
    130              default:
    131                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000094   0900B0E1           MOVS     R0,R9
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0800B0E1           MOVS     R0,R8
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0730B0E1           MOVS     R3,R7
   \   000000A8   0620B0E1           MOVS     R2,R6
   \   000000AC   0510B0E1           MOVS     R1,R5
   \   000000B0   0400B0E1           MOVS     R0,R4
   \   000000B4   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   00A0B0E1           MOVS     R10,R0
    132                  break;
    133              }
    134              return(Status);
   \                     ??GetValue_5:
   \   000000C0   0A00B0E1           MOVS     R0,R10
   \   000000C4   F047BDE8           POP      {R4-R10,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    135          }
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          int AiLevelSwitchSensor_mV::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    138          {
   \                     ??GetStringValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   62DF4DE2           SUB      SP,SP,#+392
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    139              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
    140              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   2401000A           BEQ      ??GetStringValue_2
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   481D81E3           ORR      R1,R1,#0x1200
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   2400000A           BEQ      ??GetStringValue_3
   \   0000003C   0310A0E3           MOV      R1,#+3
   \   00000040   481D81E3           ORR      R1,R1,#0x1200
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   7500000A           BEQ      ??GetStringValue_4
   \   0000004C   0410A0E3           MOV      R1,#+4
   \   00000050   481D81E3           ORR      R1,R1,#0x1200
   \   00000054   010050E1           CMP      R0,R1
   \   00000058   2F00000A           BEQ      ??GetStringValue_5
   \   0000005C   0510A0E3           MOV      R1,#+5
   \   00000060   481D81E3           ORR      R1,R1,#0x1200
   \   00000064   010050E1           CMP      R0,R1
   \   00000068   EA00000A           BEQ      ??GetStringValue_6
   \   0000006C   0610A0E3           MOV      R1,#+6
   \   00000070   481D81E3           ORR      R1,R1,#0x1200
   \   00000074   010050E1           CMP      R0,R1
   \   00000078   BD00000A           BEQ      ??GetStringValue_7
   \   0000007C   0710A0E3           MOV      R1,#+7
   \   00000080   481D81E3           ORR      R1,R1,#0x1200
   \   00000084   010050E1           CMP      R0,R1
   \   00000088   D000000A           BEQ      ??GetStringValue_8
   \   0000008C   0810A0E3           MOV      R1,#+8
   \   00000090   481D81E3           ORR      R1,R1,#0x1200
   \   00000094   010050E1           CMP      R0,R1
   \   00000098   F000000A           BEQ      ??GetStringValue_9
   \   0000009C   0910A0E3           MOV      R1,#+9
   \   000000A0   481D81E3           ORR      R1,R1,#0x1200
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   9900000A           BEQ      ??GetStringValue_10
   \   000000AC   0A10A0E3           MOV      R1,#+10
   \   000000B0   481D81E3           ORR      R1,R1,#0x1200
   \   000000B4   010050E1           CMP      R0,R1
   \   000000B8   8200000A           BEQ      ??GetStringValue_11
   \   000000BC   0B10A0E3           MOV      R1,#+11
   \   000000C0   481D81E3           ORR      R1,R1,#0x1200
   \   000000C4   010050E1           CMP      R0,R1
   \   000000C8   6C00000A           BEQ      ??GetStringValue_12
   \   000000CC   060100EA           B        ??GetStringValue_13
    141              case SVT_IO_CH_CONV_ERROR   :
    142                  MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_ERROR_STAT,ADConfigData.ConvError);
   \                     ??GetStringValue_3:
   \   000000D0   6601D4E5           LDRB     R0,[R4, #+358]
   \   000000D4   6791D4E5           LDRB     R9,[R4, #+359]
   \   000000D8   68A1D4E5           LDRB     R10,[R4, #+360]
   \   000000DC   69B1D4E5           LDRB     R11,[R4, #+361]
   \   000000E0   010010E2           ANDS     R0,R0,#0x1
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   0730A0E3           MOV      R3,#+7
   \   000000EC   20049FE5           LDR      R0,??GetStringValue_14  ;; SizeofStatusText
   \   000000F0   002090E5           LDR      R2,[R0, #+0]
   \   000000F4   1C149FE5           LDR      R1,??GetStringValue_14+0x4  ;; StatusText
   \   000000F8   5C0F8DE2           ADD      R0,SP,#+368
   \   000000FC   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000100   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000104   5B1F8DE2           ADD      R1,SP,#+364
   \   00000108   0700B0E1           MOVS     R0,R7
   \   0000010C   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000110   5B0F8DE2           ADD      R0,SP,#+364
   \   00000114   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000118   F90000EA           B        ??GetStringValue_15
    143                  break;
    144              case SVT_IO_CH_CNV_CAL_ERROR:
    145                  if ( ADConfigData.ConvError && ADConfigData.CalError ) {
   \                     ??GetStringValue_5:
   \   0000011C   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000120   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000124   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000128   6931D4E5           LDRB     R3,[R4, #+361]
   \   0000012C   010010E3           TST      R0,#0x1
   \   00000130   1000000A           BEQ      ??GetStringValue_16
   \   00000134   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000138   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000013C   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000140   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000144   020010E2           ANDS     R0,R0,#0x2
   \   00000148   A000B0E1           LSRS     R0,R0,#+1
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0800000A           BEQ      ??GetStringValue_16
    146                      MyString = FindDictionaryWord(L_WORD624);//CnvCal
   \   00000154   9C1FA0E3           MOV      R1,#+624
   \   00000158   70008DE2           ADD      R0,SP,#+112
   \   0000015C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000160   70108DE2           ADD      R1,SP,#+112
   \   00000164   0700B0E1           MOVS     R0,R7
   \   00000168   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   0000016C   70008DE2           ADD      R0,SP,#+112
   \   00000170   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000174   E20000EA           B        ??GetStringValue_15
    147                  } else if ( ADConfigData.ConvError ) {
   \                     ??GetStringValue_16:
   \   00000178   6601D4E5           LDRB     R0,[R4, #+358]
   \   0000017C   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000180   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000184   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000188   010010E3           TST      R0,#0x1
   \   0000018C   0900000A           BEQ      ??GetStringValue_17
    148                      MyString = FindDictionaryWord(L_WORD625);//CnvErr
   \   00000190   7110A0E3           MOV      R1,#+113
   \   00000194   801F81E3           ORR      R1,R1,#0x200
   \   00000198   54008DE2           ADD      R0,SP,#+84
   \   0000019C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000001A0   54108DE2           ADD      R1,SP,#+84
   \   000001A4   0700B0E1           MOVS     R0,R7
   \   000001A8   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000001AC   54008DE2           ADD      R0,SP,#+84
   \   000001B0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000001B4   D20000EA           B        ??GetStringValue_15
    149                  } else if ( ADConfigData.CalError ) {
   \                     ??GetStringValue_17:
   \   000001B8   6601D4E5           LDRB     R0,[R4, #+358]
   \   000001BC   6711D4E5           LDRB     R1,[R4, #+359]
   \   000001C0   6821D4E5           LDRB     R2,[R4, #+360]
   \   000001C4   6931D4E5           LDRB     R3,[R4, #+361]
   \   000001C8   020010E2           ANDS     R0,R0,#0x2
   \   000001CC   A000B0E1           LSRS     R0,R0,#+1
   \   000001D0   000050E3           CMP      R0,#+0
   \   000001D4   0900000A           BEQ      ??GetStringValue_18
    150                      MyString = FindDictionaryWord(L_WORD626);//CalErr
   \   000001D8   7210A0E3           MOV      R1,#+114
   \   000001DC   801F81E3           ORR      R1,R1,#0x200
   \   000001E0   38008DE2           ADD      R0,SP,#+56
   \   000001E4   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000001E8   38108DE2           ADD      R1,SP,#+56
   \   000001EC   0700B0E1           MOVS     R0,R7
   \   000001F0   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000001F4   38008DE2           ADD      R0,SP,#+56
   \   000001F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000001FC   C00000EA           B        ??GetStringValue_15
    151                  } else {
    152                      MyString = FindDictionaryWord(L_WORD161);//OK
   \                     ??GetStringValue_18:
   \   00000200   A110A0E3           MOV      R1,#+161
   \   00000204   1C008DE2           ADD      R0,SP,#+28
   \   00000208   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000020C   1C108DE2           ADD      R1,SP,#+28
   \   00000210   0700B0E1           MOVS     R0,R7
   \   00000214   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000218   1C008DE2           ADD      R0,SP,#+28
   \   0000021C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000220   B70000EA           B        ??GetStringValue_15
    153                  }
    154                  break;
    155              case SVT_IO_CH_CAL_ERROR    :
    156                  MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_ERROR_STAT,ADConfigData.CalError);
   \                     ??GetStringValue_4:
   \   00000224   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000228   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000022C   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000230   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000234   020010E3           TST      R0,#0x2
   \   00000238   0100000A           BEQ      ??GetStringValue_19
   \   0000023C   0100A0E3           MOV      R0,#+1
   \   00000240   000000EA           B        ??GetStringValue_20
   \                     ??GetStringValue_19:
   \   00000244   0000A0E3           MOV      R0,#+0
   \                     ??GetStringValue_20:
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   0730A0E3           MOV      R3,#+7
   \   00000250   BC029FE5           LDR      R0,??GetStringValue_14  ;; SizeofStatusText
   \   00000254   002090E5           LDR      R2,[R0, #+0]
   \   00000258   B8129FE5           LDR      R1,??GetStringValue_14+0x4  ;; StatusText
   \   0000025C   550F8DE2           ADD      R0,SP,#+340
   \   00000260   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000264   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000268   541F8DE2           ADD      R1,SP,#+336
   \   0000026C   0700B0E1           MOVS     R0,R7
   \   00000270   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000274   540F8DE2           ADD      R0,SP,#+336
   \   00000278   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000027C   A00000EA           B        ??GetStringValue_15
    157                  break;
    158              case SVT_IO_CH_EEP_SNS_STAT  :
    159                  MyString = FindDictionaryWord(SCADCard::EEPromInfo[ADConfigData.EEPromStatus]);
   \                     ??GetStringValue_12:
   \   00000280   6691D4E5           LDRB     R9,[R4, #+358]
   \   00000284   6701D4E5           LDRB     R0,[R4, #+359]
   \   00000288   68A1D4E5           LDRB     R10,[R4, #+360]
   \   0000028C   69B1D4E5           LDRB     R11,[R4, #+361]
   \   00000290   0004B0E1           LSLS     R0,R0,#+8
   \   00000294   2006B0E1           LSRS     R0,R0,#+12
   \   00000298   0410A0E3           MOV      R1,#+4
   \   0000029C   78229FE5           LDR      R2,??GetStringValue_14+0x8  ;; ??EEPromInfo
   \   000002A0   912020E0           MLA      R0,R1,R0,R2
   \   000002A4   001090E5           LDR      R1,[R0, #+0]
   \   000002A8   4D0F8DE2           ADD      R0,SP,#+308
   \   000002AC   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000002B0   4D1F8DE2           ADD      R1,SP,#+308
   \   000002B4   0700B0E1           MOVS     R0,R7
   \   000002B8   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000002BC   4D0F8DE2           ADD      R0,SP,#+308
   \   000002C0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000002C4   8E0000EA           B        ??GetStringValue_15
    160                  break;
    161              case SVT_IO_CH_EEP_PC_STAT  :
    162                  MyString = FindDictionaryWord(SCADCard::EEPromInfo[ADConfigData.EEP_PCStatus]);
   \                     ??GetStringValue_11:
   \   000002C8   6691D4E5           LDRB     R9,[R4, #+358]
   \   000002CC   6701D4E5           LDRB     R0,[R4, #+359]
   \   000002D0   68A1D4E5           LDRB     R10,[R4, #+360]
   \   000002D4   69B1D4E5           LDRB     R11,[R4, #+361]
   \   000002D8   701EA0E3           MOV      R1,#+1792
   \   000002DC   000411E0           ANDS     R0,R1,R0, LSL #+8
   \   000002E0   2004B0E1           LSRS     R0,R0,#+8
   \   000002E4   0410A0E3           MOV      R1,#+4
   \   000002E8   2C229FE5           LDR      R2,??GetStringValue_14+0x8  ;; ??EEPromInfo
   \   000002EC   912020E0           MLA      R0,R1,R0,R2
   \   000002F0   001090E5           LDR      R1,[R0, #+0]
   \   000002F4   460F8DE2           ADD      R0,SP,#+280
   \   000002F8   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000002FC   461F8DE2           ADD      R1,SP,#+280
   \   00000300   0700B0E1           MOVS     R0,R7
   \   00000304   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000308   460F8DE2           ADD      R0,SP,#+280
   \   0000030C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000310   7B0000EA           B        ??GetStringValue_15
    163                  break;
    164              case SVT_IO_CH_EEP_USE_PCDATA:
    165                  MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData.EEPUsePCData);
   \                     ??GetStringValue_10:
   \   00000314   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000318   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000031C   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000320   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000324   809EA0E3           MOV      R9,#+2048
   \   00000328   010419E1           TST      R9,R1, LSL #+8
   \   0000032C   0100000A           BEQ      ??GetStringValue_21
   \   00000330   0100A0E3           MOV      R0,#+1
   \   00000334   000000EA           B        ??GetStringValue_22
   \                     ??GetStringValue_21:
   \   00000338   0000A0E3           MOV      R0,#+0
   \                     ??GetStringValue_22:
   \   0000033C   01002DE9           PUSH     {R0}
   \   00000340   0430A0E3           MOV      R3,#+4
   \   00000344   C8019FE5           LDR      R0,??GetStringValue_14  ;; SizeofStatusText
   \   00000348   002090E5           LDR      R2,[R0, #+0]
   \   0000034C   C4119FE5           LDR      R1,??GetStringValue_14+0x4  ;; StatusText
   \   00000350   400F8DE2           ADD      R0,SP,#+256
   \   00000354   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   00000358   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000035C   FC108DE2           ADD      R1,SP,#+252
   \   00000360   0700B0E1           MOVS     R0,R7
   \   00000364   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000368   FC008DE2           ADD      R0,SP,#+252
   \   0000036C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000370   630000EA           B        ??GetStringValue_15
    166                  break;
    167              case SVT_IO_CH_USE_PC_SETUP  :
    168                  MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData.UsePCSetUp);
   \                     ??GetStringValue_7:
   \   00000374   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000378   6711D4E5           LDRB     R1,[R4, #+359]
   \   0000037C   6821D4E5           LDRB     R2,[R4, #+360]
   \   00000380   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000384   100010E3           TST      R0,#0x10
   \   00000388   0100000A           BEQ      ??GetStringValue_23
   \   0000038C   0100A0E3           MOV      R0,#+1
   \   00000390   000000EA           B        ??GetStringValue_24
   \                     ??GetStringValue_23:
   \   00000394   0000A0E3           MOV      R0,#+0
   \                     ??GetStringValue_24:
   \   00000398   01002DE9           PUSH     {R0}
   \   0000039C   0430A0E3           MOV      R3,#+4
   \   000003A0   6C019FE5           LDR      R0,??GetStringValue_14  ;; SizeofStatusText
   \   000003A4   002090E5           LDR      R2,[R0, #+0]
   \   000003A8   68119FE5           LDR      R1,??GetStringValue_14+0x4  ;; StatusText
   \   000003AC   E4008DE2           ADD      R0,SP,#+228
   \   000003B0   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   000003B4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000003B8   E0108DE2           ADD      R1,SP,#+224
   \   000003BC   0700B0E1           MOVS     R0,R7
   \   000003C0   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000003C4   E0008DE2           ADD      R0,SP,#+224
   \   000003C8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000003CC   4C0000EA           B        ??GetStringValue_15
    169                  break;
    170              case SVT_IO_CH_AD_SENSOR :
    171                  MyString = (AnsiString)SCADCard::ADSensorType[ADConfigData.FoundSensor];
   \                     ??GetStringValue_8:
   \   000003D0   6601D4E5           LDRB     R0,[R4, #+358]
   \   000003D4   6791D4E5           LDRB     R9,[R4, #+359]
   \   000003D8   68A1D4E5           LDRB     R10,[R4, #+360]
   \   000003DC   69B1D4E5           LDRB     R11,[R4, #+361]
   \   000003E0   600010E2           ANDS     R0,R0,#0x60
   \   000003E4   A002B0E1           LSRS     R0,R0,#+5
   \   000003E8   0410A0E3           MOV      R1,#+4
   \   000003EC   2C219FE5           LDR      R2,??GetStringValue_14+0xC  ;; ??ADSensorType
   \   000003F0   912020E0           MLA      R0,R1,R0,R2
   \   000003F4   001090E5           LDR      R1,[R0, #+0]
   \   000003F8   C4008DE2           ADD      R0,SP,#+196
   \   000003FC   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000400   0010B0E1           MOVS     R1,R0
   \   00000404   0700B0E1           MOVS     R0,R7
   \   00000408   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   0000040C   C4008DE2           ADD      R0,SP,#+196
   \   00000410   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000414   3A0000EA           B        ??GetStringValue_15
    172                  break;
    173              case SVT_IO_CH_FROM_PC_SENSOR :
    174                  MyString = (AnsiString)SCADCard::ADSensorType[ADConfigData.PCSensor];
   \                     ??GetStringValue_6:
   \   00000418   6601D4E5           LDRB     R0,[R4, #+358]
   \   0000041C   6791D4E5           LDRB     R9,[R4, #+359]
   \   00000420   68A1D4E5           LDRB     R10,[R4, #+360]
   \   00000424   69B1D4E5           LDRB     R11,[R4, #+361]
   \   00000428   0C0010E2           ANDS     R0,R0,#0xC
   \   0000042C   2001B0E1           LSRS     R0,R0,#+2
   \   00000430   0410A0E3           MOV      R1,#+4
   \   00000434   E4209FE5           LDR      R2,??GetStringValue_14+0xC  ;; ??ADSensorType
   \   00000438   912020E0           MLA      R0,R1,R0,R2
   \   0000043C   001090E5           LDR      R1,[R0, #+0]
   \   00000440   A8008DE2           ADD      R0,SP,#+168
   \   00000444   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000448   0010B0E1           MOVS     R1,R0
   \   0000044C   0700B0E1           MOVS     R0,R7
   \   00000450   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000454   A8008DE2           ADD      R0,SP,#+168
   \   00000458   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000045C   280000EA           B        ??GetStringValue_15
    175                  break;
    176              case SVT_IO_CH_NEW_SENSOR   :
    177                  MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData.NewSensor);
   \                     ??GetStringValue_9:
   \   00000460   6601D4E5           LDRB     R0,[R4, #+358]
   \   00000464   6711D4E5           LDRB     R1,[R4, #+359]
   \   00000468   6821D4E5           LDRB     R2,[R4, #+360]
   \   0000046C   6931D4E5           LDRB     R3,[R4, #+361]
   \   00000470   A003B0E1           LSRS     R0,R0,#+7
   \   00000474   000050E3           CMP      R0,#+0
   \   00000478   0100000A           BEQ      ??GetStringValue_25
   \   0000047C   0100A0E3           MOV      R0,#+1
   \   00000480   000000EA           B        ??GetStringValue_26
   \                     ??GetStringValue_25:
   \   00000484   0000A0E3           MOV      R0,#+0
   \                     ??GetStringValue_26:
   \   00000488   01002DE9           PUSH     {R0}
   \   0000048C   0430A0E3           MOV      R3,#+4
   \   00000490   7C009FE5           LDR      R0,??GetStringValue_14  ;; SizeofStatusText
   \   00000494   002090E5           LDR      R2,[R0, #+0]
   \   00000498   78109FE5           LDR      R1,??GetStringValue_14+0x4  ;; StatusText
   \   0000049C   90008DE2           ADD      R0,SP,#+144
   \   000004A0   ........           _BLF     ??LibGetText,??LibGetText??rA
   \   000004A4   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000004A8   8C108DE2           ADD      R1,SP,#+140
   \   000004AC   0700B0E1           MOVS     R0,R7
   \   000004B0   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000004B4   8C008DE2           ADD      R0,SP,#+140
   \   000004B8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000004BC   100000EA           B        ??GetStringValue_15
    178                  break;
    179              case SVT_AI_UNIT:
    180                  {
    181                      int Unit = NO_UNIT;
   \                     ??GetStringValue_2:
   \   000004C0   0000A0E3           MOV      R0,#+0
   \   000004C4   0090B0E1           MOVS     R9,R0
    182                      MyString = GetUnitName(Unit);
   \   000004C8   0910B0E1           MOVS     R1,R9
   \   000004CC   0D00B0E1           MOVS     R0,SP
   \   000004D0   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   000004D4   0D10B0E1           MOVS     R1,SP
   \   000004D8   0700B0E1           MOVS     R0,R7
   \   000004DC   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000004E0   0D00B0E1           MOVS     R0,SP
   \   000004E4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000004E8   050000EA           B        ??GetStringValue_15
    183                  }
    184                  break;
    185              default:
    186                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_13:
   \   000004EC   0730B0E1           MOVS     R3,R7
   \   000004F0   0620B0E1           MOVS     R2,R6
   \   000004F4   0510B0E1           MOVS     R1,R5
   \   000004F8   0400B0E1           MOVS     R0,R4
   \   000004FC   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000500   0080B0E1           MOVS     R8,R0
    187                  break;
    188              }
    189              return(Status);
   \                     ??GetStringValue_15:
   \   00000504   0800B0E1           MOVS     R0,R8
   \   00000508   62DF8DE2           ADD      SP,SP,#+392      ;; stack cleaning
   \   0000050C   F04FBDE8           POP      {R4-R11,LR}
   \   00000510   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_14:
   \   00000514   ........           DC32     SizeofStatusText
   \   00000518   ........           DC32     StatusText
   \   0000051C   ........           DC32     ??EEPromInfo
   \   00000520   ........           DC32     ??ADSensorType
    190          }
    191          

   \                                 In segment CODE, align 4, keep-with-next
    192          int AiLevelSwitchSensor_mV::PutFloatValue( int ValueId, float NewValue)
    193          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    194              return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    195          }
    196          

   \                                 In segment CODE, align 4, keep-with-next
    197          void AiLevelSwitchSensor_mV::SetStatus(U8 *NewStatus)
    198          {
    199              ADConfigData = *(ConfigPacket*)NewStatus;
   \                     ??SetStatus:
   \   00000000   6620A0E3           MOV      R2,#+102
   \   00000004   402F82E3           ORR      R2,R2,#0x100
   \   00000008   002092E0           ADDS     R2,R2,R0
   \   0000000C   04C0A0E3           MOV      R12,#+4
   \                     ??SetStatus_1:
   \   00000010   01C05CE2           SUBS     R12,R12,#+1
   \   00000014   0C30D1E7           LDRB     R3,[R1, R12]
   \   00000018   0C30C2E7           STRB     R3,[R2, R12]
   \   0000001C   FBFFFF1A           BNE      ??SetStatus_1
    200          }
   \   00000020   1EFF2FE1           BX       LR               ;; return
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          float AiLevelSwitchSensor_mV::Calculate(void)
    203          {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    204              if ( CanCalculate() ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1700000A           BEQ      ??Calculate_1
    205                  float tmpCalcValue = Gain*FilteredValue-Offset;
   \   00000018   3C1194E5           LDR      R1,[R4, #+316]
   \   0000001C   440194E5           LDR      R0,[R4, #+324]
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   401194E5           LDR      R1,[R4, #+320]
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   0050B0E1           MOVS     R5,R0
    206                  if ( tmpCalcValue < LEVELSWITCH_VOLT_LIMIT ) {
   \   00000030   0500B0E1           MOVS     R0,R5
   \   00000034   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   C035A0E3           MOV      R3,#+805306368
   \   00000040   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000044   ........           _BLF     __dLess,??__dLess??rA
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400000A           BEQ      ??Calculate_2
    207                      CalcValue = LEVELSWITCH_ON;
   \   00000050   FE05A0E3           MOV      R0,#+1065353216
   \   00000054   480184E5           STR      R0,[R4, #+328]
    208                      Failure = false;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   3801C4E5           STRB     R0,[R4, #+312]
   \   00000060   0D0000EA           B        ??Calculate_3
    209                  } else {
    210                      CalcValue = LEVELSWITCH_OFF;
   \                     ??Calculate_2:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   480184E5           STR      R0,[R4, #+328]
    211                      Failure = false;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   3801C4E5           STRB     R0,[R4, #+312]
   \   00000074   080000EA           B        ??Calculate_3
    212                  }
    213              } else {
    214                  if ( Enable ) {
   \                     ??Calculate_1:
   \   00000078   3401D4E5           LDRB     R0,[R4, #+308]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0300000A           BEQ      ??Calculate_4
    215                      CalcValue = LEVELSWITCH_HW_ERROR;
   \   00000084   4004A0E3           MOV      R0,#+1073741824
   \   00000088   400880E3           ORR      R0,R0,#0x400000
   \   0000008C   480184E5           STR      R0,[R4, #+328]
   \   00000090   010000EA           B        ??Calculate_3
    216                  } else {
    217                      CalcValue = LEVELSWITCH_OFF;
   \                     ??Calculate_4:
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   480184E5           STR      R0,[R4, #+328]
    218                  }
    219              }
    220              return(CalcValue);
   \                     ??Calculate_3:
   \   0000009C   480194E5           LDR      R0,[R4, #+328]
   \   000000A0   3040BDE8           POP      {R4,R5,LR}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
    221          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Voltage level switch ...">`:
   \   00000000   566F6C746167       DC8 "Voltage level switch sensor"
   \              65206C657665
   \              6C2073776974
   \              63682073656E
   \              736F7200    

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AiLevelSwitchSensor_mV &AiLevelSwitchSensor_mV::new AiLevelSwitchSensor_mV(int)
   \                     `??new AiLevelSwitchSensor_mV`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   5B0FA0E3           MOV      R0,#+364
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      `??new AiLevelSwitchSensor_mV_1`
   \   00000018   0410B0E1           MOVS     R1,R4
   \   0000001C   ........           BL       ??AiLevelSwitchSensor_mV
   \   00000020   000000EA           B        `??new AiLevelSwitchSensor_mV_2`
   \                     `??new AiLevelSwitchSensor_mV_1`:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     `??new AiLevelSwitchSensor_mV_2`:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    222          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AiLevelSwitchSensor_mV::AiLevelSwitchSensor_mV(int)
                                       28
     AiLevelSwitchSensor_mV::Calculate()
                                       12
     AiLevelSwitchSensor_mV::GetStringValue(int, int, AnsiString &)
                                      432
     AiLevelSwitchSensor_mV::GetValue(int, int, float &, int &, int &)
                                       40
     AiLevelSwitchSensor_mV::LoadConfigString(TSNConfigString &)
                                      168
     AiLevelSwitchSensor_mV::MakeConfigString(int)
                                      408
     AiLevelSwitchSensor_mV::PutFloatValue(int, float)
                                       16
     AiLevelSwitchSensor_mV::PutValue(int, int, AnsiString, bool, int *)
                                       72
     AiLevelSwitchSensor_mV::SetStatus(unsigned char *)
                                        0
     AiLevelSwitchSensor_mV::new AiLevelSwitchSensor_mV(int)
                                        8
     AiLevelSwitchSensor_mV::~AiLevelSwitchSensor_mV()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                        0
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                        8
     _String_val::_String_val(char_allocator)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                       48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       76
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                       12
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        8
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                        0
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Lmost()
                                        8
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rmost()
                                        8
     _Tree_algobase<allocator<void>>::_Root()
                                        8
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                       32
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                        8
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                        8
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                        0
     __sti__routine()                   0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                       12
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                        0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                        0
     operator new(unsigned int, void *)
                                        0
     operator+(string const &, string const &)
                                       44
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                       16
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                       4
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                      44
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::append(string const &)   48
     string::assign(string const &)   48
     operator new(unsigned int, void *)
                                      12
     _Allocator<void>::allocate(unsigned int)
                                      24
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                       4
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                      32
     allocator<void>::allocator()      4
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                      24
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                      40
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      72
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     204
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                      32
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                      28
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                       8
     _Tree_algobase<allocator<void>>::_Root()
                                      24
     _Tree_algobase<allocator<void>>::_Lmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     900
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                      24
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                      76
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                      52
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                      12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                      44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     460
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                     148
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                       4
     operator+(string const &, string const &)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AiLevelSwitchSensor_mV::AiLevelSwitchSensor_mV(int)
                                     676
     AiLevelSwitchSensor_mV::~AiLevelSwitchSensor_mV()
                                      56
     AiLevelSwitchSensor_mV::MakeConfigString(int)
                                     400
     AiLevelSwitchSensor_mV::LoadConfigString(TSNConfigString &)
                                     308
     AiLevelSwitchSensor_mV::PutValue(int, int, AnsiString, bool, int *)
                                     176
     AiLevelSwitchSensor_mV::GetValue(int, int, float &, int &, int &)
                                     204
     AiLevelSwitchSensor_mV::GetStringValue(int, int, AnsiString &)
                                    1316
     AiLevelSwitchSensor_mV::PutFloatValue(int, float)
                                      40
     AiLevelSwitchSensor_mV::SetStatus(unsigned char *)
                                      36
     AiLevelSwitchSensor_mV::Calculate()
                                     168
     ?<Constant "Voltage level switch ...">
                                      28
     __sti__routine()                208
     AiLevelSwitchSensor_mV::new AiLevelSwitchSensor_mV(int)
                                      48
      Others                        1364

 
 8 824 bytes in segment CODE
   164 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 3 640 bytes of CODE  memory (+ 5 200 bytes shared)
   164 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
