##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIMetriTapeSensor.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AIMetriTapeSensor.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIMetriTapeSensor.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIMetriTapeSensor.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIMetriTapeSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIMetriTapeSensor::AIMetriTapeSensor(void)
   \                     ??AIMetriTapeSensor:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     10          {
   \   00000008   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   0000000C   50009FE5           LDR      R0,??AIMetriTapeSensor_1  ;; ??__vtbl
     11          
     12          	Type = C_AI_MetriTape;
     13          	//AlarmmAmpShortCircuit *HighResistancePtr  = new AlarmmAmpShortCircuit( this);
     14          	//AlarmmAmpOpenLoop  *LowResistancePtr  = new AlarmmAmpOpenLoop( this);
     15          	//AlarmSet.insert(ShortCircuitPtr);
     16          	//AlarmSet.insert(OpenLoopPtr);
     17          	// Always assume that the radar is mounted on deck
     18          	// or top of the tank
     19          
     20          	// Init the other variables
     21          	MaxRange    = 30.0;
     22          	MinRange    = 0.0;
     23          	MaxR        = 30000.0;
   \   00000010   50109FE5           LDR      R1,??AIMetriTapeSensor_1+0x4  ;; 0x46ea6000
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   7B00A0E3           MOV      R0,#+123
   \   0000001C   800E80E3           ORR      R0,R0,#0x800
   \   00000020   A00084E5           STR      R0,[R4, #+160]
   \   00000024   4004A0E3           MOV      R0,#+1073741824
   \   00000028   7C0780E3           ORR      R0,R0,#0x1F00000
   \   0000002C   600184E5           STR      R0,[R4, #+352]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   5C0184E5           STR      R0,[R4, #+348]
   \   00000038   6C1184E5           STR      R1,[R4, #+364]
     24          	MinR        = 0.0;
   \   0000003C   700184E5           STR      R0,[R4, #+368]
     25          	Rk          = 47000;
   \   00000040   24009FE5           LDR      R0,??AIMetriTapeSensor_1+0x8  ;; 0x47379800
   \   00000044   740184E5           STR      R0,[R4, #+372]
     26          	Ui          = 24.0;
   \   00000048   4004A0E3           MOV      R0,#+1073741824
   \   0000004C   700780E3           ORR      R0,R0,#0x1C00000
   \   00000050   780184E5           STR      R0,[R4, #+376]
     27          	MakeConstants();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       ??MakeConstants
     28          }
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           B        ?Subroutine17
   \                     ??AIMetriTapeSensor_1:
   \   00000064   ........           DC32     ??__vtbl
   \   00000068   0060EA46           DC32     0x46ea6000
   \   0000006C   00983747           DC32     0x47379800

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     29          //---------------------------------------------------------------------------
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          AIMetriTapeSensor::~AIMetriTapeSensor(void)
     32          {
   \                     `?~AIMetriTapeSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIMetriTapeSensor_1`
     33          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIMetriTapeSensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIMetriTapeSensor_1`:
   \   0000002C   ........           B        ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     34          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     35          U8 AIMetriTapeSensor::GetFilter(void)
     36          {
     37          	return(FILTER_METRIC_TAPE);
   \                     ??GetFilter:
   \   00000000   0400A0E3           MOV      R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return
     38          }
     39          ///////////////////////////////////////////////////////////////
     40          //
     41          // Routines for the Configuration
     42          //
     43          ///////////////////////////////////////////////////////////////
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          AnsiString AIMetriTapeSensor::MakeConfigString(int ExtraTabs)
     46          {
   \                     ??MakeConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     47          	AnsiString LocalString =TabStrX(1,ExtraTabs)+KeyWord(Type)+CrLfStr;
   \   00000004   64749FE5           LDR      R7,??MakeConfigString_2  ;; CrLfStr
   \   00000008   CBDF4DE2           SUB      SP,SP,#+812
   \   0000000C   0040A0E1           MOV      R4,R0
     48          	LocalString += AnalogInput::MakeConfigString();		//common
     49          
     50          	LocalString +=TabStr4+KeyWord(C_AI_RESISTANCE_MIN  )+FloatToAnsiString(MinR,6,3)+CrLfStr;
   \   00000010   5C949FE5           LDR      R9,??MakeConfigString_2+0x4  ;; TabStr4
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   A01094E5           LDR      R1,[R4, #+160]
   \   0000001C   0260A0E1           MOV      R6,R2
   \   00000020   54008DE2           ADD      R0,SP,#+84
   \   00000024   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   38008DE2           ADD      R0,SP,#+56
   \   00000034   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000038   54208DE2           ADD      R2,SP,#+84
   \   0000003C   38108DE2           ADD      R1,SP,#+56
   \   00000040   1C008DE2           ADD      R0,SP,#+28
   \   00000044   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000048   0720A0E1           MOV      R2,R7
   \   0000004C   1C108DE2           ADD      R1,SP,#+28
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   1C008DE2           ADD      R0,SP,#+28
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   54008DE2           ADD      R0,SP,#+84
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   38008DE2           ADD      R0,SP,#+56
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   70108DE2           ADD      R1,SP,#+112
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000B4   ........           LDR      R0,??DataTable2  ;; ??npos
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   008090E5           LDR      R8,[R0, #+0]
   \   000000C0   70108DE2           ADD      R1,SP,#+112
   \   000000C4   0830A0E1           MOV      R3,R8
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     ??append,??append??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   70008DE2           ADD      R0,SP,#+112
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   701194E5           LDR      R1,[R4, #+368]
   \   000000E4   0330A0E3           MOV      R3,#+3
   \   000000E8   0620A0E3           MOV      R2,#+6
   \   000000EC   FC008DE2           ADD      R0,SP,#+252
   \   000000F0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000F4   BA10A0E3           MOV      R1,#+186
   \   000000F8   801E81E3           ORR      R1,R1,#0x800
   \   000000FC   E0008DE2           ADD      R0,SP,#+224
   \   00000100   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000104   E0208DE2           ADD      R2,SP,#+224
   \   00000108   0910A0E1           MOV      R1,R9
   \   0000010C   C4008DE2           ADD      R0,SP,#+196
   \   00000110   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000114   FC208DE2           ADD      R2,SP,#+252
   \   00000118   C4108DE2           ADD      R1,SP,#+196
   \   0000011C   A8008DE2           ADD      R0,SP,#+168
   \   00000120   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000124   0720A0E1           MOV      R2,R7
   \   00000128   A8108DE2           ADD      R1,SP,#+168
   \   0000012C   8C008DE2           ADD      R0,SP,#+140
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   0830A0E1           MOV      R3,R8
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   8C108DE2           ADD      R1,SP,#+140
   \   00000140   0500A0E1           MOV      R0,R5
   \   00000144   ........           _BLF     ??append,??append??rA
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   8C008DE2           ADD      R0,SP,#+140
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   A8008DE2           ADD      R0,SP,#+168
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   FC008DE2           ADD      R0,SP,#+252
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   C4008DE2           ADD      R0,SP,#+196
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   E0008DE2           ADD      R0,SP,#+224
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
     51          	LocalString +=TabStr4+KeyWord(C_AI_RESISTANCE_MAX  )+FloatToAnsiString(MaxR,6,3)+CrLfStr;
   \   00000198   6C1194E5           LDR      R1,[R4, #+364]
   \   0000019C   0330A0E3           MOV      R3,#+3
   \   000001A0   0620A0E3           MOV      R2,#+6
   \   000001A4   620F8DE2           ADD      R0,SP,#+392
   \   000001A8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001AC   BB10A0E3           MOV      R1,#+187
   \   000001B0   801E81E3           ORR      R1,R1,#0x800
   \   000001B4   5B0F8DE2           ADD      R0,SP,#+364
   \   000001B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001BC   5B2F8DE2           ADD      R2,SP,#+364
   \   000001C0   0910A0E1           MOV      R1,R9
   \   000001C4   540F8DE2           ADD      R0,SP,#+336
   \   000001C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001CC   622F8DE2           ADD      R2,SP,#+392
   \   000001D0   541F8DE2           ADD      R1,SP,#+336
   \   000001D4   4D0F8DE2           ADD      R0,SP,#+308
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0720A0E1           MOV      R2,R7
   \   000001E0   4D1F8DE2           ADD      R1,SP,#+308
   \   000001E4   460F8DE2           ADD      R0,SP,#+280
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0830A0E1           MOV      R3,R8
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   461F8DE2           ADD      R1,SP,#+280
   \   000001F8   0500A0E1           MOV      R0,R5
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   460F8DE2           ADD      R0,SP,#+280
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   4D0F8DE2           ADD      R0,SP,#+308
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   620F8DE2           ADD      R0,SP,#+392
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   540F8DE2           ADD      R0,SP,#+336
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   5B0F8DE2           ADD      R0,SP,#+364
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
     52          	LocalString +=TabStr4+KeyWord(C_AI_RESISTANCE_CONST)+FloatToAnsiString(Rk  ,6,3)+CrLfStr;
   \   00000250   741194E5           LDR      R1,[R4, #+372]
   \   00000254   0330A0E3           MOV      R3,#+3
   \   00000258   0620A0E3           MOV      R2,#+6
   \   0000025C   850F8DE2           ADD      R0,SP,#+532
   \   00000260   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000264   BC10A0E3           MOV      R1,#+188
   \   00000268   801E81E3           ORR      R1,R1,#0x800
   \   0000026C   7E0F8DE2           ADD      R0,SP,#+504
   \   00000270   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000274   7E2F8DE2           ADD      R2,SP,#+504
   \   00000278   0910A0E1           MOV      R1,R9
   \   0000027C   770F8DE2           ADD      R0,SP,#+476
   \   00000280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000284   852F8DE2           ADD      R2,SP,#+532
   \   00000288   771F8DE2           ADD      R1,SP,#+476
   \   0000028C   700F8DE2           ADD      R0,SP,#+448
   \   00000290   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000294   0720A0E1           MOV      R2,R7
   \   00000298   701F8DE2           ADD      R1,SP,#+448
   \   0000029C   690F8DE2           ADD      R0,SP,#+420
   \   000002A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A4   0830A0E1           MOV      R3,R8
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   691F8DE2           ADD      R1,SP,#+420
   \   000002B0   0500A0E1           MOV      R0,R5
   \   000002B4   ........           _BLF     ??append,??append??rA
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   690F8DE2           ADD      R0,SP,#+420
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   700F8DE2           ADD      R0,SP,#+448
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   850F8DE2           ADD      R0,SP,#+532
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   770F8DE2           ADD      R0,SP,#+476
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   7E0F8DE2           ADD      R0,SP,#+504
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
     53          	LocalString +=TabStr4+KeyWord(C_AI_VOLTAGE_CONST   )+FloatToAnsiString(Ui  ,6,3)+CrLfStr;
   \   00000308   781194E5           LDR      R1,[R4, #+376]
   \   0000030C   0330A0E3           MOV      R3,#+3
   \   00000310   0620A0E3           MOV      R2,#+6
   \   00000314   A80F8DE2           ADD      R0,SP,#+672
   \   00000318   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000031C   BD10A0E3           MOV      R1,#+189
   \   00000320   801E81E3           ORR      R1,R1,#0x800
   \   00000324   A10F8DE2           ADD      R0,SP,#+644
   \   00000328   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000032C   A12F8DE2           ADD      R2,SP,#+644
   \   00000330   0910A0E1           MOV      R1,R9
   \   00000334   9A0F8DE2           ADD      R0,SP,#+616
   \   00000338   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000033C   A82F8DE2           ADD      R2,SP,#+672
   \   00000340   9A1F8DE2           ADD      R1,SP,#+616
   \   00000344   930F8DE2           ADD      R0,SP,#+588
   \   00000348   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000034C   0720A0E1           MOV      R2,R7
   \   00000350   931F8DE2           ADD      R1,SP,#+588
   \   00000354   8C0F8DE2           ADD      R0,SP,#+560
   \   00000358   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000035C   0830A0E1           MOV      R3,R8
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   8C1F8DE2           ADD      R1,SP,#+560
   \   00000368   0500A0E1           MOV      R0,R5
   \   0000036C   ........           _BLF     ??append,??append??rA
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   8C0F8DE2           ADD      R0,SP,#+560
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   0110A0E3           MOV      R1,#+1
   \   00000388   930F8DE2           ADD      R0,SP,#+588
   \   0000038C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   A80F8DE2           ADD      R0,SP,#+672
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   9A0F8DE2           ADD      R0,SP,#+616
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   A10F8DE2           ADD      R0,SP,#+644
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
     54          	LocalString +=TabStrX(1,ExtraTabs)+KeyWord(C_AI_END)+CrLfStr;
   \   000003C0   9810A0E3           MOV      R1,#+152
   \   000003C4   801E81E3           ORR      R1,R1,#0x800
   \   000003C8   C40F8DE2           ADD      R0,SP,#+784
   \   000003CC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003D0   0620A0E1           MOV      R2,R6
   \   000003D4   0110A0E3           MOV      R1,#+1
   \   000003D8   BD0F8DE2           ADD      R0,SP,#+756
   \   000003DC   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   000003E0   C42F8DE2           ADD      R2,SP,#+784
   \   000003E4   BD1F8DE2           ADD      R1,SP,#+756
   \   000003E8   B60F8DE2           ADD      R0,SP,#+728
   \   000003EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F0   0720A0E1           MOV      R2,R7
   \   000003F4   B61F8DE2           ADD      R1,SP,#+728
   \   000003F8   AF0F8DE2           ADD      R0,SP,#+700
   \   000003FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000400   0830A0E1           MOV      R3,R8
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   AF1F8DE2           ADD      R1,SP,#+700
   \   0000040C   0500A0E1           MOV      R0,R5
   \   00000410   ........           _BLF     ??append,??append??rA
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000420   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0110A0E3           MOV      R1,#+1
   \   0000042C   B60F8DE2           ADD      R0,SP,#+728
   \   00000430   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0110A0E3           MOV      R1,#+1
   \   0000043C   C40F8DE2           ADD      R0,SP,#+784
   \   00000440   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   0110A0E3           MOV      R1,#+1
   \   0000044C   BD0F8DE2           ADD      R0,SP,#+756
   \   00000450   ........           _BLF     ??_Tidy,??_Tidy??rA
     55          	LocalString += CrLfStr;
   \   00000454   0830A0E1           MOV      R3,R8
   \   00000458   0020A0E3           MOV      R2,#+0
   \   0000045C   0710A0E1           MOV      R1,R7
   \   00000460   0500A0E1           MOV      R0,R5
   \   00000464   ........           _BLF     ??append,??append??rA
     56          
     57          	return(LocalString);
   \   00000468   CBDF8DE2           ADD      SP,SP,#+812
   \   0000046C   ........           B        ?Subroutine19
   \                     ??MakeConfigString_2:
   \   00000470   ........           DC32     CrLfStr
   \   00000474   ........           DC32     TabStr4
     58          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine19_0:
   \   00000008   3A0A0000           DC8      ":\n",+0
   \   0000000C   ........           DC32     `?<Constant "MetriTape">`
     59          //---------------------------------------------------------------------------
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          bool AIMetriTapeSensor::LoadConfigString(TSNConfigString &ConfigString)
     62          {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     63          	bool NoError = true;
     64          	int ErrorLine=0;
     65          	int Key;
     66          	AnsiString PROName = "MetriTape";
   \   00000004   ........           LDR      R6,??Subroutine19_0+0x4  ;; `?<Constant "MetriTape">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0610A0E1           MOV      R1,R6
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
     67          	if ( PROPtr )	PROName +=(AnsiString)", for "+PROPtr->Name;
   \   00000028   499FA0E3           MOV      R9,#+292
   \   0000002C   040099E7           LDR      R0,[R9, +R4]
   \   00000030   0180A0E3           MOV      R8,#+1
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   1500000A           BEQ      ??LoadConfigString_3
   \   0000003C   0C1086E2           ADD      R1,R6,#+12
   \   00000040   20008DE2           ADD      R0,SP,#+32
   \   00000044   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   040099E7           LDR      R0,[R9, +R4]
   \   00000050   442080E2           ADD      R2,R0,#+68
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000005C   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   3C008DE2           ADD      R0,SP,#+60
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0810A0E1           MOV      R1,R8
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
     68          	PROName += ":\n";
   \                     ??LoadConfigString_3:
   \   00000094   ........           ADR      R6,??Subroutine19_0  ;; ":\n"
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   ........           _BLF     strlen,??strlen??rA
   \   000000A0   0020A0E1           MOV      R2,R0
   \   000000A4   0610A0E1           MOV      R1,R6
   \   000000A8   3C008DE2           ADD      R0,SP,#+60
   \   000000AC   ........           _BLF     ??append_1,??append??rA_1
   \   000000B0   006068E2           RSB      R6,R8,#+0
     69          	do {
     70          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0D20A0E1           MOV      R2,SP
   \   000000BC   20108DE2           ADD      R1,SP,#+32
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??NextWord,??NextWord??rA
     71          		if ( ErrorLine ) {
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0B00000A           BEQ      ??LoadConfigString_5
     72          			if ( ErrorLine != EOF ) {
   \   000000D4   060050E1           CMP      R0,R6
   \   000000D8   5800000A           BEQ      ??LoadConfigString_6
     73          				GiveConfigWarning(PROName,ErrorLine);
   \   000000DC   3C108DE2           ADD      R1,SP,#+60
   \   000000E0   04008DE2           ADD      R0,SP,#+4
   \   000000E4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000E8   00109DE5           LDR      R1,[SP, #+0]
   \   000000EC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   4E0000EA           B        ??LoadConfigString_6
     74          			}
     75          		} else {
     76          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   00000104   20108DE2           ADD      R1,SP,#+32
   \   00000108   04008DE2           ADD      R0,SP,#+4
   \   0000010C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000110   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000114   0070A0E1           MOV      R7,R0
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
     77          			switch ( Key ) {
   \   00000128   980047E2           SUB      R0,R7,#+152
   \   0000012C   800E40E2           SUB      R0,R0,#+2048
   \   00000130   250050E3           CMP      R0,#+37
   \   00000134   0C00008A           BHI      ??LoadConfigString_8
   \   00000138   011F8FE2           ADR      R1,??LoadConfigString_1
   \   0000013C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000140   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000144   3E1B0909           DC8      +62,+27,+9,+9
   \   00000148   09090909           DC8      +9,+9,+9,+9
   \   0000014C   09090909           DC8      +9,+9,+9,+9
   \   00000150   09090909           DC8      +9,+9,+9,+9
   \   00000154   09090909           DC8      +9,+9,+9,+9
   \   00000158   09090909           DC8      +9,+9,+9,+9
   \   0000015C   09090909           DC8      +9,+9,+9,+9
   \   00000160   09090909           DC8      +9,+9,+9,+9
   \   00000164   09091F26           DC8      +9,+9,+31,+38
   \   00000168   2D340000           DC8      +45,+52,+0,+0
     78          			default:
     79          				GiveConfigWarning(PROName,InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_8:
   \   0000016C   20108DE2           ADD      R1,SP,#+32
   \   00000170   58008DE2           ADD      R0,SP,#+88
   \   00000174   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000178   0090A0E1           MOV      R9,R0
   \   0000017C   3C108DE2           ADD      R1,SP,#+60
   \   00000180   74008DE2           ADD      R0,SP,#+116
   \   00000184   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000188   1C2095E5           LDR      R2,[R5, #+28]
   \   0000018C   0910A0E1           MOV      R1,R9
   \   00000190   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   58008DE2           ADD      R0,SP,#+88
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   74008DE2           ADD      R0,SP,#+116
   \   000001B0   D1FFFFEA           B        ??LoadConfigString_7
     80          				break;
     81          			case C_AI_START_COMMON:
     82          				AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_9:
   \   000001B4   0510A0E1           MOV      R1,R5
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
   \   000001C0   1E0000EA           B        ??LoadConfigString_6
     83          				break;
     84          			case C_AI_RESISTANCE_MIN:
     85          				MinR = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   0D10A0E1           MOV      R1,SP
   \   000001CC   0500A0E1           MOV      R0,R5
   \   000001D0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001D4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001D8   700184E5           STR      R0,[R4, #+368]
     86          				NoError = !ErrorLine;
   \   000001DC   130000EA           B        ??LoadConfigString_11
     87          				break;
     88          			case C_AI_RESISTANCE_MAX:
     89          				MaxR = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_12:
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0D10A0E1           MOV      R1,SP
   \   000001E8   0500A0E1           MOV      R0,R5
   \   000001EC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001F0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001F4   6C0184E5           STR      R0,[R4, #+364]
     90          				NoError = !ErrorLine;
   \   000001F8   0C0000EA           B        ??LoadConfigString_11
     91          				break;
     92          			case C_AI_RESISTANCE_CONST:
     93          				Rk = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_13:
   \   000001FC   0020A0E3           MOV      R2,#+0
   \   00000200   0D10A0E1           MOV      R1,SP
   \   00000204   0500A0E1           MOV      R0,R5
   \   00000208   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000020C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000210   740184E5           STR      R0,[R4, #+372]
     94          				NoError = !ErrorLine;
   \   00000214   050000EA           B        ??LoadConfigString_11
     95          				break;
     96          			case C_AI_VOLTAGE_CONST:
     97          				Ui = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_14:
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0D10A0E1           MOV      R1,SP
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000228   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000022C   780184E5           STR      R0,[R4, #+376]
     98          				NoError = !ErrorLine;
   \                     ??LoadConfigString_11:
   \   00000230   00009DE5           LDR      R0,[SP, #+0]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   0180A003           MOVEQ    R8,#+1
   \   0000023C   0080A013           MOVNE    R8,#+0
     99          				break;
    100          			case C_AI_END:
    101          				break;
    102          			}
    103          		}
    104          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_6:
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   20008DE2           ADD      R0,SP,#+32
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   000058E3           CMP      R8,#+0
   \   00000254   00009D15           LDRNE    R0,[SP, #+0]
   \   00000258   06005011           CMPNE    R0,R6
   \   0000025C   9800A013           MOVNE    R0,#+152
   \   00000260   800E8013           ORRNE    R0,R0,#0x800
   \   00000264   00005711           CMPNE    R7,R0
   \   00000268   91FFFF1A           BNE      ??LoadConfigString_4
    105          	MakeConstants();
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           BL       ??MakeConstants
    106          	return(NoError);
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   0110A0E3           MOV      R1,#+1
   \   0000027C   3C008DE2           ADD      R0,SP,#+60
   \   00000280   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000284   0800A0E1           MOV      R0,R8
   \   00000288   90D08DE2           ADD      SP,SP,#+144
   \   0000028C                      REQUIRE ?Subroutine19
   \   0000028C                      ;; // Fall through to label ?Subroutine19
    107          }
    108          
    109          
    110          ///////////////////////////////////////////////////////////////
    111          //
    112          // Routines for the librarian for input
    113          //
    114          ///////////////////////////////////////////////////////////////
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int  AIMetriTapeSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    117          {
   \                     ??GetValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   10009DE5           LDR      R0,[SP, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   14309DE5           LDR      R3,[SP, #+20]
    118          	int Status = GETVAL_NO_ERR;
   \   00000014   0060A0E3           MOV      R6,#+0
    119          	Unit    = LENGTH_UNIT;
   \   00000018   01C0A0E3           MOV      R12,#+1
   \   0000001C   00C083E5           STR      R12,[R3, #+0]
    120          	DecPnt  = 3;
   \   00000020   03C0A0E3           MOV      R12,#+3
   \   00000024   00C080E5           STR      R12,[R0, #+0]
    121          
    122          	switch ( ValueId ) {
   \   00000028   B5C041E2           SUB      R12,R1,#+181
   \   0000002C   40CE4CE2           SUB      R12,R12,#+1024
   \   00000030   03005CE3           CMP      R12,#+3
   \   00000034   1200008A           BHI      ??GetValue_3
   \   00000038   01EF8FE2           ADR      LR,??GetValue_1
   \   0000003C   0CE0DEE7           LDRB     LR,[LR, R12]
   \   00000040   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??GetValue_1:
   \   00000044   000F0F03           DC8      +0,+15,+15,+3
    123          	case SVT_AI_OFFSET   :
    124          		MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \                     ??GetValue_5:
   \   0000004C   000085E5           STR      R0,[R5, #+0]
   \   00000050   120000EA           B        ??GetValue_6
    125          		break;
    126          	case SVT_AI_CALC_VAL :
    127          		if ( CanCalculate() ) {
   \                     ??GetValue_7:
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0500000A           BEQ      ??GetValue_8
    128          			MyRetValue = Calculate();
   \   00000064   A41094E5           LDR      R1,[R4, #+164]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   601091E5           LDR      R1,[R1, #+96]
   \   00000070   0FE0A0E1           MOV      LR,PC
   \   00000074   11FF2FE1           BX       R1
   \   00000078   F3FFFFEA           B        ??GetValue_5
    129          		} else {
    130          			Status = GETVAL_FLOAT_NOT_LEGAL;
   \                     ??GetValue_8:
   \   0000007C   0560A0E3           MOV      R6,#+5
   \   00000080   060000EA           B        ??GetValue_6
    131          		}
    132          		break;
    133          	default:
    134          		Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000084   08002DE9           PUSH     {R3}
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   0530A0E1           MOV      R3,R5
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000098   0060A0E1           MOV      R6,R0
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
    135          		break;
    136          	}
    137          	return(Status);
   \                     ??GetValue_6:
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           B        ?Subroutine20
    138          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    139          

   \                                 In segment CODE, align 4, keep-with-next
    140          int AIMetriTapeSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    141          {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    142          	int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    143          	switch ( ValueId ) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0D00001A           BNE      ??GetStringValue_2
    144          	case SVT_AI_UNIT:
    145          		MyString = GetUnitName(LENGTH_UNIT);
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000024   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign,??assign??rA
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   010000EA           B        ??GetStringValue_3
    146          		break;
    147          	default:
    148          		Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
    149          
    150          	}
    151          	return(Status);
   \                     ??GetStringValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1CD08DE2           ADD      SP,SP,#+28
   \   00000060                      REQUIRE ?Subroutine18
   \   00000060                      ;; // Fall through to label ?Subroutine18
    152          }

   \                                 In segment CODE, align 4, keep-with-next
    153          int AIMetriTapeSensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    154          {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7480DDE5           LDRB     R8,[SP, #+116]
   \   0000000C   78509DE5           LDR      R5,[SP, #+120]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    155          	int Status = E_NO_ERR, ValUnitId = LENGTH_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   04208DE5           STR      R2,[SP, #+4]
    156          	switch ( ValueId ) {
   \   00000030   B50046E2           SUB      R0,R6,#+181
   \   00000034   400E40E2           SUB      R0,R0,#+1024
   \   00000038   030050E3           CMP      R0,#+3
   \   0000003C   2E00008A           BHI      ??PutValue_3
   \   00000040   012F8FE2           ADR      R2,??PutValue_1
   \   00000044   0020D2E7           LDRB     R2,[R2, R0]
   \   00000048   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   0000004C   002B2B19           DC8      +0,+43,+43,+25
    157          	case SVT_AI_OFFSET   :
    158          		Offset = ConvertToSi(NewValue, LENGTH_UNIT, Status,0.0 ,50.0,Offset);
   \                     ??PutValue_4:
   \   00000050   24008DE2           ADD      R0,SP,#+36
   \   00000054   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   507FA0E3           MOV      R7,#+320
   \   00000060   040097E7           LDR      R0,[R7, +R4]
   \   00000064   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000068   03002DE9           PUSH     {R0,R1}
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   4014A0E3           MOV      R1,#+1073741824
   \   00000074   491881E3           ORR      R1,R1,#0x490000
   \   00000078   03002DE9           PUSH     {R0,R1}
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   03002DE9           PUSH     {R0,R1}
   \   00000084   18208DE2           ADD      R2,SP,#+24
   \   00000088   0800BDE8           POP      {R3}
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000098   040087E7           STR      R0,[R7, +R4]
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   38008DE2           ADD      R0,SP,#+56
   \                     ??PutValue_5:
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   14D08DE2           ADD      SP,SP,#+20
   \   000000B0   210000EA           B        ??PutValue_6
    159          		break;
    160          	case SVT_AI_CALC_VAL :
    161          		{
    162          			float NewVal = ConvertToSi(NewValue, LENGTH_UNIT, Status,0.0 ,50.0);
   \                     ??PutValue_7:
   \   000000B4   08008DE2           ADD      R0,SP,#+8
   \   000000B8   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0030A0E3           MOV      R3,#+0
   \   000000C4   0C002DE9           PUSH     {R2,R3}
   \   000000C8   4034A0E3           MOV      R3,#+1073741824
   \   000000CC   493883E3           ORR      R3,R3,#0x490000
   \   000000D0   0C002DE9           PUSH     {R2,R3}
   \   000000D4   0230A0E1           MOV      R3,R2
   \   000000D8   0C002DE9           PUSH     {R2,R3}
   \   000000DC   18208DE2           ADD      R2,SP,#+24
   \   000000E0   0800BDE8           POP      {R3}
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   1C008DE2           ADD      R0,SP,#+28
   \   000000F8   EAFFFFEA           B        ??PutValue_5
    163          		}
    164          		break;
    165          	default:
    166          		Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_3:
   \   000000FC   40008DE2           ADD      R0,SP,#+64
   \   00000100   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000104   0030A0E1           MOV      R3,R0
   \   00000108   04008DE2           ADD      R0,SP,#+4
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   00012DE9           PUSH     {R8}
   \   00000114   0720A0E1           MOV      R2,R7
   \   00000118   0610A0E1           MOV      R1,R6
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000124   08008DE5           STR      R0,[SP, #+8]
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   48008DE2           ADD      R0,SP,#+72
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   08D08DE2           ADD      SP,SP,#+8
    167          		break;
    168          	}
    169          	if ( Status==E_NO_ERR ) {
   \                     ??PutValue_6:
   \   0000013C   00009DE5           LDR      R0,[SP, #+0]
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   0400001A           BNE      ??PutValue_8
    170          		SetModifiedFlag();
   \   00000148   A41094E5           LDR      R1,[R4, #+164]
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   541091E5           LDR      R1,[R1, #+84]
   \   00000154   0FE0A0E1           MOV      LR,PC
   \   00000158   11FF2FE1           BX       R1
    171          	}
    172          	if ( UnitId ) {
   \                     ??PutValue_8:
   \   0000015C   000055E3           CMP      R5,#+0
    173          		*UnitId = LENGTH_UNIT;
   \   00000160   0100A013           MOVNE    R0,#+1
   \   00000164   00008515           STRNE    R0,[R5, #+0]
    174          	}
    175          	return(Status);
   \   00000168   00009DE5           LDR      R0,[SP, #+0]
   \   0000016C   5CD08DE2           ADD      SP,SP,#+92
   \   00000170   F041BDE8           POP      {R4-R8,LR}
   \   00000174   1EFF2FE1           BX       LR               ;; return
    176          }
    177          

   \                                 In segment CODE, align 4, keep-with-next
    178          int AIMetriTapeSensor::PutFloatValue( int ValueId, float NewValue)
    179          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    180          	return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine16
   \   00000008                      ;; // Fall through to label ?Subroutine16
    181          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    182          
    183          //////////////////////////////////////////////////////////////////
    184          //
    185          // Sensor calculations
    186          //
    187          //////////////////////////////////////////////////////////////////
    188          

   \                                 In segment CODE, align 4, keep-with-next
    189          void AIMetriTapeSensor::MakeConstants(void)
    190          {
   \                     ??MakeConstants:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    191          	a   =( MaxRange - MinRange) / (MinR - MaxR);
   \   00000008   705194E5           LDR      R5,[R4, #+368]
   \   0000000C   6C1194E5           LDR      R1,[R4, #+364]
   \   00000010   606194E5           LDR      R6,[R4, #+352]
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __fSub,??__fSub??rA
   \   0000001C   5C1194E5           LDR      R1,[R4, #+348]
   \   00000020   0070A0E1           MOV      R7,R0
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   0710A0E1           MOV      R1,R7
   \   00000030   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000034   640184E5           STR      R0,[R4, #+356]
    192          	b   = MaxRange - a*MinR;
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   ........           _BLF     __fMul,??__fMul??rA
   \   00000040   0010A0E1           MOV      R1,R0
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           _BLF     __fSub,??__fSub??rA
   \   0000004C   680184E5           STR      R0,[R4, #+360]
    193          }
   \   00000050   F040BDE8           POP      {R4-R7,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    194          

   \                                 In segment CODE, align 4, keep-with-next
    195          void AIMetriTapeSensor::FilterValue(float NewCalcVal,float FilterDegree)
    196          {
   \                     ??FilterValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    197          	CalcValue += (NewCalcVal - CalcValue)/(FilterDegree+1.0);
   \   00000008   525FA0E3           MOV      R5,#+328
   \   0000000C   046095E7           LDR      R6,[R5, +R4]
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   0200A0E1           MOV      R0,R2
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   C035A0E3           MOV      R3,#+805306368
   \   00000024   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000028   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   0190A0E1           MOV      R9,R1
   \   00000034   0700A0E1           MOV      R0,R7
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   ........           _BLF     __fSub,??__fSub??rA
   \   00000040   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000044   0820A0E1           MOV      R2,R8
   \   00000048   0930A0E1           MOV      R3,R9
   \   0000004C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000050   0080A0E1           MOV      R8,R0
   \   00000054   0190A0E1           MOV      R9,R1
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000060   0820A0E1           MOV      R2,R8
   \   00000064   0930A0E1           MOV      R3,R9
   \   00000068   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000006C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000070   040085E7           STR      R0,[R5, +R4]
    198          }
   \   00000074   ........           B        ?Subroutine19
    199          

   \                                 In segment CODE, align 4, keep-with-next
    200          float AIMetriTapeSensor::Get_Resistance(float Uv)
    201          {
   \                     ??Get_Resistance:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    202          	float Rv = ( Uv*Rk)/(Ui-Uv);
    203          	return(Rv);
   \   00000008   780194E5           LDR      R0,[R4, #+376]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   ........           _BLF     __fSub,??__fSub??rA
   \   00000014   0060A0E1           MOV      R6,R0
   \   00000018   740194E5           LDR      R0,[R4, #+372]
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   ........           _BLF     __fDiv,??__fDiv??rA
   \   0000002C                      REQUIRE ?Subroutine20
   \   0000002C                      ;; // Fall through to label ?Subroutine20
    204          }
    205          

   \                                 In segment CODE, align 4, keep-with-next
    206          float AIMetriTapeSensor::Get_Distance(float Resistance)
    207          {
   \                     ??Get_Distance:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
    208          	float Dist = a*Resistance + b;
    209          	return(Dist);
   \   0000000C   641194E5           LDR      R1,[R4, #+356]
   \   00000010   ........           _BLF     __fMul,??__fMul??rA
   \   00000014   681194E5           LDR      R1,[R4, #+360]
   \   00000018   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000001C                      REQUIRE ?Subroutine17
   \   0000001C                      ;; // Fall through to label ?Subroutine17
    210          }
    211          

   \                                 In segment CODE, align 4, keep-with-next
    212          float AIMetriTapeSensor::Calculate(void)
    213          {
   \                     ??Calculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    214          	if ( CanCalculate() ) {
   \   00000008   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1200000A           BEQ      ??Calculate_1
    215          		Failure = false;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   3801C4E5           STRB     R0,[R4, #+312]
    216          		float Rv = Get_Resistance(FilteredValue);
   \   0000001C   441194E5           LDR      R1,[R4, #+324]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??Get_Resistance
   \   00000028   0010A0E1           MOV      R1,R0
    217          		float NewCalcValue = Gain*Get_Distance(Rv)-Offset;
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       ??Get_Distance
   \   00000034   3C1194E5           LDR      R1,[R4, #+316]
   \   00000038   ........           _BLF     __fMul,??__fMul??rA
   \   0000003C   401194E5           LDR      R1,[R4, #+320]
   \   00000040   ........           _BLF     __fSub,??__fSub??rA
    218          		FilterValue(NewCalcValue,FILTER_METRIC_TAPE);
   \   00000044   4024A0E3           MOV      R2,#+1073741824
   \   00000048   802882E3           ORR      R2,R2,#0x800000
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       ??FilterValue
    219          		ResultOK  = true;
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   3601C4E5           STRB     R0,[R4, #+310]
    220          	}
    221          	return(CalcValue);
   \                     ??Calculate_1:
   \   00000060   480194E5           LDR      R0,[R4, #+328]
   \   00000064   ........           B        ?Subroutine17
    222          
    223          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MetriTape">`:
   \   00000000   4D6574726954       DC8 "MetriTape"
   \              61706500    
   \   0000000A   0000               DC8 0, 0
   \   0000000C   2C20666F7220       DC8 ", for "
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIMetriTapeSensor &AIMetriTapeSensor::new AIMetriTapeSensor()
   \                     `??new AIMetriTapeSensor`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5F0FA0E3           MOV      R0,#+380
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AIMetriTapeSensor_1`
   \   00000014   ........           BL       ??AIMetriTapeSensor
   \                     `??new AIMetriTapeSensor_1`:
   \   00000018   ........           B        ?Subroutine16

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos
    224          
    225          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIMetriTapeSensor::AIMetriTapeSensor()
                                        8
     AIMetriTapeSensor::Calculate()     8
     AIMetriTapeSensor::FilterValue(float, float)
                                       28
     AIMetriTapeSensor::GetFilter()     0
     AIMetriTapeSensor::GetStringValue(int, int, AnsiString &)
                                       40
     AIMetriTapeSensor::GetValue(int, int, float &, int &, int &)
                                       24
     AIMetriTapeSensor::Get_Distance(float)
                                        8
     AIMetriTapeSensor::Get_Resistance(float)
                                       16
     AIMetriTapeSensor::LoadConfigString(TSNConfigString &)
                                      172
     AIMetriTapeSensor::MakeConfigString(int)
                                      840
     AIMetriTapeSensor::MakeConstants()
                                       20
     AIMetriTapeSensor::PutFloatValue(int, float)
                                        4
     AIMetriTapeSensor::PutValue(int, int, AnsiString, bool, int *)
                                      140
     AIMetriTapeSensor::new AIMetriTapeSensor()
                                        4
     AIMetriTapeSensor::~AIMetriTapeSensor()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AIMetriTapeSensor::AIMetriTapeSensor()
                                     112
     ?Subroutine17                     8
     AIMetriTapeSensor::~AIMetriTapeSensor()
                                      48
     ?Subroutine18                     8
     AIMetriTapeSensor::GetFilter()    8
     AIMetriTapeSensor::MakeConfigString(int)
                                    1144
     ?Subroutine19                    16
     AIMetriTapeSensor::LoadConfigString(TSNConfigString &)
                                     652
     AIMetriTapeSensor::GetValue(int, int, float &, int &, int &)
                                     168
     ?Subroutine20                     8
     AIMetriTapeSensor::GetStringValue(int, int, AnsiString &)
                                      96
     AIMetriTapeSensor::PutValue(int, int, AnsiString, bool, int *)
                                     376
     AIMetriTapeSensor::PutFloatValue(int, float)
                                       8
     ?Subroutine16                     8
     AIMetriTapeSensor::MakeConstants()
                                      88
     AIMetriTapeSensor::FilterValue(float, float)
                                     120
     AIMetriTapeSensor::Get_Resistance(float)
                                      44
     AIMetriTapeSensor::Get_Distance(float)
                                      28
     AIMetriTapeSensor::Calculate()  104
     ?<Constant "MetriTape">          20
     ?<Constant ":\n">                 3
     AIMetriTapeSensor::new AIMetriTapeSensor()
                                      28
     __sti__routine()                  4
     ??DataTable2                      4
      Others                         656

 
 3 820 bytes in segment CODE
   155 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 3 084 bytes of CODE  memory (+ 740 bytes shared)
   155 bytes of CONST memory

Errors: none
Warnings: none
