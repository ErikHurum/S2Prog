##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:22 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusRegister.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusRegister.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusRegister.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusRegister.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusRegister.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs double pow(double, int)
   \                     ??pow:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0670B0E1           MOVS     R7,R6
   \   00000014   00706742           RSBMI    R7,R7,#+0
   \   00000018   0080A0E3           MOV      R8,#+0
   \   0000001C   C095A0E3           MOV      R9,#+805306368
   \   00000020   FF9689E3           ORR      R9,R9,#0xFF00000
   \   00000024   060000EA           B        ??pow_1
   \                     ??pow_2:
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   0530A0E1           MOV      R3,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   ........           _BLF     __dMul,??__dMul??rA
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   0150A0E1           MOV      R5,R1
   \                     ??pow_1:
   \   00000044   010017E3           TST      R7,#0x1
   \   00000048   0600000A           BEQ      ??pow_3
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   0530A0E1           MOV      R3,R5
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   0910A0E1           MOV      R1,R9
   \   0000005C   ........           _BLF     __dMul,??__dMul??rA
   \   00000060   0080A0E1           MOV      R8,R0
   \   00000064   0190A0E1           MOV      R9,R1
   \                     ??pow_3:
   \   00000068   A770B0E1           LSRS     R7,R7,#+1
   \   0000006C   EDFFFF1A           BNE      ??pow_2
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   0700005A           BPL      ??pow_4
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   C015A0E3           MOV      R1,#+805306368
   \   00000080   FF1681E3           ORR      R1,R1,#0xFF00000
   \   00000084   0820A0E1           MOV      R2,R8
   \   00000088   0930A0E1           MOV      R3,R9
   \   0000008C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000090   0080A0E1           MOV      R8,R0
   \   00000094   0190A0E1           MOV      R9,R1
   \                     ??pow_4:
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   0910A0E1           MOV      R1,R9
   \   000000A0   F043BDE8           POP      {R4-R9,LR}
   \   000000A4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_3`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   0000007C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          
      8          
      9          ///////////////////////////////////////////////////////////////////////
     10          //
     11          //  WagoOutmA object routines
     12          //
     13          ///////////////////////////////////////////////////////////////////////
     14          

   \                                 In segment DATA_Z, align 4, align-sorted
     15          set<PRogramObjectBase *>ModbusRegister::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          ModbusRegister::ModbusRegister(void) {
   \                     ??ModbusRegister:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
     18              ModbusSet.insert(this);
   \   00000004   ........           LDR      R5,??DataTable4  ;; ??ModbusSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     ??ModbusObject,??ModbusObject??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   0420A0E1           MOV      R2,R4
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??insert,??insert??rA
     19              IDNumber        = (C_PRO_MODBUS_REG << 16) + ModbusSet.size();
   \   00000028   100095E5           LDR      R0,[R5, #+16]
   \   0000002C   A016A0E3           MOV      R1,#+167772160
   \   00000030   F21881E3           ORR      R1,R1,#0xF20000
   \   00000034   000081E0           ADD      R0,R1,R0
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     20              Type            = C_PRO_MODBUS_REG;
   \   0000003C   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000040   A00084E5           STR      R0,[R4, #+160]
     21          
     22          
     23              TCUAddress          = 0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   640184E5           STR      R0,[R4, #+356]
     24              TCUPortNo           = 0;
   \   0000004C   680184E5           STR      R0,[R4, #+360]
     25              Address             = 0;
   \   00000050   6C0184E5           STR      R0,[R4, #+364]
     26              Channel             = 0;
   \   00000054   700184E5           STR      R0,[R4, #+368]
     27              RefObjectId         = 0;
   \   00000058   9C0184E5           STR      R0,[R4, #+412]
     28              ObjPtr              = NULL;
   \   0000005C   A00184E5           STR      R0,[R4, #+416]
     29              ValueKey            = 0;
   \   00000060   A40184E5           STR      R0,[R4, #+420]
     30              MinRange            = 0.0;
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   7C1184E5           STR      R1,[R4, #+380]
     31              MaxRange            = 1.0;
   \   0000006C   FE25A0E3           MOV      R2,#+1065353216
   \   00000070   802184E5           STR      R2,[R4, #+384]
     32              RegMax              = 0xffff;
   \   00000074   FF30A0E3           MOV      R3,#+255
   \   00000078   FF3C83E3           ORR      R3,R3,#0xFF00
   \   0000007C   A83184E5           STR      R3,[R4, #+424]
     33              Scale               = 1.0;
   \   00000080   882184E5           STR      R2,[R4, #+392]
     34              Offset              = 0.0;
   \   00000084   8C1184E5           STR      R1,[R4, #+396]
     35              HasSign             = false;
   \   00000088   0020A0E1           MOV      R2,R0
   \   0000008C   8421C4E5           STRB     R2,[R4, #+388]
     36              HasDecimalScaling   = false;
   \   00000090   9821C4E5           STRB     R2,[R4, #+408]
     37              ModbusDataFormat = Float_None;
   \   00000094   9901C4E5           STRB     R0,[R4, #+409]
     38              HasRange            = false;
   \   00000098   9A21C4E5           STRB     R2,[R4, #+410]
     39              DecimalPoint        = 0;
   \   0000009C   940184E5           STR      R0,[R4, #+404]
     40              DecimalScaling      = 0.0;
   \   000000A0   901184E5           STR      R1,[R4, #+400]
     41          }
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          ModbusRegister::~ModbusRegister() {
   \                     `?~ModbusRegister`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0B00000A           BEQ      `?~ModbusRegister_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     44              ModbusSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable4  ;; ??ModbusSet
   \   00000024   ........           _BLF     ??erase_1,??erase??rA_1
     45          }
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     `?~ModbusObject`,`?~ModbusObject??rA`
   \   00000034   010015E3           TST      R5,#0x1
   \   00000038   0100000A           BEQ      `?~ModbusRegister_1`
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusRegister_1`:
   \   00000044   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     46          
     47          
     48          ///////////////////////////////////////////////////////////////
     49          //
     50          // Routines for the Configuration
     51          //
     52          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     53          AnsiString ModbusRegister::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     54              AnsiString LocalString = ModbusObject::MakeConfigString();
     55              AnsiString ObjectIdStr;
     56              ObjectIdStr.cat_sprintf("0x%0x", RefObjectId);
   \   00000004   88669FE5           LDR      R6,??MakeConfigString_3  ;; `?<Constant "0x%0x">`
     57          
     58              LocalString += TabStr1 + KeyWord(C_REF_OBJECT_ID) + (AnsiString)ObjectIdStr;
   \   00000008   88769FE5           LDR      R7,??MakeConfigString_3+0x4  ;; TabStr1
   \   0000000C   E0DF4DE2           SUB      SP,SP,#+896
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   ........           _BLF     ??MakeConfigString_2,??MakeConfigString??rA
   \   00000020   770F8DE2           ADD      R0,SP,#+476
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000028   9C3194E5           LDR      R3,[R4, #+412]
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   D91F8DE2           ADD      R1,SP,#+868
   \   00000034   770F8DE2           ADD      R0,SP,#+476
   \   00000038   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   D90F8DE2           ADD      R0,SP,#+868
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   771F8DE2           ADD      R1,SP,#+476
   \   00000050   FC008DE2           ADD      R0,SP,#+252
   \   00000054   ........           _BLF     ??string,??string??rA
   \   00000058   D410A0E3           MOV      R1,#+212
   \   0000005C   E0008DE2           ADD      R0,SP,#+224
   \   00000060   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000064   E0208DE2           ADD      R2,SP,#+224
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   C4008DE2           ADD      R0,SP,#+196
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   FC208DE2           ADD      R2,SP,#+252
   \   00000078   C4108DE2           ADD      R1,SP,#+196
   \   0000007C   A8008DE2           ADD      R0,SP,#+168
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   ........           LDR      R0,??DataTable6  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   008090E5           LDR      R8,[R0, #+0]
   \   00000090   A8108DE2           ADD      R1,SP,#+168
   \   00000094   0830A0E1           MOV      R3,R8
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     ??append,??append??rA
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   A8008DE2           ADD      R0,SP,#+168
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   FC008DE2           ADD      R0,SP,#+252
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   C4008DE2           ADD      R0,SP,#+196
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   E0008DE2           ADD      R0,SP,#+224
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              LocalString += TabStr1 + KeyWord(C_VALUE_KEY) + ValueKeyWord(ValueKey);
   \   000000E0   A41194E5           LDR      R1,[R4, #+420]
   \   000000E4   5B0F8DE2           ADD      R0,SP,#+364
   \   000000E8   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   000000EC   D510A0E3           MOV      R1,#+213
   \   000000F0   540F8DE2           ADD      R0,SP,#+336
   \   000000F4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000F8   542F8DE2           ADD      R2,SP,#+336
   \   000000FC   0710A0E1           MOV      R1,R7
   \   00000100   4D0F8DE2           ADD      R0,SP,#+308
   \   00000104   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000108   5B2F8DE2           ADD      R2,SP,#+364
   \   0000010C   4D1F8DE2           ADD      R1,SP,#+308
   \   00000110   460F8DE2           ADD      R0,SP,#+280
   \   00000114   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000118   0830A0E1           MOV      R3,R8
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   461F8DE2           ADD      R1,SP,#+280
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   ........           _BLF     ??append,??append??rA
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   460F8DE2           ADD      R0,SP,#+280
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   5B0F8DE2           ADD      R0,SP,#+364
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   4D0F8DE2           ADD      R0,SP,#+308
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   540F8DE2           ADD      R0,SP,#+336
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
     60              switch (ModbusDataFormat) {
   \   0000016C   9901D4E5           LDRB     R0,[R4, #+409]
   \   00000170   0A0050E3           CMP      R0,#+10
   \   00000174   2201008A           BHI      ??MakeConfigString_4
   \   00000178   021F8FE2           ADR      R1,??MakeConfigString_1
   \   0000017C   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000180   B01091E1           LDRH     R1,[R1, R0]
   \   00000184   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??MakeConfigString_1:
   \   00000188   7D0041002D00       DC16     +125,+65,+45,+85
   \              5500        
   \   00000190   69001E011E01       DC16     +105,+286,+286,+286
   \              1E01        
   \   00000198   1E0105001900       DC16     +286,+5,+25,+0
   \              0000        
     61              case String10 :
     62                  LocalString += TabStr1 + KeyWord(C_STRING10);
   \                     ??MakeConfigString_5:
   \   000001A0   F010A0E3           MOV      R1,#+240
   \   000001A4   850F8DE2           ADD      R0,SP,#+532
   \   000001A8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001AC   852F8DE2           ADD      R2,SP,#+532
   \   000001B0   0710A0E1           MOV      R1,R7
   \   000001B4   7E0F8DE2           ADD      R0,SP,#+504
   \   000001B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001BC   0830A0E1           MOV      R3,R8
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   7E1F8DE2           ADD      R1,SP,#+504
   \   000001C8   0500A0E1           MOV      R0,R5
   \   000001CC   ........           _BLF     ??append,??append??rA
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   7E0F8DE2           ADD      R0,SP,#+504
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   850F8DE2           ADD      R0,SP,#+532
   \   000001EC   030100EA           B        ??MakeConfigString_6
     63                  break;
     64              case String20 :
     65                  LocalString += TabStr1 + KeyWord(C_STRING20);
   \                     ??MakeConfigString_7:
   \   000001F0   F110A0E3           MOV      R1,#+241
   \   000001F4   930F8DE2           ADD      R0,SP,#+588
   \   000001F8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001FC   932F8DE2           ADD      R2,SP,#+588
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   8C0F8DE2           ADD      R0,SP,#+560
   \   00000208   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000020C   0830A0E1           MOV      R3,R8
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   8C1F8DE2           ADD      R1,SP,#+560
   \   00000218   0500A0E1           MOV      R0,R5
   \   0000021C   ........           _BLF     ??append,??append??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   8C0F8DE2           ADD      R0,SP,#+560
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   930F8DE2           ADD      R0,SP,#+588
   \   0000023C   EF0000EA           B        ??MakeConfigString_6
     66                  break;
     67              case Float_L_Endian:
     68                  LocalString += TabStr1 + KeyWord(C_FLOAT_LITTLE_ENDIAN);
   \                     ??MakeConfigString_8:
   \   00000240   DC10A0E3           MOV      R1,#+220
   \   00000244   A10F8DE2           ADD      R0,SP,#+644
   \   00000248   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000024C   A12F8DE2           ADD      R2,SP,#+644
   \   00000250   0710A0E1           MOV      R1,R7
   \   00000254   9A0F8DE2           ADD      R0,SP,#+616
   \   00000258   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000025C   0830A0E1           MOV      R3,R8
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   9A1F8DE2           ADD      R1,SP,#+616
   \   00000268   0500A0E1           MOV      R0,R5
   \   0000026C   ........           _BLF     ??append,??append??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   9A0F8DE2           ADD      R0,SP,#+616
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   A10F8DE2           ADD      R0,SP,#+644
   \   0000028C   DB0000EA           B        ??MakeConfigString_6
     69                  break;
     70              case Float_B_Endian   :
     71                  LocalString += TabStr1 + KeyWord(C_FLOAT_BIG_ENDIAN);
   \                     ??MakeConfigString_9:
   \   00000290   DB10A0E3           MOV      R1,#+219
   \   00000294   AF0F8DE2           ADD      R0,SP,#+700
   \   00000298   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000029C   AF2F8DE2           ADD      R2,SP,#+700
   \   000002A0   0710A0E1           MOV      R1,R7
   \   000002A4   A80F8DE2           ADD      R0,SP,#+672
   \   000002A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002AC   0830A0E1           MOV      R3,R8
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   A81F8DE2           ADD      R1,SP,#+672
   \   000002B8   0500A0E1           MOV      R0,R5
   \   000002BC   ........           _BLF     ??append,??append??rA
   \   000002C0   0020A0E3           MOV      R2,#+0
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   A80F8DE2           ADD      R0,SP,#+672
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   AF0F8DE2           ADD      R0,SP,#+700
   \   000002DC   C70000EA           B        ??MakeConfigString_6
     72                  break;
     73              case Float_B_Endian_ByteSwap:
     74                  LocalString += TabStr1 + KeyWord(C_FLOAT_B_END_BYTE_SWAP);
   \                     ??MakeConfigString_10:
   \   000002E0   DD10A0E3           MOV      R1,#+221
   \   000002E4   BD0F8DE2           ADD      R0,SP,#+756
   \   000002E8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002EC   BD2F8DE2           ADD      R2,SP,#+756
   \   000002F0   0710A0E1           MOV      R1,R7
   \   000002F4   B60F8DE2           ADD      R0,SP,#+728
   \   000002F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002FC   0830A0E1           MOV      R3,R8
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   B61F8DE2           ADD      R1,SP,#+728
   \   00000308   0500A0E1           MOV      R0,R5
   \   0000030C   ........           _BLF     ??append,??append??rA
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   B60F8DE2           ADD      R0,SP,#+728
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000320   0020A0E3           MOV      R2,#+0
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   BD0F8DE2           ADD      R0,SP,#+756
   \   0000032C   B30000EA           B        ??MakeConfigString_6
     75                  break;
     76              case Float_L_Endian_ByteSwap :
     77                  LocalString += TabStr1 + KeyWord(C_FLOAT_L_END_BYTE_SWAP);
   \                     ??MakeConfigString_11:
   \   00000330   DE10A0E3           MOV      R1,#+222
   \   00000334   CB0F8DE2           ADD      R0,SP,#+812
   \   00000338   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000033C   CB2F8DE2           ADD      R2,SP,#+812
   \   00000340   0710A0E1           MOV      R1,R7
   \   00000344   C40F8DE2           ADD      R0,SP,#+784
   \   00000348   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000034C   0830A0E1           MOV      R3,R8
   \   00000350   0020A0E3           MOV      R2,#+0
   \   00000354   C41F8DE2           ADD      R1,SP,#+784
   \   00000358   0500A0E1           MOV      R0,R5
   \   0000035C   ........           _BLF     ??append,??append??rA
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   0110A0E3           MOV      R1,#+1
   \   00000368   C40F8DE2           ADD      R0,SP,#+784
   \   0000036C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   CB0F8DE2           ADD      R0,SP,#+812
   \   0000037C   9F0000EA           B        ??MakeConfigString_6
     78                  break;
     79              case Float_None       :
     80                  {
     81                      if (HasDecimalScaling) {
   \                     ??MakeConfigString_12:
   \   00000380   9801D4E5           LDRB     R0,[R4, #+408]
   \   00000384   000050E3           CMP      R0,#+0
   \   00000388   2300000A           BEQ      ??MakeConfigString_13
     82                          LocalString += TabStr1 + KeyWord(C_DECIMAL_POINT) + (AnsiString)DecimalPoint;
   \   0000038C   941194E5           LDR      R1,[R4, #+404]
   \   00000390   1C008DE2           ADD      R0,SP,#+28
   \   00000394   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000398   0090A0E1           MOV      R9,R0
   \   0000039C   D810A0E3           MOV      R1,#+216
   \   000003A0   38008DE2           ADD      R0,SP,#+56
   \   000003A4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003A8   38208DE2           ADD      R2,SP,#+56
   \   000003AC   0710A0E1           MOV      R1,R7
   \   000003B0   54008DE2           ADD      R0,SP,#+84
   \   000003B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003B8   0920A0E1           MOV      R2,R9
   \   000003BC   54108DE2           ADD      R1,SP,#+84
   \   000003C0   0D00A0E1           MOV      R0,SP
   \   000003C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C8   0830A0E1           MOV      R3,R8
   \   000003CC   0020A0E3           MOV      R2,#+0
   \   000003D0   0D10A0E1           MOV      R1,SP
   \   000003D4   0500A0E1           MOV      R0,R5
   \   000003D8   ........           _BLF     ??append,??append??rA
   \   000003DC   0020A0E3           MOV      R2,#+0
   \   000003E0   0110A0E3           MOV      R1,#+1
   \   000003E4   0D00A0E1           MOV      R0,SP
   \   000003E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   0110A0E3           MOV      R1,#+1
   \   000003F4   1C008DE2           ADD      R0,SP,#+28
   \   000003F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   0110A0E3           MOV      R1,#+1
   \   00000404   54008DE2           ADD      R0,SP,#+84
   \   00000408   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0110A0E3           MOV      R1,#+1
   \   00000414   38008DE2           ADD      R0,SP,#+56
   \   00000418   ........           _BLF     ??_Tidy,??_Tidy??rA
     83                      }
     84                      if (HasRange) {
   \                     ??MakeConfigString_13:
   \   0000041C   9A01D4E5           LDRB     R0,[R4, #+410]
   \   00000420   000050E3           CMP      R0,#+0
   \   00000424   3700000A           BEQ      ??MakeConfigString_14
     85                          LocalString += TabStr1 + KeyWord(C_RANGE);
   \   00000428   CF10A0E3           MOV      R1,#+207
   \   0000042C   54008DE2           ADD      R0,SP,#+84
   \   00000430   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000434   54208DE2           ADD      R2,SP,#+84
   \   00000438   0710A0E1           MOV      R1,R7
   \   0000043C   38008DE2           ADD      R0,SP,#+56
   \   00000440   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000444   0830A0E1           MOV      R3,R8
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   38108DE2           ADD      R1,SP,#+56
   \   00000450   0500A0E1           MOV      R0,R5
   \   00000454   ........           _BLF     ??append,??append??rA
   \   00000458   0020A0E3           MOV      R2,#+0
   \   0000045C   0110A0E3           MOV      R1,#+1
   \   00000460   38008DE2           ADD      R0,SP,#+56
   \   00000464   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000468   0020A0E3           MOV      R2,#+0
   \   0000046C   0110A0E3           MOV      R1,#+1
   \   00000470   54008DE2           ADD      R0,SP,#+84
   \   00000474   ........           _BLF     ??_Tidy,??_Tidy??rA
     86                          LocalString += FloatToAnsiString(MinRange, 10, 4);
   \   00000478   7C1194E5           LDR      R1,[R4, #+380]
   \   0000047C   0430A0E3           MOV      R3,#+4
   \   00000480   0A20A0E3           MOV      R2,#+10
   \   00000484   0D00A0E1           MOV      R0,SP
   \   00000488   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000048C   0830A0E1           MOV      R3,R8
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0D10A0E1           MOV      R1,SP
   \   00000498   0500A0E1           MOV      R0,R5
   \   0000049C   ........           _BLF     ??append,??append??rA
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   0110A0E3           MOV      R1,#+1
   \   000004A8   0D00A0E1           MOV      R0,SP
   \   000004AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     87                          LocalString += TabStr1 + FloatToAnsiString(MaxRange, 10, 4);
   \   000004B0   801194E5           LDR      R1,[R4, #+384]
   \   000004B4   0430A0E3           MOV      R3,#+4
   \   000004B8   0A20A0E3           MOV      R2,#+10
   \   000004BC   70008DE2           ADD      R0,SP,#+112
   \   000004C0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000004C4   70208DE2           ADD      R2,SP,#+112
   \   000004C8   0710A0E1           MOV      R1,R7
   \   000004CC   1C008DE2           ADD      R0,SP,#+28
   \   000004D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004D4   0830A0E1           MOV      R3,R8
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   1C108DE2           ADD      R1,SP,#+28
   \   000004E0   0500A0E1           MOV      R0,R5
   \   000004E4   ........           _BLF     ??append,??append??rA
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0110A0E3           MOV      R1,#+1
   \   000004F0   1C008DE2           ADD      R0,SP,#+28
   \   000004F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   70008DE2           ADD      R0,SP,#+112
   \   00000504   ........           _BLF     ??_Tidy,??_Tidy??rA
     88                      }
     89                      if (HasSign) {
   \                     ??MakeConfigString_14:
   \   00000508   8401D4E5           LDRB     R0,[R4, #+388]
   \   0000050C   000050E3           CMP      R0,#+0
   \   00000510   1300000A           BEQ      ??MakeConfigString_15
     90                          LocalString += TabStr1 + KeyWord(C_SIGNED);
   \   00000514   CE10A0E3           MOV      R1,#+206
   \   00000518   0D00A0E1           MOV      R0,SP
   \   0000051C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000520   0D20A0E1           MOV      R2,SP
   \   00000524   0710A0E1           MOV      R1,R7
   \   00000528   1C008DE2           ADD      R0,SP,#+28
   \   0000052C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000530   0830A0E1           MOV      R3,R8
   \   00000534   0020A0E3           MOV      R2,#+0
   \   00000538   1C108DE2           ADD      R1,SP,#+28
   \   0000053C   0500A0E1           MOV      R0,R5
   \   00000540   ........           _BLF     ??append,??append??rA
   \   00000544   0020A0E3           MOV      R2,#+0
   \   00000548   0110A0E3           MOV      R1,#+1
   \   0000054C   1C008DE2           ADD      R0,SP,#+28
   \   00000550   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000554   0020A0E3           MOV      R2,#+0
   \   00000558   0110A0E3           MOV      R1,#+1
   \   0000055C   0D00A0E1           MOV      R0,SP
   \   00000560   120000EA           B        ??MakeConfigString_16
     91                      } else {
     92                          LocalString += TabStr1 + KeyWord(C_UNSIGNED);
   \                     ??MakeConfigString_15:
   \   00000564   CD10A0E3           MOV      R1,#+205
   \   00000568   1C008DE2           ADD      R0,SP,#+28
   \   0000056C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000570   1C208DE2           ADD      R2,SP,#+28
   \   00000574   0710A0E1           MOV      R1,R7
   \   00000578   0D00A0E1           MOV      R0,SP
   \   0000057C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000580   0830A0E1           MOV      R3,R8
   \   00000584   0020A0E3           MOV      R2,#+0
   \   00000588   0D10A0E1           MOV      R1,SP
   \   0000058C   0500A0E1           MOV      R0,R5
   \   00000590   ........           _BLF     ??append,??append??rA
   \   00000594   0020A0E3           MOV      R2,#+0
   \   00000598   0110A0E3           MOV      R1,#+1
   \   0000059C   0D00A0E1           MOV      R0,SP
   \   000005A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A4   0020A0E3           MOV      R2,#+0
   \   000005A8   0110A0E3           MOV      R1,#+1
   \   000005AC   1C008DE2           ADD      R0,SP,#+28
   \                     ??MakeConfigString_16:
   \   000005B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     93                      }
     94                      AnsiString MaxRegStr;
   \   000005B4   8C008DE2           ADD      R0,SP,#+140
   \   000005B8   ........           _BLF     ??AnsiString,??AnsiString??rA
     95                      MaxRegStr.cat_sprintf("0x%0x", RegMax);
   \   000005BC   A83194E5           LDR      R3,[R4, #+424]
   \   000005C0   0620A0E1           MOV      R2,R6
   \   000005C4   D21F8DE2           ADD      R1,SP,#+840
   \   000005C8   8C008DE2           ADD      R0,SP,#+140
   \   000005CC   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000005D0   0020A0E3           MOV      R2,#+0
   \   000005D4   0110A0E3           MOV      R1,#+1
   \   000005D8   D20F8DE2           ADD      R0,SP,#+840
   \   000005DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     96                      LocalString += MaxRegStr;
   \   000005E0   0830A0E1           MOV      R3,R8
   \   000005E4   0020A0E3           MOV      R2,#+0
   \   000005E8   8C108DE2           ADD      R1,SP,#+140
   \   000005EC   0500A0E1           MOV      R0,R5
   \   000005F0   ........           _BLF     ??append,??append??rA
     97                  }
   \   000005F4   0020A0E3           MOV      R2,#+0
   \   000005F8   0110A0E3           MOV      R1,#+1
   \   000005FC   8C008DE2           ADD      R0,SP,#+140
   \                     ??MakeConfigString_6:
   \   00000600   ........           _BLF     ??_Tidy,??_Tidy??rA
     98                  break;
     99              }
    100              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \                     ??MakeConfigString_4:
   \   00000604   6110A0E3           MOV      R1,#+97
   \   00000608   901E81E3           ORR      R1,R1,#0x900
   \   0000060C   700F8DE2           ADD      R0,SP,#+448
   \   00000610   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000614   702F8DE2           ADD      R2,SP,#+448
   \   00000618   0710A0E1           MOV      R1,R7
   \   0000061C   690F8DE2           ADD      R0,SP,#+420
   \   00000620   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000624   70209FE5           LDR      R2,??MakeConfigString_3+0x8  ;; CrLfStr
   \   00000628   691F8DE2           ADD      R1,SP,#+420
   \   0000062C   620F8DE2           ADD      R0,SP,#+392
   \   00000630   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000634   0830A0E1           MOV      R3,R8
   \   00000638   0020A0E3           MOV      R2,#+0
   \   0000063C   621F8DE2           ADD      R1,SP,#+392
   \   00000640   0500A0E1           MOV      R0,R5
   \   00000644   ........           _BLF     ??append,??append??rA
   \   00000648   0020A0E3           MOV      R2,#+0
   \   0000064C   0110A0E3           MOV      R1,#+1
   \   00000650   620F8DE2           ADD      R0,SP,#+392
   \   00000654   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000658   0020A0E3           MOV      R2,#+0
   \   0000065C   0110A0E3           MOV      R1,#+1
   \   00000660   690F8DE2           ADD      R0,SP,#+420
   \   00000664   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000668   0020A0E3           MOV      R2,#+0
   \   0000066C   0110A0E3           MOV      R1,#+1
   \   00000670   700F8DE2           ADD      R0,SP,#+448
   \   00000674   ........           _BLF     ??_Tidy,??_Tidy??rA
    101              return (LocalString);
   \   00000678   0020A0E3           MOV      R2,#+0
   \   0000067C   0110A0E3           MOV      R1,#+1
   \   00000680   770F8DE2           ADD      R0,SP,#+476
   \   00000684   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000688   E0DF8DE2           ADD      SP,SP,#+896
   \   0000068C   F043BDE8           POP      {R4-R9,LR}
   \   00000690   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_3:
   \   00000694   ........           DC32     `?<Constant "0x%0x">`
   \   00000698   ........           DC32     TabStr1
   \   0000069C   ........           DC32     CrLfStr
    102          }
    103          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    104          bool ModbusRegister::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
    105              SetLineNumber(ConfigString.LineCount);
    106              int ErrorLine = 0;
    107              bool NoError = true;
    108              if (ModbusObject::LoadConfigString(ConfigString)) {
   \   00000008   9CA69FE5           LDR      R10,??LoadConfigString_2  ;; `?<Constant "Modbus Register">`
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0160A0E3           MOV      R6,#+1
   \   00000028   0170A0E3           MOV      R7,#+1
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0090A0E3           MOV      R9,#+0
   \   00000040   00B066E2           RSB      R11,R6,#+0
   \   00000044   6201000A           BEQ      ??LoadConfigString_3
    109                  int Key;
    110                  do {
    111                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   3C108DE2           ADD      R1,SP,#+60
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000005C   00009DE5           LDR      R0,[SP, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0B00000A           BEQ      ??LoadConfigString_5
    112                      if (ErrorLine) {
    113                          if (ErrorLine != EOF) {
   \   00000068   0B0050E1           CMP      R0,R11
   \   0000006C   F500000A           BEQ      ??LoadConfigString_6
    114                              GiveConfigWarning("Modbus Register", ErrorLine);
   \   00000070   0A10A0E1           MOV      R1,R10
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000007C   00109DE5           LDR      R1,[SP, #+0]
   \   00000080   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   EB0000EA           B        ??LoadConfigString_6
    115                          }
    116                      } else {
    117                          Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_5:
   \   00000098   3C108DE2           ADD      R1,SP,#+60
   \   0000009C   20008DE2           ADD      R0,SP,#+32
   \   000000A0   ........           _BLF     ??string,??string??rA
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0610A0E1           MOV      R1,R6
   \   000000B8   20008DE2           ADD      R0,SP,#+32
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    118                          switch (Key) {
   \   000000C0   CD0058E3           CMP      R8,#+205
   \   000000C4   8500000A           BEQ      ??LoadConfigString_8
   \   000000C8   CE0058E3           CMP      R8,#+206
   \   000000CC   8B00000A           BEQ      ??LoadConfigString_9
   \   000000D0   CF0058E3           CMP      R8,#+207
   \   000000D4   8C00000A           BEQ      ??LoadConfigString_10
   \   000000D8   D10058E3           CMP      R8,#+209
   \   000000DC   D4005813           CMPNE    R8,#+212
   \   000000E0   CF00000A           BEQ      ??LoadConfigString_11
   \   000000E4   D50058E3           CMP      R8,#+213
   \   000000E8   3900000A           BEQ      ??LoadConfigString_12
   \   000000EC   D80058E3           CMP      R8,#+216
   \   000000F0   A400000A           BEQ      ??LoadConfigString_13
   \   000000F4   DB0058E3           CMP      R8,#+219
   \   000000F8   B300000A           BEQ      ??LoadConfigString_14
   \   000000FC   DC0058E3           CMP      R8,#+220
   \   00000100   B300000A           BEQ      ??LoadConfigString_15
   \   00000104   DD0058E3           CMP      R8,#+221
   \   00000108   B400000A           BEQ      ??LoadConfigString_16
   \   0000010C   DE0058E3           CMP      R8,#+222
   \   00000110   B400000A           BEQ      ??LoadConfigString_17
   \   00000114   DF0058E3           CMP      R8,#+223
   \   00000118   B400000A           BEQ      ??LoadConfigString_18
   \   0000011C   E00058E3           CMP      R8,#+224
   \   00000120   B400000A           BEQ      ??LoadConfigString_19
   \   00000124   E10058E3           CMP      R8,#+225
   \   00000128   B400000A           BEQ      ??LoadConfigString_20
   \   0000012C   E20058E3           CMP      R8,#+226
   \   00000130   B400000A           BEQ      ??LoadConfigString_21
   \   00000134   F00058E3           CMP      R8,#+240
   \   00000138   B500000A           BEQ      ??LoadConfigString_22
   \   0000013C   F10058E3           CMP      R8,#+241
   \   00000140   B500000A           BEQ      ??LoadConfigString_23
   \   00000144   FA0F58E3           CMP      R8,#+1000
   \   00000148   EA10A013           MOVNE    R1,#+234
   \   0000014C   C01F8113           ORRNE    R1,R1,#0x300
   \   00000150   01005811           CMPNE    R8,R1
   \   00000154   4E00000A           BEQ      ??LoadConfigString_24
   \   00000158   1510A0E3           MOV      R1,#+21
   \   0000015C   501E81E3           ORR      R1,R1,#0x500
   \   00000160   010058E1           CMP      R8,R1
   \   00000164   4D00000A           BEQ      ??LoadConfigString_25
   \   00000168   6C10A0E3           MOV      R1,#+108
   \   0000016C   701E81E3           ORR      R1,R1,#0x700
   \   00000170   010058E1           CMP      R8,R1
   \   00000174   02108113           ORRNE    R1,R1,#0x2
   \   00000178   01005811           CMPNE    R8,R1
   \   0000017C   4400000A           BEQ      ??LoadConfigString_24
   \   00000180   961E86E3           ORR      R1,R6,#0x960
   \   00000184   010058E1           CMP      R8,R1
   \   00000188   4200000A           BEQ      ??LoadConfigString_26
    119                          default:
    120                              NoError = false;
    121                              GiveConfigWarning("Modbus Register", InputKeyWord, ConfigString.LineCount);
   \   0000018C   3C108DE2           ADD      R1,SP,#+60
   \   00000190   AC008DE2           ADD      R0,SP,#+172
   \   00000194   ........           _BLF     ??string,??string??rA
   \   00000198   0A10A0E1           MOV      R1,R10
   \   0000019C   C8008DE2           ADD      R0,SP,#+200
   \   000001A0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001A4   1C2095E5           LDR      R2,[R5, #+28]
   \   000001A8   0070A0E3           MOV      R7,#+0
   \   000001AC   AC108DE2           ADD      R1,SP,#+172
   \   000001B0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001B4   0720A0E1           MOV      R2,R7
   \   000001B8   0610A0E1           MOV      R1,R6
   \   000001BC   AC008DE2           ADD      R0,SP,#+172
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C4   0720A0E1           MOV      R2,R7
   \   000001C8   0610A0E1           MOV      R1,R6
   \   000001CC   C8008DE2           ADD      R0,SP,#+200
   \   000001D0   AEFFFFEA           B        ??LoadConfigString_7
    122                              break;
    123                          case C_VALUE_KEY        :
    124                              {
    125                                  AnsiString tempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_12:
   \   000001D4   0030A0E3           MOV      R3,#+0
   \   000001D8   0D20A0E1           MOV      R2,SP
   \   000001DC   74108DE2           ADD      R1,SP,#+116
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   ........           _BLF     ??NextWord,??NextWord??rA
    126                                  NoError = !ErrorLine;
   \   000001E8   00009DE5           LDR      R0,[SP, #+0]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0170A003           MOVEQ    R7,#+1
   \   000001F4   0070A013           MOVNE    R7,#+0
    127                                  if (NoError) {
   \   000001F8   000057E3           CMP      R7,#+0
   \   000001FC   2000000A           BEQ      ??LoadConfigString_27
    128                                      ValueKey = FindValueConfigKey(tempStr);
   \   00000200   74108DE2           ADD      R1,SP,#+116
   \   00000204   04008DE2           ADD      R0,SP,#+4
   \   00000208   ........           _BLF     ??string,??string??rA
   \   0000020C   04008DE2           ADD      R0,SP,#+4
   \   00000210   ........           _BLF     ??FindValueConfigKey,??FindValueConfigKey??rA
   \   00000214   A40184E5           STR      R0,[R4, #+420]
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0610A0E1           MOV      R1,R6
   \   00000220   04008DE2           ADD      R0,SP,#+4
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
    129                                      if (ValueKey == NOT_FOUND) {
   \   00000228   A40194E5           LDR      R0,[R4, #+420]
   \   0000022C   0B0050E1           CMP      R0,R11
   \   00000230   1300001A           BNE      ??LoadConfigString_27
    130                                          ErrorLine = ConfigString.LineCount;
   \   00000234   1C1095E5           LDR      R1,[R5, #+28]
    131                                          NoError = false;
    132                                          GiveConfigWarning("Modbus Register value", tempStr, ConfigString.LineCount);
   \   00000238   58008DE2           ADD      R0,SP,#+88
   \   0000023C   00108DE5           STR      R1,[SP, #+0]
   \   00000240   74108DE2           ADD      R1,SP,#+116
   \   00000244   ........           _BLF     ??string,??string??rA
   \   00000248   10108AE2           ADD      R1,R10,#+16
   \   0000024C   90008DE2           ADD      R0,SP,#+144
   \   00000250   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000254   1C2095E5           LDR      R2,[R5, #+28]
   \   00000258   0070A0E3           MOV      R7,#+0
   \   0000025C   58108DE2           ADD      R1,SP,#+88
   \   00000260   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000264   0720A0E1           MOV      R2,R7
   \   00000268   0610A0E1           MOV      R1,R6
   \   0000026C   58008DE2           ADD      R0,SP,#+88
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000274   0720A0E1           MOV      R2,R7
   \   00000278   0610A0E1           MOV      R1,R6
   \   0000027C   90008DE2           ADD      R0,SP,#+144
   \   00000280   ........           _BLF     ??_Tidy,??_Tidy??rA
    133                                      }
    134                                  }
    135                              }
   \                     ??LoadConfigString_27:
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0610A0E1           MOV      R1,R6
   \   0000028C   74008DE2           ADD      R0,SP,#+116
   \   00000290   7EFFFFEA           B        ??LoadConfigString_7
    136                              break;
    137                          case C_PRO_END_COMMON   :
    138                          case C_PRO_END          :
    139                          case C_CTRL_END_COMMON  :
    140                          case C_CTRL_END         :
    141                              NoError = false;
   \                     ??LoadConfigString_24:
   \   00000294   0070A0E3           MOV      R7,#+0
    142                          case C_MODBUS_END       :
    143                              Key = C_MODBUS_END;
   \                     ??LoadConfigString_26:
   \   00000298   968E86E3           ORR      R8,R6,#0x960
   \   0000029C   690000EA           B        ??LoadConfigString_6
    144                              break;
    145                          case C_PRO_NAME         :
    146                              Name = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_25:
   \   000002A0   0030A0E3           MOV      R3,#+0
   \   000002A4   0D20A0E1           MOV      R2,SP
   \   000002A8   E4108DE2           ADD      R1,SP,#+228
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   ........           _BLF     ??NextWord,??NextWord??rA
   \   000002B4   ........           LDR      R0,??DataTable6  ;; ??npos
   \   000002B8   0920A0E1           MOV      R2,R9
   \   000002BC   003090E5           LDR      R3,[R0, #+0]
   \   000002C0   E4108DE2           ADD      R1,SP,#+228
   \   000002C4   440084E2           ADD      R0,R4,#+68
   \   000002C8   ........           _BLF     ??assign,??assign??rA
   \   000002CC   0920A0E1           MOV      R2,R9
   \   000002D0   0610A0E1           MOV      R1,R6
   \   000002D4   E4008DE2           ADD      R0,SP,#+228
   \                     ??LoadConfigString_28:
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
    147                              NoError = !ErrorLine;
   \   000002DC   550000EA           B        ??LoadConfigString_29
    148                              break;
    149                          case C_UNSIGNED         :
    150                              HasSign = false;
   \                     ??LoadConfigString_8:
   \   000002E0   0000A0E3           MOV      R0,#+0
   \   000002E4   8401C4E5           STRB     R0,[R4, #+388]
    151                              RegMax  = ConfigString.ReadInteger(ErrorLine);
   \   000002E8   0020A0E1           MOV      R2,R0
   \                     ??LoadConfigString_30:
   \   000002EC   0D10A0E1           MOV      R1,SP
   \   000002F0   0500A0E1           MOV      R0,R5
   \   000002F4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   000002F8   A80184E5           STR      R0,[R4, #+424]
    152                              NoError = !ErrorLine;
   \   000002FC   4D0000EA           B        ??LoadConfigString_29
    153                              break;
    154                          case C_SIGNED           :
    155                              HasSign = true;
   \                     ??LoadConfigString_9:
   \   00000300   8461C4E5           STRB     R6,[R4, #+388]
    156                              RegMax  = ConfigString.ReadInteger(ErrorLine);
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   F7FFFFEA           B        ??LoadConfigString_30
    157                              NoError = !ErrorLine;
    158                              break;
    159                          case C_RANGE:
    160                              HasRange = true;
   \                     ??LoadConfigString_10:
   \   0000030C   9A61C4E5           STRB     R6,[R4, #+410]
    161                              MinRange = ConfigString.ReadDouble(ErrorLine);
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0D10A0E1           MOV      R1,SP
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000320   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000324   7C0184E5           STR      R0,[R4, #+380]
    162                              if (!ErrorLine) {
   \   00000328   00009DE5           LDR      R0,[SP, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   4000001A           BNE      ??LoadConfigString_29
    163                                  MaxRange = ConfigString.ReadDouble(ErrorLine);
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   0D10A0E1           MOV      R1,SP
   \   0000033C   0500A0E1           MOV      R0,R5
   \   00000340   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000344   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000348   800184E5           STR      R0,[R4, #+384]
    164                                  if (MinRange == MaxRange) {
   \   0000034C   7C1194E5           LDR      R1,[R4, #+380]
   \   00000350   ........           _BLF     __fEqual,??__fEqual??rA
   \   00000354   000050E3           CMP      R0,#+0
   \   00000358   3600000A           BEQ      ??LoadConfigString_29
    165                                      HasRange = false;
   \   0000035C   0000A0E3           MOV      R0,#+0
   \   00000360   9A01C4E5           STRB     R0,[R4, #+410]
    166                                      GiveConfigWarning("Modbus Register MinRange and MaxRange can not be equal!", ConfigString.LineCount);
   \   00000364   28108AE2           ADD      R1,R10,#+40
   \   00000368   04008DE2           ADD      R0,SP,#+4
   \   0000036C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000370   1C1095E5           LDR      R1,[R5, #+28]
   \   00000374   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000378   0920A0E1           MOV      R2,R9
   \   0000037C   0610A0E1           MOV      R1,R6
   \   00000380   04008DE2           ADD      R0,SP,#+4
   \   00000384   D3FFFFEA           B        ??LoadConfigString_28
    167                                  }
    168                              }
    169                              NoError = !ErrorLine;
    170                              break;
    171                          case C_DECIMAL_POINT:
    172                              HasDecimalScaling = true;
   \                     ??LoadConfigString_13:
   \   00000388   9861C4E5           STRB     R6,[R4, #+408]
    173                              DecimalPoint = ConfigString.ReadInteger(ErrorLine);
   \   0000038C   0020A0E3           MOV      R2,#+0
   \   00000390   0D10A0E1           MOV      R1,SP
   \   00000394   0500A0E1           MOV      R0,R5
   \   00000398   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   0000039C   940184E5           STR      R0,[R4, #+404]
    174                              if (ErrorLine) {
   \   000003A0   00009DE5           LDR      R0,[SP, #+0]
   \   000003A4   000050E3           CMP      R0,#+0
    175                                  NoError = false;
   \   000003A8   0070A013           MOVNE    R7,#+0
   \   000003AC   2500001A           BNE      ??LoadConfigString_6
    176                              } else {
    177                                  DecimalScaling = pow(10.0, DecimalPoint);
   \   000003B0   942194E5           LDR      R2,[R4, #+404]
   \   000003B4   4014A0E3           MOV      R1,#+1073741824
   \   000003B8   901981E3           ORR      R1,R1,#0x240000
   \   000003BC   ........           _BLF     ??pow,??pow??rA
   \   000003C0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003C4   900184E5           STR      R0,[R4, #+400]
   \   000003C8   1E0000EA           B        ??LoadConfigString_6
    178                              }
    179                              break;
    180                          case C_FLOAT_BIG_ENDIAN:
    181                              ModbusDataFormat = Float_B_Endian;
   \                     ??LoadConfigString_14:
   \   000003CC   9961C4E5           STRB     R6,[R4, #+409]
   \   000003D0   1C0000EA           B        ??LoadConfigString_6
    182                              break;
    183                          case C_FLOAT_LITTLE_ENDIAN:
    184                              ModbusDataFormat = Float_L_Endian;
   \                     ??LoadConfigString_15:
   \   000003D4   0200A0E3           MOV      R0,#+2
   \                     ??LoadConfigString_31:
   \   000003D8   9901C4E5           STRB     R0,[R4, #+409]
   \   000003DC   190000EA           B        ??LoadConfigString_6
    185                              break;
    186                          case C_FLOAT_B_END_BYTE_SWAP:
    187                              ModbusDataFormat = Float_B_Endian_ByteSwap;
   \                     ??LoadConfigString_16:
   \   000003E0   0300A0E3           MOV      R0,#+3
   \   000003E4   FBFFFFEA           B        ??LoadConfigString_31
    188                              break;
    189                          case C_FLOAT_L_END_BYTE_SWAP:
    190                              ModbusDataFormat = Float_L_Endian_ByteSwap;
   \                     ??LoadConfigString_17:
   \   000003E8   0400A0E3           MOV      R0,#+4
   \                     ??LoadConfigString_32:
   \   000003EC   F9FFFFEA           B        ??LoadConfigString_31
    191                              break;
    192                          case C_INT_BIG_ENDIAN:
    193                              ModbusDataFormat = Integer_B_Endian;
   \                     ??LoadConfigString_18:
   \   000003F0   0500A0E3           MOV      R0,#+5
   \   000003F4   F7FFFFEA           B        ??LoadConfigString_31
    194                              break;
    195                          case C_INT_LITTLE_ENDIAN:
    196                              ModbusDataFormat = Integer_L_Endian;
   \                     ??LoadConfigString_19:
   \   000003F8   0600A0E3           MOV      R0,#+6
   \   000003FC   F5FFFFEA           B        ??LoadConfigString_31
    197                              break;
    198                          case C_INT_B_END_BYTE_SWAP:
    199                              ModbusDataFormat = Integer_B_Endian_ByteSwap;
   \                     ??LoadConfigString_20:
   \   00000400   0700A0E3           MOV      R0,#+7
   \   00000404   F3FFFFEA           B        ??LoadConfigString_31
    200                              break;
    201                          case C_INT_L_END_BYTE_SWAP:
    202                              ModbusDataFormat = Integer_L_Endian_ByteSwap;
   \                     ??LoadConfigString_21:
   \   00000408   0800A0E3           MOV      R0,#+8
   \   0000040C   9901C4E5           STRB     R0,[R4, #+409]
   \   00000410   0C0000EA           B        ??LoadConfigString_6
    203                              break;
    204                          case C_STRING10:
    205                              ModbusDataFormat = String10;
   \                     ??LoadConfigString_22:
   \   00000414   0900A0E3           MOV      R0,#+9
   \   00000418   EEFFFFEA           B        ??LoadConfigString_31
    206                              break;
    207                          case C_STRING20:
    208                              ModbusDataFormat = String20;
   \                     ??LoadConfigString_23:
   \   0000041C   0A00A0E3           MOV      R0,#+10
   \   00000420   ECFFFFEA           B        ??LoadConfigString_31
    209                              break;
    210                          case C_REF_OBJECT_ID:
    211                          case C_OBJECT_ID:
    212                              RefObjectId = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_11:
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0D10A0E1           MOV      R1,SP
   \   0000042C   0500A0E1           MOV      R0,R5
   \   00000430   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000434   9C0184E5           STR      R0,[R4, #+412]
    213                              NoError = !ErrorLine;
   \                     ??LoadConfigString_29:
   \   00000438   00009DE5           LDR      R0,[SP, #+0]
   \   0000043C   000050E3           CMP      R0,#+0
   \   00000440   0170A003           MOVEQ    R7,#+1
   \   00000444   0070A013           MOVNE    R7,#+0
    214                              break;
    215                          }
    216                      }
    217                  }while (NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END));
   \                     ??LoadConfigString_6:
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   0610A0E1           MOV      R1,R6
   \   00000450   3C008DE2           ADD      R0,SP,#+60
   \   00000454   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000458   000057E3           CMP      R7,#+0
   \   0000045C   00009D15           LDRNE    R0,[SP, #+0]
   \   00000460   0B005011           CMPNE    R0,R11
   \   00000464   960E8613           ORRNE    R0,R6,#0x960
   \   00000468   00005811           CMPNE    R8,R0
   \   0000046C   F5FEFF1A           BNE      ??LoadConfigString_4
    218                  if (HasDecimalScaling && !ModbusDataFormat && HasRange) {
   \   00000470   9801D4E5           LDRB     R0,[R4, #+408]
   \   00000474   000050E3           CMP      R0,#+0
   \   00000478   5300000A           BEQ      ??LoadConfigString_33
   \   0000047C   9901D4E5           LDRB     R0,[R4, #+409]
   \   00000480   000050E3           CMP      R0,#+0
   \   00000484   5000001A           BNE      ??LoadConfigString_33
   \   00000488   9A01D4E5           LDRB     R0,[R4, #+410]
   \   0000048C   000050E3           CMP      R0,#+0
   \   00000490   4D00000A           BEQ      ??LoadConfigString_33
    219                      float MaxVal;
    220                      float MinVal;
    221                      if (HasSign) {
   \   00000494   8401D4E5           LDRB     R0,[R4, #+388]
   \   00000498   A88194E5           LDR      R8,[R4, #+424]
   \   0000049C   000050E3           CMP      R0,#+0
   \   000004A0   0800A0E1           MOV      R0,R8
   \   000004A4   0500000A           BEQ      ??LoadConfigString_34
    222                          MaxVal = float(RegMax);
   \   000004A8   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000004AC   0060A0E1           MOV      R6,R0
    223                          MinVal = float(-RegMax);
   \   000004B0   000068E2           RSB      R0,R8,#+0
   \   000004B4   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000004B8   0080A0E1           MOV      R8,R0
   \   000004BC   020000EA           B        ??LoadConfigString_35
    224                      } else {
    225                          MaxVal = float(unsigned(RegMax));
   \                     ??LoadConfigString_34:
   \   000004C0   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000004C4   0060A0E1           MOV      R6,R0
    226                          MinVal = 0.0;
   \   000004C8   0080A0E3           MOV      R8,#+0
    227                      }
    228          
    229                      if (DecimalScaling * MaxRange > MaxVal) {
   \                     ??LoadConfigString_35:
   \   000004CC   90B194E5           LDR      R11,[R4, #+400]
   \   000004D0   800194E5           LDR      R0,[R4, #+384]
   \   000004D4   0B10A0E1           MOV      R1,R11
   \   000004D8   ........           _BLF     __fMul,??__fMul??rA
   \   000004DC   0010A0E1           MOV      R1,R0
   \   000004E0   0600A0E1           MOV      R0,R6
   \   000004E4   ........           _BLF     __fLess,??__fLess??rA
   \   000004E8   000050E3           CMP      R0,#+0
   \   000004EC   1800000A           BEQ      ??LoadConfigString_36
    230                          GiveConfigWarning("Modbus Register. Overflow of integer aritmetic when checking max range against decimal point! Line number " + ConfigString.GetCurrentLineStr());
   \   000004F0   20108DE2           ADD      R1,SP,#+32
   \   000004F4   0500A0E1           MOV      R0,R5
   \   000004F8   ........           _BLF     ??GetCurrentLineStr,??GetCurrentLineStr??rA
   \   000004FC   20208DE2           ADD      R2,SP,#+32
   \   00000500   60108AE2           ADD      R1,R10,#+96
   \   00000504   3C008DE2           ADD      R0,SP,#+60
   \   00000508   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000050C   3C108DE2           ADD      R1,SP,#+60
   \   00000510   04008DE2           ADD      R0,SP,#+4
   \   00000514   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000518   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   0000051C   0020A0E3           MOV      R2,#+0
   \   00000520   0110A0E3           MOV      R1,#+1
   \   00000524   04008DE2           ADD      R0,SP,#+4
   \   00000528   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000052C   0920A0E1           MOV      R2,R9
   \   00000530   0110A0E3           MOV      R1,#+1
   \   00000534   3C008DE2           ADD      R0,SP,#+60
   \   00000538   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000053C   0920A0E1           MOV      R2,R9
   \   00000540   0110A0E3           MOV      R1,#+1
   \   00000544   20008DE2           ADD      R0,SP,#+32
   \                     ??LoadConfigString_37:
   \   00000548   ........           _BLF     ??_Tidy,??_Tidy??rA
    231                          NoError = false;
   \   0000054C   0070A0E3           MOV      R7,#+0
   \   00000550   510000EA           B        ??LoadConfigString_38
    232                      } else if (DecimalScaling * MinRange < MinVal) {
   \                     ??LoadConfigString_36:
   \   00000554   7C0194E5           LDR      R0,[R4, #+380]
   \   00000558   0B10A0E1           MOV      R1,R11
   \   0000055C   ........           _BLF     __fMul,??__fMul??rA
   \   00000560   0810A0E1           MOV      R1,R8
   \   00000564   ........           _BLF     __fLess,??__fLess??rA
   \   00000568   000050E3           CMP      R0,#+0
   \   0000056C   1600000A           BEQ      ??LoadConfigString_33
    233                          GiveConfigWarning("Modbus Register. Overflow of integer aritmetic when checking min range against decimal point! Line number " + ConfigString.GetCurrentLineStr());
   \   00000570   3C108DE2           ADD      R1,SP,#+60
   \   00000574   0500A0E1           MOV      R0,R5
   \   00000578   ........           _BLF     ??GetCurrentLineStr,??GetCurrentLineStr??rA
   \   0000057C   3C208DE2           ADD      R2,SP,#+60
   \   00000580   CC108AE2           ADD      R1,R10,#+204
   \   00000584   20008DE2           ADD      R0,SP,#+32
   \   00000588   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000058C   20108DE2           ADD      R1,SP,#+32
   \   00000590   04008DE2           ADD      R0,SP,#+4
   \   00000594   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000598   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   04008DE2           ADD      R0,SP,#+4
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005AC   0920A0E1           MOV      R2,R9
   \   000005B0   0110A0E3           MOV      R1,#+1
   \   000005B4   20008DE2           ADD      R0,SP,#+32
   \   000005B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005BC   0920A0E1           MOV      R2,R9
   \   000005C0   0110A0E3           MOV      R1,#+1
   \   000005C4   3C008DE2           ADD      R0,SP,#+60
   \   000005C8   DEFFFFEA           B        ??LoadConfigString_37
    234                          NoError = false;
    235                      }
    236                  }
    237              }
    238              if (NoError) {
   \                     ??LoadConfigString_33:
   \   000005CC   000057E3           CMP      R7,#+0
   \   000005D0   3100000A           BEQ      ??LoadConfigString_38
    239                  if (HasRange) {
   \                     ??LoadConfigString_3:
   \   000005D4   9A01D4E5           LDRB     R0,[R4, #+410]
   \   000005D8   000050E3           CMP      R0,#+0
   \   000005DC   0400000A           BEQ      ??LoadConfigString_39
    240                      CalculateScale();
   \   000005E0   A41094E5           LDR      R1,[R4, #+164]
   \   000005E4   0400A0E1           MOV      R0,R4
   \   000005E8   A01091E5           LDR      R1,[R1, #+160]
   \   000005EC   0FE0A0E1           MOV      LR,PC
   \   000005F0   11FF2FE1           BX       R1
    241                  }
    242                  if (HasSign) {
    243                      //Offset -= Scale*((float)(RegMax+1));
    244                  }
    245                  if (!IsCreatedFromMultiple) {
   \                     ??LoadConfigString_39:
   \   000005F4   7801D4E5           LDRB     R0,[R4, #+376]
   \   000005F8   000050E3           CMP      R0,#+0
   \   000005FC   2600001A           BNE      ??LoadConfigString_38
    246                      ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, RefObjectId);
   \   00000600   01002DE9           PUSH     {R0}
   \   00000604   9C0194E5           LDR      R0,[R4, #+412]
   \   00000608   5C9FA0E3           MOV      R9,#+368
   \   0000060C   01002DE9           PUSH     {R0}
   \   00000610   040099E7           LDR      R0,[R9, +R4]
   \   00000614   595FA0E3           MOV      R5,#+356
   \   00000618   5A6FA0E3           MOV      R6,#+360
   \   0000061C   5B8FA0E3           MOV      R8,#+364
   \   00000620   01002DE9           PUSH     {R0}
   \   00000624   A03094E5           LDR      R3,[R4, #+160]
   \   00000628   042098E7           LDR      R2,[R8, +R4]
   \   0000062C   041096E7           LDR      R1,[R6, +R4]
   \   00000630   040095E7           LDR      R0,[R5, +R4]
   \   00000634   FF2002E2           AND      R2,R2,#0xFF
   \   00000638   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000063C   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000640   FF0000E2           AND      R0,R0,#0xFF
   \   00000644   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    247                      if (ModbusDataFormat) { // Check if two registers are required
   \   00000648   9901D4E5           LDRB     R0,[R4, #+409]
   \   0000064C   0CD08DE2           ADD      SP,SP,#+12
   \   00000650   000050E3           CMP      R0,#+0
   \   00000654   1000000A           BEQ      ??LoadConfigString_38
    248                          ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel + 1, RefObjectId);
   \   00000658   0000A0E3           MOV      R0,#+0
   \   0000065C   01002DE9           PUSH     {R0}
   \   00000660   9C0194E5           LDR      R0,[R4, #+412]
   \   00000664   01002DE9           PUSH     {R0}
   \   00000668   040099E7           LDR      R0,[R9, +R4]
   \   0000066C   010080E2           ADD      R0,R0,#+1
   \   00000670   01002DE9           PUSH     {R0}
   \   00000674   A03094E5           LDR      R3,[R4, #+160]
   \   00000678   042098E7           LDR      R2,[R8, +R4]
   \   0000067C   041096E7           LDR      R1,[R6, +R4]
   \   00000680   040095E7           LDR      R0,[R5, +R4]
   \   00000684   FF2002E2           AND      R2,R2,#0xFF
   \   00000688   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000068C   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000690   FF0000E2           AND      R0,R0,#0xFF
   \   00000694   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   00000698   0CD08DE2           ADD      SP,SP,#+12
    249                      }
    250                  }
    251              }
    252              return (NoError);
   \                     ??LoadConfigString_38:
   \   0000069C   0700A0E1           MOV      R0,R7
   \   000006A0   40DF8DE2           ADD      SP,SP,#+256
   \   000006A4   F04FBDE8           POP      {R4-R11,LR}
   \   000006A8   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   000006AC   ........           DC32     `?<Constant "Modbus Register">`
    253          }
    254          //---------------------------------------------------------------------------
    255          
    256          

   \                                 In segment CODE, align 4, keep-with-next
    257          void ModbusRegister::SetProList(void) {
   \                     ??SetProList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    258              ObjPtr = (PRogramObject *)FindPROFromIDNumber(RefObjectId);
   \   0000000C   9C0194E5           LDR      R0,[R4, #+412]
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000018   A00184E5           STR      R0,[R4, #+416]
    259              if (!ObjPtr) {
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   2500001A           BNE      ??SetProList_1
    260                  AnsiString InfoStr;
   \   00000024   38008DE2           ADD      R0,SP,#+56
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
    261                  if (IsCreatedFromMultiple) {
   \   0000002C   7801D4E5           LDRB     R0,[R4, #+376]
   \   00000030   90209FE5           LDR      R2,??SetProList_2  ;; `?<Constant "Created by ModbusMult...">`
   \   00000034   9C3194E5           LDR      R3,[R4, #+412]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0400000A           BEQ      ??SetProList_3
    262                      InfoStr.cat_sprintf("Created by ModbusMultiple (Line number %i): ModbusRegister RefIDNumber %i (0x%0x) is incorrect", LineNumber, RefObjectId,RefObjectId);
   \   00000040   0300A0E1           MOV      R0,R3
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   08002DE9           PUSH     {R3}
   \   0000004C   043094E5           LDR      R3,[R4, #+4]
   \   00000050   040000EA           B        ??SetProList_4
    263                  } else {
    264                      InfoStr.cat_sprintf("ModbusRegister RefIDNumber %i (0x%0x) is incorrect. Line Number %i", RefObjectId, RefObjectId,LineNumber);
   \                     ??SetProList_3:
   \   00000054   040094E5           LDR      R0,[R4, #+4]
   \   00000058   602082E2           ADD      R2,R2,#+96
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0300A0E1           MOV      R0,R3
   \   00000064   01002DE9           PUSH     {R0}
   \                     ??SetProList_4:
   \   00000068   08108DE2           ADD      R1,SP,#+8
   \   0000006C   40008DE2           ADD      R0,SP,#+64
   \   00000070   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   08008DE2           ADD      R0,SP,#+8
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    265                  }
    266                  GiveConfigWarning(InfoStr);
   \   00000088   38108DE2           ADD      R1,SP,#+56
   \   0000008C   1C008DE2           ADD      R0,SP,#+28
   \   00000090   ........           _BLF     ??string,??string??rA
   \   00000094   1C008DE2           ADD      R0,SP,#+28
   \   00000098   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   1C008DE2           ADD      R0,SP,#+28
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    267              }
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   38008DE2           ADD      R0,SP,#+56
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    268          
    269          }
   \                     ??SetProList_1:
   \   000000BC   54D08DE2           ADD      SP,SP,#+84
   \   000000C0   1040BDE8           POP      {R4,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return
   \                     ??SetProList_2:
   \   000000C8   ........           DC32     `?<Constant "Created by ModbusMult...">`
    270          
    271          //---------------------------------------------------------------------------
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          int ModbusRegister::GetOutputVal(void) {
   \                     ??GetOutputVal:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    274              if (ObjPtr) {
   \   00000008   A0C194E5           LDR      R12,[R4, #+416]
   \   0000000C   00005CE3           CMP      R12,#+0
   \   00000010   4200000A           BEQ      ??GetOutputVal_1
    275                  float OutVal;
    276                  int DecPnt, Unit; // These variables are not used
    277          
    278                  int Status = ObjPtr->GetValue(ValueKey, 0, OutVal, DecPnt, Unit);
   \   00000014   08008DE2           ADD      R0,SP,#+8
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   08008DE2           ADD      R0,SP,#+8
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   A4509CE5           LDR      R5,[R12, #+164]
   \   00000028   A41194E5           LDR      R1,[R4, #+420]
   \   0000002C   245095E5           LDR      R5,[R5, #+36]
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0C00A0E1           MOV      R0,R12
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   15FF2FE1           BX       R5
    279                  if (HasRange) {
   \   00000044   9A01D4E5           LDRB     R0,[R4, #+410]
   \   00000048   08D08DE2           ADD      SP,SP,#+8
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00000A           BEQ      ??GetOutputVal_2
    280                      if (OutVal < MinRange) {
   \   00000054   7C5194E5           LDR      R5,[R4, #+380]
   \   00000058   00009DE5           LDR      R0,[SP, #+0]
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   ........           _BLF     __fLess,??__fLess??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0500001A           BNE      ??GetOutputVal_3
    281                          OutVal = MinRange;
    282                      } else if (OutVal > MaxRange) {
   \   0000006C   805194E5           LDR      R5,[R4, #+384]
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           _BLF     __fLess,??__fLess??rA
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0000000A           BEQ      ??GetOutputVal_2
    283                          OutVal = MaxRange;
   \                     ??GetOutputVal_3:
   \   00000084   00508DE5           STR      R5,[SP, #+0]
    284                      }
    285                  }
    286                  if (HasDecimalScaling) {
   \                     ??GetOutputVal_2:
   \   00000088   9801D4E5           LDRB     R0,[R4, #+408]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   1C00000A           BEQ      ??GetOutputVal_4
    287                      float rValue = OutVal * DecimalScaling;
   \   00000094   00109DE5           LDR      R1,[SP, #+0]
   \   00000098   900194E5           LDR      R0,[R4, #+400]
   \   0000009C   ........           _BLF     __fMul,??__fMul??rA
   \                     ??GetOutputVal_5:
   \   000000A0   0060A0E1           MOV      R6,R0
    288                      return (floor(rValue) + 0.5)> rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
   \   000000A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A8   0040A0E1           MOV      R4,R0
   \   000000AC   0150A0E1           MOV      R5,R1
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   ........           _BLF     floorf,??floorf??rA
   \   000000B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   C035A0E3           MOV      R3,#+805306368
   \   000000C4   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000000C8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000CC   0020A0E1           MOV      R2,R0
   \   000000D0   0130A0E1           MOV      R3,R1
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   0510A0E1           MOV      R1,R5
   \   000000DC   ........           _BLF     __dLess,??__dLess??rA
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   0100000A           BEQ      ??GetOutputVal_6
   \   000000EC   ........           _BLF     floorf,??floorf??rA
   \   000000F0   000000EA           B        ??GetOutputVal_7
   \                     ??GetOutputVal_6:
   \   000000F4   ........           _BLF     ceilf,??ceilf??rA
   \                     ??GetOutputVal_7:
   \   000000F8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000000FC   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000100   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000104   060000EA           B        ??GetOutputVal_8
    289                  } else {
    290                      float rValue = Scale * OutVal + MinRange;
   \                     ??GetOutputVal_4:
   \   00000108   881194E5           LDR      R1,[R4, #+392]
   \   0000010C   00009DE5           LDR      R0,[SP, #+0]
   \   00000110   ........           _BLF     __fMul,??__fMul??rA
   \   00000114   7C1194E5           LDR      R1,[R4, #+380]
   \   00000118   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000011C   DFFFFFEA           B        ??GetOutputVal_5
    291                      return (floor(rValue) + 0.5)> rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
    292                  }
    293              }
    294              return 0;
   \                     ??GetOutputVal_1:
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??GetOutputVal_8:
   \   00000124   7E40BDE8           POP      {R1-R6,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
    295          }
    296          

   \                                 In segment CODE, align 4, keep-with-next
    297          void  ModbusRegister::Update(void) {
   \                     ??Update:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    298              ModbusUnit *tmpPtr = FindUnit();
   \   00000008   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   0000000C   0050B0E1           MOVS     R5,R0
    299              if (tmpPtr) {
   \   00000010   0A00000A           BEQ      ??Update_1
    300                  U16 OutVal    = (U16)GetOutputVal();
   \   00000014   A41094E5           LDR      R1,[R4, #+164]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   A41091E5           LDR      R1,[R1, #+164]
   \   00000020   0FE0A0E1           MOV      LR,PC
   \   00000024   11FF2FE1           BX       R1
    301                  tmpPtr->SetRegister(Channel, OutVal);
   \   00000028   701194E5           LDR      R1,[R4, #+368]
   \   0000002C   0028A0E1           MOV      R2,R0, LSL #+16
   \   00000030   2228A0E1           MOV      R2,R2, LSR #+16
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??SetRegister,??SetRegister??rA
    302              }
    303          }
   \                     ??Update_1:
   \   00000040                      REQUIRE ?Subroutine14
   \   00000040                      ;; // Fall through to label ?Subroutine14
    304          

   \                                 In segment CODE, align 4, keep-with-next
    305          void ModbusRegister::SetRefObjectId(unsigned pRefObjectId) {
    306              RefObjectId = pRefObjectId;
   \                     ??SetRefObjectId:
   \   00000000   9C1180E5           STR      R1,[R0, #+412]
    307          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    308          

   \                                 In segment CODE, align 4, keep-with-next
    309          int ModbusRegister::GetObjectId(void) {
    310              return RefObjectId;
   \                     ??GetObjectId:
   \   00000000   9C0190E5           LDR      R0,[R0, #+412]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    311          }
    312          

   \                                 In segment CODE, align 4, keep-with-next
    313          AnsiString ModbusRegister::GetValueKey(void) {
   \                     ??GetValueKey:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    314              return ValueKeyWord(ValueKey);
   \   00000008   A41190E5           LDR      R1,[R0, #+420]
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   00000014                      REQUIRE ?Subroutine13
   \   00000014                      ;; // Fall through to label ?Subroutine13
    315          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    316          

   \                                 In segment CODE, align 4, keep-with-next
    317          AnsiString ModbusRegister::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   8CD04DE2           SUB      SP,SP,#+140
   \   00000008   0050A0E1           MOV      R5,R0
    318              AnsiString RegType;
    319              switch(ModbusDataFormat){
   \   0000000C   4C619FE5           LDR      R6,??GetRegisterType_2  ;; `?<Constant "Integer32">`
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000001C   9901D5E5           LDRB     R0,[R5, #+409]
   \   00000020   080050E3           CMP      R0,#+8
   \   00000024   4A00008A           BHI      ??GetRegisterType_3
   \   00000028   011F8FE2           ADR      R1,??GetRegisterType_1
   \   0000002C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000030   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetRegisterType_1:
   \   00000034   1C0F0F0F           DC8      +28,+15,+15,+15
   \   00000038   0F020202           DC8      +15,+2,+2,+2
   \   0000003C   02000000           DC8      +2,+0,+0,+0
    320              case Integer_L_Endian_ByteSwap:
    321              case Integer_L_Endian:
    322              case Integer_B_Endian_ByteSwap:
    323              case Integer_B_Endian:
    324                  RegType = "Integer32";
   \                     ??GetRegisterType_4:
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   54008DE2           ADD      R0,SP,#+84
   \   00000048   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000004C   ........           LDR      R1,??DataTable10  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003091E5           LDR      R3,[R1, #+0]
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??assign,??assign??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   54008DE2           ADD      R0,SP,#+84
   \   00000070   360000EA           B        ??GetRegisterType_5
    325                  break;
    326              case Float_L_Endian_ByteSwap:
    327              case Float_L_Endian:
    328              case Float_B_Endian_ByteSwap:
    329              case Float_B_Endian:
    330                   RegType = "Floating point";
   \                     ??GetRegisterType_6:
   \   00000074   0C1086E2           ADD      R1,R6,#+12
   \   00000078   70008DE2           ADD      R0,SP,#+112
   \   0000007C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000080   0010A0E1           MOV      R1,R0
   \   00000084   ........           LDR      R0,??DataTable10  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   003090E5           LDR      R3,[R0, #+0]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     ??assign,??assign??rA
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   70008DE2           ADD      R0,SP,#+112
   \   000000A4   290000EA           B        ??GetRegisterType_5
    331                   break;
    332              case Float_None:
    333                  if (DecimalPoint){
   \                     ??GetRegisterType_7:
   \   000000A8   941195E5           LDR      R1,[R5, #+404]
   \   000000AC   000051E3           CMP      R1,#+0
   \   000000B0   1A00000A           BEQ      ??GetRegisterType_8
    334                      RegType = "Decimal point:" + AnsiString(DecimalPoint);
   \   000000B4   38008DE2           ADD      R0,SP,#+56
   \   000000B8   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000BC   0020A0E1           MOV      R2,R0
   \   000000C0   1C1086E2           ADD      R1,R6,#+28
   \   000000C4   0D00A0E1           MOV      R0,SP
   \   000000C8   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000000CC   0D10A0E1           MOV      R1,SP
   \   000000D0   1C008DE2           ADD      R0,SP,#+28
   \   000000D4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000D8   ........           LDR      R1,??DataTable10  ;; ??npos
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   003091E5           LDR      R3,[R1, #+0]
   \   000000E4   0010A0E1           MOV      R1,R0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           _BLF     ??assign,??assign??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   38008DE2           ADD      R0,SP,#+56
   \   0000011C   0B0000EA           B        ??GetRegisterType_5
    335                  }else{
    336                      RegType = "Normal";
   \                     ??GetRegisterType_8:
   \   00000120   2C1086E2           ADD      R1,R6,#+44
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000012C   ........           LDR      R1,??DataTable10  ;; ??npos
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   003091E5           LDR      R3,[R1, #+0]
   \   00000138   0010A0E1           MOV      R1,R0
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           _BLF     ??assign,??assign??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   0D00A0E1           MOV      R0,SP
   \                     ??GetRegisterType_5:
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
    337                  }
    338                  break;
    339              }
    340              return RegType;
   \                     ??GetRegisterType_3:
   \   00000154   8CD08DE2           ADD      SP,SP,#+140
   \   00000158   7040BDE8           POP      {R4-R6,LR}
   \   0000015C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetRegisterType_2:
   \   00000160   ........           DC32     `?<Constant "Integer32">`
    341          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Modbus Register">`:
   \   00000000   4D6F64627573       DC8 "Modbus Register"
   \              205265676973
   \              74657200    
   \   00000010   4D6F64627573       DC8 "Modbus Register value"
   \              205265676973
   \              746572207661
   \              6C756500    
   \   00000026   0000               DC8 0, 0
   \   00000028   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 20H, 52H
   \              2052        
   \   00000030   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000038   4D696E52616E       DC8 4DH, 69H, 6EH, 52H, 61H, 6EH, 67H, 65H
   \              6765        
   \   00000040   20616E64204D       DC8 20H, 61H, 6EH, 64H, 20H, 4DH, 61H, 78H
   \              6178        
   \   00000048   52616E676520       DC8 52H, 61H, 6EH, 67H, 65H, 20H, 63H, 61H
   \              6361        
   \   00000050   6E206E6F7420       DC8 6EH, 20H, 6EH, 6FH, 74H, 20H, 62H, 65H
   \              6265        
   \   00000058   20657175616C       DC8 20H, 65H, 71H, 75H, 61H, 6CH, 21H, 0
   \              2100        
   \   00000060   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 20H, 52H
   \              2052        
   \   00000068   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 2EH
   \              722E        
   \   00000070   204F76657266       DC8 20H, 4FH, 76H, 65H, 72H, 66H, 6CH, 6FH
   \              6C6F        
   \   00000078   77206F662069       DC8 77H, 20H, 6FH, 66H, 20H, 69H, 6EH, 74H
   \              6E74        
   \   00000080   656765722061       DC8 65H, 67H, 65H, 72H, 20H, 61H, 72H, 69H
   \              7269        
   \   00000088   746D65746963       DC8 74H, 6DH, 65H, 74H, 69H, 63H, 20H, 77H
   \              2077        
   \   00000090   68656E206368       DC8 68H, 65H, 6EH, 20H, 63H, 68H, 65H, 63H
   \              6563        
   \   00000098   6B696E67206D       DC8 6BH, 69H, 6EH, 67H, 20H, 6DH, 61H, 78H
   \              6178        
   \   000000A0   2072616E6765       DC8 20H, 72H, 61H, 6EH, 67H, 65H, 20H, 61H
   \              2061        
   \   000000A8   6761696E7374       DC8 67H, 61H, 69H, 6EH, 73H, 74H, 20H, 64H
   \              2064        
   \   000000B0   6563696D616C       DC8 65H, 63H, 69H, 6DH, 61H, 6CH, 20H, 70H
   \              2070        
   \   000000B8   6F696E742120       DC8 6FH, 69H, 6EH, 74H, 21H, 20H, 4CH, 69H
   \              4C69        
   \   000000C0   6E65206E756D       DC8 6EH, 65H, 20H, 6EH, 75H, 6DH, 62H, 65H
   \              6265        
   \   000000C8   722000             DC8 72H, 20H, 0
   \   000000CB   00                 DC8 0
   \   000000CC   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 20H, 52H
   \              2052        
   \   000000D4   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 2EH
   \              722E        
   \   000000DC   204F76657266       DC8 20H, 4FH, 76H, 65H, 72H, 66H, 6CH, 6FH
   \              6C6F        
   \   000000E4   77206F662069       DC8 77H, 20H, 6FH, 66H, 20H, 69H, 6EH, 74H
   \              6E74        
   \   000000EC   656765722061       DC8 65H, 67H, 65H, 72H, 20H, 61H, 72H, 69H
   \              7269        
   \   000000F4   746D65746963       DC8 74H, 6DH, 65H, 74H, 69H, 63H, 20H, 77H
   \              2077        
   \   000000FC   68656E206368       DC8 68H, 65H, 6EH, 20H, 63H, 68H, 65H, 63H
   \              6563        
   \   00000104   6B696E67206D       DC8 6BH, 69H, 6EH, 67H, 20H, 6DH, 69H, 6EH
   \              696E        
   \   0000010C   2072616E6765       DC8 20H, 72H, 61H, 6EH, 67H, 65H, 20H, 61H
   \              2061        
   \   00000114   6761696E7374       DC8 67H, 61H, 69H, 6EH, 73H, 74H, 20H, 64H
   \              2064        
   \   0000011C   6563696D616C       DC8 65H, 63H, 69H, 6DH, 61H, 6CH, 20H, 70H
   \              2070        
   \   00000124   6F696E742120       DC8 6FH, 69H, 6EH, 74H, 21H, 20H, 4CH, 69H
   \              4C69        
   \   0000012C   6E65206E756D       DC8 6EH, 65H, 20H, 6EH, 75H, 6DH, 62H, 65H
   \              6265        
   \   00000134   722000             DC8 72H, 20H, 0
   \   00000137   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   6520284C696E       DC8 65H, 20H, 28H, 4CH, 69H, 6EH, 65H, 20H
   \              6520        
   \   00000020   6E756D626572       DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000028   69293A204D6F       DC8 69H, 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H
   \              6462        
   \   00000030   757352656769       DC8 75H, 73H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000038   657220526566       DC8 65H, 72H, 20H, 52H, 65H, 66H, 49H, 44H
   \              4944        
   \   00000040   4E756D626572       DC8 4EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000048   692028307825       DC8 69H, 20H, 28H, 30H, 78H, 25H, 30H, 78H
   \              3078        
   \   00000050   292069732069       DC8 29H, 20H, 69H, 73H, 20H, 69H, 6EH, 63H
   \              6E63        
   \   00000058   6F7272656374       DC8 6FH, 72H, 72H, 65H, 63H, 74H, 0
   \              00          
   \   0000005F   00                 DC8 0
   \   00000060   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 52H, 65H
   \              5265        
   \   00000068   676973746572       DC8 67H, 69H, 73H, 74H, 65H, 72H, 20H, 52H
   \              2052        
   \   00000070   656649444E75       DC8 65H, 66H, 49H, 44H, 4EH, 75H, 6DH, 62H
   \              6D62        
   \   00000078   657220256920       DC8 65H, 72H, 20H, 25H, 69H, 20H, 28H, 30H
   \              2830        
   \   00000080   782530782920       DC8 78H, 25H, 30H, 78H, 29H, 20H, 69H, 73H
   \              6973        
   \   00000088   20696E636F72       DC8 20H, 69H, 6EH, 63H, 6FH, 72H, 72H, 65H
   \              7265        
   \   00000090   63742E204C69       DC8 63H, 74H, 2EH, 20H, 4CH, 69H, 6EH, 65H
   \              6E65        
   \   00000098   204E756D6265       DC8 20H, 4EH, 75H, 6DH, 62H, 65H, 72H, 20H
   \              7220        
   \   000000A0   256900             DC8 25H, 69H, 0
   \   000000A3   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Integer32">`:
   \   00000000   496E74656765       DC8 "Integer32"
   \              72333200    
   \   0000000A   0000               DC8 0, 0
   \   0000000C   466C6F617469       DC8 "Floating point"
   \              6E6720706F69
   \              6E7400      
   \   0000001B   00                 DC8 0
   \   0000001C   446563696D61       DC8 "Decimal point:"
   \              6C20706F696E
   \              743A00      
   \   0000002B   00                 DC8 0
   \   0000002C   4E6F726D616C       DC8 "Normal"
   \              00          
   \   00000033   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable4  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegister &ModbusRegister::new ModbusRegister()
   \                     `??new ModbusRegister`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   6B0FA0E3           MOV      R0,#+428
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new ModbusRegister_1`
   \   00000014   ........           BL       ??ModbusRegister
   \                     `??new ModbusRegister_1`:
   \   00000018   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusRegister::GetObjectId()      0
     ModbusRegister::GetOutputVal()    36
     ModbusRegister::GetRegisterType()
                                      156
     ModbusRegister::GetValueKey()      4
     ModbusRegister::LoadConfigString(TSNConfigString &)
                                      304
     ModbusRegister::MakeConfigString(int)
                                      924
     ModbusRegister::ModbusRegister()
                                       20
     ModbusRegister::SetProList()     100
     ModbusRegister::SetRefObjectId(unsigned int)
                                        0
     ModbusRegister::Update()          12
     ModbusRegister::new ModbusRegister()
                                        4
     ModbusRegister::~ModbusRegister()
                                       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     operator+(char const *, string const &)
                                       44
     operator+(string const &, string const &)
                                       40
     pow(double, int)                  28
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pow(double, int)                168
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     ModbusRegister::ModbusSet        24
     ModbusRegister::ModbusRegister()
                                     176
     ModbusRegister::~ModbusRegister()
                                      72
     ?Subroutine14                     8
     ModbusRegister::MakeConfigString(int)
                                    1696
     ModbusRegister::LoadConfigString(TSNConfigString &)
                                    1712
     ModbusRegister::SetProList()    204
     ModbusRegister::GetOutputVal()  300
     ModbusRegister::Update()         64
     ModbusRegister::SetRefObjectId(unsigned int)
                                       8
     ModbusRegister::GetObjectId()     8
     ModbusRegister::GetValueKey()    20
     ?Subroutine13                     8
     ModbusRegister::GetRegisterType()
                                     356
     ?<Constant "0x%0x">               8
     ?<Constant "Modbus Register">   312
     ?<Constant "Created by ModbusMult...">
                                     164
     ?<Constant "Integer32">          52
     __sti__routine()                 56
     ModbusRegister::new ModbusRegister()
                                      28
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable6                      4
     ??DataTable10                     4
      Others                        1092

 
 8 388 bytes in segment CODE
   716 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 4 736 bytes of CODE  memory (+ 3 668 bytes shared)
   716 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
