##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:39 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROAtmReference.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\PROAtmReference.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROAtmReference.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROAtmReference.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROAtmReference.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Pairib _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::iterator _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_4
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_4:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_5
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_5
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_6
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_5
   \                     ??_Make_room_6:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_5:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool vector<AIPressSensor *>::empty() const
   \                     ??empty:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000041E0           SUB      R0,R1,R0
   \   0000000C   2001B0E1           LSRS     R0,R0,#+2
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
      8          PROAtmReference *PROAtmReference::PROAtmRefPtr = NULL;
   \                     ??PROAtmRefPtr:
   \   00000000                      DS8 4
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          PROAtmReference::PROAtmReference(bool IsConfig):IsConfigured(IsConfig)
   \                     ??PROAtmReference:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     11          {
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000018   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   4851C4E5           STRB     R5,[R4, #+328]
   \   00000028   530F84E2           ADD      R0,R4,#+332
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   081080E5           STR      R1,[R0, #+8]
     12              PROAtmRefPtr    = this;
   \   00000038   84009FE5           LDR      R0,??PROAtmReference_1+0x4  ;; ??PROAtmRefPtr
     13              Type            = C_PRO_ATMREFSENS;
     14              IDNumber = (C_PRO_ATMREFSENS << 16 )+0;//NumberOfPRO;
     15              Name            = "Atm";
   \   0000003C   1F1F8FE2           ADR      R1,??PROAtmReference_1  ;; "Atm"
   \   00000040   004080E5           STR      R4,[R0, #+0]
   \   00000044   FF0FA0E3           MOV      R0,#+1020
   \   00000048   A00084E5           STR      R0,[R4, #+160]
   \   0000004C   FF07A0E3           MOV      R0,#+66846720
   \   00000050   9C0084E5           STR      R0,[R4, #+156]
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000005C   ........           LDR      R1,??DataTable9  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003091E5           LDR      R3,[R1, #+0]
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   440084E2           ADD      R0,R4,#+68
   \   00000070   ........           _BLF     ??assign,??assign??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
     16              UseManual       = true;
     17              ManualPressure  = AIPressSensor::AtmPressure;
   \   00000084   ........           LDR      R1,??DataTable2  ;; ??AtmPressure
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   5A01C4E5           STRB     R0,[R4, #+346]
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   5C1184E5           STR      R1,[R4, #+348]
     18              SensorOnTCU     = true;
   \   00000098   5901C4E5           STRB     R0,[R4, #+345]
     19              if (IsConfigured) {
   \   0000009C   4801D4E5           LDRB     R0,[R4, #+328]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0100000A           BEQ      ??PROAtmReference_2
     20                  AddToIOObjectList();
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     21              }
     22          }
   \                     ??PROAtmReference_2:
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   1CD08DE2           ADD      SP,SP,#+28
   \   000000B8   3040BDE8           POP      {R4,R5,LR}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
   \                     ??PROAtmReference_1:
   \   000000C0   41746D00           DC8      "Atm"
   \   000000C4   ........           DC32     ??PROAtmRefPtr
     23          //---------------------------------------------------------------------------
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          PROAtmReference::~PROAtmReference(void)
     26          {
   \                     `?~PROAtmReference`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0F00000A           BEQ      `?~PROAtmReference_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     27          }
   \   00000018   536F84E2           ADD      R6,R4,#+332
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   000086E5           STR      R0,[R6, #+0]
   \   00000030   040086E5           STR      R0,[R6, #+4]
   \   00000034   080086E5           STR      R0,[R6, #+8]
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   00000044   010015E3           TST      R5,#0x1
   \   00000048   0100000A           BEQ      `?~PROAtmReference_1`
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROAtmReference_1`:
   \   00000054   ........           B        ?Subroutine20

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine20:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     28          //---------------------------------------------------------------------------
     29          
     30          ///////////////////////////////////////////////////////////////
     31          //
     32          // Routines for the Configuration
     33          //
     34          ///////////////////////////////////////////////////////////////
     35          
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void PROAtmReference::WriteConfigToFile(TSNConfigString &ConfigString)
     38          {
   \                     ??WriteConfigToFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   46DF4DE2           SUB      SP,SP,#+280
   \   00000008   0040A0E1           MOV      R4,R0
     39              if ( IsConfigured ) {
   \   0000000C   4801D4E5           LDRB     R0,[R4, #+328]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   8800000A           BEQ      ??WriteConfigToFile_1
     40                  AnsiString LocalString;
     41                  LocalString +=KeyWord(C_PRO_ATMREFSENS)+CrLfStr;
   \   0000001C   ........           LDR      R6,??DataTable7  ;; CrLfStr
   \   00000020   1C008DE2           ADD      R0,SP,#+28
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000028   FF1FA0E3           MOV      R1,#+1020
   \   0000002C   8C008DE2           ADD      R0,SP,#+140
   \   00000030   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   8C108DE2           ADD      R1,SP,#+140
   \   0000003C   70008DE2           ADD      R0,SP,#+112
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000044   ........           LDR      R0,??DataTable9  ;; ??npos
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   007090E5           LDR      R7,[R0, #+0]
   \   00000050   70108DE2           ADD      R1,SP,#+112
   \   00000054   0730A0E1           MOV      R3,R7
   \   00000058   1C008DE2           ADD      R0,SP,#+28
   \   0000005C   ........           _BLF     ??append,??append??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   70008DE2           ADD      R0,SP,#+112
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   8C008DE2           ADD      R0,SP,#+140
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     42                  LocalString += PRogramObjectBase::MakeConfigString();
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   A8108DE2           ADD      R1,SP,#+168
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000090   0730A0E1           MOV      R3,R7
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   A8108DE2           ADD      R1,SP,#+168
   \   0000009C   1C008DE2           ADD      R0,SP,#+28
   \   000000A0   ........           _BLF     ??append,??append??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   A8008DE2           ADD      R0,SP,#+168
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     43                  if ( SensorOnTCU )
   \   000000B4   5901D4E5           LDRB     R0,[R4, #+345]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   1C00000A           BEQ      ??WriteConfigToFile_2
     44                      LocalString +=TabStr1+KeyWord(C_ATM_ON_TCU)+CrLfStr;
   \   000000C0   0F10A0E3           MOV      R1,#+15
   \   000000C4   601E81E3           ORR      R1,R1,#0x600
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000D0   ........           LDR      R1,??DataTable8  ;; TabStr1
   \   000000D4   0D20A0E1           MOV      R2,SP
   \   000000D8   54008DE2           ADD      R0,SP,#+84
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   0620A0E1           MOV      R2,R6
   \   000000E4   54108DE2           ADD      R1,SP,#+84
   \   000000E8   38008DE2           ADD      R0,SP,#+56
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0730A0E1           MOV      R3,R7
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   38108DE2           ADD      R1,SP,#+56
   \   000000FC   1C008DE2           ADD      R0,SP,#+28
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   38008DE2           ADD      R0,SP,#+56
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   54008DE2           ADD      R0,SP,#+84
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   0D00A0E1           MOV      R0,SP
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
     45                  for (unsigned i=0; i < AtmRefSensors.size(); i++) {
   \                     ??WriteConfigToFile_2:
   \   00000134   0080A0E3           MOV      R8,#+0
   \   00000138   539FA0E3           MOV      R9,#+332
   \   0000013C   120000EA           B        ??WriteConfigToFile_3
     46                      LocalString += AtmRefSensors[i]->MakeConfigString();
   \                     ??WriteConfigToFile_4:
   \   00000140   040099E7           LDR      R0,[R9, +R4]
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   0000014C   0D10A0E1           MOV      R1,SP
   \   00000150   0300A0E1           MOV      R0,R3
   \   00000154   A43093E5           LDR      R3,[R3, #+164]
     47                  }
   \   00000158   018088E2           ADD      R8,R8,#+1
   \   0000015C   0C3093E5           LDR      R3,[R3, #+12]
   \   00000160   0FE0A0E1           MOV      LR,PC
   \   00000164   13FF2FE1           BX       R3
   \   00000168   0730A0E1           MOV      R3,R7
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0D10A0E1           MOV      R1,SP
   \   00000174   1C008DE2           ADD      R0,SP,#+28
   \   00000178   ........           _BLF     ??append,??append??rA
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0110A0E3           MOV      R1,#+1
   \   00000184   0D00A0E1           MOV      R0,SP
   \   00000188   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??WriteConfigToFile_3:
   \   0000018C   040089E0           ADD      R0,R9,R4
   \   00000190   041090E5           LDR      R1,[R0, #+4]
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   000041E0           SUB      R0,R1,R0
   \   0000019C   200158E1           CMP      R8,R0, LSR #+2
   \   000001A0   E6FFFF3A           BCC      ??WriteConfigToFile_4
     48                  LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \   000001A4   FA1FA0E3           MOV      R1,#+1000
   \   000001A8   E0008DE2           ADD      R0,SP,#+224
   \   000001AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001B0   0620A0E1           MOV      R2,R6
   \   000001B4   E0108DE2           ADD      R1,SP,#+224
   \   000001B8   C4008DE2           ADD      R0,SP,#+196
   \   000001BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C0   0730A0E1           MOV      R3,R7
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   C4108DE2           ADD      R1,SP,#+196
   \   000001CC   1C008DE2           ADD      R0,SP,#+28
   \   000001D0   ........           _BLF     ??append,??append??rA
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   0110A0E3           MOV      R1,#+1
   \   000001DC   C4008DE2           ADD      R0,SP,#+196
   \   000001E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   E0008DE2           ADD      R0,SP,#+224
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     49                  LocalString += CrLfStr;
   \   000001F4   0730A0E1           MOV      R3,R7
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   0610A0E1           MOV      R1,R6
   \   00000200   1C008DE2           ADD      R0,SP,#+28
   \   00000204   ........           _BLF     ??append,??append??rA
     50                  ConfigString.AddString(LocalString);
   \   00000208   1C108DE2           ADD      R1,SP,#+28
   \   0000020C   FC008DE2           ADD      R0,SP,#+252
   \   00000210   ........           _BLF     ??string,??string??rA
   \   00000214   FC108DE2           ADD      R1,SP,#+252
   \   00000218   0500A0E1           MOV      R0,R5
   \   0000021C   ........           _BLF     ??AddString,??AddString??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   FC008DE2           ADD      R0,SP,#+252
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              }
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   1C008DE2           ADD      R0,SP,#+28
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
     52          }
   \                     ??WriteConfigToFile_1:
   \   00000240   46DF8DE2           ADD      SP,SP,#+280
   \   00000244   ........           B        ?Subroutine21

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine21:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine21_0:
   \   00000008   ........           DC32     ??WriteAll
   \   0000000C   ........           DC32     `?<Constant "0x%0x">`
     53          //---------------------------------------------------------------------------
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          int PROAtmReference::LoadConfigFromFile(TSNConfigString &ConfigString)
     56          {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   7CD04DE2           SUB      SP,SP,#+124
   \   00000008   0150A0E1           MOV      R5,R1
     57              SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   5901C4E5           STRB     R0,[R4, #+345]
     58              SensorOnTCU = false;
     59              bool NoError = true;
     60              int ErrorLine=0;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   536FA0E3           MOV      R6,#+332
   \   0000002C   4A9FA0E3           MOV      R9,#+296
   \   00000030   E5A0A0E3           MOV      R10,#+229
   \   00000034   80AE8AE3           ORR      R10,R10,#0x800
     61              int Key;
     62              do {
     63                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_1:
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   28108DE2           ADD      R1,SP,#+40
     64                  if ( ErrorLine ) {
   \   00000044   F4B29FE5           LDR      R11,??LoadConfigFromFile_2  ;; `?<Constant "Atmospheric reference">`
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000050   00009DE5           LDR      R0,[SP, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0B00000A           BEQ      ??LoadConfigFromFile_3
     65                      if ( ErrorLine != EOF ) {
   \   0000005C   010070E3           CMN      R0,#+1
   \   00000060   9900000A           BEQ      ??LoadConfigFromFile_4
     66                          GiveConfigWarning("Atmospheric reference",ErrorLine);
   \   00000064   0B10A0E1           MOV      R1,R11
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigFromFile_5:
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   8F0000EA           B        ??LoadConfigFromFile_4
     67                      }
     68                  } else {
     69                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_3:
   \   0000008C   28108DE2           ADD      R1,SP,#+40
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   ........           _BLF     ??string,??string??rA
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A0   0070A0E1           MOV      R7,R0
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     70                      switch ( Key ) {
   \   000000B4   4B8FA0E3           MOV      R8,#+300
   \   000000B8   0700A0E1           MOV      R0,R7
   \   000000BC   FA0F50E3           CMP      R0,#+1000
   \   000000C0   8100000A           BEQ      ??LoadConfigFromFile_4
   \   000000C4   E910A0E3           MOV      R1,#+233
   \   000000C8   C01F81E3           ORR      R1,R1,#0x300
   \   000000CC   010050E1           CMP      R0,R1
   \   000000D0   3B00000A           BEQ      ??LoadConfigFromFile_6
   \   000000D4   011081E2           ADD      R1,R1,#+1
   \   000000D8   010050E1           CMP      R0,R1
   \   000000DC   7A00000A           BEQ      ??LoadConfigFromFile_4
   \   000000E0   011081E3           ORR      R1,R1,#0x1
   \   000000E4   010050E1           CMP      R0,R1
   \   000000E8   3900000A           BEQ      ??LoadConfigFromFile_7
   \   000000EC   FB0F50E3           CMP      R0,#+1004
   \   000000F0   7500000A           BEQ      ??LoadConfigFromFile_4
   \   000000F4   891F81E2           ADD      R1,R1,#+548
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   3B00000A           BEQ      ??LoadConfigFromFile_8
   \   00000100   A7104AE2           SUB      R1,R10,#+167
   \   00000104   010050E1           CMP      R0,R1
   \   00000108   01108113           ORRNE    R1,R1,#0x1
   \   0000010C   01005011           CMPNE    R0,R1
   \   00000110   3900000A           BEQ      ??LoadConfigFromFile_9
   \   00000114   091081E2           ADD      R1,R1,#+9
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   01108113           ORRNE    R1,R1,#0x1
   \   00000120   01005011           CMPNE    R0,R1
   \   00000124   01108112           ADDNE    R1,R1,#+1
   \   00000128   01005011           CMPNE    R0,R1
   \   0000012C   01108113           ORRNE    R1,R1,#0x1
   \   00000130   01005011           CMPNE    R0,R1
   \   00000134   01108112           ADDNE    R1,R1,#+1
   \   00000138   01005011           CMPNE    R0,R1
   \   0000013C   01108113           ORRNE    R1,R1,#0x1
   \   00000140   01005011           CMPNE    R0,R1
   \   00000144   05108112           ADDNE    R1,R1,#+5
   \   00000148   01005011           CMPNE    R0,R1
   \   0000014C   01108113           ORRNE    R1,R1,#0x1
   \   00000150   01005011           CMPNE    R0,R1
   \   00000154   3F00000A           BEQ      ??LoadConfigFromFile_10
   \   00000158   2E1081E2           ADD      R1,R1,#+46
   \   0000015C   010050E1           CMP      R0,R1
   \   00000160   02108113           ORRNE    R1,R1,#0x2
   \   00000164   01005011           CMPNE    R0,R1
   \   00000168   4800000A           BEQ      ??LoadConfigFromFile_11
   \   0000016C   151081E2           ADD      R1,R1,#+21
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   B51F8A12           ADDNE    R1,R10,#+724
   \   00000178   01005011           CMPNE    R0,R1
   \   0000017C   5200000A           BEQ      ??LoadConfigFromFile_4
     71                      default:
     72                          GiveConfigWarning("Atmospheric reference",InputKeyWord,ConfigString.LineCount);
   \   00000180   28108DE2           ADD      R1,SP,#+40
   \   00000184   44008DE2           ADD      R0,SP,#+68
   \   00000188   ........           _BLF     ??string,??string??rA
   \   0000018C   0B10A0E1           MOV      R1,R11
   \   00000190   60008DE2           ADD      R0,SP,#+96
   \   00000194   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000198   1C2095E5           LDR      R2,[R5, #+28]
   \   0000019C   44108DE2           ADD      R1,SP,#+68
   \   000001A0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   44008DE2           ADD      R0,SP,#+68
   \   000001B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   60008DE2           ADD      R0,SP,#+96
   \   000001C0   AFFFFFEA           B        ??LoadConfigFromFile_5
     73                          break;
     74                      case C_AI_END:      // If AI type not found can continue with this
     75                      case C_AL_END:
     76                      case C_PRO_END:
     77                      case C_PRO_END_COMMON:
     78                      case C_PRO_END_PRO:
     79                          break;
     80                      case C_PRO_START_COMMON:
     81                          PRogramObjectBase::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_6:
   \   000001C4   0510A0E1           MOV      R1,R5
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   000001D0   3D0000EA           B        ??LoadConfigFromFile_4
     82                          break;
     83                      case C_PRO_START_PRO:
     84                          LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_7:
   \   000001D4   A42094E5           LDR      R2,[R4, #+164]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   102092E5           LDR      R2,[R2, #+16]
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   0FE0A0E1           MOV      LR,PC
   \   000001E8   12FF2FE1           BX       R2
   \   000001EC   360000EA           B        ??LoadConfigFromFile_4
     85                          break;
     86                      case C_ATM_ON_TCU:
     87                          SensorOnTCU = true;
   \                     ??LoadConfigFromFile_8:
   \   000001F0   0100A0E3           MOV      R0,#+1
   \   000001F4   5901C4E5           STRB     R0,[R4, #+345]
   \   000001F8   330000EA           B        ??LoadConfigFromFile_4
     88                          break;
     89                      case C_AI_P906_0110:
     90                      case C_AI_P906_0111:
     91                          {
     92                              AIAtmPressSensor_mV *AnalogInPtr = new AIAtmPressSensor_mV(Key);
   \                     ??LoadConfigFromFile_9:
   \   000001FC   ........           _BLF     `??new AIAtmPressSensor_mV`,`??new AIAtmPressSensor_mV??rA`
   \   00000200   00B0A0E1           MOV      R11,R0
     93                              AnalogInPtr->LoadConfigString(ConfigString);
   \   00000204   A4209BE5           LDR      R2,[R11, #+164]
   \   00000208   0510A0E1           MOV      R1,R5
   \   0000020C   102092E5           LDR      R2,[R2, #+16]
   \   00000210   0FE0A0E1           MOV      LR,PC
   \   00000214   12FF2FE1           BX       R2
     94                              AnalogInPtr->Location = C_AI_LOC_SYSTEM;
   \   00000218   0BA089E7           STR      R10,[R9, +R11]
     95                              AtmRefSensors.push_back(AnalogInPtr);
   \   0000021C   0B10A0E1           MOV      R1,R11
   \   00000220   040086E0           ADD      R0,R6,R4
   \   00000224   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     96                              AnalogInList.push_back(AnalogInPtr);
   \   00000228   0B10A0E1           MOV      R1,R11
   \   0000022C   040088E0           ADD      R0,R8,R4
   \   00000230   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
     97                              AnalogInPtr->SetPROPtr(this);
   \   00000234   0410A0E1           MOV      R1,R4
   \   00000238   0B00A0E1           MOV      R0,R11
   \   0000023C   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
     98                              // This sensor will currently not be visible
     99                              AITempSensor_Pt1000 *tmpTempSnsPtr = new AITempSensor_Pt1000(AnalogInPtr);
   \   00000240   0B00A0E1           MOV      R0,R11
   \   00000244   ........           _BLF     `??new AITempSensor_Pt1000`,`??new AITempSensor_Pt1000??rA`
    100                              AnalogInList.push_back((AnalogInput*)tmpTempSnsPtr);
   \   00000248   0010A0E1           MOV      R1,R0
   \                     ??LoadConfigFromFile_12:
   \   0000024C   040088E0           ADD      R0,R8,R4
   \   00000250   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
   \   00000254   1C0000EA           B        ??LoadConfigFromFile_4
    101          
    102          
    103                          }
    104                          break;
    105                      case C_AI_ATM_N_Ex      :
    106                      case C_AI_ATM_Ex        :
    107                      case C_AI_ATM_Ex_H      :
    108                      case C_AI_ATM_N_Ex_0_1  :
    109          			case C_AI_APT500		:
    110          			case C_AI_SPT900		:
    111                      case C_AI_Gen_4_20mA    :
    112                      case C_AI_DIFF_PRESSURE_mA:
    113                          {
    114                              AIAtmPressSensor_mA *AnalogInPtr = new AIAtmPressSensor_mA(Key,SensorOnTCU);
   \                     ??LoadConfigFromFile_10:
   \   00000258   5911D4E5           LDRB     R1,[R4, #+345]
   \   0000025C   ........           _BLF     `??new AIAtmPressSensor_mA`,`??new AIAtmPressSensor_mA??rA`
   \   00000260   00B0A0E1           MOV      R11,R0
    115                              AnalogInPtr->Location = C_AI_LOC_SYSTEM;
   \   00000264   0BA089E7           STR      R10,[R9, +R11]
    116                              AnalogInPtr->LoadConfigString(ConfigString);
   \   00000268   A4209BE5           LDR      R2,[R11, #+164]
   \   0000026C   0510A0E1           MOV      R1,R5
   \   00000270   102092E5           LDR      R2,[R2, #+16]
   \   00000274   0FE0A0E1           MOV      LR,PC
   \   00000278   12FF2FE1           BX       R2
    117                              AtmRefSensors.push_back(AnalogInPtr);
   \   0000027C   0B10A0E1           MOV      R1,R11
   \   00000280   040086E0           ADD      R0,R6,R4
   \   00000284   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    118                              AnalogInList.push_back((AnalogInput*)AnalogInPtr);
   \   00000288   0B10A0E1           MOV      R1,R11
   \   0000028C   EEFFFFEA           B        ??LoadConfigFromFile_12
    119                          }
    120                          break;
    121                      case C_AI_MB_Press_0_20mA   :
    122                      case C_AI_MB_Press_4_20mA   :
    123                          {
    124                              AIModbusPressSensor_mA *AnalogInPtr = new AIModbusPressSensor_mA(true);
   \                     ??LoadConfigFromFile_11:
   \   00000290   0100A0E3           MOV      R0,#+1
   \   00000294   ........           _BLF     `??new AIModbusPressSensor_mA`,`??new AIModbusPressSensor_mA??rA`
   \   00000298   0080A0E1           MOV      R8,R0
    125                              AnalogInPtr->LoadConfigString(ConfigString);
   \   0000029C   A42098E5           LDR      R2,[R8, #+164]
   \   000002A0   0510A0E1           MOV      R1,R5
   \   000002A4   102092E5           LDR      R2,[R2, #+16]
   \   000002A8   0FE0A0E1           MOV      LR,PC
   \   000002AC   12FF2FE1           BX       R2
    126                              AtmRefSensors.push_back(AnalogInPtr);
   \   000002B0   0810A0E1           MOV      R1,R8
   \   000002B4   040086E0           ADD      R0,R6,R4
   \   000002B8   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    127                              ModbusSensorSet.insert(AnalogInPtr);
   \   000002BC   0820A0E1           MOV      R2,R8
   \   000002C0   AC1084E2           ADD      R1,R4,#+172
   \   000002C4   20008DE2           ADD      R0,SP,#+32
   \   000002C8   ........           _BLF     ??insert,??insert??rA
    128                          }
    129                          break;
    130                      }
    131                  }
    132              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??LoadConfigFromFile_4:
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   28008DE2           ADD      R0,SP,#+40
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   00009DE5           LDR      R0,[SP, #+0]
   \   000002E0   010070E3           CMN      R0,#+1
   \   000002E4   FA0F5713           CMPNE    R7,#+1000
   \   000002E8   52FFFF1A           BNE      ??LoadConfigFromFile_1
    133              CopyAnalogList();
   \   000002EC   0400A0E1           MOV      R0,R4
   \   000002F0   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    134              if ( !AtmRefSensors.empty() ) {
   \   000002F4   040086E0           ADD      R0,R6,R4
   \   000002F8   ........           _BLF     ??empty,??empty??rA
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   0900001A           BNE      ??LoadConfigFromFile_13
    135                  UseManual = false;
   \   00000304   5A01C4E5           STRB     R0,[R4, #+346]
    136                  AlarmAtmOutOfRange *TmpPtr = new AlarmAtmOutOfRange(this);
   \   00000308   0400A0E1           MOV      R0,R4
   \   0000030C   ........           _BLF     `??new AlarmAtmOutOfRange`,`??new AlarmAtmOutOfRange??rA`
   \   00000310   0020A0E1           MOV      R2,R0
    137                  AlarmSet.insert(TmpPtr);
   \   00000314   E41084E2           ADD      R1,R4,#+228
   \   00000318   20008DE2           ADD      R0,SP,#+32
   \   0000031C   ........           _BLF     ??insert_1,??insert??rA_1
    138                  AddAlarms(CompleteAlarmInfoList);
   \   00000320   FC1084E2           ADD      R1,R4,#+252
   \   00000324   0400A0E1           MOV      R0,R4
   \   00000328   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    139              }
    140              AddSensorAlarms();
   \                     ??LoadConfigFromFile_13:
   \   0000032C   0400A0E1           MOV      R0,R4
   \   00000330   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    141              return ErrorLine;
   \   00000334   00009DE5           LDR      R0,[SP, #+0]
   \   00000338   7CD08DE2           ADD      SP,SP,#+124
   \   0000033C   ........           B        ?Subroutine22
   \                     ??LoadConfigFromFile_2:
   \   00000340   ........           DC32     `?<Constant "Atmospheric reference">`
    142          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine22:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine22_0:
   \   00000008   ........           DC32     NewLineStr
   \   0000000C   ........           DC32     `?<Constant "AtmRef ">`
    143          //---------------------------------------------------------------------------
    144          
    145          ///////////////////////////////////////////////////////////////
    146          //
    147          // Routines for Saving of Settings
    148          //
    149          ///////////////////////////////////////////////////////////////
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          void PROAtmReference::SaveSettings(TSNConfigString *SettingsString)
    152          {
   \                     ??SaveSettings:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   77DF4DE2           SUB      SP,SP,#+476
   \   00000008   0040A0E1           MOV      R4,R0
    153              if ( IsModified || WriteAll ) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   ........           LDREQ    R0,??Subroutine21_0  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   FF00000A           BEQ      ??SaveSettings_2
    154                  IsModified = false;
    155                  AnsiString LocalString;
    156                  AnsiString IdNumStr;
    157                  IdNumStr.cat_sprintf("0x%0x",IDNumber);
    158                  LocalString +=KeyWord(Type)+IdNumStr+CrLfStr;
   \   00000028   ........           LDR      R7,??DataTable7  ;; CrLfStr
    159          
    160                  LocalString +=TabStr1+KeyWord(C_ATM_MAN_PRESS)+FloatToAnsiString(ManualPressure)+CrLfStr;
   \   0000002C   ........           LDR      R9,??DataTable8  ;; TabStr1
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0000C4E5           STRB     R0,[R4, #+0]
   \   00000038   38008DE2           ADD      R0,SP,#+56
   \   0000003C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000040   690F8DE2           ADD      R0,SP,#+420
   \   00000044   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000048   9C3094E5           LDR      R3,[R4, #+156]
   \   0000004C   ........           LDR      R2,??Subroutine21_0+0x4  ;; `?<Constant "0x%0x">`
   \   00000050   0060A0E3           MOV      R6,#+0
   \   00000054   701F8DE2           ADD      R1,SP,#+448
   \   00000058   690F8DE2           ADD      R0,SP,#+420
   \   0000005C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   700F8DE2           ADD      R0,SP,#+448
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   A01094E5           LDR      R1,[R4, #+160]
   \   00000074   A8008DE2           ADD      R0,SP,#+168
   \   00000078   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000007C   692F8DE2           ADD      R2,SP,#+420
   \   00000080   A8108DE2           ADD      R1,SP,#+168
   \   00000084   8C008DE2           ADD      R0,SP,#+140
   \   00000088   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000008C   0720A0E1           MOV      R2,R7
   \   00000090   8C108DE2           ADD      R1,SP,#+140
   \   00000094   70008DE2           ADD      R0,SP,#+112
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   ........           LDR      R0,??DataTable9  ;; ??npos
   \   000000A0   0620A0E1           MOV      R2,R6
   \   000000A4   008090E5           LDR      R8,[R0, #+0]
   \   000000A8   70108DE2           ADD      R1,SP,#+112
   \   000000AC   0830A0E1           MOV      R3,R8
   \   000000B0   38008DE2           ADD      R0,SP,#+56
   \   000000B4   ........           _BLF     ??append,??append??rA
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   70008DE2           ADD      R0,SP,#+112
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C8   0620A0E1           MOV      R2,R6
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   8C008DE2           ADD      R0,SP,#+140
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0620A0E1           MOV      R2,R6
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   A8008DE2           ADD      R0,SP,#+168
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   5C1194E5           LDR      R1,[R4, #+348]
   \   000000EC   0330A0E3           MOV      R3,#+3
   \   000000F0   0720A0E3           MOV      R2,#+7
   \   000000F4   4D0F8DE2           ADD      R0,SP,#+308
   \   000000F8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000FC   1210A0E3           MOV      R1,#+18
   \   00000100   601E81E3           ORR      R1,R1,#0x600
   \   00000104   460F8DE2           ADD      R0,SP,#+280
   \   00000108   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000010C   462F8DE2           ADD      R2,SP,#+280
   \   00000110   0910A0E1           MOV      R1,R9
   \   00000114   FC008DE2           ADD      R0,SP,#+252
   \   00000118   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000011C   4D2F8DE2           ADD      R2,SP,#+308
   \   00000120   FC108DE2           ADD      R1,SP,#+252
   \   00000124   E0008DE2           ADD      R0,SP,#+224
   \   00000128   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000012C   0720A0E1           MOV      R2,R7
   \   00000130   E0108DE2           ADD      R1,SP,#+224
   \   00000134   C4008DE2           ADD      R0,SP,#+196
   \   00000138   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000013C   0830A0E1           MOV      R3,R8
   \   00000140   0620A0E1           MOV      R2,R6
   \   00000144   C4108DE2           ADD      R1,SP,#+196
   \   00000148   38008DE2           ADD      R0,SP,#+56
   \   0000014C   ........           _BLF     ??append,??append??rA
   \   00000150   0620A0E1           MOV      R2,R6
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   C4008DE2           ADD      R0,SP,#+196
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000160   0620A0E1           MOV      R2,R6
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   E0008DE2           ADD      R0,SP,#+224
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000170   0620A0E1           MOV      R2,R6
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   4D0F8DE2           ADD      R0,SP,#+308
   \   0000017C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000180   0620A0E1           MOV      R2,R6
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   FC008DE2           ADD      R0,SP,#+252
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0620A0E1           MOV      R2,R6
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   460F8DE2           ADD      R0,SP,#+280
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
    161                  if ( UseManual ) {
   \   000001A0   5A01D4E5           LDRB     R0,[R4, #+346]
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   1B00000A           BEQ      ??SaveSettings_3
    162                      LocalString +=TabStr1+KeyWord(C_ATM_USEMANUAL)+CrLfStr;
   \   000001AC   611EA0E3           MOV      R1,#+1552
   \   000001B0   54008DE2           ADD      R0,SP,#+84
   \   000001B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001B8   54208DE2           ADD      R2,SP,#+84
   \   000001BC   0910A0E1           MOV      R1,R9
   \   000001C0   0D00A0E1           MOV      R0,SP
   \   000001C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C8   0720A0E1           MOV      R2,R7
   \   000001CC   0D10A0E1           MOV      R1,SP
   \   000001D0   1C008DE2           ADD      R0,SP,#+28
   \   000001D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001D8   0830A0E1           MOV      R3,R8
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   1C108DE2           ADD      R1,SP,#+28
   \   000001E4   38008DE2           ADD      R0,SP,#+56
   \   000001E8   ........           _BLF     ??append,??append??rA
   \   000001EC   0620A0E1           MOV      R2,R6
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   1C008DE2           ADD      R0,SP,#+28
   \   000001F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001FC   0620A0E1           MOV      R2,R6
   \   00000200   0110A0E3           MOV      R1,#+1
   \   00000204   0D00A0E1           MOV      R0,SP
   \   00000208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000020C   0620A0E1           MOV      R2,R6
   \   00000210   0110A0E3           MOV      R1,#+1
   \   00000214   54008DE2           ADD      R0,SP,#+84
   \   00000218   1B0000EA           B        ??SaveSettings_4
    163                  } else {
    164                      LocalString +=TabStr1+KeyWord(C_ATM_NOT_USEMANUAL)+CrLfStr;
   \                     ??SaveSettings_3:
   \   0000021C   1110A0E3           MOV      R1,#+17
   \   00000220   601E81E3           ORR      R1,R1,#0x600
   \   00000224   1C008DE2           ADD      R0,SP,#+28
   \   00000228   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000022C   1C208DE2           ADD      R2,SP,#+28
   \   00000230   0910A0E1           MOV      R1,R9
   \   00000234   0D00A0E1           MOV      R0,SP
   \   00000238   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000023C   0720A0E1           MOV      R2,R7
   \   00000240   0D10A0E1           MOV      R1,SP
   \   00000244   54008DE2           ADD      R0,SP,#+84
   \   00000248   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000024C   0830A0E1           MOV      R3,R8
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   54108DE2           ADD      R1,SP,#+84
   \   00000258   38008DE2           ADD      R0,SP,#+56
   \   0000025C   ........           _BLF     ??append,??append??rA
   \   00000260   0620A0E1           MOV      R2,R6
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   54008DE2           ADD      R0,SP,#+84
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0620A0E1           MOV      R2,R6
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   0D00A0E1           MOV      R0,SP
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0620A0E1           MOV      R2,R6
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   1C008DE2           ADD      R0,SP,#+28
   \                     ??SaveSettings_4:
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
    165                  }
    166          
    167                  if ( !AlarmSet.empty() ) {
   \   00000290   F40094E5           LDR      R0,[R4, #+244]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   1C00000A           BEQ      ??SaveSettings_5
    168                      set<AlarmBasic*>::iterator pBIt;
    169                      for ( pBIt=AlarmSet.begin(); pBIt!=AlarmSet.end(); pBIt++ ) {
   \   0000029C   E49094E5           LDR      R9,[R4, #+228]
   \   000002A0   170000EA           B        ??SaveSettings_6
    170                          AlarmBasic *element =*pBIt;
   \                     ??SaveSettings_7:
   \   000002A4   100099E5           LDR      R0,[R9, #+16]
    171                          if ( element ) LocalString +=(AnsiString) element->SaveSettings();
   \   000002A8   000050E3           CMP      R0,#+0
   \   000002AC   1100000A           BEQ      ??SaveSettings_8
   \   000002B0   0D10A0E1           MOV      R1,SP
   \   000002B4   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   000002B8   0D10A0E1           MOV      R1,SP
   \   000002BC   1C008DE2           ADD      R0,SP,#+28
   \   000002C0   ........           _BLF     ??string,??string??rA
   \   000002C4   0830A0E1           MOV      R3,R8
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   1C108DE2           ADD      R1,SP,#+28
   \   000002D0   38008DE2           ADD      R0,SP,#+56
   \   000002D4   ........           _BLF     ??append,??append??rA
   \   000002D8   0620A0E1           MOV      R2,R6
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   1C008DE2           ADD      R0,SP,#+28
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0620A0E1           MOV      R2,R6
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   0D00A0E1           MOV      R0,SP
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    172                      }
   \                     ??SaveSettings_8:
   \   000002F8   0900A0E1           MOV      R0,R9
   \   000002FC   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000300   0090A0E1           MOV      R9,R0
   \                     ??SaveSettings_6:
   \   00000304   E40084E2           ADD      R0,R4,#+228
   \   00000308   000059E1           CMP      R9,R0
   \   0000030C   E4FFFF1A           BNE      ??SaveSettings_7
    173                  }
    174                  for (unsigned i=0; i < AtmRefSensors.size(); i++) {
   \                     ??SaveSettings_5:
   \   00000310   539FA0E3           MOV      R9,#+332
   \   00000314   120000EA           B        ??SaveSettings_9
    175                      LocalString += AtmRefSensors[i]->SaveAISettings();
   \                     ??SaveSettings_10:
   \   00000318   040099E7           LDR      R0,[R9, +R4]
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   063190E7           LDR      R3,[R0, +R6, LSL #+2]
   \   00000324   0D10A0E1           MOV      R1,SP
   \   00000328   0300A0E1           MOV      R0,R3
   \   0000032C   A43093E5           LDR      R3,[R3, #+164]
    176                  }
   \   00000330   016086E2           ADD      R6,R6,#+1
   \   00000334   6C3093E5           LDR      R3,[R3, #+108]
   \   00000338   0FE0A0E1           MOV      LR,PC
   \   0000033C   13FF2FE1           BX       R3
   \   00000340   0830A0E1           MOV      R3,R8
   \   00000344   0020A0E3           MOV      R2,#+0
   \   00000348   0D10A0E1           MOV      R1,SP
   \   0000034C   38008DE2           ADD      R0,SP,#+56
   \   00000350   ........           _BLF     ??append,??append??rA
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   0110A0E3           MOV      R1,#+1
   \   0000035C   0D00A0E1           MOV      R0,SP
   \   00000360   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SaveSettings_9:
   \   00000364   040089E0           ADD      R0,R9,R4
   \   00000368   041090E5           LDR      R1,[R0, #+4]
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   000041E0           SUB      R0,R1,R0
   \   00000374   200156E1           CMP      R6,R0, LSR #+2
   \   00000378   E6FFFF3A           BCC      ??SaveSettings_10
    177                  LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \   0000037C   FA1FA0E3           MOV      R1,#+1000
   \   00000380   5B0F8DE2           ADD      R0,SP,#+364
   \   00000384   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000388   0720A0E1           MOV      R2,R7
   \   0000038C   5B1F8DE2           ADD      R1,SP,#+364
   \   00000390   540F8DE2           ADD      R0,SP,#+336
   \   00000394   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000398   0830A0E1           MOV      R3,R8
   \   0000039C   0020A0E3           MOV      R2,#+0
   \   000003A0   541F8DE2           ADD      R1,SP,#+336
   \   000003A4   38008DE2           ADD      R0,SP,#+56
   \   000003A8   ........           _BLF     ??append,??append??rA
   \   000003AC   0020A0E3           MOV      R2,#+0
   \   000003B0   0110A0E3           MOV      R1,#+1
   \   000003B4   540F8DE2           ADD      R0,SP,#+336
   \   000003B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003BC   0020A0E3           MOV      R2,#+0
   \   000003C0   0110A0E3           MOV      R1,#+1
   \   000003C4   5B0F8DE2           ADD      R0,SP,#+364
   \   000003C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    178                  LocalString += CrLfStr;
   \   000003CC   0830A0E1           MOV      R3,R8
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0710A0E1           MOV      R1,R7
   \   000003D8   38008DE2           ADD      R0,SP,#+56
   \   000003DC   ........           _BLF     ??append,??append??rA
    179                  SettingsString->AddString(LocalString);
   \   000003E0   38108DE2           ADD      R1,SP,#+56
   \   000003E4   620F8DE2           ADD      R0,SP,#+392
   \   000003E8   ........           _BLF     ??string,??string??rA
   \   000003EC   621F8DE2           ADD      R1,SP,#+392
   \   000003F0   0500A0E1           MOV      R0,R5
   \   000003F4   ........           _BLF     ??AddString,??AddString??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   620F8DE2           ADD      R0,SP,#+392
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
    180              }
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   690F8DE2           ADD      R0,SP,#+420
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   38008DE2           ADD      R0,SP,#+56
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
    181          }
   \                     ??SaveSettings_2:
   \   00000428   77DF8DE2           ADD      SP,SP,#+476
   \   0000042C                      REQUIRE ?Subroutine21
   \   0000042C                      ;; // Fall through to label ?Subroutine21
    182          

   \                                 In segment CODE, align 4, keep-with-next
    183          bool PROAtmReference::RestoreSettings(TSNConfigString *SettingsString)
    184          {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    185              bool NoError = true;
    186              int ErrorLine=0;
    187              int Key;
    188              UseManual = false;
   \   00000004   ........           LDR      R9,??Subroutine22_0  ;; NewLineStr
   \   00000008   ........           LDR      R10,??Subroutine22_0+0x4  ;; `?<Constant "AtmRef ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0180A0E3           MOV      R8,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   5A01C4E5           STRB     R0,[R4, #+346]
    189              do {
    190                  AnsiString InputKeyWord= SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_1:
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0D20A0E1           MOV      R2,SP
   \   00000034   74108DE2           ADD      R1,SP,#+116
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??NextWord,??NextWord??rA
    191                  if ( ErrorLine ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   3900000A           BEQ      ??RestoreSettings_2
    192                      if ( ErrorLine != EOF ) {
   \   0000004C   010070E3           CMN      R0,#+1
   \   00000050   D200000A           BEQ      ??RestoreSettings_3
    193                          RestoreSettingsWarning((AnsiString)"AtmRef "+Name+":\nUnknown error started at line:"+(AnsiString)ErrorLine+NewLineStr);
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   C8008DE2           ADD      R0,SP,#+200
   \   0000005C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000060   00B0A0E1           MOV      R11,R0
   \   00000064   0A10A0E1           MOV      R1,R10
   \   00000068   AC008DE2           ADD      R0,SP,#+172
   \   0000006C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000070   442084E2           ADD      R2,R4,#+68
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000080   08208AE2           ADD      R2,R10,#+8
   \   00000084   04108DE2           ADD      R1,SP,#+4
   \   00000088   58008DE2           ADD      R0,SP,#+88
   \   0000008C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000090   0B20A0E1           MOV      R2,R11
   \   00000094   58108DE2           ADD      R1,SP,#+88
   \   00000098   3C008DE2           ADD      R0,SP,#+60
   \   0000009C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A0   0920A0E1           MOV      R2,R9
   \   000000A4   3C108DE2           ADD      R1,SP,#+60
   \   000000A8   20008DE2           ADD      R0,SP,#+32
   \   000000AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B0   20108DE2           ADD      R1,SP,#+32
   \   000000B4   90008DE2           ADD      R0,SP,#+144
   \   000000B8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000BC   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   90008DE2           ADD      R0,SP,#+144
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   20008DE2           ADD      R0,SP,#+32
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   3C008DE2           ADD      R0,SP,#+60
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   C8008DE2           ADD      R0,SP,#+200
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   58008DE2           ADD      R0,SP,#+88
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   04008DE2           ADD      R0,SP,#+4
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_4:
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000130   9A0000EA           B        ??RestoreSettings_3
    194                      }
    195                  } else {
    196                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_2:
   \   00000134   74108DE2           ADD      R1,SP,#+116
   \   00000138   04008DE2           ADD      R0,SP,#+4
   \   0000013C   ........           _BLF     ??string,??string??rA
   \   00000140   04008DE2           ADD      R0,SP,#+4
   \   00000144   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000148   0060A0E1           MOV      R6,R0
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   04008DE2           ADD      R0,SP,#+4
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
    197                      switch ( Key ) {
   \   0000015C   FA0F56E3           CMP      R6,#+1000
   \   00000160   EA10A013           MOVNE    R1,#+234
   \   00000164   C01F8113           ORRNE    R1,R1,#0x300
   \   00000168   01005611           CMPNE    R6,R1
   \   0000016C   FB0F5613           CMPNE    R6,#+1004
   \   00000170   AF10A013           MOVNE    R1,#+175
   \   00000174   501E8113           ORRNE    R1,R1,#0x500
   \   00000178   01005611           CMPNE    R6,R1
   \   0000017C   6900000A           BEQ      ??RestoreSettings_5
   \   00000180   610E56E3           CMP      R6,#+1552
   \   00000184   7400000A           BEQ      ??RestoreSettings_6
   \   00000188   621081E2           ADD      R1,R1,#+98
   \   0000018C   010056E1           CMP      R6,R1
   \   00000190   7400000A           BEQ      ??RestoreSettings_7
   \   00000194   011081E2           ADD      R1,R1,#+1
   \   00000198   010056E1           CMP      R6,R1
   \   0000019C   6300000A           BEQ      ??RestoreSettings_8
   \   000001A0   3F10A0E3           MOV      R1,#+63
   \   000001A4   801E81E3           ORR      R1,R1,#0x800
   \   000001A8   010056E1           CMP      R6,R1
   \   000001AC   09108112           ADDNE    R1,R1,#+9
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108113           ORRNE    R1,R1,#0x1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108112           ADDNE    R1,R1,#+1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108113           ORRNE    R1,R1,#0x1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   01108112           ADDNE    R1,R1,#+1
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   01108113           ORRNE    R1,R1,#0x1
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   05108112           ADDNE    R1,R1,#+5
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108113           ORRNE    R1,R1,#0x1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   5F00000A           BEQ      ??RestoreSettings_9
   \   000001F0   451081E2           ADD      R1,R1,#+69
   \   000001F4   010056E1           CMP      R6,R1
   \   000001F8   B910A013           MOVNE    R1,#+185
   \   000001FC   B01E8113           ORRNE    R1,R1,#0xB00
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   4700000A           BEQ      ??RestoreSettings_5
    198                      default:
    199                          NoError = false;
    200                          RestoreSettingsWarning((AnsiString)"AtmRef "+Name+":\nThe keyword " + InputKeyWord +" is not allowed here!! Line:"+(AnsiString)SettingsString->LineCount+NewLineStr);
   \   00000208   1C1095E5           LDR      R1,[R5, #+28]
   \   0000020C   0080A0E3           MOV      R8,#+0
   \   00000210   710F8DE2           ADD      R0,SP,#+452
   \   00000214   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000218   00B0A0E1           MOV      R11,R0
   \   0000021C   0A10A0E1           MOV      R1,R10
   \   00000220   6A0F8DE2           ADD      R0,SP,#+424
   \   00000224   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000228   0010A0E1           MOV      R1,R0
   \   0000022C   442084E2           ADD      R2,R4,#+68
   \   00000230   630F8DE2           ADD      R0,SP,#+396
   \   00000234   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000238   2C208AE2           ADD      R2,R10,#+44
   \   0000023C   631F8DE2           ADD      R1,SP,#+396
   \   00000240   5C0F8DE2           ADD      R0,SP,#+368
   \   00000244   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000248   74208DE2           ADD      R2,SP,#+116
   \   0000024C   5C1F8DE2           ADD      R1,SP,#+368
   \   00000250   550F8DE2           ADD      R0,SP,#+340
   \   00000254   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000258   3C208AE2           ADD      R2,R10,#+60
   \   0000025C   551F8DE2           ADD      R1,SP,#+340
   \   00000260   4E0F8DE2           ADD      R0,SP,#+312
   \   00000264   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000268   0B20A0E1           MOV      R2,R11
   \   0000026C   4E1F8DE2           ADD      R1,SP,#+312
   \   00000270   470F8DE2           ADD      R0,SP,#+284
   \   00000274   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000278   0920A0E1           MOV      R2,R9
   \   0000027C   471F8DE2           ADD      R1,SP,#+284
   \   00000280   400F8DE2           ADD      R0,SP,#+256
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   401F8DE2           ADD      R1,SP,#+256
   \   0000028C   E4008DE2           ADD      R0,SP,#+228
   \   00000290   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000294   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   E4008DE2           ADD      R0,SP,#+228
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0820A0E1           MOV      R2,R8
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   400F8DE2           ADD      R0,SP,#+256
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B8   0820A0E1           MOV      R2,R8
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   470F8DE2           ADD      R0,SP,#+284
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0820A0E1           MOV      R2,R8
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   710F8DE2           ADD      R0,SP,#+452
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0820A0E1           MOV      R2,R8
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   4E0F8DE2           ADD      R0,SP,#+312
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0820A0E1           MOV      R2,R8
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   550F8DE2           ADD      R0,SP,#+340
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0820A0E1           MOV      R2,R8
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   5C0F8DE2           ADD      R0,SP,#+368
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   0820A0E1           MOV      R2,R8
   \   0000030C   0110A0E3           MOV      R1,#+1
   \   00000310   630F8DE2           ADD      R0,SP,#+396
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0820A0E1           MOV      R2,R8
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   6A0F8DE2           ADD      R0,SP,#+424
   \   00000324   80FFFFEA           B        ??RestoreSettings_4
    201                          break;
    202                      case C_AI_END:          // If AI type not found can continue with this
    203                      case C_AL_END:
    204                      case C_CT_END:
    205                      case C_PRO_END:
    206                      case C_PRO_END_COMMON:
    207                      case C_PRO_END_PRO:
    208                          Key = C_PRO_END;
   \                     ??RestoreSettings_5:
   \   00000328   FA6FA0E3           MOV      R6,#+1000
   \   0000032C   1B0000EA           B        ??RestoreSettings_3
    209                          break;
    210                      case C_ATM_MAN_PRESS:
    211                          ManualPressure = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_8:
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0D10A0E1           MOV      R1,SP
   \   00000338   0500A0E1           MOV      R0,R5
   \   0000033C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000340   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000344   5C0184E5           STR      R0,[R4, #+348]
    212                          NoError = !ErrorLine;
   \   00000348   00009DE5           LDR      R0,[SP, #+0]
   \   0000034C   000050E3           CMP      R0,#+0
   \   00000350   0080A013           MOVNE    R8,#+0
   \   00000354   0180A003           MOVEQ    R8,#+1
   \   00000358   100000EA           B        ??RestoreSettings_3
    213                          break;
    214                      case C_ATM_USEMANUAL:
    215                          UseManual = true;
   \                     ??RestoreSettings_6:
   \   0000035C   0100A0E3           MOV      R0,#+1
   \                     ??RestoreSettings_10:
   \   00000360   5A01C4E5           STRB     R0,[R4, #+346]
   \   00000364   0D0000EA           B        ??RestoreSettings_3
    216                          break;
    217                      case C_ATM_NOT_USEMANUAL:
    218                          UseManual = false;
   \                     ??RestoreSettings_7:
   \   00000368   0000A0E3           MOV      R0,#+0
   \   0000036C   FBFFFFEA           B        ??RestoreSettings_10
    219                          break;
    220                      case C_AI_P906_0111       :
    221                      case C_AI_ATM_N_Ex        :
    222                      case C_AI_ATM_Ex          :
    223                      case C_AI_ATM_Ex_H        :
    224                      case C_AI_ATM_N_Ex_0_1    :
    225          			case C_AI_APT500		  :
    226          			case C_AI_SPT900		  :
    227                      case C_AI_Gen_4_20mA      :
    228                      case C_AI_DIFF_PRESSURE_mA:
    229                          {
    230                              int AIIDNumber = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_9:
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0D10A0E1           MOV      R1,SP
   \   00000378   0500A0E1           MOV      R0,R5
   \   0000037C   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    231                              AnalogInput *AnalogInPtr = (AnalogInput *)FindObject(AIIDNumber);
   \   00000380   ........           _BLF     ??FindObject,??FindObject??rA
   \   00000384   0020B0E1           MOVS     R2,R0
    232                              if (AnalogInPtr) AnalogInPtr->RestoreAISettings(SettingsString);
   \   00000388   0500000A           BEQ      ??RestoreSettings_11
   \   0000038C   A42092E5           LDR      R2,[R2, #+164]
   \   00000390   0510A0E1           MOV      R1,R5
   \   00000394   702092E5           LDR      R2,[R2, #+112]
   \   00000398   0FE0A0E1           MOV      LR,PC
   \   0000039C   12FF2FE1           BX       R2
    233                          }
    234                          break;
    235                      }
    236                  }
    237              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??RestoreSettings_3:
   \   000003A0   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_11:
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   74008DE2           ADD      R0,SP,#+116
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   000058E3           CMP      R8,#+0
   \   000003B4   00009D15           LDRNE    R0,[SP, #+0]
   \   000003B8   01007013           CMNNE    R0,#+1
   \   000003BC   FA0F5613           CMPNE    R6,#+1000
   \   000003C0   19FFFF1A           BNE      ??RestoreSettings_1
    238              return(NoError);
   \   000003C4   0800A0E1           MOV      R0,R8
   \   000003C8   78DF8DE2           ADD      SP,SP,#+480
   \   000003CC                      REQUIRE ?Subroutine22
   \   000003CC                      ;; // Fall through to label ?Subroutine22
    239          }
    240          
    241          ///////////////////////////////////////////////////////////////
    242          //
    243          // Routines for Calculation of values
    244          //
    245          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    246          void PROAtmReference::Calculate(void)
    247          {
   \                     ??Calculate:
   \   00000000   D0412DE9           PUSH     {R4,R6-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    248              HWFailure = false;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3C00C4E5           STRB     R0,[R4, #+60]
    249              if ( !AtmRefSensors.empty() ) {
   \   00000010   536FA0E3           MOV      R6,#+332
   \   00000014   040086E0           ADD      R0,R6,R4
   \   00000018   ........           _BLF     ??empty,??empty??rA
   \   0000001C   000050E3           CMP      R0,#+0
    250                  if ( UseManual || !AtmRefSensors[0]->Enable ) {
   \   00000020   5A01D405           LDRBEQ   R0,[R4, #+346]
   \   00000024   00005003           CMPEQ    R0,#+0
   \   00000028   0400001A           BNE      ??Calculate_1
   \   0000002C   040096E7           LDR      R0,[R6, +R4]
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   3411D1E5           LDRB     R1,[R1, #+308]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0100001A           BNE      ??Calculate_2
    251                      AIPressSensor::AtmPressure = ManualPressure;
   \                     ??Calculate_1:
   \   00000040   5C8194E5           LDR      R8,[R4, #+348]
   \   00000044   270000EA           B        ??Calculate_3
    252                  } else {
    253                      float CurrentPressure = AtmRefSensors[0]->Calculate();
   \                     ??Calculate_2:
   \   00000048   001090E5           LDR      R1,[R0, #+0]
   \   0000004C   0100A0E1           MOV      R0,R1
   \   00000050   A41091E5           LDR      R1,[R1, #+164]
   \   00000054   601091E5           LDR      R1,[R1, #+96]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   11FF2FE1           BX       R1
    254                      AtmRefSensors[0]->ActiveAlarms = CheckAlarms(AtmRefSensors[0]->AlarmSet,&AtmRefSensors[0]->MyHWFailure);
   \   00000060   047096E7           LDR      R7,[R6, +R4]
   \   00000064   0080A0E1           MOV      R8,R0
   \   00000068   001097E5           LDR      R1,[R7, #+0]
   \   0000006C   3F0046E2           SUB      R0,R6,#+63
   \   00000070   011080E0           ADD      R1,R0,R1
   \   00000074   000097E5           LDR      R0,[R7, #+0]
   \   00000078   C00080E2           ADD      R0,R0,#+192
   \   0000007C   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000080   001097E5           LDR      R1,[R7, #+0]
   \   00000084   380081E5           STR      R0,[R1, #+56]
    255                      // See if we have one acceptable atmospheric pressure reading.
    256                      // If not override the value and set the sensor status to normal
    257                      if ( AtmRefSensors[0]->ActiveAlarms || ( CurrentPressure < MIN_ATM) || ( CurrentPressure > MAX_ATM ) ) {
   \   00000088   040096E7           LDR      R0,[R6, +R4]
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   380090E5           LDR      R0,[R0, #+56]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0F00001A           BNE      ??Calculate_4
   \   0000009C   0800A0E1           MOV      R0,R8
   \   000000A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A4   ........           LDR      R2,??DataTable19  ;; 0xfffffffff29f0f0b
   \   000000A8   ........           LDR      R3,??DataTable20  ;; 0x402050c1
   \   000000AC   0060A0E1           MOV      R6,R0
   \   000000B0   0170A0E1           MOV      R7,R1
   \   000000B4   ........           _BLF     __dLess,??__dLess??rA
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0600001A           BNE      ??Calculate_4
   \   000000C0   48209FE5           LDR      R2,??Calculate_5  ;; 0x6c99d5d1
   \   000000C4   ........           LDR      R3,??DataTable18  ;; 0x4027a84c
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   0710A0E1           MOV      R1,R7
   \   000000D0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0100000A           BEQ      ??Calculate_6
    258                          AIPressSensor::AtmPressure  = NORMAL_ATM;
   \                     ??Calculate_4:
   \   000000DC   ........           LDR      R8,??DataTable25  ;; 0x4125468e
    259                          IsOutOfRange= true;
   \   000000E0   0100A0E3           MOV      R0,#+1
    260                      } else {
    261                          AIPressSensor::AtmPressure  = CurrentPressure;
    262                          IsOutOfRange= false;
   \                     ??Calculate_6:
   \   000000E4   5801C4E5           STRB     R0,[R4, #+344]
   \                     ??Calculate_3:
   \   000000E8   ........           LDR      R0,??DataTable24  ;; ??AtmPressure
    263                      }
    264                  }
    265                  SendData();
   \   000000EC   6510A0E3           MOV      R1,#+101
   \   000000F0   008080E5           STR      R8,[R0, #+0]
   \   000000F4   A42094E5           LDR      R2,[R4, #+164]
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   402092E5           LDR      R2,[R2, #+64]
   \   00000100   0FE0A0E1           MOV      LR,PC
   \   00000104   12FF2FE1           BX       R2
    266              }else{
    267                   AIPressSensor::AtmPressure = ManualPressure;
    268                   SendData();
    269              }
    270          }
   \   00000108   D041BDE8           POP      {R4,R6-R8,LR}
   \   0000010C   1EFF2FE1           BX       LR               ;; return
   \                     ??Calculate_5:
   \   00000110   D1D5996C           DC32     0x6c99d5d1
    271          

   \                                 In segment CODE, align 4, keep-with-next
    272          void PROAtmReference::SimCalculate(void)
    273          {
   \                     ??SimCalculate:
   \   00000000   70432DE9           PUSH     {R4-R6,R8,R9,LR}
    274              if ( UseManual || !AtmRefSensors[0]->Enable ) {
   \   00000004   ........           LDR      R6,??DataTable24  ;; ??AtmPressure
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   5A01D4E5           LDRB     R0,[R4, #+346]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0400001A           BNE      ??SimCalculate_1
   \   00000018   4C0194E5           LDR      R0,[R4, #+332]
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   3401D0E5           LDRB     R0,[R0, #+308]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100001A           BNE      ??SimCalculate_2
    275                  AIPressSensor::AtmPressure = ManualPressure;
   \                     ??SimCalculate_1:
   \   0000002C   5C0194E5           LDR      R0,[R4, #+348]
   \   00000030   200000EA           B        ??SimCalculate_3
    276              } else {
   \                     ??SimCalculate_2:
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000003C   80209FE5           LDR      R2,??SimCalculate_4  ;; 0xfffffffff8c0d9f1
   \   00000040   80309FE5           LDR      R3,??SimCalculate_4+0x4  ;; 0x402297ef
   \   00000044   0080A0E1           MOV      R8,R0
   \   00000048   0190A0E1           MOV      R9,R1
   \   0000004C   ........           _BLF     __dLess,??__dLess??rA
   \   00000050   000050E3           CMP      R0,#+0
    277          
    278                  if ( AIPressSensor::AtmPressure < 0.9*NORMAL_ATM ) {
    279                      SimulatorSign = 1.0;
   \   00000054   FE05A013           MOVNE    R0,#+1065353216
   \   00000058   0800001A           BNE      ??SimCalculate_5
    280                  } else if ( AIPressSensor::AtmPressure > 1.1*NORMAL_ATM ) {
   \   0000005C   68209FE5           LDR      R2,??SimCalculate_4+0x8  ;; 0xffffffff855d7c28
   \   00000060   68309FE5           LDR      R3,??SimCalculate_4+0xC  ;; 0x4026b9b3
   \   00000064   0800A0E1           MOV      R0,R8
   \   00000068   0910A0E1           MOV      R1,R9
   \   0000006C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??SimCalculate_6
    281                      SimulatorSign = -1.0;
   \   00000078   8004A0E3           MOV      R0,#-2147483648
   \   0000007C   FE0580E3           ORR      R0,R0,#0x3F800000
   \                     ??SimCalculate_5:
   \   00000080   A80084E5           STR      R0,[R4, #+168]
    282                  }
    283                  AIPressSensor::AtmPressure += 0.01*NORMAL_ATM*SimulatorSign;
   \                     ??SimCalculate_6:
   \   00000084   A80094E5           LDR      R0,[R4, #+168]
   \   00000088   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000008C   40209FE5           LDR      R2,??SimCalculate_4+0x10  ;; 0x50b74157
   \   00000090   40309FE5           LDR      R3,??SimCalculate_4+0x14  ;; 0x3fba71b0
   \   00000094   ........           _BLF     __dMul,??__dMul??rA
   \   00000098   0040A0E1           MOV      R4,R0
   \   0000009C   000096E5           LDR      R0,[R6, #+0]
   \   000000A0   0150A0E1           MOV      R5,R1
   \   000000A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A8   0420A0E1           MOV      R2,R4
   \   000000AC   0530A0E1           MOV      R3,R5
   \   000000B0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000B4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??SimCalculate_3:
   \   000000B8   000086E5           STR      R0,[R6, #+0]
    284              }
    285          }
   \   000000BC   7043BDE8           POP      {R4-R6,R8,R9,LR}
   \   000000C0   1EFF2FE1           BX       LR               ;; return
   \                     ??SimCalculate_4:
   \   000000C4   F1D9C0F8           DC32     0xfffffffff8c0d9f1
   \   000000C8   EF972240           DC32     0x402297ef
   \   000000CC   287C5D85           DC32     0xffffffff855d7c28
   \   000000D0   B3B92640           DC32     0x4026b9b3
   \   000000D4   5741B750           DC32     0x50b74157
   \   000000D8   B071BA3F           DC32     0x3fba71b0
    286          
    287          ///////////////////////////////////////////////////////////////
    288          //
    289          // Routines for the librarian
    290          //
    291          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    292          int PROAtmReference::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit)
    293          {
   \                     ??GetValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14509DE5           LDR      R5,[SP, #+20]
    294              int Status = GETVAL_NO_ERR;
   \   00000008   4CC190E5           LDR      R12,[R0, #+332]
   \   0000000C   0340A0E1           MOV      R4,R3
   \   00000010   10309DE5           LDR      R3,[SP, #+16]
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   40EE51E2           SUBS     LR,R1,#+1024
   \   0000001C   1C00000A           BEQ      ??GetValue_2
   \   00000020   B3E05EE2           SUBS     LR,LR,#+179
   \   00000024   2500000A           BEQ      ??GetValue_3
   \   00000028   05E05EE2           SUBS     LR,LR,#+5
   \   0000002C   0700000A           BEQ      ??GetValue_4
   \   00000030   8FE05EE2           SUBS     LR,LR,#+143
   \   00000034   1600000A           BEQ      ??GetValue_2
   \   00000038   01E05EE2           SUBS     LR,LR,#+1
   \   0000003C   1A00000A           BEQ      ??GetValue_5
   \   00000040   01E04EE2           SUB      LR,LR,#+1
   \   00000044   01005EE3           CMP      LR,#+1
   \   00000048   2F00009A           BLS      ??GetValue_6
   \   0000004C   280000EA           B        ??GetValue_7
    295              switch ( ValueId ) {
    296              case SVT_AI_CALC_VAL :
    297                  if ( AtmRefSensors[0] ) {
   \                     ??GetValue_4:
   \   00000050   00009CE5           LDR      R0,[R12, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0C00000A           BEQ      ??GetValue_8
    298                      Status = AtmRefSensors[0]->GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \   0000005C   0060A0E1           MOV      R6,R0
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   08002DE9           PUSH     {R3}
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   A46096E5           LDR      R6,[R6, #+164]
   \   00000074   0430A0E1           MOV      R3,R4
   \   00000078   246096E5           LDR      R6,[R6, #+36]
   \   0000007C   0FE0A0E1           MOV      LR,PC
   \   00000080   16FF2FE1           BX       R6
   \   00000084   0060A0E1           MOV      R6,R0
   \   00000088   08D08DE2           ADD      SP,SP,#+8
   \   0000008C   000000EA           B        ??GetValue_2
    299                  } else {
    300                      Status = E_INVALID_POINTER;
   \                     ??GetValue_8:
   \   00000090   0B60A0E3           MOV      R6,#+11
    301                  }
    302              case SVT_PRESSURE     :
    303              case SVT_ATM_PRESSURE :
    304                  Unit = PRESSURE_UNIT1;
   \                     ??GetValue_2:
   \   00000094   0600A0E3           MOV      R0,#+6
   \   00000098   000085E5           STR      R0,[R5, #+0]
    305                  MyRetValue = AIPressSensor::AtmPressure;
   \   0000009C   ........           LDR      R0,??DataTable24  ;; ??AtmPressure
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \                     ??GetValue_9:
   \   000000A4   000084E5           STR      R0,[R4, #+0]
   \   000000A8   170000EA           B        ??GetValue_6
    306                  break;
    307              case SVT_ATM_P_ENABLE :
    308                  Unit = NO_UNIT;
   \                     ??GetValue_5:
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   001085E5           STR      R1,[R5, #+0]
    309                  MyRetValue = (float)UseManual;
   \   000000B4   5A01D0E5           LDRB     R0,[R0, #+346]
   \   000000B8   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000000BC   F8FFFFEA           B        ??GetValue_9
    310                  break;
    311              case SVT_AI_ENABLE :
    312                  if ( AtmRefSensors[0] ) {
   \                     ??GetValue_3:
   \   000000C0   00009CE5           LDR      R0,[R12, #+0]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0700000A           BEQ      ??GetValue_10
    313                      Status = AtmRefSensors[0]->GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \   000000CC   20002DE9           PUSH     {R5}
   \   000000D0   08002DE9           PUSH     {R3}
   \   000000D4   0430A0E1           MOV      R3,R4
   \   000000D8   A44090E5           LDR      R4,[R0, #+164]
   \   000000DC   244094E5           LDR      R4,[R4, #+36]
   \   000000E0   0FE0A0E1           MOV      LR,PC
   \   000000E4   14FF2FE1           BX       R4
   \   000000E8   050000EA           B        ??GetValue_11
    314                  } else {
    315                      Status = E_INVALID_POINTER;
   \                     ??GetValue_10:
   \   000000EC   0B60A0E3           MOV      R6,#+11
   \   000000F0   050000EA           B        ??GetValue_6
    316                  }
    317                  break;
    318              case SVT_ATM_TEMP   :
    319              case SVT_ATM_T_ENABLE :
    320                  break;
    321              default:
    322                  Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt,Unit);
   \                     ??GetValue_7:
   \   000000F4   20002DE9           PUSH     {R5}
   \   000000F8   08002DE9           PUSH     {R3}
   \   000000FC   0430A0E1           MOV      R3,R4
   \   00000100   ........           _BLF     ??GetValue_1,??GetValue??rA
   \                     ??GetValue_11:
   \   00000104   0060A0E1           MOV      R6,R0
   \   00000108   08D08DE2           ADD      SP,SP,#+8
    323                  break;
    324              }
    325              return(Status);
   \                     ??GetValue_6:
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110                      REQUIRE ?Subroutine20
   \   00000110                      ;; // Fall through to label ?Subroutine20
    326          }
    327          

   \                                 In segment CODE, align 4, keep-with-next
    328          int PROAtmReference::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    329          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    330              int Status = GETVAL_NO_ERR;
    331              //switch ( ValueId ) {
    332              //  default:
    333              Status = PRogramObject::GetStringValue(ValueId,Index, MyString);
    334              //      break;
    335              //}
    336              return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine23
    337          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    338          
    339          

   \                                 In segment CODE, align 4, keep-with-next
    340          int PROAtmReference::GetFloatValue(int ValueId, int Index, float &MyValue) {
   \                     ??GetFloatValue:
   \   00000000   20402DE9           PUSH     {R5,LR}
    341              int Status = GETVAL_NO_ERR;
   \   00000004   00C0A0E3           MOV      R12,#+0
    342              switch (ValueId) {
   \   00000008   400E51E3           CMP      R1,#+1024
   \   0000000C   4750A013           MOVNE    R5,#+71
   \   00000010   505E8513           ORRNE    R5,R5,#0x500
   \   00000014   05005111           CMPNE    R1,R5
   \   00000018   0700001A           BNE      ??GetFloatValue_2
    343              case SVT_PRESSURE     :
    344              case SVT_ATM_PRESSURE :
    345                  MyValue = AIPressSensor::AtmPressure;
   \   0000001C   ........           LDR      R1,??DataTable24  ;; ??AtmPressure
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   001083E5           STR      R1,[R3, #+0]
    346                  if ( HWFailure ) {
   \   00000028   3C00D0E5           LDRB     R0,[R0, #+60]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0300000A           BEQ      ??GetFloatValue_3
    347                      Status = GETVAL_HW_ALARM;
   \   00000034   0FC0A0E3           MOV      R12,#+15
   \   00000038   010000EA           B        ??GetFloatValue_3
    348                  }
    349                  break;
    350              default:
    351                  Status = PRogramObject::GetFloatValue(ValueId, Index, MyValue);
   \                     ??GetFloatValue_2:
   \   0000003C   ........           _BLF     ??GetFloatValue_1,??GetFloatValue??rA
   \   00000040   00C0A0E1           MOV      R12,R0
    352                  break;
    353              }
    354              return (Status);
   \                     ??GetFloatValue_3:
   \   00000044   2040BDE8           POP      {R5,LR}
   \   00000048   0C00A0E1           MOV      R0,R12
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    355          }
    356          
    357          

   \                                 In segment CODE, align 4, keep-with-next
    358          int PROAtmReference::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    359          {
   \                     ??PutValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7C70DDE5           LDRB     R7,[SP, #+124]
   \   0000000C   80909DE5           LDR      R9,[SP, #+128]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   02A0A0E1           MOV      R10,R2
   \   0000001C   0360A0E1           MOV      R6,R3
    360              int Status=E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
    361              switch ( ValueId ) {
   \   0000002C   538FA0E3           MOV      R8,#+332
   \   00000030   B310A0E3           MOV      R1,#+179
   \   00000034   401E81E3           ORR      R1,R1,#0x400
   \   00000038   010055E1           CMP      R5,R1
   \   0000003C   0E00000A           BEQ      ??PutValue_2
   \   00000040   051081E2           ADD      R1,R1,#+5
   \   00000044   010055E1           CMP      R5,R1
   \   00000048   0B00000A           BEQ      ??PutValue_2
   \   0000004C   8F1081E2           ADD      R1,R1,#+143
   \   00000050   010055E1           CMP      R5,R1
   \   00000054   2500000A           BEQ      ??PutValue_3
   \   00000058   011081E2           ADD      R1,R1,#+1
   \   0000005C   010055E1           CMP      R5,R1
   \   00000060   6100000A           BEQ      ??PutValue_4
   \   00000064   011081E3           ORR      R1,R1,#0x1
   \   00000068   010055E1           CMP      R5,R1
   \   0000006C   01108112           ADDNE    R1,R1,#+1
   \   00000070   01005511           CMPNE    R5,R1
   \   00000074   8C00000A           BEQ      ??PutValue_5
   \   00000078   7A0000EA           B        ??PutValue_6
    362              case SVT_AI_CALC_VAL :
    363                  if ( !AtmRefSensors.empty() ) {
   \                     ??PutValue_2:
   \   0000007C   040088E0           ADD      R0,R8,R4
   \   00000080   ........           _BLF     ??empty,??empty??rA
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1500001A           BNE      ??PutValue_7
    364                      Status = AtmRefSensors[0]->PutValue(ValueId, 0,NewValue,Local,&ValUnitId);
   \   0000008C   040098E7           LDR      R0,[R8, +R4]
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   008090E5           LDR      R8,[R0, #+0]
   \   00000098   A40098E5           LDR      R0,[R8, #+164]
   \   0000009C   30A080E2           ADD      R10,R0,#+48
   \   000000A0   08008DE2           ADD      R0,SP,#+8
   \   000000A4   ........           _BLF     ??string,??string??rA
   \   000000A8   04008DE2           ADD      R0,SP,#+4
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   80002DE9           PUSH     {R7}
   \   000000B4   0510A0E1           MOV      R1,R5
   \   000000B8   00509AE5           LDR      R5,[R10, #+0]
   \   000000BC   10308DE2           ADD      R3,SP,#+16
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0800A0E1           MOV      R0,R8
   \   000000C8   0FE0A0E1           MOV      LR,PC
   \   000000CC   15FF2FE1           BX       R5
   \   000000D0   08008DE5           STR      R0,[SP, #+8]
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   10008DE2           ADD      R0,SP,#+16
   \   000000E0   6F0000EA           B        ??PutValue_8
    365                  } else {
    366                      Status = E_INVALID_POINTER;
   \                     ??PutValue_7:
   \   000000E4   0B10A0E3           MOV      R1,#+11
   \                     ??PutValue_9:
   \   000000E8   00108DE5           STR      R1,[SP, #+0]
   \   000000EC   760000EA           B        ??PutValue_10
    367                  }
    368                  break;
    369              case SVT_ATM_PRESSURE :
    370                  {
    371                      float Pressure = ConvertToSi(NewValue, ValUnitId=PRESSURE_UNIT1, Status,MIN_ATM ,MAX_ATM,0.0);
   \                     ??PutValue_3:
   \   000000F0   0610A0E3           MOV      R1,#+6
   \   000000F4   04108DE5           STR      R1,[SP, #+4]
   \   000000F8   0610A0E1           MOV      R1,R6
   \   000000FC   08008DE2           ADD      R0,SP,#+8
   \   00000100   ........           _BLF     ??string,??string??rA
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   03002DE9           PUSH     {R0,R1}
   \   00000110   D0019FE5           LDR      R0,??PutValue_11  ;; 0x6c99d5d0
   \   00000114   ........           LDR      R1,??DataTable18  ;; 0x4027a84c
   \   00000118   03002DE9           PUSH     {R0,R1}
   \   0000011C   ........           LDR      R0,??DataTable19  ;; 0xfffffffff29f0f0b
   \   00000120   ........           LDR      R1,??DataTable20  ;; 0x402050c1
   \   00000124   03002DE9           PUSH     {R0,R1}
   \   00000128   18208DE2           ADD      R2,SP,#+24
   \   0000012C   20008DE2           ADD      R0,SP,#+32
   \   00000130   0800BDE8           POP      {R3}
   \   00000134   0610A0E3           MOV      R1,#+6
   \   00000138   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   0000013C   00A0A0E1           MOV      R10,R0
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   1C008DE2           ADD      R0,SP,#+28
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
    372                      if ( Status == E_NO_ERR ) {
   \   00000150   14009DE5           LDR      R0,[SP, #+20]
   \   00000154   14D08DE2           ADD      SP,SP,#+20
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   2000001A           BNE      ??PutValue_12
    373                          if ( UseManual ) {
   \   00000160   5A01D4E5           LDRB     R0,[R4, #+346]
   \   00000164   000050E3           CMP      R0,#+0
    374                              ManualPressure = Pressure;
    375                              AIPressSensor::AtmPressure = ManualPressure;
   \   00000168   ........           LDRNE    R0,??DataTable24  ;; ??AtmPressure
   \   0000016C   5CA18415           STRNE    R10,[R4, #+348]
   \   00000170   0A10A011           MOVNE    R1,R10
   \   00000174   00108015           STRNE    R1,[R0, #+0]
   \   00000178   4E00001A           BNE      ??PutValue_13
    376                          } else if ( !AtmRefSensors.empty() ) {
   \   0000017C   040088E0           ADD      R0,R8,R4
   \   00000180   ........           _BLF     ??empty,??empty??rA
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   D5FFFF1A           BNE      ??PutValue_7
    377                              Status = AtmRefSensors[0]->PutValue(ValueId, 0,NewValue,Local,&ValUnitId);
   \   0000018C   040098E7           LDR      R0,[R8, +R4]
   \   00000190   0610A0E1           MOV      R1,R6
   \   00000194   008090E5           LDR      R8,[R0, #+0]
   \   00000198   A40098E5           LDR      R0,[R8, #+164]
   \   0000019C   30A080E2           ADD      R10,R0,#+48
   \   000001A0   24008DE2           ADD      R0,SP,#+36
   \   000001A4   ........           _BLF     ??string,??string??rA
   \   000001A8   04008DE2           ADD      R0,SP,#+4
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   80002DE9           PUSH     {R7}
   \   000001B4   0510A0E1           MOV      R1,R5
   \   000001B8   00509AE5           LDR      R5,[R10, #+0]
   \   000001BC   2C308DE2           ADD      R3,SP,#+44
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0800A0E1           MOV      R0,R8
   \   000001C8   0FE0A0E1           MOV      LR,PC
   \   000001CC   15FF2FE1           BX       R5
   \   000001D0   08008DE5           STR      R0,[SP, #+8]
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   0110A0E3           MOV      R1,#+1
   \   000001DC   2C008DE2           ADD      R0,SP,#+44
   \   000001E0   2F0000EA           B        ??PutValue_8
    378                          } else {
    379                              Status = E_INVALID_POINTER;
    380                          }
    381                      } else {
    382                          Status = E_NO_INPUT_PERMISSION;
   \                     ??PutValue_12:
   \   000001E4   2A10A0E3           MOV      R1,#+42
   \   000001E8   BEFFFFEA           B        ??PutValue_9
    383                      }
    384                  }
    385                  break;
    386              case SVT_ATM_P_ENABLE :
    387                  {
    388                      bool Value =(bool) ConvertToSi(NewValue, NO_UNIT, Status,0 ,1,0.0);
   \                     ??PutValue_4:
   \   000001EC   0610A0E1           MOV      R1,R6
   \   000001F0   08008DE2           ADD      R0,SP,#+8
   \   000001F4   ........           _BLF     ??string,??string??rA
   \   000001F8   0000A0E3           MOV      R0,#+0
   \   000001FC   0010A0E3           MOV      R1,#+0
   \   00000200   03002DE9           PUSH     {R0,R1}
   \   00000204   C015A0E3           MOV      R1,#+805306368
   \   00000208   FF1681E3           ORR      R1,R1,#0xFF00000
   \   0000020C   03002DE9           PUSH     {R0,R1}
   \   00000210   0010A0E1           MOV      R1,R0
   \   00000214   03002DE9           PUSH     {R0,R1}
   \   00000218   18208DE2           ADD      R2,SP,#+24
   \   0000021C   20008DE2           ADD      R0,SP,#+32
   \   00000220   0800BDE8           POP      {R3}
   \   00000224   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000228   0010A0E3           MOV      R1,#+0
   \   0000022C   14D08DE2           ADD      SP,SP,#+20
   \   00000230   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   0150A013           MOVNE    R5,#+1
   \   0000023C   0050A003           MOVEQ    R5,#+0
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   08008DE2           ADD      R0,SP,#+8
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
    389                      if ( Status== E_NO_ERR ) {
   \   00000250   00009DE5           LDR      R0,[SP, #+0]
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   1300001A           BNE      ??PutValue_5
    390                          UseManual = !Value;
   \   0000025C   010025E2           EOR      R0,R5,#0x1
   \   00000260   5A01C4E5           STRB     R0,[R4, #+346]
   \   00000264   130000EA           B        ??PutValue_13
    391                      }
    392                  }
    393                  break;
    394              case SVT_AI_ENABLE :
    395                  if ( !AtmRefSensors.empty() ) {
    396                      Status = AtmRefSensors[0]->PutValue(ValueId, 0,NewValue,Local,&ValUnitId);
    397                  } else {
    398                      Status = E_INVALID_POINTER;
    399                  }
    400                  break;
    401          
    402              case SVT_ATM_TEMP  :
    403              case SVT_ATM_T_ENABLE :
    404                  break;
    405              default:
    406                  Status = PRogramObject::PutValue( ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_6:
   \   00000268   0610A0E1           MOV      R1,R6
   \   0000026C   40008DE2           ADD      R0,SP,#+64
   \   00000270   ........           _BLF     ??string,??string??rA
   \   00000274   04008DE2           ADD      R0,SP,#+4
   \   00000278   01002DE9           PUSH     {R0}
   \   0000027C   80002DE9           PUSH     {R7}
   \   00000280   48308DE2           ADD      R3,SP,#+72
   \   00000284   0A20A0E1           MOV      R2,R10
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0400A0E1           MOV      R0,R4
   \   00000290   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000294   08008DE5           STR      R0,[SP, #+8]
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   48008DE2           ADD      R0,SP,#+72
   \                     ??PutValue_8:
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   08D08DE2           ADD      SP,SP,#+8
    407                  break;
    408              }
    409              if ( Status==E_NO_ERR ) {
   \                     ??PutValue_5:
   \   000002AC   00009DE5           LDR      R0,[SP, #+0]
   \   000002B0   000050E3           CMP      R0,#+0
   \   000002B4   0400001A           BNE      ??PutValue_10
    410                  SetModifiedFlag();
   \                     ??PutValue_13:
   \   000002B8   A41094E5           LDR      R1,[R4, #+164]
   \   000002BC   0400A0E1           MOV      R0,R4
   \   000002C0   541091E5           LDR      R1,[R1, #+84]
   \   000002C4   0FE0A0E1           MOV      LR,PC
   \   000002C8   11FF2FE1           BX       R1
    411              }
    412              if ( UnitId ) {
   \                     ??PutValue_10:
   \   000002CC   000059E3           CMP      R9,#+0
    413                  *UnitId = ValUnitId;
   \   000002D0   04009D15           LDRNE    R0,[SP, #+4]
   \   000002D4   00008915           STRNE    R0,[R9, #+0]
    414              }
    415              return(Status);
   \   000002D8   00009DE5           LDR      R0,[SP, #+0]
   \   000002DC   5CD08DE2           ADD      SP,SP,#+92
   \   000002E0   F047BDE8           POP      {R4-R10,LR}
   \   000002E4   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_11:
   \   000002E8   D0D5996C           DC32     0x6c99d5d0
    416          }
    417          

   \                                 In segment CODE, align 4, keep-with-next
    418          int PROAtmReference::PutFloatValue( int ValueId, float NewValue)
    419          {
   \                     ??PutFloatValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
    420              int Status = E_NO_ERR;
   \   00000004   0030A0E3           MOV      R3,#+0
    421              switch ( ValueId ) {
   \   00000008   4740A0E3           MOV      R4,#+71
   \   0000000C   504E84E3           ORR      R4,R4,#0x500
   \   00000010   040051E1           CMP      R1,R4
    422              case SVT_ATM_PRESSURE :
    423                  ManualPressure = NewValue;
   \   00000014   5C218005           STREQ    R2,[R0, #+348]
    424                  UseManual      = true;
   \   00000018   0110A003           MOVEQ    R1,#+1
   \   0000001C   5A11C005           STRBEQ   R1,[R0, #+346]
   \   00000020   0100000A           BEQ      ??PutFloatValue_2
    425                  //Calculate();
    426                 // SendData();
    427                  break;
    428              default:
    429                  Status = PRogramObject::PutFloatValue(ValueId,NewValue);
   \   00000024   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000028   0030A0E1           MOV      R3,R0
    430                  break;
    431              }
    432              return(Status);
   \                     ??PutFloatValue_2:
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   0300A0E1           MOV      R0,R3
   \   00000034   1EFF2FE1           BX       LR               ;; return
    433          }
    434          

   \                                 In segment CODE, align 4, keep-with-next
    435          ValueList *PROAtmReference::GetValueInfoTableStatic(int &Entries, int Index)
    436          {
    437              Entries = 0;
   \                     ??GetValueInfoTableStatic:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
    438              return(NULL);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    439          }
    440          

   \                                 In segment CODE, align 4, keep-with-next
    441          int PROAtmReference::ReceiveData(U8* data)
    442          {
   \                     ??ReceiveData:
   \   00000000   08D04DE2           SUB      SP,SP,#+8
    443              int ErrorStatus = E_OK;
    444              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
    445              switch ( pCH->CommandNo ) {
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000010   652052E2           SUBS     R2,R2,#+101
   \   00000014   0200000A           BEQ      ??ReceiveData_1
   \   00000018   012052E2           SUBS     R2,R2,#+1
   \   0000001C   1700000A           BEQ      ??ReceiveData_2
   \   00000020   180000EA           B        ??ReceiveData_3
    446              case CMD_GENERIC_REALTIME_DATA:
    447                  {
    448                      ANPRO10_COMMAND_2740  *pData = (ANPRO10_COMMAND_2740*) data;
    449                      AIPressSensor::AtmPressure = pData->AtmPressure;
   \                     ??ReceiveData_1:
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0D30A0E1           MOV      R3,SP
   \                     ??ReceiveData_4:
   \   0000002C   0CC081E2           ADD      R12,R1,#+12
   \   00000030   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000034   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000038   012082E2           ADD      R2,R2,#+1
   \   0000003C   040052E3           CMP      R2,#+4
   \   00000040   F9FFFFBA           BLT      ??ReceiveData_4
   \   00000044   ........           LDR      R2,??DataTable24  ;; ??AtmPressure
   \   00000048   00309DE5           LDR      R3,[SP, #+0]
   \   0000004C   003082E5           STR      R3,[R2, #+0]
    450                      ManualPressure  = pData->ManualPressure;
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   04308DE2           ADD      R3,SP,#+4
   \                     ??ReceiveData_5:
   \   00000058   08C081E2           ADD      R12,R1,#+8
   \   0000005C   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000060   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000064   012082E2           ADD      R2,R2,#+1
   \   00000068   040052E3           CMP      R2,#+4
   \   0000006C   F9FFFFBA           BLT      ??ReceiveData_5
   \   00000070   04209DE5           LDR      R2,[SP, #+4]
   \   00000074   5C2180E5           STR      R2,[R0, #+348]
    451                      UseManual       = pData->UseManual;
   \   00000078   1010D1E5           LDRB     R1,[R1, #+16]
   \   0000007C   5A11C0E5           STRB     R1,[R0, #+346]
    452                      ErrorStatus     =  E_UNKNOWN_OBJECT;
    453                      ErrorStatus =  E_OK;
    454                  }
    455                  break;
    456              case CMD_GENERIC_STATIC_DATA:
    457                  {
    458                      //ANPRO10_COMMAND_2741  *pData = (ANPRO10_COMMAND_2741*) data;
    459                      ErrorStatus =  E_OK;
   \                     ??ReceiveData_2:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   000000EA           B        ??ReceiveData_6
    460                  }
    461                  break;
    462              default:
    463                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_3:
   \   00000088   0100A0E3           MOV      R0,#+1
    464                  break;
    465              }
    466              return(ErrorStatus);
   \                     ??ReceiveData_6:
   \   0000008C   0600BDE8           POP      {R1,R2}
   \   00000090   1EFF2FE1           BX       LR               ;; return
    467          }
    468          

   \                                 In segment CODE, align 4, keep-with-next
    469          int PROAtmReference::SendData(U16 cmd)
    470          {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
    471              int ErrorStatus = E_OK;
    472              switch ( cmd ) {
   \   00000008   0E20A0E3           MOV      R2,#+14
   \   0000000C   FF30A0E3           MOV      R3,#+255
   \   00000010   00C0A0E3           MOV      R12,#+0
   \   00000014   651051E2           SUBS     R1,R1,#+101
   \   00000018   0200000A           BEQ      ??SendData_1
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   2900000A           BEQ      ??SendData_2
   \   00000024   3C0000EA           B        ??SendData_3
    473              case CMD_GENERIC_REALTIME_DATA:
    474                  {
    475                      QueueANPRO10_COMMAND_2740 Cmd;
    476          
    477                      Cmd.TxInfo.Port        = NULL;
   \                     ??SendData_1:
   \   00000028   10C08DE5           STR      R12,[SP, #+16]
    478                      Cmd.TxInfo.rxAddr      = DEVICE_BROADCAST_ADDR;
   \   0000002C   1430CDE5           STRB     R3,[SP, #+20]
    479                      Cmd.TxInfo.rxId        = DEVICE_BROADCAST_TXU;
   \   00000030   1520CDE5           STRB     R2,[SP, #+21]
    480          
    481                      Cmd.Data.ObjectId      = IDNumber;
   \   00000034   9C1090E5           LDR      R1,[R0, #+156]
    482                      Cmd.Data.ndb           = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   00000038   0D20A0E3           MOV      R2,#+13
   \   0000003C   1A10CDE5           STRB     R1,[SP, #+26]
   \   00000040   2114A0E1           LSR      R1,R1,#+8
   \   00000044   1B10CDE5           STRB     R1,[SP, #+27]
   \   00000048   2114A0E1           LSR      R1,R1,#+8
   \   0000004C   1C10CDE5           STRB     R1,[SP, #+28]
   \   00000050   2114A0E1           LSR      R1,R1,#+8
   \   00000054   1D10CDE5           STRB     R1,[SP, #+29]
   \   00000058   B821CDE1           STRH     R2,[SP, #+24]
    483                      Cmd.Data.CommandNo     = CMD_GENERIC_REALTIME_DATA;
   \   0000005C   6520A0E3           MOV      R2,#+101
   \   00000060   B621CDE1           STRH     R2,[SP, #+22]
    484                      Cmd.Data.AtmPressure   = AIPressSensor::AtmPressure;
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   22208DE2           ADD      R2,SP,#+34
   \                     ??SendData_4:
   \   0000006C   ........           LDR      R3,??DataTable24  ;; ??AtmPressure
   \   00000070   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000074   0230C1E7           STRB     R3,[R1, +R2]
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   040051E3           CMP      R1,#+4
   \   00000080   F9FFFFBA           BLT      ??SendData_4
    485                      Cmd.Data.ManualPressure= ManualPressure;
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   1E208DE2           ADD      R2,SP,#+30
   \                     ??SendData_5:
   \   0000008C   573F80E2           ADD      R3,R0,#+348
   \   00000090   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000094   0230C1E7           STRB     R3,[R1, +R2]
   \   00000098   011081E2           ADD      R1,R1,#+1
   \   0000009C   040051E3           CMP      R1,#+4
   \   000000A0   F9FFFFBA           BLT      ??SendData_5
    486                      Cmd.Data.UseManual     = UseManual;
   \   000000A4   5A01D0E5           LDRB     R0,[R0, #+346]
   \   000000A8   2600CDE5           STRB     R0,[SP, #+38]
    487                      bool sent = ANPRO10SendNormal(&Cmd);
    488                      if ( !sent )
   \   000000AC   10008DE2           ADD      R0,SP,#+16
   \   000000B0   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0100001A           BNE      ??SendData_6
    489                          ErrorStatus =  E_QUEUE_FULL;
   \                     ??SendData_7:
   \   000000BC   0300A0E3           MOV      R0,#+3
   \   000000C0   160000EA           B        ??SendData_8
    490                      else
    491                          ErrorStatus =  E_OK;
   \                     ??SendData_6:
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   140000EA           B        ??SendData_8
    492                  }
    493                  break;
    494              case CMD_GENERIC_STATIC_DATA:
    495                  {
    496                      QueueANPRO10_COMMAND_2741 Cmd;
    497          
    498                      Cmd.TxInfo.Port           = NULL;
   \                     ??SendData_2:
   \   000000CC   00C08DE5           STR      R12,[SP, #+0]
    499                      Cmd.TxInfo.rxAddr         = DEVICE_BROADCAST_ADDR;
   \   000000D0   0430CDE5           STRB     R3,[SP, #+4]
    500                      Cmd.TxInfo.rxId           = DEVICE_BROADCAST_TXU;
   \   000000D4   0520CDE5           STRB     R2,[SP, #+5]
    501          
    502                      Cmd.Data.ObjectId         = IDNumber;
   \   000000D8   9C0090E5           LDR      R0,[R0, #+156]
    503                      Cmd.Data.ndb              = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   000000DC   0410A0E3           MOV      R1,#+4
   \   000000E0   0A00CDE5           STRB     R0,[SP, #+10]
   \   000000E4   2004A0E1           LSR      R0,R0,#+8
   \   000000E8   0B00CDE5           STRB     R0,[SP, #+11]
   \   000000EC   2004A0E1           LSR      R0,R0,#+8
   \   000000F0   0C00CDE5           STRB     R0,[SP, #+12]
   \   000000F4   2004A0E1           LSR      R0,R0,#+8
   \   000000F8   0D00CDE5           STRB     R0,[SP, #+13]
   \   000000FC   B810CDE1           STRH     R1,[SP, #+8]
    504                      Cmd.Data.CommandNo        = CMD_GENERIC_STATIC_DATA;
   \   00000100   6610A0E3           MOV      R1,#+102
   \   00000104   B610CDE1           STRH     R1,[SP, #+6]
    505                      bool sent = ANPRO10SendNormal(&Cmd);
    506                      if ( !sent )
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   EAFFFF1A           BNE      ??SendData_6
    507                          ErrorStatus =  E_QUEUE_FULL;
   \   00000118   E7FFFFEA           B        ??SendData_7
    508                      else
    509                          ErrorStatus =  E_OK;
    510                  }
    511                  break;
    512          
    513              default:
    514                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_3:
   \   0000011C   0100A0E3           MOV      R0,#+1
    515                  break;
    516              }
    517              return(ErrorStatus);
   \                     ??SendData_8:
   \   00000120   28D08DE2           ADD      SP,SP,#+40
   \   00000124                      REQUIRE ?Subroutine23
   \   00000124                      ;; // Fall through to label ?Subroutine23
    518          }
    519          

   \                                 In segment CODE, align 4, keep-with-next
    520          void PROAtmReference::RefreshData(int ValueKey)
    521          {
   \                     ??RefreshData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    522              PRogramObject::RefreshData(0);
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??RefreshData_1,??RefreshData??rA
    523              if ( !IsNewData ) {
   \   00000010   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000014   000050E3           CMP      R0,#+0
    524                  AIPressSensor::AtmPressure  = NORMAL_ATM;
   \   00000018   ........           LDREQ    R0,??DataTable24  ;; ??AtmPressure
   \   0000001C   ........           LDREQ    R1,??DataTable25  ;; 0x4125468e
   \   00000020   00108005           STREQ    R1,[R0, #+0]
    525              }
    526          }
   \   00000024                      REQUIRE ?Subroutine19
   \   00000024                      ;; // Fall through to label ?Subroutine19

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   41746D00           DC8 "Atm"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Atmospheric reference">`:
   \   00000000   41746D6F7370       DC8 "Atmospheric reference"
   \              686572696320
   \              726566657265
   \              6E636500    
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AtmRef ">`:
   \   00000000   41746D526566       DC8 "AtmRef "
   \              2000        
   \   00000008   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   0000003B   00                 DC8 0
   \   0000003C   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000059   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROAtmReference &PROAtmReference::new PROAtmReference(bool)
   \                     `??new PROAtmReference`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   580FA0E3           MOV      R0,#+352
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new PROAtmReference_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??PROAtmReference
   \                     `??new PROAtmReference_1`:
   \   00000020   ........           B        ?Subroutine19

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??AtmPressure

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     TabStr1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   4CA82740           DC32     0x4027a84c

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0B0F9FF2           DC32     0xfffffffff29f0f0b

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   C1502040           DC32     0x402050c1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     ??AtmPressure

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   8E462541           DC32     0x4125468e
    527          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROAtmReference::Calculate()      24
     PROAtmReference::GetFloatValue(int, int, float &)
                                       12
     PROAtmReference::GetStringValue(int, int, AnsiString &)
                                        4
     PROAtmReference::GetValue(int, int, float &, int &, int &)
                                       24
     PROAtmReference::GetValueInfoTableStatic(int &, int)
                                        0
     PROAtmReference::LoadConfigFromFile(TSNConfigString &)
                                      160
     PROAtmReference::PROAtmReference(bool)
                                       40
     PROAtmReference::PutFloatValue(int, float)
                                        8
     PROAtmReference::PutValue(int, int, AnsiString, bool, int *)
                                      148
     PROAtmReference::ReceiveData(unsigned char *)
                                        8
     PROAtmReference::RefreshData(int)
                                        8
     PROAtmReference::RestoreSettings(TSNConfigString *)
                                      516
     PROAtmReference::SaveSettings(TSNConfigString *)
                                      504
     PROAtmReference::SendData(unsigned short)
                                       44
     PROAtmReference::SimCalculate()
                                       24
     PROAtmReference::WriteConfigToFile(TSNConfigString &)
                                      308
     PROAtmReference::new PROAtmReference(bool)
                                        8
     PROAtmReference::~PROAtmReference()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
                                       24
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                       16
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                       32
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                        8
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                        4
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     __sti__routine()                   0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12
     vector<AIPressSensor *>::empty() const
                                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                      36
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                     232
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     vector<AIPressSensor *>::empty() const
                                      32
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     PROAtmReference::PROAtmRefPtr     4
     PROAtmReference::PROAtmReference(bool)
                                     200
     PROAtmReference::~PROAtmReference()
                                      88
     ?Subroutine20                     8
     PROAtmReference::WriteConfigToFile(TSNConfigString &)
                                     584
     ?Subroutine21                    16
     PROAtmReference::LoadConfigFromFile(TSNConfigString &)
                                     836
     ?Subroutine22                    16
     PROAtmReference::SaveSettings(TSNConfigString *)
                                    1068
     PROAtmReference::RestoreSettings(TSNConfigString *)
                                     972
     PROAtmReference::Calculate()    276
     PROAtmReference::SimCalculate()
                                     220
     PROAtmReference::GetValue(int, int, float &, int &, int &)
                                     272
     PROAtmReference::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine23                     8
     PROAtmReference::GetFloatValue(int, int, float &)
                                      80
     PROAtmReference::PutValue(int, int, AnsiString, bool, int *)
                                     748
     PROAtmReference::PutFloatValue(int, float)
                                      56
     PROAtmReference::GetValueInfoTableStatic(int &, int)
                                      16
     PROAtmReference::ReceiveData(unsigned char *)
                                     148
     PROAtmReference::SendData(unsigned short)
                                     292
     PROAtmReference::RefreshData(int)
                                      36
     ?Subroutine19                     8
     ?<Constant "Atm">                 4
     ?<Constant "Atmospheric reference">
                                      24
     ?<Constant "0x%0x">               8
     ?<Constant "AtmRef ">            92
     __sti__routine()                  4
     PROAtmReference::new PROAtmReference(bool)
                                      36
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable24                     4
     ??DataTable25                     4
      Others                        1152

 
 9 436 bytes in segment CODE
   252 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 6 044 bytes of CODE  memory (+ 3 408 bytes shared)
   252 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
