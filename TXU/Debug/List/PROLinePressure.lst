##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:15:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROLinePressure.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\PROLinePressure.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROLinePressure.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROLinePressure.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROLinePressure.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_6
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_7:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_8
   \                     ??_Insert_6:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_9
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_8
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_8
   \                     ??_Insert_9:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_8
   \   00000060   F0FFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_8:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_11
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_12
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_10
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_13
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_13:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_8
   \                     ??_Insert_12:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_10
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_14
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_14:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_18:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_18
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA_2
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_3
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_3
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_4
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_5
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_5:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_3
   \                     ??_Make_room_4:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_3:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_6
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_6
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_7
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_6
   \                     ??_Make_room_7:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_6:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_8
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_8
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_9
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_8
   \                     ??_Make_room_9:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_8:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_3
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_4:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_4
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_5
   \                     ??_Push_back0_3:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_3
   \                     ??_Push_back0_5:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_6
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_7:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_7
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_6:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_8:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_9
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_10:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_10
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_11
   \                     ??_Push_back0_9:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_5
   \                     ??_Push_back0_11:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char)
   \                     `??operator+_2`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??string,??string??rA
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000040   1CD08DE2           ADD      SP,SP,#+28
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_C, align 4, align-sorted
      9          vector<PRogramObjectBase*>PROLinePressure::AllObjVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??AllObjVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjVector, `?~vector`
   \              ............
   \   00000018   ............       DC32 ?_5, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
     10          vector<PRogramObjectBase*>PROLinePressure::ObjVector;
     11          set<PRogramObjectBase*>PROLinePressure::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??AllObjVector:
   \   00000018                      DS8 12
   \                     ??ObjVector:
   \   00000024                      DS8 12
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          PROLinePressure::PROLinePressure(int LNumber,bool AddToList):PROXRefObject(AddToList)
   \                     ??PROLinePressure:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     14          {
   \   00000014   0610A0E1           MOV      R1,R6
   \   00000018   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   0000001C   ........           LDR      R0,??DataTable10  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   5A0F84E2           ADD      R0,R4,#+360
   \   00000028   ........           _BLF     ??_Zero,??_Zero??rA
     15              LineNumber = LNumber;
   \   0000002C   045084E5           STR      R5,[R4, #+4]
     16              if ( AddToList ) {
   \   00000030   ........           LDR      R5,??DataTable11  ;; ??ObjectSet
   \   00000034   000056E3           CMP      R6,#+0
   \   00000038   0600000A           BEQ      ??PROLinePressure_2
     17                  ObjectSet.insert(this);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C008DE2           ADD      R0,SP,#+12
   \   00000048   ........           _BLF     ??insert_1,??insert??rA
     18                  AllObjVector.push_back(this);
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   180085E2           ADD      R0,R5,#+24
   \   00000054   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     19              }
     20              SetIdNumber(this, 0, C_PRO_LINEPRESS,AllObjVector);
   \                     ??PROLinePressure_2:
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000060   181085E2           ADD      R1,R5,#+24
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           _BLF     ??_Assign,??_Assign??rA
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   04308DE2           ADD      R3,SP,#+4
   \   00000078   462EA0E3           MOV      R2,#+1120
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   ........           B        ?Subroutine27
     21              Initiate();
     22          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   ........           _BLF     ??SetIdNumber,??SetIdNumber??rA
   \   00000008   04008DE2           ADD      R0,SP,#+4
   \   0000000C   ........           _BLF     `?~vector`,`?~vector??rA`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??Initiate
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   18D08DE2           ADD      SP,SP,#+24
   \                     ??Subroutine27_0:
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
     23          //---------------------------------------------------------------------------
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          PROLinePressure::PROLinePressure(int number,int LNumber, bool AddToList):PROXRefObject(AddToList)
   \                     ??PROLinePressure_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0310A0E1           MOV      R1,R3
     26          {
   \   00000018   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   0000001C   ........           LDR      R0,??DataTable10  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   5A0F84E2           ADD      R0,R4,#+360
   \   00000028   ........           _BLF     ??_Zero,??_Zero??rA
     27              LineNumber = LNumber;
   \   0000002C   046084E5           STR      R6,[R4, #+4]
     28              ObjectSet.insert(this);
   \   00000030   ........           LDR      R6,??DataTable11  ;; ??ObjectSet
   \   00000034   0420A0E1           MOV      R2,R4
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   0C008DE2           ADD      R0,SP,#+12
   \   00000040   ........           _BLF     ??insert_1,??insert??rA
     29          	AllObjVector.push_back(this);
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   180086E2           ADD      R0,R6,#+24
   \   0000004C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     30          	AddToScratchPageVector();
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     ??AddToScratchPageVector,??AddToScratchPageVector??rA
     31          	AddToIOObjectList();
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     32              SetIdNumber(this, number,C_PRO_LINEPRESS,AllObjVector);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000068   181086E2           ADD      R1,R6,#+24
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   04308DE2           ADD      R3,SP,#+4
   \   00000080   462EA0E3           MOV      R2,#+1120
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088                      REQUIRE ?Subroutine27
   \   00000088                      ;; // Fall through to label ?Subroutine27
     33              Initiate();
     34          }
     35          //---------------------------------------------------------------------------
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void PROLinePressure::Initiate(void)
     38          {
     39              HasPressure         = false;
   \                     ??Initiate:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   5C21C0E5           STRB     R2,[R0, #+348]
     40              PROPtr              = NULL;
   \   0000000C   601180E5           STR      R1,[R0, #+352]
     41              PROIDNumber         = 0;
   \   00000010   581180E5           STR      R1,[R0, #+344]
     42              Type                = C_PRO_LINEPRESS;
   \   00000014   462EA0E3           MOV      R2,#+1120
   \   00000018   A02080E5           STR      R2,[R0, #+160]
     43              LinePressSensor     = NULL;
   \   0000001C   641180E5           STR      R1,[R0, #+356]
     44              Pressure            = 0;
   \   00000020   741180E5           STR      R1,[R0, #+372]
     45              HiHiPressLimit      = PROProjectInfo::HiHiLinePressLimit;
   \   00000024   ........           LDR      R1,??DataTable18  ;; ??HiHiLinePressLimit
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   841180E5           STR      R1,[R0, #+388]
     46              HighPressLimit      = PROProjectInfo::HighLinePressLimit;
   \   00000030   ........           LDR      R1,??DataTable19  ;; ??HighLinePressLimit
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   881180E5           STR      R1,[R0, #+392]
     47              LowPressLimit       = PROProjectInfo::LowLinePressLimit;
   \   0000003C   ........           LDR      R1,??DataTable27  ;; ??LowLinePressLimit
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   8C1180E5           STR      R1,[R0, #+396]
     48               
     49              HighLinePressLocked = PROProjectInfo::HighLinePressLocked; 
   \   00000048   ........           LDR      R1,??DataTable15  ;; ??HighLinePressLocked
   \   0000004C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000050   9011C0E5           STRB     R1,[R0, #+400]
     50              LowLinePressLocked  = PROProjectInfo::LowLinePressLocked;  
   \   00000054   ........           LDR      R1,??DataTable16  ;; ??LowLinePressLocked
   \   00000058   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000005C   9111C0E5           STRB     R1,[R0, #+401]
     51          }
   \   00000060   1EFF2FE1           BX       LR               ;; return
     52          //---------------------------------------------------------------------------
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          PROLinePressure::~PROLinePressure(void)
     55          {
   \                     `?~PROLinePressure`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1900000A           BEQ      `?~PROLinePressure_1`
   \   00000014   ........           LDR      R0,??DataTable10  ;; ??__vtbl
     56              ObjectSet.erase(this);
   \   00000018   ........           LDR      R6,??DataTable11  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??erase_1,??erase??rA_1
     57              EraseFromVector(ObjVector,this);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   241086E2           ADD      R1,R6,#+36
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     58              EraseFromVector(AllObjVector,this);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   181086E2           ADD      R1,R6,#+24
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     59          }
   \   0000004C   5A6F84E2           ADD      R6,R4,#+360
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     `?~PROXRefObject`,`?~PROXRefObject??rA`
   \   0000006C   010015E3           TST      R5,#0x1
   \   00000070   0100000A           BEQ      `?~PROLinePressure_1`
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROLinePressure_1`:
   \   0000007C   ........           B        ??Subroutine27_0
     60          //---------------------------------------------------------------------------
     61          
     62          ///////////////////////////////////////////////////////////////
     63          //
     64          // Routines for the Configuration
     65          //
     66          ///////////////////////////////////////////////////////////////
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          void PROLinePressure::SetAlarmLimits(float HHLineLim,float HLineLim,float LLineLim)
     69          {
     70              HiHiPressurePtr->Limit            = HHLineLim;
   \                     ??SetAlarmLimits:
   \   00000000   78C190E5           LDR      R12,[R0, #+376]
   \   00000004   E4108CE5           STR      R1,[R12, #+228]
     71              HighPressurePtr->Limit            = HLineLim;
   \   00000008   7C1190E5           LDR      R1,[R0, #+380]
   \   0000000C   E42081E5           STR      R2,[R1, #+228]
     72              LowPressurePtr->Limit             = LLineLim;
   \   00000010   800190E5           LDR      R0,[R0, #+384]
   \   00000014   E43080E5           STR      R3,[R0, #+228]
     73          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
     74          
     75          
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          void PROLinePressure::WriteConfigToFile(TSNConfigString &ConfigString)
     78          {
   \                     ??WriteConfigToFile:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   7EDF4DE2           SUB      SP,SP,#+504
   \   00000008   0040A0E1           MOV      R4,R0
     79              if ( !PROPtr ) {
   \   0000000C   600194E5           LDR      R0,[R4, #+352]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   6102001A           BNE      ??WriteConfigToFile_1
     80                  AnsiString LocalString;
     81                  AnsiString IdNumStr;
     82                  IdNumStr.cat_sprintf("0x%0x",IDNumber);
   \   00000018   ........           LDR      R8,??DataTable12  ;; `?<Constant "0x%0x">`
     83                  LocalString +=KeyWord(C_PRO_LINEPRESS)+TabStr1+IdNumStr+CrLfStr;
   \   0000001C   84599FE5           LDR      R5,??WriteConfigToFile_2  ;; TabStr1
   \   00000020   ........           LDR      R6,??DataTable13  ;; CrLfStr
   \   00000024   8C008DE2           ADD      R0,SP,#+140
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   690F8DE2           ADD      R0,SP,#+420
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000034   9C3094E5           LDR      R3,[R4, #+156]
   \   00000038   0820A0E1           MOV      R2,R8
   \   0000003C   771F8DE2           ADD      R1,SP,#+476
   \   00000040   690F8DE2           ADD      R0,SP,#+420
   \   00000044   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   770F8DE2           ADD      R0,SP,#+476
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   461EA0E3           MOV      R1,#+1120
   \   0000005C   460F8DE2           ADD      R0,SP,#+280
   \   00000060   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   461F8DE2           ADD      R1,SP,#+280
   \   0000006C   FC008DE2           ADD      R0,SP,#+252
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   692F8DE2           ADD      R2,SP,#+420
   \   00000078   FC108DE2           ADD      R1,SP,#+252
   \   0000007C   E0008DE2           ADD      R0,SP,#+224
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   E0108DE2           ADD      R1,SP,#+224
   \   0000008C   C4008DE2           ADD      R0,SP,#+196
   \   00000090   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000094   ........           LDR      R0,??DataTable14  ;; ??npos
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   007090E5           LDR      R7,[R0, #+0]
   \   000000A0   C4108DE2           ADD      R1,SP,#+196
   \   000000A4   0730A0E1           MOV      R3,R7
   \   000000A8   8C008DE2           ADD      R0,SP,#+140
   \   000000AC   ........           _BLF     ??append,??append??rA
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   C4008DE2           ADD      R0,SP,#+196
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   E0008DE2           ADD      R0,SP,#+224
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   FC008DE2           ADD      R0,SP,#+252
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   460F8DE2           ADD      R0,SP,#+280
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     84                  LocalString += MakeConfigString();   //common
   \   000000F0   A43094E5           LDR      R3,[R4, #+164]
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0C3093E5           LDR      R3,[R3, #+12]
   \   000000FC   4D1F8DE2           ADD      R1,SP,#+308
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   0FE0A0E1           MOV      LR,PC
   \   00000108   13FF2FE1           BX       R3
   \   0000010C   0730A0E1           MOV      R3,R7
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   4D1F8DE2           ADD      R1,SP,#+308
   \   00000118   8C008DE2           ADD      R0,SP,#+140
   \   0000011C   ........           _BLF     ??append,??append??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   4D0F8DE2           ADD      R0,SP,#+308
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
     85          
     86                  if ( PROIDNumber ) {
   \   00000130   580194E5           LDR      R0,[R4, #+344]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   3B00000A           BEQ      ??WriteConfigToFile_3
     87                      AnsiString IdNumStr;
   \   0000013C   1C008DE2           ADD      R0,SP,#+28
   \   00000140   ........           _BLF     ??AnsiString,??AnsiString??rA
     88          			IdNumStr.cat_sprintf("0x%0x",PROIDNumber);
   \   00000144   583194E5           LDR      R3,[R4, #+344]
   \   00000148   0820A0E1           MOV      R2,R8
   \   0000014C   701F8DE2           ADD      R1,SP,#+448
   \   00000150   1C008DE2           ADD      R0,SP,#+28
   \   00000154   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   700F8DE2           ADD      R0,SP,#+448
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
     89                      LocalString +=TabStr1+KeyWord(C_PRO_TANK)+TabStr1+IdNumStr+CrLfStr;
   \   00000168   1A10A0E3           MOV      R1,#+26
   \   0000016C   401E81E3           ORR      R1,R1,#0x400
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000178   0D20A0E1           MOV      R2,SP
   \   0000017C   0510A0E1           MOV      R1,R5
   \   00000180   38008DE2           ADD      R0,SP,#+56
   \   00000184   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000188   0520A0E1           MOV      R2,R5
   \   0000018C   38108DE2           ADD      R1,SP,#+56
   \   00000190   70008DE2           ADD      R0,SP,#+112
   \   00000194   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000198   1C208DE2           ADD      R2,SP,#+28
   \   0000019C   70108DE2           ADD      R1,SP,#+112
   \   000001A0   54008DE2           ADD      R0,SP,#+84
   \   000001A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001A8   0620A0E1           MOV      R2,R6
   \   000001AC   54108DE2           ADD      R1,SP,#+84
   \   000001B0   A8008DE2           ADD      R0,SP,#+168
   \   000001B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001B8   0730A0E1           MOV      R3,R7
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   A8108DE2           ADD      R1,SP,#+168
   \   000001C4   8C008DE2           ADD      R0,SP,#+140
   \   000001C8   ........           _BLF     ??append,??append??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   A8008DE2           ADD      R0,SP,#+168
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   54008DE2           ADD      R0,SP,#+84
   \   000001E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   70008DE2           ADD      R0,SP,#+112
   \   000001F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001FC   0020A0E3           MOV      R2,#+0
   \   00000200   0110A0E3           MOV      R1,#+1
   \   00000204   38008DE2           ADD      R0,SP,#+56
   \   00000208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   0110A0E3           MOV      R1,#+1
   \   00000214   0D00A0E1           MOV      R0,SP
   \   00000218   ........           _BLF     ??_Tidy,??_Tidy??rA
     90                  }
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   1C008DE2           ADD      R0,SP,#+28
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
     91                  if (HighLinePressLocked && !PROProjectInfo::HighLinePressLocked ) LocalString += TabStr1 + KeyWord(AL_LOCK_HIGHLINE_PRESS) + CrLfStr;
   \                     ??WriteConfigToFile_3:
   \   0000022C   ........           LDR      R1,??DataTable15  ;; ??HighLinePressLocked
   \   00000230   9001D4E5           LDRB     R0,[R4, #+400]
   \   00000234   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000238   011021E2           EOR      R1,R1,#0x1
   \   0000023C   000011E1           TST      R1,R0
   \   00000240   1C00000A           BEQ      ??WriteConfigToFile_4
   \   00000244   4710A0E3           MOV      R1,#+71
   \   00000248   E01E81E3           ORR      R1,R1,#0xE00
   \   0000024C   38008DE2           ADD      R0,SP,#+56
   \   00000250   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000254   38208DE2           ADD      R2,SP,#+56
   \   00000258   0510A0E1           MOV      R1,R5
   \   0000025C   0D00A0E1           MOV      R0,SP
   \   00000260   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000264   0620A0E1           MOV      R2,R6
   \   00000268   0D10A0E1           MOV      R1,SP
   \   0000026C   1C008DE2           ADD      R0,SP,#+28
   \   00000270   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000274   0730A0E1           MOV      R3,R7
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   1C108DE2           ADD      R1,SP,#+28
   \   00000280   8C008DE2           ADD      R0,SP,#+140
   \   00000284   ........           _BLF     ??append,??append??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   1C008DE2           ADD      R0,SP,#+28
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   0D00A0E1           MOV      R0,SP
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   38008DE2           ADD      R0,SP,#+56
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     92                  if (LowLinePressLocked  && !PROProjectInfo::LowLinePressLocked  ) LocalString += TabStr1 + KeyWord(AL_LOCK_LOWLINE_PRESS ) + CrLfStr;
   \                     ??WriteConfigToFile_4:
   \   000002B8   ........           LDR      R1,??DataTable16  ;; ??LowLinePressLocked
   \   000002BC   9101D4E5           LDRB     R0,[R4, #+401]
   \   000002C0   0010D1E5           LDRB     R1,[R1, #+0]
   \   000002C4   011021E2           EOR      R1,R1,#0x1
   \   000002C8   000011E1           TST      R1,R0
   \   000002CC   1C00000A           BEQ      ??WriteConfigToFile_5
   \   000002D0   4810A0E3           MOV      R1,#+72
   \   000002D4   E01E81E3           ORR      R1,R1,#0xE00
   \   000002D8   1C008DE2           ADD      R0,SP,#+28
   \   000002DC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002E0   1C208DE2           ADD      R2,SP,#+28
   \   000002E4   0510A0E1           MOV      R1,R5
   \   000002E8   0D00A0E1           MOV      R0,SP
   \   000002EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002F0   0620A0E1           MOV      R2,R6
   \   000002F4   0D10A0E1           MOV      R1,SP
   \   000002F8   38008DE2           ADD      R0,SP,#+56
   \   000002FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000300   0730A0E1           MOV      R3,R7
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   38108DE2           ADD      R1,SP,#+56
   \   0000030C   8C008DE2           ADD      R0,SP,#+140
   \   00000310   ........           _BLF     ??append,??append??rA
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   0110A0E3           MOV      R1,#+1
   \   0000031C   38008DE2           ADD      R0,SP,#+56
   \   00000320   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   0D00A0E1           MOV      R0,SP
   \   00000330   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   0110A0E3           MOV      R1,#+1
   \   0000033C   1C008DE2           ADD      R0,SP,#+28
   \   00000340   ........           _BLF     ??_Tidy,??_Tidy??rA
     93          
     94                  if (PROProjectInfo::PressLim_mBar) {
   \                     ??WriteConfigToFile_5:
   \   00000344   ........           LDR      R1,??DataTable34  ;; ??PressLim_mBar
   \   00000348   84B194E5           LDR      R11,[R4, #+388]
   \   0000034C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000350   ........           LDR      R0,??DataTable18  ;; ??HiHiLinePressLimit
   \   00000354   ........           LDR      R9,??DataTable19  ;; ??HighLinePressLimit
   \   00000358   000090E5           LDR      R0,[R0, #+0]
   \   0000035C   26A0A0E3           MOV      R10,#+38
   \   00000360   E0AE8AE3           ORR      R10,R10,#0xE00
   \   00000364   01804AE2           SUB      R8,R10,#+1
   \   00000368   000051E3           CMP      R1,#+0
   \   0000036C   0B10A0E1           MOV      R1,R11
   \   00000370   B500000A           BEQ      ??WriteConfigToFile_6
     95                      if (PROProjectInfo::HiHiLinePressLimit != HiHiPressLimit) {
   \   00000374   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   3800000A           BEQ      ??WriteConfigToFile_7
     96          				LocalString +=TabStr1+KeyWord(AL_LIM_HIGHLINE_PRESS)+FloatToAnsiString(HiHiPressLimit*MH2O_TO_MBAR)+CrLfStr;
   \   00000380   0330A0E3           MOV      R3,#+3
   \   00000384   0720A0E3           MOV      R2,#+7
   \   00000388   04002DE9           PUSH     {R2}
   \   0000038C   08002DE9           PUSH     {R3}
   \   00000390   0B00A0E1           MOV      R0,R11
   \   00000394   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000398   0020A0E1           MOV      R2,R0
   \   0000039C   ........           LDR      R0,??DataTable35  ;; 0xffffffff89374bc7
   \   000003A0   0130A0E1           MOV      R3,R1
   \   000003A4   ........           LDR      R1,??DataTable36  ;; 0x40588441
   \   000003A8   ........           _BLF     __dMul,??__dMul??rA
   \   000003AC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003B0   0800BDE8           POP      {R3}
   \   000003B4   0400BDE8           POP      {R2}
   \   000003B8   0010A0E1           MOV      R1,R0
   \   000003BC   54008DE2           ADD      R0,SP,#+84
   \   000003C0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000003C4   0810A0E1           MOV      R1,R8
   \   000003C8   70008DE2           ADD      R0,SP,#+112
   \   000003CC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003D0   70208DE2           ADD      R2,SP,#+112
   \   000003D4   0510A0E1           MOV      R1,R5
   \   000003D8   38008DE2           ADD      R0,SP,#+56
   \   000003DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E0   54208DE2           ADD      R2,SP,#+84
   \   000003E4   38108DE2           ADD      R1,SP,#+56
   \   000003E8   0D00A0E1           MOV      R0,SP
   \   000003EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F0   0620A0E1           MOV      R2,R6
   \   000003F4   0D10A0E1           MOV      R1,SP
   \   000003F8   1C008DE2           ADD      R0,SP,#+28
   \   000003FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000400   0730A0E1           MOV      R3,R7
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   1C108DE2           ADD      R1,SP,#+28
   \   0000040C   8C008DE2           ADD      R0,SP,#+140
   \   00000410   ........           _BLF     ??append,??append??rA
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   1C008DE2           ADD      R0,SP,#+28
   \   00000420   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0110A0E3           MOV      R1,#+1
   \   0000042C   0D00A0E1           MOV      R0,SP
   \   00000430   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0110A0E3           MOV      R1,#+1
   \   0000043C   54008DE2           ADD      R0,SP,#+84
   \   00000440   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   0110A0E3           MOV      R1,#+1
   \   0000044C   38008DE2           ADD      R0,SP,#+56
   \   00000450   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000454   0020A0E3           MOV      R2,#+0
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   70008DE2           ADD      R0,SP,#+112
   \   00000460   ........           _BLF     ??_Tidy,??_Tidy??rA
     97          			}
     98          			if (PROProjectInfo::HighLinePressLimit != HighPressLimit) {
   \                     ??WriteConfigToFile_7:
   \   00000464   88B194E5           LDR      R11,[R4, #+392]
   \   00000468   000099E5           LDR      R0,[R9, #+0]
   \   0000046C   0B10A0E1           MOV      R1,R11
   \   00000470   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000474   000050E3           CMP      R0,#+0
   \   00000478   3600000A           BEQ      ??WriteConfigToFile_8
     99          				LocalString +=TabStr1+KeyWord(AL_LIM_HIGHLINE_PRESS)+FloatToAnsiString(HighPressLimit*MH2O_TO_MBAR)+CrLfStr;
   \   0000047C   0720A0E3           MOV      R2,#+7
   \   00000480   04002DE9           PUSH     {R2}
   \   00000484   0B00A0E1           MOV      R0,R11
   \   00000488   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000048C   0020A0E1           MOV      R2,R0
   \   00000490   ........           LDR      R0,??DataTable35  ;; 0xffffffff89374bc7
   \   00000494   0130A0E1           MOV      R3,R1
   \   00000498   ........           LDR      R1,??DataTable36  ;; 0x40588441
   \   0000049C   ........           _BLF     __dMul,??__dMul??rA
   \   000004A0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004A4   0400BDE8           POP      {R2}
   \   000004A8   0010A0E1           MOV      R1,R0
   \   000004AC   0330A0E3           MOV      R3,#+3
   \   000004B0   70008DE2           ADD      R0,SP,#+112
   \   000004B4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000004B8   0810A0E1           MOV      R1,R8
   \   000004BC   54008DE2           ADD      R0,SP,#+84
   \   000004C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004C4   54208DE2           ADD      R2,SP,#+84
   \   000004C8   0510A0E1           MOV      R1,R5
   \   000004CC   1C008DE2           ADD      R0,SP,#+28
   \   000004D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004D4   70208DE2           ADD      R2,SP,#+112
   \   000004D8   1C108DE2           ADD      R1,SP,#+28
   \   000004DC   0D00A0E1           MOV      R0,SP
   \   000004E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004E4   0620A0E1           MOV      R2,R6
   \   000004E8   0D10A0E1           MOV      R1,SP
   \   000004EC   38008DE2           ADD      R0,SP,#+56
   \   000004F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004F4   0730A0E1           MOV      R3,R7
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   38108DE2           ADD      R1,SP,#+56
   \   00000500   8C008DE2           ADD      R0,SP,#+140
   \   00000504   ........           _BLF     ??append,??append??rA
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0110A0E3           MOV      R1,#+1
   \   00000510   38008DE2           ADD      R0,SP,#+56
   \   00000514   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   0110A0E3           MOV      R1,#+1
   \   00000520   0D00A0E1           MOV      R0,SP
   \   00000524   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000528   0020A0E3           MOV      R2,#+0
   \   0000052C   0110A0E3           MOV      R1,#+1
   \   00000530   70008DE2           ADD      R0,SP,#+112
   \   00000534   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000538   0020A0E3           MOV      R2,#+0
   \   0000053C   0110A0E3           MOV      R1,#+1
   \   00000540   1C008DE2           ADD      R0,SP,#+28
   \   00000544   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000548   0020A0E3           MOV      R2,#+0
   \   0000054C   0110A0E3           MOV      R1,#+1
   \   00000550   54008DE2           ADD      R0,SP,#+84
   \   00000554   ........           _BLF     ??_Tidy,??_Tidy??rA
    100          			}
    101          			if ( PROProjectInfo::LowLinePressLimit != LowPressLimit ) {
   \                     ??WriteConfigToFile_8:
   \   00000558   ........           LDR      R0,??DataTable27  ;; ??LowLinePressLimit
   \   0000055C   8CB194E5           LDR      R11,[R4, #+396]
   \   00000560   000090E5           LDR      R0,[R0, #+0]
   \   00000564   0B10A0E1           MOV      R1,R11
   \   00000568   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000056C   000050E3           CMP      R0,#+0
   \   00000570   CC00000A           BEQ      ??WriteConfigToFile_9
    102          				LocalString +=TabStr1+KeyWord(AL_LIM_LOWLINE_PRESS)+FloatToAnsiString(LowPressLimit*MH2O_TO_MBAR)+CrLfStr;
   \   00000574   0B00A0E1           MOV      R0,R11
   \   00000578   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000057C   0020A0E1           MOV      R2,R0
   \   00000580   ........           LDR      R0,??DataTable35  ;; 0xffffffff89374bc7
   \   00000584   0130A0E1           MOV      R3,R1
   \   00000588   ........           LDR      R1,??DataTable36  ;; 0x40588441
   \   0000058C   0790A0E3           MOV      R9,#+7
   \   00000590   ........           _BLF     __dMul,??__dMul??rA
   \   00000594   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000598   0010A0E1           MOV      R1,R0
   \   0000059C   0330A0E3           MOV      R3,#+3
   \   000005A0   0920A0E1           MOV      R2,R9
   \   000005A4   54008DE2           ADD      R0,SP,#+84
   \   000005A8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000005AC   0A10A0E1           MOV      R1,R10
   \   000005B0   70008DE2           ADD      R0,SP,#+112
   \   000005B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005B8   70208DE2           ADD      R2,SP,#+112
   \   000005BC   0510A0E1           MOV      R1,R5
   \   000005C0   38008DE2           ADD      R0,SP,#+56
   \   000005C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005C8   54208DE2           ADD      R2,SP,#+84
   \   000005CC   38108DE2           ADD      R1,SP,#+56
   \   000005D0   0D00A0E1           MOV      R0,SP
   \   000005D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005D8   0620A0E1           MOV      R2,R6
   \   000005DC   0D10A0E1           MOV      R1,SP
   \   000005E0   1C008DE2           ADD      R0,SP,#+28
   \   000005E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005E8   0730A0E1           MOV      R3,R7
   \   000005EC   0020A0E3           MOV      R2,#+0
   \   000005F0   1C108DE2           ADD      R1,SP,#+28
   \   000005F4   8C008DE2           ADD      R0,SP,#+140
   \   000005F8   ........           _BLF     ??append,??append??rA
   \   000005FC   0020A0E3           MOV      R2,#+0
   \   00000600   0110A0E3           MOV      R1,#+1
   \   00000604   1C008DE2           ADD      R0,SP,#+28
   \   00000608   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000060C   0020A0E3           MOV      R2,#+0
   \   00000610   0110A0E3           MOV      R1,#+1
   \   00000614   0D00A0E1           MOV      R0,SP
   \   00000618   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000061C   0020A0E3           MOV      R2,#+0
   \   00000620   0110A0E3           MOV      R1,#+1
   \   00000624   54008DE2           ADD      R0,SP,#+84
   \   00000628   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000062C   0020A0E3           MOV      R2,#+0
   \   00000630   0110A0E3           MOV      R1,#+1
   \   00000634   38008DE2           ADD      R0,SP,#+56
   \   00000638   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000063C   0020A0E3           MOV      R2,#+0
   \   00000640   0110A0E3           MOV      R1,#+1
   \   00000644   70008DE2           ADD      R0,SP,#+112
   \   00000648   950000EA           B        ??WriteConfigToFile_10
    103          			}
    104          		}else{
    105          			if (PROProjectInfo::HiHiLinePressLimit != HiHiPressLimit) {
   \                     ??WriteConfigToFile_6:
   \   0000064C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000650   000050E3           CMP      R0,#+0
   \   00000654   2C00000A           BEQ      ??WriteConfigToFile_11
    106          				LocalString +=TabStr1+KeyWord(AL_LIM_HIGHLINE_PRESS)+FloatToAnsiString(HiHiPressLimit)+CrLfStr;
   \   00000658   0330A0E3           MOV      R3,#+3
   \   0000065C   0720A0E3           MOV      R2,#+7
   \   00000660   0B10A0E1           MOV      R1,R11
   \   00000664   70008DE2           ADD      R0,SP,#+112
   \   00000668   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000066C   0810A0E1           MOV      R1,R8
   \   00000670   54008DE2           ADD      R0,SP,#+84
   \   00000674   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000678   54208DE2           ADD      R2,SP,#+84
   \   0000067C   0510A0E1           MOV      R1,R5
   \   00000680   0D00A0E1           MOV      R0,SP
   \   00000684   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000688   70208DE2           ADD      R2,SP,#+112
   \   0000068C   0D10A0E1           MOV      R1,SP
   \   00000690   38008DE2           ADD      R0,SP,#+56
   \   00000694   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000698   0620A0E1           MOV      R2,R6
   \   0000069C   38108DE2           ADD      R1,SP,#+56
   \   000006A0   1C008DE2           ADD      R0,SP,#+28
   \   000006A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006A8   0730A0E1           MOV      R3,R7
   \   000006AC   0020A0E3           MOV      R2,#+0
   \   000006B0   1C108DE2           ADD      R1,SP,#+28
   \   000006B4   8C008DE2           ADD      R0,SP,#+140
   \   000006B8   ........           _BLF     ??append,??append??rA
   \   000006BC   0020A0E3           MOV      R2,#+0
   \   000006C0   0110A0E3           MOV      R1,#+1
   \   000006C4   1C008DE2           ADD      R0,SP,#+28
   \   000006C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006CC   0020A0E3           MOV      R2,#+0
   \   000006D0   0110A0E3           MOV      R1,#+1
   \   000006D4   38008DE2           ADD      R0,SP,#+56
   \   000006D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006DC   0020A0E3           MOV      R2,#+0
   \   000006E0   0110A0E3           MOV      R1,#+1
   \   000006E4   70008DE2           ADD      R0,SP,#+112
   \   000006E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006EC   0020A0E3           MOV      R2,#+0
   \   000006F0   0110A0E3           MOV      R1,#+1
   \   000006F4   0D00A0E1           MOV      R0,SP
   \   000006F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006FC   0020A0E3           MOV      R2,#+0
   \   00000700   0110A0E3           MOV      R1,#+1
   \   00000704   54008DE2           ADD      R0,SP,#+84
   \   00000708   ........           _BLF     ??_Tidy,??_Tidy??rA
    107          			}
    108          			if (PROProjectInfo::HighLinePressLimit != HighPressLimit) {
   \                     ??WriteConfigToFile_11:
   \   0000070C   88B194E5           LDR      R11,[R4, #+392]
   \   00000710   000099E5           LDR      R0,[R9, #+0]
   \   00000714   0B10A0E1           MOV      R1,R11
   \   00000718   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000071C   000050E3           CMP      R0,#+0
   \   00000720   2C00000A           BEQ      ??WriteConfigToFile_12
    109          				LocalString +=TabStr1+KeyWord(AL_LIM_HIGHLINE_PRESS)+FloatToAnsiString(HighPressLimit)+CrLfStr;
   \   00000724   0330A0E3           MOV      R3,#+3
   \   00000728   0720A0E3           MOV      R2,#+7
   \   0000072C   0B10A0E1           MOV      R1,R11
   \   00000730   54008DE2           ADD      R0,SP,#+84
   \   00000734   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000738   0810A0E1           MOV      R1,R8
   \   0000073C   70008DE2           ADD      R0,SP,#+112
   \   00000740   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000744   70208DE2           ADD      R2,SP,#+112
   \   00000748   0510A0E1           MOV      R1,R5
   \   0000074C   1C008DE2           ADD      R0,SP,#+28
   \   00000750   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000754   54208DE2           ADD      R2,SP,#+84
   \   00000758   1C108DE2           ADD      R1,SP,#+28
   \   0000075C   38008DE2           ADD      R0,SP,#+56
   \   00000760   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000764   0620A0E1           MOV      R2,R6
   \   00000768   38108DE2           ADD      R1,SP,#+56
   \   0000076C   0D00A0E1           MOV      R0,SP
   \   00000770   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000774   0730A0E1           MOV      R3,R7
   \   00000778   0020A0E3           MOV      R2,#+0
   \   0000077C   0D10A0E1           MOV      R1,SP
   \   00000780   8C008DE2           ADD      R0,SP,#+140
   \   00000784   ........           _BLF     ??append,??append??rA
   \   00000788   0020A0E3           MOV      R2,#+0
   \   0000078C   0110A0E3           MOV      R1,#+1
   \   00000790   0D00A0E1           MOV      R0,SP
   \   00000794   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000798   0020A0E3           MOV      R2,#+0
   \   0000079C   0110A0E3           MOV      R1,#+1
   \   000007A0   38008DE2           ADD      R0,SP,#+56
   \   000007A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007A8   0020A0E3           MOV      R2,#+0
   \   000007AC   0110A0E3           MOV      R1,#+1
   \   000007B0   54008DE2           ADD      R0,SP,#+84
   \   000007B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007B8   0020A0E3           MOV      R2,#+0
   \   000007BC   0110A0E3           MOV      R1,#+1
   \   000007C0   1C008DE2           ADD      R0,SP,#+28
   \   000007C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007C8   0020A0E3           MOV      R2,#+0
   \   000007CC   0110A0E3           MOV      R1,#+1
   \   000007D0   70008DE2           ADD      R0,SP,#+112
   \   000007D4   ........           _BLF     ??_Tidy,??_Tidy??rA
    110          			}
    111          			if ( PROProjectInfo::LowLinePressLimit != LowPressLimit ) {
   \                     ??WriteConfigToFile_12:
   \   000007D8   ........           LDR      R0,??DataTable27  ;; ??LowLinePressLimit
   \   000007DC   8C8194E5           LDR      R8,[R4, #+396]
   \   000007E0   000090E5           LDR      R0,[R0, #+0]
   \   000007E4   0810A0E1           MOV      R1,R8
   \   000007E8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000007EC   000050E3           CMP      R0,#+0
   \   000007F0   2C00000A           BEQ      ??WriteConfigToFile_9
    112          				LocalString +=TabStr1+KeyWord(AL_LIM_LOWLINE_PRESS)+FloatToAnsiString(LowPressLimit)+CrLfStr;
   \   000007F4   0330A0E3           MOV      R3,#+3
   \   000007F8   0720A0E3           MOV      R2,#+7
   \   000007FC   0810A0E1           MOV      R1,R8
   \   00000800   70008DE2           ADD      R0,SP,#+112
   \   00000804   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000808   0A10A0E1           MOV      R1,R10
   \   0000080C   54008DE2           ADD      R0,SP,#+84
   \   00000810   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000814   54208DE2           ADD      R2,SP,#+84
   \   00000818   0510A0E1           MOV      R1,R5
   \   0000081C   0D00A0E1           MOV      R0,SP
   \   00000820   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000824   70208DE2           ADD      R2,SP,#+112
   \   00000828   0D10A0E1           MOV      R1,SP
   \   0000082C   38008DE2           ADD      R0,SP,#+56
   \   00000830   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000834   0620A0E1           MOV      R2,R6
   \   00000838   38108DE2           ADD      R1,SP,#+56
   \   0000083C   1C008DE2           ADD      R0,SP,#+28
   \   00000840   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000844   0730A0E1           MOV      R3,R7
   \   00000848   0020A0E3           MOV      R2,#+0
   \   0000084C   1C108DE2           ADD      R1,SP,#+28
   \   00000850   8C008DE2           ADD      R0,SP,#+140
   \   00000854   ........           _BLF     ??append,??append??rA
   \   00000858   0020A0E3           MOV      R2,#+0
   \   0000085C   0110A0E3           MOV      R1,#+1
   \   00000860   1C008DE2           ADD      R0,SP,#+28
   \   00000864   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000868   0020A0E3           MOV      R2,#+0
   \   0000086C   0110A0E3           MOV      R1,#+1
   \   00000870   38008DE2           ADD      R0,SP,#+56
   \   00000874   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000878   0020A0E3           MOV      R2,#+0
   \   0000087C   0110A0E3           MOV      R1,#+1
   \   00000880   70008DE2           ADD      R0,SP,#+112
   \   00000884   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000888   0020A0E3           MOV      R2,#+0
   \   0000088C   0110A0E3           MOV      R1,#+1
   \   00000890   0D00A0E1           MOV      R0,SP
   \   00000894   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000898   0020A0E3           MOV      R2,#+0
   \   0000089C   0110A0E3           MOV      R1,#+1
   \   000008A0   54008DE2           ADD      R0,SP,#+84
   \                     ??WriteConfigToFile_10:
   \   000008A4   ........           _BLF     ??_Tidy,??_Tidy??rA
    113          			}
    114          		}
    115          
    116          		if ( LinePressSensor ) {
   \                     ??WriteConfigToFile_9:
   \   000008A8   643194E5           LDR      R3,[R4, #+356]
   \   000008AC   000053E3           CMP      R3,#+0
   \   000008B0   0F00000A           BEQ      ??WriteConfigToFile_13
    117          			LocalString += LinePressSensor->MakeConfigString();
   \   000008B4   0300A0E1           MOV      R0,R3
   \   000008B8   A43093E5           LDR      R3,[R3, #+164]
   \   000008BC   0020A0E3           MOV      R2,#+0
   \   000008C0   0C3093E5           LDR      R3,[R3, #+12]
   \   000008C4   0D10A0E1           MOV      R1,SP
   \   000008C8   0FE0A0E1           MOV      LR,PC
   \   000008CC   13FF2FE1           BX       R3
   \   000008D0   0730A0E1           MOV      R3,R7
   \   000008D4   0020A0E3           MOV      R2,#+0
   \   000008D8   0D10A0E1           MOV      R1,SP
   \   000008DC   8C008DE2           ADD      R0,SP,#+140
   \   000008E0   ........           _BLF     ??append,??append??rA
   \   000008E4   0020A0E3           MOV      R2,#+0
   \   000008E8   0110A0E3           MOV      R1,#+1
   \   000008EC   0D00A0E1           MOV      R0,SP
   \   000008F0   ........           _BLF     ??_Tidy,??_Tidy??rA
    118          		}
    119          		LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \                     ??WriteConfigToFile_13:
   \   000008F4   FA1FA0E3           MOV      R1,#+1000
   \   000008F8   5B0F8DE2           ADD      R0,SP,#+364
   \   000008FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000900   0620A0E1           MOV      R2,R6
   \   00000904   5B1F8DE2           ADD      R1,SP,#+364
   \   00000908   540F8DE2           ADD      R0,SP,#+336
   \   0000090C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000910   0730A0E1           MOV      R3,R7
   \   00000914   0020A0E3           MOV      R2,#+0
   \   00000918   541F8DE2           ADD      R1,SP,#+336
   \   0000091C   8C008DE2           ADD      R0,SP,#+140
   \   00000920   ........           _BLF     ??append,??append??rA
   \   00000924   0020A0E3           MOV      R2,#+0
   \   00000928   0110A0E3           MOV      R1,#+1
   \   0000092C   540F8DE2           ADD      R0,SP,#+336
   \   00000930   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000934   0020A0E3           MOV      R2,#+0
   \   00000938   0110A0E3           MOV      R1,#+1
   \   0000093C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000940   ........           _BLF     ??_Tidy,??_Tidy??rA
    120          		LocalString += CrLfStr;
   \   00000944   0730A0E1           MOV      R3,R7
   \   00000948   0020A0E3           MOV      R2,#+0
   \   0000094C   0610A0E1           MOV      R1,R6
   \   00000950   8C008DE2           ADD      R0,SP,#+140
   \   00000954   ........           _BLF     ??append,??append??rA
    121          		ConfigString.AddString(LocalString);
   \   00000958   8C108DE2           ADD      R1,SP,#+140
   \   0000095C   620F8DE2           ADD      R0,SP,#+392
   \   00000960   ........           _BLF     ??string,??string??rA
   \   00000964   F8019DE5           LDR      R0,[SP, #+504]
   \   00000968   621F8DE2           ADD      R1,SP,#+392
   \   0000096C   ........           _BLF     ??AddString,??AddString??rA
   \   00000970   0020A0E3           MOV      R2,#+0
   \   00000974   0110A0E3           MOV      R1,#+1
   \   00000978   620F8DE2           ADD      R0,SP,#+392
   \   0000097C   ........           _BLF     ??_Tidy,??_Tidy??rA
    122          
    123          	}
   \   00000980   0020A0E3           MOV      R2,#+0
   \   00000984   0110A0E3           MOV      R1,#+1
   \   00000988   690F8DE2           ADD      R0,SP,#+420
   \   0000098C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000990   0020A0E3           MOV      R2,#+0
   \   00000994   0110A0E3           MOV      R1,#+1
   \   00000998   8C008DE2           ADD      R0,SP,#+140
   \   0000099C   ........           _BLF     ??_Tidy,??_Tidy??rA
    124          }
   \                     ??WriteConfigToFile_1:
   \   000009A0   7FDF8DE2           ADD      SP,SP,#+508
   \   000009A4   ........           B        ?Subroutine28
   \                     ??WriteConfigToFile_2:
   \   000009A8   ........           DC32     TabStr1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine28_0:
   \   00000008   ........           DC32     `?<Constant "Line pressure ">`
    125          //---------------------------------------------------------------------------
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int PROLinePressure::LoadConfigFromFile(TSNConfigString &ConfigString)
    128          {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0150A0E1           MOV      R5,R1
    129          	SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
    130          	HiHiPressurePtr         = new AlarmHiHiLinePressure( this);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??new AlarmHiHiLinePressure`,`??new AlarmHiHiLinePressure??rA`
   \   00000020   780184E5           STR      R0,[R4, #+376]
    131          	HighPressurePtr         = new AlarmHighLinePressure( this);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??new AlarmHighLinePressure`,`??new AlarmHighLinePressure??rA`
   \   0000002C   7C0184E5           STR      R0,[R4, #+380]
    132          	LowPressurePtr          = new AlarmLowLinePressure( this);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     `??new AlarmLowLinePressure`,`??new AlarmLowLinePressure??rA`
   \   00000038   800184E5           STR      R0,[R4, #+384]
    133          	AlarmSet.insert(HiHiPressurePtr);
   \   0000003C   782194E5           LDR      R2,[R4, #+376]
   \   00000040   E41084E2           ADD      R1,R4,#+228
   \   00000044   3C008DE2           ADD      R0,SP,#+60
   \   00000048   ........           _BLF     ??insert,??insert??rA_1
    134          	AlarmSet.insert(HighPressurePtr);
   \   0000004C   7C2194E5           LDR      R2,[R4, #+380]
   \   00000050   E41084E2           ADD      R1,R4,#+228
   \   00000054   44008DE2           ADD      R0,SP,#+68
   \   00000058   ........           _BLF     ??insert,??insert??rA_1
    135          	AlarmSet.insert(LowPressurePtr);
   \   0000005C   802194E5           LDR      R2,[R4, #+384]
   \   00000060   E41084E2           ADD      R1,R4,#+228
   \   00000064   4C008DE2           ADD      R0,SP,#+76
   \   00000068   ........           _BLF     ??insert,??insert??rA_1
    136          	AddAlarms(CompleteAlarmInfoList);
   \   0000006C   FC1084E2           ADD      R1,R4,#+252
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    137          	bool NoError = true;
   \   00000078   01A0A0E3           MOV      R10,#+1
   \   0000007C   0160A0E3           MOV      R6,#+1
    138          	int ErrorLine=0;
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   00108DE5           STR      R1,[SP, #+0]
   \   00000088   5A7FA0E3           MOV      R7,#+360
   \   0000008C   0190A0E1           MOV      R9,R1
    139          	int Key;
    140          	do {
    141          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_1:
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   0D20A0E1           MOV      R2,SP
   \   00000098   20108DE2           ADD      R1,SP,#+32
    142          		if ( ErrorLine ) {
   \   0000009C   ........           LDR      R11,??Subroutine28_0  ;; `?<Constant "Line pressure ">`
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           _BLF     ??NextWord,??NextWord??rA
   \   000000A8   00009DE5           LDR      R0,[SP, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   1A00000A           BEQ      ??LoadConfigFromFile_2
    143          			if ( ErrorLine != EOF ) {
   \   000000B4   010070E3           CMN      R0,#+1
   \   000000B8   F700000A           BEQ      ??LoadConfigFromFile_3
    144          				GiveConfigWarning((AnsiString)"Line pressure "+Name,ErrorLine);
   \   000000BC   0B10A0E1           MOV      R1,R11
   \   000000C0   70008DE2           ADD      R0,SP,#+112
   \   000000C4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000C8   442084E2           ADD      R2,R4,#+68
   \   000000CC   0010A0E1           MOV      R1,R0
   \   000000D0   04008DE2           ADD      R0,SP,#+4
   \   000000D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D8   04108DE2           ADD      R1,SP,#+4
   \   000000DC   54008DE2           ADD      R0,SP,#+84
   \   000000E0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000E4   00109DE5           LDR      R1,[SP, #+0]
   \   000000E8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0A10A0E1           MOV      R1,R10
   \   000000F4   54008DE2           ADD      R0,SP,#+84
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0920A0E1           MOV      R2,R9
   \   00000100   0A10A0E1           MOV      R1,R10
   \   00000104   04008DE2           ADD      R0,SP,#+4
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0920A0E1           MOV      R2,R9
   \   00000110   0A10A0E1           MOV      R1,R10
   \   00000114   70008DE2           ADD      R0,SP,#+112
   \                     ??LoadConfigFromFile_4:
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   DE0000EA           B        ??LoadConfigFromFile_3
    145          			}
    146          		} else {
    147          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_2:
   \   00000120   20108DE2           ADD      R1,SP,#+32
   \   00000124   04008DE2           ADD      R0,SP,#+4
   \   00000128   ........           _BLF     ??string,??string??rA
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000134   0080A0E1           MOV      R8,R0
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0A10A0E1           MOV      R1,R10
   \   00000140   04008DE2           ADD      R0,SP,#+4
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000148   0800A0E1           MOV      R0,R8
   \   0000014C   FA0F50E3           CMP      R0,#+1000
   \   00000150   EA10A013           MOVNE    R1,#+234
   \   00000154   C01F8113           ORRNE    R1,R1,#0x300
   \   00000158   01005011           CMPNE    R0,R1
   \   0000015C   CE00000A           BEQ      ??LoadConfigFromFile_3
   \   00000160   011081E3           ORR      R1,R1,#0x1
   \   00000164   010050E1           CMP      R0,R1
   \   00000168   5300000A           BEQ      ??LoadConfigFromFile_5
   \   0000016C   FB0F50E3           CMP      R0,#+1004
   \   00000170   C900000A           BEQ      ??LoadConfigFromFile_3
   \   00000174   2F1081E2           ADD      R1,R1,#+47
   \   00000178   010050E1           CMP      R0,R1
   \   0000017C   9F00000A           BEQ      ??LoadConfigFromFile_6
   \   00000180   6E1E87E2           ADD      R1,R7,#+1760
   \   00000184   010050E1           CMP      R0,R1
   \   00000188   01108113           ORRNE    R1,R1,#0x1
   \   0000018C   01005011           CMPNE    R0,R1
   \   00000190   01108112           ADDNE    R1,R1,#+1
   \   00000194   01005011           CMPNE    R0,R1
   \   00000198   01108113           ORRNE    R1,R1,#0x1
   \   0000019C   01005011           CMPNE    R0,R1
   \   000001A0   01108112           ADDNE    R1,R1,#+1
   \   000001A4   01005011           CMPNE    R0,R1
   \   000001A8   01108113           ORRNE    R1,R1,#0x1
   \   000001AC   01005011           CMPNE    R0,R1
   \   000001B0   05108112           ADDNE    R1,R1,#+5
   \   000001B4   01005011           CMPNE    R0,R1
   \   000001B8   A000000A           BEQ      ??LoadConfigFromFile_7
   \   000001BC   011081E3           ORR      R1,R1,#0x1
   \   000001C0   010050E1           CMP      R0,R1
   \   000001C4   A000000A           BEQ      ??LoadConfigFromFile_8
   \   000001C8   011081E2           ADD      R1,R1,#+1
   \   000001CC   010050E1           CMP      R0,R1
   \   000001D0   9700000A           BEQ      ??LoadConfigFromFile_9
   \   000001D4   441081E2           ADD      R1,R1,#+68
   \   000001D8   010050E1           CMP      R0,R1
   \   000001DC   B910A013           MOVNE    R1,#+185
   \   000001E0   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001E4   01005011           CMPNE    R0,R1
   \   000001E8   AB00000A           BEQ      ??LoadConfigFromFile_3
   \   000001EC   2410A0E3           MOV      R1,#+36
   \   000001F0   E01E81E3           ORR      R1,R1,#0xE00
   \   000001F4   010050E1           CMP      R0,R1
   \   000001F8   3A00000A           BEQ      ??LoadConfigFromFile_10
   \   000001FC   011081E3           ORR      R1,R1,#0x1
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   4D00000A           BEQ      ??LoadConfigFromFile_11
   \   00000208   011081E2           ADD      R1,R1,#+1
   \   0000020C   010050E1           CMP      R0,R1
   \   00000210   6000000A           BEQ      ??LoadConfigFromFile_12
   \   00000214   211081E2           ADD      R1,R1,#+33
   \   00000218   010050E1           CMP      R0,R1
   \   0000021C   7300000A           BEQ      ??LoadConfigFromFile_13
   \   00000220   011081E2           ADD      R1,R1,#+1
   \   00000224   010050E1           CMP      R0,R1
   \   00000228   7200000A           BEQ      ??LoadConfigFromFile_14
   \   0000022C   3410A0E3           MOV      R1,#+52
   \   00000230   841D81E3           ORR      R1,R1,#0x2100
   \   00000234   010050E1           CMP      R0,R1
   \   00000238   2300000A           BEQ      ??LoadConfigFromFile_15
    148          			switch ( Key ) {
    149          			default:
    150          				GiveConfigWarning((AnsiString)"Line pressure "+Name,InputKeyWord,ConfigString.LineCount);
   \   0000023C   20108DE2           ADD      R1,SP,#+32
   \   00000240   8C008DE2           ADD      R0,SP,#+140
   \   00000244   ........           _BLF     ??string,??string??rA
   \   00000248   0B10A0E1           MOV      R1,R11
   \   0000024C   E0008DE2           ADD      R0,SP,#+224
   \   00000250   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000254   0010A0E1           MOV      R1,R0
   \   00000258   442084E2           ADD      R2,R4,#+68
   \   0000025C   C4008DE2           ADD      R0,SP,#+196
   \   00000260   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000264   C4108DE2           ADD      R1,SP,#+196
   \   00000268   A8008DE2           ADD      R0,SP,#+168
   \   0000026C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000270   1C2095E5           LDR      R2,[R5, #+28]
   \   00000274   8C108DE2           ADD      R1,SP,#+140
   \   00000278   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0A10A0E1           MOV      R1,R10
   \   00000284   8C008DE2           ADD      R0,SP,#+140
   \   00000288   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000028C   0920A0E1           MOV      R2,R9
   \   00000290   0A10A0E1           MOV      R1,R10
   \   00000294   A8008DE2           ADD      R0,SP,#+168
   \   00000298   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000029C   0920A0E1           MOV      R2,R9
   \   000002A0   0A10A0E1           MOV      R1,R10
   \   000002A4   C4008DE2           ADD      R0,SP,#+196
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0920A0E1           MOV      R2,R9
   \   000002B0   0A10A0E1           MOV      R1,R10
   \   000002B4   E0008DE2           ADD      R0,SP,#+224
   \   000002B8   96FFFFEA           B        ??LoadConfigFromFile_4
    151          				break;
    152          			case C_AI_END:      // If AI type not found can continue with this
    153          			case C_AL_END:
    154          			case C_PRO_END:
    155          			case C_PRO_END_COMMON:
    156          			case C_PRO_END_PRO:
    157          				break;
    158          			case C_PRO_START_PRO:
    159          				PRogramObject::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_5:
   \   000002BC   0510A0E1           MOV      R1,R5
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   000002C8   730000EA           B        ??LoadConfigFromFile_3
    160          				break;
    161          			case C_XREF_START:
    162          				LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_15:
   \   000002CC   A42094E5           LDR      R2,[R4, #+164]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   102092E5           LDR      R2,[R2, #+16]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   0FE0A0E1           MOV      LR,PC
   \   000002E0   12FF2FE1           BX       R2
   \   000002E4   6C0000EA           B        ??LoadConfigFromFile_3
    163          				break;
    164          			case AL_LIM_HIGHHIGHLINE_PRESS:
    165          				HiHiPressLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_10:
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0D10A0E1           MOV      R1,SP
   \   000002F0   0500A0E1           MOV      R0,R5
   \   000002F4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002F8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002FC   840184E5           STR      R0,[R4, #+388]
    166          				NoError = !ErrorLine;
   \   00000300   00009DE5           LDR      R0,[SP, #+0]
   \   00000304   000050E3           CMP      R0,#+0
    167          				if (PROProjectInfo::PressLim_mBar ) {
   \   00000308   ........           LDR      R0,??DataTable34  ;; ??PressLim_mBar
   \   0000030C   0160A003           MOVEQ    R6,#+1
   \   00000310   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000314   0060A013           MOVNE    R6,#+0
   \   00000318   000050E3           CMP      R0,#+0
   \   0000031C   5E00000A           BEQ      ??LoadConfigFromFile_3
    168          					HiHiPressLimit /= MH2O_TO_MBAR;
   \   00000320   840194E5           LDR      R0,[R4, #+388]
   \   00000324   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000328   ........           LDR      R2,??DataTable35  ;; 0xffffffff89374bc7
   \   0000032C   ........           LDR      R3,??DataTable36  ;; 0x40588441
   \   00000330   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000334   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000338   840184E5           STR      R0,[R4, #+388]
   \   0000033C   560000EA           B        ??LoadConfigFromFile_3
    169          				}
    170          				break;
    171          			case AL_LIM_HIGHLINE_PRESS:
    172          				HighPressLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_11:
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   0D10A0E1           MOV      R1,SP
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000350   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000354   880184E5           STR      R0,[R4, #+392]
    173          				NoError = !ErrorLine;
   \   00000358   00009DE5           LDR      R0,[SP, #+0]
   \   0000035C   000050E3           CMP      R0,#+0
    174          				if (PROProjectInfo::PressLim_mBar ) {
   \   00000360   ........           LDR      R0,??DataTable34  ;; ??PressLim_mBar
   \   00000364   0160A003           MOVEQ    R6,#+1
   \   00000368   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000036C   0060A013           MOVNE    R6,#+0
   \   00000370   000050E3           CMP      R0,#+0
   \   00000374   4800000A           BEQ      ??LoadConfigFromFile_3
    175          					HighPressLimit /= MH2O_TO_MBAR;
   \   00000378   880194E5           LDR      R0,[R4, #+392]
   \   0000037C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000380   ........           LDR      R2,??DataTable35  ;; 0xffffffff89374bc7
   \   00000384   ........           LDR      R3,??DataTable36  ;; 0x40588441
   \   00000388   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000038C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000390   880184E5           STR      R0,[R4, #+392]
   \   00000394   400000EA           B        ??LoadConfigFromFile_3
    176          				}
    177          				break;
    178          			case AL_LIM_LOWLINE_PRESS:
    179          				LowPressLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_12:
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0D10A0E1           MOV      R1,SP
   \   000003A0   0500A0E1           MOV      R0,R5
   \   000003A4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000003A8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003AC   8C0184E5           STR      R0,[R4, #+396]
    180          				NoError = !ErrorLine;
   \   000003B0   00009DE5           LDR      R0,[SP, #+0]
   \   000003B4   000050E3           CMP      R0,#+0
    181          				if (PROProjectInfo::PressLim_mBar ) {
   \   000003B8   ........           LDR      R0,??DataTable34  ;; ??PressLim_mBar
   \   000003BC   0160A003           MOVEQ    R6,#+1
   \   000003C0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000003C4   0060A013           MOVNE    R6,#+0
   \   000003C8   000050E3           CMP      R0,#+0
   \   000003CC   3200000A           BEQ      ??LoadConfigFromFile_3
    182          					LowPressLimit  /= MH2O_TO_MBAR;
   \   000003D0   8C0194E5           LDR      R0,[R4, #+396]
   \   000003D4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003D8   ........           LDR      R2,??DataTable35  ;; 0xffffffff89374bc7
   \   000003DC   ........           LDR      R3,??DataTable36  ;; 0x40588441
   \   000003E0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000003E4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003E8   8C0184E5           STR      R0,[R4, #+396]
   \   000003EC   2A0000EA           B        ??LoadConfigFromFile_3
    183          				}
    184          				break;
    185          			case AL_LOCK_HIGHLINE_PRESS:
    186          				HighLinePressLocked = true;
   \                     ??LoadConfigFromFile_13:
   \   000003F0   90A1C4E5           STRB     R10,[R4, #+400]
   \   000003F4   280000EA           B        ??LoadConfigFromFile_3
    187          				break;
    188          			case AL_LOCK_LOWLINE_PRESS :
    189          				LowLinePressLocked = true;
   \                     ??LoadConfigFromFile_14:
   \   000003F8   91A1C4E5           STRB     R10,[R4, #+401]
   \   000003FC   260000EA           B        ??LoadConfigFromFile_3
    190          				break;
    191          			case C_PRO_TANK:
    192          				{
    193          					// Line pressure must always be configured after the tanks
    194          					// If not, a late binding routine must be created and run after the
    195          					// complete configuration file is read
    196          					PROIDNumber = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigFromFile_6:
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0D10A0E1           MOV      R1,SP
   \   00000408   0500A0E1           MOV      R0,R5
   \   0000040C   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000410   580184E5           STR      R0,[R4, #+344]
    197          					PROPtr = (PROXRefObject*)FindPROFromIDNumber(PROIDNumber);
   \   00000414   0910A0E1           MOV      R1,R9
   \   00000418   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   0000041C   600184E5           STR      R0,[R4, #+352]
    198          					NoError = !ErrorLine;
   \   00000420   00009DE5           LDR      R0,[SP, #+0]
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   0060A013           MOVNE    R6,#+0
   \   0000042C   0160A003           MOVEQ    R6,#+1
   \   00000430   190000EA           B        ??LoadConfigFromFile_3
    199          				}
    200                          break;
    201                      case C_AI_1728:
    202                          {
    203                              AIPressSensor_mV *AnalogInPtr = new AIPressSensor_mV(Key);
   \                     ??LoadConfigFromFile_9:
   \   00000434   0010A0E3           MOV      R1,#+0
   \   00000438   ........           _BLF     `??new AIPressSensor_mV`,`??new AIPressSensor_mV??rA`
   \   0000043C   030000EA           B        ??LoadConfigFromFile_16
    204                              AnalogInPtr->LoadConfigString(ConfigString);
    205                              LinePressSensor = AnalogInPtr;
    206                              LinePressSensor->Location = C_AI_LOC_LINE;
    207                              LinePressSensor->SetIsPressureSns();
    208                              AnalogInList.push_back((AnalogInput*)AnalogInPtr);
    209                              LinePressures.push_back((AIPressSensor*)AnalogInPtr);
    210                          }
    211          				break;
    212                      case C_AI_ATM_N_Ex:
    213                      case C_AI_ATM_Ex:
    214                      case C_AI_ATM_Ex_H:
    215                      case C_AI_ATM_N_Ex_0_1:
    216          			case C_AI_APT500	  :
    217          			case C_AI_SPT900	  :
    218                      case C_AI_Gen_4_20mA:
    219                          {
    220                              AIPressSensor_mA *AnalogInPtr = new AIPressSensor_mA(Key);
   \                     ??LoadConfigFromFile_7:
   \   00000440   0010A0E3           MOV      R1,#+0
   \   00000444   ........           _BLF     `??new AIPressSensor_mA`,`??new AIPressSensor_mA??rA`
   \   00000448   000000EA           B        ??LoadConfigFromFile_16
    221                              AnalogInPtr->LoadConfigString(ConfigString);
    222                              LinePressSensor = AnalogInPtr;
    223                              LinePressSensor->Location = C_AI_LOC_LINE;
    224                              LinePressSensor->SetIsPressureSns();
    225                              AnalogInList.push_back((AnalogInput*)AnalogInPtr);
    226                              LinePressures.push_back((AIPressSensor*)AnalogInPtr);
    227                          }
    228                          break;
    229                      case C_AI_DIFF_PRESSURE_mA:
    230                          {
    231                              AIDiffPressSensor_mA *AnalogInPtr = new AIDiffPressSensor_mA(Key);
   \                     ??LoadConfigFromFile_8:
   \   0000044C   ........           _BLF     `??new AIDiffPressSensor_mA`,`??new AIDiffPressSensor_mA??rA`
   \                     ??LoadConfigFromFile_16:
   \   00000450   00B0A0E1           MOV      R11,R0
    232                              AnalogInPtr->LoadConfigString(ConfigString);
   \   00000454   A4209BE5           LDR      R2,[R11, #+164]
   \   00000458   0510A0E1           MOV      R1,R5
   \   0000045C   102092E5           LDR      R2,[R2, #+16]
   \   00000460   0FE0A0E1           MOV      LR,PC
   \   00000464   12FF2FE1           BX       R2
    233                              LinePressSensor = AnalogInPtr;
   \   00000468   64B184E5           STR      R11,[R4, #+356]
    234                              LinePressSensor->Location = C_AI_LOC_LINE;
   \   0000046C   EB10A0E3           MOV      R1,#+235
   \   00000470   801E81E3           ORR      R1,R1,#0x800
   \   00000474   28118BE5           STR      R1,[R11, #+296]
    235                              LinePressSensor->SetIsPressureSns();
   \   00000478   640194E5           LDR      R0,[R4, #+356]
   \   0000047C   0110A0E3           MOV      R1,#+1
   \   00000480   ........           _BLF     ??SetIsPressureSns,??SetIsPressureSns??rA
    236                              AnalogInList.push_back((AnalogInput*)AnalogInPtr);
   \   00000484   0B10A0E1           MOV      R1,R11
   \   00000488   4B0F84E2           ADD      R0,R4,#+300
   \   0000048C   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_1
    237                              LinePressures.push_back((AIPressSensor*)AnalogInPtr);
   \   00000490   0B10A0E1           MOV      R1,R11
   \   00000494   040087E0           ADD      R0,R7,R4
   \   00000498   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_2
    238          				}
    239                          break;
    240          
    241                      }
    242                  }
    243              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??LoadConfigFromFile_3:
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0A10A0E1           MOV      R1,R10
   \   000004A4   20008DE2           ADD      R0,SP,#+32
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004AC   000056E3           CMP      R6,#+0
   \   000004B0   00009D15           LDRNE    R0,[SP, #+0]
   \   000004B4   01007013           CMNNE    R0,#+1
   \   000004B8   FA0F5813           CMPNE    R8,#+1000
   \   000004BC   F3FEFF1A           BNE      ??LoadConfigFromFile_1
    244          
    245              HighPressurePtr->Limit = HighPressLimit;
   \   000004C0   7C0194E5           LDR      R0,[R4, #+380]
   \   000004C4   881194E5           LDR      R1,[R4, #+392]
    246              LowPressurePtr->Limit  = LowPressLimit ;
    247              for ( unsigned i=0; i < LinePressures.size(); i++ ) {
   \   000004C8   0050A0E3           MOV      R5,#+0
   \   000004CC   E41080E5           STR      R1,[R0, #+228]
   \   000004D0   800194E5           LDR      R0,[R4, #+384]
   \   000004D4   8C1194E5           LDR      R1,[R4, #+396]
   \   000004D8   E41080E5           STR      R1,[R0, #+228]
   \   000004DC   0B0000EA           B        ??LoadConfigFromFile_17
    248                  AIPressSensor *tmpPtr = LinePressures[i];
    249                  for ( unsigned j=0; j < LinePressures.size(); j++ ) {
    250                      tmpPtr->SetRefSnsPtr(LinePressures[j]);
   \                     ??LoadConfigFromFile_18:
   \   000004E0   040097E7           LDR      R0,[R7, +R4]
   \   000004E4   081190E7           LDR      R1,[R0, +R8, LSL #+2]
   \   000004E8   0600A0E1           MOV      R0,R6
   \   000004EC   ........           _BLF     ??SetRefSnsPtr,??SetRefSnsPtr??rA
    251                  }
   \   000004F0   018088E2           ADD      R8,R8,#+1
   \                     ??LoadConfigFromFile_19:
   \   000004F4   040087E0           ADD      R0,R7,R4
   \   000004F8   041090E5           LDR      R1,[R0, #+4]
   \   000004FC   000090E5           LDR      R0,[R0, #+0]
   \   00000500   000041E0           SUB      R0,R1,R0
   \   00000504   200158E1           CMP      R8,R0, LSR #+2
   \   00000508   F4FFFF3A           BCC      ??LoadConfigFromFile_18
   \   0000050C   015085E2           ADD      R5,R5,#+1
   \                     ??LoadConfigFromFile_17:
   \   00000510   040087E0           ADD      R0,R7,R4
   \   00000514   041090E5           LDR      R1,[R0, #+4]
   \   00000518   000090E5           LDR      R0,[R0, #+0]
   \   0000051C   000041E0           SUB      R0,R1,R0
   \   00000520   200155E1           CMP      R5,R0, LSR #+2
   \   00000524   04009737           LDRCC    R0,[R7, +R4]
   \   00000528   0080A033           MOVCC    R8,#+0
   \   0000052C   05619037           LDRCC    R6,[R0, +R5, LSL #+2]
   \   00000530   EFFFFF3A           BCC      ??LoadConfigFromFile_19
    252          	}
    253              CopyAnalogList();
   \   00000534   0400A0E1           MOV      R0,R4
   \   00000538   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    254              AddSensorAlarms();
   \   0000053C   0400A0E1           MOV      R0,R4
   \   00000540   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    255              SetChildUserRights();
   \   00000544   0400A0E1           MOV      R0,R4
   \   00000548   ........           _BLF     ??SetChildUserRights,??SetChildUserRights??rA
    256              return ErrorLine;
   \   0000054C   00009DE5           LDR      R0,[SP, #+0]
   \   00000550   FCD08DE2           ADD      SP,SP,#+252
   \   00000554                      REQUIRE ?Subroutine28
   \   00000554                      ;; // Fall through to label ?Subroutine28
    257          }
    258          //---------------------------------------------------------------------------
    259          ///////////////////////////////////////////////////////////////
    260          //
    261          // Routines for Saving of Settings
    262          //
    263          ///////////////////////////////////////////////////////////////
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          void PROLinePressure::SaveSettings(TSNConfigString *SettingsString)
    266          {
   \                     ??SaveSettings:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   4DDF4DE2           SUB      SP,SP,#+308
   \   00000008   0050A0E1           MOV      R5,R0
    267              if ( IsModified || WriteAll ) {
   \   0000000C   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   44029F05           LDREQ    R0,??SaveSettings_2  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   8B00000A           BEQ      ??SaveSettings_3
    268                  IsModified = false;
    269                  AnsiString LocalString;
    270                  AnsiString IdNumStr;
    271                  IdNumStr.cat_sprintf("0x%0x",IDNumber);
    272                  LocalString +=KeyWord(Type)+IdNumStr+CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable37  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C5E5           STRB     R0,[R5, #+0]
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   FC008DE2           ADD      R0,SP,#+252
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3095E5           LDR      R3,[R5, #+156]
   \   00000048   ........           LDR      R2,??DataTable38  ;; `?<Constant "0x%0x">`
   \   0000004C   461F8DE2           ADD      R1,SP,#+280
   \   00000050   FC008DE2           ADD      R0,SP,#+252
   \   00000054   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   460F8DE2           ADD      R0,SP,#+280
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   A01095E5           LDR      R1,[R5, #+160]
   \   0000006C   8C008DE2           ADD      R0,SP,#+140
   \   00000070   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000074   FC208DE2           ADD      R2,SP,#+252
   \   00000078   8C108DE2           ADD      R1,SP,#+140
   \   0000007C   70008DE2           ADD      R0,SP,#+112
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   70108DE2           ADD      R1,SP,#+112
   \   0000008C   54008DE2           ADD      R0,SP,#+84
   \   00000090   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000094   ........           LDR      R0,??DataTable41  ;; ??npos
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   007090E5           LDR      R7,[R0, #+0]
   \   000000A0   54108DE2           ADD      R1,SP,#+84
   \   000000A4   0730A0E1           MOV      R3,R7
   \   000000A8   1C008DE2           ADD      R0,SP,#+28
   \   000000AC   ........           _BLF     ??append,??append??rA
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   54008DE2           ADD      R0,SP,#+84
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   70008DE2           ADD      R0,SP,#+112
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   8C008DE2           ADD      R0,SP,#+140
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    273                  set<AlarmBasic*>::iterator pBIt;
    274                  for ( pBIt=AlarmSet.begin(); pBIt!=AlarmSet.end(); pBIt++ ) {
   \   000000E0   E48095E5           LDR      R8,[R5, #+228]
   \   000000E4   1A0000EA           B        ??SaveSettings_4
    275                      AlarmBasic *element =*pBIt;
   \                     ??SaveSettings_5:
   \   000000E8   100098E5           LDR      R0,[R8, #+16]
    276                      if ( element && !element->Locked ) LocalString +=(AnsiString) element->SaveSettings();
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   1400000A           BEQ      ??SaveSettings_6
   \   000000F4   E810D0E5           LDRB     R1,[R0, #+232]
   \   000000F8   000051E3           CMP      R1,#+0
   \   000000FC   1100001A           BNE      ??SaveSettings_6
   \   00000100   0D10A0E1           MOV      R1,SP
   \   00000104   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   38008DE2           ADD      R0,SP,#+56
   \   00000110   ........           _BLF     ??string,??string??rA
   \   00000114   0730A0E1           MOV      R3,R7
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   38108DE2           ADD      R1,SP,#+56
   \   00000120   1C008DE2           ADD      R0,SP,#+28
   \   00000124   ........           _BLF     ??append,??append??rA
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   38008DE2           ADD      R0,SP,#+56
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   0D00A0E1           MOV      R0,SP
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
    277          		}
   \                     ??SaveSettings_6:
   \   00000148   0800A0E1           MOV      R0,R8
   \   0000014C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000150   0080A0E1           MOV      R8,R0
   \                     ??SaveSettings_4:
   \   00000154   E40085E2           ADD      R0,R5,#+228
   \   00000158   000058E1           CMP      R8,R0
   \   0000015C   E1FFFF1A           BNE      ??SaveSettings_5
    278                  if ( LinePressSensor ) {
   \   00000160   643195E5           LDR      R3,[R5, #+356]
   \   00000164   000053E3           CMP      R3,#+0
   \   00000168   0F00000A           BEQ      ??SaveSettings_7
    279                      LocalString += LinePressSensor->SaveAISettings();
   \   0000016C   0300A0E1           MOV      R0,R3
   \   00000170   A43093E5           LDR      R3,[R3, #+164]
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   6C3093E5           LDR      R3,[R3, #+108]
   \   0000017C   0D10A0E1           MOV      R1,SP
   \   00000180   0FE0A0E1           MOV      LR,PC
   \   00000184   13FF2FE1           BX       R3
   \   00000188   0730A0E1           MOV      R3,R7
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0D10A0E1           MOV      R1,SP
   \   00000194   1C008DE2           ADD      R0,SP,#+28
   \   00000198   ........           _BLF     ??append,??append??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   0D00A0E1           MOV      R0,SP
   \   000001A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    280                  }
    281                  LocalString +=KeyWord(C_PRO_END)+CrLfStr;
   \                     ??SaveSettings_7:
   \   000001AC   FA1FA0E3           MOV      R1,#+1000
   \   000001B0   C4008DE2           ADD      R0,SP,#+196
   \   000001B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001B8   0620A0E1           MOV      R2,R6
   \   000001BC   C4108DE2           ADD      R1,SP,#+196
   \   000001C0   A8008DE2           ADD      R0,SP,#+168
   \   000001C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C8   0730A0E1           MOV      R3,R7
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   A8108DE2           ADD      R1,SP,#+168
   \   000001D4   1C008DE2           ADD      R0,SP,#+28
   \   000001D8   ........           _BLF     ??append,??append??rA
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   A8008DE2           ADD      R0,SP,#+168
   \   000001E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   C4008DE2           ADD      R0,SP,#+196
   \   000001F8   ........           _BLF     ??_Tidy,??_Tidy??rA
    282                  LocalString += CrLfStr;
   \   000001FC   0730A0E1           MOV      R3,R7
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0610A0E1           MOV      R1,R6
   \   00000208   1C008DE2           ADD      R0,SP,#+28
   \   0000020C   ........           _BLF     ??append,??append??rA
    283                  SettingsString->AddString(LocalString);
   \   00000210   1C108DE2           ADD      R1,SP,#+28
   \   00000214   E0008DE2           ADD      R0,SP,#+224
   \   00000218   ........           _BLF     ??string,??string??rA
   \   0000021C   E0108DE2           ADD      R1,SP,#+224
   \   00000220   0400A0E1           MOV      R0,R4
   \   00000224   ........           _BLF     ??AddString,??AddString??rA
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   E0008DE2           ADD      R0,SP,#+224
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
    284              }
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   FC008DE2           ADD      R0,SP,#+252
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   1C008DE2           ADD      R0,SP,#+28
   \   00000254   ........           _BLF     ??_Tidy,??_Tidy??rA
    285          }
   \                     ??SaveSettings_3:
   \   00000258   4DDF8DE2           ADD      SP,SP,#+308
   \   0000025C   F041BDE8           POP      {R4-R8,LR}
   \   00000260   1EFF2FE1           BX       LR               ;; return
   \                     ??SaveSettings_2:
   \   00000264   ........           DC32     ??WriteAll
    286          

   \                                 In segment CODE, align 4, keep-with-next
    287          bool PROLinePressure::RestoreSettings(TSNConfigString *SettingsString)
    288          {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    289              bool NoError = true;
    290              int ErrorLine=0;
   \   00000004   9C939FE5           LDR      R9,??RestoreSettings_1  ;; NewLineStr
   \   00000008   9CA39FE5           LDR      R10,??RestoreSettings_1+0x4  ;; `?<Constant "Tank pressure ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    291              int Key;
    292              do {
    293          		AnsiString InputKeyWord= SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    294                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_3
    295                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   C900000A           BEQ      ??RestoreSettings_4
    296                          RestoreSettingsWarning((AnsiString)"Tank pressure "+Name+":\nUnknown error started at line:"+(AnsiString)ErrorLine+NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   10208AE2           ADD      R2,R10,#+16
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_5:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   910000EA           B        ??RestoreSettings_4
    297                      }
    298                  } else {
    299                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    300                      switch ( Key ) {
   \   00000158   FA0F56E3           CMP      R6,#+1000
   \   0000015C   EA10A013           MOVNE    R1,#+234
   \   00000160   C01F8113           ORRNE    R1,R1,#0x300
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   FB0F5613           CMPNE    R6,#+1004
   \   0000016C   8100000A           BEQ      ??RestoreSettings_4
   \   00000170   3E10A0E3           MOV      R1,#+62
   \   00000174   801E81E3           ORR      R1,R1,#0x800
   \   00000178   010056E1           CMP      R6,R1
   \   0000017C   01108113           ORRNE    R1,R1,#0x1
   \   00000180   01005611           CMPNE    R6,R1
   \   00000184   09108112           ADDNE    R1,R1,#+9
   \   00000188   01005611           CMPNE    R6,R1
   \   0000018C   01108113           ORRNE    R1,R1,#0x1
   \   00000190   01005611           CMPNE    R6,R1
   \   00000194   01108112           ADDNE    R1,R1,#+1
   \   00000198   01005611           CMPNE    R6,R1
   \   0000019C   01108113           ORRNE    R1,R1,#0x1
   \   000001A0   01005611           CMPNE    R6,R1
   \   000001A4   01108112           ADDNE    R1,R1,#+1
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   01108113           ORRNE    R1,R1,#0x1
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   05108112           ADDNE    R1,R1,#+5
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108113           ORRNE    R1,R1,#0x1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108112           ADDNE    R1,R1,#+1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   5D00000A           BEQ      ??RestoreSettings_6
   \   000001D0   441081E2           ADD      R1,R1,#+68
   \   000001D4   010056E1           CMP      R6,R1
   \   000001D8   B910A013           MOVNE    R1,#+185
   \   000001DC   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   6300000A           BEQ      ??RestoreSettings_4
   \   000001E8   221081E2           ADD      R1,R1,#+34
   \   000001EC   010056E1           CMP      R6,R1
   \   000001F0   5200000A           BEQ      ??RestoreSettings_7
   \   000001F4   011081E2           ADD      R1,R1,#+1
   \   000001F8   010056E1           CMP      R6,R1
   \   000001FC   4600000A           BEQ      ??RestoreSettings_8
    301                      default:
    302                          RestoreSettingsWarning((AnsiString)"Tank pressure "+Name+":\nThe keyword " + InputKeyWord +" is not allowed here!! Line:"+(AnsiString)SettingsString->LineCount+NewLineStr);
   \   00000200   1C1095E5           LDR      R1,[R5, #+28]
   \   00000204   710F8DE2           ADD      R0,SP,#+452
   \   00000208   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000020C   00B0A0E1           MOV      R11,R0
   \   00000210   0A10A0E1           MOV      R1,R10
   \   00000214   6A0F8DE2           ADD      R0,SP,#+424
   \   00000218   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000021C   0010A0E1           MOV      R1,R0
   \   00000220   442084E2           ADD      R2,R4,#+68
   \   00000224   630F8DE2           ADD      R0,SP,#+396
   \   00000228   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000022C   34208AE2           ADD      R2,R10,#+52
   \   00000230   631F8DE2           ADD      R1,SP,#+396
   \   00000234   5C0F8DE2           ADD      R0,SP,#+368
   \   00000238   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000023C   74208DE2           ADD      R2,SP,#+116
   \   00000240   5C1F8DE2           ADD      R1,SP,#+368
   \   00000244   550F8DE2           ADD      R0,SP,#+340
   \   00000248   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000024C   44208AE2           ADD      R2,R10,#+68
   \   00000250   551F8DE2           ADD      R1,SP,#+340
   \   00000254   4E0F8DE2           ADD      R0,SP,#+312
   \   00000258   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000025C   0B20A0E1           MOV      R2,R11
   \   00000260   4E1F8DE2           ADD      R1,SP,#+312
   \   00000264   470F8DE2           ADD      R0,SP,#+284
   \   00000268   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000026C   0920A0E1           MOV      R2,R9
   \   00000270   471F8DE2           ADD      R1,SP,#+284
   \   00000274   400F8DE2           ADD      R0,SP,#+256
   \   00000278   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000027C   401F8DE2           ADD      R1,SP,#+256
   \   00000280   E4008DE2           ADD      R0,SP,#+228
   \   00000284   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000288   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   E4008DE2           ADD      R0,SP,#+228
   \   00000298   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   400F8DE2           ADD      R0,SP,#+256
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   0110A0E3           MOV      R1,#+1
   \   000002B4   470F8DE2           ADD      R0,SP,#+284
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   710F8DE2           ADD      R0,SP,#+452
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   4E0F8DE2           ADD      R0,SP,#+312
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   550F8DE2           ADD      R0,SP,#+340
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   5C0F8DE2           ADD      R0,SP,#+368
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   630F8DE2           ADD      R0,SP,#+396
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   6A0F8DE2           ADD      R0,SP,#+424
   \   00000318   82FFFFEA           B        ??RestoreSettings_5
    303                          break;
    304                      case C_AI_END:      // If AI type not found can continue with this
    305                      case C_AL_END:
    306                      case C_PRO_END:
    307                      case C_PRO_END_COMMON:
    308                      case C_PRO_END_PRO:
    309                          break;
    310                      case ID_AL_HIGH_LINE_PRESS:
    311                          NoError = HighPressurePtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_8:
   \   0000031C   7C2194E5           LDR      R2,[R4, #+380]
   \                     ??RestoreSettings_9:
   \   00000320   0510A0E1           MOV      R1,R5
   \   00000324   0200A0E1           MOV      R0,R2
   \   00000328   A42092E5           LDR      R2,[R2, #+164]
   \   0000032C   142092E5           LDR      R2,[R2, #+20]
   \   00000330   0FE0A0E1           MOV      LR,PC
   \   00000334   12FF2FE1           BX       R2
   \   00000338   0070A0E1           MOV      R7,R0
   \   0000033C   0D0000EA           B        ??RestoreSettings_4
    312                          break;
    313                      case ID_AL_LOW_LINE_PRESS:
    314                          NoError = LowPressurePtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_7:
   \   00000340   802194E5           LDR      R2,[R4, #+384]
   \   00000344   F5FFFFEA           B        ??RestoreSettings_9
    315                          break;
    316                      case C_AI_1728:
    317                      case C_AI_P906_0110:
    318                      case C_AI_P906_0111:
    319                      case C_AI_ATM_N_Ex:
    320                      case C_AI_ATM_Ex:
    321                      case C_AI_ATM_Ex_H:
    322                      case C_AI_ATM_N_Ex_0_1:
    323          			case C_AI_APT500		  :
    324          			case C_AI_SPT900		  :
    325                      case C_AI_Gen_4_20mA	  :
    326                      case C_AI_DIFF_PRESSURE_mA:
    327                          {
    328                              int AIIDNumber = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_6:
   \   00000348   0020A0E3           MOV      R2,#+0
   \   0000034C   0D10A0E1           MOV      R1,SP
   \   00000350   0500A0E1           MOV      R0,R5
   \   00000354   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    329                              AnalogInput *AnalogInPtr = (AnalogInput*)FindObject(AIIDNumber);
   \   00000358   ........           _BLF     ??FindObject,??FindObject??rA
   \   0000035C   0020B0E1           MOVS     R2,R0
    330                              if ( AnalogInPtr ) AnalogInPtr->RestoreAISettings(SettingsString);
   \   00000360   0500000A           BEQ      ??RestoreSettings_10
   \   00000364   A42092E5           LDR      R2,[R2, #+164]
   \   00000368   0510A0E1           MOV      R1,R5
   \   0000036C   702092E5           LDR      R2,[R2, #+112]
   \   00000370   0FE0A0E1           MOV      LR,PC
   \   00000374   12FF2FE1           BX       R2
    331                          }
    332                          break;
    333                      }
    334                  }
    335              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_PRO_END ) );
   \                     ??RestoreSettings_4:
   \   00000378   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_10:
   \   0000037C   0110A0E3           MOV      R1,#+1
   \   00000380   74008DE2           ADD      R0,SP,#+116
   \   00000384   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000388   000057E3           CMP      R7,#+0
   \   0000038C   00009D15           LDRNE    R0,[SP, #+0]
   \   00000390   08005011           CMPNE    R0,R8
   \   00000394   FA0F5613           CMPNE    R6,#+1000
   \   00000398   22FFFF1A           BNE      ??RestoreSettings_2
    336              return(NoError);
   \   0000039C   0700A0E1           MOV      R0,R7
   \   000003A0   78DF8DE2           ADD      SP,SP,#+480
   \   000003A4   ........           B        ?Subroutine28
   \                     ??RestoreSettings_1:
   \   000003A8   ........           DC32     NewLineStr
   \   000003AC   ........           DC32     `?<Constant "Tank pressure ">`
    337          }
    338          

   \                                 In segment CODE, align 4, keep-with-next
    339          AnsiString PROLinePressure::ZeroSetLinePressureSensor(bool Local)
    340          {
   \                     ??ZeroSetLinePressureSensor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   70D04DE2           SUB      SP,SP,#+112
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    341              AnsiString TmpString;
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??AnsiString,??AnsiString??rA
    342              if ( LinePressSensor ) {
   \   0000001C   640194E5           LDR      R0,[R4, #+356]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2800000A           BEQ      ??ZeroSetLinePressureSensor_1
    343                  int ErrorStatus = LinePressSensor->AdjustSensorF(0.0,Local);
   \   00000028   0620A0E1           MOV      R2,R6
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   00000034   0010B0E1           MOVS     R1,R0
    344                  if ( ErrorStatus != E_NO_ERR ) {
   \   00000038   2300000A           BEQ      ??ZeroSetLinePressureSensor_1
    345                      TmpString += Name + ": "+GetErrorMsg(ErrorStatus)+ '\n';
   \   0000003C   54008DE2           ADD      R0,SP,#+84
   \   00000040   ........           _BLF     ??GetErrorMsg,??GetErrorMsg??rA
   \   00000044   222F8FE2           ADR      R2,??ZeroSetLinePressureSensor_2  ;; ": "
   \   00000048   441084E2           ADD      R1,R4,#+68
   \   0000004C   38008DE2           ADD      R0,SP,#+56
   \   00000050   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000054   54208DE2           ADD      R2,SP,#+84
   \   00000058   38108DE2           ADD      R1,SP,#+56
   \   0000005C   1C008DE2           ADD      R0,SP,#+28
   \   00000060   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000064   0A20A0E3           MOV      R2,#+10
   \   00000068   1C108DE2           ADD      R1,SP,#+28
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000074   ........           LDR      R0,??DataTable41  ;; ??npos
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   003090E5           LDR      R3,[R0, #+0]
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     ??append,??append??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   1C008DE2           ADD      R0,SP,#+28
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   54008DE2           ADD      R0,SP,#+84
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   38008DE2           ADD      R0,SP,#+56
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    346                  }
    347              }
    348              return(TmpString);
   \                     ??ZeroSetLinePressureSensor_1:
   \   000000CC   70D08DE2           ADD      SP,SP,#+112
   \   000000D0   ........           B        ??Subroutine27_0
   \                     ??ZeroSetLinePressureSensor_2:
   \   000000D4   3A200000           DC8      ": ",+0
    349          }
    350          
    351          ///////////////////////////////////////////////////////////////
    352          //
    353          // Routines for the librarian
    354          //
    355          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    356          int PROLinePressure::FindPROStatus(AnsiString &MyString)
    357          {
   \                     ??FindPROStatus:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
    358              int PROStatus1 = ST_OK;
    359              int PROStatus2 = ST_OK;
    360              if ( HWFailure ) {
   \   0000000C   3C00D5E5           LDRB     R0,[R5, #+60]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   3DA0A0E3           MOV      R10,#+61
   \   00000018   F0AE8AE3           ORR      R10,R10,#0xF00
   \   0000001C   0A40A0E1           MOV      R4,R10
   \   00000020   047084E2           ADD      R7,R4,#+4
   \   00000024   000050E3           CMP      R0,#+0
    361                  PROStatus1 = ST_ERROR;
   \   00000028   0740A011           MOVNE    R4,R7
   \   0000002C   2900001A           BNE      ??FindPROStatus_1
    362              }
    363              if ( PROStatus1 != ST_ERROR ) {
    364                  for ( unsigned i=0; i<AnalogInList.size() && (PROStatus1 != ST_ERROR); i++ ) {
   \   00000030   0090A0E3           MOV      R9,#+0
   \   00000034   4B8FA0E3           MOV      R8,#+300
   \   00000038   0B0000EA           B        ??FindPROStatus_2
    365                      PROStatus2 = AnalogInList[i]->FindPROStatus(MyString);
   \                     ??FindPROStatus_3:
   \   0000003C   050098E7           LDR      R0,[R8, +R5]
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   092190E7           LDR      R2,[R0, +R9, LSL #+2]
    366                      if ( PROStatus2>PROStatus1 ) PROStatus1 = PROStatus2;
    367                  }
   \   00000048   019089E2           ADD      R9,R9,#+1
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   A42092E5           LDR      R2,[R2, #+164]
   \   00000054   1C2092E5           LDR      R2,[R2, #+28]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   12FF2FE1           BX       R2
   \   00000060   00A0A0E1           MOV      R10,R0
   \   00000064   0A0054E1           CMP      R4,R10
   \   00000068   0A40A0B1           MOVLT    R4,R10
   \                     ??FindPROStatus_2:
   \   0000006C   050088E0           ADD      R0,R8,R5
   \   00000070   041090E5           LDR      R1,[R0, #+4]
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000041E0           SUB      R0,R1,R0
   \   0000007C   200159E1           CMP      R9,R0, LSR #+2
   \   00000080   0100002A           BCS      ??FindPROStatus_4
   \   00000084   070054E1           CMP      R4,R7
   \   00000088   EBFFFF1A           BNE      ??FindPROStatus_3
    368              }
    369              if ( PROStatus1 != ST_ERROR ) {
   \                     ??FindPROStatus_4:
   \   0000008C   070054E1           CMP      R4,R7
   \   00000090   1000000A           BEQ      ??FindPROStatus_1
    370                  bool AlActive = false;
    371                  set<AlarmBasic*>::iterator pBIt;
    372                  for ( pBIt=AlarmSet.begin(); !AlActive && pBIt!=AlarmSet.end(); pBIt++ ) {
   \   00000094   E40095E5           LDR      R0,[R5, #+228]
   \   00000098   0070A0E3           MOV      R7,#+0
   \                     ??FindPROStatus_5:
   \   0000009C   E41085E2           ADD      R1,R5,#+228
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   0700000A           BEQ      ??FindPROStatus_6
    373                      AlarmBasic *Element =*pBIt;
   \   000000A8   101090E5           LDR      R1,[R0, #+16]
    374                      if ( Element && (Element->State != AlarmBasic::AlIdle) )
   \   000000AC   000051E3           CMP      R1,#+0
   \   000000B0   E010D115           LDRBNE   R1,[R1, #+224]
   \   000000B4   00005113           CMPNE    R1,#+0
    375                          AlActive = true;
   \   000000B8   0170A013           MOVNE    R7,#+1
    376                  }
   \   000000BC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   F4FFFF0A           BEQ      ??FindPROStatus_5
    377                  if ( AlActive ) PROStatus2 = ST_ALARM;
   \                     ??FindPROStatus_6:
   \   000000C8   000057E3           CMP      R7,#+0
   \   000000CC   F4AEA013           MOVNE    R10,#+3904
    378                  if ( PROStatus2>PROStatus1 ) PROStatus1 = PROStatus2;
   \   000000D0   0A0054E1           CMP      R4,R10
   \   000000D4   0A40A0B1           MOVLT    R4,R10
    379              }
    380              MyString = FindStatusChar(PROStatus1);
   \                     ??FindPROStatus_1:
   \   000000D8   0420A0E1           MOV      R2,R4
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   000000E8   ........           LDR      R0,??DataTable41  ;; ??npos
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   003090E5           LDR      R3,[R0, #+0]
   \   000000F4   0D10A0E1           MOV      R1,SP
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   ........           _BLF     ??assign,??assign??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
    381              return(PROStatus1);
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   1CD08DE2           ADD      SP,SP,#+28
   \   00000118   F047BDE8           POP      {R4-R10,LR}
   \   0000011C   1EFF2FE1           BX       LR               ;; return
    382          }
    383          

   \                                 In segment CODE, align 4, keep-with-next
    384          int PROLinePressure::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit)
    385          {
   \                     ??GetValue:
   \   00000000   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
    386              int Status = GETVAL_NO_ERR;
    387              switch ( ValueId ) {
   \   00000004   00E09DE5           LDR      LR,[SP, #+0]
   \   00000008   2C209DE5           LDR      R2,[SP, #+44]
   \   0000000C   30A09DE5           LDR      R10,[SP, #+48]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   786195E5           LDR      R6,[R5, #+376]
   \   00000018   7C7195E5           LDR      R7,[R5, #+380]
   \   0000001C   808195E5           LDR      R8,[R5, #+384]
   \   00000020   649195E5           LDR      R9,[R5, #+356]
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   3E10A0E3           MOV      R1,#+62
   \   0000002C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000030   0CC0C1E3           BIC      R12,R1,#0xC
   \   00000034   0B4041E2           SUB      R4,R1,#+11
   \   00000038   400E5EE3           CMP      LR,#+1024
   \   0000003C   01B0A013           MOVNE    R11,#+1
   \   00000040   40BE8B13           ORRNE    R11,R11,#0x400
   \   00000044   0B005E11           CMPNE    LR,R11
   \   00000048   2400000A           BEQ      ??GetValue_2
   \   0000004C   74B08BE3           ORR      R11,R11,#0x74
   \   00000050   0B005EE1           CMP      LR,R11
   \   00000054   8A00000A           BEQ      ??GetValue_3
   \   00000058   01B08BE2           ADD      R11,R11,#+1
   \   0000005C   0B005EE1           CMP      LR,R11
   \   00000060   9300000A           BEQ      ??GetValue_4
   \   00000064   01B08BE3           ORR      R11,R11,#0x1
   \   00000068   0B005EE1           CMP      LR,R11
   \   0000006C   9900000A           BEQ      ??GetValue_5
   \   00000070   61B081E2           ADD      R11,R1,#+97
   \   00000074   0B005EE1           CMP      LR,R11
   \   00000078   2500000A           BEQ      ??GetValue_6
   \   0000007C   62B081E2           ADD      R11,R1,#+98
   \   00000080   0B005EE1           CMP      LR,R11
   \   00000084   2F00000A           BEQ      ??GetValue_7
   \   00000088   63B081E2           ADD      R11,R1,#+99
   \   0000008C   0B005EE1           CMP      LR,R11
   \   00000090   3500000A           BEQ      ??GetValue_8
   \   00000094   64B081E2           ADD      R11,R1,#+100
   \   00000098   0B005EE1           CMP      LR,R11
   \   0000009C   3D00000A           BEQ      ??GetValue_9
   \   000000A0   65B081E2           ADD      R11,R1,#+101
   \   000000A4   0B005EE1           CMP      LR,R11
   \   000000A8   4400000A           BEQ      ??GetValue_10
   \   000000AC   66B081E2           ADD      R11,R1,#+102
   \   000000B0   0B005EE1           CMP      LR,R11
   \   000000B4   4D00000A           BEQ      ??GetValue_11
   \   000000B8   67B081E2           ADD      R11,R1,#+103
   \   000000BC   0B005EE1           CMP      LR,R11
   \   000000C0   5300000A           BEQ      ??GetValue_12
   \   000000C4   68B081E2           ADD      R11,R1,#+104
   \   000000C8   0B005EE1           CMP      LR,R11
   \   000000CC   5A00000A           BEQ      ??GetValue_13
   \   000000D0   69B081E2           ADD      R11,R1,#+105
   \   000000D4   0B005EE1           CMP      LR,R11
   \   000000D8   6000000A           BEQ      ??GetValue_14
   \   000000DC   890000EA           B        ??GetValue_15
    388              //case SVT_TP:
    389              case SVT_PRESSURE:
    390              case SVT_LINE_PRESSURE:
    391                  DecPnt     = 1;
   \                     ??GetValue_2:
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   001082E5           STR      R1,[R2, #+0]
    392                  Unit       = PRESSURE_UNIT3;
   \   000000E8   0810A0E3           MOV      R1,#+8
   \   000000EC   00108AE5           STR      R1,[R10, #+0]
    393                  if ( HasPressure && IsNewData ) {
   \   000000F0   5C11D5E5           LDRB     R1,[R5, #+348]
   \   000000F4   000051E3           CMP      R1,#+0
   \   000000F8   E010D515           LDRBNE   R1,[R5, #+224]
   \   000000FC   00005113           CMPNE    R1,#+0
    394                      MyRetValue = Pressure;
   \   00000100   74119515           LDRNE    R1,[R5, #+372]
   \   00000104   00008305           STREQ    R0,[R3, #+0]
   \   00000108   0500A003           MOVEQ    R0,#+5
   \   0000010C   00108315           STRNE    R1,[R3, #+0]
   \   00000110   830000EA           B        ??GetValue_16
    395                  } else {
    396                      MyRetValue = 0.0;
    397                      Status = GETVAL_FLOAT_NOT_LEGAL;
    398                  }
    399                  break;
    400              case SVT_HIHI_PRESS_ENABLE:
    401                  if ( HiHiPressurePtr ) {
   \                     ??GetValue_6:
   \   00000114   000056E3           CMP      R6,#+0
   \   00000118   0800000A           BEQ      ??GetValue_17
    402                      Status = HiHiPressurePtr->GetValue(SVT_AL_ENABLE,0, MyRetValue,  DecPnt,Unit);
   \   0000011C   00042DE9           PUSH     {R10}
   \   00000120   04002DE9           PUSH     {R2}
   \   00000124   A44096E5           LDR      R4,[R6, #+164]
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   244094E5           LDR      R4,[R4, #+36]
   \   00000130   0600A0E1           MOV      R0,R6
   \                     ??GetValue_18:
   \   00000134   0FE0A0E1           MOV      LR,PC
   \   00000138   14FF2FE1           BX       R4
   \   0000013C   770000EA           B        ??GetValue_19
    403                  } else {
    404                      Status = E_INVALID_POINTER;
   \                     ??GetValue_17:
   \   00000140   0B00A0E3           MOV      R0,#+11
   \   00000144   760000EA           B        ??GetValue_16
    405                  }
    406                  break;
    407              case SVT_HI_PRESS_ENABLE:
    408                  if ( HighPressurePtr ) {
   \                     ??GetValue_7:
   \   00000148   000057E3           CMP      R7,#+0
   \   0000014C   FBFFFF0A           BEQ      ??GetValue_17
    409                      Status = HighPressurePtr->GetValue(SVT_AL_ENABLE,0, MyRetValue,  DecPnt,Unit);
   \   00000150   00042DE9           PUSH     {R10}
   \   00000154   04002DE9           PUSH     {R2}
   \   00000158   A44097E5           LDR      R4,[R7, #+164]
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   244094E5           LDR      R4,[R4, #+36]
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   F1FFFFEA           B        ??GetValue_18
    410                  } else {
    411                      Status = E_INVALID_POINTER;
    412                  }
    413                  break;
    414              case SVT_LO_PRESS_ENABLE:
    415                  if ( LowPressurePtr ) {
   \                     ??GetValue_8:
   \   0000016C   000058E3           CMP      R8,#+0
   \   00000170   F2FFFF0A           BEQ      ??GetValue_17
    416                      Status = LowPressurePtr->GetValue(SVT_AL_ENABLE,0, MyRetValue,  DecPnt,Unit);
   \   00000174   00042DE9           PUSH     {R10}
   \   00000178   04002DE9           PUSH     {R2}
   \   0000017C   A44098E5           LDR      R4,[R8, #+164]
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   244094E5           LDR      R4,[R4, #+36]
   \                     ??GetValue_20:
   \   00000188   0800A0E1           MOV      R0,R8
   \   0000018C   0FE0A0E1           MOV      LR,PC
   \   00000190   14FF2FE1           BX       R4
   \   00000194   610000EA           B        ??GetValue_19
    417                  } else {
    418                      Status = E_INVALID_POINTER;
    419                  }
    420                  break;
    421              case SVT_HIHI_PRESS_LIMIT:
    422                  if ( HiHiPressurePtr ) {
   \                     ??GetValue_9:
   \   00000198   000056E3           CMP      R6,#+0
   \   0000019C   E7FFFF0A           BEQ      ??GetValue_17
    423                      Status = HiHiPressurePtr->GetValue(SVT_AL_LIMIT,0, MyRetValue,  DecPnt,Unit);
   \   000001A0   00042DE9           PUSH     {R10}
   \   000001A4   04002DE9           PUSH     {R2}
   \   000001A8   A44096E5           LDR      R4,[R6, #+164]
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   244094E5           LDR      R4,[R4, #+36]
   \   000001B4   0C10A0E1           MOV      R1,R12
   \   000001B8   0600A0E1           MOV      R0,R6
   \   000001BC   DCFFFFEA           B        ??GetValue_18
    424                  } else {
    425                      Status = E_INVALID_POINTER;
    426                  }
    427                  break;
    428              case SVT_HI_PRESS_LIMIT:
    429                  if ( HighPressurePtr ) {
   \                     ??GetValue_10:
   \   000001C0   000057E3           CMP      R7,#+0
   \   000001C4   DDFFFF0A           BEQ      ??GetValue_17
    430                      Status = HighPressurePtr->GetValue(SVT_AL_LIMIT,0, MyRetValue,  DecPnt,Unit);
   \   000001C8   00042DE9           PUSH     {R10}
   \   000001CC   04002DE9           PUSH     {R2}
   \   000001D0   A44097E5           LDR      R4,[R7, #+164]
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   244094E5           LDR      R4,[R4, #+36]
   \   000001DC   0C10A0E1           MOV      R1,R12
   \                     ??GetValue_21:
   \   000001E0   0700A0E1           MOV      R0,R7
   \   000001E4   0FE0A0E1           MOV      LR,PC
   \   000001E8   14FF2FE1           BX       R4
   \   000001EC   4B0000EA           B        ??GetValue_19
    431                  } else {
    432                      Status = E_INVALID_POINTER;
    433                  }
    434                  break;
    435              case SVT_LO_PRESS_LIMIT:
    436                  if ( LowPressurePtr ) {
   \                     ??GetValue_11:
   \   000001F0   000058E3           CMP      R8,#+0
   \   000001F4   D1FFFF0A           BEQ      ??GetValue_17
    437                      Status = LowPressurePtr->GetValue(SVT_AL_LIMIT,0, MyRetValue,  DecPnt,Unit);
   \   000001F8   00042DE9           PUSH     {R10}
   \   000001FC   04002DE9           PUSH     {R2}
   \   00000200   A44098E5           LDR      R4,[R8, #+164]
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   244094E5           LDR      R4,[R4, #+36]
   \   0000020C   0C10A0E1           MOV      R1,R12
   \   00000210   DCFFFFEA           B        ??GetValue_20
    438                  } else {
    439                      Status = E_INVALID_POINTER;
    440                  }
    441                  break;
    442              case SVT_HIHI_PRESS_VALUE:
    443                  if ( HiHiPressurePtr ) {
   \                     ??GetValue_12:
   \   00000214   000056E3           CMP      R6,#+0
   \   00000218   C8FFFF0A           BEQ      ??GetValue_17
    444                      Status = HiHiPressurePtr->GetValue(SVT_AL_VALUE,0, MyRetValue,  DecPnt,Unit);
   \   0000021C   00042DE9           PUSH     {R10}
   \   00000220   04002DE9           PUSH     {R2}
   \   00000224   0410A0E1           MOV      R1,R4
   \   00000228   A44096E5           LDR      R4,[R6, #+164]
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   244094E5           LDR      R4,[R4, #+36]
   \   00000234   0600A0E1           MOV      R0,R6
   \   00000238   BDFFFFEA           B        ??GetValue_18
    445                  } else {
    446                      Status = E_INVALID_POINTER;
    447                  }
    448                  break;
    449              case SVT_HI_PRESS_VALUE:
    450                  if ( HighPressurePtr ) {
   \                     ??GetValue_13:
   \   0000023C   000057E3           CMP      R7,#+0
   \   00000240   BEFFFF0A           BEQ      ??GetValue_17
    451                      Status = HighPressurePtr->GetValue(SVT_AL_VALUE,0, MyRetValue,  DecPnt,Unit);
   \   00000244   00042DE9           PUSH     {R10}
   \   00000248   04002DE9           PUSH     {R2}
   \   0000024C   0410A0E1           MOV      R1,R4
   \   00000250   A44097E5           LDR      R4,[R7, #+164]
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   244094E5           LDR      R4,[R4, #+36]
   \   0000025C   DFFFFFEA           B        ??GetValue_21
    452                  } else {
    453                      Status = E_INVALID_POINTER;
    454                  }
    455                  break;
    456              case SVT_LO_PRESS_VALUE:
    457                  if ( LowPressurePtr ) {
   \                     ??GetValue_14:
   \   00000260   000058E3           CMP      R8,#+0
   \   00000264   B5FFFF0A           BEQ      ??GetValue_17
    458                      Status = LowPressurePtr->GetValue(SVT_AL_VALUE,0, MyRetValue,  DecPnt,Unit);
   \   00000268   00042DE9           PUSH     {R10}
   \   0000026C   04002DE9           PUSH     {R2}
   \   00000270   0410A0E1           MOV      R1,R4
   \   00000274   A44098E5           LDR      R4,[R8, #+164]
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   244094E5           LDR      R4,[R4, #+36]
   \   00000280   C0FFFFEA           B        ??GetValue_20
    459                  } else {
    460                      Status = E_INVALID_POINTER;
    461                  }
    462                  break;
    463              case SVT_LP_OFFSET:
    464                  if ( LinePressSensor ) {
   \                     ??GetValue_3:
   \   00000284   000059E3           CMP      R9,#+0
   \   00000288   ACFFFF0A           BEQ      ??GetValue_17
    465                      Status = LinePressSensor->GetValue(SVT_AI_OFFSET,0, MyRetValue,  DecPnt,Unit);
   \   0000028C   00042DE9           PUSH     {R10}
   \   00000290   04002DE9           PUSH     {R2}
   \   00000294   A44099E5           LDR      R4,[R9, #+164]
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   244094E5           LDR      R4,[R4, #+36]
   \   000002A0   40108BE2           ADD      R1,R11,#+64
   \                     ??GetValue_22:
   \   000002A4   0900A0E1           MOV      R0,R9
   \   000002A8   0FE0A0E1           MOV      LR,PC
   \   000002AC   14FF2FE1           BX       R4
   \   000002B0   1A0000EA           B        ??GetValue_19
    466                  } else {
    467                      Status = E_INVALID_POINTER;
    468                  }
    469                  break;
    470              case SVT_LP_GAIN:
    471                  if ( LinePressSensor ) {
   \                     ??GetValue_4:
   \   000002B4   000059E3           CMP      R9,#+0
   \   000002B8   A0FFFF0A           BEQ      ??GetValue_17
    472                      Status = LinePressSensor->GetValue(SVT_AI_GAIN,0, MyRetValue,  DecPnt,Unit);
   \   000002BC   00042DE9           PUSH     {R10}
   \   000002C0   04002DE9           PUSH     {R2}
   \   000002C4   A44099E5           LDR      R4,[R9, #+164]
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   244094E5           LDR      R4,[R4, #+36]
   \   000002D0   3E108BE2           ADD      R1,R11,#+62
   \   000002D4   F2FFFFEA           B        ??GetValue_22
    473                  } else {
    474                      Status = E_INVALID_POINTER;
    475                  }
    476                  break;
    477              case SVT_LP_ENABLE:
    478          		if ( LinePressSensor ) {
   \                     ??GetValue_5:
   \   000002D8   000059E3           CMP      R9,#+0
   \   000002DC   97FFFF0A           BEQ      ??GetValue_17
    479          			Status = LinePressSensor->GetValue(SVT_AI_ENABLE,0, MyRetValue,  DecPnt,Unit);
   \   000002E0   00042DE9           PUSH     {R10}
   \   000002E4   04002DE9           PUSH     {R2}
   \   000002E8   7A1D44E2           SUB      R1,R4,#+7808
   \   000002EC   A44099E5           LDR      R4,[R9, #+164]
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   244094E5           LDR      R4,[R4, #+36]
   \   000002F8   0900A0E1           MOV      R0,R9
   \   000002FC   0FE0A0E1           MOV      LR,PC
   \   00000300   14FF2FE1           BX       R4
   \   00000304   050000EA           B        ??GetValue_19
    480          		} else {
    481          			Status = E_INVALID_POINTER;
    482          		}
    483          		break;
    484          	default:
    485          		Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt,Unit);
   \                     ??GetValue_15:
   \   00000308   00042DE9           PUSH     {R10}
   \   0000030C   04002DE9           PUSH     {R2}
   \   00000310   0C209DE5           LDR      R2,[SP, #+12]
   \   00000314   0E10A0E1           MOV      R1,LR
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           _BLF     ??GetValue_1,??GetValue??rA
   \                     ??GetValue_19:
   \   00000320   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
    486          		break;
    487          	}
    488          	return(Status);
   \                     ??GetValue_16:
   \   00000324   F64FBDE8           POP      {R1,R2,R4-R11,LR}
   \   00000328   1EFF2FE1           BX       LR               ;; return
    489          }
    490          

   \                                 In segment CODE, align 4, keep-with-next
    491          int PROLinePressure::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    492          {
   \                     ??GetStringValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
    493          	int Status = GETVAL_NO_ERR;
   \   00000004   0040A0E3           MOV      R4,#+0
    494          	switch ( ValueId ) {
   \   00000008   78E0A0E3           MOV      LR,#+120
   \   0000000C   40EE8EE3           ORR      LR,LR,#0x400
   \   00000010   0E0051E1           CMP      R1,LR
   \   00000014   0800000A           BEQ      ??GetStringValue_2
   \   00000018   A1E08EE2           ADD      LR,LR,#+161
   \   0000001C   0E0051E1           CMP      R1,LR
   \   00000020   1100001A           BNE      ??GetStringValue_3
    495          	case SVT_PRO_STATUS:
    496          		FindPROStatus(MyString);
   \   00000024   A42090E5           LDR      R2,[R0, #+164]
   \   00000028   0310A0E1           MOV      R1,R3
   \   0000002C   1C2092E5           LDR      R2,[R2, #+28]
   \   00000030   0FE0A0E1           MOV      LR,PC
   \   00000034   12FF2FE1           BX       R2
   \   00000038   0D0000EA           B        ??GetStringValue_4
    497          		break;
    498          	case SVT_LP_ENABLE_TEXT:
    499          		if ( LinePressSensor ) {
   \                     ??GetStringValue_2:
   \   0000003C   644190E5           LDR      R4,[R0, #+356]
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   0600000A           BEQ      ??GetStringValue_5
    500          			Status = LinePressSensor->GetStringValue(SVT_AI_ENABLE_TEXT,Index, MyString);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   A44094E5           LDR      R4,[R4, #+164]
   \   00000050   3A108EE2           ADD      R1,LR,#+58
   \   00000054   284094E5           LDR      R4,[R4, #+40]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   14FF2FE1           BX       R4
   \   00000060   020000EA           B        ??GetStringValue_6
    501          		} else {
    502          			Status = E_INVALID_POINTER;
   \                     ??GetStringValue_5:
   \   00000064   0B40A0E3           MOV      R4,#+11
   \   00000068   010000EA           B        ??GetStringValue_4
    503          		}
    504          		break;
    505              default:
    506                  Status = PRogramObject::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_3:
   \   0000006C   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \                     ??GetStringValue_6:
   \   00000070   0040A0E1           MOV      R4,R0
    507                  break;
    508              }
    509              return(Status);
   \                     ??GetStringValue_4:
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   1040BDE8           POP      {R4,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
    510          }
    511          

   \                                 In segment CODE, align 4, keep-with-next
    512          int PROLinePressure::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    513          {
   \                     ??PutValue:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   B860DDE5           LDRB     R6,[SP, #+184]
   \   0000000C   BC709DE5           LDR      R7,[SP, #+188]
   \   00000010   0040A0E1           MOV      R4,R0
    514              int Status=E_NO_ERR, ValUnitId = NO_UNIT;
    515              switch ( ValueId ) {
   \   00000014   90009DE5           LDR      R0,[SP, #+144]
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0310A0E1           MOV      R1,R3
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   00208DE5           STR      R2,[SP, #+0]
   \   0000002C   3E90A0E3           MOV      R9,#+62
   \   00000030   8C9D89E3           ORR      R9,R9,#0x2300
   \   00000034   0CA0C9E3           BIC      R10,R9,#0xC
   \   00000038   B8B0A0E3           MOV      R11,#+184
   \   0000003C   40BE8BE3           ORR      R11,R11,#0x400
   \   00000040   400E50E3           CMP      R0,#+1024
   \   00000044   8000000A           BEQ      ??PutValue_2
   \   00000048   97204BE2           SUB      R2,R11,#+151
   \   0000004C   020050E1           CMP      R0,R2
   \   00000050   6A00000A           BEQ      ??PutValue_3
   \   00000054   532082E2           ADD      R2,R2,#+83
   \   00000058   020050E1           CMP      R0,R2
   \   0000005C   7A00000A           BEQ      ??PutValue_2
   \   00000060   012082E3           ORR      R2,R2,#0x1
   \   00000064   020050E1           CMP      R0,R2
   \   00000068   8900000A           BEQ      ??PutValue_4
   \   0000006C   012082E2           ADD      R2,R2,#+1
   \   00000070   020050E1           CMP      R0,R2
   \   00000074   9A00000A           BEQ      ??PutValue_5
   \   00000078   012082E3           ORR      R2,R2,#0x1
   \   0000007C   020050E1           CMP      R0,R2
   \   00000080   01208212           ADDNE    R2,R2,#+1
   \   00000084   02005011           CMPNE    R0,R2
   \   00000088   A900000A           BEQ      ??PutValue_6
   \   0000008C   622089E2           ADD      R2,R9,#+98
   \   00000090   020050E1           CMP      R0,R2
   \   00000094   0900000A           BEQ      ??PutValue_7
   \   00000098   012082E3           ORR      R2,R2,#0x1
   \   0000009C   020050E1           CMP      R0,R2
   \   000000A0   1C00000A           BEQ      ??PutValue_8
   \   000000A4   022082E3           ORR      R2,R2,#0x2
   \   000000A8   020050E1           CMP      R0,R2
   \   000000AC   2B00000A           BEQ      ??PutValue_9
   \   000000B0   012082E2           ADD      R2,R2,#+1
   \   000000B4   020050E1           CMP      R0,R2
   \   000000B8   3E00000A           BEQ      ??PutValue_10
   \   000000BC   B00000EA           B        ??PutValue_11
    516              case SVT_HI_PRESS_ENABLE:
    517                  if ( HighPressurePtr ) {
   \                     ??PutValue_7:
   \   000000C0   7C0194E5           LDR      R0,[R4, #+380]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   BF00000A           BEQ      ??PutValue_12
    518                      Status = HighPressurePtr->PutValue(SVT_AL_ENABLE, Index,NewValue,Local,&ValUnitId);
   \   000000CC   A40090E5           LDR      R0,[R0, #+164]
   \   000000D0   308080E2           ADD      R8,R0,#+48
   \   000000D4   04008DE2           ADD      R0,SP,#+4
   \   000000D8   ........           _BLF     ??string,??string??rA
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   40002DE9           PUSH     {R6}
   \   000000E8   7C0194E5           LDR      R0,[R4, #+380]
   \   000000EC   0520A0E1           MOV      R2,R5
   \   000000F0   005098E5           LDR      R5,[R8, #+0]
   \   000000F4   0C308DE2           ADD      R3,SP,#+12
   \   000000F8   0910A0E1           MOV      R1,R9
   \   000000FC   0FE0A0E1           MOV      LR,PC
   \   00000100   15FF2FE1           BX       R5
   \                     ??PutValue_13:
   \   00000104   0080A0E1           MOV      R8,R0
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   0C008DE2           ADD      R0,SP,#+12
   \   00000114   A80000EA           B        ??PutValue_14
    519                  }
    520                  break;
    521              case SVT_LO_PRESS_ENABLE:
    522                  if ( LowPressurePtr ) {
   \                     ??PutValue_8:
   \   00000118   800194E5           LDR      R0,[R4, #+384]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   A900000A           BEQ      ??PutValue_12
    523                      Status = LowPressurePtr->PutValue(SVT_AL_ENABLE, Index,NewValue,Local,&ValUnitId);
   \   00000124   A40090E5           LDR      R0,[R0, #+164]
   \   00000128   308080E2           ADD      R8,R0,#+48
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   ........           _BLF     ??string,??string??rA
   \   00000134   0D00A0E1           MOV      R0,SP
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   40002DE9           PUSH     {R6}
   \   00000140   800194E5           LDR      R0,[R4, #+384]
   \   00000144   0520A0E1           MOV      R2,R5
   \   00000148   005098E5           LDR      R5,[R8, #+0]
   \   0000014C   0C308DE2           ADD      R3,SP,#+12
   \   00000150   0910A0E1           MOV      R1,R9
   \   00000154   0FE0A0E1           MOV      LR,PC
   \   00000158   15FF2FE1           BX       R5
   \   0000015C   E8FFFFEA           B        ??PutValue_13
    524                  }
    525                  break;
    526              case SVT_HI_PRESS_LIMIT:
    527                  if ( HighPressurePtr ) {
   \                     ??PutValue_9:
   \   00000160   7C0194E5           LDR      R0,[R4, #+380]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   9700000A           BEQ      ??PutValue_12
    528                      Status = HighPressurePtr->PutValue(SVT_AL_LIMIT, Index,NewValue,Local,&ValUnitId);
   \   0000016C   A40090E5           LDR      R0,[R0, #+164]
   \   00000170   308080E2           ADD      R8,R0,#+48
   \   00000174   04008DE2           ADD      R0,SP,#+4
   \   00000178   ........           _BLF     ??string,??string??rA
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   01002DE9           PUSH     {R0}
   \   00000184   40002DE9           PUSH     {R6}
   \   00000188   7C0194E5           LDR      R0,[R4, #+380]
   \   0000018C   0520A0E1           MOV      R2,R5
   \   00000190   005098E5           LDR      R5,[R8, #+0]
   \   00000194   0C308DE2           ADD      R3,SP,#+12
   \   00000198   0A10A0E1           MOV      R1,R10
   \   0000019C   0FE0A0E1           MOV      LR,PC
   \   000001A0   15FF2FE1           BX       R5
   \                     ??PutValue_15:
   \   000001A4   0080A0E1           MOV      R8,R0
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   0C008DE2           ADD      R0,SP,#+12
   \   000001B4   800000EA           B        ??PutValue_14
    529                  }
    530                  break;
    531              case SVT_LO_PRESS_LIMIT:
    532                  if ( LowPressurePtr ) {
   \                     ??PutValue_10:
   \   000001B8   800194E5           LDR      R0,[R4, #+384]
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   8100000A           BEQ      ??PutValue_12
    533                      Status = LowPressurePtr->PutValue(SVT_AL_LIMIT, Index,NewValue,Local,&ValUnitId);
   \   000001C4   A40090E5           LDR      R0,[R0, #+164]
   \   000001C8   308080E2           ADD      R8,R0,#+48
   \   000001CC   04008DE2           ADD      R0,SP,#+4
   \   000001D0   ........           _BLF     ??string,??string??rA
   \   000001D4   0D00A0E1           MOV      R0,SP
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   40002DE9           PUSH     {R6}
   \   000001E0   800194E5           LDR      R0,[R4, #+384]
   \   000001E4   0520A0E1           MOV      R2,R5
   \   000001E8   005098E5           LDR      R5,[R8, #+0]
   \   000001EC   0C308DE2           ADD      R3,SP,#+12
   \   000001F0   0A10A0E1           MOV      R1,R10
   \   000001F4   0FE0A0E1           MOV      LR,PC
   \   000001F8   15FF2FE1           BX       R5
   \   000001FC   C0FFFFEA           B        ??PutValue_13
    534                  }
    535                  break;
    536              case SVT_ZEROSET_PRESS:
    537                  if ( LinePressSensor ) {
   \                     ??PutValue_3:
   \   00000200   640194E5           LDR      R0,[R4, #+356]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   6F00000A           BEQ      ??PutValue_12
    538                      Status = LinePressSensor->PutValue(SVT_AI_CALC_VAL, Index,"0.0",Local);
   \   0000020C   A40090E5           LDR      R0,[R0, #+164]
   \   00000210   781F8FE2           ADR      R1,??PutValue_16  ;; "0.0"
   \   00000214   308080E2           ADD      R8,R0,#+48
   \   00000218   04008DE2           ADD      R0,SP,#+4
   \   0000021C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   02002DE9           PUSH     {R1}
   \   00000228   40002DE9           PUSH     {R6}
   \   0000022C   0030A0E1           MOV      R3,R0
   \   00000230   640194E5           LDR      R0,[R4, #+356]
   \   00000234   0520A0E1           MOV      R2,R5
   \   00000238   005098E5           LDR      R5,[R8, #+0]
   \   0000023C   0B10A0E1           MOV      R1,R11
   \   00000240   0FE0A0E1           MOV      LR,PC
   \   00000244   15FF2FE1           BX       R5
   \   00000248   D5FFFFEA           B        ??PutValue_15
    539                  }
    540                  break;
    541              case SVT_PRESSURE:  //EHSMark Was no input permission
    542                                  //Status = E_NO_INPUT_PERMISSION;
    543                                  //break;
    544              case SVT_LP:
    545                  if ( LinePressSensor ) {
   \                     ??PutValue_2:
   \   0000024C   640194E5           LDR      R0,[R4, #+356]
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   5C00000A           BEQ      ??PutValue_12
    546                      Status = LinePressSensor->PutValue(SVT_AI_CALC_VAL, Index,NewValue,Local,&ValUnitId);
   \   00000258   A40090E5           LDR      R0,[R0, #+164]
   \   0000025C   308080E2           ADD      R8,R0,#+48
   \   00000260   04008DE2           ADD      R0,SP,#+4
   \   00000264   ........           _BLF     ??string,??string??rA
   \   00000268   0D00A0E1           MOV      R0,SP
   \   0000026C   01002DE9           PUSH     {R0}
   \   00000270   40002DE9           PUSH     {R6}
   \   00000274   640194E5           LDR      R0,[R4, #+356]
   \   00000278   0520A0E1           MOV      R2,R5
   \   0000027C   005098E5           LDR      R5,[R8, #+0]
   \   00000280   0C308DE2           ADD      R3,SP,#+12
   \   00000284   0B10A0E1           MOV      R1,R11
   \   00000288   0FE0A0E1           MOV      LR,PC
   \   0000028C   15FF2FE1           BX       R5
   \   00000290   9BFFFFEA           B        ??PutValue_13
    547                  }
    548                  break;
    549              case SVT_LP_OFFSET :
    550                  Status = LinePressSensor->PutValue(SVT_AI_OFFSET, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_4:
   \   00000294   640194E5           LDR      R0,[R4, #+356]
   \   00000298   A40090E5           LDR      R0,[R0, #+164]
   \   0000029C   308080E2           ADD      R8,R0,#+48
   \   000002A0   20008DE2           ADD      R0,SP,#+32
   \   000002A4   ........           _BLF     ??string,??string??rA
   \   000002A8   0D00A0E1           MOV      R0,SP
   \   000002AC   01002DE9           PUSH     {R0}
   \   000002B0   40002DE9           PUSH     {R6}
   \   000002B4   640194E5           LDR      R0,[R4, #+356]
   \   000002B8   0520A0E1           MOV      R2,R5
   \   000002BC   005098E5           LDR      R5,[R8, #+0]
   \   000002C0   28308DE2           ADD      R3,SP,#+40
   \   000002C4   03104BE2           SUB      R1,R11,#+3
   \   000002C8   0FE0A0E1           MOV      LR,PC
   \   000002CC   15FF2FE1           BX       R5
   \   000002D0   0080A0E1           MOV      R8,R0
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   0110A0E3           MOV      R1,#+1
   \   000002DC   28008DE2           ADD      R0,SP,#+40
   \   000002E0   350000EA           B        ??PutValue_14
    551                  break;
    552              case SVT_LP_GAIN :
    553                  Status = LinePressSensor->PutValue(SVT_AI_GAIN, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_5:
   \   000002E4   640194E5           LDR      R0,[R4, #+356]
   \   000002E8   A40090E5           LDR      R0,[R0, #+164]
   \   000002EC   308080E2           ADD      R8,R0,#+48
   \   000002F0   3C008DE2           ADD      R0,SP,#+60
   \   000002F4   ........           _BLF     ??string,??string??rA
   \   000002F8   0D00A0E1           MOV      R0,SP
   \   000002FC   01002DE9           PUSH     {R0}
   \   00000300   40002DE9           PUSH     {R6}
   \   00000304   640194E5           LDR      R0,[R4, #+356]
   \   00000308   0520A0E1           MOV      R2,R5
   \   0000030C   005098E5           LDR      R5,[R8, #+0]
   \   00000310   44308DE2           ADD      R3,SP,#+68
   \   00000314   04104BE2           SUB      R1,R11,#+4
   \   00000318   0FE0A0E1           MOV      LR,PC
   \   0000031C   15FF2FE1           BX       R5
   \   00000320   0080A0E1           MOV      R8,R0
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   44008DE2           ADD      R0,SP,#+68
   \   00000330   210000EA           B        ??PutValue_14
    554                  break;
    555              case SVT_LP_ENABLE :
    556              case SVT_LP_ENABLE_TEXT :
    557                  Status = LinePressSensor->PutValue(SVT_AI_ENABLE_TEXT, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_6:
   \   00000334   640194E5           LDR      R0,[R4, #+356]
   \   00000338   A40090E5           LDR      R0,[R0, #+164]
   \   0000033C   308080E2           ADD      R8,R0,#+48
   \   00000340   58008DE2           ADD      R0,SP,#+88
   \   00000344   ........           _BLF     ??string,??string??rA
   \   00000348   0D00A0E1           MOV      R0,SP
   \   0000034C   01002DE9           PUSH     {R0}
   \   00000350   40002DE9           PUSH     {R6}
   \   00000354   640194E5           LDR      R0,[R4, #+356]
   \   00000358   0520A0E1           MOV      R2,R5
   \   0000035C   005098E5           LDR      R5,[R8, #+0]
   \   00000360   60308DE2           ADD      R3,SP,#+96
   \   00000364   7A1D4AE2           SUB      R1,R10,#+7808
   \   00000368   0FE0A0E1           MOV      LR,PC
   \   0000036C   15FF2FE1           BX       R5
   \   00000370   0080A0E1           MOV      R8,R0
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   60008DE2           ADD      R0,SP,#+96
   \   00000380   0D0000EA           B        ??PutValue_14
    558                  break;
    559              default:
    560                  Status = PROXRefObject::PutValue( ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_11:
   \   00000384   74008DE2           ADD      R0,SP,#+116
   \   00000388   ........           _BLF     ??string,??string??rA
   \   0000038C   0D00A0E1           MOV      R0,SP
   \   00000390   01002DE9           PUSH     {R0}
   \   00000394   40002DE9           PUSH     {R6}
   \   00000398   98109DE5           LDR      R1,[SP, #+152]
   \   0000039C   7C308DE2           ADD      R3,SP,#+124
   \   000003A0   0520A0E1           MOV      R2,R5
   \   000003A4   0400A0E1           MOV      R0,R4
   \   000003A8   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   000003AC   0080A0E1           MOV      R8,R0
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   7C008DE2           ADD      R0,SP,#+124
   \                     ??PutValue_14:
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C0   08D08DE2           ADD      SP,SP,#+8
    561                  break;
    562              }
    563              if ( Status==E_NO_ERR ) {
   \   000003C4   000058E3           CMP      R8,#+0
   \   000003C8   0400001A           BNE      ??PutValue_17
    564                  SetModifiedFlag();
   \                     ??PutValue_12:
   \   000003CC   A41094E5           LDR      R1,[R4, #+164]
   \   000003D0   0400A0E1           MOV      R0,R4
   \   000003D4   541091E5           LDR      R1,[R1, #+84]
   \   000003D8   0FE0A0E1           MOV      LR,PC
   \   000003DC   11FF2FE1           BX       R1
    565              }
    566              if ( UnitId ) {
   \                     ??PutValue_17:
   \   000003E0   000057E3           CMP      R7,#+0
    567                  *UnitId = ValUnitId;
   \   000003E4   00009D15           LDRNE    R0,[SP, #+0]
   \   000003E8   00008715           STRNE    R0,[R7, #+0]
    568              }
    569              return(Status);
   \   000003EC   0800A0E1           MOV      R0,R8
   \   000003F0   94D08DE2           ADD      SP,SP,#+148
   \   000003F4   ........           B        ?Subroutine28
   \                     ??PutValue_16:
   \   000003F8   302E3000           DC8      "0.0"
    570          }
    571          

   \                                 In segment CODE, align 4, keep-with-next
    572          int PROLinePressure::PutFloatValue( int ValueId, float NewValue)
    573          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    574              int Status = E_NO_ERR;
    575              //switch ( ValueId ) {
    576              //   default:
    577              Status = PRogramObject::PutFloatValue(ValueId,NewValue);
    578              //     break;
    579              //}
    580              return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine29
    581          
    582          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_I, align 4, align-sorted
    583          ValueList LinePressValueList[] =  {
   \                     LinePressValueList:
   \   00000000                      DS8 60
   \   0000003C                      REQUIRE `?<Initializer for LinePressValueList>`
    584          	{L_WORD304      ,L_WORD237,SVT_BLANK},                           //  {"Unused"    ,"",SVT_BLANK},
    585          	{L_WORD311      ,L_WORD237,SVT_PRESSURE},                        //  {"Pressure"  ,"",SVT_PRESSURE},
    586          	{L_WORD313      ,L_WORD237,SVT_LO_PRESS_LIMIT},                  //  {"Low Press" ,"",SVT_LO_PRESS_LIMIT},
    587          	{L_WORD312      ,L_WORD237,SVT_HI_PRESS_LIMIT},                  //  {"High Press","",SVT_HI_PRESS_LIMIT},
    588          	{L_WORD1104     ,L_WORD237,SVT_HIHI_PRESS_LIMIT},                  //  {"High Press","",SVT_HI_PRESS_LIMIT},
    589             // {L_WORD856      ,L_WORD857,SVT_TANK_STATE_STR},                  // {"Operation mode","Op Mode",SVT_TANK_STATE_STR},
    590          #ifdef ANWIN
    591              { L_WORD434, L_WORD237, SVT_LP_ENABLE_TEXT },                    // {"On/Off"       ,"",SVT_AI_ENABLE},
    592              { L_WORD126, L_WORD237, SVT_LP_GAIN        },                    // {"Gain"         ,"",SVT_AI_GAIN},
    593              { L_WORD127, L_WORD237, SVT_LP_OFFSET      },                    // {"Offset"       ,"",SVT_AI_OFFSET},
    594          #endif
    595          };
    596          

   \                                 In segment CODE, align 4, keep-with-next
    597          ValueList *PROLinePressure::GetValueInfoTable(int &Entries, int Index)
    598          {
    599              return GetValueInfoTableStatic(Entries,Index);
   \                     ??GetValueInfoTable:
   \   00000000   0500A0E3           MOV      R0,#+5
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   ........           B        ?Subroutine30
    600          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   00009FE5           LDR      R0,??Subroutine30_0  ;; LinePressValueList
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine30_0:
   \   00000008   ........           DC32     LinePressValueList
    601          

   \                                 In segment CODE, align 4, keep-with-next
    602          ValueList *PROLinePressure::GetValueInfoTableStatic(int &Entries, int Index)
    603          {
    604              Entries = NELEMENTS(LinePressValueList);;
   \                     ??GetValueInfoTableStatic:
   \   00000000   0510A0E3           MOV      R1,#+5
   \   00000004   001080E5           STR      R1,[R0, #+0]
    605              return(LinePressValueList);
   \   00000008                      REQUIRE ?Subroutine30
   \   00000008                      ;; // Fall through to label ?Subroutine30
    606          }
    607          
    608          

   \                                 In segment CODE, align 4, keep-with-next
    609          void PROLinePressure::Calculate(void)
    610          {
   \                     ??Calculate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    611              if ( LinePressSensor ) {
   \   00000008   640194E5           LDR      R0,[R4, #+356]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1900000A           BEQ      ??Calculate_1
    612                  if ( LinePressSensor->CanCalculate() ) {
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1200000A           BEQ      ??Calculate_2
    613                      float tmpPressure = LinePressSensor->Calculate();
   \   00000024   641194E5           LDR      R1,[R4, #+356]
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   A41091E5           LDR      R1,[R1, #+164]
   \   00000030   601091E5           LDR      R1,[R1, #+96]
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   11FF2FE1           BX       R1
    614                      if (LinePressSensor->ResultOK) {
   \   0000003C   642194E5           LDR      R2,[R4, #+356]
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   3621D2E5           LDRB     R2,[R2, #+310]
   \   00000048   000052E3           CMP      R2,#+0
    615                          HasPressure = true;
   \   0000004C   5C11C415           STRBNE   R1,[R4, #+348]
    616                          HWFailure   = false;
   \   00000050   0010A013           MOVNE    R1,#+0
   \   00000054   3C10C415           STRBNE   R1,[R4, #+60]
    617                          Pressure    = tmpPressure;
   \   00000058   74018415           STRNE    R0,[R4, #+372]
   \   0000005C   0600001A           BNE      ??Calculate_1
    618                      }else{
    619                          HasPressure = false;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   5C01C4E5           STRB     R0,[R4, #+348]
    620                          HWFailure   = true;
   \   00000068   3C10C4E5           STRB     R1,[R4, #+60]
    621                          Pressure    = 0.0;
   \   0000006C   010000EA           B        ??Calculate_3
    622                      }
    623                  } else {
    624                      HasPressure = false;
   \                     ??Calculate_2:
   \   00000070   5C01C4E5           STRB     R0,[R4, #+348]
    625                      HWFailure   = false;
   \   00000074   3C00C4E5           STRB     R0,[R4, #+60]
    626                      Pressure    = 0.0;
   \                     ??Calculate_3:
   \   00000078   745184E5           STR      R5,[R4, #+372]
    627                  }
    628              }
    629              if ( PROPtr ) {
    630                  //((PROTank*)PROPtr)->LPressurePtr// Can inform to tank object here
    631              }
    632              SendData();
   \                     ??Calculate_1:
   \   0000007C   A42094E5           LDR      R2,[R4, #+164]
   \   00000080   6510A0E3           MOV      R1,#+101
   \   00000084   402092E5           LDR      R2,[R2, #+64]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   0FE0A0E1           MOV      LR,PC
   \   00000090   12FF2FE1           BX       R2
    633          }
   \   00000094   ........           B        ??Subroutine27_0
    634          

   \                                 In segment CODE, align 4, keep-with-next
    635          void PROLinePressure::SimCalculate(void)
    636          {
   \                     ??SimCalculate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    637              IsNewData = true;
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   E000C6E5           STRB     R0,[R6, #+224]
    638              HWFailure  = false;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   3C10C6E5           STRB     R1,[R6, #+60]
    639              HasPressure = true;
   \   00000018   5C01C6E5           STRB     R0,[R6, #+348]
    640              if ( PROProjectInfo::SimulateFixedValues ) {
   \   0000001C   BC009FE5           LDR      R0,??SimCalculate_1  ;; ??SimulateFixedValues
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??SimCalculate_2
    641                  Pressure = (IDNumber & 0xFFFF);
   \   0000002C   9C0096E5           LDR      R0,[R6, #+156]
   \   00000030   0008A0E1           LSL      R0,R0,#+16
   \   00000034   2008A0E1           LSR      R0,R0,#+16
   \   00000038   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000003C   740186E5           STR      R0,[R6, #+372]
   \   00000040   250000EA           B        ??SimCalculate_3
    642              } else {
    643                  Pressure += SimulatorSign*(rand()%10)/100.0;
   \                     ??SimCalculate_2:
   \   00000044   ........           _BLF     rand,??rand??rA
   \   00000048   A87096E5           LDR      R7,[R6, #+168]
   \   0000004C   0A10A0E3           MOV      R1,#+10
   \   00000050   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000054   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   ........           _BLF     __fMul,??__fMul??rA
   \   00000060   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   4034A0E3           MOV      R3,#+1073741824
   \   0000006C   593883E3           ORR      R3,R3,#0x590000
   \   00000070   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000074   0040A0E1           MOV      R4,R0
   \   00000078   740196E5           LDR      R0,[R6, #+372]
   \   0000007C   0150A0E1           MOV      R5,R1
   \   00000080   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0530A0E1           MOV      R3,R5
   \   0000008C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000090   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000094   740186E5           STR      R0,[R6, #+372]
    644                  if ( Pressure > 140.0 || Pressure < 0.1 ) {
   \   00000098   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000009C   40309FE5           LDR      R3,??SimCalculate_1+0x4  ;; 0x40618000
   \   000000A0   0040A0E1           MOV      R4,R0
   \   000000A4   0150A0E1           MOV      R5,R1
   \   000000A8   0120A0E3           MOV      R2,#+1
   \   000000AC   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0600001A           BNE      ??SimCalculate_4
   \   000000B8   28209FE5           LDR      R2,??SimCalculate_1+0x8  ;; 0xffffffff9999999a
   \   000000BC   28309FE5           LDR      R3,??SimCalculate_1+0xC  ;; 0x3fb99999
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   0510A0E1           MOV      R1,R5
   \   000000C8   ........           _BLF     __dLess,??__dLess??rA
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0100000A           BEQ      ??SimCalculate_3
    645                      SimulatorSign = -SimulatorSign;
   \                     ??SimCalculate_4:
   \   000000D4   800427E2           EOR      R0,R7,#0x80000000
   \   000000D8   A80086E5           STR      R0,[R6, #+168]
    646                  }
    647              }
    648          }
   \                     ??SimCalculate_3:
   \   000000DC   ........           B        ?Subroutine31
   \                     ??SimCalculate_1:
   \   000000E0   ........           DC32     ??SimulateFixedValues
   \   000000E4   00806140           DC32     0x40618000
   \   000000E8   9A999999           DC32     0xffffffff9999999a
   \   000000EC   9999B93F           DC32     0x3fb99999

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    649          
    650          

   \                                 In segment CODE, align 4, keep-with-next
    651          int PROLinePressure::ReceiveData(U8* data)
    652          {
   \                     ??ReceiveData:
   \   00000000   04D04DE2           SUB      SP,SP,#+4
    653              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
    654              switch ( pCH->CommandNo ) {
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000010   650052E3           CMP      R2,#+101
   \   00000014   1100001A           BNE      ??ReceiveData_1
    655              case  CMD_GENERIC_REALTIME_DATA: // Real time Data
    656                  {
    657                      ANPRO10_COMMAND_2104  *pData = (ANPRO10_COMMAND_2104*) data;
    658                      HasPressure = pData->HasPressure;
   \   00000018   0820D1E5           LDRB     R2,[R1, #+8]
    659                      HWFailure   = pData->HWFailure;
    660                      IsNewData   = pData->IsNewData;
    661                      Pressure    = pData->Pressure;
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   5C21C0E5           STRB     R2,[R0, #+348]
   \   00000024   0920D1E5           LDRB     R2,[R1, #+9]
   \   00000028   3C20C0E5           STRB     R2,[R0, #+60]
   \   0000002C   0E20D1E5           LDRB     R2,[R1, #+14]
   \   00000030   E020C0E5           STRB     R2,[R0, #+224]
   \   00000034   0020A0E3           MOV      R2,#+0
   \                     ??ReceiveData_2:
   \   00000038   0AC081E2           ADD      R12,R1,#+10
   \   0000003C   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000040   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000044   012082E2           ADD      R2,R2,#+1
   \   00000048   040052E3           CMP      R2,#+4
   \   0000004C   F9FFFFBA           BLT      ??ReceiveData_2
   \   00000050   00109DE5           LDR      R1,[SP, #+0]
   \   00000054   741180E5           STR      R1,[R0, #+372]
    662                      if ( PROPtr ) {
    663                          // Can update tank value here
    664                      }
    665                      return(E_OK);
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   000000EA           B        ??ReceiveData_3
    666                  }
    667              case  CMD_GENERIC_STATIC_DATA: // Static Data
    668              default:
    669                  return(E_UNKNOWN_COMMAND);
   \                     ??ReceiveData_1:
   \   00000060   0100A0E3           MOV      R0,#+1
   \                     ??ReceiveData_3:
   \   00000064   0200BDE8           POP      {R1}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    670              };
    671          
    672          }
    673          

   \                                 In segment CODE, align 4, keep-with-next
    674          int PROLinePressure::SendData(U16 cmd)
    675          {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
    676              switch ( cmd ) {
   \   00000008   650051E3           CMP      R1,#+101
   \   0000000C   1F00001A           BNE      ??SendData_1
    677              case CMD_GENERIC_REALTIME_DATA:
    678                  {
    679                      QueueANPRO10_COMMAND_2104 Cmd;
    680          			Cmd.TxInfo.Port     = NULL;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    681                      Cmd.TxInfo.rxAddr   = DEVICE_BROADCAST_ADDR;
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   0420CDE5           STRB     R2,[SP, #+4]
    682                      Cmd.TxInfo.rxId     = DEVICE_BROADCAST_TXU;
   \   00000020   0E20A0E3           MOV      R2,#+14
   \   00000024   0520CDE5           STRB     R2,[SP, #+5]
    683                      Cmd.Data.ObjectId   = IDNumber;
   \   00000028   9C1090E5           LDR      R1,[R0, #+156]
    684                      Cmd.Data.ndb        = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   0000002C   0B20A0E3           MOV      R2,#+11
   \   00000030   0A10CDE5           STRB     R1,[SP, #+10]
   \   00000034   2114A0E1           LSR      R1,R1,#+8
   \   00000038   0B10CDE5           STRB     R1,[SP, #+11]
   \   0000003C   2114A0E1           LSR      R1,R1,#+8
   \   00000040   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000044   2114A0E1           LSR      R1,R1,#+8
   \   00000048   0D10CDE5           STRB     R1,[SP, #+13]
   \   0000004C   B820CDE1           STRH     R2,[SP, #+8]
    685                      Cmd.Data.CommandNo  = CMD_GENERIC_REALTIME_DATA;
   \   00000050   6520A0E3           MOV      R2,#+101
   \   00000054   B620CDE1           STRH     R2,[SP, #+6]
    686                      Cmd.Data.HasPressure= HasPressure;
   \   00000058   5C21D0E5           LDRB     R2,[R0, #+348]
   \   0000005C   0E20CDE5           STRB     R2,[SP, #+14]
    687                      Cmd.Data.HWFailure  = HWFailure;
   \   00000060   3C20D0E5           LDRB     R2,[R0, #+60]
   \   00000064   0F20CDE5           STRB     R2,[SP, #+15]
    688                      Cmd.Data.IsNewData  = IsNewData;
   \   00000068   E020D0E5           LDRB     R2,[R0, #+224]
   \   0000006C   1420CDE5           STRB     R2,[SP, #+20]
    689                      Cmd.Data.Pressure   = Pressure;
   \   00000070   740190E5           LDR      R0,[R0, #+372]
   \   00000074   10008DE5           STR      R0,[SP, #+16]
    690          
    691                      bool sent = ANPRO10SendNormal(&Cmd);
    692                      if ( !sent )
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0000A013           MOVNE    R0,#+0
    693                          return(E_QUEUE_FULL);
   \   00000088   0300A003           MOVEQ    R0,#+3
   \   0000008C   000000EA           B        ??SendData_2
    694                      else
    695                          return(E_OK);
    696                  }
    697              case CMD_GENERIC_STATIC_DATA :
    698              default:
    699                  return(E_UNKNOWN_COMMAND);
   \                     ??SendData_1:
   \   00000090   0100A0E3           MOV      R0,#+1
   \                     ??SendData_2:
   \   00000094   18D08DE2           ADD      SP,SP,#+24
   \   00000098                      REQUIRE ?Subroutine29
   \   00000098                      ;; // Fall through to label ?Subroutine29
    700              };
    701          }
    702          

   \                                 In segment CODE, align 4, keep-with-next
    703          int PROLinePressure::WriteXML(char *StrBuf, bool IncAlarms)
    704          {
    705          #ifdef ANWIN
    706          	AnsiString PressureStr = LibGetValue(SVT_PRESSURE, this, 0);
    707          	int LEDStatus = TPC_LED_OFF;
    708          	if ( !CompleteAlarmInfoList.empty() ) {
    709          		bool ActiveAlarm = false;
    710          		time_t NewestAlarmAct = 0;
    711          		time_t NewestAlarmAck = 0;
    712          		set<AlarmBasic *>::iterator pBIt;
    713          		for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
    714                      AlarmBasic *Element = *pBIt;
    715                      if ( Element ) {
    716                          switch ( Element->State ) {
    717                          case AlarmBasic::AlIdle :
    718                              break;
    719          				case AlarmBasic::AlActive :
    720                              if ( Element->Time_Rised > NewestAlarmAct ) {
    721                                  LEDStatus = TPC_LED_FLASH;
    722                              }
    723                              break;
    724                          case AlarmBasic::AlAknowledged :
    725                              if ( !ActiveAlarm && (Element->Time_Acknowledged > NewestAlarmAck) ) {
    726                                  LEDStatus = TPC_LED_ON;
    727                              }
    728                              break;
    729                          }
    730                      }
    731                  }
    732              }
    733          
    734              int  tmpPtr = sprintf(StrBuf, "\t<Packet>\r\n");
    735              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<PacketID>Freevalue</PacketID>\r\n");
    736              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<TagID>%s</TagID>\r\n", TagName.c_str());
    737              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Value>%s</Value>\r\n", PressureStr);
    738              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Alarm>%i</Alarm>\r\n", LEDStatus);
    739              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t</Packet>\r\n");
    740              return tmpPtr;
    741          #else
    742              return 0;
   \                     ??WriteXML:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    743          #endif
    744          }
    745          
    746          

   \                                 In segment CODE, align 4, keep-with-next
    747          AnsiString PROLinePressure::ZeroSetAllLinePressureSensors(bool Local)
    748          {
   \                     ??ZeroSetAllLinePressureSensors:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    749              AnsiString TmpString;
    750              set<PRogramObjectBase*>::iterator pBIt;
    751              for ( pBIt=ObjectSet.begin(); pBIt!=ObjectSet.end(); pBIt++ ) {
   \   00000004   ........           LDR      R6,??DataTable42  ;; ??ObjectSet
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   007096E5           LDR      R7,[R6, #+0]
   \   0000001C   100000EA           B        ??ZeroSetAllLinePressureSensors_1
    752                  TmpString += ((PROLinePressure*)(*pBIt))->ZeroSetLinePressureSensor(Local);
   \                     ??ZeroSetAllLinePressureSensors_2:
   \   00000020   100097E5           LDR      R0,[R7, #+16]
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   ........           BL       ??ZeroSetLinePressureSensor
   \   00000030   ........           LDR      R0,??DataTable43  ;; ??npos
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??append,??append??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
    753              }
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000060   0070A0E1           MOV      R7,R0
   \                     ??ZeroSetAllLinePressureSensors_1:
   \   00000064   060057E1           CMP      R7,R6
   \   00000068   ECFFFF1A           BNE      ??ZeroSetAllLinePressureSensors_2
    754              return(TmpString);
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28
   \   00000070                      REQUIRE ?Subroutine31
   \   00000070                      ;; // Fall through to label ?Subroutine31
    755          }
    756          

   \                                 In segment CODE, align 4, keep-with-next
    757          float PROLinePressure::GetHiHiPressLimit(void)
    758          {
    759              return HiHiPressLimit;
   \                     ??GetHiHiPressLimit:
   \   00000000   840190E5           LDR      R0,[R0, #+388]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    760          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LinePressValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 311, 237, 1024, 313, 237, 9124, 312, 237, 9123
   \              0000E8030000
   \              37010000ED00
   \              000000040000
   \              39010000ED00
   \              0000A4230000
   \              38010000ED00
   \              0000A3230000
   \   00000030   50040000ED00       DC32 1104, 237, 9122
   \              0000A2230000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Line pressure ">`:
   \   00000000   4C696E652070       DC8 "Line pressure "
   \              726573737572
   \              652000      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank pressure ">`:
   \   00000000   54616E6B2070       DC8 "Tank pressure "
   \              726573737572
   \              652000      
   \   0000000F   00                 DC8 0
   \   00000010   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   00000043   00                 DC8 0
   \   00000044   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000061   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A2000             DC8 ": "

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   302E3000           DC8 "0.0"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROLinePressure &PROLinePressure::new PROLinePressure(int, int, bool)
   \                     `??new PROLinePressure`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   650FA0E3           MOV      R0,#+404
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new PROLinePressure_2`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??PROLinePressure_1
   \                     `??new PROLinePressure_2`:
   \   00000030   ........           B        ??Subroutine27_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROLinePressure &PROLinePressure::new PROLinePressure(int, bool)
   \                     `??new PROLinePressure_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   650FA0E3           MOV      R0,#+404
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROLinePressure_3`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROLinePressure
   \                     `??new PROLinePressure_3`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable11  ;; ??ObjectSet
   \   00000008   48509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0C0085E2           ADD      R0,R5,#+12
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   1400C4E5           STRB     R0,[R4, #+20]
   \   00000048   180085E2           ADD      R0,R5,#+24
   \   0000004C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000050   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000058   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     ??HighLinePressLocked

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??LowLinePressLocked

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ??HiHiLinePressLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??HighLinePressLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     ??LowLinePressLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     ??PressLim_mBar

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   C74B3789           DC32     0xffffffff89374bc7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   41845840           DC32     0x40588441

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     ??npos
    761          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROLinePressure::Calculate()      16
     PROLinePressure::FindPROStatus(AnsiString &)
                                       60
     PROLinePressure::GetHiHiPressLimit()
                                        0
     PROLinePressure::GetStringValue(int, int, AnsiString &)
                                        8
     PROLinePressure::GetValue(int, int, float &, int &, int &)
                                       52
     PROLinePressure::GetValueInfoTable(int &, int)
                                        0
     PROLinePressure::GetValueInfoTableStatic(int &, int)
                                        0
     PROLinePressure::Initiate()        0
     PROLinePressure::LoadConfigFromFile(TSNConfigString &)
                                      288
     PROLinePressure::PROLinePressure(int, bool)
                                       40
     PROLinePressure::PROLinePressure(int, int, bool)
                                       40
     PROLinePressure::PutFloatValue(int, float)
                                        4
     PROLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                      192
     PROLinePressure::ReceiveData(unsigned char *)
                                        4
     PROLinePressure::RestoreSettings(TSNConfigString *)
                                      516
     PROLinePressure::SaveSettings(TSNConfigString *)
                                      332
     PROLinePressure::SendData(unsigned short)
                                       28
     PROLinePressure::SetAlarmLimits(float, float, float)
                                        0
     PROLinePressure::SimCalculate()
                                       20
     PROLinePressure::WriteConfigToFile(TSNConfigString &)
                                      552
     PROLinePressure::WriteXML(char *, bool)
                                        0
     PROLinePressure::ZeroSetAllLinePressureSensors(bool)
                                       48
     PROLinePressure::ZeroSetLinePressureSensor(bool)
                                      128
     PROLinePressure::new PROLinePressure(int, bool)
                                       12
     PROLinePressure::new PROLinePressure(int, int, bool)
                                       16
     PROLinePressure::~PROLinePressure()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                       16
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                       32
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                        8
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                        4
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                       20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(string const &, char const *)
                                       44
     operator+(string const &, char)
                                       40
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                     224
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                     232
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      28
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     operator+(string const &, char)
                                      76
     ?_0                              36
     PROLinePressure::ObjectSet       48
     PROLinePressure::PROLinePressure(int, bool)
                                     132
     ?Subroutine27                    40
     PROLinePressure::PROLinePressure(int, int, bool)
                                     136
     PROLinePressure::Initiate()     100
     PROLinePressure::~PROLinePressure()
                                     128
     PROLinePressure::SetAlarmLimits(float, float, float)
                                      28
     PROLinePressure::WriteConfigToFile(TSNConfigString &)
                                    2476
     ?Subroutine28                    12
     PROLinePressure::LoadConfigFromFile(TSNConfigString &)
                                    1364
     PROLinePressure::SaveSettings(TSNConfigString *)
                                     616
     PROLinePressure::RestoreSettings(TSNConfigString *)
                                     944
     PROLinePressure::ZeroSetLinePressureSensor(bool)
                                     216
     PROLinePressure::FindPROStatus(AnsiString &)
                                     288
     PROLinePressure::GetValue(int, int, float &, int &, int &)
                                     812
     PROLinePressure::GetStringValue(int, int, AnsiString &)
                                     128
     PROLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                    1020
     PROLinePressure::PutFloatValue(int, float)
                                      12
     ?Subroutine29                     8
     LinePressValueList               60
     PROLinePressure::GetValueInfoTable(int &, int)
                                      12
     ?Subroutine30                    12
     PROLinePressure::GetValueInfoTableStatic(int &, int)
                                       8
     PROLinePressure::Calculate()    152
     PROLinePressure::SimCalculate()
                                     240
     ?Subroutine31                     8
     PROLinePressure::ReceiveData(unsigned char *)
                                     108
     PROLinePressure::SendData(unsigned short)
                                     152
     PROLinePressure::WriteXML(char *, bool)
                                       8
     PROLinePressure::ZeroSetAllLinePressureSensors(bool)
                                     112
     PROLinePressure::GetHiHiPressLimit()
                                       8
     ?<Initializer for LinePressValueList>
                                      60
     ?<Constant "0x%0x">               8
     ?<Constant "Line pressure ">     16
     ?<Constant "Tank pressure ">    100
     ?<Constant ": ">                  3
     ?<Constant "0.0">                 4
     PROLinePressure::new PROLinePressure(int, int, bool)
                                      52
     PROLinePressure::new PROLinePressure(int, bool)
                                      48
     __sti__routine()                 92
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable27                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable36                     4
     ??DataTable37                     4
     ??DataTable38                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable43                     4
      Others                        1592

 
 15 364 bytes in segment CODE
    315 bytes in segment DATA_C
     60 bytes in segment DATA_I
     60 bytes in segment DATA_ID
     60 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 9 548 bytes of CODE  memory (+ 5 844 bytes shared)
   375 bytes of CONST memory
   120 bytes of DATA  memory

Errors: none
Warnings: none
