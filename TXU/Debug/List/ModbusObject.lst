##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusObject.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusObject.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusObject.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusObject.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusObject.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_3
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_4
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_3:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_4:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_5
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_6
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_6:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_7
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_8
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_9
   \                     ??_Erase_10:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_9:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_10
   \                     ??_Erase_8:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_7:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_11
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_12
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_12:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_11
   \                     ??_Erase_5:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_13
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_13:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_14
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_14:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_11:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_15
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_16
   \                     ??_Erase_17:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_18
   \                     ??_Erase_19:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_20:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_16:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_21
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_21
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_22
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_23
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_23:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_20
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_17
   \                     ??_Erase_18:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_24
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_21
   \                     ??_Erase_22:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_25
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_25:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_20
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_19
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_26
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_21:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_15:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_4
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_5
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_6
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_9
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Pairib _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::insert(ModbusUnit *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_18
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_19
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_20
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_23
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(ModbusObject *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairii _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::equal_range(ModbusObject *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_5
   \                     ??_Copy_2:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_5:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_6
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_7
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_7:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_6:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Erase(_Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_27
   \                     ??_Erase_28:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_27:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_28
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_29
   \                     ??_Erase_30:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_29:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_30
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::iterator _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr, ModbusUnit *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Lbound(ModbusObject *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Ubound(ModbusObject *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<ModbusObject *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<ModbusObject *>::set()
   \                     ??set:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1240BDE8           POP      {R1,R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs OS_TASK ** _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Insert(OS_TASK **, OS_TASK * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs OS_TASK ** _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Make_room(OS_TASK **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Push_back0(OS_TASK *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<OS_TASK *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          #ifdef S2TXU
      9          
     10          TSN_STACKPTR int ModbusObject::ModbusStack[4096];
     11          TSN_TASK ModbusObject::ExchangeDataTask;
     12          #endif
     13          
     14          #ifdef S2TXU
     15          OS_TASK *ModbusObject::ModbusTaskPtr       = NULL;
     16          vector<OS_TASK *>ModbusObject::ModbusTaskVector;
     17          
     18          OS_TASK *ModbusObject::ModbusUpdateTaskPtr = NULL;
     19          #endif
     20          

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable19  ;; ??ModbusSet
   \   00000008   38509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   300084E5           STR      R0,[R4, #+48]
   \   00000014   340084E5           STR      R0,[R4, #+52]
   \   00000018   380084E5           STR      R0,[R4, #+56]
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     21          set<ModbusObject *>ModbusObject::ModbusSet;
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??set,??set??rA
   \   0000002C   0C0085E2           ADD      R0,R5,#+12
   \   00000030   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     22          set<ModbusObject *>ModbusObject::MyModbusSet;
   \   00000034   180084E2           ADD      R0,R4,#+24
   \   00000038   ........           _BLF     ??set,??set??rA
   \   0000003C   180085E2           ADD      R0,R5,#+24
   \   00000040   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000044   ........           B        ?Subroutine36
   \                     ??__sti__routine_1:
   \   00000048   ........           DC32     ?_0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??ModbusTaskVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ModbusSet, `?~set`
   \              ............
   \   00000018   ............       DC32 ?_5, ??MyModbusSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ModbusSet:
   \   00000000                      DS8 24
   \                     ??MyModbusSet:
   \   00000018                      DS8 24
   \                     ??ModbusTaskVector:
   \   00000030                      DS8 12
   \                     ??ModbusStack:
   \   0000003C                      DS8 16384
   \                     ??ExchangeDataTask:
   \   0000403C                      DS8 64

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ModbusTaskPtr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ModbusUpdateTaskPtr:
   \   00000000                      DS8 4
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          ModbusObject::ModbusObject(void) : PRogramObject(false) {
   \                     ??ModbusObject:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
     25              ModbusSet.insert(this);
   \   00000004   ........           LDR      R5,??DataTable19  ;; ??ModbusSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??ModbusPro,??ModbusPro??rA
   \   0000001C   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   520F84E2           ADD      R0,R4,#+328
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??insert,??insert??rA
     26              IDNumber    = (C_PRO_MODBUS_OBJ << 16) + ModbusSet.size();
   \   0000003C   100095E5           LDR      R0,[R5, #+16]
   \   00000040   A016A0E3           MOV      R1,#+167772160
   \   00000044   F11881E3           ORR      R1,R1,#0xF10000
   \   00000048   000081E0           ADD      R0,R1,R0
   \   0000004C   9C0084E5           STR      R0,[R4, #+156]
     27              Type        = C_PRO_MODBUS_OBJ;
   \   00000050   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000054   A00084E5           STR      R0,[R4, #+160]
     28              TCUAddress  = -1;
   \   00000058   0000E0E3           MVN      R0,#+0
   \   0000005C   640184E5           STR      R0,[R4, #+356]
     29              TCUPortNo   = -1;
   \   00000060   680184E5           STR      R0,[R4, #+360]
     30              Address     = -1;
   \   00000064   6C0184E5           STR      R0,[R4, #+364]
     31              Channel     = -1;
   \   00000068   700184E5           STR      R0,[R4, #+368]
     32              IsActive    = false;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   7901C4E5           STRB     R0,[R4, #+377]
     33              IsCreatedFromMultiple = false;
   \   00000074   7801C4E5           STRB     R0,[R4, #+376]
     34          }
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     35          ModbusObject::~ModbusObject(void) {
   \                     `?~ModbusObject`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0F00000A           BEQ      `?~ModbusObject_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     36              ModbusSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable19  ;; ??ModbusSet
   \   00000024   ........           _BLF     ??erase_1,??erase??rA_1
     37          }
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   520F84E2           ADD      R0,R4,#+328
   \   00000034   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   00000044   010015E3           TST      R5,#0x1
   \   00000048   0100000A           BEQ      `?~ModbusObject_1`
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusObject_1`:
   \   00000054                      REQUIRE ?Subroutine36
   \   00000054                      ;; // Fall through to label ?Subroutine36

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine36:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     38          //---------------------------------------------------------------------------
     39          
     40          
     41          ///////////////////////////////////////////////////////////////
     42          //
     43          // Routines for the Configuration
     44          //
     45          ///////////////////////////////////////////////////////////////
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          AnsiString ModbusObject::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140A0E1           MOV      R4,R1
     48              AnsiString LocalString = KeyWord(Type);
   \   00000010   A01095E5           LDR      R1,[R5, #+160]
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??KeyWord,??KeyWord??rA
     49              int Length    = LocalString.Length();
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??Length,??Length??rA
   \   00000024   0060A0E1           MOV      R6,R0
     50              // Adjust to longest keyword to get some symentry
     51              int RefLength = KeyWord(C_PRO_MODBUS_COIL_HIST).Length();
   \   00000028   F910A0E3           MOV      R1,#+249
   \   0000002C   A01E81E3           ORR      R1,R1,#0xA00
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??Length,??Length??rA
   \   00000040   0070A0E1           MOV      R7,R0
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              for (int i = Length; i < RefLength; i++) {
   \   00000054   050000EA           B        ??MakeConfigString_1
     53                  LocalString += SpaceStr;
   \                     ??MakeConfigString_2:
   \   00000058   70119FE5           LDR      R1,??MakeConfigString_3  ;; SpaceStr
   \   0000005C   0830A0E1           MOV      R3,R8
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??append,??append??rA
     54              }
   \   0000006C   016086E2           ADD      R6,R6,#+1
   \                     ??MakeConfigString_1:
   \   00000070   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000074   070056E1           CMP      R6,R7
   \   00000078   008090E5           LDR      R8,[R0, #+0]
   \   0000007C   F5FFFFBA           BLT      ??MakeConfigString_2
     55              LocalString += TabStr1 + (AnsiString)TCUAddress;
   \   00000080   641195E5           LDR      R1,[R5, #+356]
   \   00000084   48619FE5           LDR      R6,??MakeConfigString_3+0x4  ;; TabStr1
   \   00000088   8C008DE2           ADD      R0,SP,#+140
   \   0000008C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000090   0020A0E1           MOV      R2,R0
   \   00000094   0610A0E1           MOV      R1,R6
   \   00000098   1C008DE2           ADD      R0,SP,#+28
   \   0000009C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A0   0830A0E1           MOV      R3,R8
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   1C108DE2           ADD      R1,SP,#+28
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   1C008DE2           ADD      R0,SP,#+28
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   8C008DE2           ADD      R0,SP,#+140
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
     56              LocalString += TabStr1 + (AnsiString)TCUPortNo;
   \   000000D4   681195E5           LDR      R1,[R5, #+360]
   \   000000D8   A8008DE2           ADD      R0,SP,#+168
   \   000000DC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000E0   0020A0E1           MOV      R2,R0
   \   000000E4   0610A0E1           MOV      R1,R6
   \   000000E8   38008DE2           ADD      R0,SP,#+56
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   38108DE2           ADD      R1,SP,#+56
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   38008DE2           ADD      R0,SP,#+56
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   A8008DE2           ADD      R0,SP,#+168
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              LocalString += TabStr1 + (AnsiString)Address;
   \   00000124   6C1195E5           LDR      R1,[R5, #+364]
   \   00000128   C4008DE2           ADD      R0,SP,#+196
   \   0000012C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000130   0020A0E1           MOV      R2,R0
   \   00000134   0610A0E1           MOV      R1,R6
   \   00000138   54008DE2           ADD      R0,SP,#+84
   \   0000013C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000140   0830A0E1           MOV      R3,R8
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   54108DE2           ADD      R1,SP,#+84
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           _BLF     ??append,??append??rA
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   54008DE2           ADD      R0,SP,#+84
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   C4008DE2           ADD      R0,SP,#+196
   \   00000170   ........           _BLF     ??_Tidy,??_Tidy??rA
     58              LocalString += TabStr1 + (AnsiString)Channel;
   \   00000174   701195E5           LDR      R1,[R5, #+368]
   \   00000178   E0008DE2           ADD      R0,SP,#+224
   \   0000017C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000180   0020A0E1           MOV      R2,R0
   \   00000184   0610A0E1           MOV      R1,R6
   \   00000188   70008DE2           ADD      R0,SP,#+112
   \   0000018C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000190   0830A0E1           MOV      R3,R8
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   70108DE2           ADD      R1,SP,#+112
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           _BLF     ??append,??append??rA
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   70008DE2           ADD      R0,SP,#+112
   \   000001B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   E0008DE2           ADD      R0,SP,#+224
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              return (LocalString);
   \   000001C4   FCD08DE2           ADD      SP,SP,#+252
   \   000001C8   F041BDE8           POP      {R4-R8,LR}
   \   000001CC   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_3:
   \   000001D0   ........           DC32     SpaceStr
   \   000001D4   ........           DC32     TabStr1
     60          }
     61          //---------------------------------------------------------------------------
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          bool ModbusObject::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   0150A0E1           MOV      R5,R1
     64          
     65              SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
     66              int ErrorLine = 0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     67              TCUAddress = ConfigString.ReadLong(ErrorLine);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000030   640184E5           STR      R0,[R4, #+356]
     68              if (!ErrorLine) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   C000001A           BNE      ??LoadConfigString_1
     69                  IPAddress = ConfigString.NextWord(ErrorLine);
   \   00000040   0030A0E3           MOV      R3,#+0
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   74108DE2           ADD      R1,SP,#+116
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000054   ........           LDR      R0,??DataTable7  ;; ??npos
   \   00000058   528FA0E3           MOV      R8,#+328
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   74108DE2           ADD      R1,SP,#+116
   \   00000068   040088E0           ADD      R0,R8,R4
   \   0000006C   ........           _BLF     ??assign,??assign??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   74008DE2           ADD      R0,SP,#+116
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     70                  if (IPAddress.AnsiPos(":") || IPAddress.AnsiPos(".")) {
   \   00000080   0060A0E3           MOV      R6,#+0
   \   00000084   ........           ADR      R1,??Subroutine37_0  ;; ":"
   \   00000088   B4008DE2           ADD      R0,SP,#+180
   \   0000008C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000090   0010A0E1           MOV      R1,R0
   \   00000094   040088E0           ADD      R0,R8,R4
   \   00000098   ........           _BLF     ??AnsiPos,??AnsiPos??rA
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0800001A           BNE      ??LoadConfigString_2
   \   000000A4   ........           ADR      R1,??Subroutine37_0+0x4  ;; "."
   \   000000A8   90008DE2           ADD      R0,SP,#+144
   \   000000AC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B0   0160A0E3           MOV      R6,#+1
   \   000000B4   90108DE2           ADD      R1,SP,#+144
   \   000000B8   040088E0           ADD      R0,R8,R4
   \   000000BC   ........           _BLF     ??AnsiPos,??AnsiPos??rA
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300000A           BEQ      ??LoadConfigString_3
   \                     ??LoadConfigString_2:
   \   000000C8   0190A0E3           MOV      R9,#+1
   \   000000CC   000056E3           CMP      R6,#+0
   \   000000D0   0100001A           BNE      ??LoadConfigString_4
   \   000000D4   040000EA           B        ??LoadConfigString_5
   \                     ??LoadConfigString_3:
   \   000000D8   0090A0E3           MOV      R9,#+0
   \                     ??LoadConfigString_4:
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   90008DE2           ADD      R0,SP,#+144
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??LoadConfigString_5:
   \   000000EC   ........           LDR      R6,??Subroutine37_0+0x8  ;; `?<Constant "Modbus: TCU port is n...">`
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   B4008DE2           ADD      R0,SP,#+180
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   ........           ADR      R7,??DataTable6  ;; ""
   \   00000104   000059E3           CMP      R9,#+0
   \   00000108   0700000A           BEQ      ??LoadConfigString_6
     71                      TCUPortNo = inet_aton(IPAddress.c_str());
   \   0000010C   040088E0           ADD      R0,R8,R4
   \   00000110   181090E5           LDR      R1,[R0, #+24]
   \   00000114   100051E3           CMP      R1,#+16
   \   00000118   04009025           LDRCS    R0,[R0, #+4]
   \   0000011C   04008032           ADDCC    R0,R0,#+4
   \   00000120   ........           _BLF     ??inet_aton,??inet_aton??rA
   \   00000124   680184E5           STR      R0,[R4, #+360]
   \   00000128   2B0000EA           B        ??LoadConfigString_7
     72                  } else {
     73                      ConfigString.SetToPreviousWord();
   \                     ??LoadConfigString_6:
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           _BLF     ??SetToPreviousWord,??SetToPreviousWord??rA
     74                      TCUPortNo = ConfigString.ReadLong(ErrorLine);
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0D10A0E1           MOV      R1,SP
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000144   680184E5           STR      R0,[R4, #+360]
     75                      if (TCUPortNo < 0) {
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   2200005A           BPL      ??LoadConfigString_7
     76                          ErrorLine = ConfigString.LineCount;
   \   00000150   1C1095E5           LDR      R1,[R5, #+28]
     77                          GiveConfigWarning((AnsiString)"Modbus: TCU port is negative" + Name, "", ConfigString.LineCount);
   \   00000154   20008DE2           ADD      R0,SP,#+32
   \   00000158   00108DE5           STR      R1,[SP, #+0]
   \   0000015C   0710A0E1           MOV      R1,R7
   \   00000160   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000164   0080A0E1           MOV      R8,R0
   \   00000168   0610A0E1           MOV      R1,R6
   \   0000016C   58008DE2           ADD      R0,SP,#+88
   \   00000170   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000174   0010A0E1           MOV      R1,R0
   \   00000178   442084E2           ADD      R2,R4,#+68
   \   0000017C   04008DE2           ADD      R0,SP,#+4
   \   00000180   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000184   04108DE2           ADD      R1,SP,#+4
   \   00000188   3C008DE2           ADD      R0,SP,#+60
   \   0000018C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000190   1C2095E5           LDR      R2,[R5, #+28]
   \   00000194   0810A0E1           MOV      R1,R8
   \   00000198   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   20008DE2           ADD      R0,SP,#+32
   \   000001A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   3C008DE2           ADD      R0,SP,#+60
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   04008DE2           ADD      R0,SP,#+4
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   58008DE2           ADD      R0,SP,#+88
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     78                      }
     79                  }
     80                  if (!ErrorLine) {
   \                     ??LoadConfigString_7:
   \   000001DC   00009DE5           LDR      R0,[SP, #+0]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   5600001A           BNE      ??LoadConfigString_1
     81                      Address = ConfigString.ReadLong(ErrorLine);
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0D10A0E1           MOV      R1,SP
   \   000001F0   0500A0E1           MOV      R0,R5
   \   000001F4   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001F8   6C0184E5           STR      R0,[R4, #+364]
     82                      if (Address < 0) {
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   2200005A           BPL      ??LoadConfigString_8
     83                          ErrorLine = ConfigString.LineCount;
   \   00000204   1C1095E5           LDR      R1,[R5, #+28]
     84                          GiveConfigWarning((AnsiString)"Modbus: Address is negative" + Name, "", ConfigString.LineCount);
   \   00000208   3C008DE2           ADD      R0,SP,#+60
   \   0000020C   00108DE5           STR      R1,[SP, #+0]
   \   00000210   0710A0E1           MOV      R1,R7
   \   00000214   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000218   0080A0E1           MOV      R8,R0
   \   0000021C   201086E2           ADD      R1,R6,#+32
   \   00000220   58008DE2           ADD      R0,SP,#+88
   \   00000224   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000228   442084E2           ADD      R2,R4,#+68
   \   0000022C   0010A0E1           MOV      R1,R0
   \   00000230   20008DE2           ADD      R0,SP,#+32
   \   00000234   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000238   20108DE2           ADD      R1,SP,#+32
   \   0000023C   04008DE2           ADD      R0,SP,#+4
   \   00000240   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000244   1C2095E5           LDR      R2,[R5, #+28]
   \   00000248   0810A0E1           MOV      R1,R8
   \   0000024C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   3C008DE2           ADD      R0,SP,#+60
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   04008DE2           ADD      R0,SP,#+4
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   20008DE2           ADD      R0,SP,#+32
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   58008DE2           ADD      R0,SP,#+88
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
     85                      }
     86                      if (!ErrorLine) {
   \                     ??LoadConfigString_8:
   \   00000290   00009DE5           LDR      R0,[SP, #+0]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   2900001A           BNE      ??LoadConfigString_1
     87                          Channel = ConfigString.ReadInteger(ErrorLine);
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0D10A0E1           MOV      R1,SP
   \   000002A4   0500A0E1           MOV      R0,R5
   \   000002A8   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   000002AC   700184E5           STR      R0,[R4, #+368]
     88                          if (Channel < 0) {
   \   000002B0   000050E3           CMP      R0,#+0
   \   000002B4   2200005A           BPL      ??LoadConfigString_1
     89                              ErrorLine = ConfigString.LineCount;
   \   000002B8   1C1095E5           LDR      R1,[R5, #+28]
     90                              GiveConfigWarning((AnsiString)"Modbus: Index is negative" + Name, "", ConfigString.LineCount);
   \   000002BC   58008DE2           ADD      R0,SP,#+88
   \   000002C0   00108DE5           STR      R1,[SP, #+0]
   \   000002C4   0710A0E1           MOV      R1,R7
   \   000002C8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002CC   0070A0E1           MOV      R7,R0
   \   000002D0   3C1086E2           ADD      R1,R6,#+60
   \   000002D4   3C008DE2           ADD      R0,SP,#+60
   \   000002D8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002DC   442084E2           ADD      R2,R4,#+68
   \   000002E0   0010A0E1           MOV      R1,R0
   \   000002E4   04008DE2           ADD      R0,SP,#+4
   \   000002E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002EC   04108DE2           ADD      R1,SP,#+4
   \   000002F0   20008DE2           ADD      R0,SP,#+32
   \   000002F4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000002F8   1C2095E5           LDR      R2,[R5, #+28]
   \   000002FC   0710A0E1           MOV      R1,R7
   \   00000300   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   0110A0E3           MOV      R1,#+1
   \   0000030C   58008DE2           ADD      R0,SP,#+88
   \   00000310   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   0110A0E3           MOV      R1,#+1
   \   0000031C   20008DE2           ADD      R0,SP,#+32
   \   00000320   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   04008DE2           ADD      R0,SP,#+4
   \   00000330   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   0110A0E3           MOV      R1,#+1
   \   0000033C   3C008DE2           ADD      R0,SP,#+60
   \   00000340   ........           _BLF     ??_Tidy,??_Tidy??rA
     91                          }
     92                      }
     93                  }
     94              }
     95              if (!ErrorLine && (TCUAddress == CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU)) {
   \                     ??LoadConfigString_1:
   \   00000344   00009DE5           LDR      R0,[SP, #+0]
   \   00000348   000050E3           CMP      R0,#+0
   \   0000034C   0B00001A           BNE      ??LoadConfigString_9
   \   00000350   ........           LDR      R1,??DataTable16  ;; CurrentDeviceAddress
   \   00000354   640194E5           LDR      R0,[R4, #+356]
   \   00000358   F010D1E1           LDRSH    R1,[R1, #+0]
   \   0000035C   010050E1           CMP      R0,R1
   \   00000360   ........           LDREQ    R0,??Subroutine37_0+0xC  ;; CurrentDeviceId
   \   00000364   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   00000368   20005003           CMPEQ    R0,#+32
   \   0000036C   0600001A           BNE      ??LoadConfigString_10
     96                  MyModbusSet.insert(this);
   \   00000370   ........           LDR      R1,??Subroutine37_0+0x10  ;; ??ModbusSet + 24
   \   00000374   0420A0E1           MOV      R2,R4
   \   00000378   AC008DE2           ADD      R0,SP,#+172
   \   0000037C   ........           _BLF     ??insert,??insert??rA
     97              }
     98              return !ErrorLine;
   \                     ??LoadConfigString_9:
   \   00000380   00009DE5           LDR      R0,[SP, #+0]
   \   00000384   000050E3           CMP      R0,#+0
   \   00000388   0100001A           BNE      ??LoadConfigString_11
   \                     ??LoadConfigString_10:
   \   0000038C   0100A0E3           MOV      R0,#+1
   \   00000390   000000EA           B        ??LoadConfigString_12
   \                     ??LoadConfigString_11:
   \   00000394   0000A0E3           MOV      R0,#+0
   \                     ??LoadConfigString_12:
   \   00000398   D0D08DE2           ADD      SP,SP,#+208
   \   0000039C                      REQUIRE ?Subroutine37
   \   0000039C                      ;; // Fall through to label ?Subroutine37
     99          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine37:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine37_0:
   \   00000008   3A000000           DC8      ":",+0,+0
   \   0000000C   2E000000           DC8      ".",+0,+0
   \   00000010   ........           DC32     `?<Constant "Modbus: TCU port is n...">`
   \   00000014   ........           DC32     CurrentDeviceId
   \   00000018   ........           DC32     ??ModbusSet + 24
    100          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    101          void ModbusObject::SetAlarmList(void) {
    102          }
   \                     ??SetAlarmList:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    103          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    104          void ModbusObject::SetProList(void) {
    105          }
   \                     ??SetProList:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    106          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    107          bool ModbusObject::AddressMatch(int TCUAddr, int TCUPort, int Addr, int Chn) {
   \                     ??AddressMatch:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10609DE5           LDR      R6,[SP, #+16]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0350A0E1           MOV      R5,R3
    108              return (TCUPortMatch(TCUAddr, TCUPort) && Addr == Address && Chn == Channel);
   \   00000010   ........           BL       ??TCUPortMatch
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500000A           BEQ      ??AddressMatch_1
   \   0000001C   6C0194E5           LDR      R0,[R4, #+364]
   \   00000020   000055E1           CMP      R5,R0
   \   00000024   70019405           LDREQ    R0,[R4, #+368]
   \   00000028   00005601           CMPEQ    R6,R0
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   0000A013           MOVNE    R0,#+0
   \                     ??AddressMatch_1:
   \   00000034   ........           B        ?Subroutine38
    109          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine38:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    110          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    111          bool ModbusObject::TCUPortMatch(int TCUAddr, int TCUPort) {
    112              return ((TCUAddr == TCUAddress) && (TCUPort == TCUPortNo));
   \                     ??TCUPortMatch:
   \   00000000   643190E5           LDR      R3,[R0, #+356]
   \   00000004   030051E1           CMP      R1,R3
   \   00000008   68019005           LDREQ    R0,[R0, #+360]
   \   0000000C   00005201           CMPEQ    R2,R0
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   ........           B        ?Subroutine39
    113          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    114          
    115          //----------------------------------------------------------------------------
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          void ModbusObject::InitMap(void) {
   \                     ??InitMap:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    118              set<ModbusObject *>::iterator pBIt;
    119              for (pBIt = ModbusSet.begin(); pBIt != ModbusSet.end(); pBIt++) {
   \   00000004   ........           LDR      R4,??DataTable19  ;; ??ModbusSet
   \   00000008   005094E5           LDR      R5,[R4, #+0]
   \   0000000C   130000EA           B        ??InitMap_1
    120                  ModbusObject *tmpPtr = *pBIt;
    121                  ModbusUnit::InsertInMap((*pBIt)->TCUAddress, (*pBIt)->TCUPortNo, (*pBIt)->Address, (*pBIt)->Type, (*pBIt)->Channel);
   \                     ??InitMap_2:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   700190E5           LDR      R0,[R0, #+368]
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   100095E5           LDR      R0,[R5, #+16]
   \   0000002C   A03090E5           LDR      R3,[R0, #+160]
   \   00000030   6C2190E5           LDR      R2,[R0, #+364]
   \   00000034   681190E5           LDR      R1,[R0, #+360]
   \   00000038   640190E5           LDR      R0,[R0, #+356]
   \   0000003C   FF2002E2           AND      R2,R2,#0xFF
   \   00000040   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000044   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000048   FF0000E2           AND      R0,R0,#0xFF
   \   0000004C   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    122              }
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   0CD08DE2           ADD      SP,SP,#+12
   \                     ??InitMap_1:
   \   00000060   040055E1           CMP      R5,R4
   \   00000064   E9FFFF1A           BNE      ??InitMap_2
    123          }
   \   00000068   ........           B        ?Subroutine36
    124          
    125          //--------------------------------------------------------------------------- '

   \                                 In segment CODE, align 4, keep-with-next
    126          bool ModbusObject::ChannelIsReserved(set<ModbusObject *>MySet, int Addr, int Chn) {
   \                     ??ChannelIsReserved:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    127              bool IsReserved = false;
    128              set<ModbusObject *>::iterator pBIt;
    129              for (pBIt = ModbusSet.begin(); !IsReserved && pBIt != ModbusSet.end(); pBIt++) {
   \   00000004   ........           LDR      R7,??DataTable19  ;; ??ModbusSet
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   000097E5           LDR      R0,[R7, #+0]
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0060A0E3           MOV      R6,#+0
   \                     ??ChannelIsReserved_1:
   \   00000018   070050E1           CMP      R0,R7
   \   0000001C   0A00000A           BEQ      ??ChannelIsReserved_2
    130                  ModbusObject *TempWago = *pBIt;
   \   00000020   101090E5           LDR      R1,[R0, #+16]
    131                  if (TempWago && TempWago->Address == Addr && TempWago->Channel == Chn) {
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0400000A           BEQ      ??ChannelIsReserved_3
   \   0000002C   6C2191E5           LDR      R2,[R1, #+364]
   \   00000030   040052E1           CMP      R2,R4
   \   00000034   70119105           LDREQ    R1,[R1, #+368]
   \   00000038   05005101           CMPEQ    R1,R5
    132                      IsReserved = true;
   \   0000003C   0160A003           MOVEQ    R6,#+1
    133                  }
    134              }
   \                     ??ChannelIsReserved_3:
   \   00000040   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   F2FFFF0A           BEQ      ??ChannelIsReserved_1
    135          
    136              return (IsReserved);
   \                     ??ChannelIsReserved_2:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           B        ?Subroutine40
    137          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine40:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    138          
    139          //---------------------------------------------------------------------------
    140          

   \                                 In segment CODE, align 4, keep-with-next
    141          int ModbusObject::FindFirstFree(set<ModbusObject *>MySet, int Addr, int FirstChannel) {
   \                     ??FindFirstFree:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    142              int ChnCnt = FirstChannel;
   \   00000014   000000EA           B        ??FindFirstFree_1
    143              while (ChannelIsReserved(MySet, Addr, ChnCnt))  ChnCnt++;
   \                     ??FindFirstFree_2:
   \   00000018   016086E2           ADD      R6,R6,#+1
   \                     ??FindFirstFree_1:
   \   0000001C   1470D4E5           LDRB     R7,[R4, #+20]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000028   1470CDE5           STRB     R7,[SP, #+20]
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??_Copy,??_Copy??rA_1
   \   00000038   0620A0E1           MOV      R2,R6
   \   0000003C   0510A0E1           MOV      R1,R5
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           BL       ??ChannelIsReserved
   \   00000048   0070A0E1           MOV      R7,R0
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??clear,??clear??rA
   \   00000054   000057E3           CMP      R7,#+0
   \   00000058   EEFFFF1A           BNE      ??FindFirstFree_2
    144              return (ChnCnt);
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   18D08DE2           ADD      SP,SP,#+24
   \   00000064                      REQUIRE ?Subroutine40
   \   00000064                      ;; // Fall through to label ?Subroutine40
    145          }
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          int ModbusObject::LastChannel(set<ModbusObject *>MySet, int Addr) {
   \                     ??LastChannel:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    148              int MaxChn = -1;
    149              set<ModbusObject *>::iterator pBIt;
    150              for (pBIt = ModbusSet.begin(); pBIt != ModbusSet.end(); pBIt++) {
   \   00000004   ........           LDR      R6,??DataTable19  ;; ??ModbusSet
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   000096E5           LDR      R0,[R6, #+0]
   \   00000010   0050E0E3           MVN      R5,#+0
   \   00000014   070000EA           B        ??LastChannel_1
    151                  ModbusObject *TempWago = *pBIt;
   \                     ??LastChannel_2:
   \   00000018   101090E5           LDR      R1,[R0, #+16]
    152                  if (TempWago->Address == Addr && TempWago->Channel > MaxChn) {
   \   0000001C   6C2191E5           LDR      R2,[R1, #+364]
   \   00000020   040052E1           CMP      R2,R4
   \   00000024   0200001A           BNE      ??LastChannel_3
   \   00000028   701191E5           LDR      R1,[R1, #+368]
   \   0000002C   010055E1           CMP      R5,R1
    153                      MaxChn = TempWago->Channel;
   \   00000030   0150A0B1           MOVLT    R5,R1
    154                  }
    155              }
   \                     ??LastChannel_3:
   \   00000034   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??LastChannel_1:
   \   00000038   060050E1           CMP      R0,R6
   \   0000003C   F5FFFF1A           BNE      ??LastChannel_2
    156              return (MaxChn);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044                      REQUIRE ?Subroutine38
   \   00000044                      ;; // Fall through to label ?Subroutine38
    157          }
    158          

   \                                 In segment CODE, align 4, keep-with-next
    159          ModbusUnit* ModbusObject::FindUnit(void) {
   \                     ??FindUnit:
   \   00000000   00402DE9           PUSH     {LR}
    160              ModbusUnit *tmpPtr = ModbusUnit::FindDevice(TCUAddress, TCUPortNo, Address);
    161              return tmpPtr;
   \   00000004   6C2190E5           LDR      R2,[R0, #+364]
   \   00000008   681190E5           LDR      R1,[R0, #+360]
   \   0000000C   640190E5           LDR      R0,[R0, #+356]
   \   00000010   FF2002E2           AND      R2,R2,#0xFF
   \   00000014   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000018   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000001C   FF0000E2           AND      R0,R0,#0xFF
   \   00000020   ........           _BLF     ??FindDevice,??FindDevice??rA
   \   00000024   ........           B        ??Subroutine35_0
    162          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine35:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
   \   00000008   ........           ADR      R1,??DataTable21  ;; ""
   \   0000000C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \                     ??Subroutine35_0:
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return
    163          
    164          

   \                                 In segment CODE, align 4, keep-with-next
    165          void ModbusObject::ExchangeData(void) {
   \                     ??ExchangeData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    166          #ifdef S2TXU
    167              OS_Delay(10000);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ??ModbusSet
   \   00000008   1000A0E3           MOV      R0,#+16
   \   0000000C   9C0D80E3           ORR      R0,R0,#0x2700
   \   00000010   0C0000EA           B        ??ExchangeData_1
    168              FOREVER{
    169                  set<ModbusObject *>::iterator pBIt;
    170                  for (pBIt = MyModbusSet.begin(); pBIt != MyModbusSet.end(); pBIt++) {
    171                      (*pBIt)->Update();
   \                     ??ExchangeData_2:
   \   00000014   101094E5           LDR      R1,[R4, #+16]
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   A41091E5           LDR      R1,[R1, #+164]
   \   00000020   841091E5           LDR      R1,[R1, #+132]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   11FF2FE1           BX       R1
    172                  }
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000034   0040A0E1           MOV      R4,R0
   \                     ??ExchangeData_3:
   \   00000038   180085E2           ADD      R0,R5,#+24
   \   0000003C   000054E1           CMP      R4,R0
   \   00000040   F3FFFF1A           BNE      ??ExchangeData_2
    173                  OS_Delay(MODBUS_UPDATE_INTERVAL);
   \   00000044   7D0EA0E3           MOV      R0,#+2000
   \                     ??ExchangeData_1:
   \   00000048   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   0000004C   184095E5           LDR      R4,[R5, #+24]
   \   00000050   F8FFFFEA           B        ??ExchangeData_3
    174              }
    175          #endif
    176          }
    177          

   \                                 In segment CODE, align 4, keep-with-next
    178          void ModbusObject::StartExchangeData(void) {
    179          #ifdef S2TXU
    180              if (!MyModbusSet.empty()) {
   \                     ??StartExchangeData:
   \   00000000   ........           LDR      R0,??DataTable17  ;; ??ModbusSet
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   281090E5           LDR      R1,[R0, #+40]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0D00000A           BEQ      ??StartExchangeData_1
    181                  CREATE_TASK(&ExchangeDataTask, "MBDataExchange", ExchangeData, 135, ModbusStack);
   \   00000014   34309FE5           LDR      R3,??StartExchangeData_2  ;; ??ExchangeData
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   401CA0E3           MOV      R1,#+16384
   \   00000024   02002DE9           PUSH     {R1}
   \   00000028   3C1080E2           ADD      R1,R0,#+60
   \   0000002C   02002DE9           PUSH     {R1}
   \   00000030   1C109FE5           LDR      R1,??StartExchangeData_2+0x4  ;; `?<Constant "MBDataExchange">`
   \   00000034   8720A0E3           MOV      R2,#+135
   \   00000038   3CC0A0E3           MOV      R12,#+60
   \   0000003C   40CC8CE3           ORR      R12,R12,#0x4000
   \   00000040   00008CE0           ADD      R0,R12,R0
   \   00000044   ........           _BLF     OS_CreateTask_SP,??OS_CreateTask_SP??rA
   \   00000048   0CD08DE2           ADD      SP,SP,#+12
    182              }
    183          #endif
    184          }
   \                     ??StartExchangeData_1:
   \   0000004C   ........           B        ??Subroutine35_0
   \                     ??StartExchangeData_2:
   \   00000050   ........           DC32     ??ExchangeData
   \   00000054   ........           DC32     `?<Constant "MBDataExchange">`
    185          

   \                                 In segment CODE, align 4, keep-with-next
    186          void ModbusObject::HandleRequest(TSNUart *Port, int FrameTimeOut, int FrameSpaceTime) {
   \                     ??HandleRequest:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   40DE4DE2           SUB      SP,SP,#+1024
   \   00000008   0040A0E1           MOV      R4,R0
    187              U8 ReplyData[MAX_RESPONSE_LENGTH];
    188              int ByteCnt = Receive_Response(Port, ReplyData, MBUS_REQUEST_TIMEOUT, FrameSpaceTime, FrameTimeOut);
   \   0000000C   02002DE9           PUSH     {R1}
   \   00000010   0230A0E1           MOV      R3,R2
   \   00000014   7D2FA0E3           MOV      R2,#+500
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   ........           _BLF     ??Receive_Response,??Receive_Response??rA
   \   00000020   0060A0E1           MOV      R6,R0
    189              int Offset;
    190              bool CheckSumOk;
    191              if (ByteCnt >= 6) {
   \   00000024   060056E3           CMP      R6,#+6
   \   00000028   04D08DE2           ADD      SP,SP,#+4
   \   0000002C   300000BA           BLT      ??HandleRequest_3
    192                  switch (Port->Device) {
   \   00000030   A80094E5           LDR      R0,[R4, #+168]
   \   00000034   6A0040E2           SUB      R0,R0,#+106
   \   00000038   7C0D40E2           SUB      R0,R0,#+7936
   \   0000003C   070050E3           CMP      R0,#+7
   \   00000040   0A00008A           BHI      ??HandleRequest_4
   \   00000044   011F8FE2           ADR      R1,??HandleRequest_1
   \   00000048   0010D1E7           LDRB     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HandleRequest_1:
   \   00000050   01070701           DC8      +1,+7,+7,+1
   \   00000054   07070101           DC8      +7,+7,+1,+1
    193                  case C_UART_DEVICE_MODICON_MASTER_TCP   :
    194                  case C_UART_DEVICE_MODICON_SLAVE_TCP    :
    195                  case C_UART_DEVICE_MODBUS_SLAVE_TCP     :
    196                  case C_UART_DEVICE_MODBUS_MASTER_TCP    :
    197                      Offset     = MODBUS_INDEX_TCP_OFFSET;
    198                      CheckSumOk = true;
    199                      Port->TransactionNumber = (ReplyData[1] << 8) | ReplyData[0];
   \                     ??HandleRequest_5:
   \   00000058   0100DDE5           LDRB     R0,[SP, #+1]
   \   0000005C   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000060   0650A0E3           MOV      R5,#+6
   \   00000064   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000068   5C0084E5           STR      R0,[R4, #+92]
   \   0000006C   0E0000EA           B        ??HandleRequest_6
    200                      break;
    201                  case C_UART_DEVICE_MODICON_MASTER       :
    202                  case C_UART_DEVICE_MODICON_SLAVE        :
    203                  case C_UART_DEVICE_MODBUS_SLAVE_INV     :
    204                  case C_UART_DEVICE_MODBUS_SLAVE         :
    205                  case C_UART_DEVICE_MODBUS_MASTER        :
    206                  case C_UART_DEVICE_MODBUS_MASTER_INV    :
    207                  default:
    208                      Offset = 0;
    209                      {
    210                          U16 Crc_calc = FastCalcCRC(ReplyData, ByteCnt - 2);
   \                     ??HandleRequest_4:
   \   00000070   021046E2           SUB      R1,R6,#+2
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           _BLF     ??FastCalcCRC,??FastCalcCRC??rA
    211          
    212                          U8 Recv_crc_hi = ReplyData[ByteCnt - 2];
    213                          U8 Recv_crc_lo = ReplyData[ByteCnt - 1];
    214          
    215                          U16 CRC_Received  = (Recv_crc_hi << 8) | Recv_crc_lo;
    216                          CheckSumOk = Crc_calc == CRC_Received;
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   011086E0           ADD      R1,R6,R1
   \   00000084   022071E5           LDRB     R2,[R1, #-2]!
   \   00000088   0110D1E5           LDRB     R1,[R1, #+1]
   \   0000008C   0050A0E3           MOV      R5,#+0
   \   00000090   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000094   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000098   200851E1           CMP      R1,R0, LSR #+16
   \   0000009C   0200000A           BEQ      ??HandleRequest_6
   \   000000A0   5800D4E5           LDRB     R0,[R4, #+88]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   1200000A           BEQ      ??HandleRequest_7
    217                      }
    218                      break;
    219                  }
    220          
    221          
    222                  /*********** check CRC of response ************/
    223          
    224                  if (CheckSumOk || Port->Relaxed) {
    225                      ModbusUnit *tmpMBUnit = ModbusUnit::FindDevice(CurrentDeviceAddress, Port->PortNumber, ReplyData[MODBUS_INDEX_SLAVE_ADDRESS + Offset]);
   \                     ??HandleRequest_6:
   \   000000AC   801094E5           LDR      R1,[R4, #+128]
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   005085E0           ADD      R5,R5,R0
   \   000000B8   ........           LDR      R0,??DataTable16  ;; CurrentDeviceAddress
   \   000000BC   0020D5E5           LDRB     R2,[R5, #+0]
   \   000000C0   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000000C4   0118A0E1           MOV      R1,R1, LSL #+16
   \   000000C8   2118A0E1           MOV      R1,R1, LSR #+16
   \   000000CC   FF0000E2           AND      R0,R0,#0xFF
   \   000000D0   ........           _BLF     ??FindDevice,??FindDevice??rA
   \   000000D4   0060B0E1           MOVS     R6,R0
    226                      if (tmpMBUnit) {
   \   000000D8   0700000A           BEQ      ??HandleRequest_8
    227                          TSN_Delay(Port->Delay);
   \   000000DC   4C0094E5           LDR      R0,[R4, #+76]
   \   000000E0   ........           _BLF     OS_Delay,??OS_Delay??rA
    228                          tmpMBUnit->HandleRequest(ReplyData + Offset);
   \   000000E4   0510A0E1           MOV      R1,R5
   \   000000E8   0600A0E1           MOV      R0,R6
   \   000000EC   ........           _BLF     ??HandleRequest_2,??HandleRequest??rA
   \   000000F0   010000EA           B        ??HandleRequest_8
    229                      } else {
    230                          // This packet is not for me
    231                      }
    232                  } else {
    233                      TSN_Delay(0);
   \                     ??HandleRequest_3:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \                     ??HandleRequest_7:
   \   000000F8   ........           _BLF     OS_Delay,??OS_Delay??rA
    234                  }
    235          
    236              } else {
    237                  TSN_Delay(0);
    238              }
    239          
    240          }
   \                     ??HandleRequest_8:
   \   000000FC   40DE8DE2           ADD      SP,SP,#+1024
   \   00000100   ........           B        ?Subroutine38
    241          
    242          #ifdef ANWIN
    243          set<ModbusUnit *>ModbusObject::GetModbusUnits(void) {
    244              set<ModbusUnit *>ModbusUnitSet;
    245              {
    246                  set<ModbusObject *>::iterator pBIt;
    247                  for (pBIt = ModbusObject::ModbusSet.begin(); pBIt != ModbusObject::ModbusSet.end(); pBIt++) {
    248                      ModbusObject *tmpPtr = *pBIt;
    249                      if (tmpPtr->IPAddress.Length()) {
    250                          tmpPtr->SetAlarmList();
    251                          ModbusUnit *UnitPtr = tmpPtr->FindUnit();
    252                          if (UnitPtr) {
    253                              ModbusUnitSet.insert(UnitPtr);
    254                          }
    255                      }
    256                  }
    257              }
    258              return ModbusUnitSet;
    259          }
    260          
    261          bool ModbusObject::ThreadModBusHandle(HANDLE m_hWagoSocketHandle, mbtReadRegistersFunc pMBTReadRegisters, mbtWriteRegistersFunc pMBTWriteRegisters, mbtReadCoilsFunc pMBTReadCoils, mbtWriteCoilsFunc pMBTWriteCoils) {
    262              bool Status = false;
    263              set<ModbusUnit *>ModbusUnitSet = GetModbusUnits();
    264              set<ModbusUnit *>::iterator MBUnitIt;
    265              for (MBUnitIt = ModbusUnitSet.begin(); MBUnitIt != ModbusUnitSet.end(); MBUnitIt++) {
    266                  ModbusUnit *tmpPtr = *MBUnitIt;
    267                  if (tmpPtr->HandleIO(m_hWagoSocketHandle, pMBTReadRegisters, pMBTWriteRegisters, pMBTReadCoils, pMBTWriteCoils)) {
    268                      Status = true;
    269                      CheckAlarms(tmpPtr->AlarmSet);
    270                  }
    271              }
    272              return Status;
    273          }
    274          #else

   \                                 In segment CODE, align 4, keep-with-next
    275          set<ModbusUnit *>ModbusObject::GetModbusUnits(unsigned PortNumber) {
   \                     ??GetModbusUnits:
   \   00000000   F7412DE9           PUSH     {R0-R2,R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    276              set<ModbusUnit *>ModbusUnitSet;
   \   0000000C   0110A0E3           MOV      R1,#+1
    277              {
    278                  set<ModbusObject *>::iterator pBIt;
    279                  for (pBIt = ModbusObject::ModbusSet.begin(); pBIt != ModbusObject::ModbusSet.end(); pBIt++) {
   \   00000010   ........           LDR      R6,??DataTable19  ;; ??ModbusSet
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000024   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000028   1400C4E5           STRB     R0,[R4, #+20]
   \   0000002C   007096E5           LDR      R7,[R6, #+0]
   \   00000030   170000EA           B        ??GetModbusUnits_1
    280                      ModbusObject *tmpPtr = *pBIt;
    281                      if (tmpPtr->TCUPortMatch(CurrentDeviceAddress, PortNumber)) {
   \                     ??GetModbusUnits_2:
   \   00000034   ........           LDR      R0,??DataTable16  ;; CurrentDeviceAddress
   \   00000038   108097E5           LDR      R8,[R7, #+16]
   \   0000003C   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           BL       ??TCUPortMatch
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00000A           BEQ      ??GetModbusUnits_3
    282                          tmpPtr->SetAlarmList();
   \   00000054   A41098E5           LDR      R1,[R8, #+164]
   \   00000058   0800A0E1           MOV      R0,R8
   \   0000005C   7C1091E5           LDR      R1,[R1, #+124]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
    283                          ModbusUnit *UnitPtr = tmpPtr->FindUnit();
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   ........           BL       ??FindUnit
    284                          if (UnitPtr) {
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0300000A           BEQ      ??GetModbusUnits_3
    285                              ModbusUnitSet.insert(UnitPtr);
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \   00000084   ........           _BLF     ??insert_1,??insert??rA_1
    286                          }
    287                      }
    288                  }
   \                     ??GetModbusUnits_3:
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000090   0070A0E1           MOV      R7,R0
   \                     ??GetModbusUnits_1:
   \   00000094   060057E1           CMP      R7,R6
   \   00000098   E5FFFF1A           BNE      ??GetModbusUnits_2
    289              }
    290              return ModbusUnitSet;
   \   0000009C   F741BDE8           POP      {R0-R2,R4-R8,LR}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
    291          }
    292          // Here we can optimize a lot later. Most likely, we can make just one single
    293          // input or output

   \                                 In segment CODE, align 4, keep-with-next
    294          void ModbusObject::ModbusTask(TSNUart *Port) {
   \                     ??ModbusTask:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    295          #ifdef S2TXU
    296              OS_TASK *ModbusTaskPtr = OS_GetpCurrentTask();
   \   00000008   80029FE5           LDR      R0,??ModbusTask_2  ;; OS_pCurrentTask
   \   0000000C   18D04DE2           SUB      SP,SP,#+24
   \   00000010   005090E5           LDR      R5,[R0, #+0]
    297              ModbusTaskVector.push_back(ModbusTaskPtr);
   \   00000014   78029FE5           LDR      R0,??ModbusTask_2+0x4  ;; ??ModbusSet + 48
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    298              OS_SetPriority(ModbusTaskPtr, MODBUS_TASK_PRIORITY);
   \   00000020   AA10A0E3           MOV      R1,#+170
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     OS_SetPriority,??OS_SetPriority??rA
    299          
    300              set<ModbusUnit *>ModbusUnitSet = GetModbusUnits(Port->PortNumber);
   \   0000002C   801094E5           LDR      R1,[R4, #+128]
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           BL       ??GetModbusUnits
    301              OS_Delay(1000);
   \   00000038   FA0FA0E3           MOV      R0,#+1000
   \   0000003C   ........           _BLF     OS_Delay,??OS_Delay??rA
    302              int FrameTimeOut   = int(MBUS_FRAME_TIMEOUT / float(Port->BaudRate / float(1 + Port->WordLength + Port->StopBits)) + 0.5);
   \   00000040   AC0094E5           LDR      R0,[R4, #+172]
   \   00000044   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000048   B41094E5           LDR      R1,[R4, #+180]
   \   0000004C   0050A0E1           MOV      R5,R0
   \   00000050   B00094E5           LDR      R0,[R4, #+176]
   \   00000054   000081E0           ADD      R0,R1,R0
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     __fDiv,??__fDiv??rA
   \   0000006C   0060A0E1           MOV      R6,R0
   \   00000070   20029FE5           LDR      R0,??ModbusTask_2+0x8  ;; 0x44bb8000
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   ........           _BLF     __fDiv,??__fDiv??rA
   \   0000007C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   C035A0E3           MOV      R3,#+805306368
   \   00000088   FE3683E3           ORR      R3,R3,#0xFE00000
   \   0000008C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000090   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000094   0050A0E1           MOV      R5,R0
    303              int FrameSpaceTime = int(MBUS_FRAME_SPACING / float(Port->BaudRate / float(1 + Port->WordLength + Port->StopBits)) + 0.5);
   \   00000098   FC019FE5           LDR      R0,??ModbusTask_2+0xC  ;; 0x455ac000
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   ........           _BLF     __fDiv,??__fDiv??rA
   \   000000A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   C035A0E3           MOV      R3,#+805306368
   \   000000B0   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000000B4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000B8   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000000BC   0060A0E1           MOV      R6,R0
    304              if (FrameTimeOut < 2) {
    305                  FrameTimeOut = 2;
    306              }
    307              if (FrameSpaceTime < 2) {
    308                  FrameSpaceTime = 2;
    309              }
    310              if (Port->MaxTimeBetweenChar) {
   \   000000C0   540094E5           LDR      R0,[R4, #+84]
   \   000000C4   020055E3           CMP      R5,#+2
   \   000000C8   0250A0B3           MOVLT    R5,#+2
   \   000000CC   020056E3           CMP      R6,#+2
   \   000000D0   0260A0B3           MOVLT    R6,#+2
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0700000A           BEQ      ??ModbusTask_3
    311                  FrameTimeOut   = Port->MaxTimeBetweenChar;
   \   000000DC   0050A0E1           MOV      R5,R0
    312                  FrameSpaceTime = int(Port->MaxTimeBetweenChar * 1.5);
   \   000000E0   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   F035A0E3           MOV      R3,#+1006632960
   \   000000EC   FE3783E3           ORR      R3,R3,#0x3F80000
   \   000000F0   ........           _BLF     __dMul,??__dMul??rA
   \   000000F4   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000000F8   0060A0E1           MOV      R6,R0
    313              }
    314              if (ModbusUnitSet.empty()) {
   \                     ??ModbusTask_3:
   \   000000FC   10009DE5           LDR      R0,[SP, #+16]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   1300000A           BEQ      ??ModbusTask_4
    315                  FOREVER{
    316                      OS_Delay(60000); // This should never happend
    317                  }
    318              } else {
    319          
    320                  switch (Port->Device) {
   \   00000108   A80094E5           LDR      R0,[R4, #+168]
   \   0000010C   507094E5           LDR      R7,[R4, #+80]
   \   00000110   4C8094E5           LDR      R8,[R4, #+76]
   \   00000114   680040E2           SUB      R0,R0,#+104
   \   00000118   7C0D40E2           SUB      R0,R0,#+7936
   \   0000011C   090050E3           CMP      R0,#+9
   \   00000120   0500008A           BHI      ??ModbusTask_5
   \   00000124   011F8FE2           ADR      R1,??ModbusTask_1
   \   00000128   0010D1E7           LDRB     R1,[R1, R0]
   \   0000012C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ModbusTask_1:
   \   00000130   0D0D0D3C           DC8      +13,+13,+13,+60
   \   00000134   3C3C0D3C           DC8      +60,+60,+13,+60
   \   00000138   0D3C0000           DC8      +13,+60,+0,+0
    321                  case C_UART_DEVICE_MODICON_MASTER       :
    322                  case C_UART_DEVICE_MODICON_MASTER_TCP   :
    323                  case C_UART_DEVICE_MODBUS_MASTER        :
    324                  case C_UART_DEVICE_MODBUS_MASTER_INV    :
    325                  case C_UART_DEVICE_MODBUS_MASTER_TCP    :
    326                      {
    327                          int RequestDelay = Port->Delay;
    328                          if (!RequestDelay) {
    329                              RequestDelay = MBUS_REQUEST_DELAY;
    330                          }
    331                          int TimeOut = Port->TimeOut;
    332                          if (!TimeOut) {
    333                              TimeOut = MBUS_REQUEST_TIMEOUT;
    334                          }
    335          
    336                          set<ModbusUnit *>::iterator MBUnitIt;
    337                          for (MBUnitIt = ModbusUnitSet.begin(); MBUnitIt != ModbusUnitSet.end(); MBUnitIt++) {
    338                              (*MBUnitIt)->SetIsMaster();
    339                          }
    340                          {
    341                              set<ModbusUnit *>::iterator MBUnitIt;
    342                              for (MBUnitIt = ModbusUnitSet.begin(); MBUnitIt != ModbusUnitSet.end(); MBUnitIt++) {
    343                                  ModbusUnit *tmpPtr = *MBUnitIt;
    344                                  tmpPtr->SetUpCom(Port, RequestDelay, TimeOut, FrameTimeOut, FrameSpaceTime);
    345                              }
    346                          }
    347                          FOREVER{
    348                              int t0 = OS_GetTime();
    349                              set<ModbusUnit *>::iterator MBUnitIt;
    350                              for (MBUnitIt = ModbusUnitSet.begin(); MBUnitIt != ModbusUnitSet.end(); MBUnitIt++) {
    351                                  ModbusUnit *tmpPtr = *MBUnitIt;
    352                                  tmpPtr->HandleIO();
    353                                  //CheckAlarms(tmpPtr->AlarmSet);
    354                              }
    355                              OS_DelayUntil(t0 + RequestDelay);
    356                          }
    357                      }
    358                  case C_UART_DEVICE_MODICON_SLAVE        :
    359                  case C_UART_DEVICE_MODICON_SLAVE_TCP    :
    360                  case C_UART_DEVICE_MODBUS_SLAVE         :
    361                  case C_UART_DEVICE_MODBUS_SLAVE_TCP     :
    362                  case C_UART_DEVICE_MODBUS_SLAVE_INV     :
    363                      {
    364                          int RequestDelay = Port->Delay;
    365                          if (!RequestDelay){
    366                              RequestDelay = MBUS_REQUEST_DELAY;
    367                          }
    368                          int TimeOut = Port->TimeOut;
    369                          if (!TimeOut){
    370                              TimeOut = MBUS_REQUEST_TIMEOUT;
    371                          }
    372                          set<ModbusUnit*>::iterator MBUnitIt;
    373                          for (MBUnitIt = ModbusUnitSet.begin(); MBUnitIt != ModbusUnitSet.end(); MBUnitIt++){
    374                              ModbusUnit *tmpPtr = *MBUnitIt;
    375                              tmpPtr->SetUpCom(Port, RequestDelay, TimeOut, FrameTimeOut, FrameSpaceTime);
    376                          }
    377                      }
    378          
    379                      FOREVER{
    380                          HandleRequest(Port,FrameTimeOut,FrameSpaceTime);
    381                      }
    382                  }
    383              }
    384          #endif
    385          }
   \                     ??ModbusTask_5:
   \   0000013C   04109DE5           LDR      R1,[SP, #+4]
   \   00000140   0D00A0E1           MOV      R0,SP
   \   00000144   ........           _BLF     ??_Erase_1,??_Erase??rA_2
   \   00000148   0D00A0E1           MOV      R0,SP
   \   0000014C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000150   18D08DE2           ADD      SP,SP,#+24
   \   00000154   ........           B        ?Subroutine37
   \                     ??ModbusTask_4:
   \   00000158   6000A0E3           MOV      R0,#+96
   \   0000015C   EA0C80E3           ORR      R0,R0,#0xEA00
   \   00000160   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   00000164   FBFFFFEA           B        ??ModbusTask_4
   \                     ??ModbusTask_6:
   \   00000168   00909DE5           LDR      R9,[SP, #+0]
   \   0000016C   000058E3           CMP      R8,#+0
   \   00000170   7D8FA003           MOVEQ    R8,#+500
   \   00000174   000057E3           CMP      R7,#+0
   \   00000178   7D7FA003           MOVEQ    R7,#+500
   \   0000017C   040000EA           B        ??ModbusTask_7
   \                     ??ModbusTask_8:
   \   00000180   100099E5           LDR      R0,[R9, #+16]
   \   00000184   ........           _BLF     ??SetIsMaster,??SetIsMaster??rA
   \   00000188   0900A0E1           MOV      R0,R9
   \   0000018C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000190   0090A0E1           MOV      R9,R0
   \                     ??ModbusTask_7:
   \   00000194   0D00A0E1           MOV      R0,SP
   \   00000198   000059E1           CMP      R9,R0
   \   0000019C   F7FFFF1A           BNE      ??ModbusTask_8
   \   000001A0   00909DE5           LDR      R9,[SP, #+0]
   \   000001A4   0C0000EA           B        ??ModbusTask_9
   \                     ??ModbusTask_10:
   \   000001A8   0600A0E1           MOV      R0,R6
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   0500A0E1           MOV      R0,R5
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   100099E5           LDR      R0,[R9, #+16]
   \   000001BC   0730A0E1           MOV      R3,R7
   \   000001C0   0820A0E1           MOV      R2,R8
   \   000001C4   0410A0E1           MOV      R1,R4
   \   000001C8   ........           _BLF     ??SetUpCom,??SetUpCom??rA
   \   000001CC   0900A0E1           MOV      R0,R9
   \   000001D0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001D4   0090A0E1           MOV      R9,R0
   \   000001D8   08D08DE2           ADD      SP,SP,#+8
   \                     ??ModbusTask_9:
   \   000001DC   0D00A0E1           MOV      R0,SP
   \   000001E0   000059E1           CMP      R9,R0
   \   000001E4   EFFFFF1A           BNE      ??ModbusTask_10
   \                     ??ModbusTask_11:
   \   000001E8   B0009FE5           LDR      R0,??ModbusTask_2+0x10  ;; OS_Time
   \   000001EC   004090E5           LDR      R4,[R0, #+0]
   \   000001F0   00509DE5           LDR      R5,[SP, #+0]
   \   000001F4   040000EA           B        ??ModbusTask_12
   \                     ??ModbusTask_13:
   \   000001F8   100095E5           LDR      R0,[R5, #+16]
   \   000001FC   ........           _BLF     ??HandleIO,??HandleIO??rA
   \   00000200   0500A0E1           MOV      R0,R5
   \   00000204   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000208   0050A0E1           MOV      R5,R0
   \                     ??ModbusTask_12:
   \   0000020C   0D00A0E1           MOV      R0,SP
   \   00000210   000055E1           CMP      R5,R0
   \   00000214   F7FFFF1A           BNE      ??ModbusTask_13
   \   00000218   040088E0           ADD      R0,R8,R4
   \   0000021C   ........           _BLF     OS_DelayUntil,??OS_DelayUntil??rA
   \   00000220   F0FFFFEA           B        ??ModbusTask_11
   \                     ??ModbusTask_14:
   \   00000224   00909DE5           LDR      R9,[SP, #+0]
   \   00000228   000058E3           CMP      R8,#+0
   \   0000022C   7D8FA003           MOVEQ    R8,#+500
   \   00000230   000057E3           CMP      R7,#+0
   \   00000234   7D7FA003           MOVEQ    R7,#+500
   \   00000238   0C0000EA           B        ??ModbusTask_15
   \                     ??ModbusTask_16:
   \   0000023C   0600A0E1           MOV      R0,R6
   \   00000240   01002DE9           PUSH     {R0}
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   100099E5           LDR      R0,[R9, #+16]
   \   00000250   0730A0E1           MOV      R3,R7
   \   00000254   0820A0E1           MOV      R2,R8
   \   00000258   0410A0E1           MOV      R1,R4
   \   0000025C   ........           _BLF     ??SetUpCom,??SetUpCom??rA
   \   00000260   0900A0E1           MOV      R0,R9
   \   00000264   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000268   0090A0E1           MOV      R9,R0
   \   0000026C   08D08DE2           ADD      SP,SP,#+8
   \                     ??ModbusTask_15:
   \   00000270   0D00A0E1           MOV      R0,SP
   \   00000274   000059E1           CMP      R9,R0
   \   00000278   EFFFFF1A           BNE      ??ModbusTask_16
   \                     ??ModbusTask_17:
   \   0000027C   0620A0E1           MOV      R2,R6
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           BL       ??HandleRequest
   \   0000028C   FAFFFFEA           B        ??ModbusTask_17
   \                     ??ModbusTask_2:
   \   00000290   ........           DC32     OS_pCurrentTask
   \   00000294   ........           DC32     ??ModbusSet + 48
   \   00000298   0080BB44           DC32     0x44bb8000
   \   0000029C   00C05A45           DC32     0x455ac000
   \   000002A0   ........           DC32     OS_Time
    386          #endif

   \                                 In segment CODE, align 4, keep-with-next
    387          void ModbusObject::DeleteAllInDeviceMap(void) {
   \                     ??DeleteAllInDeviceMap:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable17  ;; ??ModbusSet
   \   00000008   090000EA           B        ??DeleteAllInDeviceMap_1
    388              while (!ModbusSet.empty()) {
    389                  set<ModbusObject *>::iterator pBIt = ModbusSet.begin();
   \                     ??DeleteAllInDeviceMap_2:
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
    390                  delete (*pBIt);
   \   00000010   102090E5           LDR      R2,[R0, #+16]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   FBFFFF0A           BEQ      ??DeleteAllInDeviceMap_2
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   A42092E5           LDR      R2,[R2, #+164]
   \   00000024   0310A0E3           MOV      R1,#+3
   \   00000028   002092E5           LDR      R2,[R2, #+0]
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   12FF2FE1           BX       R2
    391              }
   \                     ??DeleteAllInDeviceMap_1:
   \   00000034   100094E5           LDR      R0,[R4, #+16]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F2FFFF1A           BNE      ??DeleteAllInDeviceMap_2
    392          }
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
    393          
    394          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    395          void ModbusObject::SetGlobalProList(void) {
   \                     ??SetGlobalProList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    396              if (!ModbusSet.empty()) {
   \   00000004   ........           LDR      R4,??DataTable19  ;; ??ModbusSet
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0C00000A           BEQ      ??SetGlobalProList_1
    397                  set<ModbusObject *>::iterator pBIt;
    398                  for (pBIt = ModbusSet.begin(); pBIt != ModbusSet.end(); pBIt++) {
   \   00000014   005094E5           LDR      R5,[R4, #+0]
   \   00000018   080000EA           B        ??SetGlobalProList_2
    399                      ModbusObject *tmpPtr = *pBIt;
   \                     ??SetGlobalProList_3:
   \   0000001C   101095E5           LDR      R1,[R5, #+16]
    400                      tmpPtr->SetProList();
   \   00000020   0100A0E1           MOV      R0,R1
   \   00000024   A41091E5           LDR      R1,[R1, #+164]
   \   00000028   801091E5           LDR      R1,[R1, #+128]
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   11FF2FE1           BX       R1
    401                  }
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \                     ??SetGlobalProList_2:
   \   00000040   040055E1           CMP      R5,R4
   \   00000044   F4FFFF1A           BNE      ??SetGlobalProList_3
    402              }
    403          }
   \                     ??SetGlobalProList_1:
   \   00000048   ........           B        ?Subroutine36
    404          

   \                                 In segment CODE, align 4, keep-with-next
    405          set<PRogramObjectBase *> ModbusObject::GetModbusObjectSet(void) {
   \                     ??GetModbusObjectSet:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    406              set<PRogramObjectBase *>tmpSet;
   \   00000008   0110A0E3           MOV      R1,#+1
    407              if (!ModbusSet.empty()) {
   \   0000000C   ........           LDR      R5,??DataTable19  ;; ??ModbusSet
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000020   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000024   1400C4E5           STRB     R0,[R4, #+20]
   \   00000028   100095E5           LDR      R0,[R5, #+16]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0D00000A           BEQ      ??GetModbusObjectSet_1
    408                  set<ModbusObject *>::iterator pBIt;
    409                  for (pBIt = ModbusSet.begin(); pBIt != ModbusSet.end(); pBIt++) {
   \   00000034   006095E5           LDR      R6,[R5, #+0]
   \   00000038   090000EA           B        ??GetModbusObjectSet_2
    410                      ModbusObject *tmpPtr = *pBIt;
   \                     ??GetModbusObjectSet_3:
   \   0000003C   102096E5           LDR      R2,[R6, #+16]
    411                      if (!tmpPtr->IsCreatedFromMultiple) {
   \   00000040   7801D2E5           LDRB     R0,[R2, #+376]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200001A           BNE      ??GetModbusObjectSet_4
    412                          tmpSet.insert((PRogramObjectBase *)tmpPtr);
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     ??insert_2,??insert??rA_2
    413                      }
    414                  }
   \                     ??GetModbusObjectSet_4:
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000060   0060A0E1           MOV      R6,R0
   \                     ??GetModbusObjectSet_2:
   \   00000064   050056E1           CMP      R6,R5
   \   00000068   F3FFFF1A           BNE      ??GetModbusObjectSet_3
    415              }
    416              return tmpSet;
   \                     ??GetModbusObjectSet_1:
   \   0000006C   7740BDE8           POP      {R0-R2,R4-R6,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
    417          }
    418          
    419          
    420          //---------------------------------------------------------------------------
    421          // Quick and dirty. Must be improved with some info from ANWin.ini

   \                                 In segment CODE, align 4, keep-with-next
    422          bool ModbusObject::HasModbusMasterPC(void) {
   \                     ??HasModbusMasterPC:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    423              int MaxAddress = 0;
    424              if (!ModbusSet.empty()) {
   \   00000004   ........           LDR      R5,??DataTable20  ;; ??ModbusSet
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   100095E5           LDR      R0,[R5, #+16]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00000A           BEQ      ??HasModbusMasterPC_1
    425                  set<ModbusObject *>::iterator pBIt;
    426                  for (pBIt = ModbusSet.begin(); pBIt != ModbusSet.end(); pBIt++) {
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   040000EA           B        ??HasModbusMasterPC_2
    427                      ModbusObject *tmpPtr = *pBIt;
   \                     ??HasModbusMasterPC_3:
   \   00000020   101090E5           LDR      R1,[R0, #+16]
    428                      MaxAddress = MAX(MaxAddress, tmpPtr->TCUAddress);
   \   00000024   641191E5           LDR      R1,[R1, #+356]
   \   00000028   010054E1           CMP      R4,R1
   \   0000002C   0140A0B1           MOVLT    R4,R1
    429                  }
   \   00000030   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??HasModbusMasterPC_2:
   \   00000034   050050E1           CMP      R0,R5
   \   00000038   F8FFFF1A           BNE      ??HasModbusMasterPC_3
    430              }
    431              return (MaxAddress > 0xf);
   \   0000003C   100054E3           CMP      R4,#+16
   \   00000040   0100A0A3           MOVGE    R0,#+1
   \   00000044   0000A0B3           MOVLT    R0,#+0
   \                     ??HasModbusMasterPC_1:
   \   00000048   ........           B        ?Subroutine36
    432          }
    433          

   \                                 In segment CODE, align 4, keep-with-next
    434          void ModbusObject::UpdateFromMultiple(unsigned pIdNumber, int pChannel) {
    435          }
   \                     ??UpdateFromMultiple:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    436          

   \                                 In segment CODE, align 4, keep-with-next
    437          int ModbusObject::GetChannel(void) {
    438              return Channel;
   \                     ??GetChannel:
   \   00000000   700190E5           LDR      R0,[R0, #+368]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    439          }
    440          

   \                                 In segment CODE, align 4, keep-with-next
    441          int ModbusObject::GetTCUAddress(void) {
    442              return TCUAddress;
   \                     ??GetTCUAddress:
   \   00000000   640190E5           LDR      R0,[R0, #+356]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    443          }

   \                                 In segment CODE, align 4, keep-with-next
    444          int ModbusObject::GetTCUPortNo(void) {
    445              return TCUPortNo;
   \                     ??GetTCUPortNo:
   \   00000000   680190E5           LDR      R0,[R0, #+360]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    446          }
    447          

   \                                 In segment CODE, align 4, keep-with-next
    448          int ModbusObject::GetAddress(void) {
    449              return Address;
   \                     ??GetAddress:
   \   00000000   6C0190E5           LDR      R0,[R0, #+364]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    450          }
    451          
    452          /**********************************************
    453          *
    454          * Empty function. Only ancestors will return sensible values
    455          *
    456          **************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    457          int ModbusObject::GetObjectId(void) {
    458              return 0;
   \                     ??GetObjectId:
   \   00000000                      REQUIRE ?Subroutine39
   \   00000000                      ;; // Fall through to label ?Subroutine39
    459          }
    460          

   \                                 In segment CODE, align 4, keep-with-next
    461          AnsiString ModbusObject::GetValueKey(void) {
   \                     ??GetValueKey:
   \   00000000   ........           B        ?Subroutine35
    462              return "";
    463          }
    464          

   \                                 In segment CODE, align 4, keep-with-next
    465          AnsiString ModbusObject::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000                      REQUIRE ?Subroutine35
   \   00000000                      ;; // Fall through to label ?Subroutine35
    466              return "";
    467          }

   \                                 In segment CODE, align 4, keep-with-next
    468          AnsiString ModbusObject::GetRegisterValue(void) {
   \                     ??GetRegisterValue:
   \   00000000   ........           B        ?Subroutine35
    469              return "";
    470          }
    471          

   \                                 In segment CODE, align 4, keep-with-next
    472          bool ModbusObject::GetDigitalStatus(void) {
    473              return IsActive;
   \                     ??GetDigitalStatus:
   \   00000000   7901D0E5           LDRB     R0,[R0, #+377]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    474          }
    475          

   \                                 In segment CODE, align 4, keep-with-next
    476          AlarmBasic* ModbusObject::GetAlarmPtr(void) {
    477              return NULL;
   \                     ??GetAlarmPtr:
   \   00000000   ........           B        ?Subroutine39
    478          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Modbus: TCU port is n...">`:
   \   00000000   4D6F64627573       DC8 "Modbus: TCU port is negative"
   \              3A2054435520
   \              706F72742069
   \              73206E656761
   \              7469766500  
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   4D6F64627573       DC8 "Modbus: Address is negative"
   \              3A2041646472
   \              657373206973
   \              206E65676174
   \              69766500    
   \   0000003C   4D6F64627573       DC8 "Modbus: Index is negative"
   \              3A20496E6465
   \              78206973206E
   \              656761746976
   \              6500        
   \   00000056   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A00               DC8 ":"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E00               DC8 "."

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MBDataExchange">`:
   \   00000000   4D4244617461       DC8 "MBDataExchange"
   \              45786368616E
   \              676500      
   \   0000000F   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusObject &ModbusObject::new ModbusObject()
   \                     `??new ModbusObject`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5F0FA0E3           MOV      R0,#+380
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new ModbusObject_1`
   \   00000014   ........           BL       ??ModbusObject
   \                     `??new ModbusObject_1`:
   \   00000018   ........           B        ??Subroutine35_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00000000           DC8      "",+0,+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     CurrentDeviceAddress

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   00000000           DC8      "",+0,+0,+0
    479          
    480          
    481          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusObject::AddressMatch(int, int, int, int)
                                       16
     ModbusObject::ChannelIsReserved(set<ModbusObject *>, int, int)
                                       20
     ModbusObject::DeleteAllInDeviceMap()
                                        8
     ModbusObject::ExchangeData()      12
     ModbusObject::FindFirstFree(set<ModbusObject *>, int, int)
                                       44
     ModbusObject::FindUnit()           4
     ModbusObject::GetAddress()         0
     ModbusObject::GetAlarmPtr()        0
     ModbusObject::GetChannel()         0
     ModbusObject::GetDigitalStatus()
                                        0
     ModbusObject::GetModbusObjectSet()
                                       28
     ModbusObject::GetModbusUnits(unsigned int)
                                       36
     ModbusObject::GetObjectId()        0
     ModbusObject::GetRegisterType()
                                        4
     ModbusObject::GetRegisterValue()
                                        4
     ModbusObject::GetTCUAddress()      0
     ModbusObject::GetTCUPortNo()       0
     ModbusObject::GetValueKey()        4
     ModbusObject::HandleRequest(TSNUart *, int, int)
                                     1044
     ModbusObject::HasModbusMasterPC()
                                       12
     ModbusObject::InitMap()           24
     ModbusObject::LastChannel(set<ModbusObject *>, int)
                                       16
     ModbusObject::LoadConfigString(TSNConfigString &)
                                      236
     ModbusObject::MakeConfigString(int)
                                      276
     ModbusObject::ModbusObject()      20
     ModbusObject::ModbusTask(TSNUart *)
                                       60
     ModbusObject::SetAlarmList()       0
     ModbusObject::SetGlobalProList()
                                       12
     ModbusObject::SetProList()         0
     ModbusObject::StartExchangeData()
                                       16
     ModbusObject::TCUPortMatch(int, int)
                                        0
     ModbusObject::UpdateFromMultiple(unsigned int, int)
                                        0
     ModbusObject::new ModbusObject()
                                        4
     ModbusObject::~ModbusObject()     12
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>> const &)
                                       12
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Lbound(ModbusObject *) const
                                        0
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Ubound(ModbusObject *) const
                                        0
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::equal_range(ModbusObject *)
                                       28
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Erase(_Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr, ModbusUnit *)
                                       24
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::insert(ModbusUnit *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Insert(OS_TASK **, OS_TASK * const &)
                                       16
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Make_room(OS_TASK **, unsigned int)
                                       32
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Push_back0(OS_TASK *)
                                        8
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Tidy0()
                                        4
     __sti__routine()                  12
     operator+(string const &, string const &)
                                       48
     set<ModbusObject *>::set()        12
     set<ModbusObject *>::~set()        4
     vector<OS_TASK *>::~vector()       8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                       92
     _Tree_algobase<allocator<void>>::_Clear()
                                       36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                      780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                      356
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                      200
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::insert(ModbusUnit *)
                                      200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                      200
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator)
                                      108
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::erase(ModbusObject *)
                                       84
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::clear()
                                       32
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::equal_range(ModbusObject *)
                                       76
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>> const &)
                                      112
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Copy(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
                                      148
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Erase(_Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr)
                                       68
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Erase(_Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr)
                                       68
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       96
     _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusUnit *, less<ModbusUnit *>, allocator<ModbusUnit *>, false>>::_Nodeptr, ModbusUnit *)
                                       96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       96
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Lbound(ModbusObject *) const
                                       40
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Ubound(ModbusObject *) const
                                       40
     set<ModbusObject *>::~set()       16
     set<ModbusObject *>::set()        48
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Tidy0()
                                       36
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Insert(OS_TASK **, OS_TASK * const &)
                                       72
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Make_room(OS_TASK **, unsigned int)
                                      232
     _Vector_impl<OS_TASK *, allocator<OS_TASK *>>::_Push_back0(OS_TASK *)
                                       72
     vector<OS_TASK *>::~vector()      36
     operator+(string const &, string const &)
                                      156
     __sti__routine()                  76
     ?_0                               36
     ModbusObject::ModbusSet        16508
     ModbusObject::ModbusTaskPtr        4
     ModbusObject::ModbusUpdateTaskPtr
                                        4
     ModbusObject::ModbusObject()     132
     ModbusObject::~ModbusObject()     84
     ?Subroutine36                      8
     ModbusObject::MakeConfigString(int)
                                      472
     ModbusObject::LoadConfigString(TSNConfigString &)
                                      924
     ?Subroutine37                     28
     ModbusObject::SetAlarmList()       4
     ModbusObject::SetProList()         4
     ModbusObject::AddressMatch(int, int, int, int)
                                       56
     ?Subroutine38                      8
     ModbusObject::TCUPortMatch(int, int)
                                       28
     ?Subroutine39                      8
     ModbusObject::InitMap()          108
     ModbusObject::ChannelIsReserved(set<ModbusObject *>, int, int)
                                       84
     ?Subroutine40                      8
     ModbusObject::FindFirstFree(set<ModbusObject *>, int, int)
                                      100
     ModbusObject::LastChannel(set<ModbusObject *>, int)
                                       68
     ModbusObject::FindUnit()          40
     ?Subroutine35                     24
     ModbusObject::ExchangeData()      84
     ModbusObject::StartExchangeData()
                                       88
     ModbusObject::HandleRequest(TSNUart *, int, int)
                                      260
     ModbusObject::GetModbusUnits(unsigned int)
                                      164
     ModbusObject::ModbusTask(TSNUart *)
                                      676
     ModbusObject::DeleteAllInDeviceMap()
                                       72
     ModbusObject::SetGlobalProList()
                                       76
     ModbusObject::GetModbusObjectSet()
                                      116
     ModbusObject::HasModbusMasterPC()
                                       76
     ModbusObject::UpdateFromMultiple(unsigned int, int)
                                        4
     ModbusObject::GetChannel()         8
     ModbusObject::GetTCUAddress()      8
     ModbusObject::GetTCUPortNo()       8
     ModbusObject::GetAddress()         8
     ModbusObject::GetObjectId()        0
     ModbusObject::GetValueKey()        4
     ModbusObject::GetRegisterType()
                                        0
     ModbusObject::GetRegisterValue()
                                        4
     ModbusObject::GetDigitalStatus()
                                        8
     ModbusObject::GetAlarmPtr()        4
     ?<Constant "Modbus: TCU port is n...">
                                       88
     ?<Constant "">                     1
     ?<Constant ":">                    2
     ?<Constant ".">                    2
     ?<Constant "MBDataExchange">      16
     ModbusObject::new ModbusObject()
                                       28
     ??DataTable3                       4
     ??DataTable6                       4
     ??DataTable7                       4
     ??DataTable16                      4
     ??DataTable17                      4
     ??DataTable19                      4
     ??DataTable20                      4
     ??DataTable21                      4
      Others                         1228

 
  8 912 bytes in segment CODE
    305 bytes in segment DATA_C
 16 528 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
  3 996 bytes of CODE  memory (+ 4 932 bytes shared)
    305 bytes of CONST memory
 16 528 bytes of DATA  memory

Errors: none
Warnings: none
