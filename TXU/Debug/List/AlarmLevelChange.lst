##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:31 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLevelChange.Cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLevelChange.Cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLevelChange.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLevelChange.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLevelChange.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelChange::~AlarmLevelChange()
   \                     `?~AlarmLevelChange`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLevelChange_1`
   \   00000014   0100000A           BEQ      `?~AlarmLevelChange_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLevelChange_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLevelChange_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLevelChange_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLevelChange::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLevelChange::AlarmLevelChange(PRogramObjectBase *PROPtr,float Lim, bool Lock):AlarmBasic(PROPtr)
   \                     ??AlarmLevelChange:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     12          {
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000018   6C009FE5           LDR      R0,??AlarmLevelChange_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer          = PROPtr;
   \   00000020   C45084E5           STR      R5,[R4, #+196]
     14          	PROTankPtr          =(PROTank*)PROPtr;
   \   00000024   EC5084E5           STR      R5,[R4, #+236]
     15          	Enable              = false;
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   E200C4E5           STRB     R0,[R4, #+226]
     16          	Locked              = Lock;
     17          	Limit               = Lim;
     18          	NumberOfAlarmSettings++;
   \   00000030   58009FE5           LDR      R0,??AlarmLevelChange_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000034   E870C4E5           STRB     R7,[R4, #+232]
   \   00000038   E46084E5           STR      R6,[R4, #+228]
   \   0000003C   001090E5           LDR      R1,[R0, #+0]
   \   00000040   011081E2           ADD      R1,R1,#+1
   \   00000044   001080E5           STR      R1,[R0, #+0]
     19          	IDNumber            = (ID_AL_LEVEL_CHANGE << 16)+NumberOfAlarmSettings;
   \   00000048   B006A0E3           MOV      R0,#+184549376
   \   0000004C   D90880E3           ORR      R0,R0,#0xD90000
   \   00000050   010080E0           ADD      R0,R0,R1
   \   00000054   9C0084E5           STR      R0,[R4, #+156]
     20          	Type                = ID_AL_LEVEL_CHANGE;
   \   00000058   D900A0E3           MOV      R0,#+217
   \   0000005C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000060   A00084E5           STR      R0,[R4, #+160]
     21          	Deadband            = 0.1;
   \   00000064   28009FE5           LDR      R0,??AlarmLevelChange_1+0x8  ;; 0x3dcccccd
   \   00000068   BC0084E5           STR      R0,[R4, #+188]
     22          	MessageKey          = L_WORD866; // Level diff.
   \   0000006C   6200A0E3           MOV      R0,#+98
   \   00000070   C00F80E3           ORR      R0,R0,#0x300
   \   00000074   B80084E5           STR      R0,[R4, #+184]
     23          	TPCMessageKey       = L_WORD867; // LDif
   \   00000078   010080E3           ORR      R0,R0,#0x1
   \   0000007C   B40084E5           STR      R0,[R4, #+180]
     24          }
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   F040BDE8           POP      {R4-R7,LR}
   \   00000088   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLevelChange_1:
   \   0000008C   ........           DC32     ??__vtbl
   \   00000090   ........           DC32     ??NumberOfAlarmSettings
   \   00000094   CDCCCC3D           DC32     0x3dcccccd
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          void AlarmLevelChange::Check(void)
     27          {
   \                     ??Check:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     28          #ifndef WIN32
     29          	if ( Enable && RunningTime > 2*ALARM_SYSTEM_DELAY ){
   \   00000008   E200D4E5           LDRB     R0,[R4, #+226]
   \   0000000C   EC5094E5           LDR      R5,[R4, #+236]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   2000000A           BEQ      ??Check_1
   \   00000018   88009FE5           LDR      R0,??Check_2     ;; RunningTime
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   F10050E3           CMP      R0,#+241
   \   00000024   1C0000BA           BLT      ??Check_1
     30          		int Status = AL_STAT_IN_DEADBAND;
     31          		float VolPrnctDiff = fabs(PROTankPtr->FilteredVolPercent - PROTankPtr->StartVolPercent);
   \   00000028   B40395E5           LDR      R0,[R5, #+948]
   \   0000002C   D41295E5           LDR      R1,[R5, #+724]
   \   00000030   0260A0E3           MOV      R6,#+2
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
     32          		if ( VolPrnctDiff < Limit - Deadband ) {
   \   00000038   E48094E5           LDR      R8,[R4, #+228]
   \   0000003C   BC1094E5           LDR      R1,[R4, #+188]
   \   00000040   8074C0E3           BIC      R7,R0,#0x80000000
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           _BLF     __fSub,??__fSub??rA
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   ........           _BLF     __fLess,??__fLess??rA
   \   00000058   000050E3           CMP      R0,#+0
     33          			Status = AL_STAT_IN_NORMAL;
   \   0000005C   0060A013           MOVNE    R6,#+0
   \   00000060   0900001A           BNE      ??Check_3
     34          		} else if ( VolPrnctDiff >= Limit ) {
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   0810A0E1           MOV      R1,R8
   \   0000006C   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0400000A           BEQ      ??Check_3
     35          			Status = AL_STAT_IN_ALARM;
     36          			switch ( State ) {
   \   00000078   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000007C   0160A0E3           MOV      R6,#+1
   \   00000080   020050E3           CMP      R0,#+2
     37          			case AlActive       :
     38          			case AlIdle         :
     39          				break;
     40          			case AlAknowledged  :
     41          				// Set new setpoint if acknowledged alarm
     42          				PROTankPtr->StartVolPercent = PROTankPtr->FilteredVolPercent;
   \   00000084   B4039505           LDREQ    R0,[R5, #+948]
   \   00000088   D4028505           STREQ    R0,[R5, #+724]
     43          				break;
     44          			}
     45          
     46          		}
     47          		UpdateAlarm(Status);
   \                     ??Check_3:
   \   0000008C   0610A0E1           MOV      R1,R6
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
   \   00000098   010000EA           B        ??Check_4
     48          	} else {
     49          		PROTankPtr->StartVolPercent = PROTankPtr->FilteredVolPercent;
   \                     ??Check_1:
   \   0000009C   B40395E5           LDR      R0,[R5, #+948]
   \   000000A0   D40285E5           STR      R0,[R5, #+724]
     50          	}
     51          #endif
     52          }
   \                     ??Check_4:
   \   000000A4   ........           B        ?Subroutine9
   \                     ??Check_2:
   \   000000A8   ........           DC32     RunningTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     53          
     54          ///////////////////////////////////////////////////////////////
     55          //
     56          // Routines for the librarian for input
     57          //
     58          ///////////////////////////////////////////////////////////////
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          int AlarmLevelChange::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     61          {
   \                     ??PutValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   8490DDE5           LDRB     R9,[SP, #+132]
   \   00000010   88409DE5           LDR      R4,[SP, #+136]
   \   00000014   0170A0E1           MOV      R7,R1
     62          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     63          	if ( Locked ) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0380A0E1           MOV      R8,R3
   \   0000002C   000050E3           CMP      R0,#+0
     64          		Status = E_NO_INPUT_PERMISSION;
   \   00000030   2A10A013           MOVNE    R1,#+42
   \   00000034   00108D15           STRNE    R1,[SP, #+0]
   \   00000038   8900001A           BNE      ??PutValue_3
     65          	} else {
     66                  float OrgLimit = Limit;
   \   0000003C   E46095E5           LDR      R6,[R5, #+228]
     67          		int Key = FindConfigKey(NewValue);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   40008DE2           ADD      R0,SP,#+64
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   2C029FE5           LDR      R0,??PutValue_4  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   00A090E5           LDR      R10,[R0, #+0]
   \   00000058   0810A0E1           MOV      R1,R8
   \   0000005C   0A30A0E1           MOV      R3,R10
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   40008DE2           ADD      R0,SP,#+64
   \   0000006C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000070   00B0A0E1           MOV      R11,R0
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   40008DE2           ADD      R0,SP,#+64
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
     68          		switch ( Key ) {
   \   00000084   64B04BE2           SUB      R11,R11,#+100
   \   00000088   05005BE3           CMP      R11,#+5
   \   0000008C   1D00008A           BHI      ??PutValue_5
   \   00000090   010F8FE2           ADR      R0,??PutValue_1
   \   00000094   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000098   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   0000009C   010F010F           DC8      +1,+15,+1,+15
   \   000000A0   010F0000           DC8      +1,+15,+0,+0
     69          		case C_ON:
     70          		case C_OPEN:
     71          		case C_ENABLE:
     72                      SetEnable(EnableTrue);
   \                     ??PutValue_6:
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           BL       ??SetEnable
     73          			PROTankPtr->SetState(tUndefined);
   \   000000B0   EC2095E5           LDR      R2,[R5, #+236]
   \   000000B4   0410A0E3           MOV      R1,#+4
   \   000000B8   0200A0E1           MOV      R0,R2
   \   000000BC   A42092E5           LDR      R2,[R2, #+164]
   \   000000C0   7C2092E5           LDR      R2,[R2, #+124]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   12FF2FE1           BX       R2
     74          			PROTankPtr->StartVolPercent = PROTankPtr->FilteredVolPercent;
   \   000000CC   EC0095E5           LDR      R0,[R5, #+236]
   \   000000D0   B41390E5           LDR      R1,[R0, #+948]
   \   000000D4   D41280E5           STR      R1,[R0, #+724]
   \   000000D8   4A0000EA           B        ??PutValue_7
     75          			break;
     76          		case C_OFF:
     77          		case C_CLOSE:
     78          		case C_DISABLE:
     79                      SetEnable(EnableFalse);
   \                     ??PutValue_8:
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           BL       ??SetEnable
     80          			PROTankPtr->SetState(tUndefined);
   \   000000E8   EC2095E5           LDR      R2,[R5, #+236]
   \   000000EC   0410A0E3           MOV      R1,#+4
   \   000000F0   0200A0E1           MOV      R0,R2
   \   000000F4   A42092E5           LDR      R2,[R2, #+164]
   \   000000F8   7C2092E5           LDR      R2,[R2, #+124]
   \   000000FC   0FE0A0E1           MOV      LR,PC
   \   00000100   12FF2FE1           BX       R2
   \   00000104   3F0000EA           B        ??PutValue_7
     81          			break;
     82          		default:
     83          			switch ( ValueId ) {
   \                     ??PutValue_5:
   \   00000108   3210A0E3           MOV      R1,#+50
   \   0000010C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000110   010057E1           CMP      R7,R1
   \   00000114   D4108112           ADDNE    R1,R1,#+212
   \   00000118   01005711           CMPNE    R7,R1
   \   0000011C   2200001A           BNE      ??PutValue_9
     84          			case SVT_LEV_CHANGE_LIM:
     85          			case SVT_AL_LIMIT:
     86          				Limit           = ConvertToSi(NewValue, ValUnitId=PERCENT_UNIT, Status,0.0 ,2*LIMIT_LEVEL_CHANGE,Limit);
   \   00000120   1010A0E3           MOV      R1,#+16
   \   00000124   04108DE5           STR      R1,[SP, #+4]
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   24008DE2           ADD      R0,SP,#+36
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   0A30A0E1           MOV      R3,R10
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0810A0E1           MOV      R1,R8
   \   00000144   24008DE2           ADD      R0,SP,#+36
   \   00000148   ........           _BLF     ??assign,??assign??rA
   \   0000014C   E40095E5           LDR      R0,[R5, #+228]
   \   00000150   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000154   03002DE9           PUSH     {R0,R1}
   \   00000158   0000A0E3           MOV      R0,#+0
   \   0000015C   4014A0E3           MOV      R1,#+1073741824
   \   00000160   901981E3           ORR      R1,R1,#0x240000
   \   00000164   03002DE9           PUSH     {R0,R1}
   \   00000168   0010A0E1           MOV      R1,R0
   \   0000016C   03002DE9           PUSH     {R0,R1}
   \   00000170   18208DE2           ADD      R2,SP,#+24
   \   00000174   3C008DE2           ADD      R0,SP,#+60
   \   00000178   0800BDE8           POP      {R3}
   \   0000017C   1010A0E3           MOV      R1,#+16
   \   00000180   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000184   E40085E5           STR      R0,[R5, #+228]
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   38008DE2           ADD      R0,SP,#+56
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
     87          				PROTankPtr->StartVolPercent = PROTankPtr->FilteredVolPercent;
   \   00000198   EC0095E5           LDR      R0,[R5, #+236]
   \   0000019C   B41390E5           LDR      R1,[R0, #+948]
   \   000001A0   D41280E5           STR      R1,[R0, #+724]
   \   000001A4   14D08DE2           ADD      SP,SP,#+20
   \   000001A8   160000EA           B        ??PutValue_7
     88          				break;
     89          			default:
     90          				Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_9:
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0010A0E3           MOV      R1,#+0
   \   000001B4   08008DE2           ADD      R0,SP,#+8
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001BC   0A30A0E1           MOV      R3,R10
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0810A0E1           MOV      R1,R8
   \   000001C8   08008DE2           ADD      R0,SP,#+8
   \   000001CC   ........           _BLF     ??assign,??assign??rA
   \   000001D0   04008DE2           ADD      R0,SP,#+4
   \   000001D4   01002DE9           PUSH     {R0}
   \   000001D8   00022DE9           PUSH     {R9}
   \   000001DC   64209DE5           LDR      R2,[SP, #+100]
   \   000001E0   10308DE2           ADD      R3,SP,#+16
   \   000001E4   0710A0E1           MOV      R1,R7
   \   000001E8   0500A0E1           MOV      R0,R5
   \   000001EC   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001F0   08008DE5           STR      R0,[SP, #+8]
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   10008DE2           ADD      R0,SP,#+16
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   08D08DE2           ADD      SP,SP,#+8
     91          				break;
     92          			}
     93          			break; // switch ( ValueId )
     94          		}//switch ( Key )
     95          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_7:
   \   00000208   00009DE5           LDR      R0,[SP, #+0]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   1300001A           BNE      ??PutValue_3
     96          			SetModifiedFlag();
   \   00000214   A41095E5           LDR      R1,[R5, #+164]
   \   00000218   0500A0E1           MOV      R0,R5
   \   0000021C   541091E5           LDR      R1,[R1, #+84]
   \   00000220   0FE0A0E1           MOV      LR,PC
   \   00000224   11FF2FE1           BX       R1
     97          			if ( Limit != OrgLimit ) {
   \   00000228   E40095E5           LDR      R0,[R5, #+228]
   \   0000022C   0610A0E1           MOV      R1,R6
   \   00000230   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   0900000A           BEQ      ??PutValue_3
     98          				LogEvent("New limit");
   \   0000023C   40109FE5           LDR      R1,??PutValue_4+0x4  ;; `?<Constant "New limit">`
   \   00000240   08008DE2           ADD      R0,SP,#+8
   \   00000244   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000248   0010A0E1           MOV      R1,R0
   \   0000024C   0500A0E1           MOV      R0,R5
   \   00000250   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   08008DE2           ADD      R0,SP,#+8
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
     99          			}
    100          		}
    101          	}// if ( Locked ) else
    102          	if ( UnitId ) {
   \                     ??PutValue_3:
   \   00000264   000054E3           CMP      R4,#+0
    103          		*UnitId = ValUnitId;
   \   00000268   04009D15           LDRNE    R0,[SP, #+4]
   \   0000026C   00008415           STRNE    R0,[R4, #+0]
    104          	}
    105          	return(Status);
   \   00000270   00009DE5           LDR      R0,[SP, #+0]
   \   00000274   60D08DE2           ADD      SP,SP,#+96
   \   00000278   F04FBDE8           POP      {R4-R11,LR}
   \   0000027C   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_4:
   \   00000280   ........           DC32     ??npos
   \   00000284   ........           DC32     `?<Constant "New limit">`
    106          }
    107          

   \                                 In segment CODE, align 4, keep-with-next
    108          int  AlarmLevelChange::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    109          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C609DE5           LDR      R6,[SP, #+28]
   \   00000008   20709DE5           LDR      R7,[SP, #+32]
   \   0000000C   0350A0E1           MOV      R5,R3
    110          	int Status = GETVAL_NO_ERR;
   \   00000010   0040A0E3           MOV      R4,#+0
    111          	switch ( ValueId ) {
   \   00000014   1080A0E3           MOV      R8,#+16
   \   00000018   0190A0E3           MOV      R9,#+1
   \   0000001C   323041E2           SUB      R3,R1,#+50
   \   00000020   8C3D43E2           SUB      R3,R3,#+8960
   \   00000024   010053E3           CMP      R3,#+1
   \   00000028   1400008A           BHI      ??GetValue_3
   \   0000002C   01CF8FE2           ADR      R12,??GetValue_1
   \   00000030   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000034   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000038   00090000           DC8      +0,+9,+0,+0
    112          	case SVT_AL_LIMIT:
    113          		MyRetValue = Limit;
   \                     ??GetValue_4:
   \   0000003C   E41090E5           LDR      R1,[R0, #+228]
   \   00000040   001085E5           STR      R1,[R5, #+0]
    114          		DecPnt     = 1;
   \   00000044   009086E5           STR      R9,[R6, #+0]
    115          		Unit       = PERCENT_UNIT;
   \   00000048   008087E5           STR      R8,[R7, #+0]
    116          		if ( !Enable ) {
   \   0000004C   E200D0E5           LDRB     R0,[R0, #+226]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0F00001A           BNE      ??GetValue_5
    117          			Status     = GETVAL_DISABLED;
   \   00000058   0940A0E3           MOV      R4,#+9
   \   0000005C   0D0000EA           B        ??GetValue_5
    118          		}
    119          		break;
    120          	case SVT_AL_VALUE:
    121          		MyRetValue = PROTankPtr->FilteredVolPercent - PROTankPtr->StartVolPercent;
   \                     ??GetValue_6:
   \   00000060   EC1090E5           LDR      R1,[R0, #+236]
   \   00000064   B40391E5           LDR      R0,[R1, #+948]
   \   00000068   D41291E5           LDR      R1,[R1, #+724]
   \   0000006C   ........           _BLF     __fSub,??__fSub??rA
   \   00000070   000085E5           STR      R0,[R5, #+0]
    122          		DecPnt     = 1;
   \   00000074   009086E5           STR      R9,[R6, #+0]
    123          		Unit       = PERCENT_UNIT;
   \   00000078   008087E5           STR      R8,[R7, #+0]
   \   0000007C   050000EA           B        ??GetValue_5
    124          		break;
    125          	default:
    126          		Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000080   80002DE9           PUSH     {R7}
   \   00000084   40002DE9           PUSH     {R6}
   \   00000088   0530A0E1           MOV      R3,R5
   \   0000008C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000090   0040A0E1           MOV      R4,R0
   \   00000094   08D08DE2           ADD      SP,SP,#+8
    127          		break;
    128          	}
    129          	return(Status);
   \                     ??GetValue_5:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C                      REQUIRE ?Subroutine9
   \   0000009C                      ;; // Fall through to label ?Subroutine9
    130          }
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          int AlarmLevelChange::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    133          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    134          	int Status = GETVAL_NO_ERR;
    135          	//switch ( ValueId ) {
    136          	//	default:
    137          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    138          	//		break;
    139          	//}
    140          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine10
    141          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          int AlarmLevelChange::PutFloatValue( int ValueId, float NewValue)
    144          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    145          	int Status= E_NO_ERR;
    146          	//switch ( ValueId ) {
    147          	//   default:
    148          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    149          	//     break;
    150          	//}
    151          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    152          }
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          void AlarmLevelChange::SetEnable(EnableCmd Cmd)
    155          {
   \                     ??SetEnable:
   \   00000000   00402DE9           PUSH     {LR}
    156          	PROTankPtr->StartVolPercent = PROTankPtr->FilteredVolPercent;
   \   00000004   EC2090E5           LDR      R2,[R0, #+236]
   \   00000008   B43392E5           LDR      R3,[R2, #+948]
   \   0000000C   D43282E5           STR      R3,[R2, #+724]
    157          	AlarmBasic::SetEnable(Cmd);
   \   00000010   ........           _BLF     ??SetEnable_1,??SetEnable??rA
    158          }
   \   00000014   ........           B        ?Subroutine10

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelChange &AlarmLevelChange::new AlarmLevelChange(PRogramObjectBase *, float, bool)
   \                     `??new AlarmLevelChange`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLevelChange_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLevelChange
   \                     `??new AlarmLevelChange_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    159          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLevelChange::AlarmLevelChange(PRogramObjectBase *, float, bool)
                                       20
     AlarmLevelChange::Check()         28
     AlarmLevelChange::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLevelChange::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLevelChange::PutFloatValue(int, float)
                                        4
     AlarmLevelChange::PutValue(int, int, AnsiString, bool, int *)
                                      156
     AlarmLevelChange::SetEnable(EnableCmd)
                                        4
     AlarmLevelChange::new AlarmLevelChange(PRogramObjectBase *, float, bool)
                                       16
     AlarmLevelChange::~AlarmLevelChange()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLevelChange::~AlarmLevelChange()
                                      56
     AlarmLevelChange::NumberOfAlarmSettings
                                       4
     AlarmLevelChange::AlarmLevelChange(PRogramObjectBase *, float, bool)
                                     152
     AlarmLevelChange::Check()       172
     ?Subroutine9                      8
     AlarmLevelChange::PutValue(int, int, AnsiString, bool, int *)
                                     648
     AlarmLevelChange::GetValue(int, int, float &, int &, int &)
                                     156
     AlarmLevelChange::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine10                     8
     AlarmLevelChange::PutFloatValue(int, float)
                                       8
     AlarmLevelChange::SetEnable(EnableCmd)
                                      24
     ?<Constant "New limit">          12
     AlarmLevelChange::new AlarmLevelChange(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         420

 
 1 592 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 252 bytes of CODE  memory (+ 356 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
