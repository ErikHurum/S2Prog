##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:48 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIInclinometer_mA.cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AIInclinometer_mA.cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIInclinometer_mA.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIInclinometer_mA.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIInclinometer_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs size_t char_traits::length(char const *)
   \                     ??length:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     strlen,??strlen??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
   \                     ??Ref:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
   \                     `??operator less<AlarmBasic *> &`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??Ref,??Ref??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
   \                     ??pair:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??iterator,??iterator??rA
   \   0000001C   0460C4E5           STRB     R6,[R4, #+4]
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(char const *)
   \                     `??operator+=_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append_1,??append??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_4    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_4:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(char const *)
   \                     ??append_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??length,??length??rA
   \   00000014   0020B0E1           MOVS     R2,R0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_3,??append??rA_3
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *operator new(unsigned int, void *)
   \                     `??operator new`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node * allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
   \                     ??max_size:
   \   00000000   14209FE5           LDR      R2,??max_size_2  ;; 0xccccccc
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_3
   \                     ??max_size_4:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_3:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??max_size_2:
   \   0000001C   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
   \                     `??operator()`:
   \   00000000   020051E1           CMP      R1,R2
   \   00000004   0100002A           BCS      `??operator()_1`
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   000000EA           B        `??operator()_2`
   \                     `??operator()_1`:
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     `??operator()_2`:
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
   \                     ??_GenNode:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   04C0DDE5           LDRB     R12,[SP, #+4]
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   042080E5           STR      R2,[R0, #+4]
   \   00000010   083080E5           STR      R3,[R0, #+8]
   \   00000014   0CC0C0E5           STRB     R12,[R0, #+12]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0D40C0E5           STRB     R4,[R0, #+13]
   \   00000020   1000BDE8           POP      {R4}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Color:
   \   00000000   0C0090E2           ADDS     R0,R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil:
   \   00000000   0D0090E2           ADDS     R0,R0,#+13
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \                     ??_Max_1:
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0400001A           BNE      ??_Max_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0040B0E1           MOVS     R4,R0
   \   00000038   F2FFFFEA           B        ??_Max_1
   \                     ??_Max_2:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_DecP_1
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Right,??_Right??rA
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   240000EA           B        ??_DecP_2
   \                     ??_DecP_1:
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Left,??_Left??rA
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400001A           BNE      ??_DecP_3
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Left,??_Left??rA
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     ??_Max,??_Max??rA
   \   00000060   170000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \                     ??_DecP_4:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0050B0E1           MOVS     R5,R0
   \   00000074   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0600001A           BNE      ??_DecP_5
   \   00000088   0500B0E1           MOVS     R0,R5
   \   0000008C   ........           _BLF     ??_Left,??_Left??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0100001A           BNE      ??_DecP_5
   \   0000009C   0540B0E1           MOVS     R4,R5
   \   000000A0   EFFFFFEA           B        ??_DecP_4
   \                     ??_DecP_5:
   \   000000A4   0500B0E1           MOVS     R0,R5
   \   000000A8   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   000000AC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0000001A           BNE      ??_DecP_6
   \   000000BC   0540B0E1           MOVS     R4,R5
   \                     ??_DecP_6:
   \   000000C0   0400B0E1           MOVS     R0,R4
   \                     ??_DecP_2:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_GenIter:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
   \                     `??operator==`:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0100001A           BNE      `??operator==_2`
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   000000EA           B        `??operator==_3`
   \                     `??operator==_2`:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     `??operator==_3`:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     ??_DecP,??_DecP??rA
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
   \                     ??_Mynode:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Root()
   \                     ??_Root:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Lmost()
   \                     ??_Lmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Left,??_Left??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Rmost()
   \                     ??_Rmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Left,??_Left??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Left,??_Left??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Right,??_Right??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Rrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Right,??_Right??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Rrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Rrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Right,??_Right??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Rrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Right,??_Right??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Left,??_Left??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Rrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Right,??_Right??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Right,??_Right??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Right,??_Right??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Left,??_Left??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Left,??_Left??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Lrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Lrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Lrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Left,??_Left??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Lrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Left,??_Left??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Right,??_Right??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Lrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Left,??_Left??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   100094E5           LDR      R0,[R4, #+16]
   \   00000018   010090E2           ADDS     R0,R0,#+1
   \   0000001C   100084E5           STR      R0,[R4, #+16]
   \   00000020   040056E1           CMP      R6,R4
   \   00000024   0900001A           BNE      ??_Insert_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Root,??_Root??rA
   \   00000030   007080E5           STR      R7,[R0, #+0]
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000003C   007080E5           STR      R7,[R0, #+0]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   00000048   007080E5           STR      R7,[R0, #+0]
   \   0000004C   180000EA           B        ??_Insert_3
   \                     ??_Insert_2:
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0B00000A           BEQ      ??_Insert_4
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   007080E5           STR      R7,[R0, #+0]
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000056E1           CMP      R6,R0
   \   00000074   0E00001A           BNE      ??_Insert_3
   \   00000078   0400B0E1           MOVS     R0,R4
   \   0000007C   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   00000080   007080E5           STR      R7,[R0, #+0]
   \   00000084   0A0000EA           B        ??_Insert_3
   \                     ??_Insert_4:
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     ??_Right,??_Right??rA
   \   00000090   007080E5           STR      R7,[R0, #+0]
   \   00000094   0400B0E1           MOVS     R0,R4
   \   00000098   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000056E1           CMP      R6,R0
   \   000000A4   0200001A           BNE      ??_Insert_3
   \   000000A8   0400B0E1           MOVS     R0,R4
   \   000000AC   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   000000B0   007080E5           STR      R7,[R0, #+0]
   \                     ??_Insert_3:
   \   000000B4   0780B0E1           MOVS     R8,R7
   \                     ??_Insert_5:
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     ??_Color,??_Color??rA
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   A200001A           BNE      ??_Insert_6
   \   000000D8   0800B0E1           MOVS     R0,R8
   \   000000DC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E0   0090B0E1           MOVS     R9,R0
   \   000000E4   0800B0E1           MOVS     R0,R8
   \   000000E8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000F4   009099E5           LDR      R9,[R9, #+0]
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   ........           _BLF     ??_Left,??_Left??rA
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   4A00001A           BNE      ??_Insert_7
   \   0000010C   0800B0E1           MOVS     R0,R8
   \   00000110   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   ........           _BLF     ??_Right,??_Right??rA
   \   00000124   000090E5           LDR      R0,[R0, #+0]
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   0600B0E1           MOVS     R0,R6
   \   00000130   ........           _BLF     ??_Color,??_Color??rA
   \   00000134   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000138   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   1800001A           BNE      ??_Insert_8
   \   00000144   0800B0E1           MOVS     R0,R8
   \   00000148   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     ??_Color,??_Color??rA
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   0010C0E5           STRB     R1,[R0, #+0]
   \   0000015C   0600B0E1           MOVS     R0,R6
   \   00000160   ........           _BLF     ??_Color,??_Color??rA
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   0010C0E5           STRB     R1,[R0, #+0]
   \   0000016C   0800B0E1           MOVS     R0,R8
   \   00000170   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     ??_Color,??_Color??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0010C0E5           STRB     R1,[R0, #+0]
   \   0000018C   0800B0E1           MOVS     R0,R8
   \   00000190   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   0080B0E1           MOVS     R8,R0
   \   000001A4   C3FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   000001A8   0800B0E1           MOVS     R0,R8
   \   000001AC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   ........           _BLF     ??_Right,??_Right??rA
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000058E1           CMP      R8,R0
   \   000001C0   0600001A           BNE      ??_Insert_9
   \   000001C4   0800B0E1           MOVS     R0,R8
   \   000001C8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0080B0E1           MOVS     R8,R0
   \   000001D4   0810B0E1           MOVS     R1,R8
   \   000001D8   0400B0E1           MOVS     R0,R4
   \   000001DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000001E0   0800B0E1           MOVS     R0,R8
   \   000001E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   ........           _BLF     ??_Color,??_Color??rA
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001F8   0800B0E1           MOVS     R0,R8
   \   000001FC   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   ........           _BLF     ??_Color,??_Color??rA
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0010C0E5           STRB     R1,[R0, #+0]
   \   00000218   0800B0E1           MOVS     R0,R8
   \   0000021C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000228   001090E5           LDR      R1,[R0, #+0]
   \   0000022C   0400B0E1           MOVS     R0,R4
   \   00000230   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000234   9FFFFFEA           B        ??_Insert_5
   \                     ??_Insert_7:
   \   00000238   0800B0E1           MOVS     R0,R8
   \   0000023C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   ........           _BLF     ??_Left,??_Left??rA
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   0060B0E1           MOVS     R6,R0
   \   00000258   0600B0E1           MOVS     R0,R6
   \   0000025C   ........           _BLF     ??_Color,??_Color??rA
   \   00000260   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000264   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   1800001A           BNE      ??_Insert_10
   \   00000270   0800B0E1           MOVS     R0,R8
   \   00000274   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           _BLF     ??_Color,??_Color??rA
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   0010C0E5           STRB     R1,[R0, #+0]
   \   00000288   0600B0E1           MOVS     R0,R6
   \   0000028C   ........           _BLF     ??_Color,??_Color??rA
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   0010C0E5           STRB     R1,[R0, #+0]
   \   00000298   0800B0E1           MOVS     R0,R8
   \   0000029C   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A0   000090E5           LDR      R0,[R0, #+0]
   \   000002A4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A8   000090E5           LDR      R0,[R0, #+0]
   \   000002AC   ........           _BLF     ??_Color,??_Color??rA
   \   000002B0   0010A0E3           MOV      R1,#+0
   \   000002B4   0010C0E5           STRB     R1,[R0, #+0]
   \   000002B8   0800B0E1           MOVS     R0,R8
   \   000002BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   0080B0E1           MOVS     R8,R0
   \   000002D0   78FFFFEA           B        ??_Insert_5
   \                     ??_Insert_10:
   \   000002D4   0800B0E1           MOVS     R0,R8
   \   000002D8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002DC   000090E5           LDR      R0,[R0, #+0]
   \   000002E0   ........           _BLF     ??_Left,??_Left??rA
   \   000002E4   000090E5           LDR      R0,[R0, #+0]
   \   000002E8   000058E1           CMP      R8,R0
   \   000002EC   0600001A           BNE      ??_Insert_11
   \   000002F0   0800B0E1           MOVS     R0,R8
   \   000002F4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   0080B0E1           MOVS     R8,R0
   \   00000300   0810B0E1           MOVS     R1,R8
   \   00000304   0400B0E1           MOVS     R0,R4
   \   00000308   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000030C   0800B0E1           MOVS     R0,R8
   \   00000310   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000314   000090E5           LDR      R0,[R0, #+0]
   \   00000318   ........           _BLF     ??_Color,??_Color??rA
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   0010C0E5           STRB     R1,[R0, #+0]
   \   00000324   0800B0E1           MOVS     R0,R8
   \   00000328   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000032C   000090E5           LDR      R0,[R0, #+0]
   \   00000330   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           _BLF     ??_Color,??_Color??rA
   \   0000033C   0010A0E3           MOV      R1,#+0
   \   00000340   0010C0E5           STRB     R1,[R0, #+0]
   \   00000344   0800B0E1           MOVS     R0,R8
   \   00000348   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000354   001090E5           LDR      R1,[R0, #+0]
   \   00000358   0400B0E1           MOVS     R0,R4
   \   0000035C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000360   54FFFFEA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000364   0400B0E1           MOVS     R0,R4
   \   00000368   ........           _BLF     ??_Root,??_Root??rA
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   ........           _BLF     ??_Color,??_Color??rA
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0010C0E5           STRB     R1,[R0, #+0]
   \   0000037C   F043BDE8           POP      {R4-R9,LR}
   \   00000380   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
   \                     ??comp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   140094E2           ADDS     R0,R4,#+20
   \   0000000C   ........           _BLF     `??operator less<AlarmBasic *> &`,`??operator less<AlarmBasic *> &??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
   \                     ??_Node:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   2090DDE5           LDRB     R9,[SP, #+32]
   \   0000001C   0900B0E1           MOVS     R0,R9
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0730B0E1           MOVS     R3,R7
   \   00000028   0620B0E1           MOVS     R2,R6
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_GenNode,??_GenNode??rA
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   108084E5           STR      R8,[R4, #+16]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F043BDE8           POP      {R4-R9,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
   \                     ??_Kfn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Kfn_1,??_Kfn??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
   \                     ??_Alnod:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Myval,??_Myval??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent_1:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right_1:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic *& _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Myval:
   \   00000000   100090E2           ADDS     R0,R0,#+16
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??const_iterator:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_GenIter,??_GenIter??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
   \                     `??operator==_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
   \                     ??_Mynode_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mynode,??_Mynode??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
   \                     ??iterator:
   \   00000000   001091E5           LDR      R1,[R1, #+0]
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??iterator_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??const_iterator,??const_iterator??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator &_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
   \                     `??operator--`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Dec,??_Dec??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
   \                     ??begin:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Lmost_1,??_Lmost??rA_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
   \                     ??max_size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??max_size,??max_size??rA
   \   00000020   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0080B0E1           MOVS     R8,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   \   00000010   0290B0E1           MOVS     R9,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Root_1,??_Root??rA_1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0070B0E1           MOVS     R7,R0
   \                     ??insert_1:
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Isnil_1,??_Isnil??rA_1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1800001A           BNE      ??insert_2
   \   00000050   0560B0E1           MOVS     R6,R5
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??_Key,??_Key??rA
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   0900B0E1           MOVS     R0,R9
   \   00000064   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000068   00B0B0E1           MOVS     R11,R0
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   ........           _BLF     ??comp,??comp??rA
   \   00000074   0A20B0E1           MOVS     R2,R10
   \   00000078   0B10B0E1           MOVS     R1,R11
   \   0000007C   ........           _BLF     `??operator()`,`??operator()??rA`
   \   00000080   0070B0E1           MOVS     R7,R0
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0400000A           BEQ      ??insert_3
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   0050B0E1           MOVS     R5,R0
   \   0000009C   E5FFFFEA           B        ??insert_1
   \                     ??insert_3:
   \   000000A0   0500B0E1           MOVS     R0,R5
   \   000000A4   ........           _BLF     ??_Right_1,??_Right??rA_1
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0050B0E1           MOVS     R5,R0
   \   000000B0   E0FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   000000B4   0610B0E1           MOVS     R1,R6
   \   000000B8   0D00B0E1           MOVS     R0,SP
   \   000000BC   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   1800000A           BEQ      ??insert_4
   \   000000C8   0400B0E1           MOVS     R0,R4
   \   000000CC   ........           _BLF     ??begin,??begin??rA
   \   000000D0   0C008DE5           STR      R0,[SP, #+12]
   \   000000D4   0C108DE2           ADD      R1,SP,#+12
   \   000000D8   0D00B0E1           MOVS     R0,SP
   \   000000DC   ........           _BLF     `??operator==_1`,`??operator==??rA_1`
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0E00000A           BEQ      ??insert_5
   \   000000E8   0930B0E1           MOVS     R3,R9
   \   000000EC   0620B0E1           MOVS     R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   000000FC   08008DE5           STR      R0,[SP, #+8]
   \   00000100   0120A0E3           MOV      R2,#+1
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   20008DE2           ADD      R0,SP,#+32
   \   0000010C   ........           _BLF     ??pair,??pair??rA
   \   00000110   20008DE2           ADD      R0,SP,#+32
   \   00000114   030090E8           LDM      R0,{R0,R1}
   \   00000118   030088E8           STM      R8,{R0,R1}
   \   0000011C   0800B0E1           MOVS     R0,R8
   \   00000120   260000EA           B        ??insert_6
   \                     ??insert_5:
   \   00000124   0D00B0E1           MOVS     R0,SP
   \   00000128   ........           _BLF     `??operator--`,`??operator--??rA`
   \                     ??insert_4:
   \   0000012C   0900B0E1           MOVS     R0,R9
   \   00000130   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000134   00A0B0E1           MOVS     R10,R0
   \   00000138   0D00B0E1           MOVS     R0,SP
   \   0000013C   ........           _BLF     ??_Mynode_1,??_Mynode??rA_1
   \   00000140   ........           _BLF     ??_Key,??_Key??rA
   \   00000144   00B0B0E1           MOVS     R11,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??comp,??comp??rA
   \   00000150   0A20B0E1           MOVS     R2,R10
   \   00000154   0B10B0E1           MOVS     R1,R11
   \   00000158   ........           _BLF     `??operator()`,`??operator()??rA`
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0E00000A           BEQ      ??insert_7
   \   00000164   0930B0E1           MOVS     R3,R9
   \   00000168   0620B0E1           MOVS     R2,R6
   \   0000016C   0710B0E1           MOVS     R1,R7
   \   00000170   0400B0E1           MOVS     R0,R4
   \   00000174   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0120A0E3           MOV      R2,#+1
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   18008DE2           ADD      R0,SP,#+24
   \   00000188   ........           _BLF     ??pair,??pair??rA
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   030090E8           LDM      R0,{R0,R1}
   \   00000194   030088E8           STM      R8,{R0,R1}
   \   00000198   0800B0E1           MOVS     R0,R8
   \   0000019C   070000EA           B        ??insert_6
   \                     ??insert_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10B0E1           MOVS     R1,SP
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??pair,??pair??rA
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   030090E8           LDM      R0,{R0,R1}
   \   000001B8   030088E8           STM      R8,{R0,R1}
   \   000001BC   0800B0E1           MOVS     R0,R8
   \                     ??insert_6:
   \   000001C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C4   F04FBDE8           POP      {R4-R11,LR}
   \   000001C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??max_size_1,??max_size??rA_1
   \   00000020   0090B0E1           MOVS     R9,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   00A0B0E1           MOVS     R10,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Head,??_Head??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0710B0E1           MOVS     R1,R7
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0A30B0E1           MOVS     R3,R10
   \   0000004C   0620B0E1           MOVS     R2,R6
   \   00000050   0010B0E1           MOVS     R1,R0
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??_Buynode,??_Buynode??rA
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   0830B0E1           MOVS     R3,R8
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000078   0810B0E1           MOVS     R1,R8
   \   0000007C   0D00B0E1           MOVS     R0,SP
   \   00000080   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
   \                     ??_Lmost_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
   \                     ??_Root_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Parent_1,??_Parent??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
   \                     ??_Head:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
   \                     ??_Buynode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C90DDE5           LDRB     R9,[SP, #+44]
   \   00000020   0D10B0E1           MOVS     R1,SP
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   00000038   00A0B0E1           MOVS     R10,R0
   \   0000003C   0A10B0E1           MOVS     R1,R10
   \   00000040   1400A0E3           MOV      R0,#+20
   \   00000044   ........           _BLF     `??operator new`,`??operator new??rA_1`
   \   00000048   00B0B0E1           MOVS     R11,R0
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0A00000A           BEQ      ??_Buynode_1
   \   00000054   0900B0E1           MOVS     R0,R9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800B0E1           MOVS     R0,R8
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0730B0E1           MOVS     R3,R7
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0B00B0E1           MOVS     R0,R11
   \   00000074   ........           _BLF     ??_Node,??_Node??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   000000EA           B        ??_Buynode_2
   \                     ??_Buynode_1:
   \   00000080   00B0A0E3           MOV      R11,#+0
   \                     ??_Buynode_2:
   \   00000084   0A00B0E1           MOVS     R0,R10
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F04FBDE8           POP      {R4-R11,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
   \                     ??_Kfn_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=_1`,`??operator+=??rA_1`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIInclinometer_mA::AIInclinometer_mA(int SnsType) : AIInclinometer(SnsType) {
   \                     ??AIInclinometer_mA:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??AIInclinometer,??AIInclinometer??rA
   \   0000001C   E4009FE5           LDR      R0,??AIInclinometer_mA_1  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
     10              AlarmmAmpShortCircuit    *ShortCircuitPtr             = new AlarmmAmpShortCircuit(this);
   \   00000024   EC00A0E3           MOV      R0,#+236
   \   00000028   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   0000002C   0090B0E1           MOVS     R9,R0
   \   00000030   000059E3           CMP      R9,#+0
   \   00000034   0400000A           BEQ      ??AIInclinometer_mA_2
   \   00000038   0410B0E1           MOVS     R1,R4
   \   0000003C   0900B0E1           MOVS     R0,R9
   \   00000040   ........           _BLF     ??AlarmmAmpShortCircuit,??AlarmmAmpShortCircuit??rA
   \   00000044   0960B0E1           MOVS     R6,R9
   \   00000048   000000EA           B        ??AIInclinometer_mA_3
   \                     ??AIInclinometer_mA_2:
   \   0000004C   0060A0E3           MOV      R6,#+0
     11              AlarmmAmpOpenLoop        *OpenLoopPtr                 = new AlarmmAmpOpenLoop(this);
   \                     ??AIInclinometer_mA_3:
   \   00000050   EC00A0E3           MOV      R0,#+236
   \   00000054   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000058   0090B0E1           MOVS     R9,R0
   \   0000005C   000059E3           CMP      R9,#+0
   \   00000060   0500000A           BEQ      ??AIInclinometer_mA_4
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0410B0E1           MOVS     R1,R4
   \   0000006C   0900B0E1           MOVS     R0,R9
   \   00000070   ........           _BLF     ??AlarmmAmpOpenLoop,??AlarmmAmpOpenLoop??rA
   \   00000074   0970B0E1           MOVS     R7,R9
   \   00000078   000000EA           B        ??AIInclinometer_mA_5
   \                     ??AIInclinometer_mA_4:
   \   0000007C   0070A0E3           MOV      R7,#+0
     12              AlarmInclinometerFailure *AlarmInclinometerFailurePtr = new AlarmInclinometerFailure(this);
   \                     ??AIInclinometer_mA_5:
   \   00000080   EC00A0E3           MOV      R0,#+236
   \   00000084   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000088   0090B0E1           MOVS     R9,R0
   \   0000008C   000059E3           CMP      R9,#+0
   \   00000090   0400000A           BEQ      ??AIInclinometer_mA_6
   \   00000094   0410B0E1           MOVS     R1,R4
   \   00000098   0900B0E1           MOVS     R0,R9
   \   0000009C   ........           _BLF     ??AlarmInclinometerFailure,??AlarmInclinometerFailure??rA
   \   000000A0   0980B0E1           MOVS     R8,R9
   \   000000A4   000000EA           B        ??AIInclinometer_mA_7
   \                     ??AIInclinometer_mA_6:
   \   000000A8   0080A0E3           MOV      R8,#+0
     13              AlarmSet.insert(ShortCircuitPtr);
   \                     ??AIInclinometer_mA_7:
   \   000000AC   0620B0E1           MOVS     R2,R6
   \   000000B0   C01094E2           ADDS     R1,R4,#+192
   \   000000B4   0D00B0E1           MOVS     R0,SP
   \   000000B8   ........           _BLF     ??insert,??insert??rA
     14              AlarmSet.insert(OpenLoopPtr);
   \   000000BC   0720B0E1           MOVS     R2,R7
   \   000000C0   C01094E2           ADDS     R1,R4,#+192
   \   000000C4   08008DE2           ADD      R0,SP,#+8
   \   000000C8   ........           _BLF     ??insert,??insert??rA
     15              AlarmSet.insert(AlarmInclinometerFailurePtr);
   \   000000CC   0820B0E1           MOVS     R2,R8
   \   000000D0   C01094E2           ADDS     R1,R4,#+192
   \   000000D4   10008DE2           ADD      R0,SP,#+16
   \   000000D8   ........           _BLF     ??insert,??insert??rA
     16          
     17              // Init the other variables
     18              MaxRange  = 100.0;
   \   000000DC   4004A0E3           MOV      R0,#+1073741824
   \   000000E0   B20780E3           ORR      R0,R0,#0x2C80000
   \   000000E4   600184E5           STR      R0,[R4, #+352]
     19              MinRange  = 0.0;
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   5C0184E5           STR      R0,[R4, #+348]
     20              MakeConstants();
   \   000000F0   0400B0E1           MOVS     R0,R4
   \   000000F4   ........           BL       ??MakeConstants
     21          }
   \   000000F8   0400B0E1           MOVS     R0,R4
   \   000000FC   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000100   F043BDE8           POP      {R4-R9,LR}
   \   00000104   1EFF2FE1           BX       LR               ;; return
   \                     ??AIInclinometer_mA_1:
   \   00000108   ........           DC32     ??__vtbl
     22          //---------------------------------------------------------------------------
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          AIInclinometer_mA::~AIInclinometer_mA(void) {
   \                     `?~AIInclinometer_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AIInclinometer_mA_1`
     25          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AIInclinometer`,`?~AIInclinometer??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AIInclinometer_mA_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIInclinometer_mA_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     26          //---------------------------------------------------------------------------
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void AIInclinometer_mA::NewValue(float NewVal) {
   \                     ??NewValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     29              HWFailure     = false;
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0C01C4E5           STRB     R0,[R4, #+268]
     30          
     31              TimeStamp     = clock();
   \   00000014   ........           _BLF     clock,??clock??rA
   \   00000018   400084E5           STR      R0,[R4, #+64]
     32              FilteredValue = NewVal;//FilterVal(FilteredValue, NewVal, 1);
   \   0000001C   445184E5           STR      R5,[R4, #+324]
     33          }
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
     34          
     35          //////////////////////////////////////////////////////////////////
     36          //
     37          // Sensor calculations
     38          //
     39          //////////////////////////////////////////////////////////////////
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          void AIInclinometer_mA::MakeConstants(void) {
   \                     ??MakeConstants:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0060B0E1           MOVS     R6,R0
     42              a = (MaxRange - MinRange) / (0.02 - 0.004);
   \   00000008   600196E5           LDR      R0,[R6, #+352]
   \   0000000C   5C1196E5           LDR      R1,[R6, #+348]
   \   00000010   ........           _BLF     __fSub,??__fSub??rA
   \   00000014   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000018   54209FE5           LDR      R2,??MakeConstants_1  ;; 0xffffffffd2f1a9fc
   \   0000001C   54309FE5           LDR      R3,??MakeConstants_1+0x4  ;; 0x3f90624d
   \   00000020   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000024   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000028   700186E5           STR      R0,[R6, #+368]
     43              b = MaxRange - a * 0.02;
   \   0000002C   700196E5           LDR      R0,[R6, #+368]
   \   00000030   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000034   40209FE5           LDR      R2,??MakeConstants_1+0x8  ;; 0x47ae147b
   \   00000038   40309FE5           LDR      R3,??MakeConstants_1+0xC  ;; 0x3f947ae1
   \   0000003C   ........           _BLF     __dMul,??__dMul??rA
   \   00000040   0020A0E1           MOV      R2,R0
   \   00000044   0130A0E1           MOV      R3,R1
   \   00000048   0240A0E1           MOV      R4,R2
   \   0000004C   0350A0E1           MOV      R5,R3
   \   00000050   600196E5           LDR      R0,[R6, #+352]
   \   00000054   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0530A0E1           MOV      R3,R5
   \   00000060   ........           _BLF     __dSub,??__dSub??rA
   \   00000064   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000068   740186E5           STR      R0,[R6, #+372]
     44          }
   \   0000006C   7040BDE8           POP      {R4-R6,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConstants_1:
   \   00000074   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   00000078   4D62903F           DC32     0x3f90624d
   \   0000007C   7B14AE47           DC32     0x47ae147b
   \   00000080   E17A943F           DC32     0x3f947ae1
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          float AIInclinometer_mA::Get_Angle(float Amp) {
   \                     ??Get_Angle:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     47              float Angle = a * Amp + b;
   \   0000000C   700194E5           LDR      R0,[R4, #+368]
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   ........           _BLF     __fMul,??__fMul??rA
   \   00000018   741194E5           LDR      R1,[R4, #+372]
   \   0000001C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000020   0060B0E1           MOVS     R6,R0
     48              return (Angle);
   \   00000024   0600B0E1           MOVS     R0,R6
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     49          }
     50          // Should support correction of the inclinometer

   \                                 In segment CODE, align 4, keep-with-next
     51          float AIInclinometer_mA::Calculate(void) {
   \                     ??Calculate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0060B0E1           MOVS     R6,R0
     52              if ( CanCalculate() ) {
   \   00000008   0600B0E1           MOVS     R0,R6
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4100000A           BEQ      ??Calculate_1
     53                  // This value should be checked for alarm
     54                  CalcValue = Gain * Get_Angle(FilteredValue) * Sign / RAD_FACTOR - Offset;
   \   00000018   441196E5           LDR      R1,[R6, #+324]
   \   0000001C   0600B0E1           MOVS     R0,R6
   \   00000020   ........           BL       ??Get_Angle
   \   00000024   3C1196E5           LDR      R1,[R6, #+316]
   \   00000028   ........           _BLF     __fMul,??__fMul??rA
   \   0000002C   641196E5           LDR      R1,[R6, #+356]
   \   00000030   ........           _BLF     __fMul,??__fMul??rA
   \   00000034   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000038   EC209FE5           LDR      R2,??Calculate_2  ;; 0x1a63c1f8
   \   0000003C   EC309FE5           LDR      R3,??Calculate_2+0x4  ;; 0x404ca5dc
   \   00000040   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0150A0E1           MOV      R5,R1
   \   0000004C   400196E5           LDR      R0,[R6, #+320]
   \   00000050   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000054   0020A0E1           MOV      R2,R0
   \   00000058   0130A0E1           MOV      R3,R1
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   ........           _BLF     __dSub,??__dSub??rA
   \   00000068   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000006C   480186E5           STR      R0,[R6, #+328]
     55                  if ( CalcValue > MaxRange*1.1 || CalcValue < MinRange*1.1 ) {
   \   00000070   600196E5           LDR      R0,[R6, #+352]
   \   00000074   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000078   B4209FE5           LDR      R2,??Calculate_2+0x8  ;; 0xffffffff9999999a
   \   0000007C   B4309FE5           LDR      R3,??Calculate_2+0xC  ;; 0x3ff19999
   \   00000080   ........           _BLF     __dMul,??__dMul??rA
   \   00000084   0040A0E1           MOV      R4,R0
   \   00000088   0150A0E1           MOV      R5,R1
   \   0000008C   480196E5           LDR      R0,[R6, #+328]
   \   00000090   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000094   0020A0E1           MOV      R2,R0
   \   00000098   0130A0E1           MOV      R3,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   ........           _BLF     __dLess,??__dLess??rA
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0F00001A           BNE      ??Calculate_3
   \   000000B0   480196E5           LDR      R0,[R6, #+328]
   \   000000B4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000B8   0040A0E1           MOV      R4,R0
   \   000000BC   0150A0E1           MOV      R5,R1
   \   000000C0   5C0196E5           LDR      R0,[R6, #+348]
   \   000000C4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000C8   64209FE5           LDR      R2,??Calculate_2+0x8  ;; 0xffffffff9999999a
   \   000000CC   64309FE5           LDR      R3,??Calculate_2+0xC  ;; 0x3ff19999
   \   000000D0   ........           _BLF     __dMul,??__dMul??rA
   \   000000D4   0020A0E1           MOV      R2,R0
   \   000000D8   0130A0E1           MOV      R3,R1
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   0510A0E1           MOV      R1,R5
   \   000000E4   ........           _BLF     __dLess,??__dLess??rA
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0200000A           BEQ      ??Calculate_4
     56                      Failure = true;
   \                     ??Calculate_3:
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   3801C6E5           STRB     R0,[R6, #+312]
   \   000000F8   010000EA           B        ??Calculate_5
     57                  } else {
     58                      Failure = false;
   \                     ??Calculate_4:
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   3801C6E5           STRB     R0,[R6, #+312]
     59                  }
     60                  ResultOK  = !Failure;
   \                     ??Calculate_5:
   \   00000104   3801D6E5           LDRB     R0,[R6, #+312]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0100001A           BNE      ??Calculate_6
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   000000EA           B        ??Calculate_7
   \                     ??Calculate_6:
   \   00000118   0000A0E3           MOV      R0,#+0
   \                     ??Calculate_7:
   \   0000011C   3601C6E5           STRB     R0,[R6, #+310]
     61              }
     62              return (CalcValue);
   \                     ??Calculate_1:
   \   00000120   480196E5           LDR      R0,[R6, #+328]
   \   00000124   7040BDE8           POP      {R4-R6,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   \                     ??Calculate_2:
   \   0000012C   F8C1631A           DC32     0x1a63c1f8
   \   00000130   DCA54C40           DC32     0x404ca5dc
   \   00000134   9A999999           DC32     0xffffffff9999999a
   \   00000138   9999F13F           DC32     0x3ff19999
     63          
     64          }
     65          
     66          
     67          ///////////////////////////////////////////////////////////////
     68          //
     69          // Routines for the Configuration
     70          //
     71          ///////////////////////////////////////////////////////////////
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          AnsiString AIInclinometer_mA::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   62DF4DE2           SUB      SP,SP,#+392
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     74              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
   \   00000014   012096E2           ADDS     R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     75              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
   \   00000024   022096E2           ADDS     R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     76              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
   \   00000034   032096E2           ADDS     R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   540F8DE2           ADD      R0,SP,#+336
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     77              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
   \   00000044   042096E2           ADDS     R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     78              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
   \   00000054   052096E2           ADDS     R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   460F8DE2           ADD      R0,SP,#+280
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     79              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
   \   00000064   062096E2           ADDS     R2,R6,#+6
   \   00000068   0910A0E3           MOV      R1,#+9
   \   0000006C   FC008DE2           ADD      R0,SP,#+252
   \   00000070   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     80              AnsiString LocalString;
   \   00000074   0500B0E1           MOVS     R0,R5
   \   00000078   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     81              LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   0000007C   A01094E5           LDR      R1,[R4, #+160]
   \   00000080   8C008DE2           ADD      R0,SP,#+140
   \   00000084   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000088   8C208DE2           ADD      R2,SP,#+140
   \   0000008C   0D10B0E1           MOVS     R1,SP
   \   00000090   A8008DE2           ADD      R0,SP,#+168
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   EC209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   0000009C   A8108DE2           ADD      R1,SP,#+168
   \   000000A0   C4008DE2           ADD      R0,SP,#+196
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   C4108DE2           ADD      R1,SP,#+196
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000B4   C4008DE2           ADD      R0,SP,#+196
   \   000000B8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000BC   A8008DE2           ADD      R0,SP,#+168
   \   000000C0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000C4   8C008DE2           ADD      R0,SP,#+140
   \   000000C8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     82              LocalString += AnalogInput::MakeConfigString();  //common
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   70108DE2           ADD      R1,SP,#+112
   \   000000D4   0400B0E1           MOVS     R0,R4
   \   000000D8   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000DC   70108DE2           ADD      R1,SP,#+112
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000E8   70008DE2           ADD      R0,SP,#+112
   \   000000EC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     83              LocalString += TabStr1 + KeyWord(C_AI_END) + CrLfStr;
   \   000000F0   9810A0E3           MOV      R1,#+152
   \   000000F4   801E81E3           ORR      R1,R1,#0x800
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   1C208DE2           ADD      R2,SP,#+28
   \   00000104   0D10B0E1           MOVS     R1,SP
   \   00000108   38008DE2           ADD      R0,SP,#+56
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   74209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000114   38108DE2           ADD      R1,SP,#+56
   \   00000118   54008DE2           ADD      R0,SP,#+84
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   54108DE2           ADD      R1,SP,#+84
   \   00000124   0500B0E1           MOVS     R0,R5
   \   00000128   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   0000012C   54008DE2           ADD      R0,SP,#+84
   \   00000130   ........           _BLF     `?~string`,`?~string??rA`
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     `?~string`,`?~string??rA`
   \   0000013C   1C008DE2           ADD      R0,SP,#+28
   \   00000140   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     84              LocalString += CrLfStr;
   \   00000144   40109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   00000148   0500B0E1           MOVS     R0,R5
   \   0000014C   ........           _BLF     `??operator+=`,`??operator+=??rA`
     85          
     86              return (LocalString);
   \   00000150   FC008DE2           ADD      R0,SP,#+252
   \   00000154   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000158   460F8DE2           ADD      R0,SP,#+280
   \   0000015C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000160   4D0F8DE2           ADD      R0,SP,#+308
   \   00000164   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000168   540F8DE2           ADD      R0,SP,#+336
   \   0000016C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000170   5B0F8DE2           ADD      R0,SP,#+364
   \   00000174   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000178   0D00B0E1           MOVS     R0,SP
   \   0000017C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000180   62DF8DE2           ADD      SP,SP,#+392      ;; stack cleaning
   \   00000184   7040BDE8           POP      {R4-R6,LR}
   \   00000188   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   0000018C   ........           DC32     CrLfStr
     87          }
     88          //---------------------------------------------------------------------------
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          bool AIInclinometer_mA::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   ACD04DE2           SUB      SP,SP,#+172
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     91              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0060B0E1           MOVS     R6,R0
     92              int ErrorLine = 0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     93              int Key;
     94              do {
     95                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20B0E1           MOVS     R2,SP
   \   00000028   20108DE2           ADD      R1,SP,#+32
   \   0000002C   0500B0E1           MOVS     R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     96                  if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A00000A           BEQ      ??LoadConfigString_3
     97                      if ( ErrorLine != EOF ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   5000000A           BEQ      ??LoadConfigString_4
     98                          GiveConfigWarning("Inclinometer sensor", ErrorLine);
   \   0000004C   88119FE5           LDR      R1,??LoadConfigString_5  ;; `?<Constant "Inclinometer sensor">`
   \   00000050   90008DE2           ADD      R0,SP,#+144
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   90008DE2           ADD      R0,SP,#+144
   \   00000064   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000068   480000EA           B        ??LoadConfigString_4
     99                      }
    100                  } else {
    101                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   0000006C   20108DE2           ADD      R1,SP,#+32
   \   00000070   74008DE2           ADD      R0,SP,#+116
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   74008DE2           ADD      R0,SP,#+116
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    102                      switch ( Key ) {
   \   00000088   0700B0E1           MOVS     R0,R7
   \   0000008C   0510A0E3           MOV      R1,#+5
   \   00000090   801E81E3           ORR      R1,R1,#0x800
   \   00000094   010050E1           CMP      R0,R1
   \   00000098   3100000A           BEQ      ??LoadConfigString_6
   \   0000009C   9810A0E3           MOV      R1,#+152
   \   000000A0   801E81E3           ORR      R1,R1,#0x800
   \   000000A4   010050E1           CMP      R0,R1
   \   000000A8   3800000A           BEQ      ??LoadConfigString_4
   \   000000AC   9910A0E3           MOV      R1,#+153
   \   000000B0   801E81E3           ORR      R1,R1,#0x800
   \   000000B4   010050E1           CMP      R0,R1
   \   000000B8   1400000A           BEQ      ??LoadConfigString_7
   \   000000BC   9A10A0E3           MOV      R1,#+154
   \   000000C0   801E81E3           ORR      R1,R1,#0x800
   \   000000C4   010050E1           CMP      R0,R1
   \   000000C8   3000000A           BEQ      ??LoadConfigString_4
   \   000000CC   8A0E50E3           CMP      R0,#+2208
   \   000000D0   1200000A           BEQ      ??LoadConfigString_8
    103                      default:
    104                          GiveConfigWarning("Inclinometer sensor", InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_9:
   \   000000D4   20108DE2           ADD      R1,SP,#+32
   \   000000D8   58008DE2           ADD      R0,SP,#+88
   \   000000DC   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000E0   0080B0E1           MOVS     R8,R0
   \   000000E4   F0109FE5           LDR      R1,??LoadConfigString_5  ;; `?<Constant "Inclinometer sensor">`
   \   000000E8   3C008DE2           ADD      R0,SP,#+60
   \   000000EC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000F0   1C2095E5           LDR      R2,[R5, #+28]
   \   000000F4   0810B0E1           MOVS     R1,R8
   \   000000F8   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000000FC   58008DE2           ADD      R0,SP,#+88
   \   00000100   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000104   3C008DE2           ADD      R0,SP,#+60
   \   00000108   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000010C   1F0000EA           B        ??LoadConfigString_4
    105                          break;
    106                      case C_AI_START_COMMON:
    107                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_7:
   \   00000110   0510B0E1           MOVS     R1,R5
   \   00000114   0400B0E1           MOVS     R0,R4
   \   00000118   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000011C   1B0000EA           B        ??LoadConfigString_4
    108                          break;
    109                      case C_AI_END_COMMON:
    110                      case C_AI_END:
    111                          break;
    112                      case C_AI_SERIALNO:
    113                          {
    114                              SerialNumber = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_8:
   \   00000120   0030A0E3           MOV      R3,#+0
   \   00000124   0D20B0E1           MOVS     R2,SP
   \   00000128   04108DE2           ADD      R1,SP,#+4
   \   0000012C   0500B0E1           MOVS     R0,R5
   \   00000130   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000134   04108DE2           ADD      R1,SP,#+4
   \   00000138   D80094E2           ADDS     R0,R4,#+216
   \   0000013C   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000140   04008DE2           ADD      R0,SP,#+4
   \   00000144   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    115                              NoError = !ErrorLine;
   \   00000148   00009DE5           LDR      R0,[SP, #+0]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0100001A           BNE      ??LoadConfigString_10
   \   00000154   0160A0E3           MOV      R6,#+1
   \   00000158   000000EA           B        ??LoadConfigString_11
   \                     ??LoadConfigString_10:
   \   0000015C   0060A0E3           MOV      R6,#+0
   \                     ??LoadConfigString_11:
   \   00000160   0A0000EA           B        ??LoadConfigString_4
    116                          }
    117                          break;
    118                      case C_TCU_ADDRESS:
    119                          {
    120                              TCUAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_6:
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0D10B0E1           MOVS     R1,SP
   \   0000016C   0500B0E1           MOVS     R0,R5
   \   00000170   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000174   F40084E5           STR      R0,[R4, #+244]
    121                              NoError = !ErrorLine;
   \   00000178   00009DE5           LDR      R0,[SP, #+0]
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   0100001A           BNE      ??LoadConfigString_12
   \   00000184   0160A0E3           MOV      R6,#+1
   \   00000188   000000EA           B        ??LoadConfigString_13
   \                     ??LoadConfigString_12:
   \   0000018C   0060A0E3           MOV      R6,#+0
    122                          }
    123                          break;
    124                      }
    125                  }
    126              }while ( NoError && (ErrorLine != EOF) && (Key != C_AI_END) );
   \                     ??LoadConfigString_13:
   \                     ??LoadConfigString_4:
   \   00000190   20008DE2           ADD      R0,SP,#+32
   \   00000194   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000198   FF6016E2           ANDS     R6,R6,#0xFF      ;; Zero extend
   \   0000019C   000056E3           CMP      R6,#+0
   \   000001A0   0600000A           BEQ      ??LoadConfigString_14
   \   000001A4   00009DE5           LDR      R0,[SP, #+0]
   \   000001A8   010070E3           CMN      R0,#+1
   \   000001AC   0300000A           BEQ      ??LoadConfigString_14
   \   000001B0   9800A0E3           MOV      R0,#+152
   \   000001B4   800E80E3           ORR      R0,R0,#0x800
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   97FFFF1A           BNE      ??LoadConfigString_2
    127              MakeConstants();
   \                     ??LoadConfigString_14:
   \   000001C0   0400B0E1           MOVS     R0,R4
   \   000001C4   ........           BL       ??MakeConstants
    128              return (NoError);
   \   000001C8   0600B0E1           MOVS     R0,R6
   \   000001CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000001D0   ACD08DE2           ADD      SP,SP,#+172      ;; stack cleaning
   \   000001D4   F041BDE8           POP      {R4-R8,LR}
   \   000001D8   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_5:
   \   000001DC   ........           DC32     `?<Constant "Inclinometer sensor">`
    129          }
    130          //---------------------------------------------------------------------------
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          AnsiString AIInclinometer_mA::GetName(void) {
   \                     ??GetName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   8CD04DE2           SUB      SP,SP,#+140
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    133              AnsiString Loc      = FindDictionaryWord(LocationKWord);
   \   00000010   181194E5           LDR      R1,[R4, #+280]
   \   00000014   1C008DE2           ADD      R0,SP,#+28
   \   00000018   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
    134              AnsiString BSnsType = FindDictionaryWord(BasicSensorTypeWord);
   \   0000001C   141194E5           LDR      R1,[R4, #+276]
   \   00000020   0D00B0E1           MOVS     R0,SP
   \   00000024   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
    135              AnsiString tName = Loc + " " + BSnsType;
   \   00000028   142F8FE2           ADR      R2,??GetName_1   ;; " "
   \   0000002C   1C108DE2           ADD      R1,SP,#+28
   \   00000030   38008DE2           ADD      R0,SP,#+56
   \   00000034   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000038   0D20B0E1           MOVS     R2,SP
   \   0000003C   38108DE2           ADD      R1,SP,#+56
   \   00000040   54008DE2           ADD      R0,SP,#+84
   \   00000044   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000048   54108DE2           ADD      R1,SP,#+84
   \   0000004C   0500B0E1           MOVS     R0,R5
   \   00000050   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000054   54008DE2           ADD      R0,SP,#+84
   \   00000058   ........           _BLF     `?~string`,`?~string??rA`
   \   0000005C   38008DE2           ADD      R0,SP,#+56
   \   00000060   ........           _BLF     `?~string`,`?~string??rA`
    136              return (tName);
   \   00000064   0D00B0E1           MOVS     R0,SP
   \   00000068   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000074   8CD08DE2           ADD      SP,SP,#+140      ;; stack cleaning
   \   00000078   3040BDE8           POP      {R4,R5,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetName_1:
   \   00000080   20000000           DC8      " ",+0,+0
    137          }
    138          ///////////////////////////////////////////////////////////////
    139          //
    140          // Routines for the librarian for input
    141          //
    142          ///////////////////////////////////////////////////////////////
    143          

   \                                 In segment CODE, align 4, keep-with-next
    144          int AIInclinometer_mA::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   78D04DE2           SUB      SP,SP,#+120
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   01A0B0E1           MOVS     R10,R1
   \   00000010   02B0B0E1           MOVS     R11,R2
   \   00000014   0350B0E1           MOVS     R5,R3
   \   00000018   9C60DDE5           LDRB     R6,[SP, #+156]
   \   0000001C   A0909DE5           LDR      R9,[SP, #+160]
    145              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
    146              //switch ( ValueId ) {
    147              //  default:
    148              Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \   00000030   0510B0E1           MOVS     R1,R5
   \   00000034   5C008DE2           ADD      R0,SP,#+92
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0610B0E1           MOVS     R1,R6
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   0030B0E1           MOVS     R3,R0
   \   00000050   0B20B0E1           MOVS     R2,R11
   \   00000054   0A10B0E1           MOVS     R1,R10
   \   00000058   0400B0E1           MOVS     R0,R4
   \   0000005C   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   00008DE5           STR      R0,[SP, #+0]
   \   00000068   5C008DE2           ADD      R0,SP,#+92
   \   0000006C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    149              //      break;
    150              //}
    151          
    152              switch ( ValueId ) {
   \   00000070   0A00B0E1           MOVS     R0,R10
   \   00000074   B50040E2           SUB      R0,R0,#+181
   \   00000078   400E40E2           SUB      R0,R0,#+1024
   \   0000007C   030050E3           CMP      R0,#+3
   \   00000080   3300008A           BHI      ??PutValue_3
   \   00000084   011F8FE2           ADR      R1,??PutValue_1
   \   00000088   0010D1E7           LDRB     R1,[R1, R0]
   \   0000008C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000090   0030301B           DC8      +0,+48,+48,+27
    153              case SVT_AI_OFFSET   :
    154                  Offset = ConvertToSi(NewValue, ValUnitId = ANGLE_UNIT, Status, -15.0, 15.0, Offset);
   \                     ??PutValue_4:
   \   00000094   0A70A0E3           MOV      R7,#+10
   \   00000098   04708DE5           STR      R7,[SP, #+4]
   \   0000009C   0510B0E1           MOVS     R1,R5
   \   000000A0   40008DE2           ADD      R0,SP,#+64
   \   000000A4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000A8   0080B0E1           MOVS     R8,R0
   \   000000AC   400194E5           LDR      R0,[R4, #+320]
   \   000000B0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000B4   03002DE9           PUSH     {R0,R1}
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   4014A0E3           MOV      R1,#+1073741824
   \   000000C0   B81981E3           ORR      R1,R1,#0x2E0000
   \   000000C4   03002DE9           PUSH     {R0,R1}
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   C014A0E3           MOV      R1,#-1073741824
   \   000000D0   B81981E3           ORR      R1,R1,#0x2E0000
   \   000000D4   03002DE9           PUSH     {R0,R1}
   \   000000D8   18208DE2           ADD      R2,SP,#+24
   \   000000DC   0710B0E1           MOVS     R1,R7
   \   000000E0   0800B0E1           MOVS     R0,R8
   \   000000E4   0800BDE8           POP      {R3}
   \   000000E8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000EC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000F0   400184E5           STR      R0,[R4, #+320]
   \   000000F4   40008DE2           ADD      R0,SP,#+64
   \   000000F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000FC   240000EA           B        ??PutValue_5
    155                  break;
    156              case SVT_AI_CALC_VAL :
    157                  Status = AdjustSensor(NewValue, ValUnitId = ANGLE_UNIT, -15.0, 15.0, Local);
   \                     ??PutValue_6:
   \   00000100   0A70A0E3           MOV      R7,#+10
   \   00000104   04708DE5           STR      R7,[SP, #+4]
   \   00000108   0510B0E1           MOVS     R1,R5
   \   0000010C   24008DE2           ADD      R0,SP,#+36
   \   00000110   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000114   0010B0E1           MOVS     R1,R0
   \   00000118   0600B0E1           MOVS     R0,R6
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   4004A0E3           MOV      R0,#+1073741824
   \   00000124   5C0780E3           ORR      R0,R0,#0x1700000
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   C034A0E3           MOV      R3,#-1073741824
   \   00000130   5C3783E3           ORR      R3,R3,#0x1700000
   \   00000134   0720B0E1           MOVS     R2,R7
   \   00000138   0400B0E1           MOVS     R0,R4
   \   0000013C   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   00000140   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000144   00008DE5           STR      R0,[SP, #+0]
   \   00000148   24008DE2           ADD      R0,SP,#+36
   \   0000014C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000150   0F0000EA           B        ??PutValue_5
    158                  break;
    159              default:
    160                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   00000154   0510B0E1           MOVS     R1,R5
   \   00000158   08008DE2           ADD      R0,SP,#+8
   \   0000015C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000160   0030B0E1           MOVS     R3,R0
   \   00000164   04008DE2           ADD      R0,SP,#+4
   \   00000168   01002DE9           PUSH     {R0}
   \   0000016C   0600B0E1           MOVS     R0,R6
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   0B20B0E1           MOVS     R2,R11
   \   00000178   0A10B0E1           MOVS     R1,R10
   \   0000017C   0400B0E1           MOVS     R0,R4
   \   00000180   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000184   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000188   00008DE5           STR      R0,[SP, #+0]
   \   0000018C   08008DE2           ADD      R0,SP,#+8
   \   00000190   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    161                  break;
    162              }
    163          
    164              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_5:
   \   00000194   00009DE5           LDR      R0,[SP, #+0]
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   0500001A           BNE      ??PutValue_7
    165                  SetModifiedFlag();
   \   000001A0   A40094E5           LDR      R0,[R4, #+164]
   \   000001A4   541090E2           ADDS     R1,R0,#+84
   \   000001A8   0400B0E1           MOVS     R0,R4
   \   000001AC   001091E5           LDR      R1,[R1, #+0]
   \   000001B0   0FE0A0E1           MOV      LR,PC
   \   000001B4   11FF2FE1           BX       R1
    166              }
    167              if ( UnitId ) {
   \                     ??PutValue_7:
   \   000001B8   000059E3           CMP      R9,#+0
   \   000001BC   0100000A           BEQ      ??PutValue_8
    168                  *UnitId = ValUnitId;
   \   000001C0   04009DE5           LDR      R0,[SP, #+4]
   \   000001C4   000089E5           STR      R0,[R9, #+0]
    169              }
    170              return (Status);
   \                     ??PutValue_8:
   \   000001C8   00009DE5           LDR      R0,[SP, #+0]
   \   000001CC   78D08DE2           ADD      SP,SP,#+120      ;; stack cleaning
   \   000001D0   F04FBDE8           POP      {R4-R11,LR}
   \   000001D4   1EFF2FE1           BX       LR               ;; return
    171          }
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          int  AIInclinometer_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
    174              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
    175              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1100008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   000E0E07           DC8      +0,+14,+14,+7
    176              case SVT_AI_OFFSET   :
    177                  DecPnt     = 2;
   \                     ??GetValue_4:
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   000088E5           STR      R0,[R8, #+0]
    178                  Unit       = ANGLE_UNIT;
   \   00000050   0A00A0E3           MOV      R0,#+10
   \   00000054   000089E5           STR      R0,[R9, #+0]
    179                  MyRetValue = (float)Offset;
   \   00000058   400194E5           LDR      R0,[R4, #+320]
   \   0000005C   000087E5           STR      R0,[R7, #+0]
   \   00000060   110000EA           B        ??GetValue_5
    180                  break;
    181              case SVT_AI_CALC_VAL :
    182                  DecPnt     = 2;
   \                     ??GetValue_6:
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   000088E5           STR      R0,[R8, #+0]
    183                  Unit       = ANGLE_UNIT;
   \   0000006C   0A00A0E3           MOV      R0,#+10
   \   00000070   000089E5           STR      R0,[R9, #+0]
    184                  MyRetValue = (float)CalcValue;
   \   00000074   480194E5           LDR      R0,[R4, #+328]
   \   00000078   000087E5           STR      R0,[R7, #+0]
   \   0000007C   0A0000EA           B        ??GetValue_5
    185                  break;
    186              default:
    187                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000080   0900B0E1           MOVS     R0,R9
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0800B0E1           MOVS     R0,R8
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   0730B0E1           MOVS     R3,R7
   \   00000094   0620B0E1           MOVS     R2,R6
   \   00000098   0510B0E1           MOVS     R1,R5
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000A4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000A8   00A0B0E1           MOVS     R10,R0
    188                  break;
    189              }
    190              return (Status);
   \                     ??GetValue_5:
   \   000000AC   0A00B0E1           MOVS     R0,R10
   \   000000B0   F047BDE8           POP      {R4-R10,LR}
   \   000000B4   1EFF2FE1           BX       LR               ;; return
    191          }
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          int AIInclinometer_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    194              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
    195              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
    196              case SVT_AI_UNIT:
    197                  MyString = GetUnitName(ANGLE_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   0A10A0E3           MOV      R1,#+10
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
    198                  break;
    199              default:
    200                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
    201                  break;
    202              }
    203              return (Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    204          }
    205          

   \                                 In segment CODE, align 4, keep-with-next
    206          int AIInclinometer_mA::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    207              return (AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    208          }
    209          
    210          ///////////////////////////////////////////////////////////////////
    211          //
    212          // Sensor check methode her, because here we know the application
    213          //
    214          ///////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    215          int AIInclinometer_mA::CheckInput(float Operator_Val, int &Action) {
   \                     ??CheckInput:
   \   00000000   0030B0E1           MOVS     R3,R0
    216              int InpStat   = E_NO_ERR;
   \   00000004   00C0A0E3           MOV      R12,#+0
   \   00000008   0C00B0E1           MOVS     R0,R12
    217              if ( Enable ) {
   \   0000000C   34C1D3E5           LDRB     R12,[R3, #+308]
   \   00000010   00005CE3           CMP      R12,#+0
   \   00000014   0A00000A           BEQ      ??CheckInput_1
    218                  if ( ActiveAlarms ) {
   \   00000018   38C093E5           LDR      R12,[R3, #+56]
   \   0000001C   00005CE3           CMP      R12,#+0
   \   00000020   0400000A           BEQ      ??CheckInput_2
    219                      InpStat = E_SENSOR_ERROR;
   \   00000024   1FC0A0E3           MOV      R12,#+31
   \   00000028   0C00B0E1           MOVS     R0,R12
    220                      Action  = SNS_ADJUST_ABORT;
   \   0000002C   00C0A0E3           MOV      R12,#+0
   \   00000030   00C082E5           STR      R12,[R2, #+0]
   \   00000034   060000EA           B        ??CheckInput_3
    221                  } else {
    222                      Action = SNS_ADJUST_OFFSET;
   \                     ??CheckInput_2:
   \   00000038   03C0A0E3           MOV      R12,#+3
   \   0000003C   00C082E5           STR      R12,[R2, #+0]
   \   00000040   030000EA           B        ??CheckInput_3
    223                  }
    224          
    225              } else {
    226                  InpStat = E_SENSOR_IS_DISABELED;
   \                     ??CheckInput_1:
   \   00000044   2BC0A0E3           MOV      R12,#+43
   \   00000048   0C00B0E1           MOVS     R0,R12
    227                  Action  = SNS_ADJUST_ABORT;
   \   0000004C   00C0A0E3           MOV      R12,#+0
   \   00000050   00C082E5           STR      R12,[R2, #+0]
    228              }
    229              return (InpStat);
   \                     ??CheckInput_3:
   \   00000054   1EFF2FE1           BX       LR               ;; return
    230          }
    231          
    232          

   \                                 In segment CODE, align 4, keep-with-next
    233          int AIInclinometer_mA::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    234              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
   \   00000010   0560B0E1           MOVS     R6,R5
    235              switch ( pCH->CommandNo ) {
   \   00000014   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000018   0010D6E5           LDRB     R1,[R6, #+0]
   \   0000001C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000020   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000024   2008B0E1           MOVS     R0,R0, LSR #+16
   \   00000028   650050E3           CMP      R0,#+101
   \   0000002C   0200000A           BEQ      ??ReceiveData_2
   \   00000030   660050E3           CMP      R0,#+102
   \   00000034   2F00000A           BEQ      ??ReceiveData_3
   \   00000038   320000EA           B        ??ReceiveData_4
    236              case CMD_GENERIC_REALTIME_DATA:
    237                  {
    238                      ANPRO10_COMMAND_2522  *pData = (ANPRO10_COMMAND_2522 *)data;
   \                     ??ReceiveData_2:
   \   0000003C   0500B0E1           MOVS     R0,R5
    239                      HWFailure       = pData->HWFailure;
   \   00000040   0810D0E5           LDRB     R1,[R0, #+8]
   \   00000044   0C11C4E5           STRB     R1,[R4, #+268]
    240                      MyHWFailure     = pData->MyHWFailure;
   \   00000048   0910D0E5           LDRB     R1,[R0, #+9]
   \   0000004C   0D11C4E5           STRB     R1,[R4, #+269]
    241                      ResultOK        = pData->ResultOK;
   \   00000050   0A10D0E5           LDRB     R1,[R0, #+10]
   \   00000054   3611C4E5           STRB     R1,[R4, #+310]
    242                      Failure         = pData->Failure;
   \   00000058   0B10D0E5           LDRB     R1,[R0, #+11]
   \   0000005C   3811C4E5           STRB     R1,[R4, #+312]
    243                      ActiveAlarms    = pData->ActiveAlarms;
   \   00000060   0F10D0E5           LDRB     R1,[R0, #+15]
   \   00000064   0E20D0E5           LDRB     R2,[R0, #+14]
   \   00000068   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   0000006C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000070   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   00000074   0C20D0E5           LDRB     R2,[R0, #+12]
   \   00000078   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   0000007C   381084E5           STR      R1,[R4, #+56]
    244                      FilteredValue   = pData->FilteredValue;
   \   00000080   0010A0E3           MOV      R1,#+0
   \                     ??ReceiveData_5:
   \   00000084   0D20B0E1           MOVS     R2,SP
   \   00000088   003091E0           ADDS     R3,R1,R0
   \   0000008C   1430D3E5           LDRB     R3,[R3, #+20]
   \   00000090   0230C1E7           STRB     R3,[R1, +R2]
   \   00000094   011091E2           ADDS     R1,R1,#+1
   \   00000098   040051E3           CMP      R1,#+4
   \   0000009C   F8FFFFBA           BLT      ??ReceiveData_5
   \   000000A0   00109DE5           LDR      R1,[SP, #+0]
   \   000000A4   441184E5           STR      R1,[R4, #+324]
    245                      CalcValue       = pData->CalcValue;
   \   000000A8   0010A0E3           MOV      R1,#+0
   \                     ??ReceiveData_6:
   \   000000AC   04208DE2           ADD      R2,SP,#+4
   \   000000B0   003091E0           ADDS     R3,R1,R0
   \   000000B4   1030D3E5           LDRB     R3,[R3, #+16]
   \   000000B8   0230C1E7           STRB     R3,[R1, +R2]
   \   000000BC   011091E2           ADDS     R1,R1,#+1
   \   000000C0   040051E3           CMP      R1,#+4
   \   000000C4   F8FFFFBA           BLT      ??ReceiveData_6
   \   000000C8   04109DE5           LDR      R1,[SP, #+4]
   \   000000CC   481184E5           STR      R1,[R4, #+328]
    246                      TimeStamp       = pData->TimeStamp;
   \   000000D0   1B10D0E5           LDRB     R1,[R0, #+27]
   \   000000D4   1A20D0E5           LDRB     R2,[R0, #+26]
   \   000000D8   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   000000DC   1920D0E5           LDRB     R2,[R0, #+25]
   \   000000E0   011492E1           ORRS     R1,R2,R1, LSL #+8
   \   000000E4   1800D0E5           LDRB     R0,[R0, #+24]
   \   000000E8   010490E1           ORRS     R0,R0,R1, LSL #+8
   \   000000EC   400084E5           STR      R0,[R4, #+64]
    247                  }
    248                  return (E_OK);
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   040000EA           B        ??ReceiveData_7
    249              case CMD_GENERIC_STATIC_DATA:
    250                  return AnalogInput::ReceiveData(data);
   \                     ??ReceiveData_3:
   \   000000F8   0510B0E1           MOVS     R1,R5
   \   000000FC   0400B0E1           MOVS     R0,R4
   \   00000100   ........           _BLF     ??ReceiveData_1,??ReceiveData??rA
   \   00000104   000000EA           B        ??ReceiveData_7
    251              default:
    252                  return (E_UNKNOWN_COMMAND);
   \                     ??ReceiveData_4:
   \   00000108   0100A0E3           MOV      R0,#+1
   \                     ??ReceiveData_7:
   \   0000010C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000110   7040BDE8           POP      {R4-R6,LR}
   \   00000114   1EFF2FE1           BX       LR               ;; return
    253              };
    254          }

   \                                 In segment CODE, align 4, keep-with-next
    255          int AIInclinometer_mA::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    256              switch ( cmd ) {
   \   00000010   0500B0E1           MOVS     R0,R5
   \   00000014   650050E3           CMP      R0,#+101
   \   00000018   0200000A           BEQ      ??SendData_2
   \   0000001C   660050E3           CMP      R0,#+102
   \   00000020   4700000A           BEQ      ??SendData_3
   \   00000024   4A0000EA           B        ??SendData_4
    257              case CMD_GENERIC_REALTIME_DATA:
    258                  {
    259                      QueueANPRO10_COMMAND_2522  Cmd;
    260                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_2:
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
    261                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000030   FF10A0E3           MOV      R1,#+255
   \   00000034   0410CDE5           STRB     R1,[SP, #+4]
    262                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   00000038   0E10A0E3           MOV      R1,#+14
   \   0000003C   0510CDE5           STRB     R1,[SP, #+5]
    263          
    264                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000040   6510A0E3           MOV      R1,#+101
   \   00000044   B610CDE1           STRH     R1,[SP, #+6]
    265                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000048   1810A0E3           MOV      R1,#+24
   \   0000004C   B810CDE1           STRH     R1,[SP, #+8]
    266                      Cmd.Data.ObjectId       = IDNumber;
   \   00000050   9C0094E5           LDR      R0,[R4, #+156]
   \   00000054   0A00CDE5           STRB     R0,[SP, #+10]
   \   00000058   2004B0E1           LSRS     R0,R0,#+8
   \   0000005C   0B00CDE5           STRB     R0,[SP, #+11]
   \   00000060   2004B0E1           LSRS     R0,R0,#+8
   \   00000064   0C00CDE5           STRB     R0,[SP, #+12]
   \   00000068   2004B0E1           LSRS     R0,R0,#+8
   \   0000006C   0D00CDE5           STRB     R0,[SP, #+13]
    267                      Cmd.Data.HWFailure      = HWFailure;
   \   00000070   0C11D4E5           LDRB     R1,[R4, #+268]
   \   00000074   0E10CDE5           STRB     R1,[SP, #+14]
    268                      Cmd.Data.MyHWFailure    = MyHWFailure;
   \   00000078   0D11D4E5           LDRB     R1,[R4, #+269]
   \   0000007C   0F10CDE5           STRB     R1,[SP, #+15]
    269                      Cmd.Data.Failure        = Failure;
   \   00000080   3811D4E5           LDRB     R1,[R4, #+312]
   \   00000084   1110CDE5           STRB     R1,[SP, #+17]
    270                      Cmd.Data.ActiveAlarms   = ActiveAlarms;
   \   00000088   380094E5           LDR      R0,[R4, #+56]
   \   0000008C   1200CDE5           STRB     R0,[SP, #+18]
   \   00000090   2004B0E1           LSRS     R0,R0,#+8
   \   00000094   1300CDE5           STRB     R0,[SP, #+19]
   \   00000098   2004B0E1           LSRS     R0,R0,#+8
   \   0000009C   1400CDE5           STRB     R0,[SP, #+20]
   \   000000A0   2004B0E1           LSRS     R0,R0,#+8
   \   000000A4   1500CDE5           STRB     R0,[SP, #+21]
    271                      Cmd.Data.FilteredValue  = FilteredValue;
   \   000000A8   0000A0E3           MOV      R0,#+0
   \                     ??SendData_5:
   \   000000AC   0D10B0E1           MOVS     R1,SP
   \   000000B0   011090E0           ADDS     R1,R0,R1
   \   000000B4   042090E0           ADDS     R2,R0,R4
   \   000000B8   4421D2E5           LDRB     R2,[R2, #+324]
   \   000000BC   1A20C1E5           STRB     R2,[R1, #+26]
   \   000000C0   010090E2           ADDS     R0,R0,#+1
   \   000000C4   040050E3           CMP      R0,#+4
   \   000000C8   F7FFFFBA           BLT      ??SendData_5
    272                      Cmd.Data.CalcValue      = CalcValue;
   \   000000CC   0000A0E3           MOV      R0,#+0
   \                     ??SendData_6:
   \   000000D0   0D10B0E1           MOVS     R1,SP
   \   000000D4   011090E0           ADDS     R1,R0,R1
   \   000000D8   042090E0           ADDS     R2,R0,R4
   \   000000DC   4821D2E5           LDRB     R2,[R2, #+328]
   \   000000E0   1620C1E5           STRB     R2,[R1, #+22]
   \   000000E4   010090E2           ADDS     R0,R0,#+1
   \   000000E8   040050E3           CMP      R0,#+4
   \   000000EC   F7FFFFBA           BLT      ??SendData_6
    273                      Cmd.Data.TimeStamp      = clock() - TimeStamp;
   \   000000F0   ........           _BLF     clock,??clock??rA
   \   000000F4   401094E5           LDR      R1,[R4, #+64]
   \   000000F8   010050E0           SUBS     R0,R0,R1
   \   000000FC   1E00CDE5           STRB     R0,[SP, #+30]
   \   00000100   2004B0E1           LSRS     R0,R0,#+8
   \   00000104   1F00CDE5           STRB     R0,[SP, #+31]
   \   00000108   2004B0E1           LSRS     R0,R0,#+8
   \   0000010C   2000CDE5           STRB     R0,[SP, #+32]
   \   00000110   2004B0E1           LSRS     R0,R0,#+8
   \   00000114   2100CDE5           STRB     R0,[SP, #+33]
    274                      Cmd.Data.ResultOK       = ResultOK;
   \   00000118   3611D4E5           LDRB     R1,[R4, #+310]
   \   0000011C   1010CDE5           STRB     R1,[SP, #+16]
    275          
    276                      bool sent = ANPRO10SendNormal(&Cmd);
   \   00000120   0D00B0E1           MOVS     R0,SP
   \   00000124   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000128   0060B0E1           MOVS     R6,R0
    277                      if ( !sent ) return (E_QUEUE_FULL);
   \   0000012C   000056E3           CMP      R6,#+0
   \   00000130   0100001A           BNE      ??SendData_7
   \   00000134   0300A0E3           MOV      R0,#+3
   \   00000138   060000EA           B        ??SendData_8
    278                      else return (E_OK);
   \                     ??SendData_7:
   \   0000013C   0000A0E3           MOV      R0,#+0
   \   00000140   040000EA           B        ??SendData_8
    279                  }
    280              case CMD_GENERIC_STATIC_DATA:
    281                  return AnalogInput::SendData(cmd);
   \                     ??SendData_3:
   \   00000144   0510B0E1           MOVS     R1,R5
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??SendData_1,??SendData??rA
   \   00000150   000000EA           B        ??SendData_8
    282              default:
    283                  return (E_UNKNOWN_COMMAND);
   \                     ??SendData_4:
   \   00000154   0100A0E3           MOV      R0,#+1
   \                     ??SendData_8:
   \   00000158   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   0000015C   7040BDE8           POP      {R4-R6,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return
    284              };
    285          
    286          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Inclinometer sensor">`:
   \   00000000   496E636C696E       DC8 "Inclinometer sensor"
   \              6F6D65746572
   \              2073656E736F
   \              7200        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIInclinometer_mA &AIInclinometer_mA::new AIInclinometer_mA(int)
   \                     `??new AIInclinometer_mA`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   5E0FA0E3           MOV      R0,#+376
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      `??new AIInclinometer_mA_1`
   \   00000018   0410B0E1           MOVS     R1,R4
   \   0000001C   ........           BL       ??AIInclinometer_mA
   \   00000020   000000EA           B        `??new AIInclinometer_mA_2`
   \                     `??new AIInclinometer_mA_1`:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     `??new AIInclinometer_mA_2`:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1
    287          
    288          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIInclinometer_mA::AIInclinometer_mA(int)
                                       52
     AIInclinometer_mA::Calculate()    16
     AIInclinometer_mA::CheckInput(float, int &)
                                        0
     AIInclinometer_mA::GetName()     152
     AIInclinometer_mA::GetStringValue(int, int, AnsiString &)
                                       52
     AIInclinometer_mA::GetValue(int, int, float &, int &, int &)
                                       40
     AIInclinometer_mA::Get_Angle(float)
                                       16
     AIInclinometer_mA::LoadConfigString(TSNConfigString &)
                                      196
     AIInclinometer_mA::MakeConfigString(int)
                                      408
     AIInclinometer_mA::MakeConstants()
                                       16
     AIInclinometer_mA::NewValue(float)
                                       12
     AIInclinometer_mA::PutFloatValue(int, float)
                                       16
     AIInclinometer_mA::PutValue(int, int, AnsiString, bool, int *)
                                      180
     AIInclinometer_mA::ReceiveData(unsigned char *)
                                       24
     AIInclinometer_mA::SendData(unsigned short)
                                       52
     AIInclinometer_mA::new AIInclinometer_mA(int)
                                        8
     AIInclinometer_mA::~AIInclinometer_mA()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                        0
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                        8
     _String_val::_String_val(char_allocator)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                       48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       76
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                       12
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        8
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                        0
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Lmost()
                                        8
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rmost()
                                        8
     _Tree_algobase<allocator<void>>::_Root()
                                        8
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                       32
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                        8
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                        8
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                        0
     __sti__routine()                   0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                       12
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                        0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     char_traits::length(char const *)
                                        8
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                        0
     operator new(unsigned int, void *)
                                        0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       44
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                       16
     string::append(char const *)      12
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(char const *)
                                       12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_traits::length(char const *)
                                      24
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                       4
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                      44
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::operator+=(char const *)
                                      32
     string::append(string const &)   48
     string::append(char const *)     44
     string::assign(string const &)   48
     operator new(unsigned int, void *)
                                      12
     _Allocator<void>::allocate(unsigned int)
                                      24
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                       4
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                      32
     allocator<void>::allocator()      4
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                      24
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                      40
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      72
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     204
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                      32
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                      28
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                       8
     _Tree_algobase<allocator<void>>::_Root()
                                      24
     _Tree_algobase<allocator<void>>::_Lmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     900
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                      24
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                      76
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                      52
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                      12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                      44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     460
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                     148
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                       4
     operator+(string const &, string const &)
                                      72
     operator+(string const &, char const *)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIInclinometer_mA::AIInclinometer_mA(int)
                                     268
     AIInclinometer_mA::~AIInclinometer_mA()
                                      56
     AIInclinometer_mA::NewValue(float)
                                      40
     AIInclinometer_mA::MakeConstants()
                                     132
     AIInclinometer_mA::Get_Angle(float)
                                      48
     AIInclinometer_mA::Calculate()  316
     AIInclinometer_mA::MakeConfigString(int)
                                     400
     AIInclinometer_mA::LoadConfigString(TSNConfigString &)
                                     480
     AIInclinometer_mA::GetName()    132
     AIInclinometer_mA::PutValue(int, int, AnsiString, bool, int *)
                                     472
     AIInclinometer_mA::GetValue(int, int, float &, int &, int &)
                                     184
     AIInclinometer_mA::GetStringValue(int, int, AnsiString &)
                                     120
     AIInclinometer_mA::PutFloatValue(int, float)
                                      40
     AIInclinometer_mA::CheckInput(float, int &)
                                      88
     AIInclinometer_mA::ReceiveData(unsigned char *)
                                     280
     AIInclinometer_mA::SendData(unsigned short)
                                     356
     ?<Constant "Inclinometer sensor">
                                      20
     ?<Constant " ">                   2
     AIInclinometer_mA::new AIInclinometer_mA(int)
                                      48
     __sti__routine()                208
      Others                        1620

 
 9 280 bytes in segment CODE
   162 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 3 672 bytes of CODE  memory (+ 5 624 bytes shared)
   162 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
