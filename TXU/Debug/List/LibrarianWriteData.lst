##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\LibrarianWriteData.cpp          #
#    Command line    =  D:\S2Prog\Shared\Src\LibrarianWriteData.cpp --fpu    #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\LibrarianWriteData.lst      #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\LibrarianWriteData.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\LibrarianWriteData.cpp
      1          //---------------------------------------------------------------------------
      2          
      3          #pragma hdrstop
      4          
      5          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      6          
      7          //---------------------------------------------------------------------------
      8          #ifdef ANWIN
      9          #pragma package(smart_init)
     10          #endif
     11          extern TSNUart *fake_uart_port_for_tcp_clientPtr;
     12          /** Global functions for writing data to Program Objects.
     13           *
     14           *
     15           *
     16           */
     17          
     18          /////////////////////////////////////////////////////////////////////////////
     19          //
     20          // ValueId = Value key
     21          // ObjPtr  = Pointer to object
     22          // InputValue   = Input string
     23          // Flag    = Optional flag indicating the source of the input

   \                                 In segment CODE, align 4, keep-with-next
     24          int LibPutValue(int ValueId, int Index, PRogramObjectBase *ObjPtr, AnsiString InputValue, bool Local, bool NoErrorMessage, unsigned IDNum, int UnitId, int CurrentUnit)
     25          {
   \                     ??LibPutValue:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   74D04DE2           SUB      SP,SP,#+116
   \   00000008   9C70DDE5           LDRB     R7,[SP, #+156]
   \   0000000C   AC809DE5           LDR      R8,[SP, #+172]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   A4109DE5           LDR      R1,[SP, #+164]
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0360A0E1           MOV      R6,R3
   \   00000020   000055E3           CMP      R5,#+0
   \   00000024   6900000A           BEQ      ??LibPutValue_10
     26              int Status=E_NO_ERR;
     27              if ( ObjPtr ) {
     28                  if ( Master || ObjPtr->WritePermission(IDNum) ) {
   \   00000028   ........           LDR      R0,??DataTable3  ;; Master
   \   0000002C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300001A           BNE      ??LibPutValue_11
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??WritePermission,??WritePermission??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   5F00000A           BEQ      ??LibPutValue_12
     29          #ifdef S2TXU
     30                      OS_Use(&UnitSema);
   \                     ??LibPutValue_11:
   \   00000048   B4929FE5           LDR      R9,??LibPutValue_13  ;; UnitSema
     31          #endif
     32                      if ( UnitId != -1 || CurrentUnit != -1 ) {
   \   0000004C   B4A29FE5           LDR      R10,??LibPutValue_13+0x4  ;; System_Unit
   \   00000050   0900A0E1           MOV      R0,R9
   \   00000054   ........           _BLF     OS_Use,??OS_Use??rA
   \   00000058   A8109DE5           LDR      R1,[SP, #+168]
   \   0000005C   0000E0E3           MVN      R0,#+0
   \   00000060   000051E1           CMP      R1,R0
   \   00000064   00005801           CMPEQ    R8,R0
   \   00000068   2000000A           BEQ      ??LibPutValue_14
     33                          int OrgCurrentUnit = System_Unit[UnitId].CurrentUnit;
   \   0000006C   0100A0E1           MOV      R0,R1
   \   00000070   3010A0E3           MOV      R1,#+48
   \   00000074   91A020E0           MLA      R0,R1,R0,R10
   \   00000078   2C2090E5           LDR      R2,[R0, #+44]
     34                          System_Unit[UnitId].CurrentUnit = CurrentUnit;
     35                          Status = ObjPtr->PutValue(ValueId, Index,InputValue,Local);
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   54208DE5           STR      R2,[SP, #+84]
   \   00000084   2C8080E5           STR      R8,[R0, #+44]
   \   00000088   A40095E5           LDR      R0,[R5, #+164]
   \   0000008C   30B080E2           ADD      R11,R0,#+48
   \   00000090   58008DE2           ADD      R0,SP,#+88
   \   00000094   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   02002DE9           PUSH     {R1}
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   02002DE9           PUSH     {R1}
   \   000000A8   7C109DE5           LDR      R1,[SP, #+124]
   \   000000AC   00B09BE5           LDR      R11,[R11, #+0]
   \   000000B0   0030A0E1           MOV      R3,R0
   \   000000B4   0420A0E1           MOV      R2,R4
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   0FE0A0E1           MOV      LR,PC
   \   000000C0   1BFF2FE1           BX       R11
   \   000000C4   00B0A0E1           MOV      R11,R0
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   60008DE2           ADD      R0,SP,#+96
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     36                          System_Unit[UnitId].CurrentUnit = OrgCurrentUnit;
   \   000000D8   B0009DE5           LDR      R0,[SP, #+176]
   \   000000DC   3010A0E3           MOV      R1,#+48
   \   000000E0   91A020E0           MLA      R0,R1,R0,R10
   \   000000E4   5C109DE5           LDR      R1,[SP, #+92]
   \   000000E8   2C1080E5           STR      R1,[R0, #+44]
   \   000000EC   180000EA           B        ??LibPutValue_15
     37                      } else {
     38                          /*
     39                          float Value;
     40                          int DecPnt;
     41                          ObjPtr->GetValue(ValueId, 0, Value, DecPnt,UnitId);
     42                          */
     43                          Status      = ObjPtr->PutValue(ValueId, Index,InputValue,Local,&UnitId);
   \                     ??LibPutValue_14:
   \   000000F0   A40095E5           LDR      R0,[R5, #+164]
   \   000000F4   0610A0E1           MOV      R1,R6
   \   000000F8   308080E2           ADD      R8,R0,#+48
   \   000000FC   58008DE2           ADD      R0,SP,#+88
   \   00000100   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000104   0030A0E1           MOV      R3,R0
   \   00000108   A8008DE2           ADD      R0,SP,#+168
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   0700A0E1           MOV      R0,R7
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   7C109DE5           LDR      R1,[SP, #+124]
   \   0000011C   008098E5           LDR      R8,[R8, #+0]
   \   00000120   0420A0E1           MOV      R2,R4
   \   00000124   0500A0E1           MOV      R0,R5
   \   00000128   0FE0A0E1           MOV      LR,PC
   \   0000012C   18FF2FE1           BX       R8
   \   00000130   00B0A0E1           MOV      R11,R0
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   60008DE2           ADD      R0,SP,#+96
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     44                          CurrentUnit = System_Unit[UnitId].CurrentUnit;
   \   00000144   B0009DE5           LDR      R0,[SP, #+176]
   \   00000148   3010A0E3           MOV      R1,#+48
   \   0000014C   91A020E0           MLA      R0,R1,R0,R10
   \   00000150   2C8090E5           LDR      R8,[R0, #+44]
   \                     ??LibPutValue_15:
   \   00000154   08D08DE2           ADD      SP,SP,#+8
     45                      }
     46          #ifdef S2TXU
     47                      OS_Unuse(&UnitSema);
   \   00000158   0900A0E1           MOV      R0,R9
   \   0000015C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     48          #endif
     49                  } else {
     50                      Status = E_NO_INPUT_PERMISSION;
     51                  }
     52              } else {
     53                  //switch ( ValueId ) {
     54                  //  default:
     55                  Status = E_NO_ERR;
     56                  //}
     57              }
     58              switch ( Status ) {
   \   00000160   0B00B0E1           MOVS     R0,R11
   \   00000164   1A00000A           BEQ      ??LibPutValue_16
   \   00000168   2A005BE3           CMP      R11,#+42
   \   0000016C   0200000A           BEQ      ??LibPutValue_17
   \   00000170   01007BE3           CMN      R11,#+1
   \   00000174   5E00000A           BEQ      ??LibPutValue_18
   \   00000178   040000EA           B        ??LibPutValue_19
     59          	case E_LOCAL_ONLY     :
     60          		break;  // Don't send the input
     61          	case E_NO_INPUT_PERMISSION:
     62          		if ( !Local || Master ) break;
   \                     ??LibPutValue_17:
   \   0000017C   ........           LDR      R0,??DataTable3  ;; Master
   \   00000180   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000184   010020E2           EOR      R0,R0,#0x1
   \   00000188   070010E1           TST      R0,R7
   \   0000018C   5800000A           BEQ      ??LibPutValue_18
     63          	default:
     64          		if ( Local && !NoErrorMessage ) {
   \                     ??LibPutValue_19:
   \   00000190   A000DDE5           LDRB     R0,[SP, #+160]
   \   00000194   010020E2           EOR      R0,R0,#0x1
   \   00000198   070010E1           TST      R0,R7
   \   0000019C   5400000A           BEQ      ??LibPutValue_18
     65          			InputErrorMessage(GetErrorMsg(Status));
   \   000001A0   0B10A0E1           MOV      R1,R11
   \   000001A4   58008DE2           ADD      R0,SP,#+88
   \   000001A8   ........           _BLF     ??GetErrorMsg,??GetErrorMsg??rA
   \   000001AC   58008DE2           ADD      R0,SP,#+88
   \   000001B0   ........           _BLF     ??InputErrorMessage,??InputErrorMessage??rA
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   58008DE2           ADD      R0,SP,#+88
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C4   4A0000EA           B        ??LibPutValue_18
     66          		}
   \                     ??LibPutValue_12:
   \   000001C8   2AB0A0E3           MOV      R11,#+42
   \   000001CC   EAFFFFEA           B        ??LibPutValue_17
   \                     ??LibPutValue_10:
   \   000001D0   00B0A0E3           MOV      R11,#+0
     67          		break;
     68          	case E_NO_ERR:
     69                  if ( Local && !Master ) {
   \                     ??LibPutValue_16:
   \   000001D4   30019FE5           LDR      R0,??LibPutValue_13+0x8  ;; fake_uart_port_for_tcp_clientPtr
   \   000001D8   001090E5           LDR      R1,[R0, #+0]
   \   000001DC   ........           LDR      R0,??DataTable3  ;; Master
   \   000001E0   0020D0E5           LDRB     R2,[R0, #+0]
   \   000001E4   4000A0E3           MOV      R0,#+64
   \   000001E8   013022E2           EOR      R3,R2,#0x1
   \   000001EC   070013E1           TST      R3,R7
   \   000001F0   0600000A           BEQ      ??LibPutValue_20
     70                      //start the input response timeout timer
     71                      //          ObjPtr->StartTimer();
     72                      QueueANPRO10_COMMAND_201X Cmd;
     73                      Cmd.TxInfo.Port      = fake_uart_port_for_tcp_clientPtr;
   \   000001F4   00108DE5           STR      R1,[SP, #+0]
     74                      Cmd.TxInfo.rxAddr    = DEVICE_MASTER;
   \   000001F8   FE20A0E3           MOV      R2,#+254
   \   000001FC   0420CDE5           STRB     R2,[SP, #+4]
     75                      Cmd.TxInfo.rxId      = DEVICE_TCU;
   \   00000200   2020A0E3           MOV      R2,#+32
   \   00000204   0520CDE5           STRB     R2,[SP, #+5]
     76          
     77                      Cmd.Data.CommandNo   = CMD_TXU_INPUT_PACKET;
   \   00000208   DA20A0E3           MOV      R2,#+218
   \   0000020C   070000EA           B        ??LibPutValue_21
     78                      Cmd.Data.ndb         = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
     79                      Cmd.Data.ValueId     = ValueId;
     80                      Cmd.Data.ObjectId    = ObjPtr->IDNumber;
     81                      Cmd.Data.UnitId      = UnitId;
     82                      Cmd.Data.CurrentUnit = CurrentUnit;
     83                      strcpy((char*)Cmd.Data.InputBuffer, InputValue.c_str());
     84                      Cmd.Data.AlternativeInput  = 0.0;
     85                      Cmd.Data.Index             = Index;
     86                      ANPRO10SendUrgent(&Cmd);
     87                  } else if ( Master ) {
   \                     ??LibPutValue_20:
   \   00000210   000052E3           CMP      R2,#+0
   \   00000214   3600000A           BEQ      ??LibPutValue_18
     88                      QueueANPRO10_COMMAND_201X Cmd;
     89                      Cmd.TxInfo.Port      = fake_uart_port_for_tcp_clientPtr;
   \   00000218   00108DE5           STR      R1,[SP, #+0]
     90                      Cmd.TxInfo.rxAddr    = DEVICE_BROADCAST_ADDR;
   \   0000021C   FF20A0E3           MOV      R2,#+255
   \   00000220   0420CDE5           STRB     R2,[SP, #+4]
     91                      Cmd.TxInfo.rxId      = DEVICE_BROADCAST_TXU;
   \   00000224   0E20A0E3           MOV      R2,#+14
   \   00000228   0520CDE5           STRB     R2,[SP, #+5]
     92                      Cmd.Data.CommandNo   = CMD_TXU_INPUT_PACKET_RES;
   \   0000022C   DB20A0E3           MOV      R2,#+219
   \                     ??LibPutValue_21:
   \   00000230   702E82E3           ORR      R2,R2,#0x700
   \   00000234   B620CDE1           STRH     R2,[SP, #+6]
     93                      Cmd.Data.ndb         = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   00000238   B800CDE1           STRH     R0,[SP, #+8]
     94                      Cmd.Data.ValueId     = ValueId;
   \   0000023C   74009DE5           LDR      R0,[SP, #+116]
   \   00000240   0E00CDE5           STRB     R0,[SP, #+14]
   \   00000244   2004A0E1           LSR      R0,R0,#+8
   \   00000248   0F00CDE5           STRB     R0,[SP, #+15]
   \   0000024C   2004A0E1           LSR      R0,R0,#+8
   \   00000250   1000CDE5           STRB     R0,[SP, #+16]
   \   00000254   2004A0E1           LSR      R0,R0,#+8
   \   00000258   1100CDE5           STRB     R0,[SP, #+17]
     95                      Cmd.Data.ObjectId    = ObjPtr->IDNumber;
   \   0000025C   9C0095E5           LDR      R0,[R5, #+156]
   \   00000260   0A00CDE5           STRB     R0,[SP, #+10]
   \   00000264   2004A0E1           LSR      R0,R0,#+8
   \   00000268   0B00CDE5           STRB     R0,[SP, #+11]
   \   0000026C   2004A0E1           LSR      R0,R0,#+8
   \   00000270   0C00CDE5           STRB     R0,[SP, #+12]
   \   00000274   2004A0E1           LSR      R0,R0,#+8
   \   00000278   0D00CDE5           STRB     R0,[SP, #+13]
     96                      Cmd.Data.UnitId      = UnitId;
   \   0000027C   A8109DE5           LDR      R1,[SP, #+168]
   \   00000280   B211CDE1           STRH     R1,[SP, #+18]
     97                      Cmd.Data.CurrentUnit = CurrentUnit;
   \   00000284   B481CDE1           STRH     R8,[SP, #+20]
     98                      strcpy((char*)Cmd.Data.InputBuffer, InputValue.c_str());
   \   00000288   180096E5           LDR      R0,[R6, #+24]
   \   0000028C   100050E3           CMP      R0,#+16
   \   00000290   04109625           LDRCS    R1,[R6, #+4]
   \   00000294   16008DE2           ADD      R0,SP,#+22
   \   00000298   04108632           ADDCC    R1,R6,#+4
   \   0000029C   ........           _BLF     strcpy,??strcpy??rA
     99                      Cmd.Data.AlternativeInput  = 0.0;
   \   000002A0   4C008DE2           ADD      R0,SP,#+76
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   0030A0E3           MOV      R3,#+0
   \   000002AC   0C0080E8           STM      R0,{R2,R3}
   \   000002B0   0200A0E1           MOV      R0,R2
   \   000002B4   3E108DE2           ADD      R1,SP,#+62
   \                     ??LibPutValue_22:
   \   000002B8   4C208DE2           ADD      R2,SP,#+76
   \   000002BC   0220D0E7           LDRB     R2,[R0, +R2]
   \   000002C0   0120C0E7           STRB     R2,[R0, +R1]
   \   000002C4   010080E2           ADD      R0,R0,#+1
   \   000002C8   080050E3           CMP      R0,#+8
   \   000002CC   F9FFFFBA           BLT      ??LibPutValue_22
    100                      Cmd.Data.Index             = Index;
   \   000002D0   4640CDE5           STRB     R4,[SP, #+70]
   \   000002D4   2404A0E1           LSR      R0,R4,#+8
   \   000002D8   4700CDE5           STRB     R0,[SP, #+71]
   \   000002DC   2004A0E1           LSR      R0,R0,#+8
   \   000002E0   4800CDE5           STRB     R0,[SP, #+72]
   \   000002E4   2004A0E1           LSR      R0,R0,#+8
   \   000002E8   4900CDE5           STRB     R0,[SP, #+73]
    101                      ANPRO10SendUrgent(&Cmd);
   \   000002EC   0D00A0E1           MOV      R0,SP
   \   000002F0   ........           _BLF     ??ANPRO10SendUrgent,??ANPRO10SendUrgent??rA
    102                  }
    103                  break;
    104              }
    105              return(Status);
   \                     ??LibPutValue_18:
   \   000002F4   0B00A0E1           MOV      R0,R11
   \   000002F8   78D08DE2           ADD      SP,SP,#+120
   \   000002FC   F04FBDE8           POP      {R4-R11,LR}
   \   00000300   1EFF2FE1           BX       LR               ;; return
   \                     ??LibPutValue_13:
   \   00000304   ........           DC32     UnitSema
   \   00000308   ........           DC32     System_Unit
   \   0000030C   ........           DC32     fake_uart_port_for_tcp_clientPtr
    106          }
    107          
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          int LibPutValue(int ValueId, PRogramObjectBase *ObjPtr, AnsiString InputValue, bool Local, bool NoErrorMessage, unsigned IDNum, int UnitId, int CurrentUnit)
    110          {
   \                     ??LibPutValue_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3C70DDE5           LDRB     R7,[SP, #+60]
   \   0000000C   40809DE5           LDR      R8,[SP, #+64]
   \   00000010   44909DE5           LDR      R9,[SP, #+68]
   \   00000014   48A09DE5           LDR      R10,[SP, #+72]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   0210A0E1           MOV      R1,R2
   \   00000024   0360A0E1           MOV      R6,R3
    111              return LibPutValue(ValueId, 0, ObjPtr, InputValue, Local, NoErrorMessage, IDNum, UnitId, CurrentUnit);
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000030   00042DE9           PUSH     {R10}
   \   00000034   00022DE9           PUSH     {R9}
   \   00000038   00012DE9           PUSH     {R8}
   \   0000003C   80002DE9           PUSH     {R7}
   \   00000040   40002DE9           PUSH     {R6}
   \   00000044   0030A0E1           MOV      R3,R0
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       ??LibPutValue
   \   00000058   0040A0E1           MOV      R4,R0
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   14008DE2           ADD      R0,SP,#+20
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   30D08DE2           ADD      SP,SP,#+48
   \   00000074   F047BDE8           POP      {R4-R10,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
    112          }
    113          
    114          

   \                                 In segment CODE, align 4, keep-with-next
    115          int LibPutValue(int ValueId, int Index, PRogramObjectBase *ObjPtr, AnsiString InputValue, unsigned IDNum)
    116          {
   \                     ??LibPutValue_2:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0310A0E1           MOV      R1,R3
    117              return(LibPutValue(ValueId,Index, ObjPtr,InputValue,true,IDNum));
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0170A013           MOVNE    R7,#+1
   \   00000024   0070A003           MOVEQ    R7,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000030   ........           B        ?Subroutine11
    118          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0010E0E3           MVN      R1,#+0
   \   00000004   02002DE9           PUSH     {R1}
   \   00000008   02002DE9           PUSH     {R1}
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   02002DE9           PUSH     {R1}
   \   00000014   80002DE9           PUSH     {R7}
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   0030A0E1           MOV      R3,R0
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       ??LibPutValue
   \   00000034   0040A0E1           MOV      R4,R0
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   14008DE2           ADD      R0,SP,#+20
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   30D08DE2           ADD      SP,SP,#+48
   \   00000050   F040BDE8           POP      {R4-R7,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    119          
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int LibPutValue(int ValueId, PRogramObjectBase *ObjPtr, AnsiString InputValue, unsigned IDNum)
    122          {
   \                     ??LibPutValue_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0210A0E1           MOV      R1,R2
   \   00000014   0360A0E1           MOV      R6,R3
    123              return(LibPutValue(ValueId,0,ObjPtr,InputValue,IDNum));
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   ........           B        ?Subroutine12
    124          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   40002DE9           PUSH     {R6}
   \   00000004   0030A0E1           MOV      R3,R0
   \   00000008   0520A0E1           MOV      R2,R5
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??LibPutValue_2
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   20D08DE2           ADD      SP,SP,#+32
   \                     ??Subroutine12_0:
   \   00000034   7040BDE8           POP      {R4-R6,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
    125          
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int LibPutValue(int ValueId, int Index, PRogramObjectBase *ObjPtr, int InputValue, unsigned IDNum)
    128          {
   \                     ??LibPutValue_4:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0310A0E1           MOV      R1,R3
    129              return(LibPutValue(ValueId,Index, ObjPtr,(AnsiString)InputValue,true,IDNum));
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0170A013           MOVNE    R7,#+1
   \   00000024   0070A003           MOVEQ    R7,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000030                      REQUIRE ?Subroutine11
   \   00000030                      ;; // Fall through to label ?Subroutine11
    130          }
    131          
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          int LibPutValue(int ValueId, PRogramObjectBase *ObjPtr, int InputValue, unsigned IDNum)
    134          {
   \                     ??LibPutValue_5:
   \   00000000   00402DE9           PUSH     {LR}
    135              return(LibPutValue(ValueId,0, ObjPtr,InputValue,IDNum));
   \   00000004   08002DE9           PUSH     {R3}
   \   00000008   0230A0E1           MOV      R3,R2
   \   0000000C   0120A0E1           MOV      R2,R1
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           BL       ??LibPutValue_4
   \   00000018   ........           B        ?Subroutine13
    136          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0240BDE8           POP      {R1,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    137          
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          int LibPutValue(int ValueId, int Index, PRogramObjectBase *ObjPtr, float InputValue, unsigned IDNum)
    140          {
   \                     ??LibPutValue_6:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10109DE5           LDR      R1,[SP, #+16]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
    141              int Status=E_NO_ERR;
   \   00000014   0000A0E3           MOV      R0,#+0
    142              if ( ObjPtr ) {
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   1000000A           BEQ      ??LibPutValue_23
    143                  if ( Master || ObjPtr->WritePermission(IDNum) ) {
   \   00000020   ........           LDR      R0,??DataTable3  ;; Master
   \   00000024   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??LibPutValue_24
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??WritePermission,??WritePermission??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0700000A           BEQ      ??LibPutValue_25
    144                      Status = ObjPtr->PutFloatValue(ValueId,InputValue);
   \                     ??LibPutValue_24:
   \   00000040   A43095E5           LDR      R3,[R5, #+164]
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   343093E5           LDR      R3,[R3, #+52]
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   13FF2FE1           BX       R3
   \   0000005C   000000EA           B        ??LibPutValue_23
    145                  } else {
    146                      Status = E_NO_INPUT_PERMISSION;
   \                     ??LibPutValue_25:
   \   00000060   2A00A0E3           MOV      R0,#+42
    147                  }
    148              }
    149              return Status;
   \                     ??LibPutValue_23:
   \   00000064   ........           B        ??Subroutine12_0
    150          }
    151          
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          int LibPutValue(int ValueId, PRogramObjectBase *ObjPtr, float InputValue, unsigned IDNum)
    154          {
   \                     ??LibPutValue_7:
   \   00000000   00402DE9           PUSH     {LR}
    155              return LibPutValue(ValueId, 0, ObjPtr, InputValue, IDNum);
   \   00000004   08002DE9           PUSH     {R3}
   \   00000008   0230A0E1           MOV      R3,R2
   \   0000000C   0120A0E1           MOV      R2,R1
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           BL       ??LibPutValue_6
   \   00000018                      REQUIRE ?Subroutine13
   \   00000018                      ;; // Fall through to label ?Subroutine13
    156          }
    157          
    158          

   \                                 In segment CODE, align 4, keep-with-next
    159          int LibPutValue(int ValueId, int Index, PRogramObjectBase *ObjPtr, unsigned IDNum)
    160          {
   \                     ??LibPutValue_8:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    161              return(LibPutValue(ValueId,Index, ObjPtr,"",true,IDNum));
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   0170A013           MOVNE    R7,#+1
   \   0000001C   0070A003           MOVEQ    R7,#+0
   \   00000020   ........           ADR      R1,??DataTable5  ;; ""
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000002C   ........           B        ?Subroutine11
    162          }
    163          
    164          

   \                                 In segment CODE, align 4, keep-with-next
    165          int LibPutValue(int ValueId, PRogramObjectBase *ObjPtr, unsigned IDNum)
    166          {
   \                     ??LibPutValue_9:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    167              return(LibPutValue(ValueId,0, ObjPtr,"",IDNum));
   \   00000014   ........           ADR      R1,??DataTable5  ;; ""
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000020                      REQUIRE ?Subroutine12
   \   00000020                      ;; // Fall through to label ?Subroutine12
    168          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     Master

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   00000000           DC8      "",+0,+0,+0
    169          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     LibPutValue(int, PRogramObjectBase *, AnsiString, bool, bool, unsigned int, int, int)
                                       80
     LibPutValue(int, PRogramObjectBase *, AnsiString, unsigned int)
                                       48
     LibPutValue(int, PRogramObjectBase *, float, unsigned int)
                                        8
     LibPutValue(int, PRogramObjectBase *, int, unsigned int)
                                        8
     LibPutValue(int, PRogramObjectBase *, unsigned int)
                                       48
     LibPutValue(int, int, PRogramObjectBase *, AnsiString, bool, bool, unsigned int, int, int)
                                      164
     LibPutValue(int, int, PRogramObjectBase *, AnsiString, unsigned int)
                                       68
     LibPutValue(int, int, PRogramObjectBase *, float, unsigned int)
                                       16
     LibPutValue(int, int, PRogramObjectBase *, int, unsigned int)
                                       68
     LibPutValue(int, int, PRogramObjectBase *, unsigned int)
                                       68
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AnsiString::AnsiString(AnsiString const &)
                                      64
     LibPutValue(int, int, PRogramObjectBase *, AnsiString, bool, bool, unsigned int, int, int)
                                     784
     LibPutValue(int, PRogramObjectBase *, AnsiString, bool, bool, unsigned int, int, int)
                                     124
     LibPutValue(int, int, PRogramObjectBase *, AnsiString, unsigned int)
                                      52
     ?Subroutine11                    88
     LibPutValue(int, PRogramObjectBase *, AnsiString, unsigned int)
                                      36
     ?Subroutine12                    60
     LibPutValue(int, int, PRogramObjectBase *, int, unsigned int)
                                      48
     LibPutValue(int, PRogramObjectBase *, int, unsigned int)
                                      28
     ?Subroutine13                     8
     LibPutValue(int, int, PRogramObjectBase *, float, unsigned int)
                                     104
     LibPutValue(int, PRogramObjectBase *, float, unsigned int)
                                      24
     LibPutValue(int, int, PRogramObjectBase *, unsigned int)
                                      48
     LibPutValue(int, PRogramObjectBase *, unsigned int)
                                      32
     ?<Constant "">                    1
     __sti__routine()                  4
     ??DataTable3                      4
     ??DataTable5                      4
      Others                         192

 
 1 700 bytes in segment CODE
     1 byte  in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 452 bytes of CODE  memory (+ 252 bytes shared)
     1 byte  of CONST memory

Errors: none
Warnings: none
