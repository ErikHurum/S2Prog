##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLevelSwitchFailure.Cpp     #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLevelSwitchFailure.Cpp     #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLevelSwitchFailure.lst #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLevelSwitchFailure.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLevelSwitchFailure.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLSwitchFailure::~AlarmLSwitchFailure()
   \                     `?~AlarmLSwitchFailure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLSwitchFailure_1`
   \   00000014   0100000A           BEQ      `?~AlarmLSwitchFailure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLSwitchFailure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLSwitchFailure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLSwitchFailure_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLSwitchFailure::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLSwitchFailure::AlarmLSwitchFailure(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmLSwitchFailure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   58009FE5           LDR      R0,??AlarmLSwitchFailure_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer = PROPtr;
     14          	//PROAtmReference *PROAtmPtr = (PROAtmReference*)PROPointer;
     15          	NumberOfAlarmSettings++;
   \   00000018   54009FE5           LDR      R0,??AlarmLSwitchFailure_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   C45084E5           STR      R5,[R4, #+196]
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     16          	IDNumber  = (ID_AL_LSWITCH_FAILURE << 16)+NumberOfAlarmSettings;
   \   0000002C   C006A0E3           MOV      R0,#+201326592
   \   00000030   A60880E3           ORR      R0,R0,#0xA60000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     17          	Type      = ID_AL_LSWITCH_FAILURE;
   \   0000003C   A600A0E3           MOV      R0,#+166
   \   00000040   C00E80E3           ORR      R0,R0,#0xC00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     18          	Limit     = 1.0;
   \   00000048   FE05A0E3           MOV      R0,#+1065353216
   \   0000004C   E40084E5           STR      R0,[R4, #+228]
     19          	Deadband  = 0.0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   BC0084E5           STR      R0,[R4, #+188]
     20          	FailureCnt= 0;
   \   00000058   EC0084E5           STR      R0,[R4, #+236]
     21          	MessageKey      = L_WORD528;	// Failure
   \   0000005C   840FA0E3           MOV      R0,#+528
   \   00000060   B80084E5           STR      R0,[R4, #+184]
     22          }
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLSwitchFailure_1:
   \   00000070   ........           DC32     ??__vtbl
   \   00000074   ........           DC32     ??NumberOfAlarmSettings
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void AlarmLSwitchFailure::Check(void)
     25          {
   \                     ??Check:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26          	int Status = AL_STAT_IN_DEADBAND;
     27          	switch ( int(((AILevelSwitch_mA*)PROPointer)->CalcValue) ) {
   \   00000008   C40094E5           LDR      R0,[R4, #+196]
   \   0000000C   480190E5           LDR      R0,[R0, #+328]
   \   00000010   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000014   020050E2           SUBS     R0,R0,#+2
   \   00000018   0A00000A           BEQ      ??Check_1
   \   0000001C   010050E2           SUBS     R0,R0,#+1
   \   00000020   0F00001A           BNE      ??Check_2
     28          	case LEVELSWITCH_HW_ERROR:
     29          		UpdateAlarm(AL_STAT_IN_NORMAL);
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     30          		if (State == AlActive) {
   \   00000030   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   0E00001A           BNE      ??Check_3
     31          			MoveAlarmToAknowledge();
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??MoveAlarmToAknowledge,??MoveAlarmToAknowledge??rA
   \   00000044   0B0000EA           B        ??Check_3
     32          		}
     33          		break;
     34          	case LEVELSWITCH_ERROR: 
     35          		if ( FailureCnt < LEVELSWITCH_ERROR_CNT ) {
   \                     ??Check_1:
   \   00000048   EC0094E5           LDR      R0,[R4, #+236]
   \   0000004C   0C0050E3           CMP      R0,#+12
   \   00000050   0110A0A3           MOVGE    R1,#+1
     36          			FailureCnt++;
   \   00000054   010080B2           ADDLT    R0,R0,#+1
   \   00000058   EC0084B5           STRLT    R0,[R4, #+236]
     37          			Status = AL_STAT_IN_NORMAL;
   \   0000005C   0010A0B3           MOVLT    R1,#+0
   \   00000060   020000EA           B        ??Check_4
     38          		} else {
     39          			Status  = AL_STAT_IN_ALARM;
     40          		}
     41          		UpdateAlarm(Status);
     42          		break;
     43          	default:
     44          		Status       = AL_STAT_IN_NORMAL;
     45          		FailureCnt = 0;
   \                     ??Check_2:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   EC0084E5           STR      R0,[R4, #+236]
     46          		UpdateAlarm(Status);
   \   0000006C   0010A0E3           MOV      R1,#+0
   \                     ??Check_4:
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     47          		break;
     48          	}
     49          }
   \                     ??Check_3:
   \   00000078                      REQUIRE ?Subroutine8
   \   00000078                      ;; // Fall through to label ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     50          
     51          ///////////////////////////////////////////////////////////////
     52          //
     53          // Routines for the librarian
     54          //
     55          ///////////////////////////////////////////////////////////////
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          int AlarmLSwitchFailure::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     58          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     59          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     60          	switch ( ValueId ) {
   \   00000028   3210A0E3           MOV      R1,#+50
   \   0000002C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000030   010055E1           CMP      R5,R1
     61          	case SVT_AL_LIMIT:
     62          		Status = E_NOT_ADJUSTABLE;
   \   00000034   2950A003           MOVEQ    R5,#+41
   \   00000038   1E00000A           BEQ      ??PutValue_2
     63          		break;
     64          	default:
     65          		Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   80009FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           _BLF     ??assign,??assign??rA
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   00012DE9           PUSH     {R8}
   \   00000070   0C308DE2           ADD      R3,SP,#+12
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000084   0050A0E1           MOV      R5,R0
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0C008DE2           ADD      R0,SP,#+12
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
     66          		break;
     67          	}
     68          	if ( Status==E_NO_ERR ) {
   \   00000098   000055E3           CMP      R5,#+0
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   \   000000A0   0400001A           BNE      ??PutValue_2
     69          		SetModifiedFlag();
   \   000000A4   A41094E5           LDR      R1,[R4, #+164]
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   541091E5           LDR      R1,[R1, #+84]
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   11FF2FE1           BX       R1
     70          	}
     71          	if ( UnitId ) {
   \                     ??PutValue_2:
   \   000000B8   000059E3           CMP      R9,#+0
     72          		*UnitId = ValUnitId;
   \   000000BC   00009D15           LDRNE    R0,[SP, #+0]
   \   000000C0   00008915           STRNE    R0,[R9, #+0]
     73          	}
     74          	return(Status);
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   20D08DE2           ADD      SP,SP,#+32
   \   000000CC   F043BDE8           POP      {R4-R9,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_3:
   \   000000D4   ........           DC32     ??npos
     75          }
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          int  AlarmLSwitchFailure::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     78          {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18409DE5           LDR      R4,[SP, #+24]
   \   00000008   1C509DE5           LDR      R5,[SP, #+28]
   \   0000000C   02C0A0E1           MOV      R12,R2
     79          	int Status = GETVAL_NO_ERR;
   \   00000010   0020A0E3           MOV      R2,#+0
     80          	switch ( ValueId ) {
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   327041E2           SUB      R7,R1,#+50
   \   0000001C   8C7D47E2           SUB      R7,R7,#+8960
   \   00000020   010057E3           CMP      R7,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   018F8FE2           ADR      R8,??GetValue_1
   \   0000002C   0780D8E7           LDRB     R8,[R8, R7]
   \   00000030   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     81          	case SVT_AL_LIMIT:
     82          		MyRetValue = 1.0;
   \                     ??GetValue_4:
   \   00000038   FE05A0E3           MOV      R0,#+1065353216
   \                     ??GetValue_5:
   \   0000003C   000083E5           STR      R0,[R3, #+0]
     83          		DecPnt     = 0;
   \   00000040   006084E5           STR      R6,[R4, #+0]
     84          		Unit       = NO_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
   \   00000048   080000EA           B        ??GetValue_6
     85          		break;
     86          	case SVT_AL_VALUE:
     87          		MyRetValue = (float)((AILevelSwitch_mA*)PROPointer)->CalcValue;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   480190E5           LDR      R0,[R0, #+328]
   \   00000054   F8FFFFEA           B        ??GetValue_5
     88          		DecPnt     = 0;
     89          		Unit       = NO_UNIT;
     90          		break;
     91          	default:
     92          		Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   20002DE9           PUSH     {R5}
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   0C20A0E1           MOV      R2,R12
   \   00000064   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000068   0020A0E1           MOV      R2,R0
   \   0000006C   08D08DE2           ADD      SP,SP,#+8
     93          		break;
     94          	}
     95          	return(Status);
   \                     ??GetValue_6:
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   0200A0E1           MOV      R0,R2
   \   00000078   1EFF2FE1           BX       LR               ;; return
     96          }
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          int AlarmLSwitchFailure::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     99          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    100          	int Status = GETVAL_NO_ERR;
    101          	//switch ( ValueId ) {
    102          	//	default:
    103          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    104          	//		break;
    105          	//}
    106          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine9
    107          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          int AlarmLSwitchFailure::PutFloatValue( int ValueId, float NewValue)
    110          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    111          	int Status= E_NO_ERR;
    112          	//switch ( ValueId ) {
    113          	//   default:
    114          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    115          	//     break;
    116          	//}
    117          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine9
   \   00000008                      ;; // Fall through to label ?Subroutine9
    118          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLSwitchFailure &AlarmLSwitchFailure::new AlarmLSwitchFailure(PRogramObjectBase *)
   \                     `??new AlarmLSwitchFailure`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmLSwitchFailure_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmLSwitchFailure
   \                     `??new AlarmLSwitchFailure_1`:
   \   00000020   ........           B        ?Subroutine8

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    119          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLSwitchFailure::AlarmLSwitchFailure(PRogramObjectBase *)
                                       12
     AlarmLSwitchFailure::Check()       8
     AlarmLSwitchFailure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLSwitchFailure::GetValue(int, int, float &, int &, int &)
                                       32
     AlarmLSwitchFailure::PutFloatValue(int, float)
                                        4
     AlarmLSwitchFailure::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AlarmLSwitchFailure::new AlarmLSwitchFailure(PRogramObjectBase *)
                                        8
     AlarmLSwitchFailure::~AlarmLSwitchFailure()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLSwitchFailure::~AlarmLSwitchFailure()
                                      56
     AlarmLSwitchFailure::NumberOfAlarmSettings
                                       4
     AlarmLSwitchFailure::AlarmLSwitchFailure(PRogramObjectBase *)
                                     120
     AlarmLSwitchFailure::Check()    120
     ?Subroutine8                      8
     AlarmLSwitchFailure::PutValue(int, int, AnsiString, bool, int *)
                                     216
     AlarmLSwitchFailure::GetValue(int, int, float &, int &, int &)
                                     124
     AlarmLSwitchFailure::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine9                      8
     AlarmLSwitchFailure::PutFloatValue(int, float)
                                       8
     AlarmLSwitchFailure::new AlarmLSwitchFailure(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
      Others                         320

 
 900 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 660 bytes of CODE  memory (+ 256 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
