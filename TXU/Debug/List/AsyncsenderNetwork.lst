##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:25 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AsyncsenderNetwork.cpp          #
#    Command line    =  D:\S2Prog\Shared\Src\AsyncsenderNetwork.cpp --fpu    #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AsyncsenderNetwork.lst      #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AsyncsenderNetwork.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AsyncsenderNetwork.cpp
      1          #ifdef ANBOOTLOADER
      2          #include "RTOS.h"
      3          #include "ANPro10Inc.h"
      4          #include "2410lib.h"
      5          #else
      6          #include "TSNIncludes.h"
      7          #endif
      8          #include "minilzo.h"
      9          //#include "AsyncsenderNetwork.h"
     10          extern bool anpro_net_send_urgent(void *Cmd);
     11          extern bool anpro_net_send_normal(void *Cmd);
     12          
     13          TSNMessageQ *AsyncsenderNetwork::NormalCommandQ = NULL;
     14          
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          AsyncsenderNetwork::AsyncsenderNetwork(void) {
     17          }
   \                     ??AsyncsenderNetwork:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          AsyncsenderNetwork::~AsyncsenderNetwork(void) {
     20          }
   \                     `?~AsyncsenderNetwork`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     21          
     22          //#define USE_LZO
     23          //#define NET_STATISTICS

   \                                 In segment CODE, align 4, keep-with-next
     24          void AsyncsenderNetwork::TaskEntryPoint(void) {
   \                     ??TaskEntryPoint:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
     25              static unsigned CompressErrCnt = 0;
     26              AsyncsenderNetwork::NormalCommandQ = new TSNMessageQ();
   \   00000008   0C00A0E3           MOV      R0,#+12
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0040B0E1           MOVS     R4,R0
   \   00000014   0000000A           BEQ      ??TaskEntryPoint_1
   \   00000018   ........           _BLF     ??TSNMessageQ,??TSNMessageQ??rA
   \                     ??TaskEntryPoint_1:
   \   0000001C   5C029FE5           LDR      R0,??TaskEntryPoint_2  ;; ??NormalCommandQ
     27          #ifdef NET_STATISTICS
     28              static float    AvgCompression = 0.0;
     29              static unsigned StartTimeAll   = TSN_Time;
     30              static float    BytesPerSecU   = 0.0;
     31              static float    BytesPerSecC   = 0.0;
     32              static float    MsgPerSecC     = 0.0;
     33              static float    MsgPerSecU     = 0.0;
     34              static float    TotalSize      = 0.0;
     35              static float    AvgSize        = 0.0;
     36              static float    CompressedSize = 0.0;
     37              static unsigned MessageCnt     = 0;
     38              static unsigned MessageCnt2    = 0;
     39          #endif
     40              static U8 WrkMem[LZO1X_1_MEM_COMPRESS];
     41              static U8 Packetbuf[MAX_ANPRO10_SIZE];
     42              static U8 CompressBuf[MAX_ANPRO10_SIZE];                   // Add a few bytes in case we can not compress
     43              static U8 NormalCommandbuf[MAX_ANPRO10_SIZE];    // See TSNMessageQ, must assume max size internal message, which is MAX_ANPRO10_SIZE
     44          
     45              QueueANPRO10_CommandHeading *rCmd = (QueueANPRO10_CommandHeading *)NormalCommandbuf;
     46              QueueANPRO10_CommandHeading *sCmd = (QueueANPRO10_CommandHeading *)Packetbuf;
     47              const U8 *sDataBufPtr             = Packetbuf   + sizeof(QueueANPRO10_CommandHeading);
     48          
     49          
     50              bool DifferentMessageAddress = false;
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   004080E5           STR      R4,[R0, #+0]
   \   00000028   54429FE5           LDR      R4,??TaskEntryPoint_2+0x4  ;; ??Packetbuf
   \   0000002C   040000EA           B        ??TaskEntryPoint_3
     51          
     52          // do the loop
     53              while ( true ) {
     54                  int StartTime       = TSN_Time;
     55                  int NMsgCnt         = 0;
     56                  bool SendPacketNow  = false;
     57                  U8 PrevRxId         = 0;
     58                  U8 PrevRxAddr       = 0;
     59                  TSNUart *ComPort    = NULL;
     60                  U8 *CurrentposPtr   = (U8 *)sDataBufPtr;
     61                  while ( !SendPacketNow && (abs(TSN_Time - StartTime) < 1000) && ((CurrentposPtr - sDataBufPtr) < WantedPacketSize) ) {
     62                      if ( DifferentMessageAddress ) {
     63                          // This always is caused by address change
     64                          DifferentMessageAddress = false;
     65                          NMsgCnt++;
     66                          ComPort         = rCmd->TxInfo.Port;
     67                          PrevRxAddr      = rCmd->TxInfo.rxAddr;
     68                          PrevRxId        = rCmd->TxInfo.rxId;
     69                          CurrentposPtr  += ANPRO10_AddCommand(CurrentposPtr, (U8 *)&rCmd->Data);
     70                      } else {
     71                          int commandsize = 0; //, targetrole, addedBytes,
     72                          if ( NormalCommandQ->GetMessage(NormalCommandbuf, &commandsize, 500) ) {
     73                              // Are we first
     74                              if ( !NMsgCnt ) {
     75                                  ComPort         = rCmd->TxInfo.Port;
     76                                  PrevRxAddr      = rCmd->TxInfo.rxAddr;
     77                                  PrevRxId        = rCmd->TxInfo.rxId;
     78                                  CurrentposPtr  += ANPRO10_AddCommand(CurrentposPtr, (U8 *)&rCmd->Data);
     79                                  NMsgCnt++;
     80                              } else if (   ComPort == rCmd->TxInfo.Port
     81                                          && PrevRxAddr == rCmd->TxInfo.rxAddr
     82                                          && PrevRxId   == rCmd->TxInfo.rxId ) {        // targetrole is the same
     83                                  CurrentposPtr += ANPRO10_AddCommand(CurrentposPtr, (U8 *)&rCmd->Data);
     84                                  NMsgCnt++;
     85                              } else {
     86                                  DifferentMessageAddress = true;
     87                                  SendPacketNow           = true;
     88                              }
     89                          } else if ( NMsgCnt ) {
     90                              SendPacketNow = true;
     91                          }
     92                      }
     93                  }
     94                  if ( NMsgCnt ) {
     95          #ifdef NET_STATISTICS
     96                      MessageCnt2 += NMsgCnt;
     97          #endif
     98                      NMsgCnt    = 0;
     99          #if (USE_LZO == 1)
    100                      {
    101                          lzo_uint NewSize, OrgSize = CurrentposPtr - sDataBufPtr;
    102                          int r = lzo1x_1_compress((const U8 *)sDataBufPtr, OrgSize, CompressBuf, &NewSize, WrkMem);
    103          #ifdef NET_STATISTICS
    104                          MessageCnt++;
    105                          TotalSize       += OrgSize;
    106                          CompressedSize  += NewSize;
    107                          AvgCompression = CompressedSize / TotalSize * 100.0;
    108                          AvgSize        = CompressedSize / MessageCnt;
    109                          const float ElapsedTime = (TSN_Time - StartTimeAll) / 1000.0;
    110                          BytesPerSecC   = CompressedSize / ElapsedTime;
    111                          BytesPerSecU   = TotalSize     / ElapsedTime;
    112                          MsgPerSecC     = MessageCnt    / ElapsedTime;
    113                          MsgPerSecU     = MessageCnt2   / ElapsedTime;
    114          #endif
    115                          if ( r == LZO_E_OK ) {
    116          
    117                              sCmd->TxInfo.Port    = ComPort;
    118                              sCmd->TxInfo.rxAddr  = PrevRxAddr;
    119                              sCmd->TxInfo.rxId    = PrevRxId;
    120                              sCmd->Data.CommandNo = CMD_TXU_COMPRESSED_PACKET;
    121                              sCmd->Data.ndb       = NewSize;
    122                              
    123                              memcpy((void*)sDataBufPtr, CompressBuf, NewSize);
    124                              // Se if its an addressed message or a broadcast.
    125                              if ( PrevRxAddr == DEVICE_BROADCAST_ADDR && PrevRxId == DEVICE_BROADCAST_TXU ) {
    126                                  anpro_net_send_normal(sCmd);
    127                                  // Give other tasks a chance
    128                                  OS_Delay(1);
    129                              }else{
    130                                  anpro_net_send_urgent(sCmd);
    131                              }
    132                          } else {
    133                              CompressErrCnt++;
   \                     ??TaskEntryPoint_4:
   \   00000030   50129FE5           LDR      R1,??TaskEntryPoint_2+0x8  ;; ??NormalCommandQ + 4
   \   00000034   4C029FE5           LDR      R0,??TaskEntryPoint_2+0x8  ;; ??NormalCommandQ + 4
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   011081E2           ADD      R1,R1,#+1
   \   00000040   001080E5           STR      R1,[R0, #+0]
    134                          }
   \                     ??TaskEntryPoint_3:
   \   00000044   40129FE5           LDR      R1,??TaskEntryPoint_2+0xC  ;; OS_Time
   \   00000048   0060A0E3           MOV      R6,#+0
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   0080A0E3           MOV      R8,#+0
   \   00000054   0C108DE5           STR      R1,[SP, #+12]
   \   00000058   0670A0E1           MOV      R7,R6
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   04108DE5           STR      R1,[SP, #+4]
   \   00000064   0A9084E2           ADD      R9,R4,#+10
   \   00000068   010000EA           B        ??TaskEntryPoint_5
   \                     ??TaskEntryPoint_6:
   \   0000006C   000056E3           CMP      R6,#+0
   \   00000070   5700001A           BNE      ??TaskEntryPoint_7
   \                     ??TaskEntryPoint_5:
   \   00000074   10029FE5           LDR      R0,??TaskEntryPoint_2+0xC  ;; OS_Time
   \   00000078   0A2084E2           ADD      R2,R4,#+10
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   0C109DE5           LDR      R1,[SP, #+12]
   \   00000084   022049E0           SUB      R2,R9,R2
   \   00000088   010050E0           SUBS     R0,R0,R1
   \   0000008C   00006042           RSBMI    R0,R0,#+0
   \   00000090   08208DE5           STR      R2,[SP, #+8]
   \   00000094   FA0F50E3           CMP      R0,#+1000
   \   00000098   D410A0B3           MOVLT    R1,#+212
   \   0000009C   501E81B3           ORRLT    R1,R1,#0x500
   \   000000A0   010052B1           CMPLT    R2,R1
   \   000000A4   480000AA           BGE      ??TaskEntryPoint_8
   \   000000A8   E0B19FE5           LDR      R11,??TaskEntryPoint_2+0x10  ;; ??NormalCommandbuf
   \   000000AC   01A086E2           ADD      R10,R6,#+1
   \   000000B0   000055E3           CMP      R5,#+0
   \   000000B4   1100000A           BEQ      ??TaskEntryPoint_9
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   0050A0E3           MOV      R5,#+0
   \   000000C0   0A60A0E1           MOV      R6,R10
   \                     ??TaskEntryPoint_10:
   \   000000C4   0B20D0E7           LDRB     R2,[R0, +R11]
   \   000000C8   10108DE2           ADD      R1,SP,#+16
   \   000000CC   0120C0E7           STRB     R2,[R0, +R1]
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   040050E3           CMP      R0,#+4
   \   000000D8   F9FFFFBA           BLT      ??TaskEntryPoint_10
   \   000000DC   10109DE5           LDR      R1,[SP, #+16]
   \   000000E0   0900A0E1           MOV      R0,R9
   \   000000E4   04108DE5           STR      R1,[SP, #+4]
   \   000000E8   0470DBE5           LDRB     R7,[R11, #+4]
   \   000000EC   0580DBE5           LDRB     R8,[R11, #+5]
   \   000000F0   06108BE2           ADD      R1,R11,#+6
   \   000000F4   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   000000F8   099080E0           ADD      R9,R0,R9
   \   000000FC   DCFFFFEA           B        ??TaskEntryPoint_5
   \                     ??TaskEntryPoint_9:
   \   00000100   78019FE5           LDR      R0,??TaskEntryPoint_2  ;; ??NormalCommandQ
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   00108DE5           STR      R1,[SP, #+0]
   \   0000010C   000090E5           LDR      R0,[R0, #+0]
   \   00000110   7D3FA0E3           MOV      R3,#+500
   \   00000114   0D20A0E1           MOV      R2,SP
   \   00000118   0B10A0E1           MOV      R1,R11
   \   0000011C   ........           _BLF     ??GetMessage,??GetMessage??rA
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   D0FFFF0A           BEQ      ??TaskEntryPoint_6
   \   00000128   0500DBE5           LDRB     R0,[R11, #+5]
   \   0000012C   0410DBE5           LDRB     R1,[R11, #+4]
   \   00000130   000056E3           CMP      R6,#+0
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0F00001A           BNE      ??TaskEntryPoint_11
   \                     ??TaskEntryPoint_12:
   \   0000013C   0B60D2E7           LDRB     R6,[R2, +R11]
   \   00000140   14308DE2           ADD      R3,SP,#+20
   \   00000144   0360C2E7           STRB     R6,[R2, +R3]
   \   00000148   012082E2           ADD      R2,R2,#+1
   \   0000014C   040052E3           CMP      R2,#+4
   \   00000150   F9FFFFBA           BLT      ??TaskEntryPoint_12
   \   00000154   14309DE5           LDR      R3,[SP, #+20]
   \   00000158   0170A0E1           MOV      R7,R1
   \   0000015C   04308DE5           STR      R3,[SP, #+4]
   \   00000160   0080A0E1           MOV      R8,R0
   \   00000164   06108BE2           ADD      R1,R11,#+6
   \   00000168   0900A0E1           MOV      R0,R9
   \   0000016C   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   00000170   099080E0           ADD      R9,R0,R9
   \   00000174   0160A0E3           MOV      R6,#+1
   \   00000178   BDFFFFEA           B        ??TaskEntryPoint_5
   \                     ??TaskEntryPoint_11:
   \   0000017C   0B60D2E7           LDRB     R6,[R2, +R11]
   \   00000180   18308DE2           ADD      R3,SP,#+24
   \   00000184   0360C2E7           STRB     R6,[R2, +R3]
   \   00000188   012082E2           ADD      R2,R2,#+1
   \   0000018C   040052E3           CMP      R2,#+4
   \   00000190   F9FFFFBA           BLT      ??TaskEntryPoint_11
   \   00000194   04209DE5           LDR      R2,[SP, #+4]
   \   00000198   18309DE5           LDR      R3,[SP, #+24]
   \   0000019C   030052E1           CMP      R2,R3
   \   000001A0   01005701           CMPEQ    R7,R1
   \   000001A4   00005801           CMPEQ    R8,R0
   \   000001A8   0500001A           BNE      ??TaskEntryPoint_13
   \   000001AC   06108BE2           ADD      R1,R11,#+6
   \   000001B0   0900A0E1           MOV      R0,R9
   \   000001B4   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   000001B8   099080E0           ADD      R9,R0,R9
   \   000001BC   0A60A0E1           MOV      R6,R10
   \   000001C0   ABFFFFEA           B        ??TaskEntryPoint_5
   \                     ??TaskEntryPoint_13:
   \   000001C4   0150A0E3           MOV      R5,#+1
   \   000001C8   010000EA           B        ??TaskEntryPoint_7
   \                     ??TaskEntryPoint_8:
   \   000001CC   000056E3           CMP      R6,#+0
   \   000001D0   9BFFFF0A           BEQ      ??TaskEntryPoint_3
   \                     ??TaskEntryPoint_7:
   \   000001D4   B8009FE5           LDR      R0,??TaskEntryPoint_2+0x14  ;; ??NormalCommandQ + 8
   \   000001D8   B8609FE5           LDR      R6,??TaskEntryPoint_2+0x18  ;; ??NormalCommandQ + 65544
   \   000001DC   01002DE9           PUSH     {R0}
   \   000001E0   0C109DE5           LDR      R1,[SP, #+12]
   \   000001E4   04308DE2           ADD      R3,SP,#+4
   \   000001E8   0620A0E1           MOV      R2,R6
   \   000001EC   0A0084E2           ADD      R0,R4,#+10
   \   000001F0   ........           _BLF     lzo1x_1_compress,??lzo1x_1_compress??rA
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   04D08DE2           ADD      SP,SP,#+4
   \   000001FC   8BFFFF1A           BNE      ??TaskEntryPoint_4
   \   00000200   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_14:
   \   00000204   04108DE2           ADD      R1,SP,#+4
   \   00000208   0110D0E7           LDRB     R1,[R0, +R1]
   \   0000020C   0410C0E7           STRB     R1,[R0, +R4]
   \   00000210   010080E2           ADD      R0,R0,#+1
   \   00000214   040050E3           CMP      R0,#+4
   \   00000218   F9FFFFBA           BLT      ??TaskEntryPoint_14
   \   0000021C   0470C4E5           STRB     R7,[R4, #+4]
   \   00000220   0580C4E5           STRB     R8,[R4, #+5]
   \   00000224   D300A0E3           MOV      R0,#+211
   \   00000228   0600C4E5           STRB     R0,[R4, #+6]
   \   0000022C   0700A0E3           MOV      R0,#+7
   \   00000230   0700C4E5           STRB     R0,[R4, #+7]
   \   00000234   00009DE5           LDR      R0,[SP, #+0]
   \   00000238   0610A0E1           MOV      R1,R6
   \   0000023C   0800C4E5           STRB     R0,[R4, #+8]
   \   00000240   2004A0E1           LSR      R0,R0,#+8
   \   00000244   0900C4E5           STRB     R0,[R4, #+9]
   \   00000248   00209DE5           LDR      R2,[SP, #+0]
   \   0000024C   0A0084E2           ADD      R0,R4,#+10
   \   00000250   ........           _BLF     memcpy,??memcpy??rA
   \   00000254   FF0057E3           CMP      R7,#+255
   \   00000258   0E005803           CMPEQ    R8,#+14
   \   0000025C   0400001A           BNE      ??TaskEntryPoint_15
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??anpro_net_send_normal,??anpro_net_send_normal??rA
   \   00000268   0100A0E3           MOV      R0,#+1
   \   0000026C   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   00000270   73FFFFEA           B        ??TaskEntryPoint_3
   \                     ??TaskEntryPoint_15:
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   ........           _BLF     ??anpro_net_send_urgent,??anpro_net_send_urgent??rA
   \   0000027C   70FFFFEA           B        ??TaskEntryPoint_3
   \                     ??TaskEntryPoint_2:
   \   00000280   ........           DC32     ??NormalCommandQ
   \   00000284   ........           DC32     ??Packetbuf
   \   00000288   ........           DC32     ??NormalCommandQ + 4
   \   0000028C   ........           DC32     OS_Time
   \   00000290   ........           DC32     ??NormalCommandbuf
   \   00000294   ........           DC32     ??NormalCommandQ + 8
   \   00000298   ........           DC32     ??NormalCommandQ + 65544
    135                      }
    136          #endif
    137                  }
    138              }
    139          }

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??NormalCommandQ:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 65536
   \   00010008                      DS8 16000

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??Packetbuf:
   \   00000000                      DS8 16000

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??NormalCommandbuf:
   \   00000000                      DS8 16000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AsyncsenderNetwork &AsyncsenderNetwork::new AsyncsenderNetwork()
   \                     `??new AsyncsenderNetwork`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   ........           B        ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void AsyncsenderNetwork::delete ~AsyncsenderNetwork(AsyncsenderNetwork *)
   \                     `??delete ~AsyncsenderNetwork`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0000000A           BEQ      `??delete ~AsyncsenderNetwork_1`
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~AsyncsenderNetwork_1`:
   \   00000010                      REQUIRE ?Subroutine6
   \   00000010                      ;; // Fall through to label ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    140          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AsyncsenderNetwork::AsyncsenderNetwork()
                                        0
     AsyncsenderNetwork::TaskEntryPoint()
                                       68
     AsyncsenderNetwork::delete ~AsyncsenderNetwork(AsyncsenderNetwork *)
                                        4
     AsyncsenderNetwork::new AsyncsenderNetwork()
                                        4
     AsyncsenderNetwork::~AsyncsenderNetwork()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AsyncsenderNetwork::AsyncsenderNetwork()
                                        4
     AsyncsenderNetwork::~AsyncsenderNetwork()
                                        4
     AsyncsenderNetwork::TaskEntryPoint()
                                      668
     AsyncsenderNetwork::NormalCommandQ
                                    81544
     Packetbuf                      16000
     NormalCommandbuf               16000
     AsyncsenderNetwork::new AsyncsenderNetwork()
                                       16
     AsyncsenderNetwork::delete ~AsyncsenderNetwork(AsyncsenderNetwork *)
                                       16
     ?Subroutine6                       8
     __sti__routine()                   4
      Others                          160

 
     864 bytes in segment CODE
 113 544 bytes in segment DATA_Z
       4 bytes in segment DIFUNCT
      12 bytes in segment INITTAB
 
     724 bytes of CODE memory (+ 156 bytes shared)
 113 544 bytes of DATA memory

Errors: none
Warnings: none
