##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TankWashingAPI.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\TankWashingAPI.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TankWashingAPI.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TankWashingAPI.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TankWashingAPI.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<int const, vector<int>>::~pair()
   \                     `?~pair`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   044080E2           ADD      R4,R0,#+4
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Pairib _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::insert(pair<int const, vector<int>> const &)
   \                     ??insert:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0800001A           BNE      ??insert_2
   \   00000028   001097E5           LDR      R1,[R7, #+0]
   \   0000002C   102090E5           LDR      R2,[R0, #+16]
   \   00000030   0080A0E1           MOV      R8,R0
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   000090B5           LDRLT    R0,[R0, #+0]
   \   0000003C   0190A0B3           MOVLT    R9,#+1
   \   00000040   080090A5           LDRGE    R0,[R0, #+8]
   \   00000044   0090A0A3           MOVGE    R9,#+0
   \   00000048   F3FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   0150A0E3           MOV      R5,#+1
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   0B00000A           BEQ      ??insert_3
   \   0000005C   001096E5           LDR      R1,[R6, #+0]
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   0700001A           BNE      ??insert_4
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   0000007C   00008DE5           STR      R0,[SP, #+0]
   \   00000080   0450CDE5           STRB     R5,[SP, #+4]
   \   00000084   0B0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000088   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   0000008C   101090E5           LDR      R1,[R0, #+16]
   \   00000090   002097E5           LDR      R2,[R7, #+0]
   \   00000094   020051E1           CMP      R1,R2
   \   00000098   030000AA           BGE      ??insert_7
   \   0000009C   0730A0E1           MOV      R3,R7
   \   000000A0   0820A0E1           MOV      R2,R8
   \   000000A4   0910A0E1           MOV      R1,R9
   \   000000A8   F1FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000AC   00008DE5           STR      R0,[SP, #+0]
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   030090E8           LDM      R0,{R0,R1}
   \   000000C0   030084E8           STM      R4,{R0,R1}
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::iterator _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::find(int)
   \                     ??find:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_1
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A0A1           MOVGE    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_1:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Erase(_Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   080000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   100085E2           ADD      R0,R5,#+16
   \   00000028   ........           _BLF     `?~pair`,`?~pair??rA`
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000034   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000038   0D00D6E5           LDRB     R0,[R6, #+13]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F3FFFF0A           BEQ      ??_Erase_2
   \   00000044   7040BDE8           POP      {R4-R6,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::iterator _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr, pair<int const, vector<int>> const &)
   \                     ??_Insert_1:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   2000A0E3           MOV      R0,#+32
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0E00000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   001097E5           LDR      R1,[R7, #+0]
   \   00000040   100088E2           ADD      R0,R8,#+16
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   049080E2           ADD      R9,R0,#+4
   \   0000004C   0900A0E1           MOV      R0,R9
   \   00000050   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000054   041087E2           ADD      R1,R7,#+4
   \   00000058   0900A0E1           MOV      R0,R9
   \   0000005C   ........           _BLF     ??_Assign,??_Assign??rA
   \                     ??_Insert_12:
   \   00000060   0830A0E1           MOV      R3,R8
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   F043BDE8           POP      {R4-R9,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Lbound(int) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   082092B5           LDRLT    R2,[R2, #+8]
   \   0000001C   0200A0A1           MOVGE    R0,R2
   \   00000020   002092A5           LDRGE    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs map<int, vector<int>>::~map()
   \                     `?~map`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<int> &map<int, vector<int>>::operator[](int)
   \                     `??operator[]`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
   \   00000010   04008DE2           ADD      R0,SP,#+4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   10008DE2           ADD      R0,SP,#+16
   \   00000024   ........           _BLF     ??insert,??insert??rA
   \   00000028   10409DE5           LDR      R4,[SP, #+16]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     `?~pair`,`?~pair??rA`
   \   00000034   140084E2           ADD      R0,R4,#+20
   \   00000038   18D08DE2           ADD      SP,SP,#+24
   \   0000003C   1040BDE8           POP      {R4,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_13:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_13
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #ifdef ANWIN
      3          	#include "LiteCall.hpp"
      4              #include "LiteAccess.hpp"
      5              #pragma hdrstop
      6              #include "MainUnit.h"
      7          #endif
      8          
      9          #include "TankWashingAPI.h"
     10          #include "PROTank.h"
     11          #pragma hdrstop
     12          
     13          //---------------------------------------------------------------------------
     14          #ifdef ANWIN
     15          #pragma package(smart_init)
     16          #endif
     17          // Forward decls
     18          class PROTank;
     19          #ifdef ANWIN
     20          twmRunCache_t TankWashingAPI::twmRunCache;
     21          #endif

   \                                 In segment DATA_Z, align 4, align-sorted
     22          tankId_to_TWMId_Cache_t TankWashingAPI::tankId_to_TWMId_Cache;
   \                     ??tankId_to_TWMId_Cache:
   \   00000000                      DS8 24

   \                                 In segment DATA_Z, align 4, align-sorted
     23          long TankWashingAPI::lastCacheUpdateTime = 0;
   \                     ??lastCacheUpdateTime:
   \   00000000                      DS8 4
     24          
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          TankWashingAPI::TankWashingAPI()
   \                     ??TankWashingAPI:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
     27          {
   \   0000000C   040084E2           ADD      R0,R4,#+4
   \   00000010   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     28          #ifdef ANWIN
     29          	pUnitOfWork = new UnitOfWork();
     30          #else
     31          	pUnitOfWork = NULL;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   000084E5           STR      R0,[R4, #+0]
     32          #endif
     33          
     34          	lastErrorMessage = AnsiString("");
   \   0000001C   0D1F8FE2           ADR      R1,??TankWashingAPI_1  ;; ""
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000028   ........           LDR      R1,??DataTable4  ;; ??npos
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   003091E5           LDR      R3,[R1, #+0]
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   040084E2           ADD      R0,R4,#+4
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
     35          }
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           B        ?Subroutine25
   \                     ??TankWashingAPI_1:
   \   00000058   00000000           DC8      "",+0,+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine25_0:
   \   00000004   1040BDE8           POP      {R4,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine25_1:
   \   0000000C   ........           DC32     `?<Constant "TankWashingAPI is onl...">`
     36          
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          TankWashingAPI::~TankWashingAPI()
     39          {
   \                     `?~TankWashingAPI`:
   \   00000000   00402DE9           PUSH     {LR}
     40          	if (pUnitOfWork != NULL) {
     41          #ifdef ANWIN
     42          		delete pUnitOfWork;
     43          #endif
     44          	}
     45          }
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   040080E2           ADD      R0,R0,#+4
   \   00000010   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000014                      REQUIRE ?Subroutine26
   \   00000014                      ;; // Fall through to label ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     46          
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          bool TankWashingAPI::PrepareWashingRun(int twmId, int tankId, TankWashingMachineRun_Type washType, int cleaningMediaId, string& batchGUID, int& twmRunId)
     49          {
     50          #ifdef ANWIN
     51          	bool proceedCreatingWashingRun = false;
     52          	bool opSuccess = false;
     53          
     54          	// ** First ensure database state is correct so that it is possible to create
     55          	// ** a new washing run. The code does some checks, then sets the
     56          	// ** proceedCreatingWashingRun bool to true if it is okay to proceed. If not
     57          	// ** then no washing run object is created.
     58          
     59          	// If no washing run exists for this washing machine then it is OK to create one:
     60          	bool runExists = false;
     61          	opSuccess = pUnitOfWork->TWMRun_Repository->ExistsByWashingMachineId(twmId, runExists);
     62          
     63          	if (opSuccess && !runExists) {
     64          		proceedCreatingWashingRun = true;
     65          	}
     66          	else if (opSuccess && runExists) {
     67          
     68          		// A previous run exists. Ensure it is has status "completed" or "error":
     69          		TankWashingMachineRun latestRun;
     70          		opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, latestRun);
     71          
     72          		if (opSuccess && (latestRun.Status == twmr_completed || latestRun.Status == twmr_error))
     73          		{
     74          			proceedCreatingWashingRun = true;
     75          		}
     76          		else
     77          		{
     78          			// 21.05.2013: Keep twm runs if they together give the "idle" status for the whole tank.
     79          			// This avoids unecessary creation of twm runs and hence fewer useless log items:
     80          			TankWashingMachineRunCollection twmRunColl;
     81          			pUnitOfWork->TWMRun_Repository->ReadMultipleLatestByTankId(tankId, twmRunColl);
     82          
     83          			TankWashingMachineRun_Statuses status = twmRunColl.GetAggregateStatus();
     84          			if (status != twmr_idle) {
     85                      	proceedCreatingWashingRun = true;
     86          			}
     87          		}
     88          	}
     89          
     90          	// If an error occured then return from this function with an error:
     91          	if (!opSuccess) {
     92              	lastErrorMessage = AnsiString("Failed to read database data for tank washing machine w/");
     93          		lastErrorMessage.cat_sprintf("ID=%d, function=%s", twmId, __FUNC__);
     94          		return false;
     95          	}
     96          
     97          
     98          	if (proceedCreatingWashingRun) {
     99          
    100          		TankWashingMachineRun twmRun;
    101          		twmRun.InitializeIdle(twmId,batchGUID.c_str());
    102          		twmRun.WashType         = (int)washType;
    103          		twmRun.CleaningMediaId  = cleaningMediaId;
    104          
    105          		PROTank* pTank = PROTank::FindTankById(tankId);
    106          		AnsiString unitStr;
    107          
    108          		// Set cargo related properties
    109          		if (pTank != NULL && pTank->CargoType != NULL) {
    110          			twmRun.SystemCargoId = pTank->CargoType->IDNumber;
    111          			twmRun.CargoDisplayName = LibGetValue(SVT_CARGO_TYPE_NAME, pTank, &unitStr);
    112          		}
    113          		else
    114          		{
    115          			twmRun.SystemCargoId 	= 0;
    116          			twmRun.CargoDisplayName = "";
    117          		}
    118          
    119          		opSuccess = pUnitOfWork->TWMRun_Repository->Create(twmRun);
    120          
    121          		if (opSuccess) {
    122          			// Pass back the DB assigned Id of the TWM Run object created:
    123          			TankWashingMachineRun twmRun_readBack;
    124          			opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun_readBack);
    125          
    126          			if (opSuccess) {
    127          				twmRunId = twmRun_readBack.Id;
    128          			}
    129          		}
    130          
    131          		if (!opSuccess) {
    132          			lastErrorMessage = AnsiString("Failed initalize new washing machine run on machine w/");
    133          			lastErrorMessage.cat_sprintf("ID=%d, function=%s", twmId, __FUNC__);
    134          		}
    135          	}
    136          	else
    137          	{
    138          		lastErrorMessage = AnsiString("Open TWM Run already exists for this machine, please close it first ");
    139          		lastErrorMessage.cat_sprintf("TWM ID=%d", twmId );
    140          		opSuccess = false;
    141          	}
    142          
    143              TankWashingAPI::EnsureCacheHasTWMRunObject(twmId, true);
    144          
    145          	return opSuccess;
    146          #else
    147          	return false;
   \                     ??PrepareWashingRun:
   \   00000000   ........           B        ?Subroutine27
    148          #endif
    149          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    150          
    151          
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          bool TankWashingAPI::PrepareWholeTank(int tankId, TankWashingMachineRun_Type washType, int cleaningMediaId, vector<int>& createdTWMRunIds)
    154          {
    155          #ifdef ANWIN
    156          	// Load current washing runs
    157          	TankWashingMachineRunCollection twmRuns;
    158          
    159          	// Generate a unique value for grouping multiple washing run objects (these are created in the PrepareWashingRun method):
    160          	string batchGUIDstr;
    161          	TGUID guid;
    162          	HRESULT hres = CreateGUID(guid);
    163          
    164          	if ((hres >> 31) == 0) {
    165          		AnsiString batchGUIDAnsiString = Sysutils::GUIDToString(guid);
    166          
    167          		int gsLength = batchGUIDAnsiString.Length();
    168          		AnsiString guidStrStripped = batchGUIDAnsiString.SubString(2, gsLength - 2);
    169          
    170          		batchGUIDstr = string(guidStrStripped.c_str());
    171          	}
    172          	else
    173          	{
    174          		lastErrorMessage = AnsiString("Failed to generate BatchGUID: ");
    175          		lastErrorMessage.cat_sprintf("%s", __FUNC__);
    176          		return false;
    177          	}
    178          
    179          
    180          	bool opSuccess = pUnitOfWork->TWMRun_Repository->ReadMultipleLatestByTankId(tankId, twmRuns);
    181          
    182          	if (opSuccess) {
    183          		// Check that they are all completed or error
    184          		TankWashingMachineRun_Statuses aggregateStatus = twmRuns.GetAggregateStatus();
    185          
    186                  // Possible error. Expression was overrided by true
    187          		if (true || (aggregateStatus == twmr_completed || aggregateStatus == twmr_error) || twmRuns.Count() == 0)
    188          		{
    189          			// Create new washing runs:
    190          			// Get the machine ids in this tank:
    191          			TankWashingMachineCollection twmCollection;
    192          			opSuccess = pUnitOfWork->TWM_Repository->ReadAllTankWashingMachinesInTank(tankId, twmCollection);
    193          
    194          			if (opSuccess) {
    195          				vector<TankWashingMachine*> twmVector;
    196          				twmCollection.GetTWMObjects(twmVector);
    197          
    198          				vector<TankWashingMachine*>::iterator twmIter = twmVector.begin();
    199          
    200          				while (twmIter != twmVector.end())
    201          				{
    202          					int twmId = (*twmIter)->IDNumber;
    203          					int twmRunId = 0;
    204          
    205          					// PrepareWashingRun will close running washes if they exists
    206          					opSuccess = PrepareWashingRun(twmId, tankId, washType, cleaningMediaId, batchGUIDstr, twmRunId);
    207          
    208          					if (!opSuccess) {
    209          						// error message has already been set, so just break out of this function on failure:
    210          						return false;
    211          					}
    212          					else
    213          					{
    214          						createdTWMRunIds.push_back(twmRunId);
    215          					}
    216          
    217          					++twmIter;
    218          				}
    219          			}
    220          			else
    221          			{
    222          				lastErrorMessage = AnsiString("Failed to read washing machines in Tank w/");
    223          				lastErrorMessage.cat_sprintf("Id=%d", tankId);
    224          				opSuccess = false;
    225          			}
    226          		}
    227          		else
    228          		{
    229          			lastErrorMessage = AnsiString("Tank has aggregate status not suitable for preparing new washing runs, ag.status=");
    230          			lastErrorMessage.cat_sprintf("%d", aggregateStatus );
    231          			opSuccess = false;
    232          		}
    233          	}
    234          	else
    235          	{
    236          		// Cannot prepare
    237          		lastErrorMessage = AnsiString("Failed to read Ids of Tank washing machines in tank w/Id=");
    238          		lastErrorMessage.cat_sprintf("%d", tankId );
    239          		opSuccess = false;
    240          	}
    241          
    242          	return opSuccess;
    243          #else
    244          	return false;
   \                     ??PrepareWholeTank:
   \   00000000                      REQUIRE ?Subroutine27
   \   00000000                      ;; // Fall through to label ?Subroutine27
    245          #endif
    246          }
    247          
    248          
    249          
    250          

   \                                 In segment CODE, align 4, keep-with-next
    251          bool TankWashingAPI::StartWashingRun(int twmId, int& twmRunId)
    252          {
    253          #ifdef ANWIN
    254          	// Get latest washing run
    255          	bool opSuccess = false;
    256          	TankWashingMachineRun twmRun;
    257          	bool twmRunExists;
    258          
    259          	opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun);
    260          
    261          	// Update it's status and start date etc, then store it again:
    262          	if (opSuccess) {
    263          
    264          		if (twmRun.Id <= 0) {
    265          			lastErrorMessage = AnsiString("No tank washing run exists for this machine. Must be prepared first ");
    266          			lastErrorMessage.cat_sprintf("TWM Id=%d", twmId);
    267          			return false;
    268          		}
    269          		else if (twmRun.Status != twmr_idle) {
    270          
    271          			lastErrorMessage = AnsiString("Tank washing run must be prepared before starting. Data: ");
    272          			lastErrorMessage.cat_sprintf("TWM Id=%d, TWM Run Id=%d, TWM Run status=%d:\"%s\"",
    273          				twmId, twmRun.Id, twmRun.Status, TankWashingMachineRun::StatusToString(twmRun.Status));
    274          			return false;
    275          		}
    276          
    277          		if (opSuccess) {
    278          			// Finally done, just start run and update stored data:
    279          			twmRun.Start();
    280          			opSuccess = pUnitOfWork->TWMRun_Repository->Update(twmRun);
    281          
    282          			if (opSuccess) {
    283          				// Pass back the DB assigned Id of the TWM Run object created:
    284          				TankWashingMachineRun twmRun_readBack;
    285          				opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun_readBack);
    286          
    287          				if (opSuccess) {
    288          					twmRunId = twmRun_readBack.Id;
    289          				}
    290          			}
    291          		}
    292          	}
    293          
    294          	if (!opSuccess) {
    295          		lastErrorMessage = AnsiString("Failed to start washing machine run on machine w/");
    296          		lastErrorMessage.cat_printf("ID=%d, function=%s", twmId, __FUNC__);
    297          	}
    298          
    299          
    300          	TankWashingAPI::EnsureCacheHasTWMRunObject(twmId, true);
    301          
    302          	return opSuccess;
    303          #else
    304          	return false;
   \                     ??StartWashingRun:
   \   00000000   ........           B        ?Subroutine27
    305          #endif
    306          }
    307          
    308          
    309          

   \                                 In segment CODE, align 4, keep-with-next
    310          bool TankWashingAPI::FinishWashingRun(int twmId, bool force)
    311          {
    312          #ifdef ANWIN
    313          	// Get latest washing run
    314          	bool opSuccess = false;
    315          
    316          	TankWashingMachineRun twmRun;
    317          
    318          	opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun);
    319          	//CalculateExpenditures(twmRunCollection, twmCollection, timeNow, WaterConsumption, EnergyConsumption, FuelConsumption);
    320          
    321          
    322          	// Update it's status and end date etc, then store it again:
    323          	if (opSuccess) {
    324          		twmRun.Completed(force);
    325          		// Get a hold of the TWM object:
    326          		TankWashingMachine twm;
    327          		//twm.NumberOfNozzles = 1;
    328          		//EHSMArk fix database
    329          		bool twmFound = pUnitOfWork->TWM_Repository->ReadById(twmId, twm);
    330          
    331          		// Find the tank which the TWM is mounted in:
    332          		if (twmFound) {
    333          
    334          			PROTank* pTank 				  = PROTank::FindTankById( twm.TankId );
    335          			PROTankWashingMachine* TWMptr = (PROTankWashingMachine*)PRogramObjectBase::FindObject(twmId);
    336          			if (TWMptr) {
    337          				twmRun.RunningTime = TWMptr->RunningTime;
    338          				// Refresh cargo type saved in this TWM Run:
    339          				if (pTank != NULL && pTank->CargoType != NULL) {
    340          					AnsiString unitStr;
    341          					twmRun.SystemCargoId = pTank->CargoType->IDNumber;
    342          					twmRun.CargoDisplayName = LibGetValue(SVT_CARGO_TYPE_NAME, pTank, &unitStr);
    343          				}
    344          				else
    345          				{
    346          					twmRun.SystemCargoId 	= 0;
    347          					twmRun.CargoDisplayName = "";
    348          				}
    349          
    350          				PROWaterHeater* pWaterHeater = NULL;
    351          				for (unsigned i=0; i<PROWaterHeater::AllObjVector.size(); i++)
    352          				{
    353          					PROWaterHeater *pTmp = (PROWaterHeater*) PROWaterHeater::AllObjVector[i];
    354          					if (pTmp->HasPressure && pTmp->HasInputTemperature && pTmp->HasOutputTemperature)
    355          					{
    356          						pWaterHeater = pTmp;
    357          					}
    358          				}
    359          
    360          				// Get calculated water, energy and money useage (cost)
    361          				double WaterConsumption 	= 0.0;
    362          				double EnergyConsumption 	= 0.0;
    363          				double FuelConsumption 		= 0.0;
    364          				double Flow             	= 0.0;
    365          				TankWashingCalcResources res;
    366          				TankWashingMachineWaterUseParams* pWaterUseParams = res.FindParameters(twm.MachineTypeId, twm.NozzleDiameter_mm);
    367          				if (pWaterHeater != NULL && pWaterUseParams != NULL)
    368          				{
    369          					TankWashingCalcParams calcParams;
    370          					calcParams.waterUseParams       = pWaterUseParams;
    371          					calcParams.waterPressure_bar    = pWaterHeater->PressureValue*MH2O_TO_BAR; //We use SI units so must convert to Bar.
    372          					calcParams.numberOfNozzles      = twm.NumberOfNozzles;
    373          					calcParams.waterTemp1_c         = pWaterHeater->InputTemperatureValue;
    374          					calcParams.waterTemp2_c         = pWaterHeater->OutputTemperatureValue;
    375          					calcParams.HeatCapacity 		= WATER_HEAT_CAPACITY;
    376          					calcParams.MDO_kWh_per_ton      = pWaterHeater->MDO_kWh_per_ton*pWaterHeater->MDO_Efficiency/100.0;
    377          					if (twmRun.Status != twmr_idle)
    378          					{
    379          						double elapsedTime =  twmRun.RunningTime;// twmRun.GetElapsedTime();
    380          						CalculateExpenditures(calcParams, elapsedTime, WaterConsumption, EnergyConsumption, FuelConsumption, Flow);
    381          					}
    382          				}
    383          				twmRun.EnergyConsumption 	= EnergyConsumption;
    384          				twmRun.WaterConsumption  	= WaterConsumption;
    385          				twmRun.FuelConsumption  	= FuelConsumption;
    386          				twmRun.Flow                 = Flow;
    387          
    388          				opSuccess = pUnitOfWork->TWMRun_Repository->Update(twmRun);
    389          
    390          
    391          				// Update TWM's total life running time stored in the tank washing machine object:
    392          				//TankWashingMachine twm;
    393          				//if (opSuccess) {
    394          				//	opSuccess = pUnitOfWork->TWM_Repository->ReadById(twmId, twm);
    395          
    396          				if (opSuccess ) {
    397          					double runTimeSpent = TWMptr->RunningTime;//    twmRun.endDateTime - twmRun.startDateTime;
    398          					twm.GearRatio 		= TWMptr->GetGearRatio();
    399          					twm.NumberOfNozzles	= TWMptr->GetNumberOfNozzles();
    400          					twm.LifeRunningTime += runTimeSpent;
    401          					twm.RunningTimeSinceLastService += runTimeSpent;
    402          
    403          					opSuccess = pUnitOfWork->TWM_Repository->Update(twm);
    404          				}
    405          			}
    406          		}
    407          	}
    408          
    409          	if (!opSuccess) {
    410          		lastErrorMessage = AnsiString("Failed to stop washing machine run. ");
    411          		lastErrorMessage.cat_sprintf("TWM Id=%d, function=%s", twmId, __FUNC__);
    412          	}
    413          
    414          	TankWashingAPI::EnsureCacheHasTWMRunObject(twmId, true);
    415          
    416          	return opSuccess;
    417          #else
    418          	return false;
   \                     ??FinishWashingRun:
   \   00000000   ........           B        ?Subroutine27
    419          #endif
    420          }
    421          
    422          
    423          

   \                                 In segment CODE, align 4, keep-with-next
    424          bool TankWashingAPI::SetError(int twmId, int &twmRunId)
    425          {
    426          #ifdef ANWIN
    427          	bool opSuccess = false;
    428          	TankWashingMachineRun twmRun;
    429          
    430          	opSuccess = pUnitOfWork->TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun);
    431          
    432          	// Set error on the current run:
    433          	if (opSuccess) {
    434                  twmRun.Error();
    435          		opSuccess = pUnitOfWork->TWMRun_Repository->Update(twmRun);
    436          		twmRunId = twmRun.Id;
    437          	}
    438          
    439          	if (!opSuccess) {
    440          		lastErrorMessage = AnsiString("Failed to set error on washing machine run. ");
    441          		lastErrorMessage.cat_sprintf("TWM Id=%d, function=%s", twmId, __FUNC__);
    442          	}
    443          
    444              TankWashingAPI::EnsureCacheHasTWMRunObject(twmId, true);
    445          
    446          	return opSuccess;
    447          #else
    448          	return false;
   \                     ??SetError:
   \   00000000   ........           B        ?Subroutine27
    449          #endif
    450          }
    451          
    452          
    453          

   \                                 In segment CODE, align 4, keep-with-next
    454          void TankWashingAPI::GetLastErrorMessage(AnsiString& errorMsg)
    455          {
   \                     ??GetLastErrorMessage:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    456          #ifdef ANWIN
    457          	errorMsg = lastErrorMessage;
    458          #else
    459              errorMsg = AnsiString("TankWashingAPI is only implemented for ANWin as of yet");
   \   00000008   ........           LDR      R1,??Subroutine25_1  ;; `?<Constant "TankWashingAPI is onl...">`
   \   0000000C   1CD04DE2           SUB      SP,SP,#+28
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000018   ........           LDR      R1,??DataTable4  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
    460          #endif
    461          }
   \   00000040                      REQUIRE ?Subroutine25
   \   00000040                      ;; // Fall through to label ?Subroutine25
    462          
    463          
    464          

   \                                 In segment CODE, align 4, keep-with-next
    465          bool TankWashingAPI::InitTWMinDatabase(TankWashingMachine& twm)
    466          {
    467          	bool success = true; // Defauls to success  = true
    468          
    469          #ifdef ANWIN
    470          	// Ensure all required members of this object have been initialized:
    471          	if (twm.IDNumber <= 0 || twm.Identifier.Length() == 0 || twm.NozzleDiameter_mm == 0){
    472          		success = false;
    473          		lastErrorMessage = AnsiString("Could not Init TWM in DB because not all required fields were set : ");
    474          		twm.ToString(lastErrorMessage);
    475          	}
    476          
    477          	// Finally do the actual DB update of the tank washing machine based on the parsed configuration:
    478          	if (success) {
    479          		/*
    480          		PROTankWashingMachine *TWMPtr = (PROTankWashingMachine *)PRogramObjectBase::FindObject(twm.IDNumberIDNumber);
    481          		twm.GearRatio = TWMPtr->GetGearRatio();
    482          		twm.NozzleDiameter_mm = TWMPtr->GetNozzleDiameter();
    483          		twm.NozzleDiameter_mm = TWMPtr->GetNumberOfNozzles();
    484          		*/
    485          		TLiteQuery 	*LiteQuery 	= new TLiteQuery(NULL);
    486          		try {
    487          			// LiteConnection is either TLiteConnection already set up
    488          			LiteQuery->Connection 	= MainForm->WashTrackLiteConnection;
    489          			AnsiString SQLText = "SELECT * FROM WashingMachines";
    490          			SQLText += " WHERE Id=" + AnsiString(twm.IDNumber);
    491          			// retrieve data
    492          			LiteQuery->SQL->Text = SQLText;
    493          
    494          			LiteQuery->Open();
    495          			// retrieve data
    496          			//	ShowMessage("Records of this alarm= "+IntToStr(LiteQuery->FetchRows));
    497          
    498          			if (LiteQuery->RecordCount) {
    499          				success = pUnitOfWork->TWM_Repository->UpdateFromConfiguration(twm);
    500          			} else {
    501          				success = pUnitOfWork->TWM_Repository->Create(twm);
    502          			}
    503          			if (!success) {
    504          				lastErrorMessage = AnsiString("General failure to init TWM in database : ");
    505          				twm.ToString(lastErrorMessage);
    506          			}
    507          
    508          		}
    509          		__finally{
    510          			LiteQuery->Free();
    511          		}
    512          
    513          
    514          	}
    515          
    516          #endif
    517          	return success;
   \                     ??InitTWMinDatabase:
   \   00000000   ........           B        ?Subroutine28
    518          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine28_0:
   \   00000008   ........           DC32     `?<Constant "Tank Cleaning Media List">`
   \   0000000C   ........           DC32     ??HasTankWashingMachines
    519          
    520          
    521          

   \                                 In segment CODE, align 4, keep-with-next
    522          bool TankWashingAPI::LoadTankCleaningMediaList(TSNConfigString& configString)
    523          {
   \                     ??LoadTankCleaningMediaList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   0150A0E1           MOV      R5,R1
    524          	bool success = true;
    525          	int errorLine=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    526          	int key;
    527          	AnsiString PROName = "Tank Cleaning Media List";
   \   00000014   ........           LDR      R1,??Subroutine28_0  ;; `?<Constant "Tank Cleaning Media List">`
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   3C008DE2           ADD      R0,SP,#+60
   \   00000020   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000024   0070E0E3           MVN      R7,#+0
    528          
    529          	do {
    530          		AnsiString inputKeyWord = configString.NextWord(errorLine);
   \                     ??LoadTankCleaningMediaList_1:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   20108DE2           ADD      R1,SP,#+32
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    531          		if ( errorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0B00000A           BEQ      ??LoadTankCleaningMediaList_2
    532          			if ( errorLine != EOF ) {
   \   00000048   070050E1           CMP      R0,R7
   \   0000004C   1C00000A           BEQ      ??LoadTankCleaningMediaList_3
    533          				GiveConfigWarning(PROName,errorLine);
   \   00000050   3C108DE2           ADD      R1,SP,#+60
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   120000EA           B        ??LoadTankCleaningMediaList_3
    534          			}
    535          		} else {
    536          			key = FindConfigKey(inputKeyWord);
   \                     ??LoadTankCleaningMediaList_2:
   \   00000078   20108DE2           ADD      R1,SP,#+32
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000084   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000088   0060A0E1           MOV      R6,R0
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   04008DE2           ADD      R0,SP,#+4
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
    537          
    538          			// Parse next tank cleaning media chunk
    539          			if (key == TWM_CLEANING_MEDIA) {
   \   0000009C   5E00A0E3           MOV      R0,#+94
   \   000000A0   AC0D80E3           ORR      R0,R0,#0x2B00
   \   000000A4   000056E1           CMP      R6,R0
   \   000000A8   0500001A           BNE      ??LoadTankCleaningMediaList_3
    540          				LoadTankCleaningMediaConfigString(configString);
   \   000000AC   0510A0E1           MOV      R1,R5
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       ??LoadTankCleaningMediaConfigString
    541          				PROTank::HasTankWashingMachines = true;
   \   000000B8   ........           LDR      R0,??Subroutine28_0+0x4  ;; ??HasTankWashingMachines
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   0010C0E5           STRB     R1,[R0, #+0]
    542          			}
    543          		}
    544          	}
   \                     ??LoadTankCleaningMediaList_3:
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   20008DE2           ADD      R0,SP,#+32
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    545          	while (( errorLine != EOF )&& ( key != TWM_END_CLEANING_MEDIA_LIST ));
   \   000000D4   00009DE5           LDR      R0,[SP, #+0]
   \   000000D8   070050E1           CMP      R0,R7
   \   000000DC   5D00A013           MOVNE    R0,#+93
   \   000000E0   AC0D8013           ORRNE    R0,R0,#0x2B00
   \   000000E4   00005611           CMPNE    R6,R0
   \   000000E8   CEFFFF1A           BNE      ??LoadTankCleaningMediaList_1
    546          
    547          	return success;
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   3C008DE2           ADD      R0,SP,#+60
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   58D08DE2           ADD      SP,SP,#+88
   \   00000100   F040BDE8           POP      {R4-R7,LR}
   \   00000104                      REQUIRE ?Subroutine28
   \   00000104                      ;; // Fall through to label ?Subroutine28
    548          
    549          }
    550          
    551          

   \                                 In segment CODE, align 4, keep-with-next
    552          void TankWashingAPI::CalculateExpenditures(TankWashingMachineRunCollection& twmRunCollection, TankWashingMachineCollection& twmCollection, double currentUnixTime, double &WaterConsumption, double &EnergyConsumption, double &FuelConsumption, double &Flow)
    553          {
   \                     ??CalculateExpenditures:
   \   00000000   08002DE9           PUSH     {R3}
   \   00000004   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000008   74D04DE2           SUB      SP,SP,#+116
   \   0000000C   0260A0E1           MOV      R6,R2
    554          	TankWashingCalcResources res;
    555          
    556          	// Loop over tank washing machines, and calculate info for each machine's current run. Summarize them later
    557          	vector<TankWashingMachine*> twmVector;
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
    558          	twmCollection.GetTWMObjects(twmVector);
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   ........           _BLF     ??GetTWMObjects,??GetTWMObjects??rA
    559          
    560          	vector<TankWashingMachine*>::iterator twmIter = twmVector.begin();
   \   00000024   00909DE5           LDR      R9,[SP, #+0]
    561          
    562          	double totalConsumedVolume 	= 0.0;
   \   00000028   30008DE2           ADD      R0,SP,#+48
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0030A0E3           MOV      R3,#+0
   \   00000034   0C0080E8           STM      R0,{R2,R3}
    563          	double totalEnergyCost 		= 0.0;
   \   00000038   38008DE2           ADD      R0,SP,#+56
   \   0000003C   0C0080E8           STM      R0,{R2,R3}
    564          	double totalMoneyCost 		= 0.0;
    565          	double totalFlow			= 0.0;
    566          
    567              PROWaterHeater* pWaterHeater = NULL;
    568              for (unsigned i=0; i<PROWaterHeater::AllObjVector.size(); i++)
   \   00000040   80029FE5           LDR      R0,??CalculateExpenditures_2  ;; ??AllObjVector
   \   00000044   02A0A0E1           MOV      R10,R2
   \   00000048   02B0A0E1           MOV      R11,R2
   \   0000004C   0240A0E1           MOV      R4,R2
   \   00000050   0250A0E1           MOV      R5,R2
   \   00000054   0210A0E1           MOV      R1,R2
   \   00000058   0160A0E1           MOV      R6,R1
   \   0000005C   080000EA           B        ??CalculateExpenditures_3
    569              {
    570                  PROWaterHeater *pTmp = (PROWaterHeater*) PROWaterHeater::AllObjVector[i];
   \                     ??CalculateExpenditures_4:
   \   00000060   012192E7           LDR      R2,[R2, +R1, LSL #+2]
    571                  if (pTmp->HasPressure && pTmp->HasInputTemperature && pTmp->HasOutputTemperature)
    572                  {
    573                      pWaterHeater = pTmp;
    574                  }
    575              }
   \   00000064   011081E2           ADD      R1,R1,#+1
   \   00000068   5C31D2E5           LDRB     R3,[R2, #+348]
   \   0000006C   000053E3           CMP      R3,#+0
   \   00000070   7031D215           LDRBNE   R3,[R2, #+368]
   \   00000074   00005313           CMPNE    R3,#+0
   \   00000078   7831D215           LDRBNE   R3,[R2, #+376]
   \   0000007C   00005313           CMPNE    R3,#+0
   \   00000080   0260A011           MOVNE    R6,R2
   \                     ??CalculateExpenditures_3:
   \   00000084   002090E5           LDR      R2,[R0, #+0]
   \   00000088   043090E5           LDR      R3,[R0, #+4]
   \   0000008C   023043E0           SUB      R3,R3,R2
   \   00000090   230151E1           CMP      R1,R3, LSR #+2
   \   00000094   F1FFFF3A           BCC      ??CalculateExpenditures_4
    576          
    577          
    578              while(pWaterHeater != NULL &&  twmIter != twmVector.end())
   \   00000098   000056E3           CMP      R6,#+0
   \   0000009C   7100000A           BEQ      ??CalculateExpenditures_5
   \   000000A0   6D0000EA           B        ??CalculateExpenditures_6
    579          	{
    580          		TankWashingMachine* pTwm = *twmIter;
   \                     ??CalculateExpenditures_7:
   \   000000A4   007099E5           LDR      R7,[R9, #+0]
    581          		PROTankWashingMachine *TWMptr = (PROTankWashingMachine *)PRogramObjectBase::FindObject(pTwm->IDNumber);
   \   000000A8   580097E5           LDR      R0,[R7, #+88]
   \   000000AC   ........           _BLF     ??FindObject,??FindObject??rA
   \   000000B0   40008DE5           STR      R0,[SP, #+64]
    582          		//pTwm->NumberOfNozzles = 1;
    583          		//EHSMArk fix database
    584          		TankWashingMachineRun* pTwmRun = twmRunCollection.GetTWMRun(pTwm->IDNumber);
   \   000000B4   581097E5           LDR      R1,[R7, #+88]
   \   000000B8   78009DE5           LDR      R0,[SP, #+120]
   \   000000BC   ........           _BLF     ??GetTWMRun,??GetTWMRun??rA
    585          
    586          		// Get basic parameters based on the machine's model/type and nozzle size:
    587          		TankWashingMachineWaterUseParams* pWaterUseParams = res.FindParameters(pTwm->MachineTypeId, pTwm->NozzleDiameter_mm);
   \   000000C0   702097E5           LDR      R2,[R7, #+112]
   \   000000C4   5C1097E5           LDR      R1,[R7, #+92]
   \   000000C8   0080A0E1           MOV      R8,R0
   \   000000CC   0C008DE2           ADD      R0,SP,#+12
   \   000000D0   ........           _BLF     ??FindParameters,??FindParameters??rA
    588          
    589          		// Collect data needed for calculation from water heater and other places:
    590          		if (pWaterHeater != NULL && pTwmRun != NULL && pWaterUseParams != NULL)
   \   000000D4   000058E3           CMP      R8,#+0
   \   000000D8   00005013           CMPNE    R0,#+0
   \   000000DC   5D00000A           BEQ      ??CalculateExpenditures_8
    591          		{
    592          			TankWashingCalcParams calcParams;
    593          			calcParams.waterUseParams       = pWaterUseParams;
   \   000000E0   44008DE5           STR      R0,[SP, #+68]
    594                      calcParams.waterPressure_bar    = pWaterHeater->PressureValue*MH2O_TO_BAR; //We use SI units so must convert to Bar.;
   \   000000E4   48008DE2           ADD      R0,SP,#+72
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   600196E5           LDR      R0,[R6, #+352]
   \   000000F0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000F4   0020A0E1           MOV      R2,R0
   \   000000F8   CC019FE5           LDR      R0,??CalculateExpenditures_2+0x4  ;; 0xffffffffda554b8c
   \   000000FC   0130A0E1           MOV      R3,R1
   \   00000100   C8119FE5           LDR      R1,??CalculateExpenditures_2+0x8  ;; 0x3fb91ae2
   \   00000104   ........           _BLF     __dMul,??__dMul??rA
   \   00000108   0400BDE8           POP      {R2}
   \   0000010C   030082E8           STM      R2,{R0,R1}
    595                      calcParams.numberOfNozzles      = pTwm->NumberOfNozzles;
   \   00000110   741097E5           LDR      R1,[R7, #+116]
    596                      calcParams.waterTemp1_c         = pWaterHeater->InputTemperatureValue;
   \   00000114   54708DE2           ADD      R7,SP,#+84
   \   00000118   50108DE5           STR      R1,[SP, #+80]
   \   0000011C   740196E5           LDR      R0,[R6, #+372]
   \   00000120   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000124   030087E8           STM      R7,{R0,R1}
    597          			calcParams.waterTemp2_c         = pWaterHeater->OutputTemperatureValue;
   \   00000128   7C0196E5           LDR      R0,[R6, #+380]
   \   0000012C   5C708DE2           ADD      R7,SP,#+92
   \   00000130   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000134   030087E8           STM      R7,{R0,R1}
    598          			calcParams.HeatCapacity 		= WATER_HEAT_CAPACITY;
   \   00000138   94019FE5           LDR      R0,??CalculateExpenditures_2+0xC  ;; 0xffffffffaaaaaaab
   \   0000013C   94119FE5           LDR      R1,??CalculateExpenditures_2+0x10  ;; 0x3ff2aaaa
   \   00000140   64208DE2           ADD      R2,SP,#+100
   \   00000144   030082E8           STM      R2,{R0,R1}
    599          			calcParams.MDO_kWh_per_ton      = pWaterHeater->MDO_kWh_per_ton*pWaterHeater->MDO_Efficiency/100.0;
   \   00000148   841196E5           LDR      R1,[R6, #+388]
   \   0000014C   800196E5           LDR      R0,[R6, #+384]
   \   00000150   6C708DE2           ADD      R7,SP,#+108
   \   00000154   ........           _BLF     __fMul,??__fMul??rA
   \   00000158   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   4034A0E3           MOV      R3,#+1073741824
   \   00000164   593883E3           ORR      R3,R3,#0x590000
   \   00000168   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000016C   030087E8           STM      R7,{R0,R1}
    600          			double WaterConsumption    		= 0.0;
   \   00000170   10208DE2           ADD      R2,SP,#+16
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   0010A0E3           MOV      R1,#+0
   \   0000017C   030082E8           STM      R2,{R0,R1}
    601          			double EnergyConsumption   		= 0.0;
   \   00000180   18208DE2           ADD      R2,SP,#+24
   \   00000184   030082E8           STM      R2,{R0,R1}
    602          			double FuelConsumption    		= 0.0;
   \   00000188   20208DE2           ADD      R2,SP,#+32
   \   0000018C   030082E8           STM      R2,{R0,R1}
    603          			double Flow  					= 0.0;
   \   00000190   28208DE2           ADD      R2,SP,#+40
   \   00000194   030082E8           STM      R2,{R0,R1}
    604          
    605          			if (pTwmRun->Status != twmr_idle)
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   2C00000A           BEQ      ??CalculateExpenditures_8
    606          			{
    607          				double elapsedTime = TWMptr->RunningTime;//  pTwmRun->GetElapsedTime(currentUnixTime);
    608          				CalculateExpenditures(calcParams, elapsedTime, WaterConsumption, EnergyConsumption, FuelConsumption,Flow);
   \   000001A4   28008DE2           ADD      R0,SP,#+40
   \   000001A8   01002DE9           PUSH     {R0}
   \   000001AC   24008DE2           ADD      R0,SP,#+36
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   20008DE2           ADD      R0,SP,#+32
   \   000001B8   01002DE9           PUSH     {R0}
   \   000001BC   1C008DE2           ADD      R0,SP,#+28
   \   000001C0   01002DE9           PUSH     {R0}
   \   000001C4   50009DE5           LDR      R0,[SP, #+80]
   \   000001C8   600190E5           LDR      R0,[R0, #+352]
   \   000001CC   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000001D0   0020A0E1           MOV      R2,R0
   \   000001D4   84009DE5           LDR      R0,[SP, #+132]
   \   000001D8   0130A0E1           MOV      R3,R1
   \   000001DC   54108DE2           ADD      R1,SP,#+84
   \   000001E0   ........           BL       ??CalculateExpenditures_1
    609          
    610          				totalConsumedVolume += WaterConsumption;
   \   000001E4   40008DE2           ADD      R0,SP,#+64
   \   000001E8   030090E8           LDM      R0,{R0,R1}
   \   000001EC   20208DE2           ADD      R2,SP,#+32
   \   000001F0   0C0092E8           LDM      R2,{R2,R3}
   \   000001F4   40708DE2           ADD      R7,SP,#+64
   \   000001F8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000001FC   030087E8           STM      R7,{R0,R1}
    611          				totalEnergyCost     += EnergyConsumption;
   \   00000200   48008DE2           ADD      R0,SP,#+72
   \   00000204   030090E8           LDM      R0,{R0,R1}
   \   00000208   28208DE2           ADD      R2,SP,#+40
   \   0000020C   0C0092E8           LDM      R2,{R2,R3}
   \   00000210   48708DE2           ADD      R7,SP,#+72
   \   00000214   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000218   030087E8           STM      R7,{R0,R1}
    612          				totalMoneyCost      += FuelConsumption;
   \   0000021C   30008DE2           ADD      R0,SP,#+48
   \   00000220   030090E8           LDM      R0,{R0,R1}
   \   00000224   0A20A0E1           MOV      R2,R10
   \   00000228   0B30A0E1           MOV      R3,R11
   \   0000022C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000230   00A0A0E1           MOV      R10,R0
   \   00000234   01B0A0E1           MOV      R11,R1
    613          				totalFlow  		    += Flow;
   \   00000238   38008DE2           ADD      R0,SP,#+56
   \   0000023C   030090E8           LDM      R0,{R0,R1}
   \   00000240   0420A0E1           MOV      R2,R4
   \   00000244   0530A0E1           MOV      R3,R5
   \   00000248   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000024C   0040A0E1           MOV      R4,R0
   \   00000250   0150A0E1           MOV      R5,R1
   \   00000254   10D08DE2           ADD      SP,SP,#+16
    614          			}
    615          		}
    616          
    617          		++twmIter;
   \                     ??CalculateExpenditures_8:
   \   00000258   049089E2           ADD      R9,R9,#+4
    618          	}
   \                     ??CalculateExpenditures_6:
   \   0000025C   04009DE5           LDR      R0,[SP, #+4]
   \   00000260   000059E1           CMP      R9,R0
   \   00000264   8EFFFF1A           BNE      ??CalculateExpenditures_7
    619          
    620          	WaterConsumption 	= totalConsumedVolume;
   \                     ??CalculateExpenditures_5:
   \   00000268   A8009DE5           LDR      R0,[SP, #+168]
   \   0000026C   30108DE2           ADD      R1,SP,#+48
   \   00000270   0C0091E8           LDM      R1,{R2,R3}
    621          	EnergyConsumption 	= totalEnergyCost;
   \   00000274   38108DE2           ADD      R1,SP,#+56
   \   00000278   0C0080E8           STM      R0,{R2,R3}
   \   0000027C   0C0091E8           LDM      R1,{R2,R3}
   \   00000280   AC009DE5           LDR      R0,[SP, #+172]
   \   00000284   0C0080E8           STM      R0,{R2,R3}
    622          	FuelConsumption 	= totalMoneyCost;
   \   00000288   B0009DE5           LDR      R0,[SP, #+176]
   \   0000028C   000C80E8           STM      R0,{R10,R11}
    623          	Flow				= totalFlow;
   \   00000290   B4009DE5           LDR      R0,[SP, #+180]
   \   00000294   300080E8           STM      R0,{R4,R5}
    624          }
   \   00000298   00009DE5           LDR      R0,[SP, #+0]
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   0200000A           BEQ      ??CalculateExpenditures_9
   \   000002A4   0010A0E1           MOV      R1,R0
   \   000002A8   04108DE5           STR      R1,[SP, #+4]
   \   000002AC   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??CalculateExpenditures_9:
   \   000002B0   0D00A0E1           MOV      R0,SP
   \   000002B4   ........           _BLF     ??_Zero,??_Zero??rA
   \   000002B8   7CD08DE2           ADD      SP,SP,#+124
   \   000002BC   F04FBDE8           POP      {R4-R11,LR}
   \   000002C0   04D08DE2           ADD      SP,SP,#+4
   \   000002C4   1EFF2FE1           BX       LR               ;; return
   \                     ??CalculateExpenditures_2:
   \   000002C8   ........           DC32     ??AllObjVector
   \   000002CC   8C4B55DA           DC32     0xffffffffda554b8c
   \   000002D0   E21AB93F           DC32     0x3fb91ae2
   \   000002D4   ABAAAAAA           DC32     0xffffffffaaaaaaab
   \   000002D8   AAAAF23F           DC32     0x3ff2aaaa
    625          
    626          
    627          

   \                                 In segment CODE, align 4, keep-with-next
    628          void TankWashingAPI::CalculateExpenditures(TankWashingCalcParams &calcParams, double runningTimeSecs, double &WaterConsumption, double &EnergyConsumption, double &FuelConsumption, double &Flow)
    629          {
   \                     ??CalculateExpenditures_1:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   40909DE5           LDR      R9,[SP, #+64]
   \   00000008   0180A0E1           MOV      R8,R1
    630          	// for making the code match the equation, copy the formula terms into locals:
    631          	double a        	= calcParams.waterUseParams->A_value;
    632          	double k        	= calcParams.waterUseParams->K_value;
    633          	double T1       	= calcParams.waterTemp1_c;
    634          	double T2       	= calcParams.waterTemp2_c;
    635          	double HeatCapacity	= calcParams.HeatCapacity;
   \   0000000C   200098E5           LDR      R0,[R8, #+32]
   \   00000010   241098E5           LDR      R1,[R8, #+36]
   \   00000014   10A098E5           LDR      R10,[R8, #+16]
   \   00000018   14B098E5           LDR      R11,[R8, #+20]
   \   0000001C   184098E5           LDR      R4,[R8, #+24]
   \   00000020   1C5098E5           LDR      R5,[R8, #+28]
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   030082E8           STM      R2,{R0,R1}
    636          	double hours    	= runningTimeSecs / 3600.0;
    637          
    638          	double Q        	= a + k * calcParams.waterPressure_bar;		// Q = water flow at nozzle
    639          	Flow     			= Q * calcParams.numberOfNozzles;
   \   0000002C   006098E5           LDR      R6,[R8, #+0]
   \   00000030   042098E5           LDR      R2,[R8, #+4]
   \   00000034   100096E5           LDR      R0,[R6, #+16]
   \   00000038   141096E5           LDR      R1,[R6, #+20]
   \   0000003C   083098E5           LDR      R3,[R8, #+8]
   \   00000040   ........           _BLF     __dMul,??__dMul??rA
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   080096E5           LDR      R0,[R6, #+8]
   \   0000004C   0130A0E1           MOV      R3,R1
   \   00000050   0C1096E5           LDR      R1,[R6, #+12]
   \   00000054   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   0C0098E5           LDR      R0,[R8, #+12]
   \   00000060   0170A0E1           MOV      R7,R1
   \   00000064   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0730A0E1           MOV      R3,R7
   \   00000070   ........           _BLF     __dMul,??__dMul??rA
   \   00000074   0060A0E1           MOV      R6,R0
   \   00000078   0170A0E1           MOV      R7,R1
   \   0000007C   C00089E8           STM      R9,{R6,R7}
    640          	WaterConsumption 	= Flow * hours;
   \   00000080   88309FE5           LDR      R3,??CalculateExpenditures_10  ;; 0x40ac2000
   \   00000084   08008DE2           ADD      R0,SP,#+8
   \   00000088   030090E8           LDM      R0,{R0,R1}
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000094   0620A0E1           MOV      R2,R6
   \   00000098   0730A0E1           MOV      R3,R7
   \   0000009C   ........           _BLF     __dMul,??__dMul??rA
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   34009DE5           LDR      R0,[SP, #+52]
   \   000000A8   0170A0E1           MOV      R7,R1
   \   000000AC   C00080E8           STM      R0,{R6,R7}
    641          
    642          	// Set output variables
    643          	EnergyConsumption	= HeatCapacity * (T2 - T1) * WaterConsumption;
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   0510A0E1           MOV      R1,R5
   \   000000B8   0A20A0E1           MOV      R2,R10
   \   000000BC   0B30A0E1           MOV      R3,R11
   \   000000C0   ........           _BLF     __dSub,??__dSub??rA
   \   000000C4   0020A0E1           MOV      R2,R0
   \   000000C8   0130A0E1           MOV      R3,R1
   \   000000CC   0D00A0E1           MOV      R0,SP
   \   000000D0   030090E8           LDM      R0,{R0,R1}
   \   000000D4   ........           _BLF     __dMul,??__dMul??rA
   \   000000D8   0020A0E1           MOV      R2,R0
   \   000000DC   0130A0E1           MOV      R3,R1
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   ........           _BLF     __dMul,??__dMul??rA
   \   000000EC   38209DE5           LDR      R2,[SP, #+56]
   \   000000F0   030082E8           STM      R2,{R0,R1}
    644          
    645          	FuelConsumption 	= EnergyConsumption / calcParams.MDO_kWh_per_ton;
   \   000000F4   3C609DE5           LDR      R6,[SP, #+60]
   \   000000F8   282098E5           LDR      R2,[R8, #+40]
   \   000000FC   2C3098E5           LDR      R3,[R8, #+44]
   \   00000100   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000104   030086E8           STM      R6,{R0,R1}
    646          }
   \   00000108   FF4FBDE8           POP      {R0-R11,LR}
   \   0000010C   1EFF2FE1           BX       LR               ;; return
   \                     ??CalculateExpenditures_10:
   \   00000110   0020AC40           DC32     0x40ac2000
    647          
    648          
    649          

   \                                 In segment CODE, align 4, keep-with-next
    650          void TankWashingAPI::GetTankWashingMachineIDsByTank(int tankId, vector<int> *twmIds)
    651          {
   \                     ??GetTankWashingMachineIDsByTank:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0240B0E1           MOVS     R4,R2
    652          	if (twmIds)
   \   00000008   1100000A           BEQ      ??GetTankWashingMachineIDsByTank_1
    653          	{
    654          		tankId_to_TWMId_Cache_t::iterator iter = tankId_to_TWMId_Cache.find(tankId);
   \   0000000C   ........           LDR      R5,??DataTable5  ;; ??tankId_to_TWMId_Cache
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??find,??find??rA
    655          
    656          		if (iter != tankId_to_TWMId_Cache.end())
   \   00000018   050050E1           CMP      R0,R5
   \   0000001C   0C00000A           BEQ      ??GetTankWashingMachineIDsByTank_1
    657          		{
    658          			// copy twm id's belonging to this tank to the output vector:
    659          
    660          			vector<int>::iterator twmIdStart = (*iter).second.begin();
    661          			vector<int>::iterator twmIdEnd = (*iter).second.end();
    662          
    663          			twmIds->assign(twmIdStart, twmIdEnd);
   \   00000020   185090E5           LDR      R5,[R0, #+24]
   \   00000024   146090E5           LDR      R6,[R0, #+20]
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   040084E5           STR      R0,[R4, #+4]
   \   00000030   001094E5           LDR      R1,[R4, #+0]
   \   00000034   2501A0E1           LSR      R0,R5,#+2
   \   00000038   262140E0           SUB      R2,R0,R6, LSR #+2
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
    664          		}
    665          	}
    666          }
   \                     ??GetTankWashingMachineIDsByTank_1:
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
    667          
    668          
    669          

   \                                 In segment CODE, align 4, keep-with-next
    670          void TankWashingAPI::GetWholeTankInfo(int tankId, TankWashingMachineRun_Statuses& aggregateStatus)
    671          {
    672          #ifdef ANWIN
    673          	vector<int> twmIds;
    674          	GetTankWashingMachineIDsByTank(tankId, &twmIds);
    675          
    676          	aggregateStatus = twmr_idle;
    677          
    678          	vector<int>::iterator iter = twmIds.begin();
    679          
    680          	while (iter != twmIds.end())
    681          	{
    682          		int twmId = *iter;
    683          
    684          		twmRunCache_t::iterator twmRunIter = twmRunCache.find(twmId);
    685          
    686          		if (twmRunIter != twmRunCache.end())
    687          		{
    688          			int twmStat = (int) ((*twmRunIter).second.Status);
    689          
    690          			if (aggregateStatus < twmStat)
    691          			{
    692          				aggregateStatus = (TankWashingMachineRun_Statuses) twmStat;
    693          			}
    694          		}
    695          
    696          		++iter;
    697          	}
    698          #endif
    699          }
   \                     ??GetWholeTankInfo:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    700          
    701          

   \                                 In segment CODE, align 4, keep-with-next
    702          long TankWashingAPI::GetTimeOfLastTankWashingRunUpdate()
    703          {
    704          	return lastCacheUpdateTime;
   \                     ??GetTimeOfLastTankWashingRunUpdate:
   \   00000000   04009FE5           LDR      R0,??GetTimeOfLastTankWashingRunUpdate_1  ;; ??lastCacheUpdateTime
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??GetTimeOfLastTankWashingRunUpdate_1:
   \   0000000C   ........           DC32     ??lastCacheUpdateTime
    705          }
    706          
    707          

   \                                 In segment CODE, align 4, keep-with-next
    708          bool TankWashingAPI::LoadTankCleaningMediaConfigString(TSNConfigString& ConfigString)
    709          {
   \                     ??LoadTankCleaningMediaConfigString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   CCD04DE2           SUB      SP,SP,#+204
   \   00000008   0140A0E1           MOV      R4,R1
    710          	bool NoError = true;
    711          	int ErrorLine=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    712          	int Key;
    713          	AnsiString PROName = "Tank Cleaning Media";
   \   00000014   A0119FE5           LDR      R1,??LoadTankCleaningMediaConfigString_1  ;; `?<Constant "Tank Cleaning Media">`
   \   00000018   5C008DE2           ADD      R0,SP,#+92
   \   0000001C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
    714          
    715          	// vars used in parsing loop
    716          	AnsiString cleaningMediaName;
   \   00000020   78008DE2           ADD      R0,SP,#+120
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA
    717          	TankWashingCleaningMedia cleaningMedia;
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   ........           _BLF     ??TankWashingCleaningMedia,??TankWashingCleaningMedia??rA
    718          	cleaningMedia.Id = -1; // Initialize. The database will update this number automatically
   \   00000030   0010E0E3           MVN      R1,#+0
   \   00000034   04108DE5           STR      R1,[SP, #+4]
   \   00000038   0160A0E1           MOV      R6,R1
    719          
    720          	do {
    721          		AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadTankCleaningMediaConfigString_2:
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   40108DE2           ADD      R1,SP,#+64
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     ??NextWord,??NextWord??rA
    722          
    723          		if ( ErrorLine ) {
   \   00000050   00009DE5           LDR      R0,[SP, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0A00000A           BEQ      ??LoadTankCleaningMediaConfigString_3
    724          			if ( ErrorLine != EOF ) {
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   3C00000A           BEQ      ??LoadTankCleaningMediaConfigString_4
    725          				GiveConfigWarning(PROName,ErrorLine);
   \   00000064   5C108DE2           ADD      R1,SP,#+92
   \   00000068   24008DE2           ADD      R0,SP,#+36
   \   0000006C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   24008DE2           ADD      R0,SP,#+36
   \   00000084   320000EA           B        ??LoadTankCleaningMediaConfigString_5
    726          			}
    727          		} else {
    728          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadTankCleaningMediaConfigString_3:
   \   00000088   40108DE2           ADD      R1,SP,#+64
   \   0000008C   24008DE2           ADD      R0,SP,#+36
   \   00000090   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000094   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000098   0050A0E1           MOV      R5,R0
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   24008DE2           ADD      R0,SP,#+36
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    729          
    730          			switch (Key) {
   \   000000AC   FC10A0E3           MOV      R1,#+252
   \   000000B0   A81D81E3           ORR      R1,R1,#0x2A00
   \   000000B4   010055E1           CMP      R5,R1
   \   000000B8   0300000A           BEQ      ??LoadTankCleaningMediaConfigString_6
   \   000000BC   631081E2           ADD      R1,R1,#+99
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   2300000A           BEQ      ??LoadTankCleaningMediaConfigString_4
   \   000000C8   170000EA           B        ??LoadTankCleaningMediaConfigString_7
    731          			case TWM_IDENTIFIER:
    732          				cleaningMediaName = ConfigString.GetRemainingLine(ErrorLine);
   \                     ??LoadTankCleaningMediaConfigString_6:
   \   000000CC   0D20A0E1           MOV      R2,SP
   \   000000D0   94108DE2           ADD      R1,SP,#+148
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           _BLF     ??GetRemainingLine,??GetRemainingLine??rA
   \   000000DC   ........           LDR      R0,??DataTable4  ;; ??npos
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   007090E5           LDR      R7,[R0, #+0]
   \   000000E8   94108DE2           ADD      R1,SP,#+148
   \   000000EC   0730A0E1           MOV      R3,R7
   \   000000F0   78008DE2           ADD      R0,SP,#+120
   \   000000F4   ........           _BLF     ??assign,??assign??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   94008DE2           ADD      R0,SP,#+148
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
    733          
    734          				if (!ErrorLine) {
   \   00000108   00009DE5           LDR      R0,[SP, #+0]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   1000001A           BNE      ??LoadTankCleaningMediaConfigString_4
    735          					cleaningMedia.Name = cleaningMediaName;
   \   00000114   0730A0E1           MOV      R3,R7
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   78108DE2           ADD      R1,SP,#+120
   \   00000120   08008DE2           ADD      R0,SP,#+8
   \   00000124   ........           _BLF     ??assign,??assign??rA
   \   00000128   0A0000EA           B        ??LoadTankCleaningMediaConfigString_4
    736          				}
    737          				break;
    738          			case TWM_END_CLEANING_MEDIA:
    739          				break;
    740          			default:
    741          				ErrorLine = 1;
   \                     ??LoadTankCleaningMediaConfigString_7:
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   00108DE5           STR      R1,[SP, #+0]
    742          				GiveConfigWarning(PROName,ErrorLine);
   \   00000134   5C108DE2           ADD      R1,SP,#+92
   \   00000138   B0008DE2           ADD      R0,SP,#+176
   \   0000013C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000140   00109DE5           LDR      R1,[SP, #+0]
   \   00000144   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   B0008DE2           ADD      R0,SP,#+176
   \                     ??LoadTankCleaningMediaConfigString_5:
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    743          				break;
    744          			}
    745          		}
    746          	}
   \                     ??LoadTankCleaningMediaConfigString_4:
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   40008DE2           ADD      R0,SP,#+64
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
    747          	while (( ErrorLine != EOF )&& ( Key != TWM_END_CLEANING_MEDIA ));
   \   00000168   00009DE5           LDR      R0,[SP, #+0]
   \   0000016C   060050E1           CMP      R0,R6
   \   00000170   5F00A013           MOVNE    R0,#+95
   \   00000174   AC0D8013           ORRNE    R0,R0,#0x2B00
   \   00000178   00005511           CMPNE    R5,R0
   \   0000017C   AEFFFF1A           BNE      ??LoadTankCleaningMediaConfigString_2
    748          
    749          	if (NoError) {
    750          		NoError = InitCleaningMediaInDatabase(cleaningMedia);
    751          	}
    752          
    753          	return(NoError);
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   08008DE2           ADD      R0,SP,#+8
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   78008DE2           ADD      R0,SP,#+120
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   5C008DE2           ADD      R0,SP,#+92
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   CCD08DE2           ADD      SP,SP,#+204
   \   000001B4   F040BDE8           POP      {R4-R7,LR}
   \   000001B8   ........           B        ?Subroutine27
   \                     ??LoadTankCleaningMediaConfigString_1:
   \   000001BC   ........           DC32     `?<Constant "Tank Cleaning Media">`
    754          }
    755          
    756          
    757          

   \                                 In segment CODE, align 4, keep-with-next
    758          bool TankWashingAPI::InitCleaningMediaInDatabase(TankWashingCleaningMedia &twcm)
    759          {
    760          	bool success = false;
    761          
    762          #ifdef ANWIN
    763          	// Ensure all required members of this object have been initialized:
    764          	if (twcm.Name.Length() == 0)
    765          	{
    766          		success = false;
    767          		lastErrorMessage = AnsiString("Could not Init cleaning media in DB because not all required fields were set.");
    768          	}
    769          	else
    770          	{
    771          		success = true;
    772          	}
    773          
    774          	// Finally do the actual DB update of the tank washing machine based on the parsed configuration:
    775          	if (success) {
    776          		success = pUnitOfWork->TWCleaningMedia_Repository->CreateOrUpdateFromConfiguration(twcm);
    777          
    778          		if (!success) {
    779          			lastErrorMessage = AnsiString("General failure to init tank cleaning media in database : ");
    780          			twcm.ToString(lastErrorMessage);
    781          		}
    782          	}
    783          
    784          #endif
    785          	return success;
   \                     ??InitCleaningMediaInDatabase:
   \   00000000   ........           B        ?Subroutine27
    786          }
    787          
    788          
    789          
    790          
    791          
    792          /// Same as Start Washing run, but can be called multiple times without problem
    793          /// Static function

   \                                 In segment CODE, align 4, keep-with-next
    794          bool TankWashingAPI::StartWashingRunIfIdle(int twmId, int& twmRunId)
    795          {
    796          	bool returnValue = false;
    797          #ifdef ANWIN
    798          	TankWashingAPI::EnsureCacheHasTWMRunObject(twmId);
    799          	twmRunId = 0;
    800          
    801          	if (TankWashingAPI::twmRunCache.count(twmId) >= 1) {
    802          		if (TankWashingAPI::twmRunCache[twmId].Status == twmr_idle)
    803          		{
    804          			TankWashingAPI twmAPI;
    805          			returnValue = twmAPI.StartWashingRun(twmId, twmRunId);
    806          		}
    807          	}
    808          #else
    809              twmRunId = 0;
   \                     ??StartWashingRunIfIdle:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   000081E5           STR      R0,[R1, #+0]
    810          #endif
    811          
    812          	return returnValue;
   \   00000008   1EFF2FE1           BX       LR               ;; return
    813          }
    814          
    815          
    816          /// Static function

   \                                 In segment CODE, align 4, keep-with-next
    817          bool TankWashingAPI::FinishWashingRunIfRunningOrError(int twmId, bool force)
    818          {
    819          	bool returnValue = false;
    820          #ifdef ANWIN
    821          	TankWashingAPI::EnsureCacheHasTWMRunObject(twmId);
    822          
    823          	if (TankWashingAPI::twmRunCache.count(twmId) >= 1) {
    824          		int Status =  (int)TankWashingAPI::twmRunCache[twmId].Status;
    825          		if (TankWashingAPI::twmRunCache[twmId].Status == twmr_running ||
    826          			TankWashingAPI::twmRunCache[twmId].Status == twmr_error ||
    827          			force == true)
    828          		{
    829          			TankWashingAPI twmAPI;
    830          			returnValue = twmAPI.FinishWashingRun(twmId, force);
    831          		}
    832          	}
    833          #endif
    834          	return returnValue;
   \                     ??FinishWashingRunIfRunningOrError:
   \   00000000   ........           B        ?Subroutine27
    835          }
    836          
    837          
    838          
    839          

   \                                 In segment CODE, align 4, keep-with-next
    840          void TankWashingAPI::EnsureCacheHasTWMRunObject(int twmId, bool forceUpdate)
    841          {
    842          #ifdef ANWIN
    843          	if (TankWashingAPI::twmRunCache.count(twmId) == 0 || forceUpdate)
    844          	{
    845          		// Add item to the cache:
    846          		UnitOfWork unitOfWork;
    847          		TankWashingMachineRun twmRun;
    848          		bool readSuccess = false;
    849          
    850          		readSuccess = unitOfWork.TWMRun_Repository->ReadLatestByWashingMachineId(twmId, twmRun);
    851          		if (readSuccess)
    852          		{
    853          			TankWashingAPI::twmRunCache[twmId] = twmRun;
    854          			lastCacheUpdateTime = time(NULL);
    855          		}
    856          	}
    857          #endif
    858          }
   \                     ??EnsureCacheHasTWMRunObject:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    859          
    860          
    861          

   \                                 In segment CODE, align 4, keep-with-next
    862          void TankWashingAPI::InitTWMMapping(int tankId, int twmId)
    863          {
   \                     ??InitTWMMapping:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    864          	 tankId_to_TWMId_Cache[tankId].push_back(twmId);
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   ........           LDR      R0,??DataTable5  ;; ??tankId_to_TWMId_Cache
   \   00000010   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    865          }
   \   0000001C   ........           B        ??Subroutine25_0
    866          
    867          
    868          
    869          /// Loops through the PROTankWashingMachine objects attached to a PROTank, and returns
    870          /// the aggregate (combined) status of washing in this tank.
    871          /// True means washing is in progress, false all TCMs in the tank are idle.
    872          ///

   \                                 In segment CODE, align 4, keep-with-next
    873          bool TankWashingAPI::GetPROTankWashingStatus(PROTank* pTank)
    874          {
   \                     ??GetPROTankWashingStatus:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
    875          	vector<PROTankWashingMachine*>::iterator it = pTank->TankWashingMachineVector.begin();
   \   00000004   1C4290E5           LDR      R4,[R0, #+540]
    876          	vector<PROTankWashingMachine*>::iterator end =  pTank->TankWashingMachineVector.end();
   \   00000008   205290E5           LDR      R5,[R0, #+544]
    877          
    878          	bool washRunning = false;
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   1A0000EA           B        ??GetPROTankWashingStatus_1
    879          
    880          	for (;it != end; it++)
    881          	{
    882          		float floatValue;
    883          		int index = 0;
    884          		int decPnt = 0;
   \                     ??GetPROTankWashingStatus_2:
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   04108DE5           STR      R1,[SP, #+4]
    885          		int unit = 0;
   \   0000001C   08108DE5           STR      R1,[SP, #+8]
    886          
    887          		PROTankWashingMachine* pTWM = *it;
   \   00000020   00C094E5           LDR      R12,[R4, #+0]
    888          		pTWM->GetValue(SVT_TWM_ON_OFF_STATUS, index, floatValue, decPnt, unit);
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   08008DE2           ADD      R0,SP,#+8
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   0C00A0E1           MOV      R0,R12
   \   00000038   A4C09CE5           LDR      R12,[R12, #+164]
   \   0000003C   08308DE2           ADD      R3,SP,#+8
   \   00000040   24C09CE5           LDR      R12,[R12, #+36]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   6110A0E3           MOV      R1,#+97
   \   0000004C   901D81E3           ORR      R1,R1,#0x2400
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   1CFF2FE1           BX       R12
    889          
    890          		if (floatValue > 0.5)
   \   00000058   08009DE5           LDR      R0,[SP, #+8]
    891          		{
    892          			washRunning = true;
    893          		}
    894          	}
   \   0000005C   044084E2           ADD      R4,R4,#+4
   \   00000060   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000064   0120A0E3           MOV      R2,#+1
   \   00000068   C035A0E3           MOV      R3,#+805306368
   \   0000006C   FE3683E3           ORR      R3,R3,#0xFE00000
   \   00000070   08D08DE2           ADD      SP,SP,#+8
   \   00000074   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0160A013           MOVNE    R6,#+1
   \                     ??GetPROTankWashingStatus_1:
   \   00000080   050054E1           CMP      R4,R5
   \   00000084   E2FFFF1A           BNE      ??GetPROTankWashingStatus_2
    895          
    896          	return washRunning;
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   7E40BDE8           POP      {R1-R6,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
    897          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TankWashingAPI is onl...">`:
   \   00000000   54616E6B5761       DC8 54H, 61H, 6EH, 6BH, 57H, 61H, 73H, 68H
   \              7368        
   \   00000008   696E67415049       DC8 69H, 6EH, 67H, 41H, 50H, 49H, 20H, 69H
   \              2069        
   \   00000010   73206F6E6C79       DC8 73H, 20H, 6FH, 6EH, 6CH, 79H, 20H, 69H
   \              2069        
   \   00000018   6D706C656D65       DC8 6DH, 70H, 6CH, 65H, 6DH, 65H, 6EH, 74H
   \              6E74        
   \   00000020   656420666F72       DC8 65H, 64H, 20H, 66H, 6FH, 72H, 20H, 41H
   \              2041        
   \   00000028   4E57696E2061       DC8 4EH, 57H, 69H, 6EH, 20H, 61H, 73H, 20H
   \              7320        
   \   00000030   6F6620796574       DC8 6FH, 66H, 20H, 79H, 65H, 74H, 0
   \              00          
   \   00000037   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank Cleaning Media List">`:
   \   00000000   54616E6B2043       DC8 "Tank Cleaning Media List"
   \              6C65616E696E
   \              67204D656469
   \              61204C697374
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank Cleaning Media">`:
   \   00000000   54616E6B2043       DC8 "Tank Cleaning Media"
   \              6C65616E696E
   \              67204D656469
   \              6100        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TankWashingAPI::delete ~TankWashingAPI(TankWashingAPI *)
   \                     `??delete ~TankWashingAPI`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TankWashingAPI_1`
   \   0000000C   ........           BL       `?~TankWashingAPI`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TankWashingAPI_1`:
   \   00000018   ........           B        ??Subroutine25_0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; ??tankId_to_TWMId_Cache
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TankWashingAPI &TankWashingAPI::new TankWashingAPI()
   \                     `??new TankWashingAPI`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2000A0E3           MOV      R0,#+32
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new TankWashingAPI_1`
   \   00000014   ........           BL       ??TankWashingAPI
   \                     `??new TankWashingAPI_1`:
   \   00000018   ........           B        ?Subroutine26

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??tankId_to_TWMId_Cache

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     TankWashingAPI::CalculateExpenditures(TankWashingCalcParams &, double, double &, double &, double &, double &)
                                       52
     TankWashingAPI::CalculateExpenditures(TankWashingMachineRunCollection &, TankWashingMachineCollection &, double, double &, double &, double &, double &)
                                      176
     TankWashingAPI::EnsureCacheHasTWMRunObject(int, bool)
                                        0
     TankWashingAPI::FinishWashingRun(int, bool)
                                        0
     TankWashingAPI::FinishWashingRunIfRunningOrError(int, bool)
                                        0
     TankWashingAPI::GetLastErrorMessage(AnsiString &)
                                       36
     TankWashingAPI::GetPROTankWashingStatus(PROTank *)
                                       36
     TankWashingAPI::GetTankWashingMachineIDsByTank(int, vector<int> *)
                                       16
     TankWashingAPI::GetTimeOfLastTankWashingRunUpdate()
                                        0
     TankWashingAPI::GetWholeTankInfo(int, TankWashingMachineRun_Statuses &)
                                        0
     TankWashingAPI::InitCleaningMediaInDatabase(TankWashingCleaningMedia &)
                                        0
     TankWashingAPI::InitTWMMapping(int, int)
                                        8
     TankWashingAPI::InitTWMinDatabase(TankWashingMachine &)
                                        0
     TankWashingAPI::LoadTankCleaningMediaConfigString(TSNConfigString &)
                                      224
     TankWashingAPI::LoadTankCleaningMediaList(TSNConfigString &)
                                      108
     TankWashingAPI::PrepareWashingRun(int, int, TankWashingMachineRun_Type, int, string &, int &)
                                        0
     TankWashingAPI::PrepareWholeTank(int, TankWashingMachineRun_Type, int, vector<int> &)
                                        0
     TankWashingAPI::SetError(int, int &)
                                        0
     TankWashingAPI::StartWashingRun(int, int &)
                                        0
     TankWashingAPI::StartWashingRunIfIdle(int, int &)
                                        0
     TankWashingAPI::TankWashingAPI()
                                       36
     TankWashingAPI::delete ~TankWashingAPI(TankWashingAPI *)
                                        8
     TankWashingAPI::new TankWashingAPI()
                                        4
     TankWashingAPI::~TankWashingAPI()
                                        4
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Erase(_Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr)
                                       16
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr, pair<int const, vector<int>> const &)
                                       28
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Lbound(int) const
                                        0
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::find(int)
                                       12
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::insert(pair<int const, vector<int>> const &)
                                       40
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                       20
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  12
     map<int, vector<int>>::operator[](int)
                                       32
     map<int, vector<int>>::~map()      8
     pair<int const, vector<int>>::~pair()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pair<int const, vector<int>>::~pair()
                                      32
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::insert(pair<int const, vector<int>> const &)
                                     208
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::find(int)
                                      48
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Erase(_Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr)
                                      76
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Insert(bool, _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Nodeptr, pair<int const, vector<int>> const &)
                                     128
     _Tree<_Tmap_traits<int, vector<int>, less<int>, allocator<pair<int const, vector<int>>>, false>>::_Lbound(int) const
                                      40
     map<int, vector<int>>::~map()    32
     map<int, vector<int>>::operator[](int)
                                      68
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                      36
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                     224
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      64
     TankWashingAPI::tankId_to_TWMId_Cache
                                      24
     TankWashingAPI::lastCacheUpdateTime
                                       4
     TankWashingAPI::TankWashingAPI()
                                      92
     ?Subroutine25                    16
     TankWashingAPI::~TankWashingAPI()
                                      20
     ?Subroutine26                     8
     TankWashingAPI::PrepareWashingRun(int, int, TankWashingMachineRun_Type, int, string &, int &)
                                       4
     ?Subroutine27                     8
     TankWashingAPI::PrepareWholeTank(int, TankWashingMachineRun_Type, int, vector<int> &)
                                       0
     TankWashingAPI::StartWashingRun(int, int &)
                                       4
     TankWashingAPI::FinishWashingRun(int, bool)
                                       4
     TankWashingAPI::SetError(int, int &)
                                       4
     TankWashingAPI::GetLastErrorMessage(AnsiString &)
                                      64
     TankWashingAPI::InitTWMinDatabase(TankWashingMachine &)
                                       4
     ?Subroutine28                    16
     TankWashingAPI::LoadTankCleaningMediaList(TSNConfigString &)
                                     260
     TankWashingAPI::CalculateExpenditures(TankWashingMachineRunCollection &, TankWashingMachineCollection &, double, double &, double &, double &, double &)
                                     732
     TankWashingAPI::CalculateExpenditures(TankWashingCalcParams &, double, double &, double &, double &, double &)
                                     276
     TankWashingAPI::GetTankWashingMachineIDsByTank(int, vector<int> *)
                                      92
     TankWashingAPI::GetWholeTankInfo(int, TankWashingMachineRun_Statuses &)
                                       4
     TankWashingAPI::GetTimeOfLastTankWashingRunUpdate()
                                      16
     TankWashingAPI::LoadTankCleaningMediaConfigString(TSNConfigString &)
                                     448
     TankWashingAPI::InitCleaningMediaInDatabase(TankWashingCleaningMedia &)
                                       4
     TankWashingAPI::StartWashingRunIfIdle(int, int &)
                                      12
     TankWashingAPI::FinishWashingRunIfRunningOrError(int, bool)
                                       4
     TankWashingAPI::EnsureCacheHasTWMRunObject(int, bool)
                                       4
     TankWashingAPI::InitTWMMapping(int, int)
                                      32
     TankWashingAPI::GetPROTankWashingStatus(PROTank *)
                                     148
     ?<Constant "">                    1
     ?<Constant "TankWashingAPI is onl...">
                                      56
     ?<Constant "Tank Cleaning Media List">
                                      28
     ?<Constant "Tank Cleaning Media">
                                      20
     TankWashingAPI::delete ~TankWashingAPI(TankWashingAPI *)
                                      28
     __sti__routine()                 56
     TankWashingAPI::new TankWashingAPI()
                                      28
     ??DataTable4                      4
     ??DataTable5                      4
      Others                         684

 
 5 060 bytes in segment CODE
   117 bytes in segment DATA_C
    32 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 400 bytes of CODE  memory (+ 2 676 bytes shared)
   117 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
