##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmmAmpShortCircuit.cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmmAmpShortCircuit.cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmmAmpShortCircuit.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmmAmpShortCircuit.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmmAmpShortCircuit.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AlarmmAmpShortCircuit::~AlarmmAmpShortCircuit(void)
     10          {
   \                     `?~AlarmmAmpShortCircuit`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmmAmpShortCircuit_1`
     11          }
   \   00000014   0100000A           BEQ      `?~AlarmmAmpShortCircuit_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmmAmpShortCircuit_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmmAmpShortCircuit_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmmAmpShortCircuit_1`:
   \   00000030   ........           B        ?Subroutine9

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine9_0:
   \   00000008   ........           DC32     ??__vtbl
   \   0000000C   ........           DC32     ??NumberOfAlarmSettings
   \   00000010   304CA63C           DC32     0x3ca64c30
   \   00000014   17B7D138           DC32     0x38d1b717
     12          

   \                                 In segment DATA_Z, align 4, align-sorted
     13          unsigned AlarmmAmpShortCircuit::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AlarmmAmpShortCircuit::AlarmmAmpShortCircuit(PRogramObjectBase *PROPtr) :AlarmBasic(PROPtr)
   \                     ??AlarmmAmpShortCircuit:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     16          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??Subroutine9_0  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     17          	NumberOfAlarmSettings++;
   \   00000018   ........           LDR      R0,??Subroutine9_0+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     18              PROPointer = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     19          	IDNumber = (ID_AL_SNS_SHORT_CIRCUIT << 16)+NumberOfAlarmSettings;
   \   0000002C   C006A0E3           MOV      R0,#+201326592
   \   00000030   8B0880E3           ORR      R0,R0,#0x8B0000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     20          	Type     = ID_AL_SNS_SHORT_CIRCUIT;
   \   0000003C   8B00A0E3           MOV      R0,#+139
   \   00000040   C00E80E3           ORR      R0,R0,#0xC00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     21          	Limit    = LIMIT_MA_SHORT_CIRCUIT;
   \   00000048   ........           LDR      R0,??Subroutine9_0+0x8  ;; 0x3ca64c30
   \   0000004C   E40084E5           STR      R0,[R4, #+228]
     22          	Deadband = 0.0001;
   \   00000050   ........           LDR      R0,??Subroutine9_0+0xC  ;; 0x38d1b717
   \   00000054   BC0084E5           STR      R0,[R4, #+188]
     23          	MessageKey		= L_WORD543;	// ShortCircuit
   \   00000058   1F00A0E3           MOV      R0,#+31
   \   0000005C   800F80E3           ORR      R0,R0,#0x200
   \   00000060   B80084E5           STR      R0,[R4, #+184]
     24          	TPCMessageKey	= L_WORD544;	// scirc
   \   00000064   880FA0E3           MOV      R0,#+544
   \   00000068   B40084E5           STR      R0,[R4, #+180]
     25          	IsHWAlarm       = true;
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   CE00C4E5           STRB     R0,[R4, #+206]
     26          }
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078                      REQUIRE ?Subroutine9
   \   00000078                      ;; // Fall through to label ?Subroutine9
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void AlarmmAmpShortCircuit::Check(void)
     29          {
   \                     ??Check:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     30          	float Val = ((AnalogInput*)PROPointer)->FilteredValue;
   \   00000008   C45094E5           LDR      R5,[R4, #+196]
     31           	int Status = AL_STAT_IN_DEADBAND;
     32          	if ( Val < Limit - Deadband ) {
   \   0000000C   E48094E5           LDR      R8,[R4, #+228]
   \   00000010   447195E5           LDR      R7,[R5, #+324]
   \   00000014   BC1094E5           LDR      R1,[R4, #+188]
   \   00000018   0800A0E1           MOV      R0,R8
   \   0000001C   ........           _BLF     __fSub,??__fSub??rA
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0700A0E1           MOV      R0,R7
   \   00000028   ........           _BLF     __fLess,??__fLess??rA
   \   0000002C   000050E3           CMP      R0,#+0
     33          		Status = AL_STAT_IN_NORMAL;
     34          		((AnalogInput*)PROPointer)->Failure &= ~HART_STATUS_SHORT_CIRCUIT_BIT;
   \   00000030   3801D515           LDRBNE   R0,[R5, #+312]
   \   00000034   0260A0E3           MOV      R6,#+2
   \   00000038   0060A013           MOVNE    R6,#+0
   \   0000003C   FD000012           ANDNE    R0,R0,#0xFD
   \   00000040   0700001A           BNE      ??Check_1
     35          	} else if ( Val >= Limit ) {
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0300000A           BEQ      ??Check_2
     36          		Status = AL_STAT_IN_ALARM;
     37                  ((AnalogInput*)PROPointer)->Failure |= HART_STATUS_SHORT_CIRCUIT_BIT;
   \   00000058   3801D5E5           LDRB     R0,[R5, #+312]
   \   0000005C   0160A0E3           MOV      R6,#+1
   \   00000060   020080E3           ORR      R0,R0,#0x2
   \                     ??Check_1:
   \   00000064   3801C5E5           STRB     R0,[R5, #+312]
     38          	}
     39          	UpdateAlarm(Status);
   \                     ??Check_2:
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     40          }
   \   00000074   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine10_0:
   \   00000008   ........           DC32     ??npos
   \   0000000C   9A999999           DC32     0xffffffff9999999a
   \   00000010   9999993F           DC32     0x3f999999
   \   00000014   ........           DC32     ??npos
     41          
     42          ///////////////////////////////////////////////////////////////
     43          //
     44          // Routines for the librarian for input
     45          //
     46          ///////////////////////////////////////////////////////////////
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          int AlarmmAmpShortCircuit::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     49          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C80DDE5           LDRB     R8,[SP, #+92]
   \   0000000C   60909DE5           LDR      R9,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     50          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
     51          	switch ( ValueId ) {
   \   0000002C   3210A0E3           MOV      R1,#+50
   \   00000030   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   2400001A           BNE      ??PutValue_2
     52          		case SVT_AL_LIMIT:
     53          			{
     54          				float Value = ConvertToSi(NewValue, ValUnitId=CURRENT_UNIT, Status,0.000 ,0.025,0.0);
   \   0000003C   1110A0E3           MOV      R1,#+17
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   08008DE2           ADD      R0,SP,#+8
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   ........           LDR      R0,??Subroutine10_0  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   08008DE2           ADD      R0,SP,#+8
   \   00000068   ........           _BLF     ??assign,??assign??rA
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   ........           LDR      R0,??Subroutine10_0+0x4  ;; 0xffffffff9999999a
   \   0000007C   ........           LDR      R1,??Subroutine10_0+0x8  ;; 0x3f999999
   \   00000080   03002DE9           PUSH     {R0,R1}
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   03002DE9           PUSH     {R0,R1}
   \   00000090   18208DE2           ADD      R2,SP,#+24
   \   00000094   20008DE2           ADD      R0,SP,#+32
   \   00000098   0800BDE8           POP      {R3}
   \   0000009C   1110A0E3           MOV      R1,#+17
   \   000000A0   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000A4   0050A0E1           MOV      R5,R0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     55          				if ( Status== E_NO_ERR ) {
   \   000000B8   14009DE5           LDR      R0,[SP, #+20]
   \   000000BC   14D08DE2           ADD      SP,SP,#+20
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   1900001A           BNE      ??PutValue_3
     56          					Limit = Value;
   \   000000C8   E45084E5           STR      R5,[R4, #+228]
   \   000000CC   1A0000EA           B        ??PutValue_4
     57          				}
     58          			}
     59          			break;
     60          		default:
     61                Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_2:
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   24008DE2           ADD      R0,SP,#+36
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   ........           LDR      R0,??Subroutine10_0+0xC  ;; ??npos
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   003090E5           LDR      R3,[R0, #+0]
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   24008DE2           ADD      R0,SP,#+36
   \   000000F4   ........           _BLF     ??assign,??assign??rA
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   00012DE9           PUSH     {R8}
   \   00000104   2C308DE2           ADD      R3,SP,#+44
   \   00000108   0620A0E1           MOV      R2,R6
   \   0000010C   0510A0E1           MOV      R1,R5
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000118   08008DE5           STR      R0,[SP, #+8]
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   2C008DE2           ADD      R0,SP,#+44
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   08D08DE2           ADD      SP,SP,#+8
     62          			break;
     63          	}
     64          	if ( Status==E_NO_ERR){
   \                     ??PutValue_3:
   \   00000130   00009DE5           LDR      R0,[SP, #+0]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0400001A           BNE      ??PutValue_5
     65          			SetModifiedFlag();
   \                     ??PutValue_4:
   \   0000013C   A41094E5           LDR      R1,[R4, #+164]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   541091E5           LDR      R1,[R1, #+84]
   \   00000148   0FE0A0E1           MOV      LR,PC
   \   0000014C   11FF2FE1           BX       R1
     66          	}
     67          	if (UnitId) {
   \                     ??PutValue_5:
   \   00000150   000059E3           CMP      R9,#+0
     68          		*UnitId = ValUnitId;
   \   00000154   04009D15           LDRNE    R0,[SP, #+4]
   \   00000158   00008915           STRNE    R0,[R9, #+0]
     69          	}
     70          	return(Status);
   \   0000015C   00009DE5           LDR      R0,[SP, #+0]
   \   00000160   40D08DE2           ADD      SP,SP,#+64
   \   00000164                      REQUIRE ?Subroutine10
   \   00000164                      ;; // Fall through to label ?Subroutine10
     71          }
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          int  AlarmmAmpShortCircuit::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     74          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     75          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     76          	switch ( ValueId ) {
   \   00000010   1160A0E3           MOV      R6,#+17
   \   00000014   0370A0E3           MOV      R7,#+3
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     77          		case SVT_AL_LIMIT:
     78          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000083E5           STR      R0,[R3, #+0]
     79          			DecPnt     = 3;
   \   00000040   007084E5           STR      R7,[R4, #+0]
     80          			Unit       = CURRENT_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
   \   00000048   070000EA           B        ??GetValue_6
     81          			break;
     82          		case SVT_AL_VALUE:
     83          			MyRetValue = ((AnalogInput*)PROPointer)->FilteredValue;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   440190E5           LDR      R0,[R0, #+324]
   \   00000054   F8FFFFEA           B        ??GetValue_5
     84          			DecPnt     = 3;
     85          			Unit       = CURRENT_UNIT;
     86          			break;
     87          		default:
     88          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   20002DE9           PUSH     {R5}
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000064   00C0A0E1           MOV      R12,R0
   \   00000068   08D08DE2           ADD      SP,SP,#+8
     89          			break;
     90          	}
     91          	return (Status);
   \                     ??GetValue_6:
   \   0000006C   F043BDE8           POP      {R4-R9,LR}
   \   00000070   0C00A0E1           MOV      R0,R12
   \   00000074   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          int AlarmmAmpShortCircuit::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     96          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     97          	int Status = GETVAL_NO_ERR;
     98          	//switch ( ValueId ) {
     99          	//	default:
    100                Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    101          	//		break;
    102          	//}
    103          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine11
    104          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          int AlarmmAmpShortCircuit::PutFloatValue( int ValueId, float NewValue)
    107          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    108          	int Status= E_NO_ERR;
    109          	//switch ( ValueId ) {
    110           //   default:
    111                Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    112           //     break;
    113          	//}
    114          	return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine11
   \   00000008                      ;; // Fall through to label ?Subroutine11
    115          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmmAmpShortCircuit &AlarmmAmpShortCircuit::new AlarmmAmpShortCircuit(PRogramObjectBase *)
   \                     `??new AlarmmAmpShortCircuit`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   EC00A0E3           MOV      R0,#+236
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmmAmpShortCircuit_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmmAmpShortCircuit
   \                     `??new AlarmmAmpShortCircuit_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    116          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmmAmpShortCircuit::AlarmmAmpShortCircuit(PRogramObjectBase *)
                                       12
     AlarmmAmpShortCircuit::Check()    28
     AlarmmAmpShortCircuit::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmmAmpShortCircuit::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmmAmpShortCircuit::PutFloatValue(int, float)
                                        4
     AlarmmAmpShortCircuit::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmmAmpShortCircuit::new AlarmmAmpShortCircuit(PRogramObjectBase *)
                                        8
     AlarmmAmpShortCircuit::~AlarmmAmpShortCircuit()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmmAmpShortCircuit::~AlarmmAmpShortCircuit()
                                      52
     ?Subroutine9                     24
     AlarmmAmpShortCircuit::NumberOfAlarmSettings
                                       4
     AlarmmAmpShortCircuit::AlarmmAmpShortCircuit(PRogramObjectBase *)
                                     120
     AlarmmAmpShortCircuit::Check()  120
     ?Subroutine10                    24
     AlarmmAmpShortCircuit::PutValue(int, int, AnsiString, bool, int *)
                                     356
     AlarmmAmpShortCircuit::GetValue(int, int, float &, int &, int &)
                                     120
     AlarmmAmpShortCircuit::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine11                     8
     AlarmmAmpShortCircuit::PutFloatValue(int, float)
                                       8
     AlarmmAmpShortCircuit::new AlarmmAmpShortCircuit(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         348

 
 1 104 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 892 bytes of CODE  memory (+ 228 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
