##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIModbusDiffPressSensor_mA.cpp  #
#    Command line    =  D:\S2Prog\Shared\Src\AIModbusDiffPressSensor_mA.cpp  #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIModbusDiffPressSensor_mA. #
#                       lst                                                  #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIModbusDiffPressSensor_mA.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIModbusDiffPressSensor_mA.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIModbusDiffPressSensor_mA::AIModbusDiffPressSensor_mA(bool IsAtmRef):AIDiffPressSensor_mA(C_AI_DIFF_PRESSURE_mA)
   \                     ??AIModbusDiffPressSensor_mA:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     10          {
   \   00000008   5310A0E3           MOV      R1,#+83
   \   0000000C   801E81E3           ORR      R1,R1,#0x800
   \   00000010   ........           _BLF     ??AIDiffPressSensor_mA,??AIDiffPressSensor_mA??rA
   \   00000014   ........           LDR      R0,??Subroutine5_0  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     11              IOType              = C_IO_MODBUS;
   \   0000001C   1A00A0E3           MOV      R0,#+26
   \   00000020   800E80E3           ORR      R0,R0,#0x800
   \   00000024   FC0084E5           STR      R0,[R4, #+252]
     12              Location            = C_AI_LOC_BOTTOM;
   \   00000028   C50080E3           ORR      R0,R0,#0xC5
   \   0000002C   280184E5           STR      R0,[R4, #+296]
     13          }
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034                      REQUIRE ?Subroutine5
   \   00000034                      ;; // Fall through to label ?Subroutine5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine5:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine5_0:
   \   00000008   ........           DC32     ??__vtbl
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AIModbusDiffPressSensor_mA::~AIModbusDiffPressSensor_mA(void)
     16          {
   \                     `?~AIModbusDiffPressSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIModbusDiffPressSensor_mA_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AIDiffPressSensor_mA`,`?~AIDiffPressSensor_mA??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIModbusDiffPressSensor_mA_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIModbusDiffPressSensor_mA_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     18          
     19          ///////////////////////////////////////////////////////////////
     20          //
     21          // Routines for the librarian for input
     22          //
     23          ///////////////////////////////////////////////////////////////
     24          
     25          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     26          int AIModbusDiffPressSensor_mA::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
     27              int Status = E_NO_ERR;
   \   00000004   0030A0E3           MOV      R3,#+0
     28              switch (ValueId) {
   \   00000008   8C40A0E3           MOV      R4,#+140
   \   0000000C   404E84E3           ORR      R4,R4,#0x400
   \   00000010   040051E1           CMP      R1,R4
     29              case SVT_MB_MA_PRESSURE:
     30                  FilteredValue = NewValue;
   \   00000014   44218005           STREQ    R2,[R0, #+324]
   \   00000018   0100000A           BEQ      ??PutFloatValue_2
     31                  break;
     32              default:
     33                  Status = AnalogInput::PutFloatValue(ValueId, NewValue);
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   0030A0E1           MOV      R3,R0
     34                  break;
     35              }
     36              return (Status);
   \                     ??PutFloatValue_2:
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   0300A0E1           MOV      R0,R3
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     37          
     38          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIModbusDiffPressSensor_mA &AIModbusDiffPressSensor_mA::new AIModbusDiffPressSensor_mA(bool)
   \                     `??new AIModbusDiffPressSensor_mA`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   820FA0E3           MOV      R0,#+520
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AIModbusDiffPressSensor_mA_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AIModbusDiffPressSensor_mA
   \                     `??new AIModbusDiffPressSensor_mA_1`:
   \   00000020   ........           B        ?Subroutine5

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     39          
     40          //---------------------------------------------------------------------------
     41          
     42          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIModbusDiffPressSensor_mA::AIModbusDiffPressSensor_mA(bool)
                                        8
     AIModbusDiffPressSensor_mA::PutFloatValue(int, float)
                                        8
     AIModbusDiffPressSensor_mA::new AIModbusDiffPressSensor_mA(bool)
                                        8
     AIModbusDiffPressSensor_mA::~AIModbusDiffPressSensor_mA()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AIModbusDiffPressSensor_mA::AIModbusDiffPressSensor_mA(bool)
                                      52
     ?Subroutine5                     12
     AIModbusDiffPressSensor_mA::~AIModbusDiffPressSensor_mA()
                                      52
     AIModbusDiffPressSensor_mA::PutFloatValue(int, float)
                                      48
     AIModbusDiffPressSensor_mA::new AIModbusDiffPressSensor_mA(bool)
                                      36
     __sti__routine()                  4
      Others                         236

 
 284 bytes in segment CODE
 152 bytes in segment DATA_C
   4 bytes in segment DIFUNCT
 
 208 bytes of CODE  memory (+ 80 bytes shared)
 152 bytes of CONST memory

Errors: none
Warnings: none
