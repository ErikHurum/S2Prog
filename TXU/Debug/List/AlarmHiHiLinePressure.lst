##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHiHiLinePressure.Cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHiHiLinePressure.Cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHiHiLinePressure.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHiHiLinePressure.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHiHiLinePressure.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHiHiLinePressure::~AlarmHiHiLinePressure()
   \                     `?~AlarmHiHiLinePressure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHiHiLinePressure_1`
   \   00000014   0100000A           BEQ      `?~AlarmHiHiLinePressure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHiHiLinePressure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHiHiLinePressure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHiHiLinePressure_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmHiHiLinePressure::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmHiHiLinePressure::AlarmHiHiLinePressure(PRogramObjectBase *PROPtr)
   \                     ??AlarmHiHiLinePressure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmHighLinePressure,??AlarmHighLinePressure??rA
   \   00000010   60009FE5           LDR      R0,??AlarmHiHiLinePressure_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     13          	NumberOfAlarmSettings++;
   \   00000018   5C009FE5           LDR      R0,??AlarmHiHiLinePressure_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     14          	IDNumber            = (ID_AL_HIGHHIGH_LINE_PRESS << 16)+NumberOfAlarmSettings;
   \   00000028   B006A0E3           MOV      R0,#+184549376
   \   0000002C   DD0880E3           ORR      R0,R0,#0xDD0000
   \   00000030   010080E0           ADD      R0,R0,R1
   \   00000034   9C0084E5           STR      R0,[R4, #+156]
     15          	Type                = ID_AL_HIGHHIGH_LINE_PRESS;
   \   00000038   DD00A0E3           MOV      R0,#+221
   \   0000003C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000040   A00084E5           STR      R0,[R4, #+160]
     16              PROPointer          = PROPtr;
   \   00000044   C45084E5           STR      R5,[R4, #+196]
     17              PROLPressPtr        = (PROLinePressure*)PROPtr;
   \   00000048   EC5084E5           STR      R5,[R4, #+236]
     18          	Locked              = true;
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   E800C4E5           STRB     R0,[R4, #+232]
     19          	Limit               = PROLPressPtr->HiHiPressLimit;
   \   00000054   840195E5           LDR      R0,[R5, #+388]
   \   00000058   E40084E5           STR      R0,[R4, #+228]
     20          	MessageKey          = L_WORD1104; // HiHiLinePress
   \   0000005C   450EA0E3           MOV      R0,#+1104
   \   00000060   B80084E5           STR      R0,[R4, #+184]
     21          	TPCMessageKey       = L_WORD1105;  // HHLPr
   \   00000064   010080E3           ORR      R0,R0,#0x1
   \   00000068   B40084E5           STR      R0,[R4, #+180]
     22          }
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   3040BDE8           POP      {R4,R5,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmHiHiLinePressure_1:
   \   00000078   ........           DC32     ??__vtbl
   \   0000007C   ........           DC32     ??NumberOfAlarmSettings

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHiHiLinePressure &AlarmHiHiLinePressure::new AlarmHiHiLinePressure(PRogramObjectBase *)
   \                     `??new AlarmHiHiLinePressure`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmHiHiLinePressure_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmHiHiLinePressure
   \                     `??new AlarmHiHiLinePressure_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     23          
     24          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHiHiLinePressure::AlarmHiHiLinePressure(PRogramObjectBase *)
                                       12
     AlarmHiHiLinePressure::new AlarmHiHiLinePressure(PRogramObjectBase *)
                                        8
     AlarmHiHiLinePressure::~AlarmHiHiLinePressure()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmHiHiLinePressure::~AlarmHiHiLinePressure()
                                      56
     AlarmHiHiLinePressure::NumberOfAlarmSettings
                                       4
     AlarmHiHiLinePressure::AlarmHiHiLinePressure(PRogramObjectBase *)
                                     128
     AlarmHiHiLinePressure::new AlarmHiHiLinePressure(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         192

 
 288 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 176 bytes of CODE  memory (+ 128 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
