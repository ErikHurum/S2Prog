##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:19 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHighPressure.Cpp           #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHighPressure.Cpp --fpu     #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHighPressure.lst       #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHighPressure.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHighPressure.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighPressure::~AlarmHighPressure()
   \                     `?~AlarmHighPressure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHighPressure_1`
   \   00000014   0100000A           BEQ      `?~AlarmHighPressure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHighPressure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHighPressure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHighPressure_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmHighPressure::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmHighPressure::AlarmHighPressure(void):AlarmBasic((PRogramObjectBase*)NULL) {
   \                     ??AlarmHighPressure:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     12              NumberOfAlarmSettings++; // Should not do this, but must maintain backward compatibility
   \   00000018   ........           LDR      R0,??DataTable4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     13              Deadband          = 10.0 / MH2O_TO_MBAR;
   \   00000028   ........           LDR      R0,??DataTable5  ;; 0x3dd0d67f
   \   0000002C   BC0084E5           STR      R0,[R4, #+188]
     14          }
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          AlarmHighPressure::AlarmHighPressure(PRogramObjectBase *PROPtr, bool isParent):AlarmBasic(PROPtr) {
   \                     ??AlarmHighPressure_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R5,??DataTable3  ;; ??__vtbl
   \   00000008   88D04DE2           SUB      SP,SP,#+136
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
     17              NumberOfAlarmSettings++;
   \   00000018   ........           LDR      R0,??DataTable4  ;; ??NumberOfAlarmSettings
   \   0000001C   A45084E5           STR      R5,[R4, #+164]
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     18              PROPointer        = PROPtr;
   \   0000002C   C46084E5           STR      R6,[R4, #+196]
     19              PROTPressPtr      = (PROTankPressure *)PROPtr;
   \   00000030   EC6084E5           STR      R6,[R4, #+236]
     20              IDNumber          = (ID_AL_HIGH_T_PRESS << 16) + NumberOfAlarmSettings;
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   BD0680E2           ADD      R0,R0,#+198180864
   \   0000003C   9C0084E5           STR      R0,[R4, #+156]
     21              Type              = ID_AL_HIGH_T_PRESS;
   \   00000040   BD0EA0E3           MOV      R0,#+3024
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     22              Deadband          = 10.0 / MH2O_TO_MBAR;
   \   00000048   ........           LDR      R0,??DataTable5  ;; 0x3dd0d67f
   \   0000004C   BC0084E5           STR      R0,[R4, #+188]
     23              Locked            = PROTPressPtr->HighTankPressLocked;
   \   00000050   A401D6E5           LDRB     R0,[R6, #+420]
   \   00000054   E800C4E5           STRB     R0,[R4, #+232]
     24              Limit             = PROTPressPtr->HighTankPressLimit;
   \   00000058   A80196E5           LDR      R0,[R6, #+424]
   \   0000005C   E40084E5           STR      R0,[R4, #+228]
     25              if ( PROProjectInfo::IsInlandVessel ) {
   \   00000060   ........           LDR      R0,??DataTable8  ;; ??IsInlandVessel
   \   00000064   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   2600000A           BEQ      ??AlarmHighPressure_2
     26                  MessageKey      = L_WORD774;    // High
   \   00000070   0610A0E3           MOV      R1,#+6
   \   00000074   C01F81E3           ORR      R1,R1,#0x300
   \   00000078   B81084E5           STR      R1,[R4, #+184]
     27                  char Buf[BUF_SIZE];
     28                  sprintf(Buf, "%s %3.0fkPa", FindDictionaryWord(MessageKey).c_str(), Limit * MH2O_TO_KPA);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000084   18009DE5           LDR      R0,[SP, #+24]
   \   00000088   100050E3           CMP      R0,#+16
   \   0000008C   E40094E5           LDR      R0,[R4, #+228]
   \   00000090   04609D25           LDRCS    R6,[SP, #+4]
   \   00000094   04608D32           ADDCC    R6,SP,#+4
   \   00000098   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000009C   90209FE5           LDR      R2,??AlarmHighPressure_3  ;; 0x3a92a305
   \   000000A0   90309FE5           LDR      R3,??AlarmHighPressure_3+0x4  ;; 0x40239d01
   \   000000A4   ........           _BLF     __dMul,??__dMul??rA
   \   000000A8   03002DE9           PUSH     {R0,R1}
   \   000000AC   24008DE2           ADD      R0,SP,#+36
   \   000000B0   0800BDE8           POP      {R3}
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   741085E2           ADD      R1,R5,#+116
   \   000000BC   ........           _BLF     sprintf,??sprintf??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   04008DE2           ADD      R0,SP,#+4
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
     29                  Description = AnsiString(Buf);
   \   000000D0   20108DE2           ADD      R1,SP,#+32
   \   000000D4   70008DE2           ADD      R0,SP,#+112
   \   000000D8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000DC   ........           LDR      R1,??DataTable12  ;; ??npos
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   003091E5           LDR      R3,[R1, #+0]
   \   000000E8   0010A0E1           MOV      R1,R0
   \   000000EC   7C0084E2           ADD      R0,R4,#+124
   \   000000F0   ........           _BLF     ??assign,??assign??rA
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   70008DE2           ADD      R0,SP,#+112
   \   00000100   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000104   04D08DE2           ADD      SP,SP,#+4
   \   00000108   020000EA           B        ??AlarmHighPressure_4
     30              } else {
     31                  MessageKey     = L_WORD506;  // HighPressure
   \                     ??AlarmHighPressure_2:
   \   0000010C   FA00A0E3           MOV      R0,#+250
   \   00000110   400F80E3           ORR      R0,R0,#0x100
   \   00000114   B80084E5           STR      R0,[R4, #+184]
     32              }
     33              TPCMessageKey      = L_WORD507;  // HPre
   \                     ??AlarmHighPressure_4:
   \   00000118   FB00A0E3           MOV      R0,#+251
   \   0000011C   400F80E3           ORR      R0,R0,#0x100
   \   00000120   B40084E5           STR      R0,[R4, #+180]
     34          }
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   88D08DE2           ADD      SP,SP,#+136
   \   0000012C   7040BDE8           POP      {R4-R6,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmHighPressure_3:
   \   00000134   05A3923A           DC32     0x3a92a305
   \   00000138   019D2340           DC32     0x40239d01

   \                                 In segment CODE, align 4, keep-with-next
     35          AnsiString AlarmHighPressure::Get_Message(void) {
   \                     ??Get_Message:
   \   00000000   0120A0E1           MOV      R2,R1
     36              if ( PROProjectInfo::IsInlandVessel ) {
   \   00000004   ........           LDR      R1,??DataTable8  ;; ??IsInlandVessel
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0300000A           BEQ      ??Get_Message_1
     37                  return (Description);
   \   00000018   7C1080E2           ADD      R1,R0,#+124
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   ........           _BLF     ??string,??string??rA
   \   00000024   020000EA           B        ??Get_Message_2
     38              } else {
     39                  return (FindDictionaryWord(MessageKey));
   \                     ??Get_Message_1:
   \   00000028   B81090E5           LDR      R1,[R0, #+184]
   \   0000002C   0200A0E1           MOV      R0,R2
   \   00000030   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \                     ??Get_Message_2:
   \   00000034                      REQUIRE ?Subroutine13
   \   00000034                      ;; // Fall through to label ?Subroutine13
     40              }
     41          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     42          
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          void AlarmHighPressure::Check(void) {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     45              int Status = AL_STAT_IN_DEADBAND;
     46              if ( PROTPressPtr->HasPressure ) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   5811D0E5           LDRB     R1,[R0, #+344]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0900000A           BEQ      ??Check_1
     47                  float Val = PROTPressPtr->Pressure;
   \   0000001C   6C6190E5           LDR      R6,[R0, #+364]
     48                  if ( Val < Limit - Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC1094E5           LDR      R1,[R4, #+188]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     __fLess,??__fLess??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??Check_2
     49                      Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000044   0050A0E3           MOV      R5,#+0
   \   00000048   040000EA           B        ??Check_3
     50                  } else if ( Val >= Limit ) {
   \                     ??Check_2:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     51                      Status = AL_STAT_IN_ALARM;
   \   0000005C   0150A013           MOVNE    R5,#+1
     52                  }
     53              } else {
     54                  Status = AL_STAT_IN_NORMAL;
     55              }
     56              UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     57          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          int AlarmHighPressure::GetOperationMode(void) {
     60              return int(PROTPressPtr->VapourAlarmSet);
   \                     ??GetOperationMode:
   \   00000000   EC0090E5           LDR      R0,[R0, #+236]
   \   00000004   7001D0E5           LDRB     R0,[R0, #+368]
   \   00000008   1EFF2FE1           BX       LR               ;; return
     61          }
     62          
     63          ///////////////////////////////////////////////////////////////
     64          //
     65          // Routines for the librarian for input
     66          //
     67          ///////////////////////////////////////////////////////////////
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          int AlarmHighPressure::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   64D04DE2           SUB      SP,SP,#+100
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   88A0DDE5           LDRB     R10,[SP, #+136]
   \   00000010   8C409DE5           LDR      R4,[SP, #+140]
   \   00000014   0170A0E1           MOV      R7,R1
     70              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     71              if ( Locked ) {
   \   00000024   E800D5E5           LDRB     R0,[R5, #+232]
   \   00000028   0290A0E1           MOV      R9,R2
   \   0000002C   0360A0E1           MOV      R6,R3
   \   00000030   000050E3           CMP      R0,#+0
     72                  Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A10A013           MOVNE    R1,#+42
   \   00000038   00108D15           STRNE    R1,[SP, #+0]
   \   0000003C   8400001A           BNE      ??PutValue_3
     73              } else {
     74                  float OrgLimit = Limit;
   \   00000040   E48095E5           LDR      R8,[R5, #+228]
     75                  int Key = FindConfigKey(NewValue);
   \   00000044   0610A0E1           MOV      R1,R6
   \   00000048   2C008DE2           ADD      R0,SP,#+44
   \   0000004C   ........           _BLF     ??string,??string??rA
   \   00000050   2C008DE2           ADD      R0,SP,#+44
   \   00000054   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000058   00B0A0E1           MOV      R11,R0
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   2C008DE2           ADD      R0,SP,#+44
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
     76                  switch ( Key ) {
   \   0000006C   64B04BE2           SUB      R11,R11,#+100
   \   00000070   05005BE3           CMP      R11,#+5
   \   00000074   1100008A           BHI      ??PutValue_4
   \   00000078   010F8FE2           ADR      R0,??PutValue_1
   \   0000007C   0B00D0E7           LDRB     R0,[R0, R11]
   \   00000080   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000084   010C010C           DC8      +1,+12,+1,+12
   \   00000088   010C0000           DC8      +1,+12,+0,+0
     77                  case C_ON:
     78                  case C_OPEN:
     79                  case C_ENABLE:
     80                      SetEnable(EnableTrue);
   \                     ??PutValue_5:
   \   0000008C   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_6:
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   ........           _BLF     ??SetEnable,??SetEnable??rA
     81                      PROTPressPtr->SetState(tUndefined);
   \   00000098   EC2095E5           LDR      R2,[R5, #+236]
   \   0000009C   0410A0E3           MOV      R1,#+4
   \   000000A0   0200A0E1           MOV      R0,R2
   \   000000A4   A42092E5           LDR      R2,[R2, #+164]
   \   000000A8   7C2092E5           LDR      R2,[R2, #+124]
   \   000000AC   0FE0A0E1           MOV      LR,PC
   \   000000B0   12FF2FE1           BX       R2
   \   000000B4   4F0000EA           B        ??PutValue_7
     82                      break;
     83                  case C_OFF:
     84                  case C_CLOSE:
     85                  case C_DISABLE:
     86                      SetEnable(EnableFalse);
   \                     ??PutValue_8:
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   F3FFFFEA           B        ??PutValue_6
     87                      PROTPressPtr->SetState(tUndefined);
     88                      break;
     89                  default:
     90                      switch ( ValueId ) {
   \                     ??PutValue_4:
   \   000000C0   3210A0E3           MOV      R1,#+50
   \   000000C4   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000C8   010057E1           CMP      R7,R1
   \   000000CC   3800001A           BNE      ??PutValue_9
     91                      case SVT_AL_LIMIT:
     92                          if ( PROTPressPtr->MaxPressureRange > 4.0 ) {
   \   000000D0   EC7095E5           LDR      R7,[R5, #+236]
   \   000000D4   E40197E5           LDR      R0,[R7, #+484]
   \   000000D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000DC   0120A0E3           MOV      R2,#+1
   \   000000E0   4034A0E3           MOV      R3,#+1073741824
   \   000000E4   403983E3           ORR      R3,R3,#0x100000
   \   000000E8   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   1D00000A           BEQ      ??PutValue_10
     93                              float Value = ConvertToSi(NewValue, ValUnitId = PRESSURE_UNIT1, Status, 2 * LIMIT_LOW_LPG_PRESS, LIMIT_HIGH_LPG_PRESS, 0.0);
   \   000000F4   0610A0E3           MOV      R1,#+6
   \   000000F8   04108DE5           STR      R1,[SP, #+4]
   \   000000FC   0610A0E1           MOV      R1,R6
   \   00000100   10008DE2           ADD      R0,SP,#+16
   \   00000104   ........           _BLF     ??string,??string??rA
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   03002DE9           PUSH     {R0,R1}
   \   00000114   50019FE5           LDR      R0,??PutValue_11  ;; 0x485265a1
   \   00000118   ........           LDR      R1,??DataTable15  ;; 0x40631ea3
   \   0000011C   03002DE9           PUSH     {R0,R1}
   \   00000120   ........           LDR      R0,??DataTable13  ;; 0x6f46d2ce
   \   00000124   ........           LDR      R1,??DataTable14  ;; 0xffffffffc02464f2
   \                     ??PutValue_12:
   \   00000128   03002DE9           PUSH     {R0,R1}
   \   0000012C   18208DE2           ADD      R2,SP,#+24
   \   00000130   28008DE2           ADD      R0,SP,#+40
   \   00000134   0800BDE8           POP      {R3}
   \   00000138   0610A0E3           MOV      R1,#+6
   \   0000013C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000140   0060A0E1           MOV      R6,R0
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   24008DE2           ADD      R0,SP,#+36
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
     94                              if ( Status == E_NO_ERR ) {
   \   00000154   14009DE5           LDR      R0,[SP, #+20]
   \   00000158   14D08DE2           ADD      SP,SP,#+20
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   2400001A           BNE      ??PutValue_7
     95                                  Limit = Value;
   \   00000164   E46085E5           STR      R6,[R5, #+228]
   \   00000168   250000EA           B        ??PutValue_13
     96                              }
     97                          } else {
     98                              float MinInput, MaxInput;
     99                              PROTPressPtr->GetMaxPresureLimits(MinInput, MaxInput);
   \                     ??PutValue_10:
   \   0000016C   0C208DE2           ADD      R2,SP,#+12
   \   00000170   08108DE2           ADD      R1,SP,#+8
   \   00000174   0700A0E1           MOV      R0,R7
   \   00000178   ........           _BLF     ??GetMaxPresureLimits,??GetMaxPresureLimits??rA
    100                              float Value = ConvertToSi(NewValue, ValUnitId = PRESSURE_UNIT1, Status, MinInput, MaxInput, 0.0);
   \   0000017C   0610A0E3           MOV      R1,#+6
   \   00000180   04108DE5           STR      R1,[SP, #+4]
   \   00000184   0610A0E1           MOV      R1,R6
   \   00000188   10008DE2           ADD      R0,SP,#+16
   \   0000018C   ........           _BLF     ??string,??string??rA
   \   00000190   0000A0E3           MOV      R0,#+0
   \   00000194   0010A0E3           MOV      R1,#+0
   \   00000198   03002DE9           PUSH     {R0,R1}
   \   0000019C   14009DE5           LDR      R0,[SP, #+20]
   \   000001A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001A4   03002DE9           PUSH     {R0,R1}
   \   000001A8   18009DE5           LDR      R0,[SP, #+24]
   \   000001AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001B0   DCFFFFEA           B        ??PutValue_12
    101                              if ( Status == E_NO_ERR ) {
    102                                  Limit = Value;
    103                              }
    104                          }
    105                          break;
    106                      default:
    107                          Status = AlarmBasic::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_9:
   \   000001B4   0610A0E1           MOV      R1,R6
   \   000001B8   48008DE2           ADD      R0,SP,#+72
   \   000001BC   ........           _BLF     ??string,??string??rA
   \   000001C0   04008DE2           ADD      R0,SP,#+4
   \   000001C4   01002DE9           PUSH     {R0}
   \   000001C8   00042DE9           PUSH     {R10}
   \   000001CC   50308DE2           ADD      R3,SP,#+80
   \   000001D0   0920A0E1           MOV      R2,R9
   \   000001D4   0710A0E1           MOV      R1,R7
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001E0   08008DE5           STR      R0,[SP, #+8]
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   50008DE2           ADD      R0,SP,#+80
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F4   08D08DE2           ADD      SP,SP,#+8
    108                          break;
    109                      }
    110                      break; // switch ( ValueId )
    111                  } //switch ( Key )
    112                  if ( Status == E_NO_ERR ) {
   \                     ??PutValue_7:
   \   000001F8   00009DE5           LDR      R0,[SP, #+0]
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   1300001A           BNE      ??PutValue_3
    113                      SetModifiedFlag();
   \                     ??PutValue_13:
   \   00000204   A41095E5           LDR      R1,[R5, #+164]
   \   00000208   0500A0E1           MOV      R0,R5
   \   0000020C   541091E5           LDR      R1,[R1, #+84]
   \   00000210   0FE0A0E1           MOV      LR,PC
   \   00000214   11FF2FE1           BX       R1
    114                      if ( Limit != OrgLimit ) {
   \   00000218   E40095E5           LDR      R0,[R5, #+228]
   \   0000021C   0810A0E1           MOV      R1,R8
   \   00000220   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   0900000A           BEQ      ??PutValue_3
    115                          LogEvent("New limit");
   \   0000022C   3C109FE5           LDR      R1,??PutValue_11+0x4  ;; `?<Constant "New limit">`
   \   00000230   10008DE2           ADD      R0,SP,#+16
   \   00000234   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000238   0010A0E1           MOV      R1,R0
   \   0000023C   0500A0E1           MOV      R0,R5
   \   00000240   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   10008DE2           ADD      R0,SP,#+16
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
    116                      }
    117                  }
    118              } // if ( Locked ) else
    119              if ( UnitId ) {
   \                     ??PutValue_3:
   \   00000254   000054E3           CMP      R4,#+0
    120                  *UnitId = ValUnitId;
   \   00000258   04009D15           LDRNE    R0,[SP, #+4]
   \   0000025C   00008415           STRNE    R0,[R4, #+0]
    121              }
    122              return (Status);
   \   00000260   00009DE5           LDR      R0,[SP, #+0]
   \   00000264   64D08DE2           ADD      SP,SP,#+100
   \   00000268   ........           B        ?Subroutine14
   \                     ??PutValue_11:
   \   0000026C   A1655248           DC32     0x485265a1
   \   00000270   ........           DC32     `?<Constant "New limit">`
    123          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine14_0:
   \   00000008   3A0A0000           DC8      ":\n",+0
   \   0000000C   ........           DC32     `?<Constant "Alarm setting">`
   \   00000010   ........           DC32     NewLineStr
   \   00000014   A2655248           DC32     0x485265a2
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          int  AlarmHighPressure::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
    126              int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    127              switch ( ValueId ) {
   \   00000010   0660A0E3           MOV      R6,#+6
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    128              case SVT_AL_LIMIT:
    129                  MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    130                  DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    131                  Unit       = PRESSURE_UNIT1;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    132                  if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    133                      Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    134                  }
    135                  break;
    136              case SVT_AL_VALUE:
    137                  MyRetValue = PROTPressPtr->Pressure;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   6C0190E5           LDR      R0,[R0, #+364]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    138                  DecPnt     = 1;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    139                  Unit       = PRESSURE_UNIT1;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    140                  break;
    141              default:
    142                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    143                  break;
    144              }
    145              return (Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    146          }
    147          

   \                                 In segment CODE, align 4, keep-with-next
    148          int AlarmHighPressure::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    149              int Status = GETVAL_NO_ERR;
    150              //switch ( ValueId ) {
    151              //	default:
    152              Status = AlarmBasic::GetStringValue(ValueId, Index, MyString);
    153              //		break;
    154              //}
    155              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine13
    156          }
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          int AlarmHighPressure::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    159              int Status = E_NO_ERR;
    160              //switch ( ValueId ) {
    161              //   default:
    162              Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    163              //     break;
    164              //}
    165              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine13
    166          }
    167          
    168          //---------------------------------------------------------------------------
    169          

   \                                 In segment CODE, align 4, keep-with-next
    170          bool AlarmHighPressure::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   73DF4DE2           SUB      SP,SP,#+460
   \   00000008   0080A0E1           MOV      R8,R0
    171              bool NoError = true;
    172              if ( !Locked ) {
   \   0000000C   E800D8E5           LDRB     R0,[R8, #+232]
   \   00000010   0160A0E3           MOV      R6,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0501001A           BNE      ??RestoreSettings_1
    173                  int ErrorLine   = 0;
    174                  int Key         = C_UNDEFINED;
    175                  AnsiString PROName = "Alarm setting";
   \   0000001C   ........           LDR      R10,??Subroutine14_0+0x4  ;; `?<Constant "Alarm setting">`
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0A10A0E1           MOV      R1,R10
   \   0000002C   44008DE2           ADD      R0,SP,#+68
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
    176                  if ( PROPointer )   PROName += (AnsiString)", for " + PROPointer->Name;
   \   00000034   C40098E5           LDR      R0,[R8, #+196]
   \   00000038   0090A0E3           MOV      R9,#+0
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   1500000A           BEQ      ??RestoreSettings_2
   \   00000044   10108AE2           ADD      R1,R10,#+16
   \   00000048   0C008DE2           ADD      R0,SP,#+12
   \   0000004C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C40098E5           LDR      R0,[R8, #+196]
   \   00000058   442080E2           ADD      R2,R0,#+68
   \   0000005C   28008DE2           ADD      R0,SP,#+40
   \   00000060   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000064   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   003090E5           LDR      R3,[R0, #+0]
   \   00000070   28108DE2           ADD      R1,SP,#+40
   \   00000074   44008DE2           ADD      R0,SP,#+68
   \   00000078   ........           _BLF     ??append,??append??rA
   \   0000007C   0920A0E1           MOV      R2,R9
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0920A0E1           MOV      R2,R9
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   0C008DE2           ADD      R0,SP,#+12
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
    177                  PROName += ":\n";
   \                     ??RestoreSettings_2:
   \   0000009C   ........           ADR      R4,??Subroutine14_0  ;; ":\n"
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     strlen,??strlen??rA
   \   000000A8   0020A0E1           MOV      R2,R0
   \   000000AC   0410A0E1           MOV      R1,R4
   \   000000B0   44008DE2           ADD      R0,SP,#+68
   \   000000B4   ........           _BLF     ??append_1,??append??rA_1
   \   000000B8   00B066E2           RSB      R11,R6,#+0
    178                  do {
    179                      AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_3:
   \   000000BC   CC019DE5           LDR      R0,[SP, #+460]
   \   000000C0   0030A0E3           MOV      R3,#+0
   \   000000C4   0D20A0E1           MOV      R2,SP
    180                      if ( ErrorLine ) {
   \   000000C8   ........           LDR      R5,??Subroutine14_0+0x8  ;; NewLineStr
   \   000000CC   98108DE2           ADD      R1,SP,#+152
   \   000000D0   ........           _BLF     ??NextWord,??NextWord??rA
   \   000000D4   00009DE5           LDR      R0,[SP, #+0]
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   3100000A           BEQ      ??RestoreSettings_4
    181                          if ( ErrorLine != EOF ) {
   \   000000E0   0B0050E1           CMP      R0,R11
   \   000000E4   C300000A           BEQ      ??RestoreSettings_5
    182                              RestoreSettingsWarning(PROName + (AnsiString)"Unknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   000000E8   0010A0E1           MOV      R1,R0
   \   000000EC   D0008DE2           ADD      R0,SP,#+208
   \   000000F0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000000F4   0040A0E1           MOV      R4,R0
   \   000000F8   18108AE2           ADD      R1,R10,#+24
   \   000000FC   B4008DE2           ADD      R0,SP,#+180
   \   00000100   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000104   0020A0E1           MOV      R2,R0
   \   00000108   44108DE2           ADD      R1,SP,#+68
   \   0000010C   7C008DE2           ADD      R0,SP,#+124
   \   00000110   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000114   0420A0E1           MOV      R2,R4
   \   00000118   7C108DE2           ADD      R1,SP,#+124
   \   0000011C   60008DE2           ADD      R0,SP,#+96
   \   00000120   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000124   0520A0E1           MOV      R2,R5
   \   00000128   60108DE2           ADD      R1,SP,#+96
   \   0000012C   0C008DE2           ADD      R0,SP,#+12
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   0C108DE2           ADD      R1,SP,#+12
   \   00000138   28008DE2           ADD      R0,SP,#+40
   \   0000013C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000140   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   28008DE2           ADD      R0,SP,#+40
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   0C008DE2           ADD      R0,SP,#+12
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   60008DE2           ADD      R0,SP,#+96
   \   00000170   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   D0008DE2           ADD      R0,SP,#+208
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0110A0E3           MOV      R1,#+1
   \   0000018C   7C008DE2           ADD      R0,SP,#+124
   \   00000190   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   B4008DE2           ADD      R0,SP,#+180
   \                     ??RestoreSettings_6:
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A4   930000EA           B        ??RestoreSettings_5
    183                          }
    184                      } else {
    185                          Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_4:
   \   000001A8   98108DE2           ADD      R1,SP,#+152
   \   000001AC   0C008DE2           ADD      R0,SP,#+12
   \   000001B0   ........           _BLF     ??string,??string??rA
   \   000001B4   0C008DE2           ADD      R0,SP,#+12
   \   000001B8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000001BC   0090A0E1           MOV      R9,R0
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   0C008DE2           ADD      R0,SP,#+12
   \   000001CC   ........           _BLF     ??_Tidy,??_Tidy??rA
    186                          switch ( Key ) {
   \   000001D0   0100A0E3           MOV      R0,#+1
   \   000001D4   640059E3           CMP      R9,#+100
   \   000001D8   8000000A           BEQ      ??RestoreSettings_7
   \   000001DC   650059E3           CMP      R9,#+101
   \   000001E0   8000000A           BEQ      ??RestoreSettings_8
   \   000001E4   6D0059E3           CMP      R9,#+109
   \   000001E8   8100000A           BEQ      ??RestoreSettings_9
   \   000001EC   6E0059E3           CMP      R9,#+110
   \   000001F0   7E00000A           BEQ      ??RestoreSettings_10
   \   000001F4   B920A0E3           MOV      R2,#+185
   \   000001F8   B02E82E3           ORR      R2,R2,#0xB00
   \   000001FC   020059E1           CMP      R9,R2
   \   00000200   7C00000A           BEQ      ??RestoreSettings_5
   \   00000204   012082E2           ADD      R2,R2,#+1
   \   00000208   020059E1           CMP      R9,R2
   \   0000020C   4000000A           BEQ      ??RestoreSettings_11
    187                          default:
    188                              NoError = false;
    189                              RestoreSettingsWarning(PROName + (AnsiString)"The keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   00000210   CC019DE5           LDR      R0,[SP, #+460]
   \   00000214   0060A0E3           MOV      R6,#+0
   \   00000218   1C1090E5           LDR      R1,[R0, #+28]
   \   0000021C   6C0F8DE2           ADD      R0,SP,#+432
   \   00000220   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000224   0040A0E1           MOV      R4,R0
   \   00000228   38108AE2           ADD      R1,R10,#+56
   \   0000022C   650F8DE2           ADD      R0,SP,#+404
   \   00000230   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000234   0020A0E1           MOV      R2,R0
   \   00000238   44108DE2           ADD      R1,SP,#+68
   \   0000023C   5E0F8DE2           ADD      R0,SP,#+376
   \   00000240   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000244   98208DE2           ADD      R2,SP,#+152
   \   00000248   5E1F8DE2           ADD      R1,SP,#+376
   \   0000024C   570F8DE2           ADD      R0,SP,#+348
   \   00000250   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000254   48208AE2           ADD      R2,R10,#+72
   \   00000258   571F8DE2           ADD      R1,SP,#+348
   \   0000025C   500F8DE2           ADD      R0,SP,#+320
   \   00000260   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000264   0420A0E1           MOV      R2,R4
   \   00000268   501F8DE2           ADD      R1,SP,#+320
   \   0000026C   490F8DE2           ADD      R0,SP,#+292
   \   00000270   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000274   0520A0E1           MOV      R2,R5
   \   00000278   491F8DE2           ADD      R1,SP,#+292
   \   0000027C   420F8DE2           ADD      R0,SP,#+264
   \   00000280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000284   421F8DE2           ADD      R1,SP,#+264
   \   00000288   EC008DE2           ADD      R0,SP,#+236
   \   0000028C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000290   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000294   0020A0E3           MOV      R2,#+0
   \   00000298   0110A0E3           MOV      R1,#+1
   \   0000029C   EC008DE2           ADD      R0,SP,#+236
   \   000002A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A4   0620A0E1           MOV      R2,R6
   \   000002A8   0110A0E3           MOV      R1,#+1
   \   000002AC   420F8DE2           ADD      R0,SP,#+264
   \   000002B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B4   0620A0E1           MOV      R2,R6
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   490F8DE2           ADD      R0,SP,#+292
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   0620A0E1           MOV      R2,R6
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   6C0F8DE2           ADD      R0,SP,#+432
   \   000002D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D4   0620A0E1           MOV      R2,R6
   \   000002D8   0110A0E3           MOV      R1,#+1
   \   000002DC   500F8DE2           ADD      R0,SP,#+320
   \   000002E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E4   0620A0E1           MOV      R2,R6
   \   000002E8   0110A0E3           MOV      R1,#+1
   \   000002EC   570F8DE2           ADD      R0,SP,#+348
   \   000002F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F4   0620A0E1           MOV      R2,R6
   \   000002F8   0110A0E3           MOV      R1,#+1
   \   000002FC   5E0F8DE2           ADD      R0,SP,#+376
   \   00000300   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000304   0620A0E1           MOV      R2,R6
   \   00000308   0110A0E3           MOV      R1,#+1
   \   0000030C   650F8DE2           ADD      R0,SP,#+404
   \   00000310   A2FFFFEA           B        ??RestoreSettings_6
    190                              break;
    191                          case C_AL_LIMIT:
    192                              {
    193                                  float NewLimit = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_11:
   \   00000314   CC019DE5           LDR      R0,[SP, #+460]
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0D10A0E1           MOV      R1,SP
   \   00000320   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000324   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000328   0050A0E1           MOV      R5,R0
    194                                  if ( NoError ) {
   \   0000032C   000056E3           CMP      R6,#+0
   \   00000330   2500000A           BEQ      ??RestoreSettings_12
    195                                      if ( PROTPressPtr->MaxPressureRange > 4.0 ) {
   \   00000334   EC6098E5           LDR      R6,[R8, #+236]
   \   00000338   E40196E5           LDR      R0,[R6, #+484]
   \   0000033C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000340   0120A0E3           MOV      R2,#+1
   \   00000344   4034A0E3           MOV      R3,#+1073741824
   \   00000348   403983E3           ORR      R3,R3,#0x100000
   \   0000034C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000350   000050E3           CMP      R0,#+0
   \   00000354   0E00000A           BEQ      ??RestoreSettings_13
    196                                          if ( NewLimit >= 2 * LIMIT_LOW_LPG_PRESS && NewLimit <= LIMIT_HIGH_LPG_PRESS ) {
   \   00000358   0500A0E1           MOV      R0,R5
   \   0000035C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000360   ........           LDR      R2,??DataTable13  ;; 0x6f46d2ce
   \   00000364   ........           LDR      R3,??DataTable14  ;; 0xffffffffc02464f2
   \   00000368   0060A0E1           MOV      R6,R0
   \   0000036C   0170A0E1           MOV      R7,R1
   \   00000370   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000374   000050E3           CMP      R0,#+0
   \   00000378   1300000A           BEQ      ??RestoreSettings_12
   \   0000037C   ........           LDR      R2,??Subroutine14_0+0xC  ;; 0x485265a2
   \   00000380   ........           LDR      R3,??DataTable15  ;; 0x40631ea3
   \   00000384   0600A0E1           MOV      R0,R6
   \   00000388   0710A0E1           MOV      R1,R7
   \   0000038C   ........           _BLF     __dLess,??__dLess??rA
   \   00000390   0B0000EA           B        ??RestoreSettings_14
    197                                              Limit = NewLimit;
    198                                          }
    199                                      } else {
    200                                          float MinInput, MaxInput;
    201                                          PROTPressPtr->GetMaxPresureLimits(MinInput, MaxInput);
   \                     ??RestoreSettings_13:
   \   00000394   08208DE2           ADD      R2,SP,#+8
   \   00000398   04108DE2           ADD      R1,SP,#+4
   \   0000039C   0600A0E1           MOV      R0,R6
   \   000003A0   ........           _BLF     ??GetMaxPresureLimits,??GetMaxPresureLimits??rA
    202                                          if ( NewLimit >= MinInput && NewLimit <= MaxInput ) {
   \   000003A4   04109DE5           LDR      R1,[SP, #+4]
   \   000003A8   0500A0E1           MOV      R0,R5
   \   000003AC   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   000003B0   000050E3           CMP      R0,#+0
   \   000003B4   0400000A           BEQ      ??RestoreSettings_12
   \   000003B8   08009DE5           LDR      R0,[SP, #+8]
   \   000003BC   0510A0E1           MOV      R1,R5
   \   000003C0   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \                     ??RestoreSettings_14:
   \   000003C4   000050E3           CMP      R0,#+0
    203                                              Limit = NewLimit;
   \   000003C8   E4508815           STRNE    R5,[R8, #+228]
    204                                          }
    205                                      }
    206                                  }
    207                              }
    208                              NoError = !ErrorLine;
   \                     ??RestoreSettings_12:
   \   000003CC   00009DE5           LDR      R0,[SP, #+0]
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   0060A013           MOVNE    R6,#+0
   \   000003D8   0160A003           MOVEQ    R6,#+1
   \   000003DC   050000EA           B        ??RestoreSettings_5
    209                              break;
    210                          case C_ENABLE:
    211                              Enable = true;
   \                     ??RestoreSettings_7:
   \   000003E0   E200C8E5           STRB     R0,[R8, #+226]
   \   000003E4   030000EA           B        ??RestoreSettings_5
    212                              break;
    213                          case C_DISABLE:
    214                              Enable = false;
   \                     ??RestoreSettings_8:
   \   000003E8   0000A0E3           MOV      R0,#+0
   \   000003EC   FBFFFFEA           B        ??RestoreSettings_7
    215                              break;
    216                          case C_PREVIOUS_ENABLE:
    217                              PreviousEnable = true;
    218                              break;
    219                          case C_PREVIOUS_DISABLE:
    220                              PreviousEnable = false;
   \                     ??RestoreSettings_10:
   \   000003F0   0000A0E3           MOV      R0,#+0
   \                     ??RestoreSettings_9:
   \   000003F4   CC00C8E5           STRB     R0,[R8, #+204]
    221                              break;
    222                          case C_AL_END:
    223                              break;
    224                          }
    225                      }
    226                  }while ( NoError && (ErrorLine != EOF) && (Key != C_AL_END) );
   \                     ??RestoreSettings_5:
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   98008DE2           ADD      R0,SP,#+152
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   000056E3           CMP      R6,#+0
   \   0000040C   00009D15           LDRNE    R0,[SP, #+0]
   \   00000410   0B005011           CMPNE    R0,R11
   \   00000414   B900A013           MOVNE    R0,#+185
   \   00000418   B00E8013           ORRNE    R0,R0,#0xB00
   \   0000041C   00005911           CMPNE    R9,R0
   \   00000420   25FFFF1A           BNE      ??RestoreSettings_3
    227              }
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0110A0E3           MOV      R1,#+1
   \   0000042C   44008DE2           ADD      R0,SP,#+68
   \   00000430   ........           _BLF     ??_Tidy,??_Tidy??rA
    228              return (NoError);
   \                     ??RestoreSettings_1:
   \   00000434   0600A0E1           MOV      R0,R6
   \   00000438   74DF8DE2           ADD      SP,SP,#+464
   \   0000043C                      REQUIRE ?Subroutine14
   \   0000043C                      ;; // Fall through to label ?Subroutine14
    229          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data AlarmHighPressure::__vtbl[29]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~AlarmHighPressure`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??Get_CompleteMessage
   \              ............
   \   00000060   ............       DC32 ??Get_Location, ??Check, ??Get_Message, ??AddAlarm, ??RemoveAlarm
   \              ............
   \              ............
   \              ....        
   \   00000074   25732025332E       DC8 "%s %3.0fkPa"
   \              30666B506100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Alarm setting">`:
   \   00000000   416C61726D20       DC8 "Alarm setting"
   \              73657474696E
   \              6700        
   \   0000000E   0000               DC8 0, 0
   \   00000010   2C20666F7220       DC8 ", for "
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   556E6B6E6F77       DC8 "Unknown error started at line:"
   \              6E206572726F
   \              722073746172
   \              746564206174
   \              206C696E653A
   \              00          
   \   00000037   00                 DC8 0
   \   00000038   546865206B65       DC8 "The keyword "
   \              79776F726420
   \              00          
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000065   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighPressure &AlarmHighPressure::new AlarmHighPressure()
   \                     `??new AlarmHighPressure`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   F000A0E3           MOV      R0,#+240
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AlarmHighPressure_2`
   \   00000014   ........           BL       ??AlarmHighPressure
   \                     `??new AlarmHighPressure_2`:
   \   00000018   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighPressure &AlarmHighPressure::new AlarmHighPressure(PRogramObjectBase *, bool)
   \                     `??new AlarmHighPressure_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   F000A0E3           MOV      R0,#+240
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AlarmHighPressure_3`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AlarmHighPressure_1
   \                     `??new AlarmHighPressure_3`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??NumberOfAlarmSettings

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   7FD6D03D           DC32     0x3dd0d67f

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??IsInlandVessel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   CED2466F           DC32     0x6f46d2ce

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   F26424C0           DC32     0xffffffffc02464f2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   A31E6340           DC32     0x40631ea3
    230          
    231          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHighPressure::AlarmHighPressure()
                                        8
     AlarmHighPressure::AlarmHighPressure(PRogramObjectBase *, bool)
                                      160
     AlarmHighPressure::Check()        24
     AlarmHighPressure::GetOperationMode()
                                        0
     AlarmHighPressure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmHighPressure::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmHighPressure::Get_Message()
                                        4
     AlarmHighPressure::PutFloatValue(int, float)
                                        4
     AlarmHighPressure::PutValue(int, int, AnsiString, bool, int *)
                                      160
     AlarmHighPressure::RestoreSettings(TSNConfigString *)
                                      500
     AlarmHighPressure::new AlarmHighPressure()
                                        4
     AlarmHighPressure::new AlarmHighPressure(PRogramObjectBase *, bool)
                                       12
     AlarmHighPressure::~AlarmHighPressure()
                                       12
     __sti__routine()                   0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     AlarmHighPressure::~AlarmHighPressure()
                                      56
     AlarmHighPressure::NumberOfAlarmSettings
                                       4
     AlarmHighPressure::AlarmHighPressure()
                                      60
     AlarmHighPressure::AlarmHighPressure(PRogramObjectBase *, bool)
                                     316
     AlarmHighPressure::Get_Message()
                                      52
     ?Subroutine13                     8
     AlarmHighPressure::Check()      116
     AlarmHighPressure::GetOperationMode()
                                      12
     AlarmHighPressure::PutValue(int, int, AnsiString, bool, int *)
                                     628
     ?Subroutine14                    24
     AlarmHighPressure::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmHighPressure::GetStringValue(int, int, AnsiString &)
                                      12
     AlarmHighPressure::PutFloatValue(int, float)
                                      12
     AlarmHighPressure::RestoreSettings(TSNConfigString *)
                                    1084
     AlarmHighPressure::__vtbl       128
     ?<Constant "Alarm setting">     104
     ?<Constant ":\n">                 3
     ?<Constant "New limit">          12
     __sti__routine()                  4
     AlarmHighPressure::new AlarmHighPressure()
                                      28
     AlarmHighPressure::new AlarmHighPressure(PRogramObjectBase *, bool)
                                      48
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable8                      4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable15                     4
      Others                         536

 
 3 404 bytes in segment CODE
   247 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 588 bytes of CODE  memory (+ 832 bytes shared)
   247 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
