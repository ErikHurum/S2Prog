##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\LibrarianShared.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\LibrarianShared.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\LibrarianShared.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\LibrarianShared.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\LibrarianShared.cpp
      1          #pragma hdrstop
      2          
      3          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char const *string::c_str() const
   \                     ??c_str:
   \   00000000   181090E5           LDR      R1,[R0, #+24]
   \   00000004   100051E3           CMP      R1,#+16
   \   00000008   04009025           LDRCS    R0,[R0, #+4]
   \   0000000C   1EFF2F21           BXCS     LR
   \   00000010   040080E2           ADD      R0,R0,#+4
   \   00000014   1EFF2FE1           BX       LR               ;; return
      4          //---------------------------------------------------------------------------
      5          #ifdef S2TXU

   \                                 In segment DATA_Z, align 4, align-sorted
      6          OS_RSEMA UnitSema;
   \                     UnitSema:
   \   00000000                      DS8 16
      7          #endif
      8          
      9          
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          static int CompareValInfoKeyInTable(const void *Entry1, const void *Entry2) {
     12              int Val1 = ((ValueList *)Entry1)->Value;
     13              int Val2 = ((ValueList *)Entry2)->Value;
     14              return (Val1 - Val2);
   \                     ??CompareValInfoKeyInTable:
   \   00000000   ........           B        ?Subroutine23
     15          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine23:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   081091E5           LDR      R1,[R1, #+8]
   \   00000008   010040E0           SUB      R0,R0,R1
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     16          //---------------------------------------------------------------------------
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          static int CompareValInfoKey(const void *Entry1, const void *Entry2) {
     19              int Val1 = ((ValueList *)Entry1)->Value;
     20              int Val2 = ((ValueList *)Entry2)->Value;
     21              return (Val1 - Val2);
   \                     ??CompareValInfoKey:
   \   00000000                      REQUIRE ?Subroutine23
   \   00000000                      ;; // Fall through to label ?Subroutine23
     22          }
     23          //---------------------------------------------------------------------------
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void SortKeywordList(ValueList *MsgTable, int Entries) {
     26              void *Base = (void *)MsgTable;
     27              size_t Num = (size_t)Entries;
     28              size_t Width = sizeof(ValueList);
     29          #ifdef ANTDUSIM
     30          //  qsort( Base, Num, Width, CompareKeywordInTable);
     31          #else
     32              qsort(Base, Num, Width, CompareValInfoKeyInTable);
   \                     ??SortKeywordList:
   \   00000000   10309FE5           LDR      R3,??SortKeywordList_1  ;; ??CompareValInfoKeyInTable
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0C20A0E3           MOV      R2,#+12
   \   0000000C   ........           _BLF     qsort,??qsort??rA
     33          #endif
     34          }
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return
   \                     ??SortKeywordList_1:
   \   00000018   ........           DC32     ??CompareValInfoKeyInTable
     35          //---------------------------------------------------------------------------
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          AnsiString FindText(int Key, ValueList *MsgTable, int Entries, bool &TableIsSorted) {
   \                     ??FindText:
   \   00000000   72402DE9           PUSH     {R1,R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
   \   00000010   0250A0E1           MOV      R5,R2
     38              if ( !TableIsSorted ) {
   \   00000014   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0400001A           BNE      ??FindText_1
     39                  TableIsSorted = true;
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
     40                  SortKeywordList(MsgTable, Entries);
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       ??SortKeywordList
     41              }
     42              void *Base = (void *)MsgTable;
     43              size_t Num = (size_t)Entries;
     44              size_t Width = sizeof(ValueList);
     45          
     46          #ifdef ANTDUSIM
     47              ValueList *InfoPtr = (ValueList *)lfind(&Key, Base, &Num, Width, CompareValInfoKey);
     48          #else
     49              ValueList *InfoPtr = (ValueList *)bsearch(&Key, Base, Num, Width, CompareValInfoKey);
   \                     ??FindText_1:
   \   00000038   68009FE5           LDR      R0,??FindText_2  ;; ??CompareValInfoKey
   \   0000003C   0C30A0E3           MOV      R3,#+12
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   20008DE2           ADD      R0,SP,#+32
   \   00000050   ........           _BLF     bsearch,??bsearch??rA
   \   00000054   0050A0E1           MOV      R5,R0
     50          #endif
     51              AnsiString Msg;
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??AnsiString,??AnsiString??rA
     52              if ( InfoPtr ) {
   \   00000060   000055E3           CMP      R5,#+0
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   0C00000A           BEQ      ??FindText_3
     53                  Msg = InfoPtr->Name;
   \   0000006C   001095E5           LDR      R1,[R5, #+0]
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000078   ........           LDR      R1,??DataTable0  ;; ??npos
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   003091E5           LDR      R3,[R1, #+0]
   \   00000084   0010A0E1           MOV      R1,R0
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??assign,??assign??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
     54              }
     55              return (Msg);
   \                     ??FindText_3:
   \   000000A0   20D08DE2           ADD      SP,SP,#+32
   \   000000A4   ........           B        ?Subroutine26
   \                     ??FindText_2:
   \   000000A8   ........           DC32     ??CompareValInfoKey
     56          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     57          
     58          
     59          class UnitControl {
     60          private:
     61              AnsiString GroupName;
     62              AnsiString Name[MAX_UNITS];
     63              int Units;
     64          public:
     65              int CurrentUnit;
     66          
     67              UnitControl(AnsiString GName, ...) : GroupName(GName), Units(0), CurrentUnit(0) {
     68                  char *NamePtr;
     69          
     70                  va_list ap;
     71                  va_start(ap, GName);
     72                  while ( (NamePtr = va_arg(ap, char *)) != NULL ) {
     73                      Name[Units++] = NamePtr;
     74                  }
     75                  va_end(ap);
     76          
     77              }
     78          };
     79          
     80          

   \                                 In segment DATA_I, align 4, align-sorted
     81          ValueList InputErrorMsg[] = {
     82              { L_WORD191, L_WORD237, E_NO_ERR },                                                          //  {"No Error"               ,"", E_NO_ERR},
     83              { L_WORD192, L_WORD237, E_INPUT_ERR },                                                       //  {"Input error"            ,"", E_INPUT_ERR},
     84              { L_WORD193, L_WORD237, E_DENSITY },                                                         //  {"Density error"          ,"", E_DENSITY},
     85              { L_WORD194, L_WORD237, E_REFTMP },                                                          //  {"RefTmp1=ReftTmp2"       ,"", E_REFTMP},
     86              { L_WORD195, L_WORD237, E_RT1 },                                                             //  {"RefTmp1 fixed"          ,"", E_RT1},
     87              { L_WORD196, L_WORD237, E_COEFF },                                                           //  {"Wrong coeff"            ,"", E_COEFF},
     88              { L_WORD197, L_WORD237, E_HIGH },                                                            //  {"Value too high"         ,"", E_HIGH},
     89              { L_WORD198, L_WORD237, E_LOW },                                                             //  {"Value too low"          ,"", E_LOW},
     90              { L_WORD199, L_WORD237, E_USE_API },                                                         //  {"Use API"                ,"", E_USE_API},
     91              { L_WORD202, L_WORD237, E_INVALID_POINTER },                                                 //  {"Wrong pointer"          ,"", E_INVALID_POINTER},
     92              { L_WORD203, L_WORD237, E_ILLEGAL },                                                         //  {"Illegal value"          ,"", E_ILLEGAL},
     93              { L_WORD204, L_WORD237, E_UNKNOWN_TANK },                                                    //  {"Unknown tank"           ,"", E_UNKNOWN_TANK},
     94              { L_WORD205, L_WORD237, E_AD_NOT_FOUND },                                                    //  {"AD not found"           ,"", E_AD_NOT_FOUND},
     95              { L_WORD206, L_WORD237, E_NO_TEMP_SENSOR },                                                  //  {"No tmp sensor"          ,"", E_NO_TEMP_SENSOR},
     96              { L_WORD207, L_WORD237, E_OUT_OF_RANGE },                                                    //  {"Value out of range"     ,"", E_OUT_OF_RANGE},
     97              { L_WORD208, L_WORD237, E_NO_USE_SYS_SEAW },                                                 //  {"Use system seawater"    ,"", E_NO_USE_SYS_SEAW},
     98              { L_WORD209, L_WORD237, E_NO_USE_SYS_BALW },                                                 //  {"Use system ballast"     ,"", E_NO_USE_SYS_BALW},
     99              { L_WORD210, L_WORD237, E_LO_EQ_HI_TMP },                                                    //  {"Lo temp=Hi temp"        ,"", E_LO_EQ_HI_TMP},
    100              { L_WORD200, L_WORD237, E_USE_OD1 },                                                         //  {"Use ref.density 1"      ,"", E_USE_OD1},
    101              { L_WORD201, L_WORD237, E_SELECT_API_TABLE },                                                //  {"Select API table"       ,"", E_SELECT_API_TABLE},
    102              { L_WORD211, L_WORD237, E_WRONG_INPUT_FIELD },                                               //  {"Input not allowed"      ,"", E_WRONG_INPUT_FIELD},
    103              { L_WORD212, L_WORD237, E_UNDEFINED_CARGO },                                                 //  {"Undefined Cargo"        ,"", E_UNDEFINED_CARGO},
    104              { L_WORD213, L_WORD237, E_RETRY_INPUT },                                                     //  {"Retry input"            ,"", E_RETRY_INPUT},
    105              { L_WORD214, L_WORD237, E_REF_DNS1_TOO_LOW },                                                //  {"Ref Dns1 too low"       ,"", E_REF_DNS1_TOO_LOW},
    106              { L_WORD215, L_WORD237, E_REF_DNS1_TOO_HIGH },                                               //  {"Ref Dns1 too high"      ,"", E_REF_DNS1_TOO_HIGH},
    107              { L_WORD216, L_WORD237, E_REF_DNS2_TOO_LOW },                                                //  {"Ref Dns2 too low"       ,"", E_REF_DNS2_TOO_LOW},
    108              { L_WORD217, L_WORD237, E_REF_DNS2_TOO_HIGH },                                               //  {"Ref Dns2 too high"      ,"", E_REF_DNS2_TOO_HIGH},
    109              { L_WORD218, L_WORD237, E_API_OUT_OF_RANGE },                                                //  {"API out of range"       ,"", E_API_OUT_OF_RANGE},
    110              { L_WORD219, L_WORD237, E_SENSOR_ERROR },                                                    //  {"Sensor Error"           ,"", E_SENSOR_ERROR},
    111              { L_WORD220, L_WORD237, E_GAIN_OUT_OF_RANGE },                                               //  {"Gain out of range"      ,"", E_GAIN_OUT_OF_RANGE},
    112              { L_WORD192, L_WORD237, E_COMMON_INPUT_ERR },                                                //  {"Input Error"            ,"", E_COMMON_INPUT_ERR},
    113              { L_WORD221, L_WORD237, E_NO_USE_SYS_FW },                                                   //  {"Use sys fresh water"    ,"", E_NO_USE_SYS_FW},
    114              { L_WORD222, L_WORD237, E_NO_USE_SYS_HFO },                                                  //  {"Use sys heavy fuel"     ,"", E_NO_USE_SYS_HFO},
    115              { L_WORD223, L_WORD237, E_NO_USE_SYS_DIESEL },                                               //  {"Use system diesel"      ,"", E_NO_USE_SYS_DIESEL},
    116              { L_WORD224, L_WORD237, E_NO_USE_SYS_LUB },                                                  //  {"Use sys lubricants"     ,"", E_NO_USE_SYS_LUB},
    117              { L_WORD225, L_WORD237, E_LOW_LIMIT_GT_HIGH },                                               //  {"Low > High limit"       ,"", E_LOW_LIMIT_GT_HIGH},
    118              { L_WORD226, L_WORD237, E_HIGH_LIMIT_LS_LOW },                                               //  {"High < Low limit"       ,"", E_HIGH_LIMIT_LS_LOW},
    119              { L_WORD227, L_WORD237, E_HIGH_LIMIT_EQ_LOW },                                               //  {"High = Low limit"       ,"", E_HIGH_LIMIT_EQ_LOW},
    120              { L_WORD228, L_WORD237, E_NOT_ADJUSTABLE },                                                  //  {"Not adjustable"         ,"", E_NOT_ADJUSTABLE},
    121              { L_WORD229, L_WORD237, E_NO_INPUT_PERMISSION },                                             //  {"No input permission"    ,"", E_NO_INPUT_PERMISSION},
    122              { L_WORD230, L_WORD237, E_SENSOR_IS_DISABELED },                                             //  {"Sensor is disabeled"    ,"", E_SENSOR_IS_DISABELED},
    123              { L_WORD231, L_WORD237, E_USE_API53_TABLE },                                                 //  {"Use API53 table"        ,"", E_USE_API53_TABLE},
    124              { L_WORD232, L_WORD237, E_USE_API54_TABLE },                                                 //  {"Use API54 table"        ,"", E_USE_API54_TABLE},
    125              { L_WORD233, L_WORD237, E_USE_OD2 },                                                         //  {"Use ref.density 2"      ,"", E_USE_OD2},
    126              { L_WORD234, L_WORD237, E_NOT_COMMON_INPUT },                                                //  {"Can't use common input" ,"", E_NOT_COMMON_INPUT},
    127              { L_WORD235, L_WORD237, E_NO_OVERRIDE_PERMISSION },                                          //  {"Override only possible when there are alarm on either Pre or Main","", E_NO_OVERRIDE_PERMISSION},
    128              { L_WORD650, L_WORD650, E_PLEASE_WAIT },                                                     //  {"Please wait","", E_NO_OVERRIDE_PERMISSION},
    129              { L_WORD865, L_WORD865, E_DUPLICATE_NAME },                                                  //  {"Duplicate name","", E_DUPLICATE_NAME},
    130              { L_WORD921, L_WORD921, E_USE_API59_TABLE },                                                 //  {"Duplicate name","", E_DUPLICATE_NAME},
    131              { L_WORD922, L_WORD922, E_USE_API60_TABLE },                                                 //  {"Duplicate name","", E_DUPLICATE_NAME},
    132          
    133          };
    134          
    135          int SizeofInputErrorMsg = NELEMENTS(InputErrorMsg);
   \                     SizeofInputErrorMsg:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for SizeofInputErrorMsg>`
   \                     InputErrorMsg:
   \   00000004                      DS8 600
   \   0000025C                      REQUIRE `?<Initializer for InputErrorMsg>`

   \                                 In segment DATA_Z, align 1, align-sorted
    136          bool InputErrorMsgIsSorted = false;
   \                     InputErrorMsgIsSorted:
   \   00000000                      DS8 1
    137          
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          AnsiString GetErrorMsg(int MsgKey) {
    140              return (LibGetValueName(InputErrorMsg, SizeofInputErrorMsg, MsgKey));
   \                     ??GetErrorMsg:
   \   00000000   20C09FE5           LDR      R12,??GetErrorMsg_1  ;; SizeofInputErrorMsg
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   04002DE9           PUSH     {R2}
   \   00000010   00209CE5           LDR      R2,[R12, #+0]
   \   00000014   0130A0E1           MOV      R3,R1
   \   00000018   04108CE2           ADD      R1,R12,#+4
   \   0000001C   ........           _BLF     ??LibGetValueName,??LibGetValueName??rA
   \   00000020   0140BDE8           POP      {R0,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
   \                     ??GetErrorMsg_1:
   \   00000028   ........           DC32     SizeofInputErrorMsg
    141          }
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          void SetStdSIUnits(void) {
   \                     ??SetStdSIUnits:
   \   00000000   10402DE9           PUSH     {R4,LR}
    144          #ifdef S2TXU
    145              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R4,??DataTable10  ;; UnitSema
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
    146          #endif
    147              System_Unit[LENGTH_UNIT].CurrentUnit = U_METER;
   \   00000010   ........           LDR      R0,??DataTable11  ;; System_Unit
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   5C1080E5           STR      R1,[R0, #+92]
    148              System_Unit[VOLUME_UNIT].CurrentUnit = U_METER3;
   \   0000001C   8C1080E5           STR      R1,[R0, #+140]
    149              System_Unit[WEIGHT_UNIT].CurrentUnit = U_TON;
   \   00000020   BC1080E5           STR      R1,[R0, #+188]
    150              System_Unit[LOADRATE_UNIT].CurrentUnit = U_M3_HOUR;
   \   00000024   EC1080E5           STR      R1,[R0, #+236]
    151              System_Unit[TEMP_UNIT].CurrentUnit = U_CELCIUS;
   \   00000028   1C1180E5           STR      R1,[R0, #+284]
    152              System_Unit[PRESSURE_UNIT1].CurrentUnit = U_MBAR;
   \   0000002C   0220A0E3           MOV      R2,#+2
   \   00000030   4C2180E5           STR      R2,[R0, #+332]
    153              System_Unit[PRESSURE_UNIT2].CurrentUnit = U_MMH2O;
   \   00000034   0130A0E3           MOV      R3,#+1
   \   00000038   7C3180E5           STR      R3,[R0, #+380]
    154              System_Unit[PRESSURE_UNIT3].CurrentUnit = U_BAR;
   \   0000003C   03C0A0E3           MOV      R12,#+3
   \   00000040   ACC180E5           STR      R12,[R0, #+428]
    155              System_Unit[DENSITY_UNIT].CurrentUnit = U_TON_M3_VAC;
   \   00000044   DC1180E5           STR      R1,[R0, #+476]
    156              System_Unit[ANGLE_UNIT].CurrentUnit = U_DEGREES;
   \   00000048   0C1280E5           STR      R1,[R0, #+524]
    157              System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_TON_M3_C;
   \   0000004C   3C1280E5           STR      R1,[R0, #+572]
    158              System_Unit[FREE_SURF_UNIT].CurrentUnit = U_METER4;
   \   00000050   6C1280E5           STR      R1,[R0, #+620]
    159              System_Unit[MOMENT_UNIT].CurrentUnit = U_TON_METER;
   \   00000054   9C1280E5           STR      R1,[R0, #+668]
    160              System_Unit[IMMERSION_UNIT].CurrentUnit = U_TON_PER_CM;
   \   00000058   CC1280E5           STR      R1,[R0, #+716]
    161              System_Unit[GZ_AREA_UNIT].CurrentUnit = U_METER_RAD;
   \   0000005C   FC1280E5           STR      R1,[R0, #+764]
    162              System_Unit[PERCENT_UNIT].CurrentUnit = U_PERCENT;
   \   00000060   2C1380E5           STR      R1,[R0, #+812]
    163              System_Unit[CURRENT_UNIT].CurrentUnit = U_MAMPERE;
   \   00000064   5C1380E5           STR      R1,[R0, #+860]
    164              System_Unit[VOLTAGE_UNIT].CurrentUnit = U_VOLT;
   \   00000068   8C1380E5           STR      R1,[R0, #+908]
    165              System_Unit[FREQUENCY_UNIT].CurrentUnit = U_HZ;
   \   0000006C   BC1380E5           STR      R1,[R0, #+956]
    166              System_Unit[TIME_UNIT].CurrentUnit = U_SECONDS;
   \   00000070   EC3380E5           STR      R3,[R0, #+1004]
    167              System_Unit[MSECOND_UNIT].CurrentUnit = U_MSECONDS;
   \   00000074   1C1480E5           STR      R1,[R0, #+1052]
    168              System_Unit[SECOND_UNIT].CurrentUnit = U_SECONDS;
   \   00000078   4C3480E5           STR      R3,[R0, #+1100]
    169              System_Unit[MINUTE_UNIT].CurrentUnit = U_MINUTES;
   \   0000007C   7C2480E5           STR      R2,[R0, #+1148]
    170              System_Unit[HOUR_UNIT].CurrentUnit = U_TIME_HOURS;
   \   00000080   0430A0E3           MOV      R3,#+4
   \   00000084   AC3480E5           STR      R3,[R0, #+1196]
    171              System_Unit[DAY_UNIT].CurrentUnit = U_DAYS;
   \   00000088   0530A0E3           MOV      R3,#+5
   \   0000008C   DC3480E5           STR      R3,[R0, #+1244]
    172              System_Unit[MOL_WEIGHT_UNIT].CurrentUnit = U_ATOMIC_M_UNIT;
   \   00000090   0C1580E5           STR      R1,[R0, #+1292]
    173              System_Unit[REVOLUTIONS_UNIT].CurrentUnit = U_RPM;
   \   00000094   3C1580E5           STR      R1,[R0, #+1340]
    174              System_Unit[VISCOSITY_UNIT].CurrentUnit = U_CENTIPOISE;
   \   00000098   6C2580E5           STR      R2,[R0, #+1388]
    175          #ifdef S2TXU
    176              OS_Unuse(&UnitSema);
   \   0000009C   ........           B        ?Subroutine24
    177          #endif
    178          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   ........           _BLF     OS_Unuse,??OS_Unuse??rA
   \   00000008   1040BDE8           POP      {R4,LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    179          
    180          
    181          

   \                                 In segment CODE, align 4, keep-with-next
    182          void SetStdUSUnits(void) {
   \                     ??SetStdUSUnits:
   \   00000000   10402DE9           PUSH     {R4,LR}
    183          #ifdef S2TXU
    184              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R4,??DataTable10  ;; UnitSema
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
    185          #endif
    186              System_Unit[LENGTH_UNIT].CurrentUnit        = U_FEET;
   \   00000010   ........           LDR      R0,??DataTable11  ;; System_Unit
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   5C1080E5           STR      R1,[R0, #+92]
    187              System_Unit[VOLUME_UNIT].CurrentUnit        = U_USBARRELS;
   \   0000001C   0320A0E3           MOV      R2,#+3
   \   00000020   8C2080E5           STR      R2,[R0, #+140]
    188              System_Unit[WEIGHT_UNIT].CurrentUnit        = U_LONGTON;
   \   00000024   BC1080E5           STR      R1,[R0, #+188]
    189              System_Unit[LOADRATE_UNIT].CurrentUnit      = U_USBARRELS_HOUR;
   \   00000028   EC1080E5           STR      R1,[R0, #+236]
    190              System_Unit[TEMP_UNIT].CurrentUnit          = U_FARENHEIT;
   \   0000002C   1C1180E5           STR      R1,[R0, #+284]
    191              System_Unit[PRESSURE_UNIT1].CurrentUnit     = U_INCH_HG;
   \   00000030   0720A0E3           MOV      R2,#+7
   \   00000034   4C2180E5           STR      R2,[R0, #+332]
    192              System_Unit[PRESSURE_UNIT2].CurrentUnit     = U_PSI;
   \   00000038   0420A0E3           MOV      R2,#+4
   \   0000003C   7C2180E5           STR      R2,[R0, #+380]
    193              System_Unit[PRESSURE_UNIT3].CurrentUnit     = U_PSI;
   \   00000040   AC2180E5           STR      R2,[R0, #+428]
    194              System_Unit[ANGLE_UNIT].CurrentUnit         = U_DEGREES;
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   0C3280E5           STR      R3,[R0, #+524]
    195          
    196              System_Unit[DENSITY_UNIT].CurrentUnit       = U_TON_M3_VAC;
   \   0000004C   DC3180E5           STR      R3,[R0, #+476]
    197              System_Unit[DNS_COEFF_UNIT].CurrentUnit     = U_TON_M3_F;
   \   00000050   3C1280E5           STR      R1,[R0, #+572]
    198              System_Unit[FREE_SURF_UNIT].CurrentUnit     = U_FEET4;
   \   00000054   6C1280E5           STR      R1,[R0, #+620]
    199              System_Unit[MOMENT_UNIT].CurrentUnit        = U_LTON_FEET;
   \   00000058   9C1280E5           STR      R1,[R0, #+668]
    200              System_Unit[IMMERSION_UNIT].CurrentUnit     = U_L_TON_PER_INCH;
   \   0000005C   CC1280E5           STR      R1,[R0, #+716]
    201              System_Unit[GZ_AREA_UNIT].CurrentUnit       = U_METER_RAD;
   \   00000060   FC3280E5           STR      R3,[R0, #+764]
    202              System_Unit[PERCENT_UNIT].CurrentUnit       = U_PERCENT;
   \   00000064   2C3380E5           STR      R3,[R0, #+812]
    203          
    204              System_Unit[CURRENT_UNIT].CurrentUnit       = U_MAMPERE;
   \   00000068   5C3380E5           STR      R3,[R0, #+860]
    205              System_Unit[VOLTAGE_UNIT].CurrentUnit       = U_VOLT;
   \   0000006C   8C3380E5           STR      R3,[R0, #+908]
    206              System_Unit[FREQUENCY_UNIT].CurrentUnit     = U_HZ;
   \   00000070   BC3380E5           STR      R3,[R0, #+956]
    207              System_Unit[TIME_UNIT].CurrentUnit          = U_SECONDS;
   \   00000074   EC1380E5           STR      R1,[R0, #+1004]
    208              System_Unit[MSECOND_UNIT].CurrentUnit       = U_MSECONDS;
   \   00000078   1C3480E5           STR      R3,[R0, #+1052]
    209              System_Unit[SECOND_UNIT].CurrentUnit        = U_SECONDS;
   \   0000007C   4C1480E5           STR      R1,[R0, #+1100]
    210              System_Unit[MINUTE_UNIT].CurrentUnit        = U_MINUTES;
   \   00000080   0210A0E3           MOV      R1,#+2
   \   00000084   7C1480E5           STR      R1,[R0, #+1148]
    211              System_Unit[HOUR_UNIT].CurrentUnit          = U_TIME_HOURS;
   \   00000088   AC2480E5           STR      R2,[R0, #+1196]
    212              System_Unit[DAY_UNIT].CurrentUnit           = U_DAYS;
   \   0000008C   0510A0E3           MOV      R1,#+5
   \   00000090   DC1480E5           STR      R1,[R0, #+1244]
    213              System_Unit[MOL_WEIGHT_UNIT].CurrentUnit    = U_ATOMIC_M_UNIT;
   \   00000094   0C3580E5           STR      R3,[R0, #+1292]
    214              System_Unit[REVOLUTIONS_UNIT].CurrentUnit   = U_RPM;
   \   00000098   3C3580E5           STR      R3,[R0, #+1340]
    215              System_Unit[VISCOSITY_UNIT].CurrentUnit     = U_PASCAL_SECONDS;
   \   0000009C   6C3580E5           STR      R3,[R0, #+1388]
    216          #ifdef S2TXU
    217              OS_Unuse(&UnitSema);
   \   000000A0                      REQUIRE ?Subroutine24
   \   000000A0                      ;; // Fall through to label ?Subroutine24
    218          #endif
    219          }
    220          //--------------------------------------------------------------------
    221          

   \                                 In segment CODE, align 4, keep-with-next
    222          void SetUserUnits(void) {
   \                     ??SetUserUnits:
   \   00000000   10402DE9           PUSH     {R4,LR}
    223          #ifdef S2TXU
    224              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R4,??DataTable10  ;; UnitSema
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
    225          #endif
    226              System_Unit[LENGTH_UNIT].CurrentUnit        = PROProjectInfo::UserUnits[LENGTH_UNIT];
   \   00000010   9C109FE5           LDR      R1,??SetUserUnits_1  ;; ??UserUnits
   \   00000014   ........           LDR      R0,??DataTable11  ;; System_Unit
   \   00000018   042091E5           LDR      R2,[R1, #+4]
   \   0000001C   5C2080E5           STR      R2,[R0, #+92]
    227              System_Unit[VOLUME_UNIT].CurrentUnit        = PROProjectInfo::UserUnits[VOLUME_UNIT];
   \   00000020   082091E5           LDR      R2,[R1, #+8]
   \   00000024   8C2080E5           STR      R2,[R0, #+140]
    228              System_Unit[WEIGHT_UNIT].CurrentUnit        = PROProjectInfo::UserUnits[WEIGHT_UNIT];
   \   00000028   0C2091E5           LDR      R2,[R1, #+12]
   \   0000002C   BC2080E5           STR      R2,[R0, #+188]
    229              System_Unit[LOADRATE_UNIT].CurrentUnit      = PROProjectInfo::UserUnits[LOADRATE_UNIT];
   \   00000030   102091E5           LDR      R2,[R1, #+16]
   \   00000034   EC2080E5           STR      R2,[R0, #+236]
    230              System_Unit[TEMP_UNIT].CurrentUnit          = PROProjectInfo::UserUnits[TEMP_UNIT];
   \   00000038   142091E5           LDR      R2,[R1, #+20]
   \   0000003C   1C2180E5           STR      R2,[R0, #+284]
    231              System_Unit[PRESSURE_UNIT1].CurrentUnit     = PROProjectInfo::UserUnits[PRESSURE_UNIT1];
   \   00000040   182091E5           LDR      R2,[R1, #+24]
   \   00000044   4C2180E5           STR      R2,[R0, #+332]
    232              System_Unit[PRESSURE_UNIT2].CurrentUnit     = PROProjectInfo::UserUnits[PRESSURE_UNIT2];
   \   00000048   1C2091E5           LDR      R2,[R1, #+28]
   \   0000004C   7C2180E5           STR      R2,[R0, #+380]
    233              System_Unit[PRESSURE_UNIT3].CurrentUnit     = PROProjectInfo::UserUnits[PRESSURE_UNIT3];
   \   00000050   202091E5           LDR      R2,[R1, #+32]
   \   00000054   AC2180E5           STR      R2,[R0, #+428]
    234              System_Unit[DENSITY_UNIT].CurrentUnit       = PROProjectInfo::UserUnits[DENSITY_UNIT];
   \   00000058   242091E5           LDR      R2,[R1, #+36]
   \   0000005C   DC2180E5           STR      R2,[R0, #+476]
    235              System_Unit[ANGLE_UNIT].CurrentUnit         = PROProjectInfo::UserUnits[ANGLE_UNIT];
   \   00000060   282091E5           LDR      R2,[R1, #+40]
   \   00000064   0C2280E5           STR      R2,[R0, #+524]
    236              System_Unit[DNS_COEFF_UNIT].CurrentUnit     = PROProjectInfo::UserUnits[DNS_COEFF_UNIT];
   \   00000068   2C2091E5           LDR      R2,[R1, #+44]
   \   0000006C   3C2280E5           STR      R2,[R0, #+572]
    237              System_Unit[FREE_SURF_UNIT].CurrentUnit     = PROProjectInfo::UserUnits[FREE_SURF_UNIT];
   \   00000070   302091E5           LDR      R2,[R1, #+48]
   \   00000074   6C2280E5           STR      R2,[R0, #+620]
    238              System_Unit[MOMENT_UNIT].CurrentUnit        = PROProjectInfo::UserUnits[MOMENT_UNIT];
   \   00000078   342091E5           LDR      R2,[R1, #+52]
   \   0000007C   9C2280E5           STR      R2,[R0, #+668]
    239              System_Unit[IMMERSION_UNIT].CurrentUnit     = PROProjectInfo::UserUnits[IMMERSION_UNIT];
   \   00000080   382091E5           LDR      R2,[R1, #+56]
   \   00000084   CC2280E5           STR      R2,[R0, #+716]
    240              System_Unit[GZ_AREA_UNIT].CurrentUnit       = PROProjectInfo::UserUnits[GZ_AREA_UNIT];
   \   00000088   3C2091E5           LDR      R2,[R1, #+60]
   \   0000008C   FC2280E5           STR      R2,[R0, #+764]
    241              System_Unit[PERCENT_UNIT].CurrentUnit       = PROProjectInfo::UserUnits[PERCENT_UNIT];
   \   00000090   402091E5           LDR      R2,[R1, #+64]
   \   00000094   2C2380E5           STR      R2,[R0, #+812]
    242              System_Unit[MOL_WEIGHT_UNIT].CurrentUnit    = PROProjectInfo::UserUnits[MOL_WEIGHT_UNIT];
   \   00000098   682091E5           LDR      R2,[R1, #+104]
   \   0000009C   0C2580E5           STR      R2,[R0, #+1292]
    243          
    244              System_Unit[REVOLUTIONS_UNIT].CurrentUnit   = PROProjectInfo::UserUnits[REVOLUTIONS_UNIT];
   \   000000A0   6C2091E5           LDR      R2,[R1, #+108]
    245              System_Unit[VISCOSITY_UNIT].CurrentUnit     = PROProjectInfo::UserUnits[VISCOSITY_UNIT];
   \   000000A4   701091E5           LDR      R1,[R1, #+112]
   \   000000A8   3C2580E5           STR      R2,[R0, #+1340]
   \   000000AC   6C1580E5           STR      R1,[R0, #+1388]
    246          #ifdef S2TXU
    247              OS_Unuse(&UnitSema);
   \   000000B0   ........           B        ?Subroutine24
   \                     ??SetUserUnits_1:
   \   000000B4   ........           DC32     ??UserUnits
    248          #endif
    249          }
    250          // ****************** Set coeffisient according to temp and dens *****
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          void SetCoeffisient(int unit) {
   \                     ??SetCoeffisient:
   \   00000000   ........           LDR      R1,??DataTable11  ;; System_Unit
   \   00000004   F0002DE9           PUSH     {R4-R7}
   \   00000008   1C2191E5           LDR      R2,[R1, #+284]
   \   0000000C   DC3191E5           LDR      R3,[R1, #+476]
   \   00000010   01C0A0E3           MOV      R12,#+1
   \   00000014   0240A0E3           MOV      R4,#+2
   \   00000018   8F5FA0E3           MOV      R5,#+572
   \   0000001C   0360A0E3           MOV      R6,#+3
   \   00000020   0070A0E3           MOV      R7,#+0
   \   00000024   050050E2           SUBS     R0,R0,#+5
   \   00000028   0200000A           BEQ      ??SetCoeffisient_2
   \   0000002C   040050E2           SUBS     R0,R0,#+4
   \   00000030   0F00000A           BEQ      ??SetCoeffisient_3
   \   00000034   1A0000EA           B        ??SetCoeffisient_4
    253              switch ( unit ) {
    254              case TEMP_UNIT :
    255                  switch ( System_Unit[TEMP_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_2:
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0200000A           BEQ      ??SetCoeffisient_5
   \   00000040   012052E2           SUBS     R2,R2,#+1
   \   00000044   0600000A           BEQ      ??SetCoeffisient_6
   \   00000048   150000EA           B        ??SetCoeffisient_4
    256                  case U_CELCIUS :
    257                      switch ( System_Unit[DENSITY_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_5:
   \   0000004C   020053E3           CMP      R3,#+2
   \   00000050   0100000A           BEQ      ??SetCoeffisient_7
    258                      default :
    259                      case U_TON_M3_AIR :
    260                      case U_TON_M3_VAC :
    261                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_TON_M3_C;
   \                     ??SetCoeffisient_8:
   \   00000054   017085E7           STR      R7,[R5, +R1]
   \   00000058   110000EA           B        ??SetCoeffisient_4
    262                          break;
    263                      case U_LB_USG :
    264                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_LBUSG_C;
   \                     ??SetCoeffisient_7:
   \   0000005C   014085E7           STR      R4,[R5, +R1]
   \   00000060   0F0000EA           B        ??SetCoeffisient_4
    265                          break;
    266                      }
    267                      break;
    268                  case U_FARENHEIT :
    269                      switch ( System_Unit[DENSITY_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_6:
   \   00000064   020053E3           CMP      R3,#+2
   \   00000068   0C00000A           BEQ      ??SetCoeffisient_9
    270                      default :
    271                      case U_TON_M3_AIR :
    272                      case U_TON_M3_VAC :
    273                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_TON_M3_F;
   \                     ??SetCoeffisient_10:
   \   0000006C   01C085E7           STR      R12,[R5, +R1]
   \   00000070   0B0000EA           B        ??SetCoeffisient_4
    274                          break;
    275                      case U_LB_USG :
    276                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_LBUSG_F;
    277                          break;
    278                      }
    279                      break;
    280                  }
    281                  break;
    282              case DENSITY_UNIT:
    283                  switch ( System_Unit[DENSITY_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_3:
   \   00000074   020053E3           CMP      R3,#+2
   \   00000078   0900008A           BHI      ??SetCoeffisient_4
   \   0000007C   010F8FE2           ADR      R0,??SetCoeffisient_1
   \   00000080   0300D0E7           LDRB     R0,[R0, R3]
   \   00000084   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??SetCoeffisient_1:
   \   00000088   00000300           DC8      +0,+0,+3,+0
    284                  case U_TON_M3_AIR :
    285                  case U_TON_M3_VAC :
    286                      switch ( System_Unit[TEMP_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_11:
   \   0000008C   010052E3           CMP      R2,#+1
   \   00000090   F5FFFF0A           BEQ      ??SetCoeffisient_10
    287                      default :
    288                      case U_CELCIUS :
    289                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_TON_M3_C;
   \   00000094   EEFFFFEA           B        ??SetCoeffisient_8
    290                          break;
    291                      case U_FARENHEIT :
    292                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_TON_M3_F;
    293                          break;
    294                      }
    295                      break;
    296                  case U_LB_USG :
    297                      switch ( System_Unit[TEMP_UNIT].CurrentUnit ) {
   \                     ??SetCoeffisient_12:
   \   00000098   010052E3           CMP      R2,#+1
   \   0000009C   EEFFFF1A           BNE      ??SetCoeffisient_7
    298                      default :
    299                      case U_CELCIUS :
    300                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_LBUSG_C;
    301                          break;
    302                      case U_FARENHEIT :
    303                          System_Unit[DNS_COEFF_UNIT].CurrentUnit = U_LBUSG_F;
   \                     ??SetCoeffisient_9:
   \   000000A0   016085E7           STR      R6,[R5, +R1]
    304                          break;
    305                      }
    306                      break;
    307                  }
    308                  break;
    309              }
    310          }
   \                     ??SetCoeffisient_4:
   \   000000A4   F000BDE8           POP      {R4-R7}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    311          
    312          

   \                                 In segment CODE, align 4, keep-with-next
    313          void make_feet_to_str(char Buf[], float Val, int Width) {
   \                     ??make_feet_to_str:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
    314              //char LBuf[80];
    315              int Feet, Inches, Eights, Sign;
    316          
    317              Val /= 0.3048;  // Convert from meter to decimal feet
    318              if ( Val < 0 ) Val = -Val, Sign = -1;
    319              else Sign = 1;
    320          
    321          
    322              Feet = (int)Val;                                        // Remember feet
    323              Val = (Val - Feet) * 12;                // Calc inches
    324              Inches = (int)Val;                                        // Remember inches
    325          
    326              if ( Width < 7 ) {
   \   0000000C   88819FE5           LDR      R8,??make_feet_to_str_1  ;; `?<Constant "%2i\\'%2i\\"">`
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000018   ........           LDR      R2,??DataTable21  ;; 0xffffffffdbf487fd
   \   0000001C   ........           LDR      R3,??DataTable22  ;; 0x3fd381d7
   \   00000020   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000024   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000028   0070A0E1           MOV      R7,R0
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   ........           _BLF     __fLess,??__fLess??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   80742712           EORNE    R7,R7,#0x80000000
   \   0000003C   0090E013           MVNNE    R9,#+0
   \   00000040   0190A003           MOVEQ    R9,#+1
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     __fSub,??__fSub??rA
   \   00000060   4014A0E3           MOV      R1,#+1073741824
   \   00000064   501781E3           ORR      R1,R1,#0x1400000
   \   00000068   ........           _BLF     __fMul,??__fMul??rA
   \   0000006C   00A0A0E1           MOV      R10,R0
   \   00000070   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000074   0070A0E1           MOV      R7,R0
   \   00000078   070055E3           CMP      R5,#+7
   \   0000007C   070000AA           BGE      ??make_feet_to_str_2
    327                  sprintf(Buf, "%2i'%2i\"", Sign * Feet, Inches);
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   960902E0           MUL      R2,R6,R9
   \   00000088   0810A0E1           MOV      R1,R8
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     sprintf,??sprintf??rA
    328              } else if ( Width < 8 ) {
    329                  sprintf(Buf, "%3i'%2i\"", Sign * Feet, Inches);
    330              } else {
    331                  Val = (Val - Inches) * 8 + 0.5;   // Calc 1/8
    332                  Eights = (int)Val;                                        // remainder is eights
    333                  if ( Eights == 8 ) {                                   // 8 eights is an inch
    334                      Eights = 0;
    335                      ++Inches;
    336                  }
    337          
    338                  if ( Inches == 12 ) {
    339                      Inches = 0;
    340                      ++Feet;
    341                  }
    342                  if ( Width ) {
    343                      if ( Width < 9 ) {
    344                          sprintf(Buf, "%2i'%2i\"%1i", Sign * Feet, Inches, Eights);
    345                      } else {
    346                          sprintf(Buf, "%*i'%2i\"%1i", Width - 6, Sign * Feet, Inches, Eights);
    347                      }
    348                  } else {
    349                      sprintf(Buf, "%i'%2i\"%1i", Sign * Feet, Inches, Eights);
    350                  }
    351              }
    352              if ( Width ) {
   \   00000094   000055E3           CMP      R5,#+0
   \   00000098   2E00001A           BNE      ??make_feet_to_str_3
   \   0000009C   3C0000EA           B        ??make_feet_to_str_4
   \                     ??make_feet_to_str_2:
   \   000000A0   080055E3           CMP      R5,#+8
   \   000000A4   050000AA           BGE      ??make_feet_to_str_5
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   960902E0           MUL      R2,R6,R9
   \   000000B0   0C1088E2           ADD      R1,R8,#+12
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     sprintf,??sprintf??rA
   \   000000BC   250000EA           B        ??make_feet_to_str_3
   \                     ??make_feet_to_str_5:
   \   000000C0   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000C4   0010A0E1           MOV      R1,R0
   \   000000C8   0A00A0E1           MOV      R0,R10
   \   000000CC   ........           _BLF     __fSub,??__fSub??rA
   \   000000D0   4114A0E3           MOV      R1,#+1090519040
   \   000000D4   ........           _BLF     __fMul,??__fMul??rA
   \   000000D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000DC   0020A0E1           MOV      R2,R0
   \   000000E0   0130A0E1           MOV      R3,R1
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   C015A0E3           MOV      R1,#+805306368
   \   000000EC   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000000F0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000F4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000F8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000000FC   080050E3           CMP      R0,#+8
   \   00000100   0000A003           MOVEQ    R0,#+0
   \   00000104   01708702           ADDEQ    R7,R7,#+1
   \   00000108   0C0057E3           CMP      R7,#+12
   \   0000010C   01608602           ADDEQ    R6,R6,#+1
   \   00000110   960902E0           MUL      R2,R6,R9
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   0070A003           MOVEQ    R7,#+0
   \   0000011C   090055E3           CMP      R5,#+9
   \   00000120   050000AA           BGE      ??make_feet_to_str_6
   \   00000124   0730A0E1           MOV      R3,R7
   \   00000128   181088E2           ADD      R1,R8,#+24
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ........           _BLF     sprintf,??sprintf??rA
   \   00000134   04D08DE2           ADD      SP,SP,#+4
   \   00000138   060000EA           B        ??make_feet_to_str_3
   \                     ??make_feet_to_str_6:
   \   0000013C   80002DE9           PUSH     {R7}
   \   00000140   0230A0E1           MOV      R3,R2
   \   00000144   062045E2           SUB      R2,R5,#+6
   \   00000148   241088E2           ADD      R1,R8,#+36
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   ........           _BLF     sprintf,??sprintf??rA
   \   00000154   08D08DE2           ADD      SP,SP,#+8
    353                  int SLength = strlen(Buf);
   \                     ??make_feet_to_str_3:
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           _BLF     strlen,??strlen??rA
    354                  if ( SLength < Width ) {
   \   00000160   050050E1           CMP      R0,R5
   \   00000164   080000AA           BGE      ??make_feet_to_str_7
    355                      int Diff = Width - SLength;
   \   00000168   006045E0           SUB      R6,R5,R0
    356                      memmove(&Buf[Diff], Buf, SLength);
   \   0000016C   0020A0E1           MOV      R2,R0
   \   00000170   0410A0E1           MOV      R1,R4
   \   00000174   040086E0           ADD      R0,R6,R4
   \   00000178   ........           _BLF     memmove,??memmove??rA
    357                      memset(Buf, ' ', Diff);
   \   0000017C   0620A0E1           MOV      R2,R6
   \   00000180   2010A0E3           MOV      R1,#+32
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           _BLF     memset,??memset??rA
    358                  }
    359                  Buf[Width] = 0;
   \                     ??make_feet_to_str_7:
   \   0000018C   0000A0E3           MOV      R0,#+0
   \   00000190   0400C5E7           STRB     R0,[R5, +R4]
    360              }
    361          }
   \                     ??make_feet_to_str_4:
   \   00000194   F047BDE8           POP      {R4-R10,LR}
   \   00000198   1EFF2FE1           BX       LR               ;; return
   \                     ??make_feet_to_str_1:
   \   0000019C   ........           DC32     `?<Constant "%2i\\'%2i\\"">`
    362          

   \                                 In segment CODE, align 4, keep-with-next
    363          float ConvertFromSi(char Buf[], float Val, int Width, int DecPnt, int Unit) {
   \                     ??ConvertFromSi:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    364          #ifdef S2TXU
    365              OS_Use(&UnitSema);
    366          #endif
    367              if ( fabs(Val) > 1E10F ) {
   \   00000004   2CBA9FE5           LDR      R11,??ConvertFromSi_7+0x4  ;; `?<Constant "Floating point Err">`
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   ........           LDR      R0,??DataTable10  ;; UnitSema
   \   00000010   74D04DE2           SUB      SP,SP,#+116
   \   00000014   0190A0E1           MOV      R9,R1
   \   00000018   0280A0E1           MOV      R8,R2
   \   0000001C   0370A0E1           MOV      R7,R3
   \   00000020   ........           _BLF     OS_Use,??OS_Use??rA
   \   00000024   101A9FE5           LDR      R1,??ConvertFromSi_7+0x8  ;; 0x501502fa
   \   00000028   8004C9E3           BIC      R0,R9,#0x80000000
   \   0000002C   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400000A           BEQ      ??ConvertFromSi_8
    368                  Val = 0.0;
   \   00000038   0090A0E3           MOV      R9,#+0
    369                  sprintf(Buf, "Floating point Err");
   \   0000003C   0B10A0E1           MOV      R1,R11
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     sprintf,??sprintf??rA
   \   00000048   730200EA           B        ??ConvertFromSi_9
    370              } else {
    371                  int CurrentUnit = System_Unit[Unit].CurrentUnit;
   \                     ??ConvertFromSi_8:
   \   0000004C   98109DE5           LDR      R1,[SP, #+152]
   \   00000050   ........           LDR      R3,??DataTable11  ;; System_Unit
   \   00000054   3020A0E3           MOV      R2,#+48
   \   00000058   923121E0           MLA      R1,R2,R1,R3
   \   0000005C   00108DE5           STR      R1,[SP, #+0]
   \   00000060   2CA091E5           LDR      R10,[R1, #+44]
    372                  switch ( Unit ) {
   \   00000064   0900A0E1           MOV      R0,R9
   \   00000068   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000006C   0040A0E1           MOV      R4,R0
   \   00000070   98009DE5           LDR      R0,[SP, #+152]
   \   00000074   0150A0E1           MOV      R5,R1
   \   00000078   1C0050E3           CMP      R0,#+28
   \   0000007C   6602008A           BHI      ??ConvertFromSi_9
   \   00000080   021F8FE2           ADR      R1,??ConvertFromSi_1
   \   00000084   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000088   B01091E1           LDRH     R1,[R1, R0]
   \   0000008C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ConvertFromSi_1:
   \   00000090   590238006400       DC16     +601,+56,+100,+76
   \              4C00        
   \   00000098   B600FB000E00       DC16     +182,+251,+14,+14
   \              0E00        
   \   000000A0   0E00CA00C000       DC16     +14,+202,+192,+218
   \              DA00        
   \   000000A8   090113012301       DC16     +265,+275,+291,+601
   \              5902        
   \   000000B0   32013D014701       DC16     +306,+317,+327,+601
   \              5902        
   \   000000B8   510116025101       DC16     +337,+534,+337,+337
   \              5101        
   \   000000C0   510151015902       DC16     +337,+337,+601,+564
   \              3402        
   \   000000C8   44020000           DC16     +580,+0
    373                  case PRESSURE_UNIT1:
    374                  case PRESSURE_UNIT2:
    375                  case PRESSURE_UNIT3:
    376                      {
    377                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_10:
   \   000000CC   07005AE3           CMP      R10,#+7
   \   000000D0   1900008A           BHI      ??ConvertFromSi_11
   \   000000D4   010F8FE2           ADR      R0,??ConvertFromSi_2
   \   000000D8   0A00D0E7           LDRB     R0,[R0, R10]
   \   000000DC   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertFromSi_2:
   \   000000E0   01160308           DC8      +1,+22,+3,+8
   \   000000E4   0A0D1013           DC8      +10,+13,+16,+19
    378                          case U_METERH2O :
    379                              DecPnt = 3;
   \                     ??ConvertFromSi_12:
   \   000000E8   0370A0E3           MOV      R7,#+3
   \   000000EC   1A0000EA           B        ??ConvertFromSi_13
    380                              break;
    381                          case U_MBAR :
    382                              DecPnt = 1;
    383                              Val *= (float)MH2O_TO_MBAR;
   \                     ??ConvertFromSi_14:
   \   000000F0   48099FE5           LDR      R0,??ConvertFromSi_7+0xC  ;; 0x42c4220c
   \                     ??ConvertFromSi_15:
   \   000000F4   0170A0E3           MOV      R7,#+1
   \   000000F8   0910A0E1           MOV      R1,R9
   \   000000FC   ........           _BLF     __fMul,??__fMul??rA
   \   00000100   140000EA           B        ??ConvertFromSi_16
    384                              break;
    385                          case U_BAR :
    386                              DecPnt = 1;
    387                              Val *= (float)MH2O_TO_BAR;
   \                     ??ConvertFromSi_17:
   \   00000104   38099FE5           LDR      R0,??ConvertFromSi_7+0x10  ;; 0x3dc8d717
   \   00000108   F9FFFFEA           B        ??ConvertFromSi_15
    388                              break;
    389                          case U_PSI :
    390                              Val *= MH2O_TO_PSI;
   \                     ??ConvertFromSi_18:
   \   0000010C   ........           LDR      R0,??DataTable12  ;; 0xffffffffa4b9f7f8
   \   00000110   ........           LDR      R1,??DataTable13  ;; 0x3ff6c1e1
   \   00000114   0B0000EA           B        ??ConvertFromSi_19
    391                              break;
    392                          case U_KPA:
    393                              Val *= MH2O_TO_KPA;
   \                     ??ConvertFromSi_20:
   \   00000118   ........           LDR      R0,??DataTable50  ;; 0x3a92a305
   \   0000011C   ........           LDR      R1,??DataTable51  ;; 0x40239d01
   \   00000120   080000EA           B        ??ConvertFromSi_19
    394                              break;
    395                          case U_INCH_H2O:
    396                              Val *= MH2O_TO_INCH_H2O;
   \                     ??ConvertFromSi_21:
   \   00000124   ........           LDR      R0,??DataTable16  ;; 0xffffffffbd7a9f58
   \   00000128   ........           LDR      R1,??DataTable17  ;; 0x4043af5e
   \   0000012C   050000EA           B        ??ConvertFromSi_19
    397                              break;
    398                          case U_INCH_HG:
    399                              Val *= MH2O_TO_INCH_HG;
   \                     ??ConvertFromSi_22:
   \   00000130   ........           LDR      R0,??DataTable18  ;; 0xfffffffff0be6e90
   \   00000134   ........           LDR      R1,??DataTable19  ;; 0x40072ace
   \   00000138   020000EA           B        ??ConvertFromSi_19
    400                              break;
    401                          case U_MMH2O:
    402                          default:
    403                              DecPnt = 0;
    404                              Val *= MH2O_TO_MMH2O;
   \                     ??ConvertFromSi_11:
   \   0000013C   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   00000140   0070A0E3           MOV      R7,#+0
   \   00000144   0000A0E3           MOV      R0,#+0
   \                     ??ConvertFromSi_19:
   \   00000148   0420A0E1           MOV      R2,R4
   \   0000014C   0530A0E1           MOV      R3,R5
   \   00000150   ........           _BLF     __dMul,??__dMul??rA
   \   00000154   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??ConvertFromSi_16:
   \   00000158   0090A0E1           MOV      R9,R0
    405                              break;
    406                          }
    407                      }
    408                      if ( Buf ) {
   \                     ??ConvertFromSi_13:
   \   0000015C   000056E3           CMP      R6,#+0
   \   00000160   2D02000A           BEQ      ??ConvertFromSi_9
    409                          sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000164   0900A0E1           MOV      R0,R9
   \   00000168   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000016C   03002DE9           PUSH     {R0,R1}
   \   00000170   230200EA           B        ??ConvertFromSi_23
    410                      }
    411                      break;
    412                  case LENGTH_UNIT :
    413                      {
    414                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_24:
   \   00000174   01A05AE2           SUBS     R10,R10,#+1
   \   00000178   0A00000A           BEQ      ??ConvertFromSi_25
   \   0000017C   01A05AE2           SUBS     R10,R10,#+1
   \   00000180   F5FFFF1A           BNE      ??ConvertFromSi_13
    415                          case U_DECIMAL_FEET :
    416                              DecPnt = 2;
    417                              Val /= FEET_TO_METER;  // Convert from meter to decimal feet
   \   00000184   ........           LDR      R2,??DataTable21  ;; 0xffffffffdbf487fd
   \   00000188   ........           LDR      R3,??DataTable22  ;; 0x3fd381d7
   \   0000018C   0270A0E3           MOV      R7,#+2
   \   00000190   0400A0E1           MOV      R0,R4
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000019C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001A0   0090A0E1           MOV      R9,R0
    418                          default:
    419                          case U_METER :
    420                              if ( Buf ) sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \                     ??ConvertFromSi_26:
   \   000001A4   ECFFFFEA           B        ??ConvertFromSi_13
    421                              break;
    422                          case U_FEET :
    423                              if ( Buf ) make_feet_to_str(Buf, Val, Width);
   \                     ??ConvertFromSi_25:
   \   000001A8   000056E3           CMP      R6,#+0
   \   000001AC   1A02000A           BEQ      ??ConvertFromSi_9
   \   000001B0   0820A0E1           MOV      R2,R8
   \   000001B4   0910A0E1           MOV      R1,R9
   \   000001B8   0600A0E1           MOV      R0,R6
   \   000001BC   ........           BL       ??make_feet_to_str
   \   000001C0   150200EA           B        ??ConvertFromSi_9
    424                              break;
    425                          }
    426                      }
    427                      break;
    428          
    429                  case WEIGHT_UNIT:
    430                      {
    431                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_27:
   \   000001C4   01A05AE2           SUBS     R10,R10,#+1
   \   000001C8   0200000A           BEQ      ??ConvertFromSi_28
   \   000001CC   01A05AE2           SUBS     R10,R10,#+1
   \   000001D0   0600000A           BEQ      ??ConvertFromSi_29
   \   000001D4   0C0000EA           B        ??ConvertFromSi_30
    432                          case U_TON:
    433                          default :
    434                              break;
    435                          case U_LONGTON:
    436                              Val /= TON_TO_LONGTON;
   \                     ??ConvertFromSi_28:
   \   000001D8   ........           LDR      R2,??DataTable23  ;; 0x6747f760
   \   000001DC   ........           LDR      R3,??DataTable24  ;; 0x3ff041ba
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   0510A0E1           MOV      R1,R5
   \   000001E8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000001EC   040000EA           B        ??ConvertFromSi_31
    437                              break;
    438                          case U_KNEWTON:
    439                              Val *= GRAVITY;
   \                     ??ConvertFromSi_29:
   \   000001F0   ........           LDR      R0,??DataTable50  ;; 0x3a92a305
   \   000001F4   ........           LDR      R1,??DataTable51  ;; 0x40239d01
   \   000001F8   0420A0E1           MOV      R2,R4
   \   000001FC   0530A0E1           MOV      R3,R5
   \   00000200   ........           _BLF     __dMul,??__dMul??rA
   \                     ??ConvertFromSi_31:
   \   00000204   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000208   0090A0E1           MOV      R9,R0
    440                              break;
    441                          }
    442                          if ( Buf ) {
   \                     ??ConvertFromSi_30:
   \   0000020C   000056E3           CMP      R6,#+0
   \   00000210   0102000A           BEQ      ??ConvertFromSi_9
    443                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000214   0900A0E1           MOV      R0,R9
   \   00000218   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000021C   03002DE9           PUSH     {R0,R1}
   \   00000220   F70100EA           B        ??ConvertFromSi_23
    444                          }
    445                      }
    446                      break;
    447                  case MOL_WEIGHT_UNIT:
    448                      {
    449                          switch ( CurrentUnit ) {
    450                          case U_ATOMIC_M_UNIT:
    451                          default :
    452                              break;
    453                          }
    454                          if ( Buf ) {
    455                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    456                          }
    457                      }
    458                      break;
    459                  case VOLUME_UNIT :
    460                      {
    461                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_32:
   \   00000224   01A04AE2           SUB      R10,R10,#+1
   \   00000228   02005AE3           CMP      R10,#+2
   \   0000022C   1600008A           BHI      ??ConvertFromSi_33
   \   00000230   010F8FE2           ADR      R0,??ConvertFromSi_3
   \   00000234   0A00D0E7           LDRB     R0,[R0, R10]
   \   00000238   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertFromSi_3:
   \   0000023C   0B000300           DC8      +11,+0,+3,+0
    462                          case U_METER3:
    463                          default :
    464                              break;
    465                          case U_USGALLON:
    466                              Val *= M3_TO_USGALL;
   \                     ??ConvertFromSi_34:
   \   00000240   ........           LDR      R0,??DataTable27  ;; 0xffffffffba04732c
   \   00000244   ........           LDR      R1,??DataTable28  ;; 0x407082c0
   \   00000248   090000EA           B        ??ConvertFromSi_35
    467                              DecPnt = 0;
    468                              break;
    469                          case U_USBARRELS:
    470                              Val *= M3_TO_USBARR;
   \                     ??ConvertFromSi_36:
   \   0000024C   ........           LDR      R0,??DataTable32  ;; 0x27af12f5
   \   00000250   ........           LDR      R1,??DataTable33  ;; 0x401928c4
   \   00000254   0420A0E1           MOV      R2,R4
   \   00000258   0530A0E1           MOV      R3,R5
   \   0000025C   ........           _BLF     __dMul,??__dMul??rA
   \   00000260   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000264   0090A0E1           MOV      R9,R0
   \   00000268   070000EA           B        ??ConvertFromSi_33
    471                              break;
    472                          case U_LITER :
    473                              Val *= M3_TO_LITER;
   \                     ??ConvertFromSi_37:
   \   0000026C   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   00000270   0000A0E3           MOV      R0,#+0
   \                     ??ConvertFromSi_35:
   \   00000274   0420A0E1           MOV      R2,R4
   \   00000278   0530A0E1           MOV      R3,R5
   \   0000027C   ........           _BLF     __dMul,??__dMul??rA
   \   00000280   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000284   0090A0E1           MOV      R9,R0
    474                              DecPnt = 0;
   \   00000288   0070A0E3           MOV      R7,#+0
    475                              break;
    476                          }
    477                          if ( Buf ) {
   \                     ??ConvertFromSi_33:
   \   0000028C   000056E3           CMP      R6,#+0
   \   00000290   E101000A           BEQ      ??ConvertFromSi_9
    478                              if ( Width ) {
   \   00000294   0900A0E1           MOV      R0,R9
   \   00000298   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000029C   0040A0E1           MOV      R4,R0
   \   000002A0   0150A0E1           MOV      R5,R1
   \   000002A4   000058E3           CMP      R8,#+0
   \   000002A8   2B00000A           BEQ      ??ConvertFromSi_38
    479                                  int W, D;
    480          
    481                                  if ( DecPnt ) {
   \   000002AC   000057E3           CMP      R7,#+0
    482                                      D = 1;
   \   000002B0   01A0A013           MOVNE    R10,#+1
    483                                  } else {
    484                                      D = 0;
   \   000002B4   00A0A003           MOVEQ    R10,#+0
    485                                  }
    486                                  if ( (W = sprintf(Buf, "%*.*f", Width, DecPnt, Val)) > Width ) {
   \   000002B8   30002DE9           PUSH     {R4,R5}
   \   000002BC   0730A0E1           MOV      R3,R7
   \   000002C0   0820A0E1           MOV      R2,R8
   \   000002C4   14108BE2           ADD      R1,R11,#+20
   \   000002C8   0600A0E1           MOV      R0,R6
   \   000002CC   ........           _BLF     sprintf,??sprintf??rA
   \   000002D0   000058E1           CMP      R8,R0
   \   000002D4   08D08DE2           ADD      SP,SP,#+8
   \   000002D8   CF0100AA           BGE      ??ConvertFromSi_9
    487                                      if ( (W - DecPnt - D) > Width ) {
   \   000002DC   070040E0           SUB      R0,R0,R7
   \   000002E0   0A0040E0           SUB      R0,R0,R10
   \   000002E4   000058E1           CMP      R8,R0
   \   000002E8   130000AA           BGE      ??ConvertFromSi_39
    488                                          if ( System_Unit[Unit].CurrentUnit == U_USGALLON ) {
   \   000002EC   00009DE5           LDR      R0,[SP, #+0]
   \   000002F0   2C0090E5           LDR      R0,[R0, #+44]
   \   000002F4   020050E3           CMP      R0,#+2
   \   000002F8   D610A013           MOVNE    R1,#+214
    489                                              sprintf(Buf, "%*s", Width, FindDictionaryWord(L_WORD469).c_str());   // Use bls
   \   000002FC   D510A003           MOVEQ    R1,#+213
   \   00000300   401F81E3           ORR      R1,R1,#0x100
   \   00000304   08008DE2           ADD      R0,SP,#+8
   \   00000308   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000030C   08008DE2           ADD      R0,SP,#+8
   \   00000310   ........           _BLF     ??c_str,??c_str??rA
   \   00000314   0030A0E1           MOV      R3,R0
   \   00000318   0820A0E1           MOV      R2,R8
   \   0000031C   DD1F8FE2           ADR      R1,??ConvertFromSi_40  ;; "%*s"
   \   00000320   0600A0E1           MOV      R0,R6
   \   00000324   ........           _BLF     sprintf,??sprintf??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   08008DE2           ADD      R0,SP,#+8
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000338   B70100EA           B        ??ConvertFromSi_9
    490                                          } else {
    491                                              sprintf(Buf, "%*s", Width, FindDictionaryWord(L_WORD470).c_str());   // Use m3
    492                                          }
    493                                      } else {
    494                                          sprintf(Buf, "%*.0f", Width, Val);
   \                     ??ConvertFromSi_39:
   \   0000033C   30002DE9           PUSH     {R4,R5}
   \   00000340   0820A0E1           MOV      R2,R8
   \   00000344   1C108BE2           ADD      R1,R11,#+28
   \                     ??ConvertFromSi_41:
   \   00000348   0800BDE8           POP      {R3}
   \   0000034C   0600A0E1           MOV      R0,R6
   \   00000350   ........           _BLF     sprintf,??sprintf??rA
   \   00000354   04D08DE2           ADD      SP,SP,#+4
   \   00000358   AF0100EA           B        ??ConvertFromSi_9
    495                                      }
    496                                  }
    497                              } else {
    498                                  // Width = 0
    499                                  sprintf(Buf, "%0.*f", DecPnt, Val);
   \                     ??ConvertFromSi_38:
   \   0000035C   30002DE9           PUSH     {R4,R5}
   \   00000360   0720A0E1           MOV      R2,R7
   \   00000364   24108BE2           ADD      R1,R11,#+36
   \   00000368   F6FFFFEA           B        ??ConvertFromSi_41
    500                              }
    501                          }
    502                      }
    503                      break;
    504                  case LOADRATE_UNIT :
    505                      {
    506                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_42:
   \   0000036C   01005AE3           CMP      R10,#+1
   \   00000370   79FFFF1A           BNE      ??ConvertFromSi_13
    507                          case U_M3_HOUR:
    508                          default :
    509                              break;
    510                          case U_USBARRELS_HOUR:
    511                              Val *= M3_TO_USBARR;
   \   00000374   ........           LDR      R0,??DataTable32  ;; 0x27af12f5
   \   00000378   ........           LDR      R1,??DataTable33  ;; 0x401928c4
   \   0000037C   0420A0E1           MOV      R2,R4
   \   00000380   0530A0E1           MOV      R3,R5
   \   00000384   ........           _BLF     __dMul,??__dMul??rA
   \   00000388   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000038C   0090A0E1           MOV      R9,R0
    512                              break;
    513                          }
    514                          if ( Buf ) {
   \                     ??ConvertFromSi_43:
   \   00000390   71FFFFEA           B        ??ConvertFromSi_13
    515                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    516                          }
    517                      }
    518                      break;
    519                  case ANGLE_UNIT :
    520                      {
    521                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_44:
   \   00000394   01005AE3           CMP      R10,#+1
   \   00000398   9BFFFF0A           BEQ      ??ConvertFromSi_30
    522                          case U_DEGREES :
    523                          default:
    524                              Val *= RAD_FACTOR;
   \   0000039C   ........           LDR      R0,??DataTable34  ;; 0x1a63c1f8
   \   000003A0   ........           LDR      R1,??DataTable35  ;; 0x404ca5dc
   \   000003A4   0420A0E1           MOV      R2,R4
   \   000003A8   0530A0E1           MOV      R3,R5
   \   000003AC   ........           _BLF     __dMul,??__dMul??rA
   \   000003B0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003B4   0090A0E1           MOV      R9,R0
    525                              break;
    526                          case U_RADIANS :
    527                              break;
    528                          }
    529                          if ( Buf ) {
   \                     ??ConvertFromSi_45:
   \   000003B8   93FFFFEA           B        ??ConvertFromSi_30
    530                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    531                          }
    532                      }
    533                      break;
    534                  case DENSITY_UNIT:
    535                      {
    536                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_46:
   \   000003BC   01A05AE2           SUBS     R10,R10,#+1
   \   000003C0   0200000A           BEQ      ??ConvertFromSi_47
   \   000003C4   01A05AE2           SUBS     R10,R10,#+1
   \   000003C8   0300000A           BEQ      ??ConvertFromSi_48
   \   000003CC   62FFFFEA           B        ??ConvertFromSi_13
    537                          case U_TON_M3_VAC :
    538                          default :
    539                              break;
    540                          case U_TON_M3_AIR :
    541                              Val = DnsInVac_to_DnsInAir(Val);
   \                     ??ConvertFromSi_47:
   \   000003D0   0900A0E1           MOV      R0,R9
   \   000003D4   ........           _BLF     ??DnsInVac_to_DnsInAir,??DnsInVac_to_DnsInAir??rA
   \   000003D8   050000EA           B        ??ConvertFromSi_49
    542                              break;
    543                          case U_LB_USG :
    544                              Val *= TM3_TO_LBUSG;
   \                     ??ConvertFromSi_48:
   \   000003DC   ........           LDR      R0,??DataTable42  ;; 0xfffffffffc8f3238
   \   000003E0   ........           LDR      R1,??DataTable43  ;; 0x4020b0c1
   \   000003E4   0420A0E1           MOV      R2,R4
   \   000003E8   0530A0E1           MOV      R3,R5
   \   000003EC   ........           _BLF     __dMul,??__dMul??rA
   \   000003F0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??ConvertFromSi_49:
   \   000003F4   0090A0E1           MOV      R9,R0
    545                              break;
    546                          }
    547                          if ( Buf ) {
   \                     ??ConvertFromSi_50:
   \   000003F8   57FFFFEA           B        ??ConvertFromSi_13
    548                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    549                          }
    550                      }
    551                      break;
    552          
    553                  case DNS_COEFF_UNIT:
    554                      {
    555                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_51:
   \   000003FC   01A04AE2           SUB      R10,R10,#+1
   \   00000400   02005AE3           CMP      R10,#+2
   \   00000404   1700008A           BHI      ??ConvertFromSi_52
   \   00000408   010F8FE2           ADR      R0,??ConvertFromSi_4
   \   0000040C   0A00D0E7           LDRB     R0,[R0, R10]
   \   00000410   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertFromSi_4:
   \   00000414   00050800           DC8      +0,+5,+8,+0
    556                          default :
    557                          case U_TON_M3_C :
    558                              break;
    559                          case U_TON_M3_F :
    560                              Val *= COEFF_C_TO_F;
   \                     ??ConvertFromSi_53:
   \   00000418   ........           LDR      R0,??DataTable44  ;; 0x71c708e6
   \   0000041C   ........           LDR      R1,??DataTable45  ;; 0x3fe1c71c
   \                     ??ConvertFromSi_54:
   \   00000420   0420A0E1           MOV      R2,R4
   \   00000424   0530A0E1           MOV      R3,R5
   \   00000428   0B0000EA           B        ??ConvertFromSi_55
    561                              break;
    562                          case U_LBUSG_C :
    563                              Val *= TM3_TO_LBUSG;
   \                     ??ConvertFromSi_56:
   \   0000042C   ........           LDR      R0,??DataTable42  ;; 0xfffffffffc8f3238
   \   00000430   ........           LDR      R1,??DataTable43  ;; 0x4020b0c1
   \   00000434   F9FFFFEA           B        ??ConvertFromSi_54
    564                              break;
    565                          case U_LBUSG_F :
    566                              Val *= TM3_TO_LBUSG;
    567                              Val *= COEFF_C_TO_F;
   \                     ??ConvertFromSi_57:
   \   00000438   ........           LDR      R0,??DataTable42  ;; 0xfffffffffc8f3238
   \   0000043C   ........           LDR      R1,??DataTable43  ;; 0x4020b0c1
   \   00000440   0420A0E1           MOV      R2,R4
   \   00000444   0530A0E1           MOV      R3,R5
   \   00000448   ........           _BLF     __dMul,??__dMul??rA
   \   0000044C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000450   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000454   ........           LDR      R2,??DataTable44  ;; 0x71c708e6
   \   00000458   ........           LDR      R3,??DataTable45  ;; 0x3fe1c71c
   \                     ??ConvertFromSi_55:
   \   0000045C   ........           _BLF     __dMul,??__dMul??rA
   \   00000460   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000464   0090A0E1           MOV      R9,R0
    568                              break;
    569          
    570                          }
    571                          if ( Buf ) {
   \                     ??ConvertFromSi_52:
   \   00000468   000056E3           CMP      R6,#+0
   \   0000046C   6A01000A           BEQ      ??ConvertFromSi_9
    572                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000470   0900A0E1           MOV      R0,R9
   \                     ??ConvertFromSi_58:
   \   00000474   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000478   03002DE9           PUSH     {R0,R1}
   \   0000047C   600100EA           B        ??ConvertFromSi_23
    573                          }
    574          
    575                      }
    576                      break;
    577          
    578                  case TEMP_UNIT :
    579                      {
    580                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_59:
   \   00000480   01005AE3           CMP      R10,#+1
   \   00000484   34FFFF1A           BNE      ??ConvertFromSi_13
    581                          case U_FARENHEIT :
    582                              Val = C_TO_FAHRENHEIT(Val);
   \   00000488   ........           LDR      R0,??DataTable46  ;; 0xffffffffcccccccd
   \   0000048C   ........           LDR      R1,??DataTable47  ;; 0x3ffccccc
   \   00000490   0420A0E1           MOV      R2,R4
   \   00000494   0530A0E1           MOV      R3,R5
   \   00000498   ........           _BLF     __dMul,??__dMul??rA
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   4034A0E3           MOV      R3,#+1073741824
   \   000004A4   403883E3           ORR      R3,R3,#0x400000
   \   000004A8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000004AC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004B0   0090A0E1           MOV      R9,R0
    583                          case U_CELCIUS:
    584                          default:
    585                              break;
    586                          }
    587                          if ( Buf ) {
   \                     ??ConvertFromSi_60:
   \   000004B4   28FFFFEA           B        ??ConvertFromSi_13
    588                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    589                          }
    590                      }
    591                      break;
    592                  case FREE_SURF_UNIT:
    593                      {
    594                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_61:
   \   000004B8   01005AE3           CMP      R10,#+1
   \   000004BC   52FFFF1A           BNE      ??ConvertFromSi_30
    595          
    596                          case U_METER4 :
    597                          default:
    598                              break;
    599                          case U_FEET4 :
    600                              Val /= FEET_TO_METER * FEET_TO_METER * FEET_TO_METER * FEET_TO_METER;
   \   000004C0   80259FE5           LDR      R2,??ConvertFromSi_7+0x14  ;; 0xffffffffd567e5e7
   \   000004C4   80359FE5           LDR      R3,??ConvertFromSi_7+0x18  ;; 0x3f81ad1d
   \   000004C8   0400A0E1           MOV      R0,R4
   \   000004CC   0510A0E1           MOV      R1,R5
   \   000004D0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000004D4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004D8   0090A0E1           MOV      R9,R0
    601                              break;
    602                          }
    603                          if ( Buf ) {
   \                     ??ConvertFromSi_62:
   \   000004DC   4AFFFFEA           B        ??ConvertFromSi_30
    604                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    605                          }
    606                      }
    607                      break;
    608                  case MOMENT_UNIT:
    609                      {
    610                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_63:
   \   000004E0   01A05AE2           SUBS     R10,R10,#+1
   \   000004E4   0200000A           BEQ      ??ConvertFromSi_64
   \   000004E8   01A05AE2           SUBS     R10,R10,#+1
   \   000004EC   0300000A           BEQ      ??ConvertFromSi_65
   \   000004F0   19FFFFEA           B        ??ConvertFromSi_13
    611                          case U_TON_METER :
    612                          default:
    613                              break;
    614                          case U_LTON_FEET :
    615                              Val *= TON_TO_LONGTON / FEET_TO_METER;
   \                     ??ConvertFromSi_64:
   \   000004F4   ........           LDR      R0,??DataTable48  ;; 0x5acf6b77
   \   000004F8   ........           LDR      R1,??DataTable49  ;; 0x400aaafb
   \   000004FC   010000EA           B        ??ConvertFromSi_66
    616                              break;
    617                          case U_KNEWTON_METER:
    618                              Val *= GRAVITY;
   \                     ??ConvertFromSi_65:
   \   00000500   ........           LDR      R0,??DataTable50  ;; 0x3a92a305
   \   00000504   ........           LDR      R1,??DataTable51  ;; 0x40239d01
   \                     ??ConvertFromSi_66:
   \   00000508   0420A0E1           MOV      R2,R4
   \   0000050C   0530A0E1           MOV      R3,R5
   \   00000510   ........           _BLF     __dMul,??__dMul??rA
   \   00000514   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000518   0090A0E1           MOV      R9,R0
    619                              break;
    620                          }
    621                          if ( Buf ) {
   \                     ??ConvertFromSi_67:
   \   0000051C   0EFFFFEA           B        ??ConvertFromSi_13
    622                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    623                          }
    624                      }
    625                      break;
    626                  case IMMERSION_UNIT:
    627                      {
    628                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_68:
   \   00000520   01005AE3           CMP      R10,#+1
    629                          case U_TON_PER_CM :
    630                          default:
    631                              Val /= 100.0;
    632                              break;
    633                          case U_L_TON_PER_INCH:
    634                              Val /= TON_TO_LONGTON / INCH_TO_METER;
   \   00000524   ........           LDREQ    R2,??DataTable52  ;; 0xffffffff841b909a
   \   00000528   0400A0E1           MOV      R0,R4
   \   0000052C   0510A0E1           MOV      R1,R5
   \   00000530   0020A013           MOVNE    R2,#+0
   \   00000534   4034A013           MOVNE    R3,#+1073741824
   \   00000538   59388313           ORRNE    R3,R3,#0x590000
   \   0000053C   F131A003           MOVEQ    R3,#+1073741884
   \   00000540   44388303           ORREQ    R3,R3,#0x440000
   \   00000544   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000548   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000054C   0090A0E1           MOV      R9,R0
    635          
    636                          }
    637                          if ( Buf ) {
   \   00000550   000056E3           CMP      R6,#+0
   \   00000554   3001000A           BEQ      ??ConvertFromSi_9
    638                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000558   C5FFFFEA           B        ??ConvertFromSi_58
    639                          }
    640                      }
    641                      break;
    642                  case GZ_AREA_UNIT:
    643                      {
    644                          switch ( CurrentUnit ) {
    645                          default:
    646                          case U_METER_RAD :
    647                              break;
    648                          }
    649                          if ( Buf ) {
    650                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    651                          }
    652                      }
    653                      break;
    654                  case PERCENT_UNIT:
    655                      {
    656                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_69:
   \   0000055C   01005AE3           CMP      R10,#+1
   \   00000560   FDFEFF1A           BNE      ??ConvertFromSi_13
    657                          case U_PERCENT:
    658                          default:
    659                              break;
    660                          case U_PROMIL:
    661                              Val *= 10.0;
   \   00000564   0000A0E3           MOV      R0,#+0
   \   00000568   4014A0E3           MOV      R1,#+1073741824
   \   0000056C   901981E3           ORR      R1,R1,#0x240000
   \   00000570   0420A0E1           MOV      R2,R4
   \   00000574   0530A0E1           MOV      R3,R5
   \   00000578   ........           _BLF     __dMul,??__dMul??rA
   \   0000057C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000580   0090A0E1           MOV      R9,R0
    662                              break;
    663                          }
    664                          if ( Buf ) {
   \                     ??ConvertFromSi_70:
   \   00000584   F4FEFFEA           B        ??ConvertFromSi_13
    665                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    666                          }
    667                      }
    668                      break;
    669                  case CURRENT_UNIT:
    670                      {
    671                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_71:
   \   00000588   01005AE3           CMP      R10,#+1
   \   0000058C   1EFFFF0A           BEQ      ??ConvertFromSi_30
    672                          case U_AMPERE:
    673                              break;
    674                          case U_MAMPERE:
    675                          default:
    676                              Val *= 1000.0;
   \   00000590   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   00000594   0000A0E3           MOV      R0,#+0
   \   00000598   0420A0E1           MOV      R2,R4
   \   0000059C   0530A0E1           MOV      R3,R5
   \   000005A0   ........           _BLF     __dMul,??__dMul??rA
   \   000005A4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005A8   0090A0E1           MOV      R9,R0
    677                              break;
    678                          }
    679                          if ( Buf ) {
   \                     ??ConvertFromSi_72:
   \   000005AC   16FFFFEA           B        ??ConvertFromSi_30
    680                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    681                          }
    682                      }
    683                      break;
    684                  case VOLTAGE_UNIT:
    685                      {
    686                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_73:
   \   000005B0   01005AE3           CMP      R10,#+1
   \   000005B4   E8FEFF1A           BNE      ??ConvertFromSi_13
    687                          case U_VOLT:
    688                          default:
    689                              break;
    690                          case U_MVOLT:
    691                              Val *= 1000.0;
   \   000005B8   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   000005BC   0000A0E3           MOV      R0,#+0
   \   000005C0   0420A0E1           MOV      R2,R4
   \   000005C4   0530A0E1           MOV      R3,R5
   \   000005C8   ........           _BLF     __dMul,??__dMul??rA
   \   000005CC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005D0   0090A0E1           MOV      R9,R0
    692                              break;
    693                          }
    694                          if ( Buf ) {
   \                     ??ConvertFromSi_74:
   \   000005D4   E0FEFFEA           B        ??ConvertFromSi_13
    695                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    696                          }
    697                      }
    698                      break;
    699                  case FREQUENCY_UNIT:
    700                      {
    701                          switch ( CurrentUnit ) {
    702                          case U_HZ:
    703                          default:
    704                              break;
    705                          }
    706                          if ( Buf ) {
    707                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    708                          }
    709                      }
    710                      break;
    711                  case DAY_UNIT :
    712                  case HOUR_UNIT :
    713                  case TIME_UNIT :
    714                  case SECOND_UNIT :
    715                  case MINUTE_UNIT :
    716                      switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_75:
   \   000005D8   0900A0E1           MOV      R0,R9
   \   000005DC   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000005E0   0070A0E1           MOV      R7,R0
   \   000005E4   01A04AE2           SUB      R10,R10,#+1
   \   000005E8   04005AE3           CMP      R10,#+4
   \   000005EC   0400008A           BHI      ??ConvertFromSi_76
   \   000005F0   010F8FE2           ADR      R0,??ConvertFromSi_5
   \   000005F4   0A00D0E7           LDRB     R0,[R0, R10]
   \   000005F8   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertFromSi_5:
   \   000005FC   0E132180           DC8      +14,+19,+33,+128
   \   00000600   27000000           DC8      +39,+0,+0,+0
    717                      default:
    718                      case U_MSECONDS :
    719                          DecPnt = 0;
    720                          Val *= 1000.0;
   \                     ??ConvertFromSi_76:
   \   00000604   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   00000608   0000A0E3           MOV      R0,#+0
   \   0000060C   0420A0E1           MOV      R2,R4
   \   00000610   0530A0E1           MOV      R3,R5
   \   00000614   ........           _BLF     __dMul,??__dMul??rA
   \   00000618   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000061C   0090A0E1           MOV      R9,R0
    721                          if ( Buf ) {
   \   00000620   000056E3           CMP      R6,#+0
   \   00000624   FC00000A           BEQ      ??ConvertFromSi_9
    722                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000628   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000062C   03002DE9           PUSH     {R0,R1}
   \   00000630   0030A0E3           MOV      R3,#+0
   \   00000634   F30000EA           B        ??ConvertFromSi_77
    723                          }
    724                          break;
    725                      case U_SECONDS :
    726                          DecPnt = 3;
    727                          if ( Buf ) {
   \                     ??ConvertFromSi_78:
   \   00000638   000056E3           CMP      R6,#+0
   \   0000063C   F600000A           BEQ      ??ConvertFromSi_9
    728                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000640   30002DE9           PUSH     {R4,R5}
   \   00000644   0330A0E3           MOV      R3,#+3
   \   00000648   EE0000EA           B        ??ConvertFromSi_77
    729                          }
    730                          break;
    731                      case U_MINUTES :
    732                          Val /= 60.0;
   \                     ??ConvertFromSi_79:
   \   0000064C   0400A0E1           MOV      R0,R4
   \   00000650   0510A0E1           MOV      R1,R5
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   4034A0E3           MOV      R3,#+1073741824
   \   0000065C   4E3883E3           ORR      R3,R3,#0x4E0000
   \                     ??ConvertFromSi_80:
   \   00000660   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000664   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000668   0090A0E1           MOV      R9,R0
    733                          DecPnt = 2;
    734                          if ( Buf ) {
   \   0000066C   000056E3           CMP      R6,#+0
   \   00000670   E900000A           BEQ      ??ConvertFromSi_9
    735                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000674   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000678   03002DE9           PUSH     {R0,R1}
   \   0000067C   0230A0E3           MOV      R3,#+2
   \   00000680   E00000EA           B        ??ConvertFromSi_77
    736                          }
    737                          break;
    738                      case U_HOURS :
    739                          Val /= SEC_TO_HOURS;
   \                     ??ConvertFromSi_81:
   \   00000684   C4339FE5           LDR      R3,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   00000688   0400A0E1           MOV      R0,R4
   \   0000068C   0510A0E1           MOV      R1,R5
   \   00000690   0020A0E3           MOV      R2,#+0
   \   00000694   F1FFFFEA           B        ??ConvertFromSi_80
   \                     ??ConvertFromSi_40:
   \   00000698   252A7300           DC8      "%*s"
    740                          DecPnt = 2;
    741                          if ( Buf ) {
    742                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
    743                          }
    744                          break;
    745                      case U_DAYS :
    746                          {
    747                              char tmpBuf[BUF_SIZE];
    748                              time_t rTime = Val;
    749                              rTime -= PROSystemData::GetTimeZone() / 60;
   \                     ??ConvertFromSi_82:
   \   0000069C   ........           _BLF     ??GetTimeZone,??GetTimeZone??rA
   \   000006A0   3C10A0E3           MOV      R1,#+60
   \   000006A4   ........           _BLF     ??div32_a,??rA??div32_a
   \   000006A8   010047E0           SUB      R0,R7,R1
    750                              int rDays    = rTime / SEC_TO_DAYS;
   \   000006AC   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000006B0   9C339FE5           LDR      R3,??ConvertFromSi_7+0x20  ;; 0x40f51800
   \   000006B4   0090A0E1           MOV      R9,R0
   \   000006B8   01A0A0E1           MOV      R10,R1
   \   000006BC   0020A0E3           MOV      R2,#+0
   \   000006C0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000006C4   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000006C8   00008DE5           STR      R0,[SP, #+0]
    751                              rTime -= rDays * SEC_TO_DAYS;
   \   000006CC   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000006D0   0130A0E1           MOV      R3,R1
   \   000006D4   78139FE5           LDR      R1,??ConvertFromSi_7+0x20  ;; 0x40f51800
   \   000006D8   0020A0E1           MOV      R2,R0
   \   000006DC   0000A0E3           MOV      R0,#+0
   \   000006E0   ........           _BLF     __dMul,??__dMul??rA
   \   000006E4   0020A0E1           MOV      R2,R0
   \   000006E8   0130A0E1           MOV      R3,R1
   \   000006EC   0900A0E1           MOV      R0,R9
   \   000006F0   0A10A0E1           MOV      R1,R10
   \   000006F4   ........           _BLF     __dSub,??__dSub??rA
   \   000006F8   ........           _BLF     __doubleToLong,??__doubleToLong??rA
    752                              int rHours   = rTime / SEC_TO_HOURS;
   \   000006FC   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000700   48339FE5           LDR      R3,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   00000704   0090A0E1           MOV      R9,R0
   \   00000708   01A0A0E1           MOV      R10,R1
   \   0000070C   0020A0E3           MOV      R2,#+0
   \   00000710   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000714   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000718   04008DE5           STR      R0,[SP, #+4]
    753                              rTime -= rHours * SEC_TO_HOURS;
   \   0000071C   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000720   0130A0E1           MOV      R3,R1
   \   00000724   24139FE5           LDR      R1,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   00000728   0020A0E1           MOV      R2,R0
   \   0000072C   0000A0E3           MOV      R0,#+0
   \   00000730   ........           _BLF     __dMul,??__dMul??rA
   \   00000734   0020A0E1           MOV      R2,R0
   \   00000738   0130A0E1           MOV      R3,R1
   \   0000073C   0900A0E1           MOV      R0,R9
   \   00000740   0A10A0E1           MOV      R1,R10
   \   00000744   ........           _BLF     __dSub,??__dSub??rA
   \   00000748   ........           _BLF     __doubleToLong,??__doubleToLong??rA
    754                              int rMinutes = rTime / SEC_TO_MINUTES;
   \   0000074C   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000750   0090A0E1           MOV      R9,R0
   \   00000754   01A0A0E1           MOV      R10,R1
   \   00000758   0020A0E3           MOV      R2,#+0
   \   0000075C   4034A0E3           MOV      R3,#+1073741824
   \   00000760   4E3883E3           ORR      R3,R3,#0x4E0000
   \   00000764   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000768   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   0000076C   0070A0E1           MOV      R7,R0
    755                              rTime -= rMinutes * SEC_TO_MINUTES;
    756                              int rSeconds = rTime;
    757                              sprintf(tmpBuf, "%i:%2i:%2i:%2i", rDays, rHours, rMinutes, rSeconds);
   \   00000770   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000774   0020A0E1           MOV      R2,R0
   \   00000778   0130A0E1           MOV      R3,R1
   \   0000077C   0000A0E3           MOV      R0,#+0
   \   00000780   4014A0E3           MOV      R1,#+1073741824
   \   00000784   4E1881E3           ORR      R1,R1,#0x4E0000
   \   00000788   ........           _BLF     __dMul,??__dMul??rA
   \   0000078C   0020A0E1           MOV      R2,R0
   \   00000790   0130A0E1           MOV      R3,R1
   \   00000794   0900A0E1           MOV      R0,R9
   \   00000798   0A10A0E1           MOV      R1,R10
   \   0000079C   ........           _BLF     __dSub,??__dSub??rA
   \   000007A0   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000007A4   01002DE9           PUSH     {R0}
   \   000007A8   80002DE9           PUSH     {R7}
   \   000007AC   0C309DE5           LDR      R3,[SP, #+12]
   \   000007B0   08209DE5           LDR      R2,[SP, #+8]
   \   000007B4   2C108BE2           ADD      R1,R11,#+44
   \   000007B8   2C008DE2           ADD      R0,SP,#+44
   \   000007BC   ........           _BLF     sprintf,??sprintf??rA
    758                              if ( Buf ) {
   \   000007C0   000056E3           CMP      R6,#+0
   \   000007C4   08D08DE2           ADD      SP,SP,#+8
   \   000007C8   0400000A           BEQ      ??ConvertFromSi_83
    759                                  sprintf(Buf, "%*s", Width, tmpBuf);
   \   000007CC   24308DE2           ADD      R3,SP,#+36
   \   000007D0   0820A0E1           MOV      R2,R8
   \   000007D4   961F8FE2           ADR      R1,??ConvertFromSi_7  ;; "%*s"
   \   000007D8   0600A0E1           MOV      R0,R6
   \   000007DC   ........           _BLF     sprintf,??sprintf??rA
    760                              }
    761                              Val /= SEC_TO_DAYS;
   \                     ??ConvertFromSi_83:
   \   000007E0   6C329FE5           LDR      R3,??ConvertFromSi_7+0x20  ;; 0x40f51800
   \                     ??ConvertFromSi_84:
   \   000007E4   0400A0E1           MOV      R0,R4
   \   000007E8   0510A0E1           MOV      R1,R5
   \   000007EC   0020A0E3           MOV      R2,#+0
   \   000007F0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000007F4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000007F8   0090A0E1           MOV      R9,R0
   \   000007FC   860000EA           B        ??ConvertFromSi_9
    762                          }
    763                          break;
    764                      case U_TIME_HOURS:
    765                          {
    766                              char tmpBuf[BUF_SIZE];
    767                              time_t rTime = Val;
    768                              int rHours   = rTime / SEC_TO_HOURS;
   \                     ??ConvertFromSi_85:
   \   00000800   0700A0E1           MOV      R0,R7
   \   00000804   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000808   40329FE5           LDR      R3,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   0000080C   0090A0E1           MOV      R9,R0
   \   00000810   01A0A0E1           MOV      R10,R1
   \   00000814   0020A0E3           MOV      R2,#+0
   \   00000818   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000081C   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000820   00008DE5           STR      R0,[SP, #+0]
    769                              rTime -= rHours * SEC_TO_HOURS;
   \   00000824   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000828   0130A0E1           MOV      R3,R1
   \   0000082C   1C129FE5           LDR      R1,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   00000830   0020A0E1           MOV      R2,R0
   \   00000834   0000A0E3           MOV      R0,#+0
   \   00000838   ........           _BLF     __dMul,??__dMul??rA
   \   0000083C   0020A0E1           MOV      R2,R0
   \   00000840   0130A0E1           MOV      R3,R1
   \   00000844   0900A0E1           MOV      R0,R9
   \   00000848   0A10A0E1           MOV      R1,R10
   \   0000084C   ........           _BLF     __dSub,??__dSub??rA
   \   00000850   ........           _BLF     __doubleToLong,??__doubleToLong??rA
    770                              int rMinutes = rTime / SEC_TO_MINUTES;
   \   00000854   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000858   0090A0E1           MOV      R9,R0
   \   0000085C   01A0A0E1           MOV      R10,R1
   \   00000860   0020A0E3           MOV      R2,#+0
   \   00000864   4034A0E3           MOV      R3,#+1073741824
   \   00000868   4E3883E3           ORR      R3,R3,#0x4E0000
   \   0000086C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000870   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000874   0070A0E1           MOV      R7,R0
    771                              rTime -= rMinutes * SEC_TO_MINUTES;
    772                              int rSeconds = rTime;
    773                              sprintf(tmpBuf, "%2i:%2i:%2i", rHours, rMinutes, rSeconds);
   \   00000878   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   0000087C   0020A0E1           MOV      R2,R0
   \   00000880   0130A0E1           MOV      R3,R1
   \   00000884   0000A0E3           MOV      R0,#+0
   \   00000888   4014A0E3           MOV      R1,#+1073741824
   \   0000088C   4E1881E3           ORR      R1,R1,#0x4E0000
   \   00000890   ........           _BLF     __dMul,??__dMul??rA
   \   00000894   0020A0E1           MOV      R2,R0
   \   00000898   0130A0E1           MOV      R3,R1
   \   0000089C   0900A0E1           MOV      R0,R9
   \   000008A0   0A10A0E1           MOV      R1,R10
   \   000008A4   ........           _BLF     __dSub,??__dSub??rA
   \   000008A8   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   000008AC   01002DE9           PUSH     {R0}
   \   000008B0   04209DE5           LDR      R2,[SP, #+4]
   \   000008B4   0730A0E1           MOV      R3,R7
   \   000008B8   3C108BE2           ADD      R1,R11,#+60
   \   000008BC   28008DE2           ADD      R0,SP,#+40
   \   000008C0   ........           _BLF     sprintf,??sprintf??rA
    774                              if ( Buf ) {
   \   000008C4   000056E3           CMP      R6,#+0
   \   000008C8   04D08DE2           ADD      SP,SP,#+4
   \   000008CC   0400000A           BEQ      ??ConvertFromSi_86
    775                                  sprintf(Buf, "%*s", Width, tmpBuf);
   \   000008D0   24308DE2           ADD      R3,SP,#+36
   \   000008D4   0820A0E1           MOV      R2,R8
   \   000008D8   551F8FE2           ADR      R1,??ConvertFromSi_7  ;; "%*s"
   \   000008DC   0600A0E1           MOV      R0,R6
   \   000008E0   ........           _BLF     sprintf,??sprintf??rA
    776                              }
    777                              Val /= SEC_TO_HOURS;
   \                     ??ConvertFromSi_86:
   \   000008E4   64319FE5           LDR      R3,??ConvertFromSi_7+0x1C  ;; 0x40ac2000
   \   000008E8   BDFFFFEA           B        ??ConvertFromSi_84
    778                          }
    779                          break;
    780                      }
    781                      break;
    782                  case MSECOND_UNIT :
    783                      switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_87:
   \   000008EC   01A04AE2           SUB      R10,R10,#+1
   \   000008F0   04005AE3           CMP      R10,#+4
   \   000008F4   0400008A           BHI      ??ConvertFromSi_88
   \   000008F8   010F8FE2           ADR      R0,??ConvertFromSi_6
   \   000008FC   0A00D0E7           LDRB     R0,[R0, R10]
   \   00000900   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertFromSi_6:
   \   00000904   03050701           DC8      +3,+5,+7,+1
   \   00000908   09000000           DC8      +9,+0,+0,+0
    784                      default:
    785                      case U_MSECONDS :
    786                          DecPnt = 0;
   \                     ??ConvertFromSi_88:
   \   0000090C   0070A0E3           MOV      R7,#+0
   \   00000910   0D0000EA           B        ??ConvertFromSi_89
    787                          break;
    788                      case U_SECONDS :
    789                          DecPnt = 3;
    790                          Val /= 1000.0;
   \                     ??ConvertFromSi_90:
   \   00000914   ........           LDR      R3,??DataTable58  ;; 0x408f4000
   \   00000918   040000EA           B        ??ConvertFromSi_91
    791                          break;
    792                      case U_MINUTES :
    793                          DecPnt = 3;
    794                          Val /= 60000.0;
   \                     ??ConvertFromSi_92:
   \   0000091C   ........           LDR      R3,??DataTable107  ;; 0x40ed4c00
   \   00000920   020000EA           B        ??ConvertFromSi_91
    795                          break;
    796                      case U_HOURS :
    797                          DecPnt = 3;
    798                          Val /= SEC_TO_HOURS * 1000.0;
   \                     ??ConvertFromSi_93:
   \   00000924   2C319FE5           LDR      R3,??ConvertFromSi_7+0x24  ;; 0x414b7740
   \   00000928   000000EA           B        ??ConvertFromSi_91
    799                          break;
    800                      case U_DAYS :
    801                          DecPnt = 3;
    802                          Val /= SEC_TO_DAYS * 1000.0;
   \                     ??ConvertFromSi_94:
   \   0000092C   28319FE5           LDR      R3,??ConvertFromSi_7+0x28  ;; 0x41949970
   \                     ??ConvertFromSi_91:
   \   00000930   0370A0E3           MOV      R7,#+3
   \   00000934   0400A0E1           MOV      R0,R4
   \   00000938   0510A0E1           MOV      R1,R5
   \   0000093C   0020A0E3           MOV      R2,#+0
   \   00000940   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000944   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000948   0090A0E1           MOV      R9,R0
    803                          break;
    804                      }
    805                      if ( Buf ) {
   \                     ??ConvertFromSi_89:
   \   0000094C   000056E3           CMP      R6,#+0
   \   00000950   3100000A           BEQ      ??ConvertFromSi_9
    806                          sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000954   0900A0E1           MOV      R0,R9
   \   00000958   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000095C   03002DE9           PUSH     {R0,R1}
   \   00000960   270000EA           B        ??ConvertFromSi_23
    807                      }
    808                      break;
    809                  case REVOLUTIONS_UNIT:
    810                      {
    811                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_95:
   \   00000964   01005AE3           CMP      R10,#+1
   \   00000968   0700001A           BNE      ??ConvertFromSi_96
    812                          case U_RPS:
    813                              Val /= 60.0;
   \   0000096C   0400A0E1           MOV      R0,R4
   \   00000970   0510A0E1           MOV      R1,R5
   \   00000974   0020A0E3           MOV      R2,#+0
   \   00000978   4034A0E3           MOV      R3,#+1073741824
   \   0000097C   4E3883E3           ORR      R3,R3,#0x4E0000
   \   00000980   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000984   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000988   0090A0E1           MOV      R9,R0
    814                              break;
    815                          case U_RPM:
    816                          default:
    817                              break;
    818                          }
    819                          if ( Buf ) {
   \                     ??ConvertFromSi_96:
   \   0000098C   000056E3           CMP      R6,#+0
   \   00000990   2100000A           BEQ      ??ConvertFromSi_9
    820                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000994   0900A0E1           MOV      R0,R9
   \   00000998   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000099C   03002DE9           PUSH     {R0,R1}
   \   000009A0   170000EA           B        ??ConvertFromSi_23
    821                          }
    822                      }
    823                      break;
    824                  case VISCOSITY_UNIT:
    825                      {
    826                          switch ( CurrentUnit ) {
   \                     ??ConvertFromSi_97:
   \   000009A4   01A05AE2           SUBS     R10,R10,#+1
   \   000009A8   0400000A           BEQ      ??ConvertFromSi_98
   \   000009AC   01A05AE2           SUBS     R10,R10,#+1
   \   000009B0   0A00001A           BNE      ??ConvertFromSi_99
    827                          case U_CENTIPOISE:
    828                              Val *= 1000.0;
   \   000009B4   ........           LDR      R1,??DataTable58  ;; 0x408f4000
   \   000009B8   0000A0E3           MOV      R0,#+0
   \   000009BC   020000EA           B        ??ConvertFromSi_100
    829                              break;
    830                          case U_POISE:
    831                              Val *= 10.0;
   \                     ??ConvertFromSi_98:
   \   000009C0   0000A0E3           MOV      R0,#+0
   \   000009C4   4014A0E3           MOV      R1,#+1073741824
   \   000009C8   901981E3           ORR      R1,R1,#0x240000
   \                     ??ConvertFromSi_100:
   \   000009CC   0420A0E1           MOV      R2,R4
   \   000009D0   0530A0E1           MOV      R3,R5
   \   000009D4   ........           _BLF     __dMul,??__dMul??rA
   \   000009D8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000009DC   0090A0E1           MOV      R9,R0
    832                              break;
    833                          case U_PASCAL_SECONDS:
    834                          default:
    835                              break;
    836                          }
    837                          if ( Buf ) {
   \                     ??ConvertFromSi_99:
   \   000009E0   000056E3           CMP      R6,#+0
   \   000009E4   0C00000A           BEQ      ??ConvertFromSi_9
    838                              sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   000009E8   0900A0E1           MOV      R0,R9
   \   000009EC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000009F0   03002DE9           PUSH     {R0,R1}
   \   000009F4   020000EA           B        ??ConvertFromSi_23
    839                          }
    840                      }
    841                      break;
    842                  case NO_UNIT:
    843                      if ( Buf ) {
   \                     ??ConvertFromSi_101:
   \   000009F8   000056E3           CMP      R6,#+0
   \   000009FC   0600000A           BEQ      ??ConvertFromSi_9
    844                          sprintf(Buf, "%*.*f", Width, DecPnt, Val);
   \   00000A00   30002DE9           PUSH     {R4,R5}
   \                     ??ConvertFromSi_23:
   \   00000A04   0730A0E1           MOV      R3,R7
   \                     ??ConvertFromSi_77:
   \   00000A08   0820A0E1           MOV      R2,R8
   \   00000A0C   14108BE2           ADD      R1,R11,#+20
   \   00000A10   0600A0E1           MOV      R0,R6
   \   00000A14   ........           _BLF     sprintf,??sprintf??rA
   \   00000A18   08D08DE2           ADD      SP,SP,#+8
    845                      }
    846                      break;
    847                  }
    848              }
    849          #ifdef S2TXU
    850              OS_Unuse(&UnitSema);
   \                     ??ConvertFromSi_9:
   \   00000A1C   ........           LDR      R0,??DataTable10  ;; UnitSema
   \   00000A20   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    851          #endif
    852              return (Val);
   \   00000A24   0900A0E1           MOV      R0,R9
   \   00000A28   74D08DE2           ADD      SP,SP,#+116
   \   00000A2C   F04FBDE8           POP      {R4-R11,LR}
   \   00000A30   1EFF2FE1           BX       LR               ;; return
   \                     ??ConvertFromSi_7:
   \   00000A34   252A7300           DC8      "%*s"
   \   00000A38   ........           DC32     `?<Constant "Floating point Err">`
   \   00000A3C   FA021550           DC32     0x501502fa
   \   00000A40   0C22C442           DC32     0x42c4220c
   \   00000A44   17D7C83D           DC32     0x3dc8d717
   \   00000A48   E7E567D5           DC32     0xffffffffd567e5e7
   \   00000A4C   1DAD813F           DC32     0x3f81ad1d
   \   00000A50   0020AC40           DC32     0x40ac2000
   \   00000A54   0018F540           DC32     0x40f51800
   \   00000A58   40774B41           DC32     0x414b7740
   \   00000A5C   70999441           DC32     0x41949970
    853          }
    854          

   \                                 In segment CODE, align 4, keep-with-next
    855          float GetCorrectedWeight(float Wgt, float Density) {
   \                     ??GetCorrectedWeight:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    856              int CurrentUnit = System_Unit[DENSITY_UNIT].CurrentUnit;
    857              switch ( CurrentUnit ) {
   \   00000008   ........           LDR      R0,??DataTable61  ;; System_Unit + 476
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0800001A           BNE      ??GetCorrectedWeight_1
    858              case U_LB_USG :
    859              case U_TON_M3_VAC :
    860              default :
    861                  break;
    862              case U_TON_M3_AIR :
    863                  Wgt /= Density / DnsInVac_to_DnsInAir(Density);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??DnsInVac_to_DnsInAir,??DnsInVac_to_DnsInAir??rA
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     __fDiv,??__fDiv??rA
   \   0000003C   0040A0E1           MOV      R4,R0
    864                  break;
    865              }
    866              return Wgt;
   \                     ??GetCorrectedWeight_1:
   \   00000040   ........           B        ?Subroutine25
    867          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   3040BDE8           POP      {R4,R5,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
    868          

   \                                 In segment CODE, align 4, keep-with-next
    869          float CorrectToWeightInVacuum(float Wgt, float Density) {
   \                     ??CorrectToWeightInVacuum:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    870              int CurrentUnit = System_Unit[DENSITY_UNIT].CurrentUnit;
    871              switch ( CurrentUnit ) {
   \   00000008   ........           LDR      R0,??DataTable61  ;; System_Unit + 476
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0700001A           BNE      ??CorrectToWeightInVacuum_1
    872              case U_LB_USG :
    873              case U_TON_M3_VAC :
    874              default :
    875                  break;
    876              case U_TON_M3_AIR :
    877                  Wgt *= Density / DnsInVac_to_DnsInAir(Density);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??DnsInVac_to_DnsInAir,??DnsInVac_to_DnsInAir??rA
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           _BLF     __fMul,??__fMul??rA
   \   00000038   0040A0E1           MOV      R4,R0
    878                  break;
    879              }
    880              return Wgt;
   \                     ??CorrectToWeightInVacuum_1:
   \   0000003C                      REQUIRE ?Subroutine25
   \   0000003C                      ;; // Fall through to label ?Subroutine25
    881          }
    882          

   \                                 In segment CODE, align 4, keep-with-next
    883          AnsiString GetUnitName(int UnitId) {
   \                     ??GetUnitName:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    884          
    885              AnsiString UnitStr;
    886          #ifdef S2TXU
    887              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R5,??DataTable109  ;; UnitSema
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     OS_Use,??OS_Use??rA
    888          #endif
    889              if ( UnitId > 0 && UnitId < UNIT_SETS ) {
   \   00000020   010056E3           CMP      R6,#+1
   \   00000024   130000BA           BLT      ??GetUnitName_1
   \   00000028   1D0056E3           CMP      R6,#+29
   \   0000002C   110000AA           BGE      ??GetUnitName_1
    890                  UnitControlStruct *UnitPtr = &System_Unit[UnitId];
   \   00000030   ........           LDR      R0,??DataTable71  ;; System_Unit
   \   00000034   3010A0E3           MOV      R1,#+48
   \   00000038   910620E0           MLA      R0,R1,R6,R0
    891                  UnitStr = FindDictionaryWord(UnitPtr->Name[UnitPtr->CurrentUnit]);
   \   0000003C   2C1090E5           LDR      R1,[R0, #+44]
   \   00000040   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000044   041090E5           LDR      R1,[R0, #+4]
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000050   ........           LDR      R0,??DataTable72  ;; ??npos
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   003090E5           LDR      R3,[R0, #+0]
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??assign,??assign??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
    892              }
    893          
    894          #ifdef S2TXU
    895              OS_Unuse(&UnitSema);
   \                     ??GetUnitName_1:
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    896          #endif
    897              return (UnitStr);
   \   00000080   1CD08DE2           ADD      SP,SP,#+28
   \   00000084                      REQUIRE ?Subroutine26
   \   00000084                      ;; // Fall through to label ?Subroutine26
    898          }
    899          

   \                                 In segment CODE, align 4, keep-with-next
    900          int GetUnit(int UnitId) {
   \                     ??GetUnit:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    901              int Unit;
    902          #ifdef S2TXU
    903              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R5,??DataTable109  ;; UnitSema
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
    904          #endif
    905              if ( UnitId > 0 && UnitId < UNIT_SETS ) {
   \   00000014   010054E3           CMP      R4,#+1
   \   00000018   050000BA           BLT      ??GetUnit_1
   \   0000001C   1D0054E3           CMP      R4,#+29
    906                  Unit = System_Unit[UnitId].CurrentUnit;
   \   00000020   ........           LDRLT    R1,??DataTable71  ;; System_Unit
   \   00000024   3000A0B3           MOVLT    R0,#+48
   \   00000028   901421B0           MLALT    R1,R0,R4,R1
   \   0000002C   2C4091B5           LDRLT    R4,[R1, #+44]
   \   00000030   000000BA           BLT      ??GetUnit_2
    907              } else {
    908                  Unit = 0;
   \                     ??GetUnit_1:
   \   00000034   0040A0E3           MOV      R4,#+0
    909              }
    910          #ifdef S2TXU
    911              OS_Unuse(&UnitSema);
   \                     ??GetUnit_2:
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    912          #endif
    913              return Unit;
   \   00000040   ........           B        ?Subroutine25
    914          }

   \                                 In segment CODE, align 4, keep-with-next
    915          AnsiString GetUnitGroupName(int UnitId) {
   \                     ??GetUnitGroupName:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    916              UnitControlStruct *UnitPtr = &System_Unit[UnitId];
    917          #ifdef S2TXU
    918              OS_Use(&UnitSema);
   \   00000004   ........           LDR      R6,??DataTable109  ;; UnitSema
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
    919          #endif
    920              AnsiString UnitStr = FindDictionaryWord(UnitPtr->GroupName);
   \   00000018   ........           LDR      R1,??DataTable71  ;; System_Unit
   \   0000001C   3000A0E3           MOV      R0,#+48
   \   00000020   901521E0           MLA      R1,R0,R5,R1
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
    921          #ifdef S2TXU
    922              OS_Unuse(&UnitSema);
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    923          #endif
    924              return (UnitStr);
   \   00000038   ........           B        ?Subroutine26
    925          }
    926          
    927          
    928          
    929          

   \                                 In segment CODE, align 4, keep-with-next
    930          double GetFloat(AnsiString NewVal, int &Status) {
   \                     ??GetFloat:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    931              char *EndPtr = NULL;
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   00508DE5           STR      R5,[SP, #+0]
    932              int DecimalPnt = NewVal.AnsiPos(",");
   \   00000018   201F8FE2           ADR      R1,??GetFloat_1  ;; ","
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??AnsiPos,??AnsiPos??rA
   \   00000030   0070A0E1           MOV      R7,R0
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??_Tidy,??_Tidy??rA
    933          #ifdef S2TXU
    934              if ( DecimalPnt != string::npos ) {
   \   00000044   ........           LDR      R0,??DataTable72  ;; ??npos
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000057E1           CMP      R7,R0
   \   00000050   0500000A           BEQ      ??GetFloat_2
    935                  NewVal[DecimalPnt] = '.';
   \   00000054   180096E5           LDR      R0,[R6, #+24]
   \   00000058   2E10A0E3           MOV      R1,#+46
   \   0000005C   100050E3           CMP      R0,#+16
   \   00000060   04009625           LDRCS    R0,[R6, #+4]
   \   00000064   04008632           ADDCC    R0,R6,#+4
   \   00000068   0010C7E7           STRB     R1,[R7, +R0]
    936              }
    937          #else
    938              if ( DecimalPnt > 0 ) {
    939                  NewVal[DecimalPnt] = '.';
    940              }
    941          
    942          #endif
    943              double DoubleValue = strtod(NewVal.c_str(), &EndPtr);
   \                     ??GetFloat_2:
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           _BLF     ??c_str,??c_str??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   ........           _BLF     _Stod,??_Stod??rA
    944              if ( *EndPtr == 0 ) {
   \   00000080   00209DE5           LDR      R2,[SP, #+0]
   \   00000084   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000088   000052E3           CMP      R2,#+0
    945                  Status = E_NO_ERR;
    946              } else {
    947                  Status = E_INPUT_ERR;
   \   0000008C   0150A013           MOVNE    R5,#+1
   \   00000090   005084E5           STR      R5,[R4, #+0]
    948              }
    949              return (DoubleValue);
   \   00000094   20D08DE2           ADD      SP,SP,#+32
   \   00000098   F040BDE8           POP      {R4-R7,LR}
   \   0000009C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetFloat_1:
   \   000000A0   2C000000           DC8      ",",+0,+0
    950          }
    951          
    952          

   \                                 In segment CODE, align 4, keep-with-next
    953          int GetInt(AnsiString NewVal, int &Status) {
   \                     ??GetInt:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    954              char *EndPtr = NULL;
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
    955              int Value = strtol(NewVal.c_str(), &EndPtr, 10);
   \   00000010   ........           _BLF     ??c_str,??c_str??rA
   \   00000014   0A20A0E3           MOV      R2,#+10
   \   00000018   ........           B        ?Subroutine22
    956              if ( *EndPtr == 0 ) {
    957                  Status = E_NO_ERR;
    958              } else {
    959                  Status = E_INPUT_ERR;
    960              }
    961              return (Value);
    962          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0D10A0E1           MOV      R1,SP
   \   00000004   ........           _BLF     strtol,??strtol??rA
   \                     ??Subroutine22_0:
   \   00000008   00109DE5           LDR      R1,[SP, #+0]
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0110A013           MOVNE    R1,#+1
   \   00000018   001084E5           STR      R1,[R4, #+0]
   \   0000001C   1240BDE8           POP      {R1,R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
    963          

   \                                 In segment CODE, align 4, keep-with-next
    964          unsigned GetUnsigned(AnsiString NewVal, int &Status) {
   \                     ??GetUnsigned:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    965              char *EndPtr = NULL;
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
    966              int Value = strtoul(NewVal.c_str(), &EndPtr, 10);
   \   00000010   ........           _BLF     ??c_str,??c_str??rA
   \   00000014   0A20A0E3           MOV      R2,#+10
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   ........           _BLF     _Stoul,??_Stoul??rA
    967              if ( *EndPtr == 0 ) {
   \   00000020   ........           B        ??Subroutine22_0
    968                  Status = E_NO_ERR;
    969              } else {
    970                  Status = E_INPUT_ERR;
    971              }
    972              return (Value);
    973          }
    974          
    975          

   \                                 In segment CODE, align 4, keep-with-next
    976          unsigned GetHex(AnsiString NewVal, int &Status) {
   \                     ??GetHex:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    977              char *EndPtr = NULL;
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
    978              unsigned Value = strtol(NewVal.c_str(), &EndPtr, 16);
   \   00000010   ........           _BLF     ??c_str,??c_str??rA
   \   00000014   1020A0E3           MOV      R2,#+16
   \   00000018                      REQUIRE ?Subroutine22
   \   00000018                      ;; // Fall through to label ?Subroutine22
    979              if ( *EndPtr == 0 ) {
    980                  Status = E_NO_ERR;
    981              } else {
    982                  Status = E_INPUT_ERR;
    983              }
    984              return (Value);
    985          }
    986          
    987          
    988          
    989          

   \                                 In segment CODE, align 4, keep-with-next
    990          float ConvertToSi(AnsiString NewValue, int Unit, int &Error, double Min, double Max, double OldVal) {
   \                     ??ConvertToSi:
   \   00000000   08002DE9           PUSH     {R3}
   \   00000004   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000008   20D04DE2           SUB      SP,SP,#+32
   \   0000000C   0070A0E1           MOV      R7,R0
   \   00000010   4C008DE2           ADD      R0,SP,#+76
   \   00000014   000C90E8           LDM      R0,{R10,R11}
   \   00000018   54008DE2           ADD      R0,SP,#+84
   \   0000001C   000390E8           LDM      R0,{R8,R9}
   \   00000020   ........           LDR      R0,??DataTable109  ;; UnitSema
    991              double Val;
    992          #ifdef S2TXU
    993              OS_Use(&UnitSema);
   \   00000024   ........           _BLF     OS_Use,??OS_Use??rA
    994          #endif
    995              int Status = E_NO_ERR;
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
    996              if ( !strpbrk(NewValue.c_str(), "EeDdGg") ) { // Filter out some illegal chars
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   ........           _BLF     ??c_str,??c_str??rA
   \   00000038   F0159FE5           LDR      R1,??ConvertToSi_5  ;; `?<Constant "EeDdGg">`
   \   0000003C   ........           _BLF     _Strpbrk,??_Strpbrk??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   6801001A           BNE      ??ConvertToSi_6
    997                  int CurrentUnit = System_Unit[Unit].CurrentUnit;
   \   00000048   20009DE5           LDR      R0,[SP, #+32]
   \   0000004C   ........           LDR      R2,??DataTable71  ;; System_Unit
   \   00000050   3010A0E3           MOV      R1,#+48
   \   00000054   912020E0           MLA      R0,R1,R0,R2
   \   00000058   2C6090E5           LDR      R6,[R0, #+44]
    998                  bool isNormalFloatInput = true;
    999                  switch ( Unit ) {
   \   0000005C   20009DE5           LDR      R0,[SP, #+32]
   \   00000060   010050E2           SUBS     R0,R0,#+1
   \   00000064   0300000A           BEQ      ??ConvertToSi_7
   \   00000068   130040E2           SUB      R0,R0,#+19
   \   0000006C   040050E3           CMP      R0,#+4
   \   00000070   0300009A           BLS      ??ConvertToSi_8
   \   00000074   040000EA           B        ??ConvertToSi_9
   1000                  case LENGTH_UNIT    :
   1001                      // Is it feet. If not feet, we can expect float
   1002                      if ( CurrentUnit == U_FEET ) {
   \                     ??ConvertToSi_7:
   \   00000078   010056E3           CMP      R6,#+1
   \   0000007C   0200001A           BNE      ??ConvertToSi_9
   \   00000080   140000EA           B        ??ConvertToSi_10
   1003                          isNormalFloatInput = false;
   1004                      }
   1005                      break;
   1006                  case TIME_UNIT      :
   1007                  case MSECOND_UNIT   :
   1008                  case SECOND_UNIT    :
   1009                  case MINUTE_UNIT    :
   1010                  case HOUR_UNIT      :
   1011                      // Is it a time unit. If not U_TIME_HOURS, we can expect float
   1012                      if ( CurrentUnit == U_TIME_HOURS ) {
   \                     ??ConvertToSi_8:
   \   00000084   040056E3           CMP      R6,#+4
   \   00000088   1200000A           BEQ      ??ConvertToSi_10
   1013                          isNormalFloatInput = false;
   1014                      }
   1015                      break;
   1016                  }
   1017                  if ( isNormalFloatInput ) {
   1018                      Val = GetFloat(NewValue, Status);
   \                     ??ConvertToSi_9:
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   04008DE2           ADD      R0,SP,#+4
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000009C   ........           LDR      R0,??DataTable72  ;; ??npos
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   003090E5           LDR      R3,[R0, #+0]
   \   000000A8   0710A0E1           MOV      R1,R7
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           _BLF     ??assign,??assign??rA
   \   000000B4   0D10A0E1           MOV      R1,SP
   \   000000B8   04008DE2           ADD      R0,SP,#+4
   \   000000BC   ........           BL       ??GetFloat
   \   000000C0   0040A0E1           MOV      R4,R0
   \   000000C4   0150A0E1           MOV      R5,R1
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   04008DE2           ADD      R0,SP,#+4
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   1019                  }
   1020                  if ( Status == E_NO_ERR ) {
   \                     ??ConvertToSi_10:
   \   000000D8   00009DE5           LDR      R0,[SP, #+0]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   2700001A           BNE      ??ConvertToSi_11
   1021                      switch ( Unit ) {
   \   000000E4   20009DE5           LDR      R0,[SP, #+32]
   \   000000E8   010040E2           SUB      R0,R0,#+1
   \   000000EC   1B0050E3           CMP      R0,#+27
   \   000000F0   2300008A           BHI      ??ConvertToSi_11
   \   000000F4   021F8FE2           ADR      R1,??ConvertToSi_1
   \   000000F8   8000A0E1           MOV      R0,R0, LSL #+1
   \   000000FC   B01091E1           LDRH     R1,[R1, R0]
   \   00000100   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ConvertToSi_1:
   \   00000104   0D0086007500       DC16     +13,+134,+117,+159
   \              9F00        
   \   0000010C   6A00A400A400       DC16     +106,+164,+164,+164
   \              A400        
   \   00000114   4200CD005200       DC16     +66,+205,+82,+31
   \              1F00        
   \   0000011C   D400D9001F00       DC16     +212,+217,+31,+233
   \              E900        
   \   00000124   F100FA001F00       DC16     +241,+250,+31,+257
   \              0101        
   \   0000012C   010101010101       DC16     +257,+257,+257,+257
   \              0101        
   \   00000134   1F001F001A01       DC16     +31,+31,+282,+288
   \              2001        
   1022                      case LENGTH_UNIT :
   1023                          switch ( CurrentUnit ) {
   \                     ??ConvertToSi_12:
   \   0000013C   016056E2           SUBS     R6,R6,#+1
   \   00000140   0900000A           BEQ      ??ConvertToSi_13
   \   00000144   016056E2           SUBS     R6,R6,#+1
   \   00000148   0D00001A           BNE      ??ConvertToSi_11
   1024                          default :
   1025                          case U_METER :
   1026                              break;
   1027                          case U_DECIMAL_FEET :
   1028                              Val *= FEET_TO_METER;        // Convert from meter to decimal feet
   \   0000014C   ........           LDR      R0,??DataTable73  ;; 0xffffffffdbf487fd
   \   00000150   ........           LDR      R1,??DataTable74  ;; 0x3fd381d7
   \                     ??ConvertToSi_14:
   \   00000154   0420A0E1           MOV      R2,R4
   \   00000158   0530A0E1           MOV      R3,R5
   \   0000015C   ........           _BLF     __dMul,??__dMul??rA
   \                     ??ConvertToSi_15:
   \   00000160   0040A0E1           MOV      R4,R0
   \   00000164   0150A0E1           MOV      R5,R1
   \   00000168   080000EA           B        ??ConvertToSi_16
   1029                              break;
   1030                          case U_FEET :
   1031                              Val = Make_str_to_feet((char *)NewValue.c_str());
   \                     ??ConvertToSi_13:
   \   0000016C   0700A0E1           MOV      R0,R7
   \   00000170   ........           _BLF     ??c_str,??c_str??rA
   \   00000174   ........           _BLF     ??Make_str_to_feet,??Make_str_to_feet??rA
   \                     ??ConvertToSi_17:
   \   00000178   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000017C   0040A0E1           MOV      R4,R0
   \   00000180   0150A0E1           MOV      R5,R1
   1032                              break;
   1033                          }
   1034          
   1035                          break;
   1036                      case DENSITY_UNIT:
   1037                          switch ( CurrentUnit ) {
   1038                          default :
   1039                          case U_TON_M3_VAC :
   1040                              break;
   1041                          case U_TON_M3_AIR :
   1042                              Val = DnsInAir_to_DnsInVac(Val);
   1043                              break;
   1044                          case U_LB_USG :
   1045                              Val /= TM3_TO_LBUSG;
   1046                              break;
   1047                          }
   1048                          break;
   1049                      case DNS_COEFF_UNIT:
   1050                          if ( Val >= 1.0 ) Val /= 100000.0;
   1051                          switch ( CurrentUnit ) {
   1052          
   1053                          default :
   1054                          case U_TON_M3_C :
   1055                          case U_LBUSG_C :
   1056                              break;
   1057                          case U_TON_M3_F :
   1058                          case U_LBUSG_F :
   1059                              Val /= COEFF_C_TO_F;
   1060                              break;
   1061                          }
   1062                          break;
   1063                      case TEMP_UNIT :
   1064                          switch ( CurrentUnit ) {
   1065                          default :
   1066                          case U_CELCIUS :
   1067                              break;
   1068                          case U_FARENHEIT :
   1069                              Val = FAHRENHEIT_TO_C(Val);
   1070                          }
   1071                          break;
   1072                      case WEIGHT_UNIT:
   1073                          switch ( CurrentUnit ) {
   1074                          case U_TON:
   1075                          default :
   1076                              break;
   1077                          case U_LONGTON:
   1078                              Val *= TON_TO_LONGTON;
   1079                              break;
   1080                          case U_KNEWTON:
   1081                              Val /= GRAVITY;
   1082                              break;
   1083                          }
   1084                          break;
   1085                      case MOL_WEIGHT_UNIT:
   1086                          switch ( CurrentUnit ) {
   1087                          case U_ATOMIC_M_UNIT:
   1088                          default :
   1089                              break;
   1090                          }
   1091                          break;
   1092                      case VOLUME_UNIT :
   1093                          switch ( CurrentUnit ) {
   1094                          case U_METER3:
   1095                          default :
   1096                              break;
   1097                          case U_USGALLON:
   1098                              Val /= M3_TO_USGALL;
   1099                              break;
   1100                          case U_USBARRELS:
   1101                              Val /= M3_TO_USBARR;
   1102                              break;
   1103                          case U_LITER :
   1104                              Val /= M3_TO_LITER;
   1105                              break;
   1106                          }
   1107                          break;
   1108                      case LOADRATE_UNIT :
   1109                          switch ( CurrentUnit ) {
   1110                          case U_M3_HOUR:
   1111                          default :
   1112                              break;
   1113                          case U_USBARRELS_HOUR:
   1114                              Val /= M3_TO_USBARR;
   1115                              break;
   1116                          }
   1117                          break;
   1118                      case PRESSURE_UNIT1:
   1119                      case PRESSURE_UNIT2:
   1120                      case PRESSURE_UNIT3:
   1121                          switch ( CurrentUnit ) {
   1122                          case U_METERH2O :
   1123                              break;
   1124                          case U_MBAR :
   1125                              Val /= MH2O_TO_MBAR;
   1126                              break;
   1127                          case U_BAR :
   1128                              Val /= MH2O_TO_BAR;
   1129                              break;
   1130                          case U_PSI :
   1131                              Val /= MH2O_TO_PSI;
   1132                              break;
   1133                          case U_KPA:
   1134                              Val /= MH2O_TO_KPA;
   1135                              break;
   1136                          case U_INCH_H2O:
   1137                              Val /= MH2O_TO_INCH_H2O;
   1138                              break;
   1139                          case U_INCH_HG:
   1140                              Val /= MH2O_TO_INCH_HG;
   1141                              break;
   1142                          case U_MMH2O:
   1143                              Val /= MH2O_TO_MMH2O;
   1144                              break;
   1145                          }
   1146                          break;
   1147                      case ANGLE_UNIT :
   1148                          switch ( CurrentUnit ) {
   1149                          case U_DEGREES :
   1150                              Val /= RAD_FACTOR;
   1151                              break;
   1152                          case U_RADIANS :
   1153                              break;
   1154                          }
   1155                          break;
   1156                      case FREE_SURF_UNIT:
   1157                          switch ( CurrentUnit ) {
   1158                          case U_METER4 :
   1159                              break;
   1160                          }
   1161                          break;
   1162                      case MOMENT_UNIT:
   1163                          switch ( CurrentUnit ) {
   1164                          default :
   1165                          case U_TON_METER :
   1166                              break;
   1167                          case U_LTON_FEET :
   1168                              Val /= TON_TO_LONGTON / FEET_TO_METER;
   1169                              break;
   1170                          case U_KNEWTON_METER:
   1171                              Val /= GRAVITY;
   1172                              break;
   1173                          }
   1174                          break;
   1175                      case IMMERSION_UNIT:
   1176                          switch ( CurrentUnit ) {
   1177                          case U_TON_PER_CM :
   1178                              Val *= 100.0;
   1179                              break;
   1180                          case U_L_TON_PER_INCH:
   1181                              Val *= TON_TO_LONGTON / INCH_TO_METER;
   1182          
   1183                          }
   1184                          break;
   1185                      case GZ_AREA_UNIT:
   1186                          switch ( CurrentUnit ) {
   1187                          case U_METER_RAD :
   1188                              break;
   1189                          }
   1190                          break;
   1191                      case PERCENT_UNIT:
   1192                          switch ( CurrentUnit ) {
   1193                          case U_PERCENT:
   1194                              break;
   1195                          case U_PROMIL:
   1196                              Val /= 10.0;
   1197                              break;
   1198                          }
   1199                          break;
   1200                      case CURRENT_UNIT:
   1201                          switch ( CurrentUnit ) {
   1202                          case U_AMPERE:
   1203                              break;
   1204                          case U_MAMPERE:
   1205                              Val /= 1000.0;
   1206                              break;
   1207                          }
   1208                      case VOLTAGE_UNIT:
   1209                          switch ( CurrentUnit ) {
   1210                          case U_VOLT:
   1211                              break;
   1212                          case U_MVOLT:
   1213                              Val /= 1000.0;
   1214                              break;
   1215                          }
   1216                          break;
   1217                      case FREQUENCY_UNIT:
   1218                          switch ( CurrentUnit ) {
   1219                          case U_HZ:
   1220                          default:
   1221                              break;
   1222                          }
   1223                          break;
   1224          
   1225          
   1226                      case TIME_UNIT :
   1227                      case MSECOND_UNIT :
   1228                      case SECOND_UNIT :
   1229                      case MINUTE_UNIT :
   1230                      case HOUR_UNIT :
   1231                          switch ( CurrentUnit ) {
   1232                          case U_MSECONDS :
   1233                              break;
   1234                          case U_SECONDS :
   1235                              Val *= MSEC_TO_SEC;
   1236                              break;
   1237                          case U_MINUTES :
   1238                              Val *= MIN_TO_MSEC;
   1239                              break;
   1240                          case U_HOURS :
   1241                              Val *= MIN_TO_MSEC*SEC_TO_HOURS;
   1242                              break;
   1243                          case U_TIME_HOURS:
   1244                              Val = Make_hour_time_str_to_seconds((char *)NewValue.c_str());
   1245                              break;
   1246                          }
   1247                          break;
   1248                      case REVOLUTIONS_UNIT:
   1249                          {
   1250                              switch ( CurrentUnit ) {
   1251                              case U_RPS:
   1252                                  Val *= 60.0;
   1253                                  break;
   1254                              case U_RPM:
   1255                              default:
   1256                                  break;
   1257                              }
   1258                          }
   1259                          break;
   1260                      case VISCOSITY_UNIT:
   1261                          {
   1262                              switch ( CurrentUnit ) {
   1263                              case U_CENTIPOISE:
   1264                                  Val /= 1000.0;
   1265                                  break;
   1266                              case U_POISE:
   1267                                  Val /= 10.0;
   1268                                  break;
   1269                              case U_PASCAL_SECONDS:
   1270                              default:
   1271                                  break;
   1272                              }
   1273                          }
   1274                          break;
   1275                      case NO_UNIT :
   1276                      default:
   1277                          break;
   1278                      }
   1279                  }
   1280                  if ( !Status ) {
   \                     ??ConvertToSi_11:
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   1601001A           BNE      ??ConvertToSi_6
   1281                      Error = E_NO_ERR;
   \                     ??ConvertToSi_16:
   \   00000190   24009DE5           LDR      R0,[SP, #+36]
   \   00000194   0010A0E3           MOV      R1,#+0
   \   00000198   001080E5           STR      R1,[R0, #+0]
   1282                      Min = FloatRound(Min, 6);
   \   0000019C   0620A0E3           MOV      R2,#+6
   \   000001A0   0A00A0E1           MOV      R0,R10
   \   000001A4   0B10A0E1           MOV      R1,R11
   \   000001A8   ........           _BLF     ??FloatRound,??FloatRound??rA
   \   000001AC   00A0A0E1           MOV      R10,R0
   \   000001B0   01B0A0E1           MOV      R11,R1
   1283                      Max = FloatRound(Max, 6);
   \   000001B4   0620A0E3           MOV      R2,#+6
   \   000001B8   0800A0E1           MOV      R0,R8
   \   000001BC   0910A0E1           MOV      R1,R9
   \   000001C0   ........           _BLF     ??FloatRound,??FloatRound??rA
   \   000001C4   0080A0E1           MOV      R8,R0
   \   000001C8   0190A0E1           MOV      R9,R1
   1284                      Val = FloatRound(Val, 6);
   \   000001CC   0620A0E3           MOV      R2,#+6
   \   000001D0   0400A0E1           MOV      R0,R4
   \   000001D4   0510A0E1           MOV      R1,R5
   \   000001D8   ........           _BLF     ??FloatRound,??FloatRound??rA
   \   000001DC   0040A0E1           MOV      R4,R0
   \   000001E0   0150A0E1           MOV      R5,R1
   1285          
   1286                      if ( Val > Max ) {
   \   000001E4   0800A0E1           MOV      R0,R8
   \   000001E8   0910A0E1           MOV      R1,R9
   \   000001EC   0420A0E1           MOV      R2,R4
   \   000001F0   0530A0E1           MOV      R3,R5
   \   000001F4   ........           _BLF     __dLess,??__dLess??rA
   \   000001F8   000050E3           CMP      R0,#+0
   \   000001FC   F000000A           BEQ      ??ConvertToSi_18
   1287                          Error = E_HIGH;
   \   00000200   24009DE5           LDR      R0,[SP, #+36]
   \   00000204   0610A0E3           MOV      R1,#+6
   \                     ??ConvertToSi_19:
   \   00000208   001080E5           STR      R1,[R0, #+0]
   \   0000020C   FC0000EA           B        ??ConvertToSi_20
   1288                      } else if ( Val < Min ) {
   \                     ??ConvertToSi_21:
   \   00000210   016056E2           SUBS     R6,R6,#+1
   \   00000214   0200000A           BEQ      ??ConvertToSi_22
   \   00000218   016056E2           SUBS     R6,R6,#+1
   \   0000021C   0500000A           BEQ      ??ConvertToSi_23
   \   00000220   D7FFFFEA           B        ??ConvertToSi_11
   \                     ??ConvertToSi_22:
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   0510A0E1           MOV      R1,R5
   \   0000022C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000230   ........           _BLF     ??DnsInAir_to_DnsInVac,??DnsInAir_to_DnsInVac??rA
   \   00000234   CFFFFFEA           B        ??ConvertToSi_17
   \                     ??ConvertToSi_23:
   \   00000238   ........           LDR      R2,??DataTable75  ;; 0xfffffffffc8f3238
   \   0000023C   ........           LDR      R3,??DataTable76  ;; 0x4020b0c1
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   0510A0E1           MOV      R1,R5
   \                     ??ConvertToSi_24:
   \   00000248   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000024C   C3FFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_25:
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   0510A0E1           MOV      R1,R5
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   C035A0E3           MOV      R3,#+805306368
   \   00000260   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000264   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   0600000A           BEQ      ??ConvertToSi_26
   \   00000270   BC339FE5           LDR      R3,??ConvertToSi_5+0x4  ;; 0x40f86a00
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   0510A0E1           MOV      R1,R5
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000284   0040A0E1           MOV      R4,R0
   \   00000288   0150A0E1           MOV      R5,R1
   \                     ??ConvertToSi_26:
   \   0000028C   016056E2           SUBS     R6,R6,#+1
   \   00000290   02605612           SUBSNE   R6,R6,#+2
   \   00000294   BAFFFF1A           BNE      ??ConvertToSi_11
   \   00000298   ........           LDR      R2,??DataTable77  ;; 0x71c708e6
   \   0000029C   ........           LDR      R3,??DataTable78  ;; 0x3fe1c71c
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   0510A0E1           MOV      R1,R5
   \                     ??ConvertToSi_27:
   \   000002A8   ........           _BLF     __dDiv,??__dDiv??rA
   \                     ??ConvertToSi_28:
   \   000002AC   ABFFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_29:
   \   000002B0   010056E3           CMP      R6,#+1
   \   000002B4   B2FFFF1A           BNE      ??ConvertToSi_11
   \   000002B8   0000A0E3           MOV      R0,#+0
   \   000002BC   C014A0E3           MOV      R1,#-1073741824
   \   000002C0   401881E3           ORR      R1,R1,#0x400000
   \   000002C4   0420A0E1           MOV      R2,R4
   \   000002C8   0530A0E1           MOV      R3,R5
   \   000002CC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000002D0   ........           LDR      R2,??DataTable79  ;; 0xffffffffcccccccd
   \   000002D4   ........           LDR      R3,??DataTable80  ;; 0x3ffccccc
   \   000002D8   DAFFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_30:
   \   000002DC   016056E2           SUBS     R6,R6,#+1
   \   000002E0   0200000A           BEQ      ??ConvertToSi_31
   \                     ??ConvertToSi_32:
   \   000002E4   016056E2           SUBS     R6,R6,#+1
   \   000002E8   0600000A           BEQ      ??ConvertToSi_33
   \   000002EC   A4FFFFEA           B        ??ConvertToSi_11
   \                     ??ConvertToSi_31:
   \   000002F0   ........           LDR      R0,??DataTable81  ;; 0x6747f760
   \   000002F4   ........           LDR      R1,??DataTable82  ;; 0x3ff041ba
   \                     ??ConvertToSi_34:
   \   000002F8   0420A0E1           MOV      R2,R4
   \   000002FC   0530A0E1           MOV      R3,R5
   \   00000300   ........           _BLF     __dMul,??__dMul??rA
   \   00000304   95FFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_33:
   \   00000308   ........           LDR      R2,??DataTable83  ;; 0x3a92a305
   \   0000030C   ........           LDR      R3,??DataTable84  ;; 0x40239d01
   \                     ??ConvertToSi_35:
   \   00000310   0400A0E1           MOV      R0,R4
   \   00000314   0510A0E1           MOV      R1,R5
   \   00000318   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000031C   8FFFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_36:
   \   00000320   016046E2           SUB      R6,R6,#+1
   \   00000324   020056E3           CMP      R6,#+2
   \   00000328   95FFFF8A           BHI      ??ConvertToSi_11
   \   0000032C   010F8FE2           ADR      R0,??ConvertToSi_2
   \   00000330   D60090E1           LDRSB    R0,[R0, R6]
   \   00000334   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertToSi_2:
   \   00000338   0D000800           DC8      +13,+0,+8,+0
   \                     ??ConvertToSi_37:
   \   0000033C   ........           LDR      R2,??DataTable85  ;; 0xffffffffba04732c
   \   00000340   ........           LDR      R3,??DataTable86  ;; 0x407082c0
   \                     ??ConvertToSi_38:
   \   00000344   0400A0E1           MOV      R0,R4
   \   00000348   0510A0E1           MOV      R1,R5
   \                     ??ConvertToSi_39:
   \   0000034C   ........           _BLF     __dDiv,??__dDiv??rA
   \                     ??ConvertToSi_40:
   \   00000350   0040A0E1           MOV      R4,R0
   \   00000354   0150A0E1           MOV      R5,R1
   \   00000358   8CFFFFEA           B        ??ConvertToSi_16
   \                     ??ConvertToSi_41:
   \   0000035C   ........           LDR      R2,??DataTable90  ;; 0x27af12f5
   \   00000360   ........           LDR      R3,??DataTable91  ;; 0x401928c4
   \   00000364   0400A0E1           MOV      R0,R4
   \   00000368   0510A0E1           MOV      R1,R5
   \   0000036C   B5FFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_42:
   \   00000370   ........           LDR      R3,??DataTable108  ;; 0x408f4000
   \   00000374   0400A0E1           MOV      R0,R4
   \   00000378   0510A0E1           MOV      R1,R5
   \   0000037C   0020A0E3           MOV      R2,#+0
   \   00000380   C8FFFFEA           B        ??ConvertToSi_27
   \                     ??ConvertToSi_43:
   \   00000384   010056E3           CMP      R6,#+1
   \   00000388   7DFFFF1A           BNE      ??ConvertToSi_11
   \   0000038C   ........           LDR      R2,??DataTable90  ;; 0x27af12f5
   \   00000390   ........           LDR      R3,??DataTable91  ;; 0x401928c4
   \   00000394   DDFFFFEA           B        ??ConvertToSi_35
   \                     ??ConvertToSi_44:
   \   00000398   016046E2           SUB      R6,R6,#+1
   \   0000039C   060056E3           CMP      R6,#+6
   \   000003A0   77FFFF8A           BHI      ??ConvertToSi_11
   \   000003A4   020F8FE2           ADR      R0,??ConvertToSi_3
   \   000003A8   8660A0E1           MOV      R6,R6, LSL #+1
   \   000003AC   F60090E1           LDRSH    R0,[R0, R6]
   \   000003B0   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertToSi_3:
   \   000003B4   1C0003000600       DC16     +28,+3,+6,+11
   \              0B00        
   \   000003BC   D4FF10001600       DC16     +65492,+16,+22,+0
   \              0000        
   \                     ??ConvertToSi_45:
   \   000003C4   6C229FE5           LDR      R2,??ConvertToSi_5+0x8  ;; 0xffffffff89374bc7
   \   000003C8   6C329FE5           LDR      R3,??ConvertToSi_5+0xC  ;; 0x40588441
   \   000003CC   DCFFFFEA           B        ??ConvertToSi_38
   \                     ??ConvertToSi_46:
   \   000003D0   68229FE5           LDR      R2,??ConvertToSi_5+0x10  ;; 0xffffffffda554b8c
   \   000003D4   68329FE5           LDR      R3,??ConvertToSi_5+0x14  ;; 0x3fb91ae2
   \   000003D8   0400A0E1           MOV      R0,R4
   \   000003DC   0510A0E1           MOV      R1,R5
   \   000003E0   98FFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_47:
   \   000003E4   ........           LDR      R2,??DataTable92  ;; 0xffffffffa4b9f7f8
   \   000003E8   ........           LDR      R3,??DataTable93  ;; 0x3ff6c1e1
   \   000003EC   0400A0E1           MOV      R0,R4
   \   000003F0   0510A0E1           MOV      R1,R5
   \   000003F4   ABFFFFEA           B        ??ConvertToSi_27
   \                     ??ConvertToSi_48:
   \   000003F8   ........           LDR      R2,??DataTable94  ;; 0xffffffffbd7a9f58
   \   000003FC   ........           LDR      R3,??DataTable95  ;; 0x4043af5e
   \   00000400   0400A0E1           MOV      R0,R4
   \   00000404   0510A0E1           MOV      R1,R5
   \   00000408   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000040C   53FFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_49:
   \   00000410   ........           LDR      R2,??DataTable96  ;; 0xfffffffff0be6e90
   \   00000414   ........           LDR      R3,??DataTable97  ;; 0x40072ace
   \   00000418   0400A0E1           MOV      R0,R4
   \   0000041C   0510A0E1           MOV      R1,R5
   \   00000420   ........           _BLF     __dDiv,??__dDiv??rA
   \                     ??ConvertToSi_50:
   \   00000424   4DFFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_51:
   \   00000428   ........           LDR      R3,??DataTable108  ;; 0x408f4000
   \   0000042C   0400A0E1           MOV      R0,R4
   \   00000430   0510A0E1           MOV      R1,R5
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   82FFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_52:
   \   0000043C   000056E3           CMP      R6,#+0
   \   00000440   4FFFFF1A           BNE      ??ConvertToSi_11
   \   00000444   ........           LDR      R2,??DataTable99  ;; 0x1a63c1f8
   \   00000448   ........           LDR      R3,??DataTable100  ;; 0x404ca5dc
   \   0000044C   0400A0E1           MOV      R0,R4
   \   00000450   0510A0E1           MOV      R1,R5
   \   00000454   93FFFFEA           B        ??ConvertToSi_27
   \                     ??ConvertToSi_53:
   \   00000458   016056E2           SUBS     R6,R6,#+1
   \   0000045C   A0FFFF1A           BNE      ??ConvertToSi_32
   \   00000460   ........           LDR      R2,??DataTable101  ;; 0x5acf6b77
   \   00000464   ........           LDR      R3,??DataTable102  ;; 0x400aaafb
   \   00000468   A8FFFFEA           B        ??ConvertToSi_35
   \                     ??ConvertToSi_54:
   \   0000046C   000056E3           CMP      R6,#+0
   \   00000470   0200000A           BEQ      ??ConvertToSi_55
   \   00000474   016056E2           SUBS     R6,R6,#+1
   \   00000478   0700000A           BEQ      ??ConvertToSi_56
   \   0000047C   40FFFFEA           B        ??ConvertToSi_11
   \                     ??ConvertToSi_55:
   \   00000480   0000A0E3           MOV      R0,#+0
   \   00000484   4014A0E3           MOV      R1,#+1073741824
   \   00000488   591881E3           ORR      R1,R1,#0x590000
   \   0000048C   0420A0E1           MOV      R2,R4
   \   00000490   0530A0E1           MOV      R3,R5
   \   00000494   ........           _BLF     __dMul,??__dMul??rA
   \   00000498   ACFFFFEA           B        ??ConvertToSi_40
   \                     ??ConvertToSi_56:
   \   0000049C   ........           LDR      R0,??DataTable103  ;; 0xffffffff841b909a
   \   000004A0   F111A0E3           MOV      R1,#+1073741884
   \   000004A4   441881E3           ORR      R1,R1,#0x440000
   \   000004A8   29FFFFEA           B        ??ConvertToSi_14
   \                     ??ConvertToSi_57:
   \   000004AC   010056E3           CMP      R6,#+1
   \   000004B0   33FFFF1A           BNE      ??ConvertToSi_11
   \   000004B4   0400A0E1           MOV      R0,R4
   \   000004B8   0510A0E1           MOV      R1,R5
   \   000004BC   0020A0E3           MOV      R2,#+0
   \   000004C0   4034A0E3           MOV      R3,#+1073741824
   \   000004C4   903983E3           ORR      R3,R3,#0x240000
   \   000004C8   76FFFFEA           B        ??ConvertToSi_27
   \                     ??ConvertToSi_58:
   \   000004CC   0600B0E1           MOVS     R0,R6
   \   000004D0   0600001A           BNE      ??ConvertToSi_59
   \   000004D4   ........           LDR      R3,??DataTable108  ;; 0x408f4000
   \   000004D8   0400A0E1           MOV      R0,R4
   \   000004DC   0510A0E1           MOV      R1,R5
   \   000004E0   0020A0E3           MOV      R2,#+0
   \   000004E4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000004E8   0040A0E1           MOV      R4,R0
   \   000004EC   0150A0E1           MOV      R5,R1
   \                     ??ConvertToSi_59:
   \   000004F0   010056E3           CMP      R6,#+1
   \   000004F4   22FFFF1A           BNE      ??ConvertToSi_11
   \   000004F8   ........           LDR      R3,??DataTable108  ;; 0x408f4000
   \   000004FC   0400A0E1           MOV      R0,R4
   \   00000500   0510A0E1           MOV      R1,R5
   \   00000504   0020A0E3           MOV      R2,#+0
   \   00000508   4EFFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_60:
   \   0000050C   016046E2           SUB      R6,R6,#+1
   \   00000510   030056E3           CMP      R6,#+3
   \   00000514   1AFFFF8A           BHI      ??ConvertToSi_11
   \   00000518   020F8FE2           ADR      R0,??ConvertToSi_4
   \   0000051C   8660A0E1           MOV      R6,R6, LSL #+1
   \   00000520   F60090E1           LDRSH    R0,[R0, R6]
   \   00000524   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??ConvertToSi_4:
   \   00000528   010007000A00       DC16     +1,+7,+10,+13
   \              0D00        
   \                     ??ConvertToSi_61:
   \   00000530   ........           LDR      R1,??DataTable108  ;; 0x408f4000
   \   00000534   0000A0E3           MOV      R0,#+0
   \   00000538   0420A0E1           MOV      R2,R4
   \   0000053C   0530A0E1           MOV      R3,R5
   \   00000540   ........           _BLF     __dMul,??__dMul??rA
   \   00000544   05FFFFEA           B        ??ConvertToSi_15
   \                     ??ConvertToSi_62:
   \   00000548   ........           LDR      R1,??DataTable107  ;; 0x40ed4c00
   \   0000054C   0000A0E3           MOV      R0,#+0
   \   00000550   FFFEFFEA           B        ??ConvertToSi_14
   \                     ??ConvertToSi_63:
   \   00000554   EC109FE5           LDR      R1,??ConvertToSi_5+0x18  ;; 0x41a9bfcc
   \   00000558   0000A0E3           MOV      R0,#+0
   \   0000055C   65FFFFEA           B        ??ConvertToSi_34
   \                     ??ConvertToSi_64:
   \   00000560   0700A0E1           MOV      R0,R7
   \   00000564   ........           _BLF     ??c_str,??c_str??rA
   \   00000568   ........           _BLF     ??Make_hour_time_str_to_seconds,??Make_hour_time_str_to_seconds??rA
   \   0000056C   01FFFFEA           B        ??ConvertToSi_17
   \                     ??ConvertToSi_65:
   \   00000570   010056E3           CMP      R6,#+1
   \   00000574   02FFFF1A           BNE      ??ConvertToSi_11
   \   00000578   0000A0E3           MOV      R0,#+0
   \   0000057C   4014A0E3           MOV      R1,#+1073741824
   \   00000580   4E1881E3           ORR      R1,R1,#0x4E0000
   \   00000584   F2FEFFEA           B        ??ConvertToSi_14
   \                     ??ConvertToSi_66:
   \   00000588   016056E2           SUBS     R6,R6,#+1
   \   0000058C   0600000A           BEQ      ??ConvertToSi_67
   \   00000590   016056E2           SUBS     R6,R6,#+1
   \   00000594   FAFEFF1A           BNE      ??ConvertToSi_11
   \   00000598   ........           LDR      R3,??DataTable108  ;; 0x408f4000
   \   0000059C   0400A0E1           MOV      R0,R4
   \   000005A0   0510A0E1           MOV      R1,R5
   \   000005A4   0020A0E3           MOV      R2,#+0
   \   000005A8   67FFFFEA           B        ??ConvertToSi_39
   \                     ??ConvertToSi_67:
   \   000005AC   0400A0E1           MOV      R0,R4
   \   000005B0   0510A0E1           MOV      R1,R5
   \   000005B4   0020A0E3           MOV      R2,#+0
   \   000005B8   4034A0E3           MOV      R3,#+1073741824
   \   000005BC   903983E3           ORR      R3,R3,#0x240000
   \   000005C0   20FFFFEA           B        ??ConvertToSi_24
   \                     ??ConvertToSi_18:
   \   000005C4   0400A0E1           MOV      R0,R4
   \   000005C8   0510A0E1           MOV      R1,R5
   \   000005CC   0A20A0E1           MOV      R2,R10
   \   000005D0   0B30A0E1           MOV      R3,R11
   \   000005D4   ........           _BLF     __dLess,??__dLess??rA
   \   000005D8   000050E3           CMP      R0,#+0
   \   000005DC   24009DE5           LDR      R0,[SP, #+36]
   \   000005E0   0400000A           BEQ      ??ConvertToSi_68
   1289                          Error = E_LOW;
   \   000005E4   0710A0E3           MOV      R1,#+7
   \   000005E8   06FFFFEA           B        ??ConvertToSi_19
   1290                      }
   1291                  } else Error = E_INPUT_ERR;
   \                     ??ConvertToSi_6:
   \   000005EC   24009DE5           LDR      R0,[SP, #+36]
   \   000005F0   0110A0E3           MOV      R1,#+1
   \   000005F4   03FFFFEA           B        ??ConvertToSi_19
   1292          
   1293              } else {
   1294                  Error = E_INPUT_ERR;
   1295              }
   1296              if ( Error != E_NO_ERR ) {
   \                     ??ConvertToSi_68:
   \   000005F8   000090E5           LDR      R0,[R0, #+0]
   \   000005FC   000050E3           CMP      R0,#+0
   \   00000600   0100000A           BEQ      ??ConvertToSi_69
   1297                  Val = OldVal;
   \                     ??ConvertToSi_20:
   \   00000604   5C008DE2           ADD      R0,SP,#+92
   \   00000608   300090E8           LDM      R0,{R4,R5}
   1298              }
   1299          #ifdef S2TXU
   1300              OS_Unuse(&UnitSema);
   \                     ??ConvertToSi_69:
   \   0000060C   ........           LDR      R0,??DataTable109  ;; UnitSema
   \   00000610   ........           _BLF     OS_Unuse,??OS_Unuse??rA
   1301          #endif
   1302              return float(Val);
   \   00000614   0400A0E1           MOV      R0,R4
   \   00000618   0510A0E1           MOV      R1,R5
   \   0000061C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000620   28D08DE2           ADD      SP,SP,#+40
   \   00000624   F04FBDE8           POP      {R4-R11,LR}
   \   00000628   04D08DE2           ADD      SP,SP,#+4
   \   0000062C   1EFF2FE1           BX       LR               ;; return
   \                     ??ConvertToSi_5:
   \   00000630   ........           DC32     `?<Constant "EeDdGg">`
   \   00000634   006AF840           DC32     0x40f86a00
   \   00000638   C74B3789           DC32     0xffffffff89374bc7
   \   0000063C   41845840           DC32     0x40588441
   \   00000640   8C4B55DA           DC32     0xffffffffda554b8c
   \   00000644   E21AB93F           DC32     0x3fb91ae2
   \   00000648   CCBFA941           DC32     0x41a9bfcc
   1303          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SizeofInputErrorMsg>`:
   \   00000000   32000000           DC32 50
   \                     `?<Initializer for InputErrorMsg>`:
   \   00000004   BF000000ED00       DC32 191, 237, 0, 192, 237, 1, 193, 237, 2, 194, 237, 3, 195, 237, 4
   \              000000000000
   \              C0000000ED00
   \              000001000000
   \              C1000000ED00
   \              000002000000
   \              C2000000ED00
   \              000003000000
   \              C3000000ED00
   \              000004000000
   \   00000040   C4000000ED00       DC32 196, 237, 5, 197, 237, 6, 198, 237, 7, 199, 237, 8, 202, 237, 11
   \              000005000000
   \              C5000000ED00
   \              000006000000
   \              C6000000ED00
   \              000007000000
   \              C7000000ED00
   \              000008000000
   \              CA000000ED00
   \              00000B000000
   \   0000007C   CB000000ED00       DC32 203, 237, 12, 204, 237, 13, 205, 237, 14, 206, 237, 15, 207, 237
   \              00000C000000
   \              CC000000ED00
   \              00000D000000
   \              CD000000ED00
   \              00000E000000
   \              CE000000ED00
   \              00000F000000
   \              CF000000ED00
   \              0000        
   \   000000B4   10000000D000       DC32 16, 208, 237, 17, 209, 237, 18, 210, 237, 19, 200, 237, 20, 201
   \              0000ED000000
   \              11000000D100
   \              0000ED000000
   \              12000000D200
   \              0000ED000000
   \              13000000C800
   \              0000ED000000
   \              14000000C900
   \              0000        
   \   000000EC   ED0000001500       DC32 237, 21, 211, 237, 22, 212, 237, 23, 213, 237, 24, 214, 237, 25
   \              0000D3000000
   \              ED0000001600
   \              0000D4000000
   \              ED0000001700
   \              0000D5000000
   \              ED0000001800
   \              0000D6000000
   \              ED0000001900
   \              0000        
   \   00000124   D7000000ED00       DC32 215, 237, 26, 216, 237, 27, 217, 237, 28, 218, 237, 29, 219, 237
   \              00001A000000
   \              D8000000ED00
   \              00001B000000
   \              D9000000ED00
   \              00001C000000
   \              DA000000ED00
   \              00001D000000
   \              DB000000ED00
   \              0000        
   \   0000015C   1F000000DC00       DC32 31, 220, 237, 32, 192, 237, 33, 221, 237, 34, 222, 237, 35, 223
   \              0000ED000000
   \              20000000C000
   \              0000ED000000
   \              21000000DD00
   \              0000ED000000
   \              22000000DE00
   \              0000ED000000
   \              23000000DF00
   \              0000        
   \   00000194   ED0000002400       DC32 237, 36, 224, 237, 37, 225, 237, 38, 226, 237, 39, 227, 237, 40
   \              0000E0000000
   \              ED0000002500
   \              0000E1000000
   \              ED0000002600
   \              0000E2000000
   \              ED0000002700
   \              0000E3000000
   \              ED0000002800
   \              0000        
   \   000001CC   E4000000ED00       DC32 228, 237, 41, 229, 237, 42, 230, 237, 43, 231, 237, 45, 232, 237
   \              000029000000
   \              E5000000ED00
   \              00002A000000
   \              E6000000ED00
   \              00002B000000
   \              E7000000ED00
   \              00002D000000
   \              E8000000ED00
   \              0000        
   \   00000204   2E000000E900       DC32 46, 233, 237, 47, 234, 237, 48, 235, 237, 44, 650, 650, 49, 865
   \              0000ED000000
   \              2F000000EA00
   \              0000ED000000
   \              30000000EB00
   \              0000ED000000
   \              2C0000008A02
   \              00008A020000
   \              310000006103
   \              0000        
   \   0000023C   610300003200       DC32 865, 50, 921, 921, 51, 922, 922, 52
   \              000099030000
   \              990300003300
   \              00009A030000
   \              9A0300003400
   \              0000        

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%2i\\'%2i\\"">`:
   \   00000000   253269272532       DC8 "%2i'%2i\""
   \              692200      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   253369272532       DC8 "%3i'%2i\""
   \              692200      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   253269272532       DC8 "%2i'%2i\"%1i"
   \              692225316900
   \   00000024   252A69272532       DC8 "%*i'%2i\"%1i"
   \              692225316900
   \   00000030   256927253269       DC8 "%i'%2i\"%1i"
   \              2225316900  
   \   0000003B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Floating point Err">`:
   \   00000000   466C6F617469       DC8 "Floating point Err"
   \              6E6720706F69
   \              6E7420457272
   \              00          
   \   00000013   00                 DC8 0
   \   00000014   252A2E2A6600       DC8 "%*.*f"
   \   0000001A   0000               DC8 0, 0
   \   0000001C   252A2E306600       DC8 "%*.0f"
   \   00000022   0000               DC8 0, 0
   \   00000024   25302E2A6600       DC8 "%0.*f"
   \   0000002A   0000               DC8 0, 0
   \   0000002C   25693A253269       DC8 "%i:%2i:%2i:%2i"
   \              3A2532693A25
   \              326900      
   \   0000003B   00                 DC8 0
   \   0000003C   2532693A2532       DC8 "%2i:%2i:%2i"
   \              693A25326900

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   252A7300           DC8 "%*s"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2C00               DC8 ","

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "EeDdGg">`:
   \   00000000   456544644767       DC8 "EeDdGg"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     UnitSema

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     System_Unit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   F8F7B9A4           DC32     0xffffffffa4b9f7f8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   E1C1F63F           DC32     0x3ff6c1e1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   589F7ABD           DC32     0xffffffffbd7a9f58

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   5EAF4340           DC32     0x4043af5e

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   906EBEF0           DC32     0xfffffffff0be6e90

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   CE2A0740           DC32     0x40072ace

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   FD87F4DB           DC32     0xffffffffdbf487fd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   D781D33F           DC32     0x3fd381d7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   60F74767           DC32     0x6747f760

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   BA41F03F           DC32     0x3ff041ba

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   2C7304BA           DC32     0xffffffffba04732c

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   C0827040           DC32     0x407082c0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   F512AF27           DC32     0x27af12f5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   C4281940           DC32     0x401928c4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   F8C1631A           DC32     0x1a63c1f8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   DCA54C40           DC32     0x404ca5dc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   38328FFC           DC32     0xfffffffffc8f3238

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   C1B02040           DC32     0x4020b0c1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   E608C771           DC32     0x71c708e6

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   1CC7E13F           DC32     0x3fe1c71c

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   CDCCCCCC           DC32     0xffffffffcccccccd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   CCCCFC3F           DC32     0x3ffccccc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   776BCF5A           DC32     0x5acf6b77

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   FBAA0A40           DC32     0x400aaafb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   05A3923A           DC32     0x3a92a305

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   019D2340           DC32     0x40239d01

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   9A901B84           DC32     0xffffffff841b909a

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     System_Unit + 476

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     System_Unit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   FD87F4DB           DC32     0xffffffffdbf487fd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   D781D33F           DC32     0x3fd381d7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   38328FFC           DC32     0xfffffffffc8f3238

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   C1B02040           DC32     0x4020b0c1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   E608C771           DC32     0x71c708e6

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   1CC7E13F           DC32     0x3fe1c71c

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   CDCCCCCC           DC32     0xffffffffcccccccd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   CCCCFC3F           DC32     0x3ffccccc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   60F74767           DC32     0x6747f760

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   BA41F03F           DC32     0x3ff041ba

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   05A3923A           DC32     0x3a92a305

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   019D2340           DC32     0x40239d01

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   2C7304BA           DC32     0xffffffffba04732c

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   C0827040           DC32     0x407082c0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   F512AF27           DC32     0x27af12f5

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   C4281940           DC32     0x401928c4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   F8F7B9A4           DC32     0xffffffffa4b9f7f8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable93:
   \   00000000   E1C1F63F           DC32     0x3ff6c1e1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable94:
   \   00000000   589F7ABD           DC32     0xffffffffbd7a9f58

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   5EAF4340           DC32     0x4043af5e

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable96:
   \   00000000   906EBEF0           DC32     0xfffffffff0be6e90

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   CE2A0740           DC32     0x40072ace

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   F8C1631A           DC32     0x1a63c1f8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   DCA54C40           DC32     0x404ca5dc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   776BCF5A           DC32     0x5acf6b77

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   FBAA0A40           DC32     0x400aaafb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   9A901B84           DC32     0xffffffff841b909a

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   004CED40           DC32     0x40ed4c00

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     UnitSema
   1304          
   1305          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CompareValInfoKey(void const *, void const *)
                                        0
     CompareValInfoKeyInTable(void const *, void const *)
                                        0
     ConvertFromSi(char *, float, int, int, int)
                                      160
     ConvertToSi(AnsiString, int, int &, double, double, double)
                                       76
     CorrectToWeightInVacuum(float, float)
                                       12
     FindText(int, ValueList *, int, bool &)
                                       52
     GetCorrectedWeight(float, float)
                                       12
     GetErrorMsg(int)                   8
     GetFloat(AnsiString, int &)       52
     GetHex(AnsiString, int &)         12
     GetInt(AnsiString, int &)         12
     GetUnit(int)                      12
     GetUnitGroupName(int)             16
     GetUnitName(int)                  44
     GetUnsigned(AnsiString, int &)    12
     SetCoeffisient(int)               16
     SetStdSIUnits()                    8
     SetStdUSUnits()                    8
     SetUserUnits()                     8
     SortKeywordList(ValueList *, int)
                                        4
     __sti__routine()                   0
     make_feet_to_str(char *, float, int)
                                       40
     string::c_str() const              0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::c_str() const            24
     UnitSema                         16
     CompareValInfoKeyInTable(void const *, void const *)
                                       4
     ?Subroutine23                    16
     CompareValInfoKey(void const *, void const *)
                                       0
     SortKeywordList(ValueList *, int)
                                      28
     FindText(int, ValueList *, int, bool &)
                                     172
     ?Subroutine26                     8
     SizeofInputErrorMsg             604
     InputErrorMsgIsSorted             1
     GetErrorMsg(int)                 44
     SetStdSIUnits()                 160
     ?Subroutine24                    16
     SetStdUSUnits()                 160
     SetUserUnits()                  184
     SetCoeffisient(int)             172
     make_feet_to_str(char *, float, int)
                                     416
     ConvertFromSi(char *, float, int, int, int)
                                    2656
     GetCorrectedWeight(float, float)
                                      68
     ?Subroutine25                    12
     CorrectToWeightInVacuum(float, float)
                                      60
     GetUnitName(int)                132
     GetUnit(int)                     68
     GetUnitGroupName(int)            60
     GetFloat(AnsiString, int &)     164
     GetInt(AnsiString, int &)        28
     ?Subroutine22                    36
     GetUnsigned(AnsiString, int &)   36
     GetHex(AnsiString, int &)        24
     ConvertToSi(AnsiString, int, int &, double, double, double)
                                    1612
     ?<Initializer for SizeofInputErrorMsg>
                                     604
     ?<Constant "%2i\'%2i\"">         60
     ?<Constant "Floating point Err">
                                      72
     ?<Constant "%*s">                 4
     ?<Constant ",">                   2
     ?<Constant "EeDdGg">              8
     __sti__routine()                  4
     ??DataTable0                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable23                     4
     ??DataTable24                     4
     ??DataTable27                     4
     ??DataTable28                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ??DataTable44                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable58                     4
     ??DataTable61                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ??DataTable73                     4
     ??DataTable74                     4
     ??DataTable75                     4
     ??DataTable76                     4
     ??DataTable77                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable82                     4
     ??DataTable83                     4
     ??DataTable84                     4
     ??DataTable85                     4
     ??DataTable86                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable92                     4
     ??DataTable93                     4
     ??DataTable94                     4
     ??DataTable95                     4
     ??DataTable96                     4
     ??DataTable97                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable101                    4
     ??DataTable102                    4
     ??DataTable103                    4
     ??DataTable107                    4
     ??DataTable108                    4
     ??DataTable109                    4
      Others                         656

 
 7 248 bytes in segment CODE
   146 bytes in segment DATA_C
   604 bytes in segment DATA_I
   604 bytes in segment DATA_ID
    17 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    24 bytes in segment INITTAB
 
 6 600 bytes of CODE  memory (+ 676 bytes shared)
   750 bytes of CONST memory
   621 bytes of DATA  memory

Errors: none
Warnings: none
