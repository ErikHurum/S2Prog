##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:16:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROTankSum.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\PROTankSum.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROTankSum.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROTankSum.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROTankSum.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Pairib _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::insert(TankState)
   \                     ??insert:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   1010D0E5           LDRB     R1,[R0, #+16]
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   010057E1           CMP      R7,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0190A033           MOVCC    R9,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0090A023           MOVCS    R9,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0800A0E1           MOV      R0,R8
   \   0000004C   0150A0E3           MOV      R5,#+1
   \   00000050   000059E3           CMP      R9,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001096E5           LDR      R1,[R6, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0730A0E1           MOV      R3,R7
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0450CDE5           STRB     R5,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   1010D0E5           LDRB     R1,[R0, #+16]
   \   0000008C   070051E1           CMP      R1,R7
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0730A0E1           MOV      R3,R7
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   0910A0E1           MOV      R1,R9
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Erase(_Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::iterator _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Insert(bool, _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr, TankState)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   1070C8E5           STRB     R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          PROTankSum::PROTankSum(vector<PRogramObjectBase *> &TTable, bool Fixed) : PROTank(0, false), TankTable(TTable) {
   \                     ??PROTankSum:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     ??PROTank,??PROTank??rA
   \   00000020   68009FE5           LDR      R0,??PROTankSum_1  ;; ??__vtbl
     10              IDNumber      = (C_PRO_TANK_SUM << 16);
   \   00000024   4016A0E3           MOV      R1,#+67108864
   \   00000028   A40084E5           STR      R0,[R4, #+164]
   \   0000002C   CC5384E5           STR      R5,[R4, #+972]
   \   00000030   881981E3           ORR      R1,R1,#0x220000
   \   00000034   9C1084E5           STR      R1,[R4, #+156]
     11              Type          = C_PRO_TANK_SUM;
   \   00000038   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000003C   A01084E5           STR      R1,[R4, #+160]
     12              TankType      = TANKTYPE_SUM;
   \   00000040   0110E0E3           MVN      R1,#+1
   \   00000044   541184E5           STR      R1,[R4, #+340]
     13              //TankTable     = TTable;
     14              IsFixed       = Fixed;
   \   00000048   D063C4E5           STRB     R6,[R4, #+976]
     15              Name          = "Total/Average";
   \   0000004C   A01080E2           ADD      R1,R0,#+160
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000058   ........           LDR      R1,??DataTable1  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   003091E5           LDR      R3,[R1, #+0]
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   440084E2           ADD      R0,R4,#+68
   \   0000006C   ........           _BLF     ??assign,??assign??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     16          }
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   1CD08DE2           ADD      SP,SP,#+28
   \   00000088   7040BDE8           POP      {R4-R6,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??PROTankSum_1:
   \   00000090   ........           DC32     ??__vtbl
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          PROTankSum::~PROTankSum(void) {
   \                     `?~PROTankSum`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~PROTankSum_1`
     19          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROTank`,`?~PROTank??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~PROTankSum_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROTankSum_1`:
   \   0000002C                      REQUIRE ?Subroutine12
   \   0000002C                      ;; // Fall through to label ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     20          //---------------------------------------------------------------------------
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          int PROTankSum::FindMyEntry(void) {
     23              unsigned i = 0;
   \                     ??FindMyEntry:
   \   00000000   CC2390E5           LDR      R2,[R0, #+972]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   000000EA           B        ??FindMyEntry_1
     24              while ( i < TankTable.size() ) {
     25                  if ( TankTable[i] == this ) {
     26                      return (i);
     27                  } else {
     28                      i++;
   \                     ??FindMyEntry_2:
   \   0000000C   011081E2           ADD      R1,R1,#+1
     29                  }
   \                     ??FindMyEntry_1:
   \   00000010   043092E5           LDR      R3,[R2, #+4]
   \   00000014   00C092E5           LDR      R12,[R2, #+0]
   \   00000018   0C3043E0           SUB      R3,R3,R12
   \   0000001C   230151E1           CMP      R1,R3, LSR #+2
   \   00000020   0400002A           BCS      ??FindMyEntry_3
   \   00000024   01319CE7           LDR      R3,[R12, +R1, LSL #+2]
   \   00000028   000053E1           CMP      R3,R0
   \   0000002C   F6FFFF1A           BNE      ??FindMyEntry_2
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   1EFF2FE1           BX       LR
     30              }
     31              return (-1); // If we get her, we found nothing!!!
   \                     ??FindMyEntry_3:
   \   00000038   0000E0E3           MVN      R0,#+0
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     32          }
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          int PROTankSum::FindStart(int MyEnd) {
     35              int MyStart = 0;
   \                     ??FindStart:
   \   00000000   0020A0E3           MOV      R2,#+0
     36              if ( MyEnd > 0 ) {
   \   00000004   010051E3           CMP      R1,#+1
   \   00000008   0E0000BA           BLT      ??FindStart_1
     37                  int  i        = MyEnd - 1;
   \   0000000C   011041E2           SUB      R1,R1,#+1
     38                  bool OtherSum = false;
   \   00000010   22C0A0E3           MOV      R12,#+34
   \   00000014   40CE8CE3           ORR      R12,R12,#0x400
   \   00000018   000000EA           B        ??FindStart_2
     39                  while ( !OtherSum && (i > 0) ) {
     40                      if ( TankTable[i]->Type == C_PRO_TANK_SUM ) {
     41                          OtherSum = true;
     42                          MyStart = i + 1; // We are one too far, let us go one step back!
     43                      } else {
     44                          i--;
   \                     ??FindStart_3:
   \   0000001C   011041E2           SUB      R1,R1,#+1
   \                     ??FindStart_2:
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   080000BA           BLT      ??FindStart_4
     45                      }
   \   00000028   CC3390E5           LDR      R3,[R0, #+972]
   \   0000002C   003093E5           LDR      R3,[R3, #+0]
   \   00000030   013193E7           LDR      R3,[R3, +R1, LSL #+2]
   \   00000034   A03093E5           LDR      R3,[R3, #+160]
   \   00000038   0C0053E1           CMP      R3,R12
   \   0000003C   F6FFFF1A           BNE      ??FindStart_3
   \   00000040   012081E2           ADD      R2,R1,#+1
   \   00000044   000000EA           B        ??FindStart_4
     46                  }
     47              } else {
     48                  MyStart = -1;
   \                     ??FindStart_1:
   \   00000048   0220E0E1           MVN      R2,R2
     49              }
     50              return (MyStart); // If we get her, we found nothing!!!
   \                     ??FindStart_4:
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   1EFF2FE1           BX       LR               ;; return
     51          }
     52          
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          bool PROTankSum::FindRange(int &MyStart, int &MyEnd) {
   \                     ??FindRange:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     55              bool FoundRange = false;
   \   00000010   0070A0E3           MOV      R7,#+0
     56              MyEnd   = FindMyEntry();
   \   00000014   ........           BL       ??FindMyEntry
   \   00000018   000086E5           STR      R0,[R6, #+0]
     57              if ( MyEnd > 0 ) {
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   040000BA           BLT      ??FindRange_1
     58                  MyStart = FindStart(MyEnd);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??FindStart
   \   00000030   000085E5           STR      R0,[R5, #+0]
     59                  if ( MyStart >= 0 ) {
   \   00000034   000050E3           CMP      R0,#+0
     60                      FoundRange = true;
   \   00000038   0170A053           MOVPL    R7,#+1
     61                  }
     62              }
     63              return (FoundRange);
   \                     ??FindRange_1:
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   F040BDE8           POP      {R4-R7,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
     64          }
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          int PROTankSum::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   FA4F2DE9           PUSH     {R1,R3-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   44609DE5           LDR      R6,[SP, #+68]
   \   0000000C   48809DE5           LDR      R8,[SP, #+72]
   \   00000010   0090A0E1           MOV      R9,R0
     67              int Status = GETVAL_NO_ERR;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   08108DE5           STR      R1,[SP, #+8]
     68              int MyStart, MyEnd;
     69              if ( FindRange(MyStart, MyEnd) ) {
   \   0000001C   04208DE2           ADD      R2,SP,#+4
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   ........           BL       ??FindRange
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   6802000A           BEQ      ??GetValue_2
     70                  switch ( ValueId ) {
   \   00000030   B0099FE5           LDR      R0,??GetValue_3  ;; ??DecimalPointWeight
   \   00000034   B0199FE5           LDR      R1,??GetValue_3+0x4  ;; ??DecimalPointVolume
   \   00000038   18509DE5           LDR      R5,[SP, #+24]
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   0320A0E3           MOV      R2,#+3
   \   00000048   ADBFA0E3           MOV      R11,#+692
   \   0000004C   0230A0E3           MOV      R3,#+2
   \   00000050   09A0A0E3           MOV      R10,#+9
   \   00000054   04C0A0E3           MOV      R12,#+4
   \   00000058   05E0A0E3           MOV      LR,#+5
   \   0000005C   0140A0E3           MOV      R4,#+1
   \   00000060   FB0F55E3           CMP      R5,#+1004
   \   00000064   A301000A           BEQ      ??GetValue_4
   \   00000068   FB7F84E3           ORR      R7,R4,#0x3EC
   \   0000006C   070055E1           CMP      R5,R7
   \   00000070   F901000A           BEQ      ??GetValue_5
   \   00000074   FB7F83E3           ORR      R7,R3,#0x3EC
   \   00000078   070055E1           CMP      R5,R7
   \   0000007C   7901000A           BEQ      ??GetValue_6
   \   00000080   FF0F55E3           CMP      R5,#+1020
   \   00000084   7300000A           BEQ      ??GetValue_7
   \   00000088   FF7F84E3           ORR      R7,R4,#0x3FC
   \   0000008C   070055E1           CMP      R5,R7
   \   00000090   1B00000A           BEQ      ??GetValue_8
   \   00000094   FF7F83E3           ORR      R7,R3,#0x3FC
   \   00000098   070055E1           CMP      R5,R7
   \   0000009C   9300000A           BEQ      ??GetValue_9
   \   000000A0   FF7F82E3           ORR      R7,R2,#0x3FC
   \   000000A4   070055E1           CMP      R5,R7
   \   000000A8   2701000A           BEQ      ??GetValue_10
   \   000000AC   400E55E3           CMP      R5,#+1024
   \   000000B0   1A02000A           BEQ      ??GetValue_11
   \   000000B4   057087E2           ADD      R7,R7,#+5
   \   000000B8   070055E1           CMP      R5,R7
   \   000000BC   0901000A           BEQ      ??GetValue_12
   \   000000C0   017087E3           ORR      R7,R7,#0x1
   \   000000C4   070055E1           CMP      R5,R7
   \   000000C8   01708712           ADDNE    R7,R7,#+1
   \   000000CC   07005511           CMPNE    R5,R7
   \   000000D0   01708713           ORRNE    R7,R7,#0x1
   \   000000D4   07005511           CMPNE    R5,R7
   \   000000D8   D000000A           BEQ      ??GetValue_13
   \   000000DC   0F7087E2           ADD      R7,R7,#+15
   \   000000E0   070055E1           CMP      R5,R7
   \   000000E4   2500000A           BEQ      ??GetValue_14
   \   000000E8   047087E2           ADD      R7,R7,#+4
   \   000000EC   070055E1           CMP      R5,R7
   \   000000F0   3B00000A           BEQ      ??GetValue_15
   \   000000F4   7D7E8AE3           ORR      R7,R10,#0x7D0
   \   000000F8   070055E1           CMP      R5,R7
   \   000000FC   2F01000A           BEQ      ??GetValue_16
   \   00000100   310200EA           B        ??GetValue_17
     71                  case SVT_WEIGHT:
     72                      DecPnt     = PROProjectInfo::DecimalPointWeight;
   \                     ??GetValue_8:
   \   00000104   000086E5           STR      R0,[R6, #+0]
     73                      Unit       = WEIGHT_UNIT;
   \   00000108   002088E5           STR      R2,[R8, #+0]
     74                      {
     75                          double tmpWeight       = 0.0;
     76                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   0000010C   00609DE5           LDR      R6,[SP, #+0]
   \   00000110   0040A0E3           MOV      R4,#+0
   \   00000114   0050A0E3           MOV      R5,#+0
   \   00000118   0E0000EA           B        ??GetValue_18
     77                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_19:
   \   0000011C   CC0399E5           LDR      R0,[R9, #+972]
   \   00000120   000090E5           LDR      R0,[R0, #+0]
   \   00000124   060190E7           LDR      R0,[R0, +R6, LSL #+2]
     78                              if ( TPtr && TPtr->IsNewData  ) {
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000130   00005113           CMPNE    R1,#+0
   \   00000134   0600000A           BEQ      ??GetValue_20
     79                                  tmpWeight += TPtr->GetCorrectWeight();
   \   00000138   ........           _BLF     ??GetCorrectWeight,??GetCorrectWeight??rA
   \   0000013C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000140   0420A0E1           MOV      R2,R4
   \   00000144   0530A0E1           MOV      R3,R5
   \   00000148   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000014C   0040A0E1           MOV      R4,R0
   \   00000150   0150A0E1           MOV      R5,R1
     80                              }
     81                          }
   \                     ??GetValue_20:
   \   00000154   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_18:
   \   00000158   04009DE5           LDR      R0,[SP, #+4]
   \   0000015C   000056E1           CMP      R6,R0
   \   00000160   EDFFFFBA           BLT      ??GetValue_19
     82                          Weight     = tmpWeight;
   \                     ??GetValue_21:
   \   00000164   0400A0E1           MOV      R0,R4
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000170   BC0289E5           STR      R0,[R9, #+700]
     83                          MyRetValue = Weight;
   \                     ??GetValue_22:
   \   00000174   1C109DE5           LDR      R1,[SP, #+28]
   \   00000178   000081E5           STR      R0,[R1, #+0]
     84                          Status     = GETVAL_NO_ERR;
   \   0000017C   160200EA           B        ??GetValue_23
     85                      }
     86                      break;
     87                  case SVT_VAP_WEIGHT:
     88                      DecPnt     = PROProjectInfo::DecimalPointWeight;
   \                     ??GetValue_14:
   \   00000180   000086E5           STR      R0,[R6, #+0]
     89                      Unit       = WEIGHT_UNIT;
   \   00000184   002088E5           STR      R2,[R8, #+0]
     90                      {
     91                          double tmpWeight       = 0.0;
     92                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000188   00609DE5           LDR      R6,[SP, #+0]
   \   0000018C   0040A0E3           MOV      R4,#+0
   \   00000190   0050A0E3           MOV      R5,#+0
   \   00000194   0E0000EA           B        ??GetValue_24
     93                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_25:
   \   00000198   CC0399E5           LDR      R0,[R9, #+972]
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   060190E7           LDR      R0,[R0, +R6, LSL #+2]
     94                              if ( TPtr && TPtr->IsNewData  ) {
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   E010D015           LDRBNE   R1,[R0, #+224]
   \   000001AC   00005113           CMPNE    R1,#+0
   \   000001B0   0600000A           BEQ      ??GetValue_26
     95                                  tmpWeight += TPtr->GetWeightFromGas();
   \   000001B4   ........           _BLF     ??GetWeightFromGas,??GetWeightFromGas??rA
   \   000001B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001BC   0420A0E1           MOV      R2,R4
   \   000001C0   0530A0E1           MOV      R3,R5
   \   000001C4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000001C8   0040A0E1           MOV      R4,R0
   \   000001CC   0150A0E1           MOV      R5,R1
     96                              }
     97                          }
   \                     ??GetValue_26:
   \   000001D0   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_24:
   \   000001D4   04009DE5           LDR      R0,[SP, #+4]
   \   000001D8   000056E1           CMP      R6,R0
   \   000001DC   EDFFFFBA           BLT      ??GetValue_25
     98                          Weight     = tmpWeight;
   \   000001E0   DFFFFFEA           B        ??GetValue_21
     99                          MyRetValue = Weight;
    100                          Status     = GETVAL_NO_ERR;
    101                      }
    102                      break;
    103                  case SVT_GAS_WEIGHT:
    104                      DecPnt     = PROProjectInfo::DecimalPointWeight;
   \                     ??GetValue_15:
   \   000001E4   000086E5           STR      R0,[R6, #+0]
    105                      Unit       = WEIGHT_UNIT;
   \   000001E8   002088E5           STR      R2,[R8, #+0]
    106                      {
    107                          double tmpWeight       = 0.0;
    108                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000001EC   00609DE5           LDR      R6,[SP, #+0]
   \   000001F0   0040A0E3           MOV      R4,#+0
   \   000001F4   0050A0E3           MOV      R5,#+0
   \   000001F8   0E0000EA           B        ??GetValue_27
    109                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_28:
   \   000001FC   CC0399E5           LDR      R0,[R9, #+972]
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    110                              if ( TPtr && TPtr->IsNewData  ) {
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000210   00005113           CMPNE    R1,#+0
   \   00000214   0600000A           BEQ      ??GetValue_29
    111                                  tmpWeight += TPtr->GetWeightFromLPG();
   \   00000218   ........           _BLF     ??GetWeightFromLPG,??GetWeightFromLPG??rA
   \   0000021C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000220   0420A0E1           MOV      R2,R4
   \   00000224   0530A0E1           MOV      R3,R5
   \   00000228   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000022C   0040A0E1           MOV      R4,R0
   \   00000230   0150A0E1           MOV      R5,R1
    112                              }
    113                          }
   \                     ??GetValue_29:
   \   00000234   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_27:
   \   00000238   04009DE5           LDR      R0,[SP, #+4]
   \   0000023C   000056E1           CMP      R6,R0
   \   00000240   EDFFFFBA           BLT      ??GetValue_28
    114                          Weight     = tmpWeight;
   \   00000244   0400A0E1           MOV      R0,R4
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000250   BC0289E5           STR      R0,[R9, #+700]
    115                          MyRetValue = Weight;
   \   00000254   C6FFFFEA           B        ??GetValue_22
    116                          Status     = GETVAL_NO_ERR;
    117                      }
    118                      break;
    119                  case SVT_VOLUME:
    120                      DecPnt     = PROProjectInfo::DecimalPointVolume;
   \                     ??GetValue_7:
   \   00000258   001086E5           STR      R1,[R6, #+0]
    121                      Unit       = VOLUME_UNIT;
   \   0000025C   003088E5           STR      R3,[R8, #+0]
    122                      {
    123                          double tmpVolume  = 0.0;
    124                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000260   00609DE5           LDR      R6,[SP, #+0]
   \   00000264   0040A0E3           MOV      R4,#+0
   \   00000268   0050A0E3           MOV      R5,#+0
   \   0000026C   0A0000EA           B        ??GetValue_30
    125                              PROTank *TPtr = (PROTank *)TankTable[i];
    126                              if ( TPtr && TPtr->IsNewData  ) {
    127                                  if ( TPtr->HasLCData() ) {
    128                                      tmpVolume  += TPtr->LCVolume;
    129                                  } else if ( TPtr->VolumeTab ) {
   \                     ??GetValue_31:
   \   00000270   980398E5           LDR      R0,[R8, #+920]
   \   00000274   000050E3           CMP      R0,#+0
   \   00000278   0600000A           BEQ      ??GetValue_32
    130                                      tmpVolume  += TPtr->Volume;
   \   0000027C   B40298E5           LDR      R0,[R8, #+692]
   \                     ??GetValue_33:
   \   00000280   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000284   0420A0E1           MOV      R2,R4
   \   00000288   0530A0E1           MOV      R3,R5
   \   0000028C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000290   0040A0E1           MOV      R4,R0
   \   00000294   0150A0E1           MOV      R5,R1
    131                                  }
   \                     ??GetValue_32:
   \   00000298   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_30:
   \   0000029C   04009DE5           LDR      R0,[SP, #+4]
   \   000002A0   000056E1           CMP      R6,R0
   \   000002A4   0C0000AA           BGE      ??GetValue_34
   \   000002A8   CC0399E5           LDR      R0,[R9, #+972]
   \   000002AC   000090E5           LDR      R0,[R0, #+0]
   \   000002B0   068190E7           LDR      R8,[R0, +R6, LSL #+2]
   \   000002B4   000058E3           CMP      R8,#+0
   \   000002B8   E000D815           LDRBNE   R0,[R8, #+224]
   \   000002BC   00005013           CMPNE    R0,#+0
   \   000002C0   F4FFFF0A           BEQ      ??GetValue_32
   \   000002C4   0800A0E1           MOV      R0,R8
   \   000002C8   ........           _BLF     ??HasLCData,??HasLCData??rA
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   E6FFFF0A           BEQ      ??GetValue_31
   \   000002D4   D00298E5           LDR      R0,[R8, #+720]
   \   000002D8   E8FFFFEA           B        ??GetValue_33
    132                              }
    133                          }
    134                          Volume     = tmpVolume;
   \                     ??GetValue_34:
   \   000002DC   0400A0E1           MOV      R0,R4
   \   000002E0   0510A0E1           MOV      R1,R5
   \   000002E4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002E8   09008BE7           STR      R0,[R11, +R9]
    135                          MyRetValue = Volume;
   \   000002EC   A0FFFFEA           B        ??GetValue_22
    136                          Status     = GETVAL_NO_ERR;
    137                      }
    138                      break;
    139                  case SVT_VOLPERCENT:
    140                      DecPnt     = 1;
   \                     ??GetValue_9:
   \   000002F0   004086E5           STR      R4,[R6, #+0]
    141                      Unit       = PERCENT_UNIT;
   \   000002F4   1000A0E3           MOV      R0,#+16
   \   000002F8   000088E5           STR      R0,[R8, #+0]
    142                      {
    143                          double tmpVolume   = 0.0;
    144                          double tmpCapacity = 0.0;
    145                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000002FC   00A09DE5           LDR      R10,[SP, #+0]
   \   00000300   0040A0E3           MOV      R4,#+0
   \   00000304   0050A0E3           MOV      R5,#+0
   \   00000308   0460A0E1           MOV      R6,R4
   \   0000030C   0470A0E1           MOV      R7,R4
   \   00000310   120000EA           B        ??GetValue_35
    146                              PROTank *TPtr = (PROTank *)TankTable[i];
    147                              if ( TPtr && TPtr->IsNewData  ) {
    148                                  if ( TPtr->HasLCData() ) {
    149                                      tmpVolume  += TPtr->LCVolume;
   \                     ??GetValue_36:
   \   00000314   D00298E5           LDR      R0,[R8, #+720]
   \   00000318   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000031C   0420A0E1           MOV      R2,R4
   \   00000320   0530A0E1           MOV      R3,R5
   \   00000324   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000328   0040A0E1           MOV      R4,R0
   \   0000032C   0150A0E1           MOV      R5,R1
    150                                  } else if ( TPtr->VolumeTab ) {
    151                                      tmpVolume  += TPtr->Volume;
    152                                  }
    153                                  if ( TPtr->VolumeTab ) {
   \                     ??GetValue_37:
   \   00000330   980398E5           LDR      R0,[R8, #+920]
   \   00000334   000050E3           CMP      R0,#+0
   \   00000338   0700000A           BEQ      ??GetValue_38
    154                                      tmpCapacity += TPtr->VolumeTab->MaxY;
   \                     ??GetValue_39:
   \   0000033C   980398E5           LDR      R0,[R8, #+920]
   \   00000340   180090E5           LDR      R0,[R0, #+24]
   \   00000344   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000348   0620A0E1           MOV      R2,R6
   \   0000034C   0730A0E1           MOV      R3,R7
   \   00000350   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000354   0060A0E1           MOV      R6,R0
   \   00000358   0170A0E1           MOV      R7,R1
    155                                  }
   \                     ??GetValue_38:
   \   0000035C   01A08AE2           ADD      R10,R10,#+1
   \                     ??GetValue_35:
   \   00000360   04009DE5           LDR      R0,[SP, #+4]
   \   00000364   00005AE1           CMP      R10,R0
   \   00000368   150000AA           BGE      ??GetValue_40
   \   0000036C   CC0399E5           LDR      R0,[R9, #+972]
   \   00000370   000090E5           LDR      R0,[R0, #+0]
   \   00000374   0A8190E7           LDR      R8,[R0, +R10, LSL #+2]
   \   00000378   000058E3           CMP      R8,#+0
   \   0000037C   E000D815           LDRBNE   R0,[R8, #+224]
   \   00000380   00005013           CMPNE    R0,#+0
   \   00000384   F4FFFF0A           BEQ      ??GetValue_38
   \   00000388   0800A0E1           MOV      R0,R8
   \   0000038C   ........           _BLF     ??HasLCData,??HasLCData??rA
   \   00000390   000050E3           CMP      R0,#+0
   \   00000394   DEFFFF1A           BNE      ??GetValue_36
   \   00000398   980398E5           LDR      R0,[R8, #+920]
   \   0000039C   000050E3           CMP      R0,#+0
   \   000003A0   E2FFFF0A           BEQ      ??GetValue_37
   \   000003A4   B40298E5           LDR      R0,[R8, #+692]
   \   000003A8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003AC   0420A0E1           MOV      R2,R4
   \   000003B0   0530A0E1           MOV      R3,R5
   \   000003B4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003B8   0040A0E1           MOV      R4,R0
   \   000003BC   0150A0E1           MOV      R5,R1
   \   000003C0   DDFFFFEA           B        ??GetValue_39
    156                              }
    157                          }
    158                          Volume     = tmpVolume;
   \                     ??GetValue_40:
   \   000003C4   0400A0E1           MOV      R0,R4
   \   000003C8   0510A0E1           MOV      R1,R5
   \   000003CC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003D0   09008BE7           STR      R0,[R11, +R9]
    159                          if ( tmpCapacity ) {
   \   000003D4   0000A0E3           MOV      R0,#+0
   \   000003D8   0010A0E3           MOV      R1,#+0
   \   000003DC   0620A0E1           MOV      R2,R6
   \   000003E0   0730A0E1           MOV      R3,R7
   \   000003E4   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   000003E8   000050E3           CMP      R0,#+0
   \   000003EC   0900000A           BEQ      ??GetValue_41
    160                              VolumePercent = tmpVolume / tmpCapacity * 100.0;
   \   000003F0   0400A0E1           MOV      R0,R4
   \   000003F4   0510A0E1           MOV      R1,R5
   \   000003F8   0620A0E1           MOV      R2,R6
   \   000003FC   0730A0E1           MOV      R3,R7
   \   00000400   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   4034A0E3           MOV      R3,#+1073741824
   \   0000040C   593883E3           ORR      R3,R3,#0x590000
   \   00000410   ........           _BLF     __dMul,??__dMul??rA
   \   00000414   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    161                          } else {
    162                              VolumePercent = 0.0;
   \                     ??GetValue_41:
   \   00000418   B80289E5           STR      R0,[R9, #+696]
    163                          }
    164                          MyRetValue = VolumePercent;
   \   0000041C   54FFFFEA           B        ??GetValue_22
    165                          Status     = GETVAL_NO_ERR;
    166                      }
    167                      break;
    168                  case SVT_CAPACITY   :
    169                  case SVT_CAPACITY98 :
    170                  case SVT_CAPACITY100:
    171                      DecPnt     = 1;
   \                     ??GetValue_13:
   \   00000420   004086E5           STR      R4,[R6, #+0]
    172                      Unit       = VOLUME_UNIT;
   \   00000424   003088E5           STR      R3,[R8, #+0]
    173                      {
    174                          double tmpCapacity = 0.0;
    175                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000428   00609DE5           LDR      R6,[SP, #+0]
   \   0000042C   0040A0E3           MOV      R4,#+0
   \   00000430   0050A0E3           MOV      R5,#+0
   \   00000434   070000EA           B        ??GetValue_42
    176                              PROTank *TPtr = (PROTank *)TankTable[i];
    177                              if ( TPtr ) {
    178                                  if ( TPtr->VolumeTab ) {
    179                                      switch ( ValueId ) {
    180                                      case SVT_CAPACITY   :
    181                                          switch ( TPtr->TankType ) {
    182                                          case TANKTYPE_CARGO:
    183                                              tmpCapacity += TPtr->VolumeTab->MaxY * 0.98;
    184                                              break;
    185                                          default:
    186                                              tmpCapacity += TPtr->VolumeTab->MaxY;
    187                                              break;
    188                                          }
    189                                          break;
    190                                      case SVT_CAPACITY98 :
    191                                          tmpCapacity += TPtr->VolumeTab->MaxY * 0.98;
    192                                          break;
    193                                      case SVT_CAPACITY100:
    194                                          tmpCapacity += TPtr->VolumeTab->MaxY;
   \                     ??GetValue_43:
   \   00000438   180090E5           LDR      R0,[R0, #+24]
   \                     ??GetValue_44:
   \   0000043C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \                     ??GetValue_45:
   \   00000440   0420A0E1           MOV      R2,R4
   \   00000444   0530A0E1           MOV      R3,R5
   \   00000448   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000044C   0040A0E1           MOV      R4,R0
   \   00000450   0150A0E1           MOV      R5,R1
   \                     ??GetValue_46:
   \   00000454   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_42:
   \   00000458   04009DE5           LDR      R0,[SP, #+4]
   \   0000045C   000056E1           CMP      R6,R0
   \   00000460   1A0000AA           BGE      ??GetValue_47
   \   00000464   CC0399E5           LDR      R0,[R9, #+972]
   \   00000468   000090E5           LDR      R0,[R0, #+0]
   \   0000046C   061190E7           LDR      R1,[R0, +R6, LSL #+2]
   \   00000470   000051E3           CMP      R1,#+0
   \   00000474   98039115           LDRNE    R0,[R1, #+920]
   \   00000478   00005013           CMPNE    R0,#+0
   \   0000047C   F4FFFF0A           BEQ      ??GetValue_46
   \   00000480   18209DE5           LDR      R2,[SP, #+24]
   \   00000484   052042E2           SUB      R2,R2,#+5
   \   00000488   402E42E2           SUB      R2,R2,#+1024
   \   0000048C   020052E3           CMP      R2,#+2
   \   00000490   EFFFFF8A           BHI      ??GetValue_46
   \   00000494   013F8FE2           ADR      R3,??GetValue_1
   \   00000498   D23093E1           LDRSB    R3,[R3, R2]
   \   0000049C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetValue_1:
   \   000004A0   09E50000           DC8      +9,+229,+0,+0
   \                     ??GetValue_48:
   \   000004A4   541191E5           LDR      R1,[R1, #+340]
   \   000004A8   180090E5           LDR      R0,[R0, #+24]
   \   000004AC   010051E3           CMP      R1,#+1
   \   000004B0   E1FFFF1A           BNE      ??GetValue_44
   \                     ??GetValue_49:
   \   000004B4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000004B8   30259FE5           LDR      R2,??GetValue_3+0x8  ;; 0xfffffffff5c28f5c
   \   000004BC   30359FE5           LDR      R3,??GetValue_3+0xC  ;; 0x3fef5c28
   \   000004C0   ........           _BLF     __dMul,??__dMul??rA
   \   000004C4   DDFFFFEA           B        ??GetValue_45
   \                     ??GetValue_50:
   \   000004C8   180090E5           LDR      R0,[R0, #+24]
   \   000004CC   F8FFFFEA           B        ??GetValue_49
    195                                          break;
    196                                      }
    197                                  }
    198                              }
    199                          }
    200                          MyRetValue = tmpCapacity;
   \                     ??GetValue_47:
   \   000004D0   1C609DE5           LDR      R6,[SP, #+28]
   \   000004D4   0400A0E1           MOV      R0,R4
   \   000004D8   0510A0E1           MOV      R1,R5
   \   000004DC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004E0   000086E5           STR      R0,[R6, #+0]
    201                          Status     = GETVAL_NO_ERR;
   \   000004E4   3C0100EA           B        ??GetValue_23
    202                      }
    203                      break;
    204                  case SVT_VOL_AT_REFTMP:
    205                      DecPnt     = PROProjectInfo::DecimalPointVolume;
   \                     ??GetValue_12:
   \   000004E8   001086E5           STR      R1,[R6, #+0]
    206                      Unit       = VOLUME_UNIT;
   \   000004EC   003088E5           STR      R3,[R8, #+0]
    207                      {
    208                          double tmpVol15 = 0.0;
    209                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000004F0   00609DE5           LDR      R6,[SP, #+0]
   \   000004F4   0040A0E3           MOV      R4,#+0
   \   000004F8   0050A0E3           MOV      R5,#+0
   \   000004FC   0E0000EA           B        ??GetValue_51
    210                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_52:
   \   00000500   CC0399E5           LDR      R0,[R9, #+972]
   \   00000504   000090E5           LDR      R0,[R0, #+0]
   \   00000508   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    211                              if ( TPtr && TPtr->IsNewData  ) {
   \   0000050C   000050E3           CMP      R0,#+0
   \   00000510   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000514   00005113           CMPNE    R1,#+0
   \   00000518   0600000A           BEQ      ??GetValue_53
    212                                  tmpVol15   += TPtr->VolumeAtRefTmp();
   \   0000051C   ........           _BLF     ??VolumeAtRefTmp,??VolumeAtRefTmp??rA
   \   00000520   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000524   0420A0E1           MOV      R2,R4
   \   00000528   0530A0E1           MOV      R3,R5
   \   0000052C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000530   0040A0E1           MOV      R4,R0
   \   00000534   0150A0E1           MOV      R5,R1
    213                              }
    214                          }
   \                     ??GetValue_53:
   \   00000538   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_51:
   \   0000053C   04009DE5           LDR      R0,[SP, #+4]
   \   00000540   000056E1           CMP      R6,R0
   \   00000544   EDFFFFBA           BLT      ??GetValue_52
    215                          MyRetValue = tmpVol15;
   \   00000548   E0FFFFEA           B        ??GetValue_47
    216                          Status     = GETVAL_NO_ERR;
    217                      }
    218                      break;
    219                  case SVT_LOADRATE:
    220                      DecPnt     = 1;
   \                     ??GetValue_10:
   \   0000054C   004086E5           STR      R4,[R6, #+0]
    221                      Unit       = LOADRATE_UNIT;
   \   00000550   00C088E5           STR      R12,[R8, #+0]
    222                      {
    223                          double tmpLoadRate  = 0.0;
    224                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000554   00609DE5           LDR      R6,[SP, #+0]
   \   00000558   0040A0E3           MOV      R4,#+0
   \   0000055C   0050A0E3           MOV      R5,#+0
   \   00000560   0E0000EA           B        ??GetValue_54
    225                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_55:
   \   00000564   CC0399E5           LDR      R0,[R9, #+972]
   \   00000568   000090E5           LDR      R0,[R0, #+0]
   \   0000056C   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    226                              if ( TPtr && TPtr->IsNewData ) {
   \   00000570   000050E3           CMP      R0,#+0
   \   00000574   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000578   00005113           CMPNE    R1,#+0
   \   0000057C   0600000A           BEQ      ??GetValue_56
    227                                  tmpLoadRate  += TPtr->LoadRate;
   \   00000580   280290E5           LDR      R0,[R0, #+552]
   \   00000584   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000588   0420A0E1           MOV      R2,R4
   \   0000058C   0530A0E1           MOV      R3,R5
   \   00000590   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000594   0040A0E1           MOV      R4,R0
   \   00000598   0150A0E1           MOV      R5,R1
    228                              }
    229                          }
   \                     ??GetValue_56:
   \   0000059C   016086E2           ADD      R6,R6,#+1
   \                     ??GetValue_54:
   \   000005A0   04009DE5           LDR      R0,[SP, #+4]
   \   000005A4   000056E1           CMP      R6,R0
   \   000005A8   EDFFFFBA           BLT      ??GetValue_55
    230                          LoadRate   = tmpLoadRate;
   \   000005AC   0400A0E1           MOV      R0,R4
   \   000005B0   0510A0E1           MOV      R1,R5
   \   000005B4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005B8   280289E5           STR      R0,[R9, #+552]
    231                          MyRetValue = LoadRate;
   \   000005BC   ECFEFFEA           B        ??GetValue_22
    232                          Status     = GETVAL_NO_ERR;
    233                      }
    234                      break;
    235                  case SVT_MEAS_DNS:
    236                      DecPnt     = 4;
   \                     ??GetValue_16:
   \   000005C0   00C086E5           STR      R12,[R6, #+0]
    237                      Unit       = DENSITY_UNIT;
   \   000005C4   00A088E5           STR      R10,[R8, #+0]
    238                      {
    239                          double tmpMeasuredDns = 0.0;
    240                          int    MDnsCnt        = 0;
    241                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000005C8   00809DE5           LDR      R8,[SP, #+0]
   \   000005CC   0040A0E3           MOV      R4,#+0
   \   000005D0   0050A0E3           MOV      R5,#+0
   \   000005D4   0460A0E1           MOV      R6,R4
   \   000005D8   130000EA           B        ??GetValue_57
    242                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_58:
   \   000005DC   CC0399E5           LDR      R0,[R9, #+972]
   \   000005E0   000090E5           LDR      R0,[R0, #+0]
   \   000005E4   080190E7           LDR      R0,[R0, +R8, LSL #+2]
    243                              if ( TPtr && TPtr->IsNewData ) {
   \   000005E8   000050E3           CMP      R0,#+0
   \   000005EC   E010D015           LDRBNE   R1,[R0, #+224]
   \   000005F0   00005113           CMPNE    R1,#+0
    244                                  if ( TPtr->UseMeasuredDensity && TPtr->HasMeasuredDensity ) {
   \   000005F4   3012D015           LDRBNE   R1,[R0, #+560]
   \   000005F8   00005113           CMPNE    R1,#+0
   \   000005FC   3112D015           LDRBNE   R1,[R0, #+561]
   \   00000600   00005113           CMPNE    R1,#+0
   \   00000604   0700000A           BEQ      ??GetValue_59
    245                                      MDnsCnt++;
    246                                      tmpMeasuredDns     += TPtr->MeasuredDns;
   \   00000608   2C0290E5           LDR      R0,[R0, #+556]
   \   0000060C   016086E2           ADD      R6,R6,#+1
   \   00000610   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000614   0420A0E1           MOV      R2,R4
   \   00000618   0530A0E1           MOV      R3,R5
   \   0000061C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000620   0040A0E1           MOV      R4,R0
   \   00000624   0150A0E1           MOV      R5,R1
    247                                  }
    248                              }
    249                          }
   \                     ??GetValue_59:
   \   00000628   018088E2           ADD      R8,R8,#+1
   \                     ??GetValue_57:
   \   0000062C   04009DE5           LDR      R0,[SP, #+4]
   \   00000630   000058E1           CMP      R8,R0
   \   00000634   E8FFFFBA           BLT      ??GetValue_58
    250                          if ( MDnsCnt ) {
   \   00000638   000056E3           CMP      R6,#+0
   \   0000063C   E400000A           BEQ      ??GetValue_2
    251                              MeasuredDns = tmpMeasuredDns / double(MDnsCnt);
   \   00000640   0600A0E1           MOV      R0,R6
   \   00000644   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000648   0020A0E1           MOV      R2,R0
   \   0000064C   0130A0E1           MOV      R3,R1
   \   00000650   0400A0E1           MOV      R0,R4
   \   00000654   0510A0E1           MOV      R1,R5
   \   00000658   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000065C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000660   2C0289E5           STR      R0,[R9, #+556]
    252                              MyRetValue  = MeasuredDns;
   \   00000664   C2FEFFEA           B        ??GetValue_22
    253                          } else {
    254                              Status       = GETVAL_NOT_AVAILABLE;
    255                          }
    256                      }
    257                      break;
    258                  case SVT_DENSITY:
    259                      DecPnt     = 4;
   \                     ??GetValue_6:
   \   00000668   00C086E5           STR      R12,[R6, #+0]
    260                      Unit       = DENSITY_UNIT;
   \   0000066C   00A088E5           STR      R10,[R8, #+0]
    261                      {
    262                          double tmpDensity = 0.0;
    263                          int    DnsCnt     = 0;
    264                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000670   00809DE5           LDR      R8,[SP, #+0]
   \   00000674   0040A0E3           MOV      R4,#+0
   \   00000678   0050A0E3           MOV      R5,#+0
   \   0000067C   0460A0E1           MOV      R6,R4
   \   00000680   0D0000EA           B        ??GetValue_60
    265                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_61:
   \   00000684   CC0399E5           LDR      R0,[R9, #+972]
   \   00000688   000090E5           LDR      R0,[R0, #+0]
   \   0000068C   080190E7           LDR      R0,[R0, +R8, LSL #+2]
    266                              if ( TPtr ) {
   \   00000690   000050E3           CMP      R0,#+0
   \   00000694   0700000A           BEQ      ??GetValue_62
    267                                  DnsCnt++;
    268                                  tmpDensity     += TPtr->Density;
   \   00000698   940290E5           LDR      R0,[R0, #+660]
   \   0000069C   016086E2           ADD      R6,R6,#+1
   \   000006A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000006A4   0420A0E1           MOV      R2,R4
   \   000006A8   0530A0E1           MOV      R3,R5
   \   000006AC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000006B0   0040A0E1           MOV      R4,R0
   \   000006B4   0150A0E1           MOV      R5,R1
    269                              }
    270                          }
   \                     ??GetValue_62:
   \   000006B8   018088E2           ADD      R8,R8,#+1
   \                     ??GetValue_60:
   \   000006BC   04009DE5           LDR      R0,[SP, #+4]
   \   000006C0   000058E1           CMP      R8,R0
   \   000006C4   EEFFFFBA           BLT      ??GetValue_61
    271                          if ( DnsCnt ) {
   \   000006C8   000056E3           CMP      R6,#+0
   \   000006CC   C000000A           BEQ      ??GetValue_2
    272                              Density = tmpDensity / double(DnsCnt);
   \   000006D0   0600A0E1           MOV      R0,R6
   \   000006D4   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000006D8   0020A0E1           MOV      R2,R0
   \   000006DC   0130A0E1           MOV      R3,R1
   \   000006E0   0400A0E1           MOV      R0,R4
   \   000006E4   0510A0E1           MOV      R1,R5
   \   000006E8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000006EC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000006F0   940289E5           STR      R0,[R9, #+660]
    273                              MyRetValue  = Density;
   \   000006F4   9EFEFFEA           B        ??GetValue_22
    274                          } else {
    275                              Status       = GETVAL_NOT_AVAILABLE;
    276                          }
    277                      }
    278                      break;
    279                  case SVT_TEMP:
    280                      DecPnt     = 1;
   \                     ??GetValue_4:
   \   000006F8   004086E5           STR      R4,[R6, #+0]
    281                      Unit       = TEMP_UNIT;
   \   000006FC   00E088E5           STR      LR,[R8, #+0]
    282                      {
    283                          double tmpTempE = 0.0;
   \   00000700   0060A0E3           MOV      R6,#+0
   \   00000704   0070A0E3           MOV      R7,#+0
    284                          double tmpTempV = 0.0;
   \   00000708   0640A0E1           MOV      R4,R6
   \   0000070C   0450A0E1           MOV      R5,R4
    285                          int    TmpCntE  = 0;
   \   00000710   0410A0E1           MOV      R1,R4
   \   00000714   14108DE5           STR      R1,[SP, #+20]
    286                          int    TmpCntV  = 0;
   \   00000718   10108DE5           STR      R1,[SP, #+16]
    287                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   0000071C   00109DE5           LDR      R1,[SP, #+0]
   \   00000720   0B0000EA           B        ??GetValue_63
    288                              PROTank *TPtr = (PROTank *)TankTable[i];
    289                              if ( TPtr && ((TPtr->TemperaturePtr && TPtr->TemperaturePtr->IsNewData && TPtr->TemperaturePtr->HasTemp) || TPtr->GetIsOnline()) ) {
    290                                  if ( TPtr->Level ) {
    291                                      TmpCntV++;
    292                                      tmpTempV += TPtr->Temperature;
    293                                  } else {
    294                                      TmpCntE++;
   \                     ??GetValue_64:
   \   00000724   14109DE5           LDR      R1,[SP, #+20]
    295                                      tmpTempE += TPtr->Temperature;
   \   00000728   0A20A0E1           MOV      R2,R10
   \   0000072C   011081E2           ADD      R1,R1,#+1
   \   00000730   14108DE5           STR      R1,[SP, #+20]
   \   00000734   0B30A0E1           MOV      R3,R11
   \   00000738   0600A0E1           MOV      R0,R6
   \   0000073C   0710A0E1           MOV      R1,R7
   \   00000740   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000744   0060A0E1           MOV      R6,R0
   \   00000748   0170A0E1           MOV      R7,R1
    296                                  }
   \                     ??GetValue_65:
   \   0000074C   0C109DE5           LDR      R1,[SP, #+12]
   \   00000750   011081E2           ADD      R1,R1,#+1
   \                     ??GetValue_63:
   \   00000754   0C108DE5           STR      R1,[SP, #+12]
   \   00000758   0C009DE5           LDR      R0,[SP, #+12]
   \   0000075C   04109DE5           LDR      R1,[SP, #+4]
   \   00000760   010050E1           CMP      R0,R1
   \   00000764   230000AA           BGE      ??GetValue_66
   \   00000768   CC1399E5           LDR      R1,[R9, #+972]
   \   0000076C   001091E5           LDR      R1,[R1, #+0]
   \   00000770   008191E7           LDR      R8,[R1, +R0, LSL #+2]
   \   00000774   000058E3           CMP      R8,#+0
   \   00000778   F3FFFF0A           BEQ      ??GetValue_65
   \   0000077C   F80298E5           LDR      R0,[R8, #+760]
   \   00000780   000050E3           CMP      R0,#+0
   \   00000784   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000788   00005113           CMPNE    R1,#+0
   \   0000078C   6001D015           LDRBNE   R0,[R0, #+352]
   \   00000790   00005013           CMPNE    R0,#+0
   \   00000794   0300001A           BNE      ??GetValue_67
   \   00000798   0800A0E1           MOV      R0,R8
   \   0000079C   ........           _BLF     ??GetIsOnline,??GetIsOnline??rA
   \   000007A0   000050E3           CMP      R0,#+0
   \   000007A4   E8FFFF0A           BEQ      ??GetValue_65
   \                     ??GetValue_67:
   \   000007A8   8C0298E5           LDR      R0,[R8, #+652]
   \   000007AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000007B0   01B0A0E1           MOV      R11,R1
   \   000007B4   A41298E5           LDR      R1,[R8, #+676]
   \   000007B8   00A0A0E1           MOV      R10,R0
   \   000007BC   0000A0E3           MOV      R0,#+0
   \   000007C0   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000007C4   000050E3           CMP      R0,#+0
   \   000007C8   D5FFFF0A           BEQ      ??GetValue_64
   \   000007CC   10109DE5           LDR      R1,[SP, #+16]
   \   000007D0   0A20A0E1           MOV      R2,R10
   \   000007D4   011081E2           ADD      R1,R1,#+1
   \   000007D8   10108DE5           STR      R1,[SP, #+16]
   \   000007DC   0B30A0E1           MOV      R3,R11
   \   000007E0   0400A0E1           MOV      R0,R4
   \   000007E4   0510A0E1           MOV      R1,R5
   \   000007E8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000007EC   0040A0E1           MOV      R4,R0
   \   000007F0   0150A0E1           MOV      R5,R1
   \   000007F4   D4FFFFEA           B        ??GetValue_65
    297                              }
    298                          }
    299                          if ( TmpCntV ) {
   \                     ??GetValue_66:
   \   000007F8   10009DE5           LDR      R0,[SP, #+16]
   \   000007FC   A38FA0E3           MOV      R8,#+652
   \   00000800   000050E3           CMP      R0,#+0
   \   00000804   0800000A           BEQ      ??GetValue_68
    300                              Temperature = tmpTempV / double(TmpCntV);
   \   00000808   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   0000080C   0020A0E1           MOV      R2,R0
   \   00000810   0130A0E1           MOV      R3,R1
   \   00000814   0400A0E1           MOV      R0,R4
   \   00000818   0510A0E1           MOV      R1,R5
   \   0000081C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000820   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000824   090088E7           STR      R0,[R8, +R9]
    301                              MyRetValue  = Temperature;
   \   00000828   51FEFFEA           B        ??GetValue_22
    302                          } else if ( TmpCntE ) {
   \                     ??GetValue_68:
   \   0000082C   14009DE5           LDR      R0,[SP, #+20]
   \   00000830   000050E3           CMP      R0,#+0
   \   00000834   6600000A           BEQ      ??GetValue_2
    303                              Temperature = tmpTempE / double(TmpCntE);
   \   00000838   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   0000083C   0020A0E1           MOV      R2,R0
   \   00000840   0130A0E1           MOV      R3,R1
   \   00000844   0600A0E1           MOV      R0,R6
   \   00000848   0710A0E1           MOV      R1,R7
   \   0000084C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000850   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000854   090088E7           STR      R0,[R8, +R9]
    304                              MyRetValue  = Temperature;
   \   00000858   45FEFFEA           B        ??GetValue_22
    305                          } else {
    306                              Status       = GETVAL_NOT_AVAILABLE;
    307                          }
    308                      }
    309                      break;
    310                  case SVT_VAPOR_TEMP:
    311                      DecPnt     = 1;
   \                     ??GetValue_5:
   \   0000085C   004086E5           STR      R4,[R6, #+0]
    312                      Unit       = TEMP_UNIT;
   \   00000860   00E088E5           STR      LR,[R8, #+0]
    313                      {
    314                          double tmpTemp = 0.0;
    315                          int    TmpCnt  = 0;
    316                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000864   00809DE5           LDR      R8,[SP, #+0]
   \   00000868   0040A0E3           MOV      R4,#+0
   \   0000086C   0050A0E3           MOV      R5,#+0
   \   00000870   0460A0E1           MOV      R6,R4
   \   00000874   190000EA           B        ??GetValue_69
    317                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_70:
   \   00000878   CC0399E5           LDR      R0,[R9, #+972]
   \   0000087C   000090E5           LDR      R0,[R0, #+0]
   \   00000880   08A190E7           LDR      R10,[R0, +R8, LSL #+2]
    318                              if ( TPtr && ((TPtr->TemperaturePtr && TPtr->TemperaturePtr->IsNewData && TPtr->TemperaturePtr->HasTemp) || TPtr->GetIsOnline()) ) {
   \   00000884   00005AE3           CMP      R10,#+0
   \   00000888   1300000A           BEQ      ??GetValue_71
   \   0000088C   F8029AE5           LDR      R0,[R10, #+760]
   \   00000890   000050E3           CMP      R0,#+0
   \   00000894   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000898   00005113           CMPNE    R1,#+0
   \   0000089C   6001D015           LDRBNE   R0,[R0, #+352]
   \   000008A0   00005013           CMPNE    R0,#+0
   \   000008A4   0300001A           BNE      ??GetValue_72
   \   000008A8   0A00A0E1           MOV      R0,R10
   \   000008AC   ........           _BLF     ??GetIsOnline,??GetIsOnline??rA
   \   000008B0   000050E3           CMP      R0,#+0
   \   000008B4   0800000A           BEQ      ??GetValue_71
    319                                  TmpCnt++;
    320                                  tmpTemp += TPtr->TemperaturePtr->VaporTemp;
   \                     ??GetValue_72:
   \   000008B8   F8029AE5           LDR      R0,[R10, #+760]
   \   000008BC   016086E2           ADD      R6,R6,#+1
   \   000008C0   700190E5           LDR      R0,[R0, #+368]
   \   000008C4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000008C8   0420A0E1           MOV      R2,R4
   \   000008CC   0530A0E1           MOV      R3,R5
   \   000008D0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000008D4   0040A0E1           MOV      R4,R0
   \   000008D8   0150A0E1           MOV      R5,R1
    321                              }
    322                          }
   \                     ??GetValue_71:
   \   000008DC   018088E2           ADD      R8,R8,#+1
   \                     ??GetValue_69:
   \   000008E0   04009DE5           LDR      R0,[SP, #+4]
   \   000008E4   000058E1           CMP      R8,R0
   \   000008E8   E2FFFFBA           BLT      ??GetValue_70
    323                          if ( TmpCnt ) {
   \   000008EC   000056E3           CMP      R6,#+0
   \   000008F0   3700000A           BEQ      ??GetValue_2
    324                              float VaporTemp  = tmpTemp / double(TmpCnt);
    325                              MyRetValue = VaporTemp;
   \   000008F4   1C809DE5           LDR      R8,[SP, #+28]
   \   000008F8   0600A0E1           MOV      R0,R6
   \   000008FC   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000900   0020A0E1           MOV      R2,R0
   \   00000904   0130A0E1           MOV      R3,R1
   \   00000908   0400A0E1           MOV      R0,R4
   \   0000090C   0510A0E1           MOV      R1,R5
   \   00000910   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000914   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000918   000088E5           STR      R0,[R8, #+0]
   \   0000091C   2E0000EA           B        ??GetValue_23
    326                          } else {
    327                              Status       = GETVAL_NOT_AVAILABLE;
    328                          }
    329                      }
    330                      break;
    331                  case SVT_PRESSURE:
    332                      DecPnt     = 1;
   \                     ??GetValue_11:
   \   00000920   004086E5           STR      R4,[R6, #+0]
    333                      Unit       = PRESSURE_UNIT1;
   \   00000924   0600A0E3           MOV      R0,#+6
   \   00000928   000088E5           STR      R0,[R8, #+0]
    334                      {
    335                          double tmpPress = 0.0;
    336                          int    PCnt     = 0;
    337                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   0000092C   00809DE5           LDR      R8,[SP, #+0]
   \   00000930   0040A0E3           MOV      R4,#+0
   \   00000934   0050A0E3           MOV      R5,#+0
   \   00000938   0460A0E1           MOV      R6,R4
   \   0000093C   130000EA           B        ??GetValue_73
    338                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetValue_74:
   \   00000940   CC0399E5           LDR      R0,[R9, #+972]
   \   00000944   000090E5           LDR      R0,[R0, #+0]
   \   00000948   080190E7           LDR      R0,[R0, +R8, LSL #+2]
    339                              if ( TPtr ) {
   \   0000094C   000050E3           CMP      R0,#+0
    340                                  if ( TPtr->PressurePtr && TPtr->PressurePtr->IsNewData && TPtr->PressurePtr->HasPressure ) {
   \   00000950   F4129015           LDRNE    R1,[R0, #+756]
   \   00000954   00005113           CMPNE    R1,#+0
   \   00000958   E020D115           LDRBNE   R2,[R1, #+224]
   \   0000095C   00005213           CMPNE    R2,#+0
   \   00000960   5811D115           LDRBNE   R1,[R1, #+344]
   \   00000964   00005113           CMPNE    R1,#+0
   \   00000968   0700000A           BEQ      ??GetValue_75
    341                                      PCnt++;
    342                                      tmpPress  += TPtr->Pressure;
   \   0000096C   900290E5           LDR      R0,[R0, #+656]
   \   00000970   016086E2           ADD      R6,R6,#+1
   \   00000974   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000978   0420A0E1           MOV      R2,R4
   \   0000097C   0530A0E1           MOV      R3,R5
   \   00000980   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000984   0040A0E1           MOV      R4,R0
   \   00000988   0150A0E1           MOV      R5,R1
    343                                  }
    344                              }
    345                          }
   \                     ??GetValue_75:
   \   0000098C   018088E2           ADD      R8,R8,#+1
   \                     ??GetValue_73:
   \   00000990   04009DE5           LDR      R0,[SP, #+4]
   \   00000994   000058E1           CMP      R8,R0
   \   00000998   E8FFFFBA           BLT      ??GetValue_74
    346                          if ( PCnt ) {
   \   0000099C   000056E3           CMP      R6,#+0
   \   000009A0   0B00000A           BEQ      ??GetValue_2
    347                              Pressure = tmpPress / double(PCnt);
   \   000009A4   0600A0E1           MOV      R0,R6
   \   000009A8   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000009AC   0020A0E1           MOV      R2,R0
   \   000009B0   0130A0E1           MOV      R3,R1
   \   000009B4   0400A0E1           MOV      R0,R4
   \   000009B8   0510A0E1           MOV      R1,R5
   \   000009BC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000009C0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000009C4   900289E5           STR      R0,[R9, #+656]
    348                              MyRetValue  = Pressure;
   \   000009C8   E9FDFFEA           B        ??GetValue_22
    349                          } else {
    350                              Status       = GETVAL_NOT_AVAILABLE;
    351                          }
    352                      }
    353                      break;
    354                  default:
    355                      Status = GETVAL_NO_DISPLAY;
   \                     ??GetValue_17:
   \   000009CC   0310A0E3           MOV      R1,#+3
   \   000009D0   000000EA           B        ??GetValue_76
    356          //          Status = PROTank::GetValue(ValueId, Index, MyRetValue,  DecPnt,Unit);
    357                      break;
    358                  }
    359              } else {
    360                  Status     = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_2:
   \   000009D4   0110A0E3           MOV      R1,#+1
   \                     ??GetValue_76:
   \   000009D8   08108DE5           STR      R1,[SP, #+8]
    361              }
    362              return (Status);
   \                     ??GetValue_23:
   \   000009DC   08009DE5           LDR      R0,[SP, #+8]
   \   000009E0   20D08DE2           ADD      SP,SP,#+32
   \   000009E4   ........           B        ?Subroutine13
   \                     ??GetValue_3:
   \   000009E8   ........           DC32     ??DecimalPointWeight
   \   000009EC   ........           DC32     ??DecimalPointVolume
   \   000009F0   5C8FC2F5           DC32     0xfffffffff5c28f5c
   \   000009F4   285CEF3F           DC32     0x3fef5c28
    363          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine13_0:
   \   00000008   00000000           DC8      "",+0,+0,+0
    364          

   \                                 In segment CODE, align 4, keep-with-next
    365          int PROTankSum::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   4CD04DE2           SUB      SP,SP,#+76
   \   00000008   0040A0E1           MOV      R4,R0
    366              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    367              switch ( ValueId ) {
   \   00000010   0100A0E1           MOV      R0,R1
   \   00000014   1D10A0E3           MOV      R1,#+29
   \   00000018   401E81E3           ORR      R1,R1,#0x400
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   01108112           ADDNE    R1,R1,#+1
   \   00000024   01005011           CMPNE    R0,R1
   \   00000028   2000000A           BEQ      ??GetStringValue_2
   \   0000002C   FB1081E2           ADD      R1,R1,#+251
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   0800000A           BEQ      ??GetStringValue_3
   \   00000038   AE1081E2           ADD      R1,R1,#+174
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   7F00000A           BEQ      ??GetStringValue_4
   \   00000044   831F81E2           ADD      R1,R1,#+524
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   30108112           ADDNE    R1,R1,#+48
   \   00000050   01005011           CMPNE    R0,R1
   \   00000054   0700000A           BEQ      ??GetStringValue_5
   \   00000058   AF0000EA           B        ??GetStringValue_6
    368              case SVT_PRO_STATUS:
    369                  FindPROStatus(MyString);
   \                     ??GetStringValue_3:
   \   0000005C   A42094E5           LDR      R2,[R4, #+164]
   \   00000060   0310A0E1           MOV      R1,R3
   \   00000064   1C2092E5           LDR      R2,[R2, #+28]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0FE0A0E1           MOV      LR,PC
   \   00000070   12FF2FE1           BX       R2
   \   00000074   AC0000EA           B        ??GetStringValue_7
    370                  break;
    371              case SVT_USE_MSRD_DNS   :
    372              case SVT_CARGO_TYPE_NAME:
    373                  MyString = "";;
   \                     ??GetStringValue_5:
   \   00000078   ........           ADR      R1,??Subroutine13_0  ;; ""
   \   0000007C   30008DE2           ADD      R0,SP,#+48
   \   00000080   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000084   ........           LDR      R1,??DataTable1  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   003091E5           LDR      R3,[R1, #+0]
   \   00000090   0010A0E1           MOV      R1,R0
   \   00000094   54009DE5           LDR      R0,[SP, #+84]
   \   00000098   ........           _BLF     ??assign,??assign??rA
   \   0000009C   0520A0E1           MOV      R2,R5
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   30008DE2           ADD      R0,SP,#+48
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   9E0000EA           B        ??GetStringValue_7
    374                  break;
    375              case SVT_REMAINING_TIME:
    376              case SVT_FINISH_TIME:
    377                  {
    378                      int MyStart, MyEnd;
    379                      float TotalRemVol = 0.0;
    380                      if ( FindRange(MyStart, MyEnd) ) {
   \                     ??GetStringValue_2:
   \   000000B0   04208DE2           ADD      R2,SP,#+4
   \   000000B4   0C108DE2           ADD      R1,SP,#+12
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       ??FindRange
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   5C00000A           BEQ      ??GetStringValue_8
    381                          // We must check to see load or discharge
    382                          float PosLR     = 0.0;
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   00108DE5           STR      R1,[SP, #+0]
    383                          float NegLR     = 0.0;
    384                          float PosRemVol = 0.0;
    385                          float NegRemVol = 0.0;
    386                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000000D0   0CA09DE5           LDR      R10,[SP, #+12]
   \   000000D4   01B0A0E1           MOV      R11,R1
   \   000000D8   0190A0E1           MOV      R9,R1
   \   000000DC   0180A0E1           MOV      R8,R1
   \   000000E0   100000EA           B        ??GetStringValue_9
    387                              PROTank *TPtr = (PROTank *)TankTable[i];
    388                              if ( TPtr->RemainingTime ) {
    389                                  if ( TPtr->LoadRate > 0.0 ) {
    390                                      PosLR += TPtr->LoadRate;
    391                                      PosRemVol += TPtr->CalcRemainingVolume();
    392                                  } else if ( TPtr->LoadRate < 0.0 ) {
   \                     ??GetStringValue_10:
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   0710A0E1           MOV      R1,R7
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0030A0E3           MOV      R3,#+0
   \   000000F4   ........           _BLF     __dLess,??__dLess??rA
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0800000A           BEQ      ??GetStringValue_11
    393                                      NegLR += TPtr->LoadRate;
   \   00000100   280295E5           LDR      R0,[R5, #+552]
   \   00000104   0B10A0E1           MOV      R1,R11
   \   00000108   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000010C   00B0A0E1           MOV      R11,R0
    394                                      NegRemVol += TPtr->CalcRemainingVolume();
   \   00000110   0500A0E1           MOV      R0,R5
   \   00000114   ........           _BLF     ??CalcRemainingVolume,??CalcRemainingVolume??rA
   \   00000118   0810A0E1           MOV      R1,R8
   \   0000011C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000120   0080A0E1           MOV      R8,R0
    395                                  }
   \                     ??GetStringValue_11:
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \                     ??GetStringValue_9:
   \   00000128   04009DE5           LDR      R0,[SP, #+4]
   \   0000012C   00005AE1           CMP      R10,R0
   \   00000130   1A0000AA           BGE      ??GetStringValue_12
   \   00000134   CC0394E5           LDR      R0,[R4, #+972]
   \   00000138   000090E5           LDR      R0,[R0, #+0]
   \   0000013C   0A5190E7           LDR      R5,[R0, +R10, LSL #+2]
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   C41295E5           LDR      R1,[R5, #+708]
   \   00000148   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   F3FFFF0A           BEQ      ??GetStringValue_11
   \   00000154   280295E5           LDR      R0,[R5, #+552]
   \   00000158   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000015C   0060A0E1           MOV      R6,R0
   \   00000160   0170A0E1           MOV      R7,R1
   \   00000164   0120A0E3           MOV      R2,#+1
   \   00000168   0030A0E3           MOV      R3,#+0
   \   0000016C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   DAFFFF0A           BEQ      ??GetStringValue_10
   \   00000178   00109DE5           LDR      R1,[SP, #+0]
   \   0000017C   280295E5           LDR      R0,[R5, #+552]
   \   00000180   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000184   00008DE5           STR      R0,[SP, #+0]
   \   00000188   0500A0E1           MOV      R0,R5
   \   0000018C   ........           _BLF     ??CalcRemainingVolume,??CalcRemainingVolume??rA
   \   00000190   0910A0E1           MOV      R1,R9
   \   00000194   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000198   0090A0E1           MOV      R9,R0
   \   0000019C   E0FFFFEA           B        ??GetStringValue_11
    396                              }
    397                          }
    398                          float PosRemTime = 0.0;
    399                          float NegRemTime = 0.0;
    400                          if ( PosLR ) {
   \                     ??GetStringValue_12:
   \   000001A0   00109DE5           LDR      R1,[SP, #+0]
   \   000001A4   0050A0E3           MOV      R5,#+0
   \   000001A8   00A0A0E3           MOV      R10,#+0
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   0400000A           BEQ      ??GetStringValue_13
    401                              PosRemTime = fabs(PosRemVol / PosLR);
   \   000001BC   00109DE5           LDR      R1,[SP, #+0]
   \   000001C0   0900A0E1           MOV      R0,R9
   \   000001C4   ........           _BLF     __fDiv,??__fDiv??rA
   \   000001C8   8054C0E3           BIC      R5,R0,#0x80000000
    402                          }
    403                          if ( NegLR ) {
   \   000001CC   0000A0E3           MOV      R0,#+0
   \                     ??GetStringValue_13:
   \   000001D0   0B10A0E1           MOV      R1,R11
   \   000001D4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   0300000A           BEQ      ??GetStringValue_14
    404                              NegRemTime = fabs(NegRemVol / NegLR);
   \   000001E0   0800A0E1           MOV      R0,R8
   \   000001E4   0B10A0E1           MOV      R1,R11
   \   000001E8   ........           _BLF     __fDiv,??__fDiv??rA
   \   000001EC   80A4C0E3           BIC      R10,R0,#0x80000000
    405                          }
    406                          RemainingTime = MAX(PosRemTime, NegRemTime);
   \                     ??GetStringValue_14:
   \   000001F0   0500A0E1           MOV      R0,R5
   \   000001F4   0A10A0E1           MOV      R1,R10
   \   000001F8   ........           _BLF     __fLess,??__fLess??rA
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   0A50A011           MOVNE    R5,R10
   \   00000204   B10FA0E3           MOV      R0,#+708
   \   00000208   045080E7           STR      R5,[R0, +R4]
    407                          if ( RemainingTime ) {
   \   0000020C   0510A0E1           MOV      R1,R5
   \   00000210   0000A0E3           MOV      R0,#+0
   \   00000214   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   0600000A           BEQ      ??GetStringValue_8
    408                              HasLevelSensors = true;
   \   00000220   0100A0E3           MOV      R0,#+1
   \   00000224   3202C4E5           STRB     R0,[R4, #+562]
    409                              IsNewData       = true;
   \   00000228   E000C4E5           STRB     R0,[R4, #+224]
    410                              Status = PROTank::GetStringValue(ValueId, Index, MyString);
   \   0000022C   54309DE5           LDR      R3,[SP, #+84]
   \   00000230   50209DE5           LDR      R2,[SP, #+80]
   \   00000234   4C109DE5           LDR      R1,[SP, #+76]
   \   00000238   380000EA           B        ??GetStringValue_15
    411                          } else {
    412                              Status       = GETVAL_NOT_AVAILABLE;
   \                     ??GetStringValue_8:
   \   0000023C   0150A0E3           MOV      R5,#+1
   \   00000240   390000EA           B        ??GetStringValue_7
    413                          }
    414                      } else {
    415                          Status       = GETVAL_NOT_AVAILABLE;
    416                      }
    417                  }
    418                  break;
    419              case SVT_TANK_STATE_STR:
    420                  {
    421                      int MyStart, MyEnd;
    422                      if ( FindRange(MyStart, MyEnd) ) {
   \                     ??GetStringValue_4:
   \   00000244   04208DE2           ADD      R2,SP,#+4
   \   00000248   0D10A0E1           MOV      R1,SP
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   ........           BL       ??FindRange
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   F7FFFF0A           BEQ      ??GetStringValue_8
    423                          set<TankState> StateSet;
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   08008DE2           ADD      R0,SP,#+8
   \   00000264   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000268   10008DE2           ADD      R0,SP,#+16
   \   0000026C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000270   0810DDE5           LDRB     R1,[SP, #+8]
   \   00000274   2410CDE5           STRB     R1,[SP, #+36]
    424                          TankState      tmpState;
    425                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   00000278   00809DE5           LDR      R8,[SP, #+0]
   \   0000027C   130000EA           B        ??GetStringValue_16
    426                              PROTank *TPtr = (PROTank *)TankTable[i];
   \                     ??GetStringValue_17:
   \   00000280   CC0394E5           LDR      R0,[R4, #+972]
   \   00000284   000090E5           LDR      R0,[R0, #+0]
   \   00000288   081190E7           LDR      R1,[R0, +R8, LSL #+2]
    427                              if ( TPtr ) {
   \   0000028C   000051E3           CMP      R1,#+0
   \   00000290   0D00000A           BEQ      ??GetStringValue_18
    428                                  switch ( TPtr->TankType ) {
   \   00000294   540191E5           LDR      R0,[R1, #+340]
   \   00000298   010040E2           SUB      R0,R0,#+1
   \   0000029C   060050E3           CMP      R0,#+6
   \   000002A0   0900008A           BHI      ??GetStringValue_18
    429                                  case TANKTYPE_CARGO   :
    430                                  case TANKTYPE_BALLAST :
    431                                  case TANKTYPE_HFO     :
    432                                  case TANKTYPE_DO      :
    433                                  case TANKTYPE_LUB     :
    434                                  case TANKTYPE_FW      :
    435                                  case TANKTYPE_MISC    :
    436                                      tmpState = TPtr->GetState();
   \   000002A4   0100A0E1           MOV      R0,R1
   \   000002A8   A41091E5           LDR      R1,[R1, #+164]
   \   000002AC   801091E5           LDR      R1,[R1, #+128]
   \   000002B0   0FE0A0E1           MOV      LR,PC
   \   000002B4   11FF2FE1           BX       R1
   \   000002B8   0050A0E1           MOV      R5,R0
    437                                      StateSet.insert(tmpState);
   \   000002BC   0520A0E1           MOV      R2,R5
   \   000002C0   10108DE2           ADD      R1,SP,#+16
   \   000002C4   28008DE2           ADD      R0,SP,#+40
   \   000002C8   ........           _BLF     ??insert,??insert??rA
    438                                      break;
    439                                  case TANKTYPE_NONE    :
    440                                  default:
    441                                      break;
    442                                  }
    443                              }
    444                          }
   \                     ??GetStringValue_18:
   \   000002CC   018088E2           ADD      R8,R8,#+1
   \                     ??GetStringValue_16:
   \   000002D0   04009DE5           LDR      R0,[SP, #+4]
   \   000002D4   000058E1           CMP      R8,R0
   \   000002D8   E8FFFFBA           BLT      ??GetStringValue_17
    445                          if ( StateSet.size() == 1 ) {
   \   000002DC   20009DE5           LDR      R0,[SP, #+32]
   \   000002E0   010050E3           CMP      R0,#+1
    446                              State = tmpState;
    447                          } else {
    448                              State = tUndefined;
   \   000002E4   0450A013           MOVNE    R5,#+4
   \   000002E8   4851C4E5           STRB     R5,[R4, #+328]
    449                          }
    450                          Status = PROTank::GetStringValue(ValueId, Index, MyString);
   \   000002EC   54309DE5           LDR      R3,[SP, #+84]
   \   000002F0   50209DE5           LDR      R2,[SP, #+80]
   \   000002F4   4C109DE5           LDR      R1,[SP, #+76]
   \   000002F8   0400A0E1           MOV      R0,R4
   \   000002FC   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
    451                      } else {
   \   00000300   14109DE5           LDR      R1,[SP, #+20]
   \   00000304   0050A0E1           MOV      R5,R0
   \   00000308   10008DE2           ADD      R0,SP,#+16
   \   0000030C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000310   10008DE2           ADD      R0,SP,#+16
   \   00000314   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000318   030000EA           B        ??GetStringValue_7
    452                          Status       = GETVAL_NOT_AVAILABLE;
    453                      }
    454                  }
    455                  break;
    456              default:
    457                  //Status = GETVAL_NO_DISPLAY;
    458                  Status = PROTank::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_6:
   \   0000031C   0010A0E1           MOV      R1,R0
   \                     ??GetStringValue_15:
   \   00000320   0400A0E1           MOV      R0,R4
   \   00000324   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000328   0050A0E1           MOV      R5,R0
    459                  break;
    460              }
    461              return (Status);
   \                     ??GetStringValue_7:
   \   0000032C   0500A0E1           MOV      R0,R5
   \   00000330   58D08DE2           ADD      SP,SP,#+88
   \   00000334                      REQUIRE ?Subroutine13
   \   00000334                      ;; // Fall through to label ?Subroutine13
    462          }
    463          
    464          

   \                                 In segment CODE, align 4, keep-with-next
    465          int PROTankSum::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   5070DDE5           LDRB     R7,[SP, #+80]
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   0160A0E1           MOV      R6,R1
    466              int Status    = E_NO_ERR,
   \   00000014   0040A0E3           MOV      R4,#+0
    467                  ValUnitId = NO_UNIT;
    468              switch ( ValueId ) {
   \   00000018   558FA0E3           MOV      R8,#+340
   \   0000001C   E910A0E3           MOV      R1,#+233
   \   00000020   C01F81E3           ORR      R1,R1,#0x300
   \   00000024   010056E1           CMP      R6,R1
   \   00000028   02108113           ORRNE    R1,R1,#0x2
   \   0000002C   01005611           CMPNE    R6,R1
   \   00000030   FB0F5613           CMPNE    R6,#+1004
   \   00000034   02108112           ADDNE    R1,R1,#+2
   \   00000038   01005611           CMPNE    R6,R1
   \   0000003C   01108112           ADDNE    R1,R1,#+1
   \   00000040   01005611           CMPNE    R6,R1
   \   00000044   01108113           ORRNE    R1,R1,#0x1
   \   00000048   01005611           CMPNE    R6,R1
   \   0000004C   02108112           ADDNE    R1,R1,#+2
   \   00000050   01005611           CMPNE    R6,R1
   \   00000054   FF0F5613           CMPNE    R6,#+1020
   \   00000058   0C108113           ORRNE    R1,R1,#0xC
   \   0000005C   01005611           CMPNE    R6,R1
   \   00000060   01108112           ADDNE    R1,R1,#+1
   \   00000064   01005611           CMPNE    R6,R1
   \   00000068   14108112           ADDNE    R1,R1,#+20
   \   0000006C   01005611           CMPNE    R6,R1
   \   00000070   01108113           ORRNE    R1,R1,#0x1
   \   00000074   01005611           CMPNE    R6,R1
   \   00000078   8F00000A           BEQ      ??PutValue_4
   \   0000007C   191081E2           ADD      R1,R1,#+25
   \   00000080   010056E1           CMP      R6,R1
   \   00000084   01108113           ORRNE    R1,R1,#0x1
   \   00000088   01005611           CMPNE    R6,R1
   \   0000008C   01108112           ADDNE    R1,R1,#+1
   \   00000090   01005611           CMPNE    R6,R1
   \   00000094   01108113           ORRNE    R1,R1,#0x1
   \   00000098   01005611           CMPNE    R6,R1
   \   0000009C   0401000A           BEQ      ??PutValue_5
   \   000000A0   430E56E3           CMP      R6,#+1072
   \   000000A4   03108112           ADDNE    R1,R1,#+3
   \   000000A8   01005611           CMPNE    R6,R1
   \   000000AC   01108113           ORRNE    R1,R1,#0x1
   \   000000B0   01005611           CMPNE    R6,R1
   \   000000B4   02108112           ADDNE    R1,R1,#+2
   \   000000B8   01005611           CMPNE    R6,R1
   \   000000BC   C000000A           BEQ      ??PutValue_6
   \   000000C0   071081E2           ADD      R1,R1,#+7
   \   000000C4   010056E1           CMP      R6,R1
   \   000000C8   01108113           ORRNE    R1,R1,#0x1
   \   000000CC   01005611           CMPNE    R6,R1
   \   000000D0   01108112           ADDNE    R1,R1,#+1
   \   000000D4   01005611           CMPNE    R6,R1
   \   000000D8   01108113           ORRNE    R1,R1,#0x1
   \   000000DC   01005611           CMPNE    R6,R1
   \   000000E0   F300000A           BEQ      ??PutValue_5
   \   000000E4   031081E2           ADD      R1,R1,#+3
   \   000000E8   010056E1           CMP      R6,R1
   \   000000EC   01108113           ORRNE    R1,R1,#0x1
   \   000000F0   01005611           CMPNE    R6,R1
   \   000000F4   01108112           ADDNE    R1,R1,#+1
   \   000000F8   01005611           CMPNE    R6,R1
   \   000000FC   01108113           ORRNE    R1,R1,#0x1
   \   00000100   01005611           CMPNE    R6,R1
   \   00000104   AE00000A           BEQ      ??PutValue_6
   \   00000108   011081E2           ADD      R1,R1,#+1
   \   0000010C   010056E1           CMP      R6,R1
   \   00000110   01108113           ORRNE    R1,R1,#0x1
   \   00000114   01005611           CMPNE    R6,R1
   \   00000118   01108112           ADDNE    R1,R1,#+1
   \   0000011C   01005611           CMPNE    R6,R1
   \   00000120   01108113           ORRNE    R1,R1,#0x1
   \   00000124   01005611           CMPNE    R6,R1
   \   00000128   E100000A           BEQ      ??PutValue_5
   \   0000012C   1F1081E2           ADD      R1,R1,#+31
   \   00000130   010056E1           CMP      R6,R1
   \   00000134   02108113           ORRNE    R1,R1,#0x2
   \   00000138   01005611           CMPNE    R6,R1
   \   0000013C   01108113           ORRNE    R1,R1,#0x1
   \   00000140   01005611           CMPNE    R6,R1
   \   00000144   02108112           ADDNE    R1,R1,#+2
   \   00000148   01005611           CMPNE    R6,R1
   \   0000014C   9C00000A           BEQ      ??PutValue_6
   \   00000150   C710A0E3           MOV      R1,#+199
   \   00000154   501E81E3           ORR      R1,R1,#0x500
   \   00000158   010056E1           CMP      R6,R1
   \   0000015C   7D0E5613           CMPNE    R6,#+2000
   \   00000160   681E8813           ORRNE    R1,R8,#0x680
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   05108112           ADDNE    R1,R1,#+5
   \   0000016C   01005611           CMPNE    R6,R1
   \   00000170   02108113           ORRNE    R1,R1,#0x2
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   01108112           ADDNE    R1,R1,#+1
   \   0000017C   01005611           CMPNE    R6,R1
   \   00000180   01108113           ORRNE    R1,R1,#0x1
   \   00000184   01005611           CMPNE    R6,R1
   \   00000188   01108112           ADDNE    R1,R1,#+1
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   01108113           ORRNE    R1,R1,#0x1
   \   00000194   01005611           CMPNE    R6,R1
   \   00000198   03108112           ADDNE    R1,R1,#+3
   \   0000019C   01005611           CMPNE    R6,R1
   \   000001A0   21108112           ADDNE    R1,R1,#+33
   \   000001A4   01005611           CMPNE    R6,R1
   \   000001A8   8C10A013           MOVNE    R1,#+140
   \   000001AC   8C1D8113           ORRNE    R1,R1,#0x2300
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108113           ORRNE    R1,R1,#0x1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108112           ADDNE    R1,R1,#+1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108113           ORRNE    R1,R1,#0x1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   05108112           ADDNE    R1,R1,#+5
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   01108113           ORRNE    R1,R1,#0x1
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   0B108112           ADDNE    R1,R1,#+11
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108113           ORRNE    R1,R1,#0x1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   02108113           ORRNE    R1,R1,#0x2
   \   000001F0   01005611           CMPNE    R6,R1
   \   000001F4   01108112           ADDNE    R1,R1,#+1
   \   000001F8   01005611           CMPNE    R6,R1
   \   000001FC   20108112           ADDNE    R1,R1,#+32
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   19108113           ORRNE    R1,R1,#0x19
   \   00000208   01005611           CMPNE    R6,R1
   \   0000020C   01108112           ADDNE    R1,R1,#+1
   \   00000210   01005611           CMPNE    R6,R1
   \   00000214   01108113           ORRNE    R1,R1,#0x1
   \   00000218   01005611           CMPNE    R6,R1
   \   0000021C   08108112           ADDNE    R1,R1,#+8
   \   00000220   01005611           CMPNE    R6,R1
   \   00000224   01108112           ADDNE    R1,R1,#+1
   \   00000228   01005611           CMPNE    R6,R1
   \   0000022C   01108113           ORRNE    R1,R1,#0x1
   \   00000230   01005611           CMPNE    R6,R1
   \   00000234   09108112           ADDNE    R1,R1,#+9
   \   00000238   01005611           CMPNE    R6,R1
   \   0000023C   01108113           ORRNE    R1,R1,#0x1
   \   00000240   01005611           CMPNE    R6,R1
   \   00000244   01108112           ADDNE    R1,R1,#+1
   \   00000248   01005611           CMPNE    R6,R1
   \   0000024C   01108113           ORRNE    R1,R1,#0x1
   \   00000250   01005611           CMPNE    R6,R1
   \   00000254   01108112           ADDNE    R1,R1,#+1
   \   00000258   01005611           CMPNE    R6,R1
   \   0000025C   01108113           ORRNE    R1,R1,#0x1
   \   00000260   01005611           CMPNE    R6,R1
   \   00000264   01108112           ADDNE    R1,R1,#+1
   \   00000268   01005611           CMPNE    R6,R1
   \   0000026C   01108113           ORRNE    R1,R1,#0x1
   \   00000270   01005611           CMPNE    R6,R1
   \   00000274   01108112           ADDNE    R1,R1,#+1
   \   00000278   01005611           CMPNE    R6,R1
   \   0000027C   01108113           ORRNE    R1,R1,#0x1
   \   00000280   01005611           CMPNE    R6,R1
   \   00000284   01108112           ADDNE    R1,R1,#+1
   \   00000288   01005611           CMPNE    R6,R1
   \   0000028C   01108113           ORRNE    R1,R1,#0x1
   \   00000290   01005611           CMPNE    R6,R1
   \   00000294   01108112           ADDNE    R1,R1,#+1
   \   00000298   01005611           CMPNE    R6,R1
   \   0000029C   01108113           ORRNE    R1,R1,#0x1
   \   000002A0   01005611           CMPNE    R6,R1
   \   000002A4   900D5613           CMPNE    R6,#+9216
   \   000002A8   02108112           ADDNE    R1,R1,#+2
   \   000002AC   01005611           CMPNE    R6,R1
   \   000002B0   05108112           ADDNE    R1,R1,#+5
   \   000002B4   01005611           CMPNE    R6,R1
   \   000002B8   3F00001A           BNE      ??PutValue_7
    469              case SVT_AL_LIMIT_TYPE_PRESS:
    470              case SVT_LEV_CHANGE_LIM     :
    471              case SVT_HIHI_LEVEL_ENABLE    :
    472              case SVT_HI_LEVEL_ENABLE    :
    473              case SVT_LO_LEVEL_ENABLE    :
    474              case SVT_HIHI_VOLPCNT_LIM     :
    475              case SVT_HI_LEVEL_LIMIT     :
    476              case SVT_HI_VOLPCNT_LIM     :
    477              case SVT_HI_VOLUME_LIM      :
    478              case SVT_HI_WEIGHT_LIM      :
    479              case SVT_HI_ULLAGE_LIM      :
    480              case SVT_HI_LEVEL_LIM       :
    481              case SVT_LO_LEVEL_LIMIT     :
    482              case SVT_LO_VOLPCNT_LIM     :
    483              case SVT_LO_VOLUME_LIM      :
    484              case SVT_LO_WEIGHT_LIM      :
    485              case SVT_LO_ULLAGE_LIM      :
    486              case SVT_LO_LEVEL_LIM       :
    487          
    488              case SVT_LOLO_LEVEL_LIMIT   :
    489              case SVT_LOLO_VOLPCNT_LIM   :
    490              case SVT_LOLO_VOLUME_LIM    :
    491              case SVT_LOLO_WEIGHT_LIM    :
    492              case SVT_LOLO_ULLAGE_LIM    :
    493              case SVT_LOLO_LEVEL_LIM     :
    494          
    495              case SVT_HI_PRESS_ENABLE    :
    496              case SVT_LO_PRESS_ENABLE    :
    497              case SVT_HI_PRESS_LIMIT     :
    498              case SVT_LO_PRESS_LIMIT     :
    499              case SVT_TEMP               :
    500              case SVT_VAPOR_TEMP         :
    501              case SVT_HI_TEMP_ENABLE     :
    502              case SVT_LO_TEMP_ENABLE     :
    503              case SVT_HI_TEMP_LIMIT      :
    504              case SVT_LO_TEMP_LIMIT      :
    505              case SVT_HI_BOT_TEMP_LIMIT  :
    506              case SVT_LO_BOT_TEMP_LIMIT  :
    507              case SVT_REF_DNS1           :
    508              case SVT_REF_DNS2           :
    509              case SVT_REF_TMP1           :
    510              case SVT_REF_TMP2           :
    511              case SVT_COEFF              :
    512              case SVT_DENSITY            :
    513              case SVT_BASIC_TYPE         :
    514              case SVT_VISCOSITY          :
    515          
    516              case SVT_API                :
    517          
    518          
    519              case SVT_TANK_STATE_STR     :
    520              case SVT_MEAS_DNS           :
    521              case SVT_USE_MSRD_DNS       :
    522          
    523              case SVT_WEIGHT             :
    524              case SVT_VOLUME             :
    525              case SVT_VOLPERCENT         :
    526              case SVT_LEVEL_FC           :
    527              case SVT_LEVEL_REF          :
    528              case SVT_LEVEL_SENSOR:
    529              case SVT_ULLAGE             :
    530              case SVT_ULLAGE_RADAR       :
    531              case SVT_ULLAGE_FC          :
    532          
    533                  {
    534                      int MyStart, MyEnd;
    535                      int tmpStatus = E_NO_ERR;
   \                     ??PutValue_4:
   \   000002BC   0090A0E3           MOV      R9,#+0
    536                      if ( FindRange(MyStart, MyEnd) ) {
   \   000002C0   04208DE2           ADD      R2,SP,#+4
   \   000002C4   0D10A0E1           MOV      R1,SP
   \   000002C8   ........           BL       ??FindRange
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   3900000A           BEQ      ??PutValue_7
    537                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000002D4   00A09DE5           LDR      R10,[SP, #+0]
   \   000002D8   010000EA           B        ??PutValue_8
    538                              PROTank *TPtr = (PROTank *)TankTable[i];
    539                              switch ( TPtr->TankType ) {
    540                              case TANKTYPE_CARGO      :
    541                              case TANKTYPE_BALLAST    :
    542                              case TANKTYPE_HFO        :
    543                              case TANKTYPE_DO         :
    544                              case TANKTYPE_LUB        :
    545                              case TANKTYPE_FW         :
    546                              case TANKTYPE_MISC       :
    547                              case TANKTYPE_VOIDSPACE  :
    548                              case TANKTYPE_TANK_PRESS :
    549                              case TANKTYPE_TEMPERATURE:
    550                                  if ( TPtr ) {
    551                                      tmpStatus |= LibPutValue(ValueId, Index, TPtr, NewValue, Local, true); //EHSMark Must do soemthing with Units???
    552                                  }
    553                                  break;
    554                              case TANKTYPE_SUM        :
    555                              case TANKTYPE_EMPTY      :
    556                              case TANKTYPE_NONE       :
    557                              case TANKTYPE_CSOLID     :
    558                              case TANKTYPE_VSOLID     :
    559                                  break;
    560                              default:
    561                                  Status = E_UNKNOWN_TANK;
   \                     ??PutValue_9:
   \   000002DC   0D40A0E3           MOV      R4,#+13
   \                     ??PutValue_10:
   \   000002E0   01A08AE2           ADD      R10,R10,#+1
   \                     ??PutValue_8:
   \   000002E4   04009DE5           LDR      R0,[SP, #+4]
   \   000002E8   00005AE1           CMP      R10,R0
   \   000002EC   2E0000AA           BGE      ??PutValue_11
   \   000002F0   CC0395E5           LDR      R0,[R5, #+972]
   \   000002F4   000090E5           LDR      R0,[R0, #+0]
   \   000002F8   0AB190E7           LDR      R11,[R0, +R10, LSL #+2]
   \   000002FC   0B0098E7           LDR      R0,[R8, +R11]
   \   00000300   020080E2           ADD      R0,R0,#+2
   \   00000304   0F0050E3           CMP      R0,#+15
   \   00000308   F3FFFF8A           BHI      ??PutValue_9
   \   0000030C   011F8FE2           ADR      R1,??PutValue_1
   \   00000310   D01091E1           LDRSB    R1,[R1, R0]
   \   00000314   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000318   F1F1F103           DC8      +241,+241,+241,+3
   \   0000031C   03030303           DC8      +3,+3,+3,+3
   \   00000320   030303F1           DC8      +3,+3,+3,+241
   \   00000324   F103F003           DC8      +241,+3,+240,+3
   \                     ??PutValue_12:
   \   00000328   00005BE3           CMP      R11,#+0
   \   0000032C   EBFFFF0A           BEQ      ??PutValue_10
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0010A0E3           MOV      R1,#+0
   \   00000338   08008DE2           ADD      R0,SP,#+8
   \   0000033C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000340   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000344   28109DE5           LDR      R1,[SP, #+40]
   \   00000348   003090E5           LDR      R3,[R0, #+0]
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   08008DE2           ADD      R0,SP,#+8
   \   00000354   ........           _BLF     ??assign,??assign??rA
   \   00000358   0000E0E3           MVN      R0,#+0
   \   0000035C   01002DE9           PUSH     {R0}
   \   00000360   01002DE9           PUSH     {R0}
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   01002DE9           PUSH     {R0}
   \   0000036C   0100A0E3           MOV      R0,#+1
   \   00000370   01002DE9           PUSH     {R0}
   \   00000374   0700A0E1           MOV      R0,R7
   \   00000378   01002DE9           PUSH     {R0}
   \   0000037C   38109DE5           LDR      R1,[SP, #+56]
   \   00000380   1C308DE2           ADD      R3,SP,#+28
   \   00000384   0B20A0E1           MOV      R2,R11
   \   00000388   0600A0E1           MOV      R0,R6
   \   0000038C   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000390   099080E1           ORR      R9,R0,R9
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0110A0E3           MOV      R1,#+1
   \   0000039C   1C008DE2           ADD      R0,SP,#+28
   \   000003A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A4   14D08DE2           ADD      SP,SP,#+20
   \   000003A8   CCFFFFEA           B        ??PutValue_10
    562                                  break;
    563          
    564                              }
    565                          }
    566                          if ( tmpStatus != E_NO_ERR ) {
   \                     ??PutValue_11:
   \   000003AC   000059E3           CMP      R9,#+0
   \   000003B0   7E00000A           BEQ      ??PutValue_13
    567                              Status = E_COMMON_INPUT_ERR;
   \   000003B4   2140A0E3           MOV      R4,#+33
   \   000003B8   840000EA           B        ??PutValue_14
    568                          }
    569                      } else {
    570                          Status       = E_NOT_COMMON_INPUT;
   \                     ??PutValue_7:
   \   000003BC   3040A0E3           MOV      R4,#+48
   \   000003C0   820000EA           B        ??PutValue_14
    571                      }
    572                  }
    573                  break;
    574              case SVT_TT                 :
    575              case SVT_T4                 :
    576              case SVT_T3                 :
    577              case SVT_T1                 :
    578              case SVT_T1_OFFSET          :
    579              case SVT_T3_OFFSET          :
    580              case SVT_T4_OFFSET          :
    581              case SVT_TT_OFFSET          :
    582              case SVT_T1_GAIN            :
    583              case SVT_T3_GAIN            :
    584              case SVT_T4_GAIN            :
    585              case SVT_TT_GAIN            :
    586                  {
    587                      int MyStart, MyEnd;
    588                      int tmpStatus = E_NO_ERR;
   \                     ??PutValue_6:
   \   000003C4   0090A0E3           MOV      R9,#+0
    589                      if ( FindRange(MyStart, MyEnd) ) {
   \   000003C8   0D20A0E1           MOV      R2,SP
   \   000003CC   04108DE2           ADD      R1,SP,#+4
   \   000003D0   ........           BL       ??FindRange
   \   000003D4   000050E3           CMP      R0,#+0
   \   000003D8   F7FFFF0A           BEQ      ??PutValue_7
    590                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000003DC   04A09DE5           LDR      R10,[SP, #+4]
   \   000003E0   010000EA           B        ??PutValue_15
    591                              PROTank *TPtr = (PROTank *)TankTable[i];
    592                              switch ( TPtr->TankType ) {
    593                              case TANKTYPE_CARGO      :
    594                              case TANKTYPE_BALLAST    :
    595                              case TANKTYPE_HFO        :
    596                              case TANKTYPE_DO         :
    597                              case TANKTYPE_LUB        :
    598                              case TANKTYPE_FW         :
    599                              case TANKTYPE_MISC       :
    600                              case TANKTYPE_VOIDSPACE  :
    601                              case TANKTYPE_TEMPERATURE:
    602                                  if ( TPtr ) {
    603                                      tmpStatus |= LibPutValue(ValueId, Index, TPtr, NewValue, Local, true); //EHSMark Must do soemthing with Units???
    604                                  }
    605                                  break;
    606                              case TANKTYPE_SUM        :
    607                              case TANKTYPE_EMPTY      :
    608                              case TANKTYPE_NONE       :
    609                              case TANKTYPE_CSOLID     :
    610                              case TANKTYPE_VSOLID     :
    611                                  break;
    612                              default:
    613                                  Status = E_UNKNOWN_TANK;
   \                     ??PutValue_16:
   \   000003E4   0D40A0E3           MOV      R4,#+13
   \                     ??PutValue_17:
   \   000003E8   01A08AE2           ADD      R10,R10,#+1
   \                     ??PutValue_15:
   \   000003EC   00009DE5           LDR      R0,[SP, #+0]
   \   000003F0   00005AE1           CMP      R10,R0
   \   000003F4   ECFFFFAA           BGE      ??PutValue_11
   \   000003F8   CC0395E5           LDR      R0,[R5, #+972]
   \   000003FC   000090E5           LDR      R0,[R0, #+0]
   \   00000400   0AB190E7           LDR      R11,[R0, +R10, LSL #+2]
   \   00000404   0B0098E7           LDR      R0,[R8, +R11]
   \   00000408   020080E2           ADD      R0,R0,#+2
   \   0000040C   0F0050E3           CMP      R0,#+15
   \   00000410   F3FFFF8A           BHI      ??PutValue_16
   \   00000414   011F8FE2           ADR      R1,??PutValue_2
   \   00000418   D01091E1           LDRSB    R1,[R1, R0]
   \   0000041C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_2:
   \   00000420   F1F1F103           DC8      +241,+241,+241,+3
   \   00000424   03030303           DC8      +3,+3,+3,+3
   \   00000428   030303F1           DC8      +3,+3,+3,+241
   \   0000042C   F1F0F003           DC8      +241,+240,+240,+3
   \                     ??PutValue_18:
   \   00000430   00005BE3           CMP      R11,#+0
   \   00000434   EBFFFF0A           BEQ      ??PutValue_17
   \   00000438   0020A0E3           MOV      R2,#+0
   \   0000043C   0010A0E3           MOV      R1,#+0
   \   00000440   08008DE2           ADD      R0,SP,#+8
   \   00000444   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000448   ........           LDR      R0,??DataTable5  ;; ??npos
   \   0000044C   28109DE5           LDR      R1,[SP, #+40]
   \   00000450   003090E5           LDR      R3,[R0, #+0]
   \   00000454   0020A0E3           MOV      R2,#+0
   \   00000458   08008DE2           ADD      R0,SP,#+8
   \   0000045C   ........           _BLF     ??assign,??assign??rA
   \   00000460   0000E0E3           MVN      R0,#+0
   \   00000464   01002DE9           PUSH     {R0}
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   0000A0E3           MOV      R0,#+0
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   0100A0E3           MOV      R0,#+1
   \   00000478   01002DE9           PUSH     {R0}
   \   0000047C   0700A0E1           MOV      R0,R7
   \   00000480   01002DE9           PUSH     {R0}
   \   00000484   38109DE5           LDR      R1,[SP, #+56]
   \   00000488   1C308DE2           ADD      R3,SP,#+28
   \   0000048C   0B20A0E1           MOV      R2,R11
   \   00000490   0600A0E1           MOV      R0,R6
   \   00000494   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000498   099080E1           ORR      R9,R0,R9
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0110A0E3           MOV      R1,#+1
   \   000004A4   1C008DE2           ADD      R0,SP,#+28
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004AC   14D08DE2           ADD      SP,SP,#+20
   \   000004B0   CCFFFFEA           B        ??PutValue_17
    614                                  break;
    615          
    616                              }
    617                          }
    618                          if ( tmpStatus != E_NO_ERR ) {
    619                              Status = E_COMMON_INPUT_ERR;
    620                          }
    621                      } else {
    622                          Status       = E_NOT_COMMON_INPUT;
    623                      }
    624                  }
    625                  break;
    626              case SVT_TP                 :
    627              case SVT_UP                 :
    628              case SVT_MP                 :
    629              case SVT_BP                 :
    630              case SVT_BP_OFFSET          :
    631              case SVT_MP_OFFSET          :
    632              case SVT_UP_OFFSET          :
    633              case SVT_TP_OFFSET          :
    634              case SVT_BP_GAIN            :
    635              case SVT_MP_GAIN            :
    636              case SVT_UP_GAIN            :
    637              case SVT_TP_GAIN            :
    638                  {
    639                      int MyStart, MyEnd;
    640                      int tmpStatus = E_NO_ERR;
   \                     ??PutValue_5:
   \   000004B4   0090A0E3           MOV      R9,#+0
    641                      if ( FindRange(MyStart, MyEnd) ) {
   \   000004B8   04208DE2           ADD      R2,SP,#+4
   \   000004BC   0D10A0E1           MOV      R1,SP
   \   000004C0   ........           BL       ??FindRange
   \   000004C4   000050E3           CMP      R0,#+0
   \   000004C8   BBFFFF0A           BEQ      ??PutValue_7
    642                          for ( int i = MyStart; i < MyEnd; i++ ) {
   \   000004CC   00A09DE5           LDR      R10,[SP, #+0]
   \   000004D0   010000EA           B        ??PutValue_19
    643                              PROTank *TPtr = (PROTank *)TankTable[i];
    644                              switch ( TPtr->TankType ) {
    645                              case TANKTYPE_CARGO      :
    646                              case TANKTYPE_BALLAST    :
    647                              case TANKTYPE_HFO        :
    648                              case TANKTYPE_DO         :
    649                              case TANKTYPE_LUB        :
    650                              case TANKTYPE_FW         :
    651                              case TANKTYPE_MISC       :
    652                              case TANKTYPE_VOIDSPACE  :
    653                              case TANKTYPE_TANK_PRESS :
    654                                  if ( TPtr ) {
    655                                      tmpStatus |= LibPutValue(ValueId, Index, TPtr, NewValue, Local, true); //EHSMark Must do soemthing with Units???
    656                                  }
    657                                  break;
    658                              case TANKTYPE_SUM        :
    659                              case TANKTYPE_EMPTY      :
    660                              case TANKTYPE_NONE       :
    661                              case TANKTYPE_CSOLID     :
    662                              case TANKTYPE_VSOLID     :
    663                                  break;
    664                              default:
    665                                  Status = E_UNKNOWN_TANK;
   \                     ??PutValue_20:
   \   000004D4   0D40A0E3           MOV      R4,#+13
   \                     ??PutValue_21:
   \   000004D8   01A08AE2           ADD      R10,R10,#+1
   \                     ??PutValue_19:
   \   000004DC   04009DE5           LDR      R0,[SP, #+4]
   \   000004E0   00005AE1           CMP      R10,R0
   \   000004E4   2E0000AA           BGE      ??PutValue_22
   \   000004E8   CC0395E5           LDR      R0,[R5, #+972]
   \   000004EC   000090E5           LDR      R0,[R0, #+0]
   \   000004F0   0AB190E7           LDR      R11,[R0, +R10, LSL #+2]
   \   000004F4   0B0098E7           LDR      R0,[R8, +R11]
   \   000004F8   020080E2           ADD      R0,R0,#+2
   \   000004FC   0D0050E3           CMP      R0,#+13
   \   00000500   F3FFFF8A           BHI      ??PutValue_20
   \   00000504   011F8FE2           ADR      R1,??PutValue_3
   \   00000508   D01091E1           LDRSB    R1,[R1, R0]
   \   0000050C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_3:
   \   00000510   F1F1F103           DC8      +241,+241,+241,+3
   \   00000514   03030303           DC8      +3,+3,+3,+3
   \   00000518   030303F1           DC8      +3,+3,+3,+241
   \   0000051C   F1030000           DC8      +241,+3,+0,+0
   \                     ??PutValue_23:
   \   00000520   00005BE3           CMP      R11,#+0
   \   00000524   EBFFFF0A           BEQ      ??PutValue_21
   \   00000528   0020A0E3           MOV      R2,#+0
   \   0000052C   0010A0E3           MOV      R1,#+0
   \   00000530   08008DE2           ADD      R0,SP,#+8
   \   00000534   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000538   ........           LDR      R0,??DataTable5  ;; ??npos
   \   0000053C   28109DE5           LDR      R1,[SP, #+40]
   \   00000540   003090E5           LDR      R3,[R0, #+0]
   \   00000544   0020A0E3           MOV      R2,#+0
   \   00000548   08008DE2           ADD      R0,SP,#+8
   \   0000054C   ........           _BLF     ??assign,??assign??rA
   \   00000550   0000E0E3           MVN      R0,#+0
   \   00000554   01002DE9           PUSH     {R0}
   \   00000558   01002DE9           PUSH     {R0}
   \   0000055C   0000A0E3           MOV      R0,#+0
   \   00000560   01002DE9           PUSH     {R0}
   \   00000564   0100A0E3           MOV      R0,#+1
   \   00000568   01002DE9           PUSH     {R0}
   \   0000056C   0700A0E1           MOV      R0,R7
   \   00000570   01002DE9           PUSH     {R0}
   \   00000574   38109DE5           LDR      R1,[SP, #+56]
   \   00000578   1C308DE2           ADD      R3,SP,#+28
   \   0000057C   0B20A0E1           MOV      R2,R11
   \   00000580   0600A0E1           MOV      R0,R6
   \   00000584   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000588   099080E1           ORR      R9,R0,R9
   \   0000058C   0020A0E3           MOV      R2,#+0
   \   00000590   0110A0E3           MOV      R1,#+1
   \   00000594   1C008DE2           ADD      R0,SP,#+28
   \   00000598   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000059C   14D08DE2           ADD      SP,SP,#+20
   \   000005A0   CCFFFFEA           B        ??PutValue_21
    666                                  break;
    667          
    668                              }
    669                          }
    670                          if ( tmpStatus != E_NO_ERR ) {
   \                     ??PutValue_22:
   \   000005A4   000059E3           CMP      R9,#+0
    671                              Status = E_COMMON_INPUT_ERR;
   \   000005A8   2140A013           MOVNE    R4,#+33
   \   000005AC   0700001A           BNE      ??PutValue_14
    672                          }
    673                      } else {
    674                          Status       = E_NOT_COMMON_INPUT;
    675                      }
    676                  }
    677                  break;
    678              default:
    679                  Status = E_NOT_COMMON_INPUT;
    680                  break;
    681              }
    682              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_13:
   \   000005B0   000054E3           CMP      R4,#+0
   \   000005B4   0500001A           BNE      ??PutValue_14
    683                  Status = E_LOCAL_ONLY;
    684                  SetModifiedFlag();
   \   000005B8   A41095E5           LDR      R1,[R5, #+164]
   \   000005BC   0040E0E3           MVN      R4,#+0
   \   000005C0   541091E5           LDR      R1,[R1, #+84]
   \   000005C4   0500A0E1           MOV      R0,R5
   \   000005C8   0FE0A0E1           MOV      LR,PC
   \   000005CC   11FF2FE1           BX       R1
    685              }
    686              if ( UnitId ) {
   \                     ??PutValue_14:
   \   000005D0   54009DE5           LDR      R0,[SP, #+84]
   \   000005D4   000050E3           CMP      R0,#+0
    687                  *UnitId = ValUnitId;
   \   000005D8   0010A013           MOVNE    R1,#+0
   \   000005DC   00108015           STRNE    R1,[R0, #+0]
    688              }
    689              return (Status);
   \   000005E0   0400A0E1           MOV      R0,R4
   \   000005E4   2CD08DE2           ADD      SP,SP,#+44
   \   000005E8   ........           B        ?Subroutine13
    690          }
    691          

   \                                 In segment CODE, align 4, keep-with-next
    692          int PROTankSum::PutFloatValue(int ValueId, float NewValue) {
    693              int Status = E_NO_ERR;
    694              //switch ( ValueId ) {
    695              //default:
    696          //  Status = PROTank::PutFloatValue(ValueId,NewValue);
    697          //    break;
    698          //}
    699              return (Status);
   \                     ??PutFloatValue:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    700          }
    701          

   \                                 In segment CODE, align 4, keep-with-next
    702          int PROTankSum::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0140A0E1           MOV      R4,R1
    703              int PROStatus1 = ST_OK;
    704              MyString = FindStatusChar(PROStatus1);
   \   0000000C   3D20A0E3           MOV      R2,#+61
   \   00000010   F02E82E3           ORR      R2,R2,#0xF00
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   0000001C   ........           LDR      R0,??DataTable5  ;; ??npos
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   003090E5           LDR      R3,[R0, #+0]
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??assign,??assign??rA
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??_Tidy,??_Tidy??rA
    705              return (PROStatus1);
   \   00000044   1CD08DE2           ADD      SP,SP,#+28
   \   00000048   1040BDE8           POP      {R4,LR}
   \   0000004C   3D00A0E3           MOV      R0,#+61
   \   00000050   F00E80E3           ORR      R0,R0,#0xF00
   \   00000054   1EFF2FE1           BX       LR               ;; return
    706          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data PROTankSum::__vtbl[40]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~PROTankSum`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   0000000C   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000018   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000028   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000038   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000048   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   00000054   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??SortAnalogInputs
   \              ............
   \   00000060   ............       DC32 ??SaveSettings, ??Calculate, ??CreateAlarms, ??WriteXML
   \              ............
   \              ........    
   \   00000070   ............       DC32 ??LCWriteXML, ??RefreshData, ??IsStaticValue, ??SetState
   \              ............
   \              ........    
   \   00000080   ............       DC32 ??GetState, ??GetTemperature, ??SetTemperature, ??GetPressure
   \              ............
   \              ........    
   \   00000090   ............       DC32 ??SetPressure, ??GetNoiseLimitB, ??GetNoiseLimitU
   \              ............
   \   0000009C   ........           DC32 ??IsLevelInsideWindow
   \   000000A0   546F74616C2F       DC8 "Total/Average"
   \              417665726167
   \              6500        
   \   000000AE   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankSum &PROTankSum::new PROTankSum(vector<PRogramObjectBase *> &, bool)
   \                     `??new PROTankSum`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   F50FA0E3           MOV      R0,#+980
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROTankSum_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROTankSum
   \                     `??new PROTankSum_1`:
   \   00000028   ........           B        ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos
    707          
    708          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROTankSum::FindMyEntry()          0
     PROTankSum::FindPROStatus(AnsiString &)
                                       36
     PROTankSum::FindRange(int &, int &)
                                       20
     PROTankSum::FindStart(int)         0
     PROTankSum::GetStringValue(int, int, AnsiString &)
                                      124
     PROTankSum::GetValue(int, int, float &, int &, int &)
                                       68
     PROTankSum::PROTankSum(vector<PRogramObjectBase *> &, bool)
                                       44
     PROTankSum::PutFloatValue(int, float)
                                        0
     PROTankSum::PutValue(int, int, AnsiString, bool, int *)
                                      100
     PROTankSum::new PROTankSum(vector<PRogramObjectBase *> &, bool)
                                       12
     PROTankSum::~PROTankSum()         12
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Erase(_Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Insert(bool, _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr, TankState)
                                       24
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::insert(TankState)
                                       40
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::insert(TankState)
                                     200
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Erase(_Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Insert(bool, _Tree<_Tset_traits<TankState, less<TankState>, allocator<TankState>, false>>::_Nodeptr, TankState)
                                      96
     PROTankSum::PROTankSum(vector<PRogramObjectBase *> &, bool)
                                     148
     PROTankSum::~PROTankSum()        44
     ?Subroutine12                     8
     PROTankSum::FindMyEntry()        64
     PROTankSum::FindStart(int)       84
     PROTankSum::FindRange(int &, int &)
                                      72
     PROTankSum::GetValue(int, int, float &, int &, int &)
                                    2552
     ?Subroutine13                    12
     PROTankSum::GetStringValue(int, int, AnsiString &)
                                     820
     PROTankSum::PutValue(int, int, AnsiString, bool, int *)
                                    1516
     PROTankSum::PutFloatValue(int, float)
                                       8
     PROTankSum::FindPROStatus(AnsiString &)
                                      88
     PROTankSum::__vtbl              176
     ?<Constant "">                    1
     PROTankSum::new PROTankSum(vector<PRogramObjectBase *> &, bool)
                                      44
     __sti__routine()                  4
     ??DataTable1                      4
     ??DataTable5                      4
      Others                         520

 
 7 012 bytes in segment CODE
   177 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 5 476 bytes of CODE  memory (+ 1 540 bytes shared)
   177 bytes of CONST memory

Errors: none
Warnings: 1
