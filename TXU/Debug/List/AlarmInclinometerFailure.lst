##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:25 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmInclinometerFailure.cpp    #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmInclinometerFailure.cpp    #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmInclinometerFailure.ls #
#                       t                                                    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmInclinometerFailure.r79 #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmInclinometerFailure.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AlarmInclinometerFailure::~AlarmInclinometerFailure(void) {
   \                     `?~AlarmInclinometerFailure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmInclinometerFailure_1`
     10          }
   \   00000014   0100000A           BEQ      `?~AlarmInclinometerFailure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmInclinometerFailure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmInclinometerFailure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmInclinometerFailure_1`:
   \   00000030   ........           B        ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine11_0:
   \   00000008   ........           DC32     ??__vtbl
   \   0000000C   ........           DC32     ??NumberOfAlarmSettings
     11          

   \                                 In segment DATA_Z, align 4, align-sorted
     12          unsigned AlarmInclinometerFailure::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          AlarmInclinometerFailure::AlarmInclinometerFailure(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr) {
   \                     ??AlarmInclinometerFailure:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??Subroutine11_0  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     15              PROPointer = PROPtr;
     16              NumberOfAlarmSettings++;
   \   00000018   ........           LDR      R0,??Subroutine11_0+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   C45084E5           STR      R5,[R4, #+196]
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     17              IDNumber        = (ID_AL_INCLINOMETER << 16) + NumberOfAlarmSettings;
   \   0000002C   C006A0E3           MOV      R0,#+201326592
   \   00000030   AA0880E3           ORR      R0,R0,#0xAA0000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     18              Type            = ID_AL_INCLINOMETER;
   \   0000003C   AA00A0E3           MOV      R0,#+170
   \   00000040   C00E80E3           ORR      R0,R0,#0xC00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     19              Limit           = DATA_EXPIRATION_TIME;
   \   00000048   4604A0E3           MOV      R0,#+1174405120
   \   0000004C   710980E3           ORR      R0,R0,#0x1C4000
   \   00000050   E40084E5           STR      R0,[R4, #+228]
     20              MessageKey		= L_WORD528;    // Failure
   \   00000054   840FA0E3           MOV      R0,#+528
   \   00000058   B80084E5           STR      R0,[R4, #+184]
     21              TPCMessageKey	= L_WORD1003;    // Fail
   \   0000005C   EB00A0E3           MOV      R0,#+235
   \   00000060   C00F80E3           ORR      R0,R0,#0x300
   \   00000064   B40084E5           STR      R0,[R4, #+180]
     22              IsHWAlarm       = true;
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   CE00C4E5           STRB     R0,[R4, #+206]
     23          }
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074                      REQUIRE ?Subroutine11
   \   00000074                      ;; // Fall through to label ?Subroutine11
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AlarmInclinometerFailure::Check(void) {
   \                     ??Check:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26          
     27              int Status = AL_STAT_IN_DEADBAND;
     28          	if (PROPointer->IsAvailableNewData()) {
     29                  Status = AL_STAT_IN_NORMAL;
     30              } else /*if ( FailCnt >= Limit ) */ {
     31                  Status = AL_STAT_IN_ALARM;
   \   00000008   C41094E5           LDR      R1,[R4, #+196]
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   A41091E5           LDR      R1,[R1, #+164]
   \   00000014   581091E5           LDR      R1,[R1, #+88]
   \   00000018   0FE0A0E1           MOV      LR,PC
   \   0000001C   11FF2FE1           BX       R1
   \   00000020   010000E2           AND      R0,R0,#0x1
   \   00000024   011020E2           EOR      R1,R0,#0x1
     32              }
     33              UpdateAlarm(Status);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     34          
     35          }
   \   00000030                      REQUIRE ?Subroutine10
   \   00000030                      ;; // Fall through to label ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     36          
     37          ///////////////////////////////////////////////////////////////
     38          //
     39          // Routines for the librarian for input
     40          //
     41          ///////////////////////////////////////////////////////////////
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          AnsiString AlarmInclinometerFailure::Get_CompleteMessage(void)
     44          {
   \                     ??Get_CompleteMessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   70D04DE2           SUB      SP,SP,#+112
   \   00000008   0040A0E1           MOV      R4,R0
     45          	AnsiString Loc = PROPointer->GetName();
   \   0000000C   C42094E5           LDR      R2,[R4, #+196]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0200A0E1           MOV      R0,R2
   \   00000018   A42092E5           LDR      R2,[R2, #+164]
   \   0000001C   54108DE2           ADD      R1,SP,#+84
   \   00000020   182092E5           LDR      R2,[R2, #+24]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   12FF2FE1           BX       R2
     46          	return(Loc + " " + Get_Message());
   \   0000002C   A42094E5           LDR      R2,[R4, #+164]
   \   00000030   38108DE2           ADD      R1,SP,#+56
   \   00000034   682092E5           LDR      R2,[R2, #+104]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   12FF2FE1           BX       R2
   \   00000044   1B2F8FE2           ADR      R2,??Get_CompleteMessage_1  ;; " "
   \   00000048   54108DE2           ADD      R1,SP,#+84
   \   0000004C   1C008DE2           ADD      R0,SP,#+28
   \   00000050   ........           _BLF     `??operator+_1`,`??operator+??rA`
   \   00000054   38208DE2           ADD      R2,SP,#+56
   \   00000058   1C108DE2           ADD      R1,SP,#+28
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   38008DE2           ADD      R0,SP,#+56
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   1C008DE2           ADD      R0,SP,#+28
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   54008DE2           ADD      R0,SP,#+84
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B0   70D08DE2           ADD      SP,SP,#+112
   \   000000B4   ........           B        ?Subroutine11
   \                     ??Get_CompleteMessage_1:
   \   000000B8   20000000           DC8      " ",+0,+0
     47          }
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          int AlarmInclinometerFailure::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3870DDE5           LDRB     R7,[SP, #+56]
   \   0000000C   3C809DE5           LDR      R8,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
     50              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
     51              switch (ValueId) {
   \   00000028   3220A0E3           MOV      R2,#+50
   \   0000002C   8C2D82E3           ORR      R2,R2,#0x2300
   \   00000030   020055E1           CMP      R5,R2
     52              case SVT_AL_LIMIT:
     53                  Status = E_NOT_ADJUSTABLE;
   \   00000034   2950A003           MOVEQ    R5,#+41
   \   00000038   1600000A           BEQ      ??PutValue_2
     54                  break;
     55              default:
     56                  Status = AlarmBasic::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??string,??string??rA
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   80002DE9           PUSH     {R7}
   \   00000050   0C308DE2           ADD      R3,SP,#+12
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0C008DE2           ADD      R0,SP,#+12
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
     57                  break;
     58              }
     59              if (Status == E_NO_ERR) {
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
   \   00000080   0400001A           BNE      ??PutValue_2
     60                  SetModifiedFlag();
   \   00000084   A41094E5           LDR      R1,[R4, #+164]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   541091E5           LDR      R1,[R1, #+84]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
     61              }
     62              if (UnitId) {
   \                     ??PutValue_2:
   \   00000098   000058E3           CMP      R8,#+0
     63                  *UnitId = ValUnitId;
   \   0000009C   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A0   00008815           STRNE    R0,[R8, #+0]
     64              }
     65              return (Status);
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   20D08DE2           ADD      SP,SP,#+32
   \   000000AC   F041BDE8           POP      {R4-R8,LR}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
     66          }
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          int  AlarmInclinometerFailure::GetValue(int ValueId, int Index, float& MyRetValue, int& DecPnt, int& Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   0340A0E1           MOV      R4,R3
     69              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     70              switch (ValueId) {
   \   00000014   1580A0E3           MOV      R8,#+21
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   323041E2           SUB      R3,R1,#+50
   \   00000020   8C3D43E2           SUB      R3,R3,#+8960
   \   00000024   010053E3           CMP      R3,#+1
   \   00000028   0C00008A           BHI      ??GetValue_3
   \   0000002C   01CF8FE2           ADR      R12,??GetValue_1
   \   00000030   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000034   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000038   00050000           DC8      +0,+5,+0,+0
     71              case SVT_AL_LIMIT:
     72                  MyRetValue = (float)Limit;
   \                     ??GetValue_4:
   \   0000003C   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   00000040   000084E5           STR      R0,[R4, #+0]
     73                  DecPnt     = 0;
   \   00000044   009085E5           STR      R9,[R5, #+0]
     74                  Unit       = MSECOND_UNIT;
   \   00000048   008086E5           STR      R8,[R6, #+0]
   \   0000004C   090000EA           B        ??GetValue_6
     75                  break;
     76              case SVT_AL_VALUE:
     77                  MyRetValue = float(PROPointer->TimeStamp);
   \                     ??GetValue_7:
   \   00000050   C40090E5           LDR      R0,[R0, #+196]
   \   00000054   400090E5           LDR      R0,[R0, #+64]
   \   00000058   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000005C   F7FFFFEA           B        ??GetValue_5
     78                  DecPnt     = 0;
     79                  Unit       = MSECOND_UNIT;
     80                  break;
     81              default:
     82                  Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000060   40002DE9           PUSH     {R6}
   \   00000064   20002DE9           PUSH     {R5}
   \   00000068   0430A0E1           MOV      R3,R4
   \   0000006C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000070   0070A0E1           MOV      R7,R0
   \   00000074   08D08DE2           ADD      SP,SP,#+8
     83                  break;
     84              }
     85              return (Status);
   \                     ??GetValue_6:
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   F043BDE8           POP      {R4-R9,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
     86          }
     87          
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          int AlarmInclinometerFailure::GetStringValue(int ValueId, int Index, AnsiString& MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     90              int Status = GETVAL_NO_ERR;
     91              //switch ( ValueId ) {
     92              //	default:
     93              Status = AlarmBasic::GetStringValue(ValueId, Index, MyString);
     94              //		break;
     95              //}
     96              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine12
     97          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          int AlarmInclinometerFailure::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    100              int Status = E_NO_ERR;
    101              //switch ( ValueId ) {
    102              //   default:
    103              Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    104              //     break;
    105              //}
    106              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine12
   \   00000008                      ;; // Fall through to label ?Subroutine12
    107          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmInclinometerFailure &AlarmInclinometerFailure::new AlarmInclinometerFailure(PRogramObjectBase *)
   \                     `??new AlarmInclinometerFailure`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   EC00A0E3           MOV      R0,#+236
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmInclinometerFailure_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmInclinometerFailure
   \                     `??new AlarmInclinometerFailure_1`:
   \   00000020   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    108          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmInclinometerFailure::AlarmInclinometerFailure(PRogramObjectBase *)
                                       12
     AlarmInclinometerFailure::Check()
                                        8
     AlarmInclinometerFailure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmInclinometerFailure::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmInclinometerFailure::Get_CompleteMessage()
                                      124
     AlarmInclinometerFailure::PutFloatValue(int, float)
                                        4
     AlarmInclinometerFailure::PutValue(int, int, AnsiString, bool, int *)
                                       64
     AlarmInclinometerFailure::new AlarmInclinometerFailure(PRogramObjectBase *)
                                        8
     AlarmInclinometerFailure::~AlarmInclinometerFailure()
                                       12
     __sti__routine()                   0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     AlarmInclinometerFailure::~AlarmInclinometerFailure()
                                      52
     ?Subroutine11                    16
     AlarmInclinometerFailure::NumberOfAlarmSettings
                                       4
     AlarmInclinometerFailure::AlarmInclinometerFailure(PRogramObjectBase *)
                                     116
     AlarmInclinometerFailure::Check()
                                      48
     ?Subroutine10                     8
     AlarmInclinometerFailure::Get_CompleteMessage()
                                     188
     AlarmInclinometerFailure::PutValue(int, int, AnsiString, bool, int *)
                                     180
     AlarmInclinometerFailure::GetValue(int, int, float &, int &, int &)
                                     132
     AlarmInclinometerFailure::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine12                     8
     AlarmInclinometerFailure::PutFloatValue(int, float)
                                       8
     ?<Constant " ">                   2
     AlarmInclinometerFailure::new AlarmInclinometerFailure(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
      Others                         400

 
 1 320 bytes in segment CODE
   118 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 812 bytes of CODE  memory (+ 524 bytes shared)
 118 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
