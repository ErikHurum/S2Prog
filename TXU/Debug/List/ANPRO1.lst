##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:48 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ANPRO1.cpp                      #
#    Command line    =  D:\S2Prog\Shared\Src\ANPRO1.cpp --fpu None -D        #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ANPRO1.lst                  #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ANPRO1.r79                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ANPRO1.cpp
      1          #ifdef S2TXU
      2          	#include "TDUincludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   1000001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   081084E2           ADD      R1,R4,#+8
   \   00000058   000000EA           B        ??_Copy_5
   \                     ??_Copy_6:
   \   0000005C   0200A0E1           MOV      R0,R2
   \                     ??_Copy_5:
   \   00000060   082090E5           LDR      R2,[R0, #+8]
   \   00000064   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000068   000053E3           CMP      R3,#+0
   \   0000006C   FAFFFF0A           BEQ      ??_Copy_6
   \   00000070   000081E5           STR      R0,[R1, #+0]
   \   00000074   010000EA           B        ??_Copy_7
   \                     ??_Copy_2:
   \   00000078   004084E5           STR      R4,[R4, #+0]
   \   0000007C   084084E5           STR      R4,[R4, #+8]
   \                     ??_Copy_7:
   \   00000080   3040BDE8           POP      {R4,R5,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_8
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_9
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_9:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_8:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return
      3          #else
      4          	#ifdef ANTDUSIM
      5          		#pragma warning( disable : 4060 4065 4101 4244 4267 4305 4311 4800)
      6          	#endif
      7          	#include "TSNIncludes.h"
      8          	#pragma hdrstop
      9          	#ifdef BORLAND
     10          #pragma package(smart_init)
     11          #endif
     12          
     13          #endif
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          U16 AddPacketHeading(U8 *TxBuf, U8 RxAddress)
     16          {
     17          	TxBuf[0] = ANPRO1_SYN;
   \                     ??AddPacketHeading:
   \   00000000   0220A0E3           MOV      R2,#+2
   \   00000004   0020C0E5           STRB     R2,[R0, #+0]
     18          	TxBuf[1] = ANPRO1_SYN;
   \   00000008   0120C0E5           STRB     R2,[R0, #+1]
     19          	ANPRO1_NetHeading    *HPtr = (ANPRO1_NetHeading*)&TxBuf[ANPRO1_NUM_SYNC];
     20          	HPtr->RxAddress = RxAddress;
   \   0000000C   0210E0E5           STRB     R1,[R0, #+2]!
     21          	HPtr->TxAddress = CurrentDeviceAddress;
   \   00000010   0C109FE5           LDR      R1,??AddPacketHeading_1  ;; CurrentDeviceAddress
   \   00000014   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000018   0110C0E5           STRB     R1,[R0, #+1]
     22          	return(ANPRO1_NUM_SYNC+sizeof(ANPRO1_PacketHeading));
   \   0000001C   0600A0E3           MOV      R0,#+6
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??AddPacketHeading_1:
   \   00000024   ........           DC32     CurrentDeviceAddress
     23          }
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          U16 AddCommand(U8 *TxBuf,U16 Ptr, U8 Command, U8* Data, U8  Size)
     26          {
   \                     ??AddCommand:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0840DDE5           LDRB     R4,[SP, #+8]
     27          	TxBuf[0+Ptr] = Command;
   \   00000008   000081E0           ADD      R0,R1,R0
   \   0000000C   0020C0E5           STRB     R2,[R0, #+0]
     28          	TxBuf[1+Ptr] = Size;
   \   00000010   0140C0E5           STRB     R4,[R0, #+1]
     29          	if ( Data && Size )	memcpy(&TxBuf[2+Ptr],Data,Size);
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   00005413           CMPNE    R4,#+0
   \   0000001C   0300000A           BEQ      ??AddCommand_1
   \   00000020   0420A0E1           MOV      R2,R4
   \   00000024   0310A0E1           MOV      R1,R3
   \   00000028   020080E2           ADD      R0,R0,#+2
   \   0000002C   ........           _BLF     memcpy,??memcpy??rA
     30          	return(Size+2);
   \                     ??AddCommand_1:
   \   00000030   020084E2           ADD      R0,R4,#+2
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000003C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000040   1EFF2FE1           BX       LR               ;; return
     31          }
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          U16 AddPacketTail(U8 *TxBuf, U16 Size, U8 Cmd)
     34          {
   \                     ??AddPacketTail:
   \   00000000   10002DE9           PUSH     {R4}
     35          	ANPRO1_NetHeading *HPtr = (ANPRO1_NetHeading*)&TxBuf[ANPRO1_NUM_SYNC];
   \   00000004   02C080E2           ADD      R12,R0,#+2
     36          	ANPRO1_PacketTail *TPtr = (ANPRO1_PacketTail*)&TxBuf[Size];
   \   00000008   003081E0           ADD      R3,R1,R0
     37          	TPtr->ecmd   = Cmd;
   \   0000000C   0020C3E5           STRB     R2,[R3, #+0]
     38          	TPtr->edata  = 0;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0120C3E5           STRB     R2,[R3, #+1]
     39          	Size += sizeof(ANPRO1_PacketTail);
   \   00000018   041081E2           ADD      R1,R1,#+4
   \   0000001C   0128A0E1           MOV      R2,R1, LSL #+16
   \   00000020   2228A0E1           MOV      R2,R2, LSR #+16
   \   00000024   022042E2           SUB      R2,R2,#+2
   \   00000028   4244A0E1           ASR      R4,R2,#+8
   \   0000002C   0240CCE5           STRB     R4,[R12, #+2]
     40          	HPtr->HiSize =  (Size-2) >> 8;
     41          	HPtr->LoSize =  (Size-2) & 0xFF;
   \   00000030   FE1081E2           ADD      R1,R1,#+254
   \   00000034   0310CCE5           STRB     R1,[R12, #+3]
     42          	U8 CS = 0;
   \   00000038   0010A0E3           MOV      R1,#+0
     43          	for ( int Cnt = 2; Cnt < Size-2; Cnt++ ) {
   \   0000003C   02C0A0E3           MOV      R12,#+2
   \   00000040   040000EA           B        ??AddPacketTail_1
     44          		CS = CRC[CS ^ TxBuf[Cnt]];
   \                     ??AddPacketTail_2:
   \   00000044   0040DCE7           LDRB     R4,[R12, +R0]
     45          	}
   \   00000048   01C08CE2           ADD      R12,R12,#+1
   \   0000004C   011024E0           EOR      R1,R4,R1
   \   00000050   ........           LDR      R4,??DataTable1  ;; CRC
   \   00000054   0410D1E7           LDRB     R1,[R1, +R4]
   \                     ??AddPacketTail_1:
   \   00000058   02005CE1           CMP      R12,R2
   \   0000005C   F8FFFFBA           BLT      ??AddPacketTail_2
     46          	TPtr->PCRC = CS;
   \   00000060   0210C3E5           STRB     R1,[R3, #+2]
     47          	TPtr->EOT  = ANPRO1_EOT;
   \   00000064   0300A0E3           MOV      R0,#+3
   \   00000068   0300C3E5           STRB     R0,[R3, #+3]
     48          	return(sizeof(ANPRO1_PacketTail));
   \   0000006C   1000BDE8           POP      {R4}
   \   00000070   0400A0E3           MOV      R0,#+4
   \   00000074   1EFF2FE1           BX       LR               ;; return
     49          }
     50          
     51          
     52          
     53          #define ANPRO1_BUF_SIZE 500

   \                                 In segment CODE, align 4, keep-with-next
     54          bool ANPRO1Receive(TSNUart *PortPtr,int Delay, U8 Address,set<PRogramObjectBase*>&CurrenttpPCxList, bool (*UnpackFunction)(TSNUart*,U8*,int,set<PRogramObjectBase*>))
     55          {
   \                     ??ANPRO1Receive:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   85DF4DE2           SUB      SP,SP,#+532
   \   00000008   0050A0E1           MOV      R5,R0
     56          	int PacketCnt =0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   04108DE5           STR      R1,[SP, #+4]
     57          	U8 RxBuf[ANPRO1_BUF_SIZE];
     58          	memset(RxBuf,0,ANPRO1_BUF_SIZE);
   \   00000014   7D2FA0E3           MOV      R2,#+500
   \   00000018   20008DE2           ADD      R0,SP,#+32
   \   0000001C   ........           _BLF     memset,??memset??rA
     59          	const ANPRO1_PacketHeading *pPH =  (ANPRO1_PacketHeading*)RxBuf;
     60          	U8 Data;
     61          	int SyncCnt;
     62          	bool dataAvailable = false;
     63          	bool Echo          = false;
   \   00000020   0060A0E3           MOV      R6,#+0
     64          	do {
     65          		do {
     66          			dataAvailable = PortPtr->Receive(&Data,sizeof(Data),Delay);
   \                     ??ANPRO1Receive_1:
   \   00000024   DC4095E5           LDR      R4,[R5, #+220]
   \   00000028   14329DE5           LDR      R3,[SP, #+532]
   \   0000002C   084094E5           LDR      R4,[R4, #+8]
   \   00000030   0120A0E3           MOV      R2,#+1
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   14FF2FE1           BX       R4
   \   00000044   0040B0E1           MOVS     R4,R0
     67          			//WriteByte(Data&0xFF);
     68          		}  while ( dataAvailable && Data != ANPRO1_SYN );
   \   00000048   0000DD15           LDRBNE   R0,[SP, #+0]
   \   0000004C   02005013           CMPNE    R0,#+2
   \   00000050   F3FFFF1A           BNE      ??ANPRO1Receive_1
     69          		PacketCnt++;
   \   00000054   04109DE5           LDR      R1,[SP, #+4]
     70          		if ( dataAvailable ) {
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   011081E2           ADD      R1,R1,#+1
   \   00000060   04108DE5           STR      R1,[SP, #+4]
   \   00000064   6D00000A           BEQ      ??ANPRO1Receive_2
     71          			// A minimum of 2 SYN to accept start
     72          			//Message("First SYN");
     73          			SyncCnt = 0;
   \   00000068   0080A0E3           MOV      R8,#+0
   \   0000006C   000000EA           B        ??ANPRO1Receive_3
     74          			do {
     75          				dataAvailable = PortPtr->Receive(&Data,sizeof(Data),30);
     76          				if ( dataAvailable && (Data == ANPRO1_SYN) )
     77          					SyncCnt++;
   \                     ??ANPRO1Receive_4:
   \   00000070   018088E2           ADD      R8,R8,#+1
   \                     ??ANPRO1Receive_3:
   \   00000074   DC4095E5           LDR      R4,[R5, #+220]
   \   00000078   1E30A0E3           MOV      R3,#+30
   \   0000007C   084094E5           LDR      R4,[R4, #+8]
   \   00000080   0120A0E3           MOV      R2,#+1
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   0FE0A0E1           MOV      LR,PC
   \   00000090   14FF2FE1           BX       R4
   \   00000094   0040B0E1           MOVS     R4,R0
   \   00000098   6000000A           BEQ      ??ANPRO1Receive_2
   \   0000009C   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000A0   020050E3           CMP      R0,#+2
   \   000000A4   F1FFFF0A           BEQ      ??ANPRO1Receive_4
   \   000000A8   000058E3           CMP      R8,#+0
   \   000000AC   5B00000A           BEQ      ??ANPRO1Receive_2
     78          			} while ( dataAvailable && (Data == ANPRO1_SYN) );
     79          			if ( dataAvailable && SyncCnt ) {
     80          				// We allready have one byte of the heading. Move it to the RxBuffer and
     81          				// receive the rest of the heading
     82          				U8 *RxPtr = RxBuf;
     83          				RxBuf[0]  = Data;
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   2010CDE5           STRB     R1,[SP, #+32]
     84          				RxPtr++;
   \   000000B8   21808DE2           ADD      R8,SP,#+33
     85          				for ( unsigned i=1; dataAvailable && i < sizeof(ANPRO1_NetHeading); i++ ) {
   \   000000BC   01A0A0E3           MOV      R10,#+1
     86          					dataAvailable = PortPtr->Receive(RxPtr++,sizeof(Data),30);
   \                     ??ANPRO1Receive_5:
   \   000000C0   DC4095E5           LDR      R4,[R5, #+220]
   \   000000C4   1E30A0E3           MOV      R3,#+30
   \   000000C8   084094E5           LDR      R4,[R4, #+8]
   \   000000CC   0120A0E3           MOV      R2,#+1
   \   000000D0   0810A0E1           MOV      R1,R8
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   0FE0A0E1           MOV      LR,PC
   \   000000DC   14FF2FE1           BX       R4
   \   000000E0   018088E2           ADD      R8,R8,#+1
   \   000000E4   0040A0E1           MOV      R4,R0
     87          				}
   \   000000E8   01A08AE2           ADD      R10,R10,#+1
   \   000000EC   000054E3           CMP      R4,#+0
   \   000000F0   4A00000A           BEQ      ??ANPRO1Receive_2
   \   000000F4   04005AE3           CMP      R10,#+4
   \   000000F8   F0FFFF3A           BCC      ??ANPRO1Receive_5
     88          				if ( dataAvailable ) {
     89          					unsigned DataSize = (pPH->HiSize<<8) |pPH->LoSize;
   \   000000FC   2200DDE5           LDRB     R0,[SP, #+34]
   \   00000100   2310DDE5           LDRB     R1,[SP, #+35]
   \   00000104   00A481E1           ORR      R10,R1,R0, LSL #+8
     90          					if ( DataSize > 3 && DataSize < ANPRO1_BUF_SIZE ) {
   \   00000108   04005AE3           CMP      R10,#+4
   \   0000010C   4300003A           BCC      ??ANPRO1Receive_2
   \   00000110   7D0F5AE3           CMP      R10,#+500
   \   00000114   4100002A           BCS      ??ANPRO1Receive_2
     91          						int Cnt=0;
     92          						for ( unsigned i=0; dataAvailable && i < DataSize-sizeof(ANPRO1_PacketHeading); i++ ) {
   \   00000118   00B0A0E3           MOV      R11,#+0
   \   0000011C   0C0000EA           B        ??ANPRO1Receive_6
     93          							dataAvailable = PortPtr->Receive(RxPtr++,sizeof(Data),30);
   \                     ??ANPRO1Receive_7:
   \   00000120   DC4095E5           LDR      R4,[R5, #+220]
   \   00000124   1E30A0E3           MOV      R3,#+30
   \   00000128   084094E5           LDR      R4,[R4, #+8]
   \   0000012C   0120A0E3           MOV      R2,#+1
   \   00000130   0810A0E1           MOV      R1,R8
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   0FE0A0E1           MOV      LR,PC
   \   0000013C   14FF2FE1           BX       R4
   \   00000140   018088E2           ADD      R8,R8,#+1
   \   00000144   0040A0E1           MOV      R4,R0
     94          							Cnt++;
     95          						}
   \   00000148   01B08BE2           ADD      R11,R11,#+1
   \   0000014C   000054E3           CMP      R4,#+0
   \   00000150   3200000A           BEQ      ??ANPRO1Receive_2
   \                     ??ANPRO1Receive_6:
   \   00000154   04004AE2           SUB      R0,R10,#+4
   \   00000158   00005BE1           CMP      R11,R0
   \   0000015C   EFFFFF3A           BCC      ??ANPRO1Receive_7
     96          						if ( !dataAvailable ) {
     97          							//OS_Delay(100);
     98          						}
     99          						if ( dataAvailable ) {
    100          							U8 EOTByte = *((U8*)&RxBuf[DataSize-1]);
    101          							if ( EOTByte == ANPRO1_EOT ) {
   \   00000160   20008DE2           ADD      R0,SP,#+32
   \   00000164   00008AE0           ADD      R0,R10,R0
   \   00000168   020040E2           SUB      R0,R0,#+2
   \   0000016C   0110D0E5           LDRB     R1,[R0, #+1]
   \   00000170   030051E3           CMP      R1,#+3
   \   00000174   2900001A           BNE      ??ANPRO1Receive_2
    102          								RxPtr = RxBuf;
   \   00000178   20808DE2           ADD      R8,SP,#+32
    103          								U8 CSum = 0;
   \   0000017C   0010A0E3           MOV      R1,#+0
    104          								for ( unsigned i=0; i < DataSize-2; i++ ) {
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   040000EA           B        ??ANPRO1Receive_8
    105          									CSum     = CRC[CSum ^ *RxPtr++];
   \                     ??ANPRO1Receive_9:
   \   00000188   ........           LDRB     R3,[R8], #+1
    106          								}
   \   0000018C   012082E2           ADD      R2,R2,#+1
   \   00000190   011023E0           EOR      R1,R3,R1
   \   00000194   ........           LDR      R3,??DataTable1  ;; CRC
   \   00000198   0310D1E7           LDRB     R1,[R1, +R3]
   \                     ??ANPRO1Receive_8:
   \   0000019C   02304AE2           SUB      R3,R10,#+2
   \   000001A0   030052E1           CMP      R2,R3
   \   000001A4   F7FFFF3A           BCC      ??ANPRO1Receive_9
    107          								U8  PacketCheckSum = *((U8*)&RxBuf[DataSize-2]);
    108          								if ( PacketCheckSum == CSum ) {
   \   000001A8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001AC   010050E1           CMP      R0,R1
   \   000001B0   1A00001A           BNE      ??ANPRO1Receive_2
    109          									if ( pPH->TxAddress == Address ) {
   \   000001B4   2100DDE5           LDRB     R0,[SP, #+33]
   \   000001B8   1812DDE5           LDRB     R1,[SP, #+536]
   \   000001BC   010050E1           CMP      R0,R1
   \   000001C0   1500001A           BNE      ??ANPRO1Receive_10
    110          										(*UnpackFunction)(PortPtr,&RxBuf[sizeof(ANPRO1_PacketHeading)],DataSize,CurrenttpPCxList);
   \   000001C4   1C029DE5           LDR      R0,[SP, #+540]
   \   000001C8   1460D0E5           LDRB     R6,[R0, #+20]
   \   000001CC   08008DE2           ADD      R0,SP,#+8
   \   000001D0   ........           _BLF     ??_Clear,??_Clear??rA
   \   000001D4   1C60CDE5           STRB     R6,[SP, #+28]
   \   000001D8   1C129DE5           LDR      R1,[SP, #+540]
   \   000001DC   08008DE2           ADD      R0,SP,#+8
   \   000001E0   ........           _BLF     ??_Copy,??_Copy??rA_1
   \   000001E4   44629DE5           LDR      R6,[SP, #+580]
   \   000001E8   08308DE2           ADD      R3,SP,#+8
   \   000001EC   0A20A0E1           MOV      R2,R10
   \   000001F0   24108DE2           ADD      R1,SP,#+36
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   0FE0A0E1           MOV      LR,PC
   \   000001FC   16FF2FE1           BX       R6
   \   00000200   0C109DE5           LDR      R1,[SP, #+12]
   \   00000204   08008DE2           ADD      R0,SP,#+8
   \   00000208   ........           _BLF     ??_Erase,??_Erase??rA
   \   0000020C   08008DE2           ADD      R0,SP,#+8
   \   00000210   ........           _BLF     ??_Clear,??_Clear??rA
    111          										Echo = false;
   \   00000214   0060A0E3           MOV      R6,#+0
   \   00000218   000000EA           B        ??ANPRO1Receive_2
    112          									} else {
    113          										Echo = true;
   \                     ??ANPRO1Receive_10:
   \   0000021C   0160A0E3           MOV      R6,#+1
    114          									}
    115          								}
    116          							}
    117          						}
    118          					}
    119          				}
    120          			}
    121          		}
    122          	}while ( Echo && dataAvailable );
   \                     ??ANPRO1Receive_2:
   \   00000220   060014E1           TST      R4,R6
   \   00000224   7EFFFF1A           BNE      ??ANPRO1Receive_1
    123          	return(bool)( PacketCnt > 1 );
   \   00000228   04009DE5           LDR      R0,[SP, #+4]
   \   0000022C   88DF8DE2           ADD      SP,SP,#+544
   \   00000230   F04FBDE8           POP      {R4-R11,LR}
   \   00000234   020050E3           CMP      R0,#+2
   \   00000238   0100A0A3           MOVGE    R0,#+1
   \   0000023C   0000A0B3           MOVLT    R0,#+0
   \   00000240   1EFF2FE1           BX       LR               ;; return
    124          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     CRC
    125          
    126          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ANPRO1Receive(TSNUart *, int, unsigned char, set<PRogramObjectBase *> &, bool (*)(TSNUart *, unsigned char *, int, set<PRogramObjectBase *>))
                                      580
     AddCommand(unsigned char *, unsigned short, unsigned char, unsigned char *, unsigned char)
                                        8
     AddPacketHeading(unsigned char *, unsigned char)
                                        0
     AddPacketTail(unsigned char *, unsigned short, unsigned char)
                                        4
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                     136
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     AddPacketHeading(unsigned char *, unsigned char)
                                      40
     AddCommand(unsigned char *, unsigned short, unsigned char, unsigned char *, unsigned char)
                                      68
     AddPacketTail(unsigned char *, unsigned short, unsigned char)
                                     120
     ANPRO1Receive(TSNUart *, int, unsigned char, set<PRogramObjectBase *> &, bool (*)(TSNUart *, unsigned char *, int, set<PRogramObjectBase *>))
                                     580
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         120

 
 1 320 bytes in segment CODE
     4 bytes in segment DIFUNCT
 
 820 bytes of CODE memory (+ 504 bytes shared)

Errors: none
Warnings: none
