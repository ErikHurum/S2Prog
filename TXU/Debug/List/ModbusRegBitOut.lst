##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusRegBitOut.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusRegBitOut.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusRegBitOut.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusRegBitOut.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusRegBitOut.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_7
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_8:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_9
   \                     ??_Insert_7:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_10
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_9
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_9
   \                     ??_Insert_10:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_9
   \   00000060   F0FFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_9:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_12
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_13
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_11
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_14
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_14:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_9
   \                     ??_Insert_13:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_11
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_15
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_15:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_9
   \                     ??_Insert_12:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_4:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_5
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_4
   \                     ??insert_5:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_6
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_7
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_8:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_9
   \                     ??insert_7:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_6:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_10
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_8
   \                     ??insert_10:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_9:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_11:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_12
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_11
   \                     ??insert_12:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_13
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_14
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_15:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_16
   \                     ??insert_14:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_13:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_17
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_15
   \                     ??insert_17:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_16:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_18:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_19
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_18
   \                     ??insert_19:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_20
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_21
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_22:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_23
   \                     ??insert_21:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_20:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_24
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_22
   \                     ??insert_24:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_23:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert_3:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_25:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_26
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_25
   \                     ??insert_26:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_27
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_28
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_29:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_4,??_Insert??rA_3
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_30
   \                     ??insert_28:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_27:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_31
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_29
   \                     ??insert_31:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_30:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_3
   \                     ??_Erase_4:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_3:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_4
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_5
   \                     ??_Erase_6:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_5:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_6
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_7
   \                     ??_Erase_8:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_7:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_8
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_17
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_17:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_18
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_18:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_4:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_19
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_19:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_2,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_20:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_20
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_6:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_21:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_21
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_5
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_6,??_Insert??rA_6
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_3`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   0000007C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif

   \                                 In segment DATA_Z, align 4, align-sorted
      6          set<PRogramObjectBase *>ModbusRegBitOut::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          ModbusRegBitOut::ModbusRegBitOut(bool pIsCreatedFromMultiple) : ModbusRegisterOut(pIsCreatedFromMultiple, C_PRO_MODBUS_REG_BIT_OUT, false) {
   \                     ??ModbusRegBitOut:
   \   00000000   F7402DE9           PUSH     {R0-R2,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   FB60A0E3           MOV      R6,#+251
   \   00000010   A06E86E3           ORR      R6,R6,#0xA00
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   0620A0E1           MOV      R2,R6
   \   0000001C   ........           _BLF     ??ModbusRegisterOut,??ModbusRegisterOut??rA
   \   00000020   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000024   767F84E2           ADD      R7,R4,#+472
   \   00000028   A40084E5           STR      R0,[R4, #+164]
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   1400C7E5           STRB     R0,[R7, #+20]
   \   0000004C   7C7F84E2           ADD      R7,R4,#+496
   \   00000050   01008DE2           ADD      R0,SP,#+1
   \   00000054   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000060   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000064   1400C7E5           STRB     R0,[R7, #+20]
      9              ModbusSet.insert(this);
   \   00000068   ........           LDR      R7,??DataTable2  ;; ??ModbusSet
   \   0000006C   820F84E2           ADD      R0,R4,#+520
   \   00000070   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000074   850F84E2           ADD      R0,R4,#+532
   \   00000078   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000007C   0420A0E1           MOV      R2,R4
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   ........           _BLF     ??insert,??insert??rA
     10              IDNumber             = (C_PRO_MODBUS_REG_BIT_OUT << 16) + ModbusSet.size();
   \   0000008C   100097E5           LDR      R0,[R7, #+16]
   \   00000090   0618A0E1           MOV      R1,R6, LSL #+16
   \   00000094   000081E0           ADD      R0,R1,R0
   \   00000098   9C0084E5           STR      R0,[R4, #+156]
     11              Type                 = C_PRO_MODBUS_REG_BIT_OUT;
   \   0000009C   A06084E5           STR      R6,[R4, #+160]
     12              PulseTime            = 0;
   \   000000A0   0060A0E3           MOV      R6,#+0
   \   000000A4   C46184E5           STR      R6,[R4, #+452]
     13              ActivatedTime        = clock();
   \   000000A8   ........           _BLF     clock,??clock??rA
   \   000000AC   C80184E5           STR      R0,[R4, #+456]
     14              CurrentState         = 0;
   \   000000B0   B06184E5           STR      R6,[R4, #+432]
     15              BitOffset            = 0;
   \   000000B4   AC6184E5           STR      R6,[R4, #+428]
     16              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   000000B8   7851C4E5           STRB     R5,[R4, #+376]
     17              isVolatile            = false;
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   CD01C4E5           STRB     R0,[R4, #+461]
     18          }
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   FE40BDE8           POP      {R1-R7,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          ModbusRegBitOut::~ModbusRegBitOut() {
   \                     `?~ModbusRegBitOut`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1A00000A           BEQ      `?~ModbusRegBitOut_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     21          }
   \   00000018   856F84E2           ADD      R6,R4,#+532
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000030   826F84E2           ADD      R6,R4,#+520
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000044   7C6F84E2           ADD      R6,R4,#+496
   \   00000048   041096E5           LDR      R1,[R6, #+4]
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA_2
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000005C   760F84E2           ADD      R0,R4,#+472
   \   00000060   ........           _BLF     ??clear,??clear??rA
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     `?~ModbusRegisterOut`,`?~ModbusRegisterOut??rA`
   \   00000070   010015E3           TST      R5,#0x1
   \   00000074   0100000A           BEQ      `?~ModbusRegBitOut_1`
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusRegBitOut_1`:
   \   00000080   7040BDE8           POP      {R4-R6,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
     22          
     23          
     24          //---------------------------------------------------------------------------
     25          ///////////////////////////////////////////////////////////////
     26          //
     27          // Routines for the Configuration
     28          //
     29          //
     30          //    ModbusRegBitOut 0   6   1   815   ObjectId 0x49F0001 Bit     0       Unpowered  Name WBDB-4     Description Failure      ModbusEnd
     31          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     32          AnsiString ModbusRegBitOut::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     33              AnsiString LocalString = ModbusObject::MakeConfigString();
     34          
     35              LocalString += TabStr1 + KeyWord(C_OBJECT_ID_LIST);
   \   00000004   7C659FE5           LDR      R6,??MakeConfigString_2  ;; TabStr1
   \   00000008   BDDF4DE2           SUB      SP,SP,#+756
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000001C   D210A0E3           MOV      R1,#+210
   \   00000020   70008DE2           ADD      R0,SP,#+112
   \   00000024   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000028   70208DE2           ADD      R2,SP,#+112
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   54008DE2           ADD      R0,SP,#+84
   \   00000034   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000038   ........           LDR      R0,??DataTable4  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   007090E5           LDR      R7,[R0, #+0]
   \   00000044   54108DE2           ADD      R1,SP,#+84
   \   00000048   0730A0E1           MOV      R3,R7
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   54008DE2           ADD      R0,SP,#+84
   \   00000060   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   70008DE2           ADD      R0,SP,#+112
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
     36              set<PRogramObject *>::iterator pBIt;
     37              for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000074   768FA0E3           MOV      R8,#+472
   \   00000078   049098E7           LDR      R9,[R8, +R4]
   \   0000007C   180000EA           B        ??MakeConfigString_3
     38                  PRogramObject *Element = (PRogramObject *)*pBIt;
     39                  int PROIDNumber = Element->IDNumber;
   \                     ??MakeConfigString_4:
   \   00000080   100099E5           LDR      R0,[R9, #+16]
   \   00000084   9CA090E5           LDR      R10,[R0, #+156]
     40                  AnsiString IdNumStr;
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??AnsiString,??AnsiString??rA
     41                  IdNumStr.cat_sprintf("0x%0X\t", PROIDNumber);
   \   00000090   F4249FE5           LDR      R2,??MakeConfigString_2+0x4  ;; `?<Constant "0x%0X     ">`
   \   00000094   0A30A0E1           MOV      R3,R10
   \   00000098   1C108DE2           ADD      R1,SP,#+28
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     42                  LocalString += IdNumStr;
   \   000000B4   0730A0E1           MOV      R3,R7
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0D10A0E1           MOV      R1,SP
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??append,??append??rA
     43              }
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0900A0E1           MOV      R0,R9
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0090A0E1           MOV      R9,R0
   \                     ??MakeConfigString_3:
   \   000000E4   040088E0           ADD      R0,R8,R4
   \   000000E8   000059E1           CMP      R9,R0
   \   000000EC   E3FFFF1A           BNE      ??MakeConfigString_4
     44              LocalString += TabStr1 + KeyWord(C_PROLIST_END);
   \   000000F0   4910A0E3           MOV      R1,#+73
   \   000000F4   501E81E3           ORR      R1,R1,#0x500
   \   000000F8   A8008DE2           ADD      R0,SP,#+168
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   A8208DE2           ADD      R2,SP,#+168
   \   00000104   0610A0E1           MOV      R1,R6
   \   00000108   8C008DE2           ADD      R0,SP,#+140
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   8C108DE2           ADD      R1,SP,#+140
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   8C008DE2           ADD      R0,SP,#+140
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   A8008DE2           ADD      R0,SP,#+168
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     45              if (isVolatile) {
   \   00000144   CD01D4E5           LDRB     R0,[R4, #+461]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   1300000A           BEQ      ??MakeConfigString_5
     46                  LocalString += TabStr1 + KeyWord(C_VOLATILE);
   \   00000150   6C10A0E3           MOV      R1,#+108
   \   00000154   1C008DE2           ADD      R0,SP,#+28
   \   00000158   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000015C   1C208DE2           ADD      R2,SP,#+28
   \   00000160   0610A0E1           MOV      R1,R6
   \   00000164   0D00A0E1           MOV      R0,SP
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   0730A0E1           MOV      R3,R7
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0D10A0E1           MOV      R1,SP
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   ........           _BLF     ??append,??append??rA
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   0D00A0E1           MOV      R0,SP
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   1C008DE2           ADD      R0,SP,#+28
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
     47              }
     48          
     49              LocalString += TabStr1 + KeyWord(NormalState);
   \                     ??MakeConfigString_5:
   \   000001A0   B81194E5           LDR      R1,[R4, #+440]
   \   000001A4   E0008DE2           ADD      R0,SP,#+224
   \   000001A8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001AC   E0208DE2           ADD      R2,SP,#+224
   \   000001B0   0610A0E1           MOV      R1,R6
   \   000001B4   C4008DE2           ADD      R0,SP,#+196
   \   000001B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001BC   0730A0E1           MOV      R3,R7
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   C4108DE2           ADD      R1,SP,#+196
   \   000001C8   0500A0E1           MOV      R0,R5
   \   000001CC   ........           _BLF     ??append,??append??rA
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   C4008DE2           ADD      R0,SP,#+196
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   E0008DE2           ADD      R0,SP,#+224
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     50              LocalString += TabStr1 + KeyWord(C_CTRL_DEACTIVATE) + KeyWord(DeactivateBy);
   \   000001F0   BC1194E5           LDR      R1,[R4, #+444]
   \   000001F4   540F8DE2           ADD      R0,SP,#+336
   \   000001F8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001FC   B210A0E3           MOV      R1,#+178
   \   00000200   701E81E3           ORR      R1,R1,#0x700
   \   00000204   4D0F8DE2           ADD      R0,SP,#+308
   \   00000208   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000020C   4D2F8DE2           ADD      R2,SP,#+308
   \   00000210   0610A0E1           MOV      R1,R6
   \   00000214   460F8DE2           ADD      R0,SP,#+280
   \   00000218   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000021C   542F8DE2           ADD      R2,SP,#+336
   \   00000220   461F8DE2           ADD      R1,SP,#+280
   \   00000224   FC008DE2           ADD      R0,SP,#+252
   \   00000228   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000022C   0730A0E1           MOV      R3,R7
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   FC108DE2           ADD      R1,SP,#+252
   \   00000238   0500A0E1           MOV      R0,R5
   \   0000023C   ........           _BLF     ??append,??append??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   FC008DE2           ADD      R0,SP,#+252
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   540F8DE2           ADD      R0,SP,#+336
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   460F8DE2           ADD      R0,SP,#+280
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   4D0F8DE2           ADD      R0,SP,#+308
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              LocalString += TabStr1 + KeyWord(C_BIT_OFFSET) + (AnsiString)BitOffset;
   \   00000280   AC1194E5           LDR      R1,[R4, #+428]
   \   00000284   AF0F8DE2           ADD      R0,SP,#+700
   \   00000288   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000028C   0080A0E1           MOV      R8,R0
   \   00000290   D010A0E3           MOV      R1,#+208
   \   00000294   690F8DE2           ADD      R0,SP,#+420
   \   00000298   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000029C   692F8DE2           ADD      R2,SP,#+420
   \   000002A0   0610A0E1           MOV      R1,R6
   \   000002A4   620F8DE2           ADD      R0,SP,#+392
   \   000002A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002AC   0820A0E1           MOV      R2,R8
   \   000002B0   621F8DE2           ADD      R1,SP,#+392
   \   000002B4   5B0F8DE2           ADD      R0,SP,#+364
   \   000002B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002BC   0730A0E1           MOV      R3,R7
   \   000002C0   0020A0E3           MOV      R2,#+0
   \   000002C4   5B1F8DE2           ADD      R1,SP,#+364
   \   000002C8   0500A0E1           MOV      R0,R5
   \   000002CC   ........           _BLF     ??append,??append??rA
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   5B0F8DE2           ADD      R0,SP,#+364
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E0   0020A0E3           MOV      R2,#+0
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   AF0F8DE2           ADD      R0,SP,#+700
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   620F8DE2           ADD      R0,SP,#+392
   \   000002FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0110A0E3           MOV      R1,#+1
   \   00000308   690F8DE2           ADD      R0,SP,#+420
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              LocalString += TabStr1 + KeyWord(C_CTRL_PULSE_WIDTH) + (AnsiString)PulseTime;
   \   00000310   C41194E5           LDR      R1,[R4, #+452]
   \   00000314   B60F8DE2           ADD      R0,SP,#+728
   \   00000318   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000031C   0080A0E1           MOV      R8,R0
   \   00000320   B810A0E3           MOV      R1,#+184
   \   00000324   701E81E3           ORR      R1,R1,#0x700
   \   00000328   7E0F8DE2           ADD      R0,SP,#+504
   \   0000032C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000330   7E2F8DE2           ADD      R2,SP,#+504
   \   00000334   0610A0E1           MOV      R1,R6
   \   00000338   770F8DE2           ADD      R0,SP,#+476
   \   0000033C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000340   0820A0E1           MOV      R2,R8
   \   00000344   771F8DE2           ADD      R1,SP,#+476
   \   00000348   700F8DE2           ADD      R0,SP,#+448
   \   0000034C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000350   0730A0E1           MOV      R3,R7
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   701F8DE2           ADD      R1,SP,#+448
   \   0000035C   0500A0E1           MOV      R0,R5
   \   00000360   ........           _BLF     ??append,??append??rA
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   700F8DE2           ADD      R0,SP,#+448
   \   00000370   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   B60F8DE2           ADD      R0,SP,#+728
   \   00000380   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   0110A0E3           MOV      R1,#+1
   \   0000038C   770F8DE2           ADD      R0,SP,#+476
   \   00000390   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0110A0E3           MOV      R1,#+1
   \   0000039C   7E0F8DE2           ADD      R0,SP,#+504
   \   000003A0   ........           _BLF     ??_Tidy,??_Tidy??rA
     53              LocalString += TabStr1 + KeyWord(AlarmAlternative);
   \   000003A4   C01194E5           LDR      R1,[R4, #+448]
   \   000003A8   8C0F8DE2           ADD      R0,SP,#+560
   \   000003AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003B0   8C2F8DE2           ADD      R2,SP,#+560
   \   000003B4   0610A0E1           MOV      R1,R6
   \   000003B8   850F8DE2           ADD      R0,SP,#+532
   \   000003BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C0   0730A0E1           MOV      R3,R7
   \   000003C4   0020A0E3           MOV      R2,#+0
   \   000003C8   851F8DE2           ADD      R1,SP,#+532
   \   000003CC   0500A0E1           MOV      R0,R5
   \   000003D0   ........           _BLF     ??append,??append??rA
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   0110A0E3           MOV      R1,#+1
   \   000003DC   850F8DE2           ADD      R0,SP,#+532
   \   000003E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E4   0020A0E3           MOV      R2,#+0
   \   000003E8   0110A0E3           MOV      R1,#+1
   \   000003EC   8C0F8DE2           ADD      R0,SP,#+560
   \   000003F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     54          
     55              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
   \   000003F4   0090A0E3           MOV      R9,#+0
   \   000003F8   828FA0E3           MOV      R8,#+520
   \   000003FC   150000EA           B        ??MakeConfigString_6
     56                  LocalString += TabStr1 + KeyWord(AlarmTypeList[j]);
   \                     ??MakeConfigString_7:
   \   00000400   040098E7           LDR      R0,[R8, +R4]
   \   00000404   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000408   0D00A0E1           MOV      R0,SP
   \   0000040C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000410   0D20A0E1           MOV      R2,SP
   \   00000414   0610A0E1           MOV      R1,R6
   \   00000418   1C008DE2           ADD      R0,SP,#+28
   \   0000041C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000420   0730A0E1           MOV      R3,R7
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   1C108DE2           ADD      R1,SP,#+28
   \   0000042C   0500A0E1           MOV      R0,R5
   \   00000430   ........           _BLF     ??append,??append??rA
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0110A0E3           MOV      R1,#+1
   \   0000043C   1C008DE2           ADD      R0,SP,#+28
   \   00000440   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   0110A0E3           MOV      R1,#+1
   \   0000044C   0D00A0E1           MOV      R0,SP
   \   00000450   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              }
   \   00000454   019089E2           ADD      R9,R9,#+1
   \                     ??MakeConfigString_6:
   \   00000458   040088E0           ADD      R0,R8,R4
   \   0000045C   041090E5           LDR      R1,[R0, #+4]
   \   00000460   000090E5           LDR      R0,[R0, #+0]
   \   00000464   000041E0           SUB      R0,R1,R0
   \   00000468   200159E1           CMP      R9,R0, LSR #+2
   \   0000046C   E3FFFF3A           BCC      ??MakeConfigString_7
     58              if (AlarmDelay) {
   \   00000470   B41194E5           LDR      R1,[R4, #+436]
   \   00000474   000051E3           CMP      R1,#+0
   \   00000478   2200000A           BEQ      ??MakeConfigString_8
     59                  LocalString += TabStr1 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay;
   \   0000047C   A80F8DE2           ADD      R0,SP,#+672
   \   00000480   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000484   0040A0E1           MOV      R4,R0
   \   00000488   5A1E88E3           ORR      R1,R8,#0x5A0
   \   0000048C   38008DE2           ADD      R0,SP,#+56
   \   00000490   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000494   38208DE2           ADD      R2,SP,#+56
   \   00000498   0610A0E1           MOV      R1,R6
   \   0000049C   1C008DE2           ADD      R0,SP,#+28
   \   000004A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A4   0420A0E1           MOV      R2,R4
   \   000004A8   1C108DE2           ADD      R1,SP,#+28
   \   000004AC   0D00A0E1           MOV      R0,SP
   \   000004B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004B4   0730A0E1           MOV      R3,R7
   \   000004B8   0020A0E3           MOV      R2,#+0
   \   000004BC   0D10A0E1           MOV      R1,SP
   \   000004C0   0500A0E1           MOV      R0,R5
   \   000004C4   ........           _BLF     ??append,??append??rA
   \   000004C8   0020A0E3           MOV      R2,#+0
   \   000004CC   0110A0E3           MOV      R1,#+1
   \   000004D0   0D00A0E1           MOV      R0,SP
   \   000004D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0110A0E3           MOV      R1,#+1
   \   000004E0   A80F8DE2           ADD      R0,SP,#+672
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0110A0E3           MOV      R1,#+1
   \   000004F0   1C008DE2           ADD      R0,SP,#+28
   \   000004F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   38008DE2           ADD      R0,SP,#+56
   \   00000504   ........           _BLF     ??_Tidy,??_Tidy??rA
     60              }
     61              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \                     ??MakeConfigString_8:
   \   00000508   6110A0E3           MOV      R1,#+97
   \   0000050C   901E81E3           ORR      R1,R1,#0x900
   \   00000510   A10F8DE2           ADD      R0,SP,#+644
   \   00000514   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000518   A12F8DE2           ADD      R2,SP,#+644
   \   0000051C   0610A0E1           MOV      R1,R6
   \   00000520   9A0F8DE2           ADD      R0,SP,#+616
   \   00000524   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000528   60209FE5           LDR      R2,??MakeConfigString_2+0x8  ;; CrLfStr
   \   0000052C   9A1F8DE2           ADD      R1,SP,#+616
   \   00000530   930F8DE2           ADD      R0,SP,#+588
   \   00000534   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000538   0730A0E1           MOV      R3,R7
   \   0000053C   0020A0E3           MOV      R2,#+0
   \   00000540   931F8DE2           ADD      R1,SP,#+588
   \   00000544   0500A0E1           MOV      R0,R5
   \   00000548   ........           _BLF     ??append,??append??rA
   \   0000054C   0020A0E3           MOV      R2,#+0
   \   00000550   0110A0E3           MOV      R1,#+1
   \   00000554   930F8DE2           ADD      R0,SP,#+588
   \   00000558   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000055C   0020A0E3           MOV      R2,#+0
   \   00000560   0110A0E3           MOV      R1,#+1
   \   00000564   9A0F8DE2           ADD      R0,SP,#+616
   \   00000568   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000056C   0020A0E3           MOV      R2,#+0
   \   00000570   0110A0E3           MOV      R1,#+1
   \   00000574   A10F8DE2           ADD      R0,SP,#+644
   \   00000578   ........           _BLF     ??_Tidy,??_Tidy??rA
     62              return (LocalString);
   \   0000057C   BDDF8DE2           ADD      SP,SP,#+756
   \   00000580   F047BDE8           POP      {R4-R10,LR}
   \   00000584   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000588   ........           DC32     TabStr1
   \   0000058C   ........           DC32     `?<Constant "0x%0X     ">`
   \   00000590   ........           DC32     CrLfStr
     63          }
     64          //---------------------------------------------------------------------------
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          bool ModbusRegBitOut::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ACD04DE2           SUB      SP,SP,#+172
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     67          
     68              int ErrorLine = 0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
     69              bool NoError = true;
   \   00000018   0190A0E3           MOV      R9,#+1
     70              if (ModbusObject::LoadConfigString(ConfigString)) {
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   967E89E3           ORR      R7,R9,#0x960
   \   0000002C   0080A0E3           MOV      R8,#+0
   \   00000030   85AFA0E3           MOV      R10,#+532
   \   00000034   49B0A0E3           MOV      R11,#+73
   \   00000038   50BE8BE3           ORR      R11,R11,#0x500
   \   0000003C   2901000A           BEQ      ??LoadConfigString_3
     71                  int Key;
     72                  do {
     73                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_4:
   \   00000040   0030A0E3           MOV      R3,#+0
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   58108DE2           ADD      R1,SP,#+88
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           _BLF     ??NextWord,??NextWord??rA
     74                      Key = FindConfigKey(InputKeyWord);
   \   00000054   58108DE2           ADD      R1,SP,#+88
   \   00000058   3C008DE2           ADD      R0,SP,#+60
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   3C008DE2           ADD      R0,SP,#+60
   \   00000064   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000068   0060A0E1           MOV      R6,R0
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   3C008DE2           ADD      R0,SP,#+60
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
     75                      switch (Key) {
   \   0000007C   6C0056E3           CMP      R6,#+108
   \   00000080   B700000A           BEQ      ??LoadConfigString_5
   \   00000084   D00056E3           CMP      R6,#+208
   \   00000088   EE00000A           BEQ      ??LoadConfigString_6
   \   0000008C   D10056E3           CMP      R6,#+209
   \   00000090   D2005613           CMPNE    R6,#+210
   \   00000094   8B00000A           BEQ      ??LoadConfigString_7
   \   00000098   D40056E3           CMP      R6,#+212
   \   0000009C   9C00000A           BEQ      ??LoadConfigString_8
   \   000000A0   FA0F56E3           CMP      R6,#+1000
   \   000000A4   EA10A013           MOVNE    R1,#+234
   \   000000A8   C01F8113           ORRNE    R1,R1,#0x300
   \   000000AC   01005611           CMPNE    R6,R1
   \   000000B0   6C10A013           MOVNE    R1,#+108
   \   000000B4   701E8113           ORRNE    R1,R1,#0x700
   \   000000B8   01005611           CMPNE    R6,R1
   \   000000BC   02108113           ORRNE    R1,R1,#0x2
   \   000000C0   01005611           CMPNE    R6,R1
   \   000000C4   E800000A           BEQ      ??LoadConfigString_9
   \   000000C8   091081E2           ADD      R1,R1,#+9
   \   000000CC   010056E1           CMP      R6,R1
   \   000000D0   01108112           ADDNE    R1,R1,#+1
   \   000000D4   01005611           CMPNE    R6,R1
   \   000000D8   01108113           ORRNE    R1,R1,#0x1
   \   000000DC   01005611           CMPNE    R6,R1
   \   000000E0   01108112           ADDNE    R1,R1,#+1
   \   000000E4   01005611           CMPNE    R6,R1
   \   000000E8   CA00000A           BEQ      ??LoadConfigString_10
   \   000000EC   251081E2           ADD      R1,R1,#+37
   \   000000F0   010056E1           CMP      R6,R1
   \   000000F4   02108112           ADDNE    R1,R1,#+2
   \   000000F8   01005611           CMPNE    R6,R1
   \   000000FC   C300000A           BEQ      ??LoadConfigString_11
   \   00000100   071081E2           ADD      R1,R1,#+7
   \   00000104   010056E1           CMP      R6,R1
   \   00000108   8C00000A           BEQ      ??LoadConfigString_12
   \   0000010C   0A1081E2           ADD      R1,R1,#+10
   \   00000110   010056E1           CMP      R6,R1
   \   00000114   9500000A           BEQ      ??LoadConfigString_13
   \   00000118   061081E2           ADD      R1,R1,#+6
   \   0000011C   010056E1           CMP      R6,R1
   \   00000120   C200000A           BEQ      ??LoadConfigString_14
   \   00000124   070056E1           CMP      R6,R7
   \   00000128   D000000A           BEQ      ??LoadConfigString_15
   \   0000012C   C210A0E3           MOV      R1,#+194
   \   00000130   B01E81E3           ORR      R1,R1,#0xB00
   \   00000134   010056E1           CMP      R6,R1
   \   00000138   01108113           ORRNE    R1,R1,#0x1
   \   0000013C   01005611           CMPNE    R6,R1
   \   00000140   01108112           ADDNE    R1,R1,#+1
   \   00000144   01005611           CMPNE    R6,R1
   \   00000148   01108113           ORRNE    R1,R1,#0x1
   \   0000014C   01005611           CMPNE    R6,R1
   \   00000150   01108112           ADDNE    R1,R1,#+1
   \   00000154   01005611           CMPNE    R6,R1
   \   00000158   01108113           ORRNE    R1,R1,#0x1
   \   0000015C   01005611           CMPNE    R6,R1
   \   00000160   01108112           ADDNE    R1,R1,#+1
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   01108113           ORRNE    R1,R1,#0x1
   \   0000016C   01005611           CMPNE    R6,R1
   \   00000170   04108113           ORRNE    R1,R1,#0x4
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   01108112           ADDNE    R1,R1,#+1
   \   0000017C   01005611           CMPNE    R6,R1
   \   00000180   01108113           ORRNE    R1,R1,#0x1
   \   00000184   01005611           CMPNE    R6,R1
   \   00000188   BD0E5613           CMPNE    R6,#+3024
   \   0000018C   02108112           ADDNE    R1,R1,#+2
   \   00000190   01005611           CMPNE    R6,R1
   \   00000194   01108112           ADDNE    R1,R1,#+1
   \   00000198   01005611           CMPNE    R6,R1
   \   0000019C   01108113           ORRNE    R1,R1,#0x1
   \   000001A0   01005611           CMPNE    R6,R1
   \   000001A4   01108112           ADDNE    R1,R1,#+1
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   01108113           ORRNE    R1,R1,#0x1
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108112           ADDNE    R1,R1,#+1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108113           ORRNE    R1,R1,#0x1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108112           ADDNE    R1,R1,#+1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   01108113           ORRNE    R1,R1,#0x1
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   01108112           ADDNE    R1,R1,#+1
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   01108113           ORRNE    R1,R1,#0x1
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108112           ADDNE    R1,R1,#+1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   01108113           ORRNE    R1,R1,#0x1
   \   000001F0   01005611           CMPNE    R6,R1
   \   000001F4   01108112           ADDNE    R1,R1,#+1
   \   000001F8   01005611           CMPNE    R6,R1
   \   000001FC   01108113           ORRNE    R1,R1,#0x1
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   BE0E5613           CMPNE    R6,#+3040
   \   00000208   02108112           ADDNE    R1,R1,#+2
   \   0000020C   01005611           CMPNE    R6,R1
   \   00000210   01108112           ADDNE    R1,R1,#+1
   \   00000214   01005611           CMPNE    R6,R1
   \   00000218   01108113           ORRNE    R1,R1,#0x1
   \   0000021C   01005611           CMPNE    R6,R1
   \   00000220   02108112           ADDNE    R1,R1,#+2
   \   00000224   01005611           CMPNE    R6,R1
   \   00000228   01108112           ADDNE    R1,R1,#+1
   \   0000022C   01005611           CMPNE    R6,R1
   \   00000230   01108113           ORRNE    R1,R1,#0x1
   \   00000234   01005611           CMPNE    R6,R1
   \   00000238   01108112           ADDNE    R1,R1,#+1
   \   0000023C   01005611           CMPNE    R6,R1
   \   00000240   01108113           ORRNE    R1,R1,#0x1
   \   00000244   01005611           CMPNE    R6,R1
   \   00000248   A1108112           ADDNE    R1,R1,#+161
   \   0000024C   01005611           CMPNE    R6,R1
   \   00000250   01108113           ORRNE    R1,R1,#0x1
   \   00000254   01005611           CMPNE    R6,R1
   \   00000258   02108112           ADDNE    R1,R1,#+2
   \   0000025C   01005611           CMPNE    R6,R1
   \   00000260   01108112           ADDNE    R1,R1,#+1
   \   00000264   01005611           CMPNE    R6,R1
   \   00000268   01108113           ORRNE    R1,R1,#0x1
   \   0000026C   01005611           CMPNE    R6,R1
   \   00000270   C90E5613           CMPNE    R6,#+3216
   \   00000274   02108112           ADDNE    R1,R1,#+2
   \   00000278   01005611           CMPNE    R6,R1
   \   0000027C   01108112           ADDNE    R1,R1,#+1
   \   00000280   01005611           CMPNE    R6,R1
   \   00000284   01108113           ORRNE    R1,R1,#0x1
   \   00000288   01005611           CMPNE    R6,R1
   \   0000028C   0C108113           ORRNE    R1,R1,#0xC
   \   00000290   01005611           CMPNE    R6,R1
   \   00000294   CA0E5613           CMPNE    R6,#+3232
   \   00000298   02108112           ADDNE    R1,R1,#+2
   \   0000029C   01005611           CMPNE    R6,R1
   \   000002A0   01108112           ADDNE    R1,R1,#+1
   \   000002A4   01005611           CMPNE    R6,R1
   \   000002A8   03108112           ADDNE    R1,R1,#+3
   \   000002AC   01005611           CMPNE    R6,R1
   \   000002B0   01108112           ADDNE    R1,R1,#+1
   \   000002B4   01005611           CMPNE    R6,R1
   \   000002B8   01108113           ORRNE    R1,R1,#0x1
   \   000002BC   01005611           CMPNE    R6,R1
   \   000002C0   5600000A           BEQ      ??LoadConfigString_16
   \   000002C4   6B0000EA           B        ??LoadConfigString_17
     76                      case C_OBJECT_ID_LIST:
     77                      case C_OBJECT_ID     :
     78                          do {
     79                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_7:
   \   000002C8   0B20A0E1           MOV      R2,R11
   \   000002CC   0D10A0E1           MOV      R1,SP
   \   000002D0   0500A0E1           MOV      R0,R5
   \   000002D4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
     80                              if (!ErrorLine) {
   \   000002D8   00109DE5           LDR      R1,[SP, #+0]
   \   000002DC   000051E3           CMP      R1,#+0
   \   000002E0   0200001A           BNE      ??LoadConfigString_18
     81                                  IdNumbers.push_back(tmpIDNumber);
   \   000002E4   0010A0E1           MOV      R1,R0
   \   000002E8   04008AE0           ADD      R0,R10,R4
   \   000002EC   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     82                              }
     83                          }while (!ErrorLine);
   \                     ??LoadConfigString_18:
   \   000002F0   00009DE5           LDR      R0,[SP, #+0]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   F2FFFF0A           BEQ      ??LoadConfigString_7
     84                          if (ErrorLine == END_FOUND) {
   \   000002FC   020070E3           CMN      R0,#+2
   \   00000300   6D00001A           BNE      ??LoadConfigString_19
     85                              ErrorLine = 0;
   \   00000304   0010A0E3           MOV      R1,#+0
   \   00000308   00108DE5           STR      R1,[SP, #+0]
   \                     ??LoadConfigString_20:
   \   0000030C   0190A0E3           MOV      R9,#+1
   \   00000310   6A0000EA           B        ??LoadConfigString_21
     86                          }
     87                          NoError = !ErrorLine;
     88                          break;
     89                      case C_REF_OBJECT_ID :
     90                          {
     91                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_8:
   \   00000314   0B20A0E1           MOV      R2,R11
   \   00000318   0D10A0E1           MOV      R1,SP
   \   0000031C   0500A0E1           MOV      R0,R5
   \   00000320   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000324   0010A0E1           MOV      R1,R0
     92                              if (!ErrorLine) {
   \   00000328   00009DE5           LDR      R0,[SP, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   6200001A           BNE      ??LoadConfigString_21
     93                                  IdNumbers.push_back(tmpIDNumber);
   \   00000334   04008AE0           ADD      R0,R10,R4
   \   00000338   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   0000033C   5F0000EA           B        ??LoadConfigString_21
     94                              }
     95                          }
     96                          break;
     97                      case C_CTRL_AL_DELAY:
     98                          AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   0D10A0E1           MOV      R1,SP
   \   00000348   0500A0E1           MOV      R0,R5
   \   0000034C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000350   B40184E5           STR      R0,[R4, #+436]
     99                          NoError = !ErrorLine;
   \                     ??LoadConfigString_22:
   \   00000354   00009DE5           LDR      R0,[SP, #+0]
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   5600001A           BNE      ??LoadConfigString_19
   \   00000360   E9FFFFEA           B        ??LoadConfigString_20
    100                          break;
    101                      case C_VOLATILE:
    102                          isVolatile = true;
   \                     ??LoadConfigString_5:
   \   00000364   0100A0E3           MOV      R0,#+1
   \   00000368   CD01C4E5           STRB     R0,[R4, #+461]
   \   0000036C   530000EA           B        ??LoadConfigString_21
    103                          break;
    104                      case C_CTRL_DEACTIVATE      :
    105                          {
    106                              AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_13:
   \   00000370   0030A0E3           MOV      R3,#+0
   \   00000374   0D20A0E1           MOV      R2,SP
   \   00000378   20108DE2           ADD      R1,SP,#+32
   \   0000037C   0500A0E1           MOV      R0,R5
   \   00000380   ........           _BLF     ??NextWord,??NextWord??rA
    107                              if (!ErrorLine) {
   \   00000384   00009DE5           LDR      R0,[SP, #+0]
   \   00000388   000050E3           CMP      R0,#+0
   \   0000038C   1600001A           BNE      ??LoadConfigString_23
    108                                  int tmpKey = FindConfigKey(TempStr);
   \   00000390   20108DE2           ADD      R1,SP,#+32
   \   00000394   04008DE2           ADD      R0,SP,#+4
   \   00000398   ........           _BLF     ??string,??string??rA
   \   0000039C   04008DE2           ADD      R0,SP,#+4
   \   000003A0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000003A4   0090A0E1           MOV      R9,R0
   \   000003A8   0020A0E3           MOV      R2,#+0
   \   000003AC   0110A0E3           MOV      R1,#+1
   \   000003B0   04008DE2           ADD      R0,SP,#+4
   \   000003B4   ........           _BLF     ??_Tidy,??_Tidy??rA
    109                                  switch (tmpKey) {
   \   000003B8   B30049E2           SUB      R0,R9,#+179
   \   000003BC   700E40E2           SUB      R0,R0,#+1792
   \   000003C0   040050E3           CMP      R0,#+4
   \   000003C4   0600008A           BHI      ??LoadConfigString_24
   \   000003C8   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000003CC   0010D1E7           LDRB     R1,[R1, R0]
   \   000003D0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000003D4   01010101           DC8      +1,+1,+1,+1
   \   000003D8   01000000           DC8      +1,+0,+0,+0
    110                                  case C_CTRL_DE_ACKNOW       :
    111                                  case C_CTRL_DE_IDLE         :
    112                                  case C_CTRL_DE_VALUE        :
    113                                  case C_CTRL_DE_SILENCE      :
    114                                  case C_CTRL_DE_VAL_ENABLED  :
    115                                      DeactivateBy = tmpKey;
   \                     ??LoadConfigString_25:
   \   000003DC   BC9184E5           STR      R9,[R4, #+444]
   \   000003E0   010000EA           B        ??LoadConfigString_23
    116                                      break;
    117                                  default:
    118                                      ErrorLine = ConfigString.LineCount;
   \                     ??LoadConfigString_24:
   \   000003E4   1C1095E5           LDR      R1,[R5, #+28]
   \   000003E8   00108DE5           STR      R1,[SP, #+0]
    119                                      break;
    120                                  }
    121                              }
    122                              NoError = !ErrorLine;
   \                     ??LoadConfigString_23:
   \   000003EC   00009DE5           LDR      R0,[SP, #+0]
    123                          }
   \   000003F0   0020A0E3           MOV      R2,#+0
   \   000003F4   000050E3           CMP      R0,#+0
   \   000003F8   0190A003           MOVEQ    R9,#+1
   \   000003FC   0090A013           MOVNE    R9,#+0
   \   00000400   0110A0E3           MOV      R1,#+1
   \   00000404   20008DE2           ADD      R0,SP,#+32
   \   00000408   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000040C   2B0000EA           B        ??LoadConfigString_21
    124                          break;
    125                      case C_CTRL_NS_POWERED              :
    126                      case C_CTRL_NS_UNPOWERED            :
    127                          NormalState = Key;
   \                     ??LoadConfigString_11:
   \   00000410   B86184E5           STR      R6,[R4, #+440]
   \   00000414   290000EA           B        ??LoadConfigString_21
    128                          break;
    129                      case C_CTRL_ALT_ALL                 :
    130                      case C_CTRL_ALT_AL_TYPES            :
    131                      case C_CTRL_ALT_PRO_LIST            :
    132                      case C_CTRL_ALT_TYPE_PRO            :
    133                          AlarmAlternative = Key;
   \                     ??LoadConfigString_10:
   \   00000418   C06184E5           STR      R6,[R4, #+448]
   \   0000041C   270000EA           B        ??LoadConfigString_21
    134                          break;
    135                      case ID_AL_OVERFILL                 :
    136                      case ID_AL_HIGH_LEVEL               :
    137                      case ID_AL_LOWLOW_LEVEL               :
    138                      case ID_AL_LOW_LEVEL                :
    139                      case ID_AL_HIGH_TEMP                :
    140                      case ID_AL_LOW_TEMP                 :
    141                      case ID_AL_LOW_BOT_TEMP             :
    142                      case ID_AL_HIGH_BOT_TEMP            :
    143                      case ID_AL_MAIN_WATERINGR           :
    144                      case ID_AL_PRE_WATERINGR            :
    145                      case ID_AL_LOW_T_PRESS              :
    146                      case ID_AL_HIGH_T_PRESS             :
    147          			case ID_AL_LOW_INERT_GAS_PRESS      :
    148          			case ID_AL_HIGH_INERT_GAS_PRESS     :
    149                      case ID_AL_LOW_PRESS_VAC            :
    150                      case ID_AL_HIGH_PRESS_VAC           :
    151                      case ID_AL_LOW_VAPOUR_RETURN        :
    152                      case ID_AL_HIGH_VAPOUR_RETURN       :
    153                      case ID_AL_X_LOW_T_PRESS1           :
    154                      case ID_AL_X_HIGH_T_PRESS1          :
    155                      case ID_AL_X_LOW_T_PRESS2           :
    156                      case ID_AL_X_HIGH_T_PRESS2          :
    157                      case ID_AL_LOW_LOADRATE             :
    158                      case ID_AL_HIGH_LOADRATE            :
    159                      case ID_AL_LEVEL_CHANGE             :
    160                      case ID_AL_DENS_DIFF                :
    161                      case ID_AL_LOW_LINE_PRESS           :
    162                      case ID_AL_HIGH_LINE_PRESS          :
    163                      case ID_AL_HIGHHIGH_LINE_PRESS          :
    164                      case ID_AL_SNS_OPEN_LOOP            :
    165                      case ID_AL_LEVEL_SWITCH             :
    166                      case ID_AL_LSWITCH_TEST             :
    167                      case ID_AL_LSWITCH_FAILURE          :
    168                      case ID_AL_SNS_SHORT_CIRCUIT        :
    169                      case ID_AL_SNS_HART_COM_ERROR       :
    170                      case ID_AL_SNS_HART_OPEN_LOOP       :
    171                      case ID_AL_SNS_HART_SHORT_CIRCUIT   :
    172                      case ID_AL_SNS_AIR_PURGE_FAILURE    :
    173                      case ID_AL_SNS_ERROR                :
    174                      case ID_AL_SNS_CONCAL_ERROR         :
    175                      case ID_AL_SNS_CONV_ERROR           :
    176                      case ID_AL_IO_COM_ERROR             :
    177                      case ID_AL_SC_COM_ERROR             :
    178                      case ID_AL_MODBUS_COM_ERROR         :
    179                      case ID_AL_MODBUS_INPUT_STATUS      :
    180                      case ID_AL_WATER_DETECT             :
    181                      case ID_AL_FUSE                     :
    182                      case ID_AL_AC_VOLTAGE               :
    183                      case ID_AL_LOW_VOLTAGE              :
    184                      case ID_AL_HI_VOLTAGE               :
    185                      case ID_AL_TWM_ELAPSED_TIME      :
    186                      case ID_AL_TWM_LOW_SPEED      :
    187                          AlarmTypeList.push_back(Key);
   \                     ??LoadConfigString_16:
   \   00000420   0610A0E1           MOV      R1,R6
   \   00000424   820F84E2           ADD      R0,R4,#+520
   \   00000428   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
   \   0000042C   230000EA           B        ??LoadConfigString_21
    188                          break;
    189                      case C_CTRL_PULSE_WIDTH             :
    190                          PulseTime = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_14:
   \   00000430   0020A0E3           MOV      R2,#+0
   \   00000434   0D10A0E1           MOV      R1,SP
   \   00000438   0500A0E1           MOV      R0,R5
   \   0000043C   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000440   C40184E5           STR      R0,[R4, #+452]
    191                          NoError = !ErrorLine;
   \   00000444   C2FFFFEA           B        ??LoadConfigString_22
    192                          break;
    193                      case C_BIT_OFFSET:
    194                          BitOffset = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_6:
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   0D10A0E1           MOV      R1,SP
   \   00000450   0500A0E1           MOV      R0,R5
   \   00000454   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000458   AC0184E5           STR      R0,[R4, #+428]
    195                          NoError = !ErrorLine;
   \   0000045C   00009DE5           LDR      R0,[SP, #+0]
   \   00000460   000050E3           CMP      R0,#+0
   \   00000464   1400001A           BNE      ??LoadConfigString_19
   \   00000468   A7FFFFEA           B        ??LoadConfigString_20
    196                          break;
    197                      case C_PRO_END_COMMON               :
    198                      case C_PRO_END                      :
    199                      case C_CTRL_END_COMMON              :
    200                      case C_CTRL_END                     :
    201                          NoError = false;
   \                     ??LoadConfigString_9:
   \   0000046C   0090A0E3           MOV      R9,#+0
    202                      case C_MODBUS_END                   :
    203                          Key = C_MODBUS_END;
   \                     ??LoadConfigString_15:
   \   00000470   0760A0E1           MOV      R6,R7
   \   00000474   110000EA           B        ??LoadConfigString_21
    204                          break;
    205                      default:
    206                          GiveConfigWarning("ModbusRegBitOut", InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_17:
   \   00000478   58108DE2           ADD      R1,SP,#+88
   \   0000047C   90008DE2           ADD      R0,SP,#+144
   \   00000480   ........           _BLF     ??string,??string??rA
   \   00000484   B8109FE5           LDR      R1,??LoadConfigString_26  ;; `?<Constant "ModbusRegBitOut">`
   \   00000488   74008DE2           ADD      R0,SP,#+116
   \   0000048C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000490   1C2095E5           LDR      R2,[R5, #+28]
   \   00000494   90108DE2           ADD      R1,SP,#+144
   \   00000498   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0110A0E3           MOV      R1,#+1
   \   000004A4   90008DE2           ADD      R0,SP,#+144
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004AC   0820A0E1           MOV      R2,R8
   \   000004B0   0110A0E3           MOV      R1,#+1
   \   000004B4   74008DE2           ADD      R0,SP,#+116
   \   000004B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    207                          NoError = false;
   \                     ??LoadConfigString_19:
   \   000004BC   0090A0E3           MOV      R9,#+0
    208                          break;
    209          
    210                      }
    211                  }while (NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END));
   \                     ??LoadConfigString_21:
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   58008DE2           ADD      R0,SP,#+88
   \   000004CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D0   000059E3           CMP      R9,#+0
   \   000004D4   1600000A           BEQ      ??LoadConfigString_27
   \   000004D8   00009DE5           LDR      R0,[SP, #+0]
   \   000004DC   010070E3           CMN      R0,#+1
   \   000004E0   07005611           CMPNE    R6,R7
   \   000004E4   D5FEFF1A           BNE      ??LoadConfigString_4
   \                     ??LoadConfigString_3:
   \   000004E8   7801D4E5           LDRB     R0,[R4, #+376]
   \   000004EC   000050E3           CMP      R0,#+0
   \   000004F0   0F00001A           BNE      ??LoadConfigString_27
    212              }
    213              if (NoError && !IsCreatedFromMultiple) {
    214                  ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, 0, isVolatile);
   \   000004F4   CD01D4E5           LDRB     R0,[R4, #+461]
   \   000004F8   01002DE9           PUSH     {R0}
   \   000004FC   0000A0E3           MOV      R0,#+0
   \   00000500   01002DE9           PUSH     {R0}
   \   00000504   700194E5           LDR      R0,[R4, #+368]
   \   00000508   01002DE9           PUSH     {R0}
   \   0000050C   A03094E5           LDR      R3,[R4, #+160]
   \   00000510   6C2194E5           LDR      R2,[R4, #+364]
   \   00000514   681194E5           LDR      R1,[R4, #+360]
   \   00000518   640194E5           LDR      R0,[R4, #+356]
   \   0000051C   FF2002E2           AND      R2,R2,#0xFF
   \   00000520   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000524   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000528   FF0000E2           AND      R0,R0,#0xFF
   \   0000052C   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   00000530   0CD08DE2           ADD      SP,SP,#+12
    215              }
    216              return (NoError);
   \                     ??LoadConfigString_27:
   \   00000534   0900A0E1           MOV      R0,R9
   \   00000538   ACD08DE2           ADD      SP,SP,#+172
   \   0000053C   F04FBDE8           POP      {R4-R11,LR}
   \   00000540   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_26:
   \   00000544   ........           DC32     `?<Constant "ModbusRegBitOut">`
    217          }
    218          
    219          //--------------------------------------------------------------------------- '
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          void ModbusRegBitOut::SetAlarmList(void) {
   \                     ??SetAlarmList:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000004   00429FE5           LDR      R4,??SetAlarmList_2  ;; ??AlarmSet
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   C01196E5           LDR      R1,[R6, #+448]
   \   00000010   D85196E5           LDR      R5,[R6, #+472]
   \   00000014   E80196E5           LDR      R0,[R6, #+488]
   \   00000018   009094E5           LDR      R9,[R4, #+0]
   \   0000001C   7C7FA0E3           MOV      R7,#+496
   \   00000020   828FA0E3           MOV      R8,#+520
   \   00000024   771041E2           SUB      R1,R1,#+119
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   030051E3           CMP      R1,#+3
   \   00000030   7300008A           BHI      ??SetAlarmList_3
   \   00000034   012F8FE2           ADR      R2,??SetAlarmList_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SetAlarmList_1:
   \   00000040   001E2247           DC8      +0,+30,+34,+71
    222              switch (AlarmAlternative) {
    223              case C_CTRL_ALT_ALL      :
    224                  {
    225                      set<AlarmBasic *>::iterator APtrIt;
    226                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
   \                     ??SetAlarmList_4:
   \   00000044   040059E1           CMP      R9,R4
   \   00000048   6D00000A           BEQ      ??SetAlarmList_3
    227                          AlarmList.insert(*APtrIt);
   \   0000004C   102099E5           LDR      R2,[R9, #+16]
   \   00000050   061087E0           ADD      R1,R7,R6
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??insert_1,??insert??rA_1
    228                      }
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000064   0090A0E1           MOV      R9,R0
   \   00000068   F5FFFFEA           B        ??SetAlarmList_4
    229                  }
    230                  break;
    231              case C_CTRL_ALT_AL_TYPES :
    232                  {
    233                      set<AlarmBasic *>::iterator APtrIt;
    234                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
    235                          for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    236                              if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_5:
   \   0000006C   100099E5           LDR      R0,[R9, #+16]
   \   00000070   061098E7           LDR      R1,[R8, +R6]
   \   00000074   A00090E5           LDR      R0,[R0, #+160]
   \   00000078   051191E7           LDR      R1,[R1, +R5, LSL #+2]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   0300001A           BNE      ??SetAlarmList_6
    237                                  AlarmList.insert(*APtrIt);
   \   00000084   102099E5           LDR      R2,[R9, #+16]
   \   00000088   061087E0           ADD      R1,R7,R6
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??insert_1,??insert??rA_1
    238                              }
    239                          }
   \                     ??SetAlarmList_6:
   \   00000094   015085E2           ADD      R5,R5,#+1
   \                     ??SetAlarmList_7:
   \   00000098   060088E0           ADD      R0,R8,R6
   \   0000009C   041090E5           LDR      R1,[R0, #+4]
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   000041E0           SUB      R0,R1,R0
   \   000000A8   200155E1           CMP      R5,R0, LSR #+2
   \   000000AC   EEFFFF3A           BCC      ??SetAlarmList_5
   \   000000B0   0900A0E1           MOV      R0,R9
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000B8   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_8:
   \   000000BC   040059E1           CMP      R9,R4
   \   000000C0   4F00000A           BEQ      ??SetAlarmList_3
   \   000000C4   0050A0E3           MOV      R5,#+0
   \   000000C8   F2FFFFEA           B        ??SetAlarmList_7
    240                      }
    241                  }
    242                  break;
    243              case C_CTRL_ALT_PRO_LIST :
    244                  if (!PROList.empty()) {
   \                     ??SetAlarmList_9:
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   4B00000A           BEQ      ??SetAlarmList_3
    245                      set<PRogramObject *>::iterator pBIt;
    246                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   000000D4   020000EA           B        ??SetAlarmList_10
   \                     ??SetAlarmList_11:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000E0   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_10:
   \   000000E4   760F86E2           ADD      R0,R6,#+472
   \   000000E8   000055E1           CMP      R5,R0
   \   000000EC   4400000A           BEQ      ??SetAlarmList_3
    247                          PRogramObject *TElement = (PRogramObject *)*pBIt;
   \   000000F0   104095E5           LDR      R4,[R5, #+16]
    248                          set<AlarmBasic *>::iterator APtrIt;
    249                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
   \   000000F4   FC9094E5           LDR      R9,[R4, #+252]
   \   000000F8   130000EA           B        ??SetAlarmList_12
    250                              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    251                                  if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_13:
   \   000000FC   100099E5           LDR      R0,[R9, #+16]
   \   00000100   061098E7           LDR      R1,[R8, +R6]
   \   00000104   A00090E5           LDR      R0,[R0, #+160]
   \   00000108   0A1191E7           LDR      R1,[R1, +R10, LSL #+2]
   \   0000010C   010050E1           CMP      R0,R1
   \   00000110   0300001A           BNE      ??SetAlarmList_14
    252                                      AlarmList.insert(*APtrIt);
   \   00000114   102099E5           LDR      R2,[R9, #+16]
   \   00000118   061087E0           ADD      R1,R7,R6
   \   0000011C   0D00A0E1           MOV      R0,SP
   \   00000120   ........           _BLF     ??insert_1,??insert??rA_1
    253                                  }
    254                              }
   \                     ??SetAlarmList_14:
   \   00000124   01A08AE2           ADD      R10,R10,#+1
   \                     ??SetAlarmList_15:
   \   00000128   060088E0           ADD      R0,R8,R6
   \   0000012C   041090E5           LDR      R1,[R0, #+4]
   \   00000130   000090E5           LDR      R0,[R0, #+0]
   \   00000134   000041E0           SUB      R0,R1,R0
   \   00000138   20015AE1           CMP      R10,R0, LSR #+2
   \   0000013C   EEFFFF3A           BCC      ??SetAlarmList_13
   \   00000140   0900A0E1           MOV      R0,R9
   \   00000144   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000148   0090A0E1           MOV      R9,R0
   \                     ??SetAlarmList_12:
   \   0000014C   FC0084E2           ADD      R0,R4,#+252
   \   00000150   000059E1           CMP      R9,R0
   \   00000154   DFFFFF0A           BEQ      ??SetAlarmList_11
   \   00000158   00A0A0E3           MOV      R10,#+0
   \   0000015C   F1FFFFEA           B        ??SetAlarmList_15
    255                          }
    256                      }
    257                  }
    258                  break;
    259              case C_CTRL_ALT_TYPE_PRO :
    260                  if (!PROList.empty()) {
   \                     ??SetAlarmList_16:
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   2600000A           BEQ      ??SetAlarmList_3
    261                      set<PRogramObject *>::iterator pBIt;
    262                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000168   200000EA           B        ??SetAlarmList_17
    263                          PRogramObject *TElement = (PRogramObject *)*pBIt;
    264                          set<AlarmBasic *>::iterator APtrIt;
    265                          for (APtrIt = TElement->CompleteAlarmInfoList.begin(); APtrIt != TElement->CompleteAlarmInfoList.end(); APtrIt++) {
    266                              AlarmBasic *AlPtr = *APtrIt;
   \                     ??SetAlarmList_18:
   \   0000016C   10A094E5           LDR      R10,[R4, #+16]
    267                              if (AlPtr) {
   \   00000170   00005AE3           CMP      R10,#+0
   \   00000174   1400000A           BEQ      ??SetAlarmList_19
    268                                  bool Found = false;
   \   00000178   0000A0E3           MOV      R0,#+0
    269                                  for (unsigned j = 0; !Found && j < AlarmTypeList.size(); j++) {
   \   0000017C   00B0A0E3           MOV      R11,#+0
   \                     ??SetAlarmList_20:
   \   00000180   061088E0           ADD      R1,R8,R6
   \   00000184   042091E5           LDR      R2,[R1, #+4]
   \   00000188   001091E5           LDR      R1,[R1, #+0]
   \   0000018C   011042E0           SUB      R1,R2,R1
   \   00000190   21015BE1           CMP      R11,R1, LSR #+2
   \   00000194   0C00002A           BCS      ??SetAlarmList_19
    270                                      if (AlPtr->Type == AlarmTypeList[j]) {
   \   00000198   062098E7           LDR      R2,[R8, +R6]
   \   0000019C   A0109AE5           LDR      R1,[R10, #+160]
   \   000001A0   0B2192E7           LDR      R2,[R2, +R11, LSL #+2]
   \   000001A4   020051E1           CMP      R1,R2
   \   000001A8   0400001A           BNE      ??SetAlarmList_21
    271                                          AlarmList.insert(AlPtr);
   \   000001AC   0A20A0E1           MOV      R2,R10
   \   000001B0   061087E0           ADD      R1,R7,R6
   \   000001B4   0D00A0E1           MOV      R0,SP
   \   000001B8   ........           _BLF     ??insert_1,??insert??rA_1
    272                                          Found = true;
   \   000001BC   0100A0E3           MOV      R0,#+1
    273                                      }
    274                                  }
   \                     ??SetAlarmList_21:
   \   000001C0   01B08BE2           ADD      R11,R11,#+1
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   ECFFFF0A           BEQ      ??SetAlarmList_20
    275                              }
    276                          }
   \                     ??SetAlarmList_19:
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001D4   0040A0E1           MOV      R4,R0
   \                     ??SetAlarmList_22:
   \   000001D8   FC0089E2           ADD      R0,R9,#+252
   \   000001DC   000054E1           CMP      R4,R0
   \   000001E0   E1FFFF1A           BNE      ??SetAlarmList_18
   \   000001E4   0500A0E1           MOV      R0,R5
   \   000001E8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001EC   0050A0E1           MOV      R5,R0
   \                     ??SetAlarmList_17:
   \   000001F0   760F86E2           ADD      R0,R6,#+472
   \   000001F4   000055E1           CMP      R5,R0
   \   000001F8   10909515           LDRNE    R9,[R5, #+16]
   \   000001FC   FC409915           LDRNE    R4,[R9, #+252]
   \   00000200   F4FFFF1A           BNE      ??SetAlarmList_22
    277                      }
    278                  }
    279                  break;
    280              }
    281          }
   \                     ??SetAlarmList_3:
   \   00000204   F34FBDE8           POP      {R0,R1,R4-R11,LR}
   \   00000208   1EFF2FE1           BX       LR               ;; return
   \                     ??SetAlarmList_2:
   \   0000020C   ........           DC32     ??AlarmSet
    282          
    283          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    284          void ModbusRegBitOut::SetProList(void) {
   \                     ??SetProList:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040A0E1           MOV      R4,R0
    285              if (!IdNumbers.empty()) {
   \   0000000C   855FA0E3           MOV      R5,#+532
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000041E0           SUB      R0,R1,R0
   \   00000020   2001B0E1           LSRS     R0,R0,#+2
   \   00000024   3F00000A           BEQ      ??SetProList_1
    286                  PROList.clear();
   \   00000028   766FA0E3           MOV      R6,#+472
   \   0000002C   040086E0           ADD      R0,R6,R4
   \   00000030   ........           _BLF     ??clear,??clear??rA
    287                  for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   1B0000EA           B        ??SetProList_2
    288                      PRogramObject *PROPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[i]);
    289                      if (PROPtr) {
    290                          PROList.insert(PROPtr);
    291                      } else {
    292                          AnsiString InfoStr;
    293                          if (IsCreatedFromMultiple) {
    294                              InfoStr.cat_sprintf("Created by ModbusMultiple (Line number %i): ModbusRegBitOut RefIDNumber %i (0x%0x) is incorrect", LineNumber, IdNumbers[i], IdNumbers[i]);
    295                          } else {
    296                              InfoStr.cat_sprintf("ModbusRegBitOut RefIDNumber %i (0x%0x) is incorrect. Line Number %i", IdNumbers[i], IdNumbers[i], LineNumber);
   \                     ??SetProList_3:
   \   0000003C   041094E5           LDR      R1,[R4, #+4]
   \   00000040   602082E2           ADD      R2,R2,#+96
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   001090E5           LDR      R1,[R0, #+0]
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   003090E5           LDR      R3,[R0, #+0]
   \                     ??SetProList_4:
   \   00000054   40108DE2           ADD      R1,SP,#+64
   \   00000058   24008DE2           ADD      R0,SP,#+36
   \   0000005C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   40008DE2           ADD      R0,SP,#+64
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   08D08DE2           ADD      SP,SP,#+8
    297                          }
    298                          GiveConfigWarning(InfoStr);
   \   00000074   1C108DE2           ADD      R1,SP,#+28
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     ??string,??string??rA
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
    299                      }
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   1C008DE2           ADD      R0,SP,#+28
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SetProList_5:
   \   000000A8   017087E2           ADD      R7,R7,#+1
   \                     ??SetProList_2:
   \   000000AC   040085E0           ADD      R0,R5,R4
   \   000000B0   041090E5           LDR      R1,[R0, #+4]
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000041E0           SUB      R0,R1,R0
   \   000000BC   200157E1           CMP      R7,R0, LSR #+2
   \   000000C0   1800002A           BCS      ??SetProList_1
   \   000000C4   040095E7           LDR      R0,[R5, +R4]
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   070190E7           LDR      R0,[R0, +R7, LSL #+2]
   \   000000D0   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0400000A           BEQ      ??SetProList_6
   \   000000DC   0020A0E1           MOV      R2,R0
   \   000000E0   041086E0           ADD      R1,R6,R4
   \   000000E4   54008DE2           ADD      R0,SP,#+84
   \   000000E8   ........           _BLF     ??insert_2,??insert??rA_2
   \   000000EC   EDFFFFEA           B        ??SetProList_5
   \                     ??SetProList_6:
   \   000000F0   1C008DE2           ADD      R0,SP,#+28
   \   000000F4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000F8   7801D4E5           LDRB     R0,[R4, #+376]
   \   000000FC   2C209FE5           LDR      R2,??SetProList_7  ;; `?<Constant "Created by ModbusMult...">`
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   040095E7           LDR      R0,[R5, +R4]
   \   00000108   070180E0           ADD      R0,R0,R7, LSL #+2
   \   0000010C   CAFFFF0A           BEQ      ??SetProList_3
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   043094E5           LDR      R3,[R4, #+4]
   \   00000124   CAFFFFEA           B        ??SetProList_4
    300                  }
    301              }
    302          }
   \                     ??SetProList_1:
   \   00000128   5CD08DE2           ADD      SP,SP,#+92
   \   0000012C   ........           B        ?Subroutine16
   \                     ??SetProList_7:
   \   00000130   ........           DC32     `?<Constant "Created by ModbusMult...">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    303          //---------------------------------------------------------------------------
    304          

   \                                 In segment CODE, align 4, keep-with-next
    305          int ModbusRegBitOut::GetOutputVal(void) {
   \                     ??GetOutputVal:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   0040A0E1           MOV      R4,R0
    306              int AlStat = 0;
    307              if (!AlarmList.empty()) {
   \   0000000C   000294E5           LDR      R0,[R4, #+512]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   5100000A           BEQ      ??GetOutputVal_2
    308                  switch (DeactivateBy) {
   \   0000001C   BC1194E5           LDR      R1,[R4, #+444]
   \   00000020   7C0FA0E3           MOV      R0,#+496
   \   00000024   B31041E2           SUB      R1,R1,#+179
   \   00000028   701E41E2           SUB      R1,R1,#+1792
   \   0000002C   040051E3           CMP      R1,#+4
   \   00000030   4B00008A           BHI      ??GetOutputVal_2
   \   00000034   012F8FE2           ADR      R2,??GetOutputVal_1
   \   00000038   0120D2E7           LDRB     R2,[R2, R1]
   \   0000003C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??GetOutputVal_1:
   \   00000040   01380F1E           DC8      +1,+56,+15,+30
   \   00000044   2B000000           DC8      +43,+0,+0,+0
    309                  case C_CTRL_DE_ACKNOW  :
    310                      {
    311                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    312                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_3:
   \   00000048   08108DE2           ADD      R1,SP,#+8
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   14108DE2           ADD      R1,SP,#+20
   \   00000054   02002DE9           PUSH     {R1}
   \   00000058   14108DE2           ADD      R1,SP,#+20
   \   0000005C   02002DE9           PUSH     {R1}
   \   00000060   20308DE2           ADD      R3,SP,#+32
   \   00000064   10208DE2           ADD      R2,SP,#+16
   \   00000068   0C108DE2           ADD      R1,SP,#+12
   \   0000006C   040080E0           ADD      R0,R0,R4
   \   00000070   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    313                          AlStat = ActiveAl;
   \   00000074   0C509DE5           LDR      R5,[SP, #+12]
   \                     ??GetOutputVal_4:
   \   00000078   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000007C   380000EA           B        ??GetOutputVal_2
    314                      }
    315                      break;
    316                  case C_CTRL_DE_IDLE    :
    317                      {
    318                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    319                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_5:
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   02002DE9           PUSH     {R1}
   \   00000088   18108DE2           ADD      R1,SP,#+24
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   14108DE2           ADD      R1,SP,#+20
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   1C308DE2           ADD      R3,SP,#+28
   \   0000009C   14208DE2           ADD      R2,SP,#+20
   \   000000A0   0C108DE2           ADD      R1,SP,#+12
   \   000000A4   040080E0           ADD      R0,R0,R4
   \   000000A8   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    320                          AlStat = ActiveAl + AcknowledgedAl;
   \   000000AC   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B0   14109DE5           LDR      R1,[SP, #+20]
   \   000000B4   005081E0           ADD      R5,R1,R0
   \   000000B8   EEFFFFEA           B        ??GetOutputVal_4
    321                      }
    322                      break;
    323                  case C_CTRL_DE_VALUE   :
    324                      {
    325                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    326                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_6:
   \   000000BC   10108DE2           ADD      R1,SP,#+16
   \   000000C0   02002DE9           PUSH     {R1}
   \   000000C4   10108DE2           ADD      R1,SP,#+16
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   1C108DE2           ADD      R1,SP,#+28
   \   000000D0   02002DE9           PUSH     {R1}
   \   000000D4   10308DE2           ADD      R3,SP,#+16
   \   000000D8   14208DE2           ADD      R2,SP,#+20
   \   000000DC   0C108DE2           ADD      R1,SP,#+12
   \   000000E0   040080E0           ADD      R0,R0,R4
   \   000000E4   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    327                          AlStat = OutsideLim;
   \   000000E8   18509DE5           LDR      R5,[SP, #+24]
   \   000000EC   E1FFFFEA           B        ??GetOutputVal_4
    328                      }
    329                      break;
    330                  case C_CTRL_DE_VAL_ENABLED:
    331                      {
    332                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    333                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_7:
   \   000000F0   04108DE2           ADD      R1,SP,#+4
   \   000000F4   02002DE9           PUSH     {R1}
   \   000000F8   18108DE2           ADD      R1,SP,#+24
   \   000000FC   02002DE9           PUSH     {R1}
   \   00000100   18108DE2           ADD      R1,SP,#+24
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   14308DE2           ADD      R3,SP,#+20
   \   0000010C   18208DE2           ADD      R2,SP,#+24
   \   00000110   0C108DE2           ADD      R1,SP,#+12
   \   00000114   040080E0           ADD      R0,R0,R4
   \   00000118   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    334                          AlStat = OutsideLimEnabled;
   \   0000011C   10509DE5           LDR      R5,[SP, #+16]
   \   00000120   D4FFFFEA           B        ??GetOutputVal_4
    335                      }
    336                      break;
    337                  case C_CTRL_DE_SILENCE:
    338                      {
    339                          int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled;
    340                          GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_8:
   \   00000124   14108DE2           ADD      R1,SP,#+20
   \   00000128   02002DE9           PUSH     {R1}
   \   0000012C   10108DE2           ADD      R1,SP,#+16
   \   00000130   02002DE9           PUSH     {R1}
   \   00000134   10108DE2           ADD      R1,SP,#+16
   \   00000138   02002DE9           PUSH     {R1}
   \   0000013C   10308DE2           ADD      R3,SP,#+16
   \   00000140   0C208DE2           ADD      R2,SP,#+12
   \   00000144   1C108DE2           ADD      R1,SP,#+28
   \   00000148   040080E0           ADD      R0,R0,R4
   \   0000014C   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    341                          if (AlarmBasic::AlarmSilence) {
   \   00000150   3C009FE5           LDR      R0,??GetOutputVal_9  ;; ??AlarmSilence
   \   00000154   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000158   0CD08DE2           ADD      SP,SP,#+12
   \   0000015C   000050E3           CMP      R0,#+0
    342                              AlStat = 0;
    343                          } else {
    344                              AlStat = ActiveAl;
   \   00000160   10509D05           LDREQ    R5,[SP, #+16]
    345                          }
    346                      }
    347                      break;
    348                  }
    349              } else {
    350                  switch (DeactivateBy) {
    351                  case C_CTRL_DE_IDLE         :
    352                  case C_CTRL_DE_VALUE        :
    353                  case C_CTRL_DE_ACKNOW       :
    354                  case C_CTRL_DE_SILENCE      :
    355                  case C_CTRL_DE_VAL_ENABLED  :
    356                      break;
    357                  }
    358              }
    359              switch (NormalState) {
   \                     ??GetOutputVal_2:
   \   00000164   B80194E5           LDR      R0,[R4, #+440]
   \   00000168   9F10A0E3           MOV      R1,#+159
   \   0000016C   701E81E3           ORR      R1,R1,#0x700
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   0200001A           BNE      ??GetOutputVal_10
    360              case C_CTRL_NS_UNPOWERED:
    361                  break;
    362              case C_CTRL_NS_POWERED  :
    363                  AlStat = !AlStat;
   \   00000178   000055E3           CMP      R5,#+0
   \   0000017C   0150A003           MOVEQ    R5,#+1
   \   00000180   0050A013           MOVNE    R5,#+0
    364                  break;
    365              }
    366              return AlStat;
   \                     ??GetOutputVal_10:
   \   00000184   0500A0E1           MOV      R0,R5
   \   00000188   18D08DE2           ADD      SP,SP,#+24
   \   0000018C   3040BDE8           POP      {R4,R5,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
   \                     ??GetOutputVal_9:
   \   00000194   ........           DC32     ??AlarmSilence
    367          }
    368          
    369          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    370          void ModbusRegBitOut::Update(void) {
   \                     ??Update:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    371              ModbusUnit *tmpPtr = FindUnit();
   \   00000008   ........           _BLF     ??FindUnit,??FindUnit??rA
    372              U16 alState  = GetOutputVal();
   \   0000000C   A41094E5           LDR      R1,[R4, #+164]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   A41091E5           LDR      R1,[R1, #+164]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   0FE0A0E1           MOV      LR,PC
   \   00000020   11FF2FE1           BX       R1
   \   00000024   0068A0E1           MOV      R6,R0, LSL #+16
   \   00000028   2668A0E1           MOV      R6,R6, LSR #+16
    373              if (tmpPtr) {
   \   0000002C   000055E3           CMP      R5,#+0
   \   00000030   1B00000A           BEQ      ??Update_1
    374                  U16 tmpReg = 0;
    375                  if (isVolatile) {
   \   00000034   CD01D4E5           LDRB     R0,[R4, #+461]
   \   00000038   5C7FA0E3           MOV      R7,#+368
   \   0000003C   041097E7           LDR      R1,[R7, +R4]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   0100000A           BEQ      ??Update_2
    376                      tmpReg = tmpPtr->GetRegister(Channel);
   \   00000050   ........           _BLF     ??GetRegister,??GetRegister??rA
   \   00000054   000000EA           B        ??Update_3
    377                  } else {
    378                      tmpReg = tmpPtr->GetOutputRegister(Channel);
   \                     ??Update_2:
   \   00000058   ........           _BLF     ??GetOutputRegister,??GetOutputRegister??rA
    379                  }
    380                  U16 OrgReg = tmpReg;
    381                  U16 MyBit     = 1 << BitOffset;
   \                     ??Update_3:
   \   0000005C   AC3194E5           LDR      R3,[R4, #+428]
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   0120A0E3           MOV      R2,#+1
   \   00000068   1223A0E1           LSL      R2,R2,R3
   \   0000006C   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000070   2228A0E1           MOV      R2,R2, LSR #+16
    382                  if (alState) {
   \   00000074   000056E3           CMP      R6,#+0
    383                      tmpReg |= MyBit;
   \   00000078   00208211           ORRNE    R2,R2,R0
    384                  } else {
    385                      tmpReg &= ~MyBit;
   \   0000007C   0220C001           BICEQ    R2,R0,R2
   \   00000080   0228A001           MOVEQ    R2,R2, LSL #+16
   \   00000084   2228A001           MOVEQ    R2,R2, LSR #+16
    386                  }
    387                  if (tmpReg != OrgReg) {
   \   00000088   0208A0E1           MOV      R0,R2, LSL #+16
   \   0000008C   200851E1           CMP      R1,R0, LSR #+16
   \   00000090   0300000A           BEQ      ??Update_1
    388                      tmpPtr->SetRegister(Channel, tmpReg);
   \   00000094   041097E7           LDR      R1,[R7, +R4]
   \   00000098   0030A0E3           MOV      R3,#+0
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     ??SetRegister,??SetRegister??rA
    389                  }
    390              }
    391          
    392          }
   \                     ??Update_1:
   \   000000A4                      REQUIRE ?Subroutine16
   \   000000A4                      ;; // Fall through to label ?Subroutine16
    393          

   \                                 In segment CODE, align 4, keep-with-next
    394          ModbusRegBitOut& ModbusRegBitOut::operator = (ModbusRegBitOut Src) {
   \                     `??operator=`:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    395              Name          = Src.Name;
   \   00000008   ........           LDR      R0,??DataTable5  ;; ??npos
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0630A0E1           MOV      R3,R6
   \   0000001C   441085E2           ADD      R1,R5,#+68
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??assign,??assign??rA
    396              Description   = Src.Description;
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   7C1085E2           ADD      R1,R5,#+124
   \   00000034   7C0084E2           ADD      R0,R4,#+124
   \   00000038   ........           _BLF     ??assign,??assign??rA
    397          
    398              IPAddress     = Src.IPAddress;
   \   0000003C   520FA0E3           MOV      R0,#+328
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   051080E0           ADD      R1,R0,R5
   \   0000004C   040080E0           ADD      R0,R0,R4
   \   00000050   ........           _BLF     ??assign,??assign??rA
    399              TCUAddress    = Src.TCUAddress;
   \   00000054   590FA0E3           MOV      R0,#+356
   \   00000058   051090E7           LDR      R1,[R0, +R5]
   \   0000005C   041080E7           STR      R1,[R0, +R4]
    400              TCUPortNo     = Src.TCUPortNo;
   \   00000060   5A1FA0E3           MOV      R1,#+360
   \   00000064   052091E7           LDR      R2,[R1, +R5]
   \   00000068   042081E7           STR      R2,[R1, +R4]
    401              Address       = Src.Address;
   \   0000006C   5B1FA0E3           MOV      R1,#+364
   \   00000070   052091E7           LDR      R2,[R1, +R5]
   \   00000074   042081E7           STR      R2,[R1, +R4]
    402              Channel       = Src.Channel;
   \   00000078   5C1FA0E3           MOV      R1,#+368
   \   0000007C   052091E7           LDR      R2,[R1, +R5]
   \   00000080   042081E7           STR      R2,[R1, +R4]
    403          
    404          
    405              MinRange      = Src.MinRange;
   \   00000084   5F1FA0E3           MOV      R1,#+380
   \   00000088   052091E7           LDR      R2,[R1, +R5]
   \   0000008C   042081E7           STR      R2,[R1, +R4]
    406              MaxRange      = Src.MaxRange;
   \   00000090   601FA0E3           MOV      R1,#+384
   \   00000094   052091E7           LDR      R2,[R1, +R5]
   \   00000098   042081E7           STR      R2,[R1, +R4]
    407              RegMax        = Src.RegMax;
   \   0000009C   6A1FA0E3           MOV      R1,#+424
   \   000000A0   052091E7           LDR      R2,[R1, +R5]
   \   000000A4   042081E7           STR      R2,[R1, +R4]
    408              ValueKey      = Src.ValueKey;
   \   000000A8   692FA0E3           MOV      R2,#+420
   \   000000AC   053092E7           LDR      R3,[R2, +R5]
   \   000000B0   043082E7           STR      R3,[R2, +R4]
    409              RefObjectId   = Src.RefObjectId;
   \   000000B4   672FA0E3           MOV      R2,#+412
   \   000000B8   053092E7           LDR      R3,[R2, +R5]
   \   000000BC   043082E7           STR      R3,[R2, +R4]
    410          
    411              Scale             = Src.Scale;
   \   000000C0   622FA0E3           MOV      R2,#+392
   \   000000C4   053092E7           LDR      R3,[R2, +R5]
   \   000000C8   043082E7           STR      R3,[R2, +R4]
    412              Offset            = Src.Offset;
   \   000000CC   632FA0E3           MOV      R2,#+396
   \   000000D0   053092E7           LDR      R3,[R2, +R5]
   \   000000D4   043082E7           STR      R3,[R2, +R4]
    413              HasSign           = Src.HasSign;
   \   000000D8   612FA0E3           MOV      R2,#+388
   \   000000DC   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000E0   0430C2E7           STRB     R3,[R2, +R4]
    414              HasDecimalScaling = Src.HasDecimalScaling;
   \   000000E4   662FA0E3           MOV      R2,#+408
   \   000000E8   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000EC   0430C2E7           STRB     R3,[R2, +R4]
    415              ModbusDataFormat   = Src.ModbusDataFormat;
   \   000000F0   352080E2           ADD      R2,R0,#+53
   \   000000F4   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000F8   0430C2E7           STRB     R3,[R2, +R4]
    416              HasRange          = Src.HasRange;
   \   000000FC   362080E2           ADD      R2,R0,#+54
   \   00000100   0530D2E7           LDRB     R3,[R2, +R5]
   \   00000104   0430C2E7           STRB     R3,[R2, +R4]
    417              DecimalPoint      = Src.DecimalPoint;
   \   00000108   652FA0E3           MOV      R2,#+404
   \   0000010C   053092E7           LDR      R3,[R2, +R5]
   \   00000110   043082E7           STR      R3,[R2, +R4]
    418              DecimalScaling    = Src.DecimalScaling;
   \   00000114   642FA0E3           MOV      R2,#+400
   \   00000118   053092E7           LDR      R3,[R2, +R5]
   \   0000011C   043082E7           STR      R3,[R2, +R4]
    419          
    420              BitOffset         = Src.BitOffset;
   \   00000120   AC2195E5           LDR      R2,[R5, #+428]
   \   00000124   AC2184E5           STR      R2,[R4, #+428]
    421              AlarmDelay        = Src.AlarmDelay;
   \   00000128   B42195E5           LDR      R2,[R5, #+436]
   \   0000012C   B42184E5           STR      R2,[R4, #+436]
    422              NormalState       = Src.NormalState;
   \   00000130   B82195E5           LDR      R2,[R5, #+440]
   \   00000134   B82184E5           STR      R2,[R4, #+440]
    423              RegMax            = Src.RegMax;
   \   00000138   052091E7           LDR      R2,[R1, +R5]
   \   0000013C   042081E7           STR      R2,[R1, +R4]
    424              DefaultId         = Src.DefaultId;
   \   00000140   CC11D5E5           LDRB     R1,[R5, #+460]
   \   00000144   CC11C4E5           STRB     R1,[R4, #+460]
    425              //IdNumbers         = Src.IdNumbers; // Set from UpdateFromMultiple
    426              if ((TCUAddress == CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU)) {
   \   00000148   34109FE5           LDR      R1,`??operator=_1`  ;; CurrentDeviceAddress
   \   0000014C   040090E7           LDR      R0,[R0, +R4]
   \   00000150   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000154   010050E1           CMP      R0,R1
   \   00000158   28009F05           LDREQ    R0,`??operator=_1`+0x4  ;; CurrentDeviceId
   \   0000015C   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   00000160   20005003           CMPEQ    R0,#+32
   \   00000164   0300001A           BNE      `??operator=_2`
    427                  MyModbusSet.insert(this);
   \   00000168   1C109FE5           LDR      R1,`??operator=_1`+0x8  ;; ??MyModbusSet
   \   0000016C   0420A0E1           MOV      R2,R4
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           _BLF     ??insert_3,??insert??rA_3
    428              }
    429          
    430              return *this;
   \                     `??operator=_2`:
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000180   1EFF2FE1           BX       LR               ;; return
   \                     `??operator=_1`:
   \   00000184   ........           DC32     CurrentDeviceAddress
   \   00000188   ........           DC32     CurrentDeviceId
   \   0000018C   ........           DC32     ??MyModbusSet
    431          }
    432          

   \                                 In segment CODE, align 4, keep-with-next
    433          void ModbusRegBitOut::UpdateFromMultiple(unsigned pIdNumber, int pChannel) {
   \                     ??UpdateFromMultiple:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    434              Channel +=  pChannel;
   \   00000008   5C5FA0E3           MOV      R5,#+368
   \   0000000C   040095E7           LDR      R0,[R5, +R4]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   000082E0           ADD      R0,R2,R0
   \   00000018   040085E7           STR      R0,[R5, +R4]
    435              IdNumbers.clear();
   \   0000001C   857FA0E3           MOV      R7,#+532
   \   00000020   048087E0           ADD      R8,R7,R4
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   ........           _BLF     ??_Zero,??_Zero??rA
    436              IdNumbers.push_back(pIdNumber);  // Can only support one reference IDNumber currently
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   040087E0           ADD      R0,R7,R4
   \   0000003C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    437              ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, 0, isVolatile);
   \   00000040   CD01D4E5           LDRB     R0,[R4, #+461]
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   040095E7           LDR      R0,[R5, +R4]
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   A03094E5           LDR      R3,[R4, #+160]
   \   0000005C   6C2194E5           LDR      R2,[R4, #+364]
   \   00000060   681194E5           LDR      R1,[R4, #+360]
   \   00000064   640194E5           LDR      R0,[R4, #+356]
   \   00000068   FF2002E2           AND      R2,R2,#0xFF
   \   0000006C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000070   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000074   FF0000E2           AND      R0,R0,#0xFF
   \   00000078   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    438          }
   \   0000007C   F741BDE8           POP      {R0-R2,R4-R8,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
    439          

   \                                 In segment CODE, align 4, keep-with-next
    440          int ModbusRegBitOut::GetObjectId(void) {
    441              if (!IdNumbers.empty()) {
   \                     ??GetObjectId:
   \   00000000   851FA0E3           MOV      R1,#+532
   \   00000004   002081E0           ADD      R2,R1,R0
   \   00000008   043092E5           LDR      R3,[R2, #+4]
   \   0000000C   002092E5           LDR      R2,[R2, #+0]
   \   00000010   022043E0           SUB      R2,R3,R2
   \   00000014   2221B0E1           LSRS     R2,R2,#+2
    442                  return IdNumbers[0];
    443              } else {
    444                  return 0;
   \   00000018   0000A003           MOVEQ    R0,#+0
   \   0000001C   1EFF2F01           BXEQ     LR
    445              }
   \   00000020   000091E7           LDR      R0,[R1, +R0]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   1EFF2FE1           BX       LR               ;; return
    446          }
    447          

   \                                 In segment CODE, align 4, keep-with-next
    448          AnsiString ModbusRegBitOut::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0140A0E1           MOV      R4,R1
    449              return "Bit offset:" + AnsiString(BitOffset);
   \   0000000C   AC1190E5           LDR      R1,[R0, #+428]
   \   00000010   1C008DE2           ADD      R0,SP,#+28
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000018   ........           LDR      R1,??Subroutine15_0  ;; `?<Constant "Bit offset:">`
   \   0000001C   0020A0E1           MOV      R2,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??AnsiString_4,??AnsiString??rA_4
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   1C008DE2           ADD      R0,SP,#+28
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   38D08DE2           ADD      SP,SP,#+56
   \   00000058                      REQUIRE ?Subroutine15
   \   00000058                      ;; // Fall through to label ?Subroutine15
    450          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine15_0:
   \   00000008   ........           DC32     `?<Constant "Bit offset:">`
    451          
    452          

   \                                 In segment CODE, align 4, keep-with-next
    453          AnsiString ModbusRegBitOut::GetValueKey(void) {
   \                     ??GetValueKey:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    454              return KeyWord(AlarmAlternative);
   \   00000008   C01190E5           LDR      R1,[R0, #+448]
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000014   0040BDE8           POP      {LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
    455          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0X	">`:
   \   00000000   307825305809       DC8 "0x%0X      "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ModbusRegBitOut">`:
   \   00000000   4D6F64627573       DC8 "ModbusRegBitOut"
   \              526567426974
   \              4F757400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   6520284C696E       DC8 65H, 20H, 28H, 4CH, 69H, 6EH, 65H, 20H
   \              6520        
   \   00000020   6E756D626572       DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000028   69293A204D6F       DC8 69H, 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H
   \              6462        
   \   00000030   757352656742       DC8 75H, 73H, 52H, 65H, 67H, 42H, 69H, 74H
   \              6974        
   \   00000038   4F7574205265       DC8 4FH, 75H, 74H, 20H, 52H, 65H, 66H, 49H
   \              6649        
   \   00000040   444E756D6265       DC8 44H, 4EH, 75H, 6DH, 62H, 65H, 72H, 20H
   \              7220        
   \   00000048   256920283078       DC8 25H, 69H, 20H, 28H, 30H, 78H, 25H, 30H
   \              2530        
   \   00000050   782920697320       DC8 78H, 29H, 20H, 69H, 73H, 20H, 69H, 6EH
   \              696E        
   \   00000058   636F72726563       DC8 63H, 6FH, 72H, 72H, 65H, 63H, 74H, 0
   \              7400        
   \   00000060   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 52H, 65H
   \              5265        
   \   00000068   674269744F75       DC8 67H, 42H, 69H, 74H, 4FH, 75H, 74H, 20H
   \              7420        
   \   00000070   52656649444E       DC8 52H, 65H, 66H, 49H, 44H, 4EH, 75H, 6DH
   \              756D        
   \   00000078   626572202569       DC8 62H, 65H, 72H, 20H, 25H, 69H, 20H, 28H
   \              2028        
   \   00000080   307825307829       DC8 30H, 78H, 25H, 30H, 78H, 29H, 20H, 69H
   \              2069        
   \   00000088   7320696E636F       DC8 73H, 20H, 69H, 6EH, 63H, 6FH, 72H, 72H
   \              7272        
   \   00000090   6563742E204C       DC8 65H, 63H, 74H, 2EH, 20H, 4CH, 69H, 6EH
   \              696E        
   \   00000098   65204E756D62       DC8 65H, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              6572        
   \   000000A0   20256900           DC8 20H, 25H, 69H, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Bit offset:">`:
   \   00000000   426974206F66       DC8 "Bit offset:"
   \              667365743A00

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegBitOut &ModbusRegBitOut::new ModbusRegBitOut(bool)
   \                     `??new ModbusRegBitOut`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   880FA0E3           MOV      R0,#+544
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusRegBitOut_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusRegBitOut
   \                     `??new ModbusRegBitOut_1`:
   \   00000020   ........           B        ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos
    456          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusRegBitOut::GetObjectId()     0
     ModbusRegBitOut::GetOutputVal()
                                       48
     ModbusRegBitOut::GetRegisterType()
                                       64
     ModbusRegBitOut::GetValueKey()     4
     ModbusRegBitOut::LoadConfigString(TSNConfigString &)
                                      220
     ModbusRegBitOut::MakeConfigString(int)
                                      788
     ModbusRegBitOut::ModbusRegBitOut(bool)
                                       32
     ModbusRegBitOut::SetAlarmList()
                                       44
     ModbusRegBitOut::SetProList()    120
     ModbusRegBitOut::Update()         20
     ModbusRegBitOut::UpdateFromMultiple(unsigned int, int)
                                       36
     ModbusRegBitOut::new ModbusRegBitOut(bool)
                                        8
     ModbusRegBitOut::operator=(ModbusRegBitOut)
                                       24
     ModbusRegBitOut::~ModbusRegBitOut()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                        4
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  12
     operator+(char const *, string const &)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     ModbusRegBitOut::ModbusSet       24
     ModbusRegBitOut::ModbusRegBitOut(bool)
                                     208
     ModbusRegBitOut::~ModbusRegBitOut()
                                     136
     ModbusRegBitOut::MakeConfigString(int)
                                    1428
     ModbusRegBitOut::LoadConfigString(TSNConfigString &)
                                    1352
     ModbusRegBitOut::SetAlarmList()
                                     528
     ModbusRegBitOut::SetProList()   308
     ?Subroutine16                     8
     ModbusRegBitOut::GetOutputVal()
                                     408
     ModbusRegBitOut::Update()       164
     ModbusRegBitOut::operator=(ModbusRegBitOut)
                                     400
     ModbusRegBitOut::UpdateFromMultiple(unsigned int, int)
                                     132
     ModbusRegBitOut::GetObjectId()   44
     ModbusRegBitOut::GetRegisterType()
                                      88
     ?Subroutine15                    12
     ModbusRegBitOut::GetValueKey()   28
     ?<Constant "0x%0X	">              8
     ?<Constant "ModbusRegBitOut">    16
     ?<Constant "Created by ModbusMult...">
                                     164
     ?<Constant "Bit offset:">        12
     __sti__routine()                 56
     ModbusRegBitOut::new ModbusRegBitOut(bool)
                                      36
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
      Others                        1052

 
 9 532 bytes in segment CODE
   380 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 5 356 bytes of CODE  memory (+ 4 192 bytes shared)
   380 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
