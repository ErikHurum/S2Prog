##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmIntLowPressure1.Cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmIntLowPressure1.Cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmIntLowPressure1.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmIntLowPressure1.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmIntLowPressure1.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntLowPressure1::~AlarmIntLowPressure1()
   \                     `?~AlarmIntLowPressure1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmIntLowPressure1_1`
   \   00000014   0100000A           BEQ      `?~AlarmIntLowPressure1_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmIntLowPressure1_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmIntLowPressure1_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmIntLowPressure1_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
      8          unsigned AlarmIntLowPressure1::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmIntLowPressure1::AlarmIntLowPressure1(PRogramObjectBase *PROPtr, float Lim, bool Visible)
   \                     ??AlarmIntLowPressure1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     11          {
   \   00000004   28519FE5           LDR      R5,??AlarmIntLowPressure1_1  ;; ??__vtbl
   \   00000008   88D04DE2           SUB      SP,SP,#+136
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0380A0E1           MOV      R8,R3
   \   0000001C   ........           _BLF     ??AlarmLowPressure,??AlarmLowPressure??rA
     12          	NumberOfAlarmSettings++;
   \   00000020   10019FE5           LDR      R0,??AlarmIntLowPressure1_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000024   A45084E5           STR      R5,[R4, #+164]
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
     13          	IDNumber     = (ID_AL_X_LOW_T_PRESS1 << 16)+NumberOfAlarmSettings;
   \   00000034   BE0681E2           ADD      R0,R1,#+199229440
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     14          	Type         = ID_AL_X_LOW_T_PRESS1;
   \   0000003C   BE0EA0E3           MOV      R0,#+3040
   \   00000040   A00084E5           STR      R0,[R4, #+160]
     15          	IsExtraAlarm = true;
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   CD00C4E5           STRB     R0,[R4, #+205]
     16          	IsVisible    = Visible;
   \   0000004C   B080C4E5           STRB     R8,[R4, #+176]
     17              PROPointer   = PROPtr;
   \   00000050   C46084E5           STR      R6,[R4, #+196]
     18              PROTPressPtr = (PROTankPressure*)PROPtr;
   \   00000054   EC6084E5           STR      R6,[R4, #+236]
     19          	Limit        = Lim;
   \   00000058   E47084E5           STR      R7,[R4, #+228]
     20              Locked       = true;
   \   0000005C   E800C4E5           STRB     R0,[R4, #+232]
     21          	if (PROProjectInfo::IsInlandVessel) {
   \   00000060   D4009FE5           LDR      R0,??AlarmIntLowPressure1_1+0x8  ;; ??IsInlandVessel
   \   00000064   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   2600000A           BEQ      ??AlarmIntLowPressure1_2
     22          		 MessageKey      = L_WORD775;	// LowPressure1
   \   00000070   0710A0E3           MOV      R1,#+7
   \   00000074   C01F81E3           ORR      R1,R1,#0x300
   \   00000078   B81084E5           STR      R1,[R4, #+184]
     23          		 char Buf[BUF_SIZE];
     24          		 sprintf(Buf,"%s %3.0fkPa",FindDictionaryWord(MessageKey).c_str(),Limit*MH2O_TO_KPA);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000084   18009DE5           LDR      R0,[SP, #+24]
   \   00000088   100050E3           CMP      R0,#+16
   \   0000008C   E40094E5           LDR      R0,[R4, #+228]
   \   00000090   04609D25           LDRCS    R6,[SP, #+4]
   \   00000094   04608D32           ADDCC    R6,SP,#+4
   \   00000098   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000009C   9C209FE5           LDR      R2,??AlarmIntLowPressure1_1+0xC  ;; 0x3a92a305
   \   000000A0   9C309FE5           LDR      R3,??AlarmIntLowPressure1_1+0x10  ;; 0x40239d01
   \   000000A4   ........           _BLF     __dMul,??__dMul??rA
   \   000000A8   03002DE9           PUSH     {R0,R1}
   \   000000AC   24008DE2           ADD      R0,SP,#+36
   \   000000B0   0800BDE8           POP      {R3}
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   741085E2           ADD      R1,R5,#+116
   \   000000BC   ........           _BLF     sprintf,??sprintf??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   04008DE2           ADD      R0,SP,#+4
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
     25          		 Description = AnsiString(Buf);
   \   000000D0   20108DE2           ADD      R1,SP,#+32
   \   000000D4   70008DE2           ADD      R0,SP,#+112
   \   000000D8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000DC   64109FE5           LDR      R1,??AlarmIntLowPressure1_1+0x14  ;; ??npos
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   003091E5           LDR      R3,[R1, #+0]
   \   000000E8   0010A0E1           MOV      R1,R0
   \   000000EC   7C0084E2           ADD      R0,R4,#+124
   \   000000F0   ........           _BLF     ??assign,??assign??rA
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   0110A0E3           MOV      R1,#+1
   \   000000FC   70008DE2           ADD      R0,SP,#+112
   \   00000100   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000104   04D08DE2           ADD      SP,SP,#+4
   \   00000108   020000EA           B        ??AlarmIntLowPressure1_3
     26          	 }else{
     27          		 MessageKey      = L_WORD514;	// LowPressureX1
   \                     ??AlarmIntLowPressure1_2:
   \   0000010C   0200A0E3           MOV      R0,#+2
   \   00000110   800F80E3           ORR      R0,R0,#0x200
   \   00000114   B80084E5           STR      R0,[R4, #+184]
     28          	 }
     29          	TPCMessageKey       = L_WORD515;	// LPrX1
   \                     ??AlarmIntLowPressure1_3:
   \   00000118   0300A0E3           MOV      R0,#+3
   \   0000011C   800F80E3           ORR      R0,R0,#0x200
   \   00000120   B40084E5           STR      R0,[R4, #+180]
     30          }
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   88D08DE2           ADD      SP,SP,#+136
   \   0000012C   F041BDE8           POP      {R4-R8,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmIntLowPressure1_1:
   \   00000134   ........           DC32     ??__vtbl
   \   00000138   ........           DC32     ??NumberOfAlarmSettings
   \   0000013C   ........           DC32     ??IsInlandVessel
   \   00000140   05A3923A           DC32     0x3a92a305
   \   00000144   019D2340           DC32     0x40239d01
   \   00000148   ........           DC32     ??npos

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   __vtbl_entry const __data AlarmIntLowPressure1::__vtbl[29]
   \                     ??__vtbl:
   \   00000000   ............       DC32 `?~AlarmIntLowPressure1`, ??WriteConfigToFile
   \              ....        
   \   00000008   ............       DC32 ??LoadConfigFromFile, ??MakeConfigString, ??LoadConfigString
   \              ............
   \   00000014   ............       DC32 ??RestoreSettings, ??GetName, ??FindPROStatus, ??GetFloatValue
   \              ............
   \              ........    
   \   00000024   ............       DC32 ??GetValue, ??GetStringValue, ??GetBitValue, ??PutValue
   \              ............
   \              ........    
   \   00000034   ............       DC32 ??PutFloatValue, ??PutBitValue, ??ReceiveData, ??SendData
   \              ............
   \              ........    
   \   00000044   ............       DC32 ??StartTimer, ??InputTimeout, ??GetValueInfoTable
   \              ............
   \   00000050   ............       DC32 ??GetServiceValueInfoTable, ??SetModifiedFlag
   \              ....        
   \   00000058   ............       DC32 ??IsAvailableNewData, ??Get_CompleteMessage, ??Get_Location
   \              ............
   \   00000064   ............       DC32 ??Check, ??Get_Message, ??AddAlarm, ??RemoveAlarm
   \              ............
   \              ........    
   \   00000074   25732025332E       DC8 "%s %3.0fkPa"
   \              30666B506100

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmIntLowPressure1 &AlarmIntLowPressure1::new AlarmIntLowPressure1(PRogramObjectBase *, float, bool)
   \                     `??new AlarmIntLowPressure1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmIntLowPressure1_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmIntLowPressure1
   \                     `??new AlarmIntLowPressure1_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     31          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmIntLowPressure1::AlarmIntLowPressure1(PRogramObjectBase *, float, bool)
                                      168
     AlarmIntLowPressure1::new AlarmIntLowPressure1(PRogramObjectBase *, float, bool)
                                       16
     AlarmIntLowPressure1::~AlarmIntLowPressure1()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmIntLowPressure1::~AlarmIntLowPressure1()
                                      56
     AlarmIntLowPressure1::NumberOfAlarmSettings
                                       4
     AlarmIntLowPressure1::AlarmIntLowPressure1(PRogramObjectBase *, float, bool)
                                     332
     AlarmIntLowPressure1::__vtbl    128
     AlarmIntLowPressure1::new AlarmIntLowPressure1(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         160

 
 592 bytes in segment CODE
 128 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 396 bytes of CODE  memory (+ 212 bytes shared)
 128 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
