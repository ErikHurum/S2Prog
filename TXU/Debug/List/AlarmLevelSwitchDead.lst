##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:35 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLevelSwitchDead.Cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLevelSwitchDead.Cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLevelSwitchDead.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLevelSwitchDead.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLevelSwitchDead.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??_Tidy_2
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     ??_Tidy_2:
   \   00000020   000084E5           STR      R0,[R4, #+0]
   \   00000024   040084E5           STR      R0,[R4, #+4]
   \   00000028   080084E5           STR      R0,[R4, #+8]
   \   0000002C   1040BDE8           POP      {R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelSwitchDead::~AlarmLevelSwitchDead()
   \                     `?~AlarmLevelSwitchDead`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0C00000A           BEQ      `?~AlarmLevelSwitchDead_1`
   \   00000014   34009FE5           LDR      R0,`?~AlarmLevelSwitchDead_2`  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   EC0084E2           ADD      R0,R4,#+236
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   0200000A           BEQ      `?~AlarmLevelSwitchDead_3`
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLevelSwitchDead_3`:
   \   00000038   010015E3           TST      R5,#0x1
   \   0000003C   0100000A           BEQ      `?~AlarmLevelSwitchDead_1`
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLevelSwitchDead_1`:
   \   00000048   3040BDE8           POP      {R4,R5,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
   \                     `?~AlarmLevelSwitchDead_2`:
   \   00000050   ........           DC32     ??__vtbl
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLevelSwitchDead::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLevelSwitchDead::AlarmLevelSwitchDead(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmLevelSwitchDead:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   74009FE5           LDR      R0,??AlarmLevelSwitchDead_1  ;; ??__vtbl
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   EC0084E2           ADD      R0,R4,#+236
   \   00000020   001080E5           STR      R1,[R0, #+0]
   \   00000024   041080E5           STR      R1,[R0, #+4]
   \   00000028   081080E5           STR      R1,[R0, #+8]
     13          	PROPointer = PROPtr;
     14          	//PROAtmReference *PROAtmPtr = (PROAtmReference*)PROPointer;
     15          	NumberOfAlarmSettings++;
   \   0000002C   5C009FE5           LDR      R0,??AlarmLevelSwitchDead_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000030   C45084E5           STR      R5,[R4, #+196]
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
     16          	IDNumber        = (ID_AL_LSWITCH_DEAD << 16)+NumberOfAlarmSettings;
   \   00000040   C006A0E3           MOV      R0,#+201326592
   \   00000044   A90880E3           ORR      R0,R0,#0xA90000
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   9C0084E5           STR      R0,[R4, #+156]
     17          	Type            = ID_AL_LSWITCH_DEAD;
   \   00000050   A900A0E3           MOV      R0,#+169
   \   00000054   C00E80E3           ORR      R0,R0,#0xC00
   \   00000058   A00084E5           STR      R0,[R4, #+160]
     18          	Limit           = LEVELSWITCH_HS_MA_DEAD;
   \   0000005C   30009FE5           LDR      R0,??AlarmLevelSwitchDead_1+0x8  ;; 0x38d1b717
   \   00000060   E40084E5           STR      R0,[R4, #+228]
     19          
     20          	Deadband        = 0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   BC0084E5           STR      R0,[R4, #+188]
     21          	MessageKey      = L_WORD933;	// Conv
   \   0000006C   A500A0E3           MOV      R0,#+165
   \   00000070   C00F80E3           ORR      R0,R0,#0x300
   \   00000074   B80084E5           STR      R0,[R4, #+184]
     22          	TPCMessageKey   = L_WORD934;	// Cnv
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   B40084E5           STR      R0,[R4, #+180]
     23          }
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   3040BDE8           POP      {R4,R5,LR}
   \   00000088   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLevelSwitchDead_1:
   \   0000008C   ........           DC32     ??__vtbl
   \   00000090   ........           DC32     ??NumberOfAlarmSettings
   \   00000094   17B7D138           DC32     0x38d1b717
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AlarmLevelSwitchDead::Check(void)
     26          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     27          	float Val = ((AILevelSwitchOptical_mA*)PROPointer)->SwitchVariation;
   \   00000008   C40094E5           LDR      R0,[R4, #+196]
     28          	int Status = AL_STAT_IN_DEADBAND;
     29          	if ( Val >= Limit - Deadband ) {
   \   0000000C   E47094E5           LDR      R7,[R4, #+228]
   \   00000010   845190E5           LDR      R5,[R0, #+388]
   \   00000014   BC1094E5           LDR      R1,[R4, #+188]
   \   00000018   0260A0E3           MOV      R6,#+2
   \   0000001C   0700A0E1           MOV      R0,R7
   \   00000020   ........           _BLF     __fSub,??__fSub??rA
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000030   000050E3           CMP      R0,#+0
     30          		Status = AL_STAT_IN_NORMAL;
   \   00000034   0060A013           MOVNE    R6,#+0
   \   00000038   0400001A           BNE      ??Check_1
     31          	} else if ( Val < Limit ) {
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   ........           _BLF     __fLess,??__fLess??rA
   \   00000048   000050E3           CMP      R0,#+0
     32          		Status = AL_STAT_IN_ALARM;
   \   0000004C   0160A013           MOVNE    R6,#+1
     33          	}
     34          	UpdateAlarm(Status);
   \                     ??Check_1:
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     35          }
   \   0000005C   F040BDE8           POP      {R4-R7,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return
     36          
     37          ///////////////////////////////////////////////////////////////
     38          //
     39          // Routines for the librarian
     40          //
     41          ///////////////////////////////////////////////////////////////
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          int AlarmLevelSwitchDead::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     44          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C80DDE5           LDRB     R8,[SP, #+92]
   \   0000000C   60909DE5           LDR      R9,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     45          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
     46          	switch ( ValueId ) {
   \   0000002C   3210A0E3           MOV      R1,#+50
   \   00000030   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   2400001A           BNE      ??PutValue_2
     47          	case SVT_AL_LIMIT:
     48          		{
     49          			float Value = ConvertToSi(NewValue, ValUnitId=CURRENT_UNIT, Status,0.000 ,0.025,0.0);
   \   0000003C   1110A0E3           MOV      R1,#+17
   \   00000040   04108DE5           STR      R1,[SP, #+4]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   08008DE2           ADD      R0,SP,#+8
   \   00000050   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   00000054   10019FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   08008DE2           ADD      R0,SP,#+8
   \   00000068   ........           _BLF     ??assign,??assign??rA
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   F0009FE5           LDR      R0,??PutValue_3+0x4  ;; 0xffffffff9999999a
   \   0000007C   F0109FE5           LDR      R1,??PutValue_3+0x8  ;; 0x3f999999
   \   00000080   03002DE9           PUSH     {R0,R1}
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   0010A0E1           MOV      R1,R0
   \   0000008C   03002DE9           PUSH     {R0,R1}
   \   00000090   18208DE2           ADD      R2,SP,#+24
   \   00000094   20008DE2           ADD      R0,SP,#+32
   \   00000098   0800BDE8           POP      {R3}
   \   0000009C   1110A0E3           MOV      R1,#+17
   \   000000A0   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000A4   0050A0E1           MOV      R5,R0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
     50          			if ( Status== E_NO_ERR ) {
   \   000000B8   14009DE5           LDR      R0,[SP, #+20]
   \   000000BC   14D08DE2           ADD      SP,SP,#+20
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   1900001A           BNE      ??PutValue_4
     51          				Limit = Value;
   \   000000C8   E45084E5           STR      R5,[R4, #+228]
   \   000000CC   1A0000EA           B        ??PutValue_5
     52          			}
     53          		}
     54          		break;
     55          	default:
     56          		Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_2:
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   24008DE2           ADD      R0,SP,#+36
   \   000000DC   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   000000E0   84009FE5           LDR      R0,??PutValue_3  ;; ??npos
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   003090E5           LDR      R3,[R0, #+0]
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   24008DE2           ADD      R0,SP,#+36
   \   000000F4   ........           _BLF     ??assign,??assign??rA
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   00012DE9           PUSH     {R8}
   \   00000104   2C308DE2           ADD      R3,SP,#+44
   \   00000108   0620A0E1           MOV      R2,R6
   \   0000010C   0510A0E1           MOV      R1,R5
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000118   08008DE5           STR      R0,[SP, #+8]
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   2C008DE2           ADD      R0,SP,#+44
   \   00000128   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000012C   08D08DE2           ADD      SP,SP,#+8
     57          		break;
     58          	}
     59          	if ( Status==E_NO_ERR ) {
   \                     ??PutValue_4:
   \   00000130   00009DE5           LDR      R0,[SP, #+0]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0400001A           BNE      ??PutValue_6
     60          		SetModifiedFlag();
   \                     ??PutValue_5:
   \   0000013C   A41094E5           LDR      R1,[R4, #+164]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   541091E5           LDR      R1,[R1, #+84]
   \   00000148   0FE0A0E1           MOV      LR,PC
   \   0000014C   11FF2FE1           BX       R1
     61          	}
     62          	if ( UnitId ) {
   \                     ??PutValue_6:
   \   00000150   000059E3           CMP      R9,#+0
     63          		*UnitId = ValUnitId;
   \   00000154   04009D15           LDRNE    R0,[SP, #+4]
   \   00000158   00008915           STRNE    R0,[R9, #+0]
     64          	}
     65          	return(Status);
   \   0000015C   00009DE5           LDR      R0,[SP, #+0]
   \   00000160   40D08DE2           ADD      SP,SP,#+64
   \   00000164   F043BDE8           POP      {R4-R9,LR}
   \   00000168   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_3:
   \   0000016C   ........           DC32     ??npos
   \   00000170   9A999999           DC32     0xffffffff9999999a
   \   00000174   9999993F           DC32     0x3f999999
     66          }
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          int  AlarmLevelSwitchDead::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     69          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
     70          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
     71          	switch ( ValueId ) {
   \   00000010   1160A0E3           MOV      R6,#+17
   \   00000014   0470A0E3           MOV      R7,#+4
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   0B00008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     72          	case SVT_AL_LIMIT:
     73          		MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000083E5           STR      R0,[R3, #+0]
     74          		DecPnt     = 4;
   \   00000040   007084E5           STR      R7,[R4, #+0]
     75          		Unit       = CURRENT_UNIT;
   \   00000044   006085E5           STR      R6,[R5, #+0]
   \   00000048   070000EA           B        ??GetValue_6
     76          		break;
     77          	case SVT_AL_VALUE:
     78          		MyRetValue = ((AILevelSwitchOptical_mA*)PROPointer)->SwitchVariation;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   840190E5           LDR      R0,[R0, #+388]
   \   00000054   F8FFFFEA           B        ??GetValue_5
     79          		DecPnt     = 4;
     80          		Unit       = CURRENT_UNIT;
     81          		break;
     82          	default:
     83          		Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000058   20002DE9           PUSH     {R5}
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000064   00C0A0E1           MOV      R12,R0
   \   00000068   08D08DE2           ADD      SP,SP,#+8
     84          		break;
     85          	}
     86          	return(Status);
   \                     ??GetValue_6:
   \   0000006C   F043BDE8           POP      {R4-R9,LR}
   \   00000070   0C00A0E1           MOV      R0,R12
   \   00000074   1EFF2FE1           BX       LR               ;; return
     87          }
     88          
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int AlarmLevelSwitchDead::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     91          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     92          	int Status = GETVAL_NO_ERR;
     93          	//switch ( ValueId ) {
     94          	//	default:
     95          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     96          	//		break;
     97          	//}
     98          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
     99          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          int AlarmLevelSwitchDead::PutFloatValue( int ValueId, float NewValue)
    102          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    103          	int Status= E_NO_ERR;
    104          	//switch ( ValueId ) {
    105          	//   default:
    106          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    107          	//     break;
    108          	//}
    109          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
    110          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLevelSwitchDead &AlarmLevelSwitchDead::new AlarmLevelSwitchDead(PRogramObjectBase *)
   \                     `??new AlarmLevelSwitchDead`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F800A0E3           MOV      R0,#+248
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmLevelSwitchDead_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmLevelSwitchDead
   \                     `??new AlarmLevelSwitchDead_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    111          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLevelSwitchDead::AlarmLevelSwitchDead(PRogramObjectBase *)
                                       12
     AlarmLevelSwitchDead::Check()     24
     AlarmLevelSwitchDead::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLevelSwitchDead::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmLevelSwitchDead::PutFloatValue(int, float)
                                        4
     AlarmLevelSwitchDead::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AlarmLevelSwitchDead::new AlarmLevelSwitchDead(PRogramObjectBase *)
                                        8
     AlarmLevelSwitchDead::~AlarmLevelSwitchDead()
                                       12
     _Vector_impl<float, allocator<float>>::_Tidy()
                                        8
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Vector_impl<float, allocator<float>>::_Tidy()
                                      52
     AlarmLevelSwitchDead::~AlarmLevelSwitchDead()
                                      84
     AlarmLevelSwitchDead::NumberOfAlarmSettings
                                       4
     AlarmLevelSwitchDead::AlarmLevelSwitchDead(PRogramObjectBase *)
                                     152
     AlarmLevelSwitchDead::Check()   100
     AlarmLevelSwitchDead::PutValue(int, int, AnsiString, bool, int *)
                                     376
     AlarmLevelSwitchDead::GetValue(int, int, float &, int &, int &)
                                     120
     AlarmLevelSwitchDead::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AlarmLevelSwitchDead::PutFloatValue(int, float)
                                       8
     __sti__routine()                  4
     AlarmLevelSwitchDead::new AlarmLevelSwitchDead(PRogramObjectBase *)
                                      40
      Others                         356

 
 1 180 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 824 bytes of CODE  memory (+ 372 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
