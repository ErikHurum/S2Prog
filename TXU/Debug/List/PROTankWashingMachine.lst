##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:16:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROTankWashingMachine.cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\PROTankWashingMachine.cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROTankWashingMachine.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROTankWashingMachine.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROTankWashingMachine.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_6
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_7:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_8
   \                     ??_Insert_6:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_9
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_8
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_8
   \                     ??_Insert_9:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_8
   \   00000060   F0FFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_8:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_11
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_12
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_10
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_13
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_13:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_8
   \                     ??_Insert_12:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_10
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_14
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_14:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_18:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_18
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankWashingMachine ** _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Insert(PROTankWashingMachine **, PROTankWashingMachine * const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA_2
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_3
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_3
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_4
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_3
   \                     ??_Make_room_4:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_3:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_5
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_5
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_6
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_7
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_7:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_5
   \                     ??_Make_room_6:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_5:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankWashingMachine ** _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Make_room(PROTankWashingMachine **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_8
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_8
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_9
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_8
   \                     ??_Make_room_9:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_8:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Push_back0(PROTankWashingMachine *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_3
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_4:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_4
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_5
   \                     ??_Push_back0_3:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_3
   \                     ??_Push_back0_5:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_6
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_7:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_7
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_6:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_8:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_9
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_10:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_10
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_11
   \                     ??_Push_back0_9:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_5
   \                     ??_Push_back0_11:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PROTankWashingMachine *>::~vector()
   \                     `?~vector_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TankWashingMachine::~TankWashingMachine()
   \                     `?~TankWashingMachine`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   3C0084E2           ADD      R0,R4,#+60
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   1C0084E2           ADD      R0,R4,#+28
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000038   1040BDE8           POP      {R4,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
      2          #ifdef ANWIN
      3          	#include "LiteCall.hpp"
      4              #include "LiteAccess.hpp"
      5              #pragma hdrstop
      6              #include "MainUnit.h"
      7          #endif
      8           
      9          #pragma hdrstop
     10          
     11          #include <ctime>
     12          #include "PROTankWashingMachine.h"
     13          //---------------------------------------------------------------------------
     14          #ifdef ANWIN
     15              #pragma package(smart_init)
     16          #endif
     17          
     18          

   \                                 In segment DATA_C, align 4, align-sorted
     19          set<PRogramObjectBase *>PROTankWashingMachine::ObjectSet;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??ObjectSet, `?~set`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??AllObjVector, `?~vector`
   \              ............
   \   00000018   ............       DC32 ?_5, ??AllTankWashingMachinesVector, `?~vector_1`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ObjectSet:
   \   00000000                      DS8 24
     20          vector<PRogramObjectBase *>PROTankWashingMachine::AllObjVector;
     21          vector<PROTankWashingMachine *>PROTankWashingMachine::AllTankWashingMachinesVector;
   \                     ??AllTankWashingMachinesVector:
   \   00000018                      DS8 12
   \                     ??AllObjVector:
   \   00000024                      DS8 12

   \                                 In segment DATA_C, align 4, align-sorted
     22          const int PROTankWashingMachine::ValueNameList_Length = 1;
   \                     ??ValueNameList_Length:
   \   00000000   01000000           DC32 1
     23          
     24          #if defined(ANWIN)
     25              #define PRO_TANK_WASHING_MACHINE_VALUE_NAME_LIST_LENGTH 1
     26          #endif
     27          
     28          
     29          /// Maps this object's values to column names
     30          #if defined(S2TXU) || defined(ANTDUSIM)

   \                                 In segment DATA_I, align 4, align-sorted
     31          ValueList PROTankWashingMachine::ValueNameList[PROTankWashingMachine::ValueNameList_Length] = {
   \                     ??ValueNameList:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for ValueNameList>`
     32          #else
     33          ValueList PROTankWashingMachine::ValueNameList[PRO_TANK_WASHING_MACHINE_VALUE_NAME_LIST_LENGTH] = {
     34          #endif
     35              { L_WORD391, 0, SVT_TWM_ON_OFF_STATUS }
     36          };
     37          
     38          /// Init new object
     39          /// @param id Tank Washing Machine id
     40          /// @param tankId Cargo tank id
     41          ///

   \                                 In segment CODE, align 4, keep-with-next
     42          PROTankWashingMachine::PROTankWashingMachine(int tankId, AnsiString TankName)
   \                     ??PROTankWashingMachine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     43          	: PROXRefObject(true) {
     44              ObjectSet.insert(this);
   \   00000004   ........           LDR      R8,??DataTable1  ;; ??ObjectSet
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000020   ........           LDR      R0,??DataTable4  ;; ??__vtbl
   \   00000024   7A7FA0E3           MOV      R7,#+488
   \   00000028   A40084E5           STR      R0,[R4, #+164]
   \   0000002C   590F84E2           ADD      R0,R4,#+356
   \   00000030   ........           _BLF     ??TankWashingMachine,??TankWashingMachine??rA
   \   00000034   040087E0           ADD      R0,R7,R4
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   0810A0E1           MOV      R1,R8
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??insert,??insert??rA
     45              AllObjVector.push_back(this);
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   240088E2           ADD      R0,R8,#+36
   \   00000054   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     46              AllTankWashingMachinesVector.push_back(this);
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   180088E2           ADD      R0,R8,#+24
   \   00000060   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
     47          
     48          
     49              // IDCheck done in TankWashingAPI.cpp, LoadTankWashingMachineConfigString
     50              IDNumber 	           = (C_PRO_TANK_WASH_MACHINE << 16) | (ObjectSet.size() & 0xFFFF);;
   \   00000064   100098E5           LDR      R0,[R8, #+16]
   \   00000068   4016A0E3           MOV      R1,#+67108864
   \   0000006C   0008A0E1           LSL      R0,R0,#+16
   \   00000070   751881E3           ORR      R1,R1,#0x750000
   \   00000074   200881E1           ORR      R0,R1,R0, LSR #+16
   \   00000078   9C0084E5           STR      R0,[R4, #+156]
     51              Type   		           = C_PRO_TANK_WASH_MACHINE;
   \   0000007C   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000080   A00084E5           STR      R0,[R4, #+160]
     52              twm.TankId	           = tankId;
     53              twm.TankName           = TankName;
   \   00000084   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000088   9C6184E5           STR      R6,[R4, #+412]
   \   0000008C   006090E5           LDR      R6,[R0, #+0]
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0510A0E1           MOV      R1,R5
   \   0000009C   680F84E2           ADD      R0,R4,#+416
   \   000000A0   ........           _BLF     ??assign,??assign??rA
     54          	Speed                  = 0.0;
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   5C0184E5           STR      R0,[R4, #+348]
     55              serialId               = AnsiString();
   \   000000AC   18008DE2           ADD      R0,SP,#+24
   \   000000B0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000B4   0630A0E1           MOV      R3,R6
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0010A0E1           MOV      R1,R0
   \   000000C0   040087E0           ADD      R0,R7,R4
   \   000000C4   ........           _BLF     ??assign,??assign??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   18008DE2           ADD      R0,SP,#+24
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     56              machineStatus          = tcmos_idle;
   \   000000D8   0100A0E3           MOV      R0,#+1
   \   000000DC   0402C4E5           STRB     R0,[R4, #+516]
     57          	RunningTimeStart       = 0;
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   100284E5           STR      R0,[R4, #+528]
     58              TotalRunningTime       = 0;
   \   000000E8   140284E5           STR      R0,[R4, #+532]
     59              IdleTimeStart          = 0;
   \   000000EC   080284E5           STR      R0,[R4, #+520]
     60              TotalIdleTime          = 0;
   \   000000F0   0C0284E5           STR      R0,[R4, #+524]
     61              RunningTime            = 0;
   \   000000F4   600184E5           STR      R0,[R4, #+352]
     62              TCMLowSpeedPtr         = new AlarmTCMLowSpeed(this);
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           _BLF     `??new AlarmTCMLowSpeed`,`??new AlarmTCMLowSpeed??rA`
   \   00000100   180284E5           STR      R0,[R4, #+536]
     63              TCMPresetTimePassedPtr = new AlarmTCMPresetTimePassed(this);
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           _BLF     `??new AlarmTCMPresetTimePassed`,`??new AlarmTCMPresetTimePassed??rA`
   \   0000010C   1C0284E5           STR      R0,[R4, #+540]
     64              AlarmSet.insert(TCMLowSpeedPtr);
   \   00000110   182294E5           LDR      R2,[R4, #+536]
   \   00000114   E41084E2           ADD      R1,R4,#+228
   \   00000118   08008DE2           ADD      R0,SP,#+8
   \   0000011C   ........           _BLF     ??insert_1,??insert??rA_1
     65              AlarmSet.insert(TCMPresetTimePassedPtr);
   \   00000120   1C2294E5           LDR      R2,[R4, #+540]
   \   00000124   E41084E2           ADD      R1,R4,#+228
   \   00000128   10008DE2           ADD      R0,SP,#+16
   \   0000012C   ........           _BLF     ??insert_1,??insert??rA_1
     66              AddAlarms(CompleteAlarmInfoList);
   \   00000130   FC1084E2           ADD      R1,R4,#+252
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     67          }
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   34D08DE2           ADD      SP,SP,#+52
   \   00000144   ........           B        ?Subroutine28

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine28_0:
   \   00000008   ........           DC32     OS_Time
   \   0000000C   ........           DC32     `?<Constant "Enabled">`
   \   00000010   9B999999           DC32     0xffffffff9999999b
   \   00000014   9999C93F           DC32     0x3fc99999
     68          
     69          //---------------------------------------------------------------------------
     70          
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          PROTankWashingMachine::~PROTankWashingMachine(void) {
   \                     `?~PROTankWashingMachine`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1800000A           BEQ      `?~PROTankWashingMachine_1`
   \   00000014   ........           LDR      R0,??DataTable4  ;; ??__vtbl
     73              // Should delete from set and
     74              if ( AllTankWashingMachinesVector.size() > 0 ) {
   \   00000018   5C609FE5           LDR      R6,`?~PROTankWashingMachine_2`  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   1C0096E5           LDR      R0,[R6, #+28]
   \   00000024   181096E5           LDR      R1,[R6, #+24]
   \   00000028   010040E0           SUB      R0,R0,R1
   \   0000002C   2001B0E1           LSRS     R0,R0,#+2
   \   00000030   0300000A           BEQ      `?~PROTankWashingMachine_3`
     75                  AllTankWashingMachinesVector.clear();          // Don't need to delete objects, they are deleted on TankWashingMachineVector deconstruction
   \   00000034   180086E2           ADD      R0,R6,#+24
   \   00000038   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000003C   180086E2           ADD      R0,R6,#+24
   \   00000040   ........           _BLF     ??_Zero,??_Zero??rA
     76              }
     77          }
   \                     `?~PROTankWashingMachine_3`:
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   7A0F84E2           ADD      R0,R4,#+488
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   590F84E2           ADD      R0,R4,#+356
   \   00000058   ........           _BLF     `?~TankWashingMachine`,`?~TankWashingMachine??rA`
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     `?~PROXRefObject`,`?~PROXRefObject??rA`
   \   00000068   010015E3           TST      R5,#0x1
   \   0000006C   0100000A           BEQ      `?~PROTankWashingMachine_1`
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROTankWashingMachine_1`:
   \   00000078   ........           B        ?Subroutine29
   \                     `?~PROTankWashingMachine_2`:
   \   0000007C   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     78          
     79          
     80          
     81          
     82          
     83          ///////////////////////////////////////////////////////////////
     84          //
     85          // Routines for the Configuration
     86          //
     87          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     88          void PROTankWashingMachine::WriteConfigToFile(TSNConfigString &ConfigString) {
   \                     ??WriteConfigToFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     89              AnsiString LocalString;
     90              AnsiString IdNumStr;
     91              IdNumStr.cat_sprintf("0x%0x", IDNumber);
     92              LocalString += KeyWord(TWM_TANK_WASHING_MACHINE) + CrLfStr;
   \   00000004   ........           LDR      R6,??DataTable5  ;; CrLfStr
   \   00000008   7CD04DE2           SUB      SP,SP,#+124
   \   0000000C   40DE4DE2           SUB      SP,SP,#+1024
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
     93              LocalString += TabStr1 + KeyWord(C_PRO_ID_NUMBER) + IdNumStr + CrLfStr;
   \   00000018   74869FE5           LDR      R8,??WriteConfigToFile_1  ;; TabStr1
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000024   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   9C3094E5           LDR      R3,[R4, #+156]
   \   00000030   ........           LDR      R2,??DataTable6  ;; `?<Constant "0x%0x">`
   \   00000034   0C108DE2           ADD      R1,SP,#+12
   \   00000038   401E81E2           ADD      R1,R1,#+1024
   \   0000003C   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000040   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0C008DE2           ADD      R0,SP,#+12
   \   00000050   400E80E2           ADD      R0,R0,#+1024
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   FA10A0E3           MOV      R1,#+250
   \   0000005C   A81D81E3           ORR      R1,R1,#0x2A00
   \   00000060   54008DE2           ADD      R0,SP,#+84
   \   00000064   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   54108DE2           ADD      R1,SP,#+84
   \   00000070   38008DE2           ADD      R0,SP,#+56
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   ........           LDR      R0,??DataTable11  ;; ??npos
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   007090E5           LDR      R7,[R0, #+0]
   \   00000084   38108DE2           ADD      R1,SP,#+56
   \   00000088   0730A0E1           MOV      R3,R7
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??append,??append??rA
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   38008DE2           ADD      R0,SP,#+56
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   54008DE2           ADD      R0,SP,#+84
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   1B10A0E3           MOV      R1,#+27
   \   000000B8   501E81E3           ORR      R1,R1,#0x500
   \   000000BC   C4008DE2           ADD      R0,SP,#+196
   \   000000C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C4   C4208DE2           ADD      R2,SP,#+196
   \   000000C8   0810A0E1           MOV      R1,R8
   \   000000CC   A8008DE2           ADD      R0,SP,#+168
   \   000000D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D4   FC2F8DE2           ADD      R2,SP,#+1008
   \   000000D8   A8108DE2           ADD      R1,SP,#+168
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E4   0620A0E1           MOV      R2,R6
   \   000000E8   8C108DE2           ADD      R1,SP,#+140
   \   000000EC   70008DE2           ADD      R0,SP,#+112
   \   000000F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F4   0730A0E1           MOV      R3,R7
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   70108DE2           ADD      R1,SP,#+112
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           _BLF     ??append,??append??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   70008DE2           ADD      R0,SP,#+112
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   8C008DE2           ADD      R0,SP,#+140
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   A8008DE2           ADD      R0,SP,#+168
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   C4008DE2           ADD      R0,SP,#+196
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
     94              LocalString += TabStr1 + KeyWord(C_PRO_NAME) + Name + CrLfStr;
   \   00000148   1510A0E3           MOV      R1,#+21
   \   0000014C   501E81E3           ORR      R1,R1,#0x500
   \   00000150   4D0F8DE2           ADD      R0,SP,#+308
   \   00000154   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000158   4D2F8DE2           ADD      R2,SP,#+308
   \   0000015C   0810A0E1           MOV      R1,R8
   \   00000160   460F8DE2           ADD      R0,SP,#+280
   \   00000164   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000168   442084E2           ADD      R2,R4,#+68
   \   0000016C   461F8DE2           ADD      R1,SP,#+280
   \   00000170   FC008DE2           ADD      R0,SP,#+252
   \   00000174   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000178   0620A0E1           MOV      R2,R6
   \   0000017C   FC108DE2           ADD      R1,SP,#+252
   \   00000180   E0008DE2           ADD      R0,SP,#+224
   \   00000184   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000188   0730A0E1           MOV      R3,R7
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   E0108DE2           ADD      R1,SP,#+224
   \   00000194   0D00A0E1           MOV      R0,SP
   \   00000198   ........           _BLF     ??append,??append??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   E0008DE2           ADD      R0,SP,#+224
   \   000001A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   FC008DE2           ADD      R0,SP,#+252
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   460F8DE2           ADD      R0,SP,#+280
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   4D0F8DE2           ADD      R0,SP,#+308
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     95              LocalString += TabStr1 + KeyWord(TWM_SERIAL_ID) + twm.SerialId + CrLfStr;
   \   000001DC   FE10A0E3           MOV      R1,#+254
   \   000001E0   A81D81E3           ORR      R1,R1,#0x2A00
   \   000001E4   690F8DE2           ADD      R0,SP,#+420
   \   000001E8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001EC   692F8DE2           ADD      R2,SP,#+420
   \   000001F0   0810A0E1           MOV      R1,R8
   \   000001F4   620F8DE2           ADD      R0,SP,#+392
   \   000001F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001FC   602F84E2           ADD      R2,R4,#+384
   \   00000200   621F8DE2           ADD      R1,SP,#+392
   \   00000204   5B0F8DE2           ADD      R0,SP,#+364
   \   00000208   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000020C   0620A0E1           MOV      R2,R6
   \   00000210   5B1F8DE2           ADD      R1,SP,#+364
   \   00000214   540F8DE2           ADD      R0,SP,#+336
   \   00000218   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000021C   0730A0E1           MOV      R3,R7
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   541F8DE2           ADD      R1,SP,#+336
   \   00000228   0D00A0E1           MOV      R0,SP
   \   0000022C   ........           _BLF     ??append,??append??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   540F8DE2           ADD      R0,SP,#+336
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   5B0F8DE2           ADD      R0,SP,#+364
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   620F8DE2           ADD      R0,SP,#+392
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   690F8DE2           ADD      R0,SP,#+420
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
     96              LocalString += TabStr1 + KeyWord(TWM_MACHINE_TYPE_ID) + AnsiString(twm.MachineTypeId) + CrLfStr;
   \   00000270   C01194E5           LDR      R1,[R4, #+448]
   \   00000274   28008DE2           ADD      R0,SP,#+40
   \   00000278   400E80E2           ADD      R0,R0,#+1024
   \   0000027C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000280   0090A0E1           MOV      R9,R0
   \   00000284   FF10A0E3           MOV      R1,#+255
   \   00000288   A81D81E3           ORR      R1,R1,#0x2A00
   \   0000028C   850F8DE2           ADD      R0,SP,#+532
   \   00000290   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000294   852F8DE2           ADD      R2,SP,#+532
   \   00000298   0810A0E1           MOV      R1,R8
   \   0000029C   7E0F8DE2           ADD      R0,SP,#+504
   \   000002A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A4   0920A0E1           MOV      R2,R9
   \   000002A8   7E1F8DE2           ADD      R1,SP,#+504
   \   000002AC   770F8DE2           ADD      R0,SP,#+476
   \   000002B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002B4   0620A0E1           MOV      R2,R6
   \   000002B8   771F8DE2           ADD      R1,SP,#+476
   \   000002BC   700F8DE2           ADD      R0,SP,#+448
   \   000002C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002C4   0730A0E1           MOV      R3,R7
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   701F8DE2           ADD      R1,SP,#+448
   \   000002D0   0D00A0E1           MOV      R0,SP
   \   000002D4   ........           _BLF     ??append,??append??rA
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   700F8DE2           ADD      R0,SP,#+448
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   770F8DE2           ADD      R0,SP,#+476
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   28008DE2           ADD      R0,SP,#+40
   \   00000304   400E80E2           ADD      R0,R0,#+1024
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   7E0F8DE2           ADD      R0,SP,#+504
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   850F8DE2           ADD      R0,SP,#+532
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
     97              LocalString += TabStr1 + KeyWord(TWM_NOZZLE_DIAMETER_MM) + AnsiString(twm.NozzleDiameter_mm) + CrLfStr;
   \   0000032C   D41194E5           LDR      R1,[R4, #+468]
   \   00000330   44008DE2           ADD      R0,SP,#+68
   \   00000334   400E80E2           ADD      R0,R0,#+1024
   \   00000338   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000033C   0090A0E1           MOV      R9,R0
   \   00000340   FD10A0E3           MOV      R1,#+253
   \   00000344   A81D81E3           ORR      R1,R1,#0x2A00
   \   00000348   A10F8DE2           ADD      R0,SP,#+644
   \   0000034C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000350   A12F8DE2           ADD      R2,SP,#+644
   \   00000354   0810A0E1           MOV      R1,R8
   \   00000358   9A0F8DE2           ADD      R0,SP,#+616
   \   0000035C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000360   0920A0E1           MOV      R2,R9
   \   00000364   9A1F8DE2           ADD      R1,SP,#+616
   \   00000368   930F8DE2           ADD      R0,SP,#+588
   \   0000036C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000370   0620A0E1           MOV      R2,R6
   \   00000374   931F8DE2           ADD      R1,SP,#+588
   \   00000378   8C0F8DE2           ADD      R0,SP,#+560
   \   0000037C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000380   0730A0E1           MOV      R3,R7
   \   00000384   0020A0E3           MOV      R2,#+0
   \   00000388   8C1F8DE2           ADD      R1,SP,#+560
   \   0000038C   0D00A0E1           MOV      R0,SP
   \   00000390   ........           _BLF     ??append,??append??rA
   \   00000394   0020A0E3           MOV      R2,#+0
   \   00000398   0110A0E3           MOV      R1,#+1
   \   0000039C   8C0F8DE2           ADD      R0,SP,#+560
   \   000003A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A4   0020A0E3           MOV      R2,#+0
   \   000003A8   0110A0E3           MOV      R1,#+1
   \   000003AC   930F8DE2           ADD      R0,SP,#+588
   \   000003B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B4   0020A0E3           MOV      R2,#+0
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   44008DE2           ADD      R0,SP,#+68
   \   000003C0   400E80E2           ADD      R0,R0,#+1024
   \   000003C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C8   0020A0E3           MOV      R2,#+0
   \   000003CC   0110A0E3           MOV      R1,#+1
   \   000003D0   9A0F8DE2           ADD      R0,SP,#+616
   \   000003D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   0110A0E3           MOV      R1,#+1
   \   000003E0   A10F8DE2           ADD      R0,SP,#+644
   \   000003E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     98              LocalString += TabStr1 + KeyWord(TWM_NUMBER_OF_NOZZLES) + AnsiString(twm.NumberOfNozzles) + CrLfStr;
   \   000003E8   D81194E5           LDR      R1,[R4, #+472]
   \   000003EC   460E8DE2           ADD      R0,SP,#+1120
   \   000003F0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000003F4   0090A0E1           MOV      R9,R0
   \   000003F8   AC1DA0E3           MOV      R1,#+11008
   \   000003FC   BD0F8DE2           ADD      R0,SP,#+756
   \   00000400   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000404   BD2F8DE2           ADD      R2,SP,#+756
   \   00000408   0810A0E1           MOV      R1,R8
   \   0000040C   B60F8DE2           ADD      R0,SP,#+728
   \   00000410   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000414   0920A0E1           MOV      R2,R9
   \   00000418   B61F8DE2           ADD      R1,SP,#+728
   \   0000041C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000420   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000424   0620A0E1           MOV      R2,R6
   \   00000428   AF1F8DE2           ADD      R1,SP,#+700
   \   0000042C   A80F8DE2           ADD      R0,SP,#+672
   \   00000430   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000434   0730A0E1           MOV      R3,R7
   \   00000438   0020A0E3           MOV      R2,#+0
   \   0000043C   A81F8DE2           ADD      R1,SP,#+672
   \   00000440   0D00A0E1           MOV      R0,SP
   \   00000444   ........           _BLF     ??append,??append??rA
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   0110A0E3           MOV      R1,#+1
   \   00000450   A80F8DE2           ADD      R0,SP,#+672
   \   00000454   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000458   0020A0E3           MOV      R2,#+0
   \   0000045C   0110A0E3           MOV      R1,#+1
   \   00000460   AF0F8DE2           ADD      R0,SP,#+700
   \   00000464   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000468   0020A0E3           MOV      R2,#+0
   \   0000046C   0110A0E3           MOV      R1,#+1
   \   00000470   460E8DE2           ADD      R0,SP,#+1120
   \   00000474   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000478   0020A0E3           MOV      R2,#+0
   \   0000047C   0110A0E3           MOV      R1,#+1
   \   00000480   B60F8DE2           ADD      R0,SP,#+728
   \   00000484   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000488   0020A0E3           MOV      R2,#+0
   \   0000048C   0110A0E3           MOV      R1,#+1
   \   00000490   BD0F8DE2           ADD      R0,SP,#+756
   \   00000494   ........           _BLF     ??_Tidy,??_Tidy??rA
     99              LocalString += TabStr1 + KeyWord(TWM_GEAR_RATIO) + FloatToAnsiString(twm.GearRatio, 6, 3) + CrLfStr;
   \   00000498   DC1194E5           LDR      R1,[R4, #+476]
   \   0000049C   0330A0E3           MOV      R3,#+3
   \   000004A0   0620A0E3           MOV      R2,#+6
   \   000004A4   E00F8DE2           ADD      R0,SP,#+896
   \   000004A8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000004AC   0110A0E3           MOV      R1,#+1
   \   000004B0   AC1D81E3           ORR      R1,R1,#0x2B00
   \   000004B4   D90F8DE2           ADD      R0,SP,#+868
   \   000004B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004BC   D92F8DE2           ADD      R2,SP,#+868
   \   000004C0   0810A0E1           MOV      R1,R8
   \   000004C4   D20F8DE2           ADD      R0,SP,#+840
   \   000004C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004CC   E02F8DE2           ADD      R2,SP,#+896
   \   000004D0   D21F8DE2           ADD      R1,SP,#+840
   \   000004D4   CB0F8DE2           ADD      R0,SP,#+812
   \   000004D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004DC   0620A0E1           MOV      R2,R6
   \   000004E0   CB1F8DE2           ADD      R1,SP,#+812
   \   000004E4   C40F8DE2           ADD      R0,SP,#+784
   \   000004E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004EC   0730A0E1           MOV      R3,R7
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   C41F8DE2           ADD      R1,SP,#+784
   \   000004F8   0D00A0E1           MOV      R0,SP
   \   000004FC   ........           _BLF     ??append,??append??rA
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0110A0E3           MOV      R1,#+1
   \   00000508   C40F8DE2           ADD      R0,SP,#+784
   \   0000050C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000510   0020A0E3           MOV      R2,#+0
   \   00000514   0110A0E3           MOV      R1,#+1
   \   00000518   CB0F8DE2           ADD      R0,SP,#+812
   \   0000051C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000520   0020A0E3           MOV      R2,#+0
   \   00000524   0110A0E3           MOV      R1,#+1
   \   00000528   E00F8DE2           ADD      R0,SP,#+896
   \   0000052C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000530   0020A0E3           MOV      R2,#+0
   \   00000534   0110A0E3           MOV      R1,#+1
   \   00000538   D20F8DE2           ADD      R0,SP,#+840
   \   0000053C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000540   0020A0E3           MOV      R2,#+0
   \   00000544   0110A0E3           MOV      R1,#+1
   \   00000548   D90F8DE2           ADD      R0,SP,#+868
   \   0000054C   ........           _BLF     ??_Tidy,??_Tidy??rA
    100          
    101              for ( unsigned i = 0; i < AllAnalogInList.size(); i++ ) {
   \   00000550   0080A0E3           MOV      R8,#+0
   \   00000554   4E9FA0E3           MOV      R9,#+312
   \   00000558   120000EA           B        ??WriteConfigToFile_2
    102                  LocalString += AllAnalogInList[i]->MakeConfigString();          //common
   \                     ??WriteConfigToFile_3:
   \   0000055C   040099E7           LDR      R0,[R9, +R4]
   \   00000560   0020A0E3           MOV      R2,#+0
   \   00000564   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   00000568   1C108DE2           ADD      R1,SP,#+28
   \   0000056C   0300A0E1           MOV      R0,R3
   \   00000570   A43093E5           LDR      R3,[R3, #+164]
    103              }
   \   00000574   018088E2           ADD      R8,R8,#+1
   \   00000578   0C3093E5           LDR      R3,[R3, #+12]
   \   0000057C   0FE0A0E1           MOV      LR,PC
   \   00000580   13FF2FE1           BX       R3
   \   00000584   0730A0E1           MOV      R3,R7
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   1C108DE2           ADD      R1,SP,#+28
   \   00000590   0D00A0E1           MOV      R0,SP
   \   00000594   ........           _BLF     ??append,??append??rA
   \   00000598   0020A0E3           MOV      R2,#+0
   \   0000059C   0110A0E3           MOV      R1,#+1
   \   000005A0   1C008DE2           ADD      R0,SP,#+28
   \   000005A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??WriteConfigToFile_2:
   \   000005A8   040089E0           ADD      R0,R9,R4
   \   000005AC   041090E5           LDR      R1,[R0, #+4]
   \   000005B0   000090E5           LDR      R0,[R0, #+0]
   \   000005B4   000041E0           SUB      R0,R1,R0
   \   000005B8   200158E1           CMP      R8,R0, LSR #+2
   \   000005BC   E6FFFF3A           BCC      ??WriteConfigToFile_3
    104              LocalString += CrLfStr;
   \   000005C0   0730A0E1           MOV      R3,R7
   \   000005C4   0020A0E3           MOV      R2,#+0
   \   000005C8   0610A0E1           MOV      R1,R6
   \   000005CC   0D00A0E1           MOV      R0,SP
   \   000005D0   ........           _BLF     ??append,??append??rA
    105              LocalString += KeyWord(TWM_END_TANK_WASHING_MACHINE) + CrLfStr;
   \   000005D4   FB10A0E3           MOV      R1,#+251
   \   000005D8   A81D81E3           ORR      R1,R1,#0x2A00
   \   000005DC   EE0F8DE2           ADD      R0,SP,#+952
   \   000005E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005E4   0620A0E1           MOV      R2,R6
   \   000005E8   EE1F8DE2           ADD      R1,SP,#+952
   \   000005EC   E70F8DE2           ADD      R0,SP,#+924
   \   000005F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005F4   0730A0E1           MOV      R3,R7
   \   000005F8   0020A0E3           MOV      R2,#+0
   \   000005FC   E71F8DE2           ADD      R1,SP,#+924
   \   00000600   0D00A0E1           MOV      R0,SP
   \   00000604   ........           _BLF     ??append,??append??rA
   \   00000608   0020A0E3           MOV      R2,#+0
   \   0000060C   0110A0E3           MOV      R1,#+1
   \   00000610   E70F8DE2           ADD      R0,SP,#+924
   \   00000614   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000618   0020A0E3           MOV      R2,#+0
   \   0000061C   0110A0E3           MOV      R1,#+1
   \   00000620   EE0F8DE2           ADD      R0,SP,#+952
   \   00000624   ........           _BLF     ??_Tidy,??_Tidy??rA
    106              LocalString += CrLfStr;
   \   00000628   0730A0E1           MOV      R3,R7
   \   0000062C   0020A0E3           MOV      R2,#+0
   \   00000630   0610A0E1           MOV      R1,R6
   \   00000634   0D00A0E1           MOV      R0,SP
   \   00000638   ........           _BLF     ??append,??append??rA
    107              ConfigString.AddString(LocalString);
   \   0000063C   0D10A0E1           MOV      R1,SP
   \   00000640   F50F8DE2           ADD      R0,SP,#+980
   \   00000644   ........           _BLF     ??string,??string??rA
   \   00000648   F51F8DE2           ADD      R1,SP,#+980
   \   0000064C   0500A0E1           MOV      R0,R5
   \   00000650   ........           _BLF     ??AddString,??AddString??rA
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   0110A0E3           MOV      R1,#+1
   \   0000065C   F50F8DE2           ADD      R0,SP,#+980
   \   00000660   ........           _BLF     ??_Tidy,??_Tidy??rA
    108          }
   \   00000664   0020A0E3           MOV      R2,#+0
   \   00000668   0110A0E3           MOV      R1,#+1
   \   0000066C   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000670   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000674   0020A0E3           MOV      R2,#+0
   \   00000678   0110A0E3           MOV      R1,#+1
   \   0000067C   0D00A0E1           MOV      R0,SP
   \   00000680   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000684   7CD08DE2           ADD      SP,SP,#+124
   \   00000688   40DE8DE2           ADD      SP,SP,#+1024
   \   0000068C   F043BDE8           POP      {R4-R9,LR}
   \   00000690   1EFF2FE1           BX       LR               ;; return
   \                     ??WriteConfigToFile_1:
   \   00000694   ........           DC32     TabStr1
    109          //---------------------------------------------------------------------------
    110          
    111          
    112          
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          int PROTankWashingMachine::LoadConfigFromFile(TSNConfigString &ConfigString) {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    115              SetLineNumber(ConfigString.LineCount);
    116              AnsiString PROName = "Tank Washing Machine";
   \   00000004   F4759FE5           LDR      R7,??LoadConfigFromFile_1  ;; `?<Constant "Tank Washing Machine">`
   \   00000008   4EDF4DE2           SUB      SP,SP,#+312
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000001C   0710A0E1           MOV      R1,R7
   \   00000020   74008DE2           ADD      R0,SP,#+116
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
    117              bool NoError        = true;
   \   00000028   0180A0E3           MOV      R8,#+1
    118              int ErrorLine       = 0;
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   00108DE5           STR      R1,[SP, #+0]
   \   00000034   0190E0E1           MVN      R9,R1
   \   00000038   77AFA0E3           MOV      R10,#+476
    119              int Key;
    120          
    121              do {
    122                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_2:
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   20108DE2           ADD      R1,SP,#+32
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000050   00009DE5           LDR      R0,[SP, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0C00000A           BEQ      ??LoadConfigFromFile_3
    123                  if ( ErrorLine ) {
    124                      if ( ErrorLine != EOF ) {
   \   0000005C   090050E1           CMP      R0,R9
   \   00000060   CC00000A           BEQ      ??LoadConfigFromFile_4
    125                          GiveConfigWarning((AnsiString)PROName, ErrorLine);
   \   00000064   74108DE2           ADD      R1,SP,#+116
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     ??string,??string??rA
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigFromFile_5:
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   C10000EA           B        ??LoadConfigFromFile_4
    126                      }
    127                  } else {
    128                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_3:
   \   00000090   20108DE2           ADD      R1,SP,#+32
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     ??string,??string??rA
   \   0000009C   3C008DE2           ADD      R0,SP,#+60
   \   000000A0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A4   0060A0E1           MOV      R6,R0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   3C008DE2           ADD      R0,SP,#+60
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
    129                      switch ( Key ) {
   \   000000B8   60BFA0E3           MOV      R11,#+384
   \   000000BC   1510A0E3           MOV      R1,#+21
   \   000000C0   501E81E3           ORR      R1,R1,#0x500
   \   000000C4   010056E1           CMP      R6,R1
   \   000000C8   3B00000A           BEQ      ??LoadConfigFromFile_6
   \   000000CC   061081E2           ADD      R1,R1,#+6
   \   000000D0   010056E1           CMP      R6,R1
   \   000000D4   5100000A           BEQ      ??LoadConfigFromFile_7
   \   000000D8   D91F81E2           ADD      R1,R1,#+868
   \   000000DC   010056E1           CMP      R6,R1
   \   000000E0   880E5613           CMPNE    R6,#+2176
   \   000000E4   8800000A           BEQ      ??LoadConfigFromFile_8
   \   000000E8   FB10A0E3           MOV      R1,#+251
   \   000000EC   A81D81E3           ORR      R1,R1,#0x2A00
   \   000000F0   010056E1           CMP      R6,R1
   \   000000F4   A700000A           BEQ      ??LoadConfigFromFile_4
   \   000000F8   011081E2           ADD      R1,R1,#+1
   \   000000FC   010056E1           CMP      R6,R1
   \   00000100   2D00000A           BEQ      ??LoadConfigFromFile_6
   \   00000104   011081E3           ORR      R1,R1,#0x1
   \   00000108   010056E1           CMP      R6,R1
   \   0000010C   6300000A           BEQ      ??LoadConfigFromFile_9
   \   00000110   011081E2           ADD      R1,R1,#+1
   \   00000114   010056E1           CMP      R6,R1
   \   00000118   6600000A           BEQ      ??LoadConfigFromFile_10
   \   0000011C   011081E3           ORR      R1,R1,#0x1
   \   00000120   010056E1           CMP      R6,R1
   \   00000124   7200000A           BEQ      ??LoadConfigFromFile_11
   \   00000128   AC0D56E3           CMP      R6,#+11008
   \   0000012C   8D00000A           BEQ      ??LoadConfigFromFile_12
   \   00000130   021081E2           ADD      R1,R1,#+2
   \   00000134   010056E1           CMP      R6,R1
   \   00000138   9000000A           BEQ      ??LoadConfigFromFile_13
    130                      default:
    131                          GiveConfigWarning((AnsiString)PROName + Name, InputKeyWord, ConfigString.LineCount);
   \   0000013C   20108DE2           ADD      R1,SP,#+32
   \   00000140   90008DE2           ADD      R0,SP,#+144
   \   00000144   ........           _BLF     ??string,??string??rA
   \   00000148   74108DE2           ADD      R1,SP,#+116
   \   0000014C   E4008DE2           ADD      R0,SP,#+228
   \   00000150   ........           _BLF     ??string,??string??rA
   \   00000154   442084E2           ADD      R2,R4,#+68
   \   00000158   E4108DE2           ADD      R1,SP,#+228
   \   0000015C   C8008DE2           ADD      R0,SP,#+200
   \   00000160   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000164   C8108DE2           ADD      R1,SP,#+200
   \   00000168   AC008DE2           ADD      R0,SP,#+172
   \   0000016C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000170   1C2095E5           LDR      R2,[R5, #+28]
   \   00000174   90108DE2           ADD      R1,SP,#+144
   \   00000178   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0110A0E3           MOV      R1,#+1
   \   00000184   90008DE2           ADD      R0,SP,#+144
   \   00000188   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0110A0E3           MOV      R1,#+1
   \   00000194   AC008DE2           ADD      R0,SP,#+172
   \   00000198   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   C8008DE2           ADD      R0,SP,#+200
   \   000001A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   E4008DE2           ADD      R0,SP,#+228
   \   000001B8   B2FFFFEA           B        ??LoadConfigFromFile_5
    132                          break;
    133                      case C_PRO_NAME     :
    134          			case TWM_IDENTIFIER :
    135                          Name = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_6:
   \   000001BC   0030A0E3           MOV      R3,#+0
   \   000001C0   0D20A0E1           MOV      R2,SP
   \   000001C4   401F8DE2           ADD      R1,SP,#+256
   \   000001C8   0500A0E1           MOV      R0,R5
   \   000001CC   ........           _BLF     ??NextWord,??NextWord??rA
   \   000001D0   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   00B090E5           LDR      R11,[R0, #+0]
   \   000001DC   401F8DE2           ADD      R1,SP,#+256
   \   000001E0   0B30A0E1           MOV      R3,R11
   \   000001E4   440084E2           ADD      R0,R4,#+68
   \   000001E8   ........           _BLF     ??assign,??assign??rA
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   400F8DE2           ADD      R0,SP,#+256
   \   000001F8   ........           _BLF     ??_Tidy,??_Tidy??rA
    136                          if ( !ErrorLine ) {
   \   000001FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000200   000050E3           CMP      R0,#+0
   \   00000204   6300001A           BNE      ??LoadConfigFromFile_4
    137                              twm.Identifier = Name;
   \   00000208   0B30A0E1           MOV      R3,R11
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   441084E2           ADD      R1,R4,#+68
   \   00000214   590F84E2           ADD      R0,R4,#+356
   \   00000218   ........           _BLF     ??assign,??assign??rA
   \   0000021C   5D0000EA           B        ??LoadConfigFromFile_4
    138                          }
    139                          break;
    140                      case C_PRO_ID_NUMBER:
    141                          IDNumber = (unsigned)ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigFromFile_7:
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0D10A0E1           MOV      R1,SP
   \   00000228   0500A0E1           MOV      R0,R5
   \   0000022C   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000230   9C0084E5           STR      R0,[R4, #+156]
    142          
    143                          if ( !ErrorLine ) {
   \   00000234   00009DE5           LDR      R0,[SP, #+0]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   5500001A           BNE      ??LoadConfigFromFile_4
    144                              // Check and correct IDNumber if incorrect
    145                              if ( IDNumber >> 16 != C_PRO_TANK_WASH_MACHINE ) {
   \   00000240   9C0094E5           LDR      R0,[R4, #+156]
   \   00000244   6F1FA0E3           MOV      R1,#+444
   \   00000248   7520A0E3           MOV      R2,#+117
   \   0000024C   402E82E3           ORR      R2,R2,#0x400
   \   00000250   200852E1           CMP      R2,R0, LSR #+16
   \   00000254   040081E7           STR      R0,[R1, +R4]
   \   00000258   4E00000A           BEQ      ??LoadConfigFromFile_4
    146                                  twm.IDNumber = unsigned(IDNumber);
    147                                  AnsiString warning = "Tank washing machine IDNumber not correct";
   \   0000025C   181087E2           ADD      R1,R7,#+24
   \   00000260   58008DE2           ADD      R0,SP,#+88
   \   00000264   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
    148                                  GiveConfigWarning(warning, ErrorLine);
   \   00000268   58108DE2           ADD      R1,SP,#+88
   \   0000026C   04008DE2           ADD      R0,SP,#+4
   \   00000270   ........           _BLF     ??string,??string??rA
   \   00000274   00109DE5           LDR      R1,[SP, #+0]
   \   00000278   04008DE2           ADD      R0,SP,#+4
   \   0000027C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   04008DE2           ADD      R0,SP,#+4
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
    149                              } else {
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   58008DE2           ADD      R0,SP,#+88
   \   0000029C   79FFFFEA           B        ??LoadConfigFromFile_5
    150                                  twm.IDNumber = (unsigned)IDNumber;
    151                              }
    152                          }
    153                          break;
    154                      case TWM_NOZZLE_DIAMETER_MM:
    155                          twm.NozzleDiameter_mm = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigFromFile_9:
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0D10A0E1           MOV      R1,SP
   \   000002A8   0500A0E1           MOV      R0,R5
   \   000002AC   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   000002B0   D40184E5           STR      R0,[R4, #+468]
   \   000002B4   370000EA           B        ??LoadConfigFromFile_4
    156                          break;
    157                      case TWM_SERIAL_ID:
    158                          twm.SerialId = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_10:
   \   000002B8   0030A0E3           MOV      R3,#+0
   \   000002BC   0D20A0E1           MOV      R2,SP
   \   000002C0   471F8DE2           ADD      R1,SP,#+284
   \   000002C4   0500A0E1           MOV      R0,R5
   \   000002C8   ........           _BLF     ??NextWord,??NextWord??rA
   \   000002CC   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   003090E5           LDR      R3,[R0, #+0]
   \   000002D8   471F8DE2           ADD      R1,SP,#+284
   \   000002DC   04008BE0           ADD      R0,R11,R4
   \   000002E0   ........           _BLF     ??assign,??assign??rA
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0110A0E3           MOV      R1,#+1
   \   000002EC   470F8DE2           ADD      R0,SP,#+284
   \   000002F0   64FFFFEA           B        ??LoadConfigFromFile_5
    159                         break;
    160                      case TWM_MACHINE_TYPE_ID:
    161                          twm.MachineTypeId = (int)ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigFromFile_11:
   \   000002F4   0020A0E3           MOV      R2,#+0
   \   000002F8   0D10A0E1           MOV      R1,SP
   \   000002FC   0500A0E1           MOV      R0,R5
   \   00000300   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000304   C00184E5           STR      R0,[R4, #+448]
   \   00000308   220000EA           B        ??LoadConfigFromFile_4
    162                          break;
    163                      case C_AI_WashTrackSensor:
    164          			case C_AI_WashTrackSensor2:
    165                          WashTrackSnsPtr = new AiWashTrackSensor;
   \                     ??LoadConfigFromFile_8:
   \   0000030C   ........           _BLF     `??new AiWashTrackSensor`,`??new AiWashTrackSensor??rA`
   \   00000310   E40184E5           STR      R0,[R4, #+484]
    166                          NoError =  WashTrackSnsPtr->LoadConfigString(ConfigString);
   \   00000314   A42090E5           LDR      R2,[R0, #+164]
   \   00000318   0510A0E1           MOV      R1,R5
   \   0000031C   102092E5           LDR      R2,[R2, #+16]
   \   00000320   0FE0A0E1           MOV      LR,PC
   \   00000324   12FF2FE1           BX       R2
   \   00000328   0080B0E1           MOVS     R8,R0
    167                          if ( NoError ) {
   \   0000032C   1900000A           BEQ      ??LoadConfigFromFile_4
    168                              AnalogInList.push_back((AnalogInput *)WashTrackSnsPtr);
   \   00000330   E41194E5           LDR      R1,[R4, #+484]
   \   00000334   4B0F84E2           ADD      R0,R4,#+300
   \   00000338   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_2
    169          					twm.SerialId = WashTrackSnsPtr->SerialNumber;
   \   0000033C   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   003090E5           LDR      R3,[R0, #+0]
   \   00000348   E40194E5           LDR      R0,[R4, #+484]
   \   0000034C   D81080E2           ADD      R1,R0,#+216
   \   00000350   04008BE0           ADD      R0,R11,R4
   \   00000354   ........           _BLF     ??assign,??assign??rA
    170                              WashTrackSnsPtr->SetPROPtr(this);
   \   00000358   E40194E5           LDR      R0,[R4, #+484]
   \   0000035C   0410A0E1           MOV      R1,R4
   \   00000360   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
   \   00000364   0B0000EA           B        ??LoadConfigFromFile_4
    171          				}
    172                          break;
    173                      case TWM_NUMBER_OF_NOZZLES:
    174                          twm.NumberOfNozzles = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigFromFile_12:
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   0D10A0E1           MOV      R1,SP
   \   00000370   0500A0E1           MOV      R0,R5
   \   00000374   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000378   D80184E5           STR      R0,[R4, #+472]
   \   0000037C   050000EA           B        ??LoadConfigFromFile_4
    175                          break;
    176                      case TWM_GEAR_RATIO:
    177          				twm.GearRatio = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_13:
   \   00000380   0020A0E3           MOV      R2,#+0
   \   00000384   0D10A0E1           MOV      R1,SP
   \   00000388   0500A0E1           MOV      R0,R5
   \   0000038C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000390   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000394   04008AE7           STR      R0,[R10, +R4]
    178                          break;
    179                      case TWM_END_TANK_WASHING_MACHINE:
    180                          break;
    181                      }
    182                  }
    183              }while ( NoError && (ErrorLine != EOF) && (Key != TWM_END_TANK_WASHING_MACHINE) );
   \                     ??LoadConfigFromFile_4:
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0110A0E3           MOV      R1,#+1
   \   000003A0   20008DE2           ADD      R0,SP,#+32
   \   000003A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A8   000058E3           CMP      R8,#+0
   \   000003AC   8C00000A           BEQ      ??LoadConfigFromFile_14
   \   000003B0   00009DE5           LDR      R0,[SP, #+0]
   \   000003B4   090050E1           CMP      R0,R9
   \   000003B8   FB00A013           MOVNE    R0,#+251
   \   000003BC   A80D8013           ORRNE    R0,R0,#0x2A00
   \   000003C0   00005611           CMPNE    R6,R0
   \   000003C4   1CFFFF1A           BNE      ??LoadConfigFromFile_2
    184              if ( NoError ) {
    185                  if ( Name.IsEmpty() ) {
   \   000003C8   440084E2           ADD      R0,R4,#+68
   \   000003CC   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   1000000A           BEQ      ??LoadConfigFromFile_15
    186                      AnsiString warning = "Tank washing machine Name not declared";
   \   000003D8   441087E2           ADD      R1,R7,#+68
   \   000003DC   20008DE2           ADD      R0,SP,#+32
   \   000003E0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
    187                      GiveConfigWarning(warning, ConfigString.LineCount);
   \   000003E4   20108DE2           ADD      R1,SP,#+32
   \   000003E8   04008DE2           ADD      R0,SP,#+4
   \   000003EC   ........           _BLF     ??string,??string??rA
   \   000003F0   1C1095E5           LDR      R1,[R5, #+28]
   \   000003F4   04008DE2           ADD      R0,SP,#+4
   \   000003F8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   0110A0E3           MOV      R1,#+1
   \   00000404   04008DE2           ADD      R0,SP,#+4
   \   00000408   ........           _BLF     ??_Tidy,??_Tidy??rA
    188                  } else {
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0110A0E3           MOV      R1,#+1
   \   00000414   20008DE2           ADD      R0,SP,#+32
   \   00000418   700000EA           B        ??LoadConfigFromFile_16
    189                      if ( WashTrackSnsPtr ) {
   \                     ??LoadConfigFromFile_15:
   \   0000041C   E40194E5           LDR      R0,[R4, #+484]
   \   00000420   000050E3           CMP      R0,#+0
   \   00000424   1800001A           BNE      ??LoadConfigFromFile_17
    190                          //WashTrackSnsPtr->Name = Name;
    191                      } else {
    192                          AnsiString warning = "Tank washing sensor not declared for " + Name;
   \   00000428   442084E2           ADD      R2,R4,#+68
   \   0000042C   6C1087E2           ADD      R1,R7,#+108
   \   00000430   04008DE2           ADD      R0,SP,#+4
   \   00000434   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000438   04108DE2           ADD      R1,SP,#+4
   \   0000043C   3C008DE2           ADD      R0,SP,#+60
   \   00000440   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   0110A0E3           MOV      R1,#+1
   \   0000044C   04008DE2           ADD      R0,SP,#+4
   \   00000450   ........           _BLF     ??_Tidy,??_Tidy??rA
    193                          GiveConfigWarning(warning, ConfigString.LineCount);
   \   00000454   3C108DE2           ADD      R1,SP,#+60
   \   00000458   20008DE2           ADD      R0,SP,#+32
   \   0000045C   ........           _BLF     ??string,??string??rA
   \   00000460   1C1095E5           LDR      R1,[R5, #+28]
   \   00000464   20008DE2           ADD      R0,SP,#+32
   \   00000468   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   20008DE2           ADD      R0,SP,#+32
   \   00000478   ........           _BLF     ??_Tidy,??_Tidy??rA
    194                      }
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   3C008DE2           ADD      R0,SP,#+60
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
    195          
    196          			if ( !twm.NumberOfNozzles ) {
   \                     ??LoadConfigFromFile_17:
   \   0000048C   D80194E5           LDR      R0,[R4, #+472]
   \   00000490   000050E3           CMP      R0,#+0
   \   00000494   1800001A           BNE      ??LoadConfigFromFile_18
    197          				AnsiString warning = "Number of nozzles not declared for " + Name;
   \   00000498   442084E2           ADD      R2,R4,#+68
   \   0000049C   941087E2           ADD      R1,R7,#+148
   \   000004A0   04008DE2           ADD      R0,SP,#+4
   \   000004A4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000004A8   04108DE2           ADD      R1,SP,#+4
   \   000004AC   3C008DE2           ADD      R0,SP,#+60
   \   000004B0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   0110A0E3           MOV      R1,#+1
   \   000004BC   04008DE2           ADD      R0,SP,#+4
   \   000004C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    198          				GiveConfigWarning(warning, ConfigString.LineCount);
   \   000004C4   3C108DE2           ADD      R1,SP,#+60
   \   000004C8   20008DE2           ADD      R0,SP,#+32
   \   000004CC   ........           _BLF     ??string,??string??rA
   \   000004D0   1C1095E5           LDR      R1,[R5, #+28]
   \   000004D4   20008DE2           ADD      R0,SP,#+32
   \   000004D8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000004DC   0020A0E3           MOV      R2,#+0
   \   000004E0   0110A0E3           MOV      R1,#+1
   \   000004E4   20008DE2           ADD      R0,SP,#+32
   \   000004E8   ........           _BLF     ??_Tidy,??_Tidy??rA
    199          			}
   \   000004EC   0020A0E3           MOV      R2,#+0
   \   000004F0   0110A0E3           MOV      R1,#+1
   \   000004F4   3C008DE2           ADD      R0,SP,#+60
   \   000004F8   ........           _BLF     ??_Tidy,??_Tidy??rA
    200          			if ( !twm.NozzleDiameter_mm ) {
   \                     ??LoadConfigFromFile_18:
   \   000004FC   D40194E5           LDR      R0,[R4, #+468]
   \   00000500   000050E3           CMP      R0,#+0
   \   00000504   1800001A           BNE      ??LoadConfigFromFile_19
    201          				AnsiString warning = "Nozzle diameter not declared for " + Name;
   \   00000508   442084E2           ADD      R2,R4,#+68
   \   0000050C   B81087E2           ADD      R1,R7,#+184
   \   00000510   04008DE2           ADD      R0,SP,#+4
   \   00000514   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000518   04108DE2           ADD      R1,SP,#+4
   \   0000051C   3C008DE2           ADD      R0,SP,#+60
   \   00000520   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000524   0020A0E3           MOV      R2,#+0
   \   00000528   0110A0E3           MOV      R1,#+1
   \   0000052C   04008DE2           ADD      R0,SP,#+4
   \   00000530   ........           _BLF     ??_Tidy,??_Tidy??rA
    202          				GiveConfigWarning(warning, ConfigString.LineCount);
   \   00000534   3C108DE2           ADD      R1,SP,#+60
   \   00000538   20008DE2           ADD      R0,SP,#+32
   \   0000053C   ........           _BLF     ??string,??string??rA
   \   00000540   1C1095E5           LDR      R1,[R5, #+28]
   \   00000544   20008DE2           ADD      R0,SP,#+32
   \   00000548   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000054C   0020A0E3           MOV      R2,#+0
   \   00000550   0110A0E3           MOV      R1,#+1
   \   00000554   20008DE2           ADD      R0,SP,#+32
   \   00000558   ........           _BLF     ??_Tidy,??_Tidy??rA
    203          			}
   \   0000055C   0020A0E3           MOV      R2,#+0
   \   00000560   0110A0E3           MOV      R1,#+1
   \   00000564   3C008DE2           ADD      R0,SP,#+60
   \   00000568   ........           _BLF     ??_Tidy,??_Tidy??rA
    204          			if ( !twm.GearRatio ) {
   \                     ??LoadConfigFromFile_19:
   \   0000056C   04109AE7           LDR      R1,[R10, +R4]
   \   00000570   0000A0E3           MOV      R0,#+0
   \   00000574   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000578   000050E3           CMP      R0,#+0
   \   0000057C   1800001A           BNE      ??LoadConfigFromFile_14
    205          				 AnsiString warning = "Gear ratio not declared for " + Name;
   \   00000580   442084E2           ADD      R2,R4,#+68
   \   00000584   DC1087E2           ADD      R1,R7,#+220
   \   00000588   20008DE2           ADD      R0,SP,#+32
   \   0000058C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000590   20108DE2           ADD      R1,SP,#+32
   \   00000594   3C008DE2           ADD      R0,SP,#+60
   \   00000598   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   20008DE2           ADD      R0,SP,#+32
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    206          				 GiveConfigWarning(warning, ConfigString.LineCount);
   \   000005AC   3C108DE2           ADD      R1,SP,#+60
   \   000005B0   04008DE2           ADD      R0,SP,#+4
   \   000005B4   ........           _BLF     ??string,??string??rA
   \   000005B8   1C1095E5           LDR      R1,[R5, #+28]
   \   000005BC   04008DE2           ADD      R0,SP,#+4
   \   000005C0   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000005C4   0020A0E3           MOV      R2,#+0
   \   000005C8   0110A0E3           MOV      R1,#+1
   \   000005CC   04008DE2           ADD      R0,SP,#+4
   \   000005D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    207                      }
   \   000005D4   0020A0E3           MOV      R2,#+0
   \   000005D8   0110A0E3           MOV      R1,#+1
   \   000005DC   3C008DE2           ADD      R0,SP,#+60
   \                     ??LoadConfigFromFile_16:
   \   000005E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    208          #ifdef ANWIN
    209                      TankWashingAPI twmAPI;
    210          			NoError = twmAPI.InitTWMinDatabase(twm);
    211          #endif
    212                  }
    213              }
    214              return (NoError);
   \                     ??LoadConfigFromFile_14:
   \   000005E4   0020A0E3           MOV      R2,#+0
   \   000005E8   0110A0E3           MOV      R1,#+1
   \   000005EC   74008DE2           ADD      R0,SP,#+116
   \   000005F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005F4   0800A0E1           MOV      R0,R8
   \   000005F8   4EDF8DE2           ADD      SP,SP,#+312
   \   000005FC   ........           B        ?Subroutine30
   \                     ??LoadConfigFromFile_1:
   \   00000600   ........           DC32     `?<Constant "Tank Washing Machine">`
    215          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    216          /*
    217          void PROTankWashingMachine::SetProList(void)
    218          {
    219          }
    220          
    221          
    222          void PROTankWashingMachine::SetAllProList(void)
    223          {
    224              set<PRogramObjectBase*>::iterator pBIt;
    225              for ( pBIt=ObjectSet.begin(); pBIt!=ObjectSet.end(); pBIt++ ) {
    226                  ((PROTankWashingMachine*)(*pBIt))->SetProList();
    227              }
    228          }
    229          */
    230          ///////////////////////////////////////////////////////////////
    231          //
    232          // Routines for the librarian
    233          //
    234          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    235          int PROTankWashingMachine::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
    236              int PROStatus1 = ST_OK;
    237              int PROStatus2 = ST_OK;
    238          
    239              if ( HWFailure ) {
   \   0000000C   3C00D5E5           LDRB     R0,[R5, #+60]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   3DA0A0E3           MOV      R10,#+61
   \   00000018   F0AE8AE3           ORR      R10,R10,#0xF00
   \   0000001C   0A40A0E1           MOV      R4,R10
   \   00000020   047084E2           ADD      R7,R4,#+4
   \   00000024   000050E3           CMP      R0,#+0
    240                  PROStatus1 = ST_ERROR;
   \   00000028   0740A011           MOVNE    R4,R7
   \   0000002C   2800001A           BNE      ??FindPROStatus_1
    241              }
    242              if ( PROStatus1 != ST_ERROR ) {
    243                  for ( unsigned i = 0; i < AnalogInList.size() && (PROStatus1 != ST_ERROR); i++ ) {
   \   00000030   0090A0E3           MOV      R9,#+0
   \   00000034   4B8FA0E3           MOV      R8,#+300
   \   00000038   0B0000EA           B        ??FindPROStatus_2
    244                      PROStatus2 = AnalogInList[i]->FindPROStatus(MyString);
   \                     ??FindPROStatus_3:
   \   0000003C   050098E7           LDR      R0,[R8, +R5]
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   092190E7           LDR      R2,[R0, +R9, LSL #+2]
    245                      if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
    246                  }
   \   00000048   019089E2           ADD      R9,R9,#+1
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   A42092E5           LDR      R2,[R2, #+164]
   \   00000054   1C2092E5           LDR      R2,[R2, #+28]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   12FF2FE1           BX       R2
   \   00000060   00A0A0E1           MOV      R10,R0
   \   00000064   0A0054E1           CMP      R4,R10
   \   00000068   0A40A0B1           MOVLT    R4,R10
   \                     ??FindPROStatus_2:
   \   0000006C   050088E0           ADD      R0,R8,R5
   \   00000070   041090E5           LDR      R1,[R0, #+4]
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000041E0           SUB      R0,R1,R0
   \   0000007C   200159E1           CMP      R9,R0, LSR #+2
   \   00000080   0100002A           BCS      ??FindPROStatus_4
   \   00000084   070054E1           CMP      R4,R7
   \   00000088   EBFFFF1A           BNE      ??FindPROStatus_3
    247              }
    248              if ( PROStatus1 != ST_ERROR ) {
   \                     ??FindPROStatus_4:
   \   0000008C   070054E1           CMP      R4,R7
   \   00000090   0F00000A           BEQ      ??FindPROStatus_1
    249                  bool AlActive = false;
    250                  set<AlarmBasic *>::iterator pBIt;
    251                  for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   00000094   E40095E5           LDR      R0,[R5, #+228]
   \   00000098   0070A0E3           MOV      R7,#+0
   \   0000009C   050000EA           B        ??FindPROStatus_5
    252                      AlarmBasic *Element = *pBIt;
   \                     ??FindPROStatus_6:
   \   000000A0   101090E5           LDR      R1,[R0, #+16]
    253                      if ( Element && (Element->State != AlarmBasic::AlIdle) ) AlActive = true;
   \   000000A4   000051E3           CMP      R1,#+0
   \   000000A8   E010D115           LDRBNE   R1,[R1, #+224]
   \   000000AC   00005113           CMPNE    R1,#+0
   \   000000B0   0170A013           MOVNE    R7,#+1
    254                  }
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??FindPROStatus_5:
   \   000000B8   E41085E2           ADD      R1,R5,#+228
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   F6FFFF1A           BNE      ??FindPROStatus_6
    255                  if ( AlActive )	PROStatus2 = ST_ALARM;
   \   000000C4   000057E3           CMP      R7,#+0
   \   000000C8   F4AEA013           MOVNE    R10,#+3904
    256                  if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
   \   000000CC   0A0054E1           CMP      R4,R10
   \   000000D0   0A40A0B1           MOVLT    R4,R10
    257              }
    258              MyString = FindStatusChar(PROStatus1);
   \                     ??FindPROStatus_1:
   \   000000D4   0420A0E1           MOV      R2,R4
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   000000E4   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   003090E5           LDR      R3,[R0, #+0]
   \   000000F0   0D10A0E1           MOV      R1,SP
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           _BLF     ??assign,??assign??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
    259              return (PROStatus1);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   1CD08DE2           ADD      SP,SP,#+28
   \   00000114   F047BDE8           POP      {R4-R10,LR}
   \   00000118   1EFF2FE1           BX       LR               ;; return
    260          }
    261          
    262          
    263          
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          int PROTankWashingMachine::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   04D04DE2           SUB      SP,SP,#+4
    266              int ErrorStatus = E_OK;
    267          
    268              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    269              switch ( pCH->CommandNo ) {
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000010   650052E3           CMP      R2,#+101
   \   00000014   1900001A           BNE      ??ReceiveData_1
    270              case CMD_GENERIC_REALTIME_DATA:
    271                  {
    272                      ANPRO10_COMMAND_2140  *pData = (ANPRO10_COMMAND_2140 *)data;
    273                      // pData->NotEmptyTank #### check
    274                      HWFailure     = pData->HWFailure;
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
    275                      IsNewData     = pData->IsNewData;
    276                      Speed         = pData->Speed;
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   3C20C0E5           STRB     R2,[R0, #+60]
   \   00000024   0E20D1E5           LDRB     R2,[R1, #+14]
   \   00000028   E020C0E5           STRB     R2,[R0, #+224]
   \   0000002C   0020A0E3           MOV      R2,#+0
   \                     ??ReceiveData_2:
   \   00000030   0FC081E2           ADD      R12,R1,#+15
   \   00000034   0CC0D2E7           LDRB     R12,[R2, +R12]
   \   00000038   03C0C2E7           STRB     R12,[R2, +R3]
   \   0000003C   012082E2           ADD      R2,R2,#+1
   \   00000040   040052E3           CMP      R2,#+4
   \   00000044   F9FFFFBA           BLT      ??ReceiveData_2
   \   00000048   00209DE5           LDR      R2,[SP, #+0]
   \   0000004C   5C2180E5           STR      R2,[R0, #+348]
    277                      machineStatus = (tcm_operation_status)pData->machineStatus;
   \   00000050   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000054   0422C0E5           STRB     R2,[R0, #+516]
    278                      RunningTime   = pData->RunningTime;
   \   00000058   1620D1E5           LDRB     R2,[R1, #+22]
   \   0000005C   1530D1E5           LDRB     R3,[R1, #+21]
   \   00000060   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000064   1430D1E5           LDRB     R3,[R1, #+20]
   \   00000068   1310D1E5           LDRB     R1,[R1, #+19]
   \   0000006C   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000070   021481E1           ORR      R1,R1,R2, LSL #+8
   \   00000074   601180E5           STR      R1,[R0, #+352]
    279                      ErrorStatus   = E_OK;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   000000EA           B        ??ReceiveData_3
    280                  }
    281          #ifdef ANWIN
    282                  if ( machineStatus == tcmos_running ) {
    283                      // Start machine (unless it is already running, the function handles this):
    284                      int newTankWashRunId = 0;
    285                      TankWashingAPI::StartWashingRunIfIdle(IDNumber, newTankWashRunId);
    286                  } else {
    287                      // Stop the machine unless it is already stopped:
    288                      TankWashingAPI::FinishWashingRunIfRunningOrError(IDNumber, false);
    289                  }
    290          #endif
    291                  break;
    292              case CMD_GENERIC_STATIC_DATA:
    293              default:
    294                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_1:
   \   00000080   0100A0E3           MOV      R0,#+1
    295                  break;
    296              }
    297              return (ErrorStatus);
   \                     ??ReceiveData_3:
   \   00000084   0200BDE8           POP      {R1}
   \   00000088   1EFF2FE1           BX       LR               ;; return
    298          }
    299          

   \                                 In segment CODE, align 4, keep-with-next
    300          int PROTankWashingMachine::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
    301              int ErrorStatus = E_OK;
    302              switch ( cmd ) {
   \   00000008   650051E3           CMP      R1,#+101
   \   0000000C   2F00001A           BNE      ??SendData_1
    303              case CMD_GENERIC_REALTIME_DATA:
    304                  {
    305                      QueueANPRO10_COMMAND_2140 Cmd;
    306                      Cmd.TxInfo.Port         = NULL;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    307                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   0420CDE5           STRB     R2,[SP, #+4]
    308                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   00000020   0E20A0E3           MOV      R2,#+14
   \   00000024   0520CDE5           STRB     R2,[SP, #+5]
    309                      Cmd.Data.ObjectId       = IDNumber;
   \   00000028   9C1090E5           LDR      R1,[R0, #+156]
    310                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000002C   1320A0E3           MOV      R2,#+19
   \   00000030   0A10CDE5           STRB     R1,[SP, #+10]
   \   00000034   2114A0E1           LSR      R1,R1,#+8
   \   00000038   0B10CDE5           STRB     R1,[SP, #+11]
   \   0000003C   2114A0E1           LSR      R1,R1,#+8
   \   00000040   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000044   2114A0E1           LSR      R1,R1,#+8
   \   00000048   0D10CDE5           STRB     R1,[SP, #+13]
   \   0000004C   B820CDE1           STRH     R2,[SP, #+8]
    311                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000050   6520A0E3           MOV      R2,#+101
   \   00000054   B620CDE1           STRH     R2,[SP, #+6]
    312                      Cmd.Data.HWFailure      = HWFailure;
   \   00000058   3C20D0E5           LDRB     R2,[R0, #+60]
   \   0000005C   1320CDE5           STRB     R2,[SP, #+19]
    313                      Cmd.Data.IsNewData      = IsNewData;
   \   00000060   E020D0E5           LDRB     R2,[R0, #+224]
   \   00000064   1420CDE5           STRB     R2,[SP, #+20]
    314                      Cmd.Data.machineStatus  = machineStatus;
   \   00000068   0412D0E5           LDRB     R1,[R0, #+516]
    315                      Cmd.Data.Speed          = Speed;
   \   0000006C   15208DE2           ADD      R2,SP,#+21
   \   00000070   0E10CDE5           STRB     R1,[SP, #+14]
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   0F10CDE5           STRB     R1,[SP, #+15]
   \   0000007C   B011CDE1           STRH     R1,[SP, #+16]
   \                     ??SendData_2:
   \   00000080   573F80E2           ADD      R3,R0,#+348
   \   00000084   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000088   0230C1E7           STRB     R3,[R1, +R2]
   \   0000008C   011081E2           ADD      R1,R1,#+1
   \   00000090   040051E3           CMP      R1,#+4
   \   00000094   F9FFFFBA           BLT      ??SendData_2
    316                      Cmd.Data.RunningTime    = RunningTime;
   \   00000098   600190E5           LDR      R0,[R0, #+352]
   \   0000009C   1900CDE5           STRB     R0,[SP, #+25]
   \   000000A0   2004A0E1           LSR      R0,R0,#+8
   \   000000A4   1A00CDE5           STRB     R0,[SP, #+26]
   \   000000A8   2004A0E1           LSR      R0,R0,#+8
   \   000000AC   1B00CDE5           STRB     R0,[SP, #+27]
   \   000000B0   2004A0E1           LSR      R0,R0,#+8
   \   000000B4   1C00CDE5           STRB     R0,[SP, #+28]
    317          
    318                      bool sent = ANPRO10SendNormal(&Cmd);
    319                      if ( !sent ) ErrorStatus =  E_QUEUE_FULL;
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0000A013           MOVNE    R0,#+0
   \   000000C8   0300A003           MOVEQ    R0,#+3
   \   000000CC   000000EA           B        ??SendData_3
    320                      else ErrorStatus =  E_OK;
    321                  }
    322                  break;
    323              case CMD_GENERIC_STATIC_DATA:
    324              default:
    325                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_1:
   \   000000D0   0100A0E3           MOV      R0,#+1
    326                  break;
    327              }
    328              return (ErrorStatus);
   \                     ??SendData_3:
   \   000000D4   20D08DE2           ADD      SP,SP,#+32
   \   000000D8   ........           B        ?Subroutine31
    329          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    330          

   \                                 In segment CODE, align 4, keep-with-next
    331          float PROTankWashingMachine::FilterValue(float FilteredValue, float RawVal, float FilterDegree) {
   \                     ??FilterValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0160A0E1           MOV      R6,R1
   \   00000008   0270A0E1           MOV      R7,R2
   \   0000000C   0300A0E1           MOV      R0,R3
    332              return FilteredValue + (RawVal - FilteredValue) / (FilterDegree + 1.0);
   \   00000010   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   C035A0E3           MOV      R3,#+805306368
   \   0000001C   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000020   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000024   0040A0E1           MOV      R4,R0
   \   00000028   0150A0E1           MOV      R5,R1
   \   0000002C   0700A0E1           MOV      R0,R7
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   0530A0E1           MOV      R3,R5
   \   00000044   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   0150A0E1           MOV      R5,R1
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0530A0E1           MOV      R3,R5
   \   00000060   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000064   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
    333          }
    334          
    335          

   \                                 In segment CODE, align 4, keep-with-next
    336          void PROTankWashingMachine::Calculate(void) {
   \                     ??Calculate:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0040A0E1           MOV      R4,R0
    337          #ifdef S2TXU
    338              if ( WashTrackSnsPtr ) {
   \   0000000C   E41194E5           LDR      R1,[R4, #+484]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   9000000A           BEQ      ??Calculate_1
    339                  Speed = WashTrackSnsPtr->Calculate() / twm.GearRatio;
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   A41091E5           LDR      R1,[R1, #+164]
   \   00000020   601091E5           LDR      R1,[R1, #+96]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   11FF2FE1           BX       R1
   \   0000002C   DC1194E5           LDR      R1,[R4, #+476]
   \   00000030   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000034   5C0184E5           STR      R0,[R4, #+348]
    340                  if ( OS_GetTime() > 20000 ) {
   \   00000038   ........           LDR      R0,??Subroutine28_0  ;; OS_Time
   \   0000003C   2110A0E3           MOV      R1,#+33
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   4E1C81E3           ORR      R1,R1,#0x4E00
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   820000BA           BLT      ??Calculate_1
    341                      time_t Now = time(NULL);
    342                      // Only start if above the speed which will trigger low speed alarm
    343                      if ( Speed > MIN_TWM_SPEED ) {
   \   00000050   ........           LDR      R7,??Subroutine28_0+0x4  ;; `?<Constant "Enabled">`
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   ........           _BLF     time,??time??rA
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   5C0194E5           LDR      R0,[R4, #+348]
   \   00000064   3E60A0E3           MOV      R6,#+62
   \   00000068   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000006C   ........           LDR      R2,??Subroutine28_0+0x8  ;; 0xffffffff9999999b
   \   00000070   ........           LDR      R3,??Subroutine28_0+0xC  ;; 0x3fc99999
   \   00000074   8C6D86E3           ORR      R6,R6,#0x2300
   \   00000078   0080A0E3           MOV      R8,#+0
   \   0000007C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   3100000A           BEQ      ??Calculate_2
    344                          if ( machineStatus == tcmos_idle ) {
   \   00000088   0402D4E5           LDRB     R0,[R4, #+516]
   \   0000008C   010050E3           CMP      R0,#+1
   \   00000090   1E00001A           BNE      ??Calculate_3
    345                              // Start machine (unless it is already running, the function handles this):
    346                              int newTankWashRunId = 0;
   \   00000094   00808DE5           STR      R8,[SP, #+0]
    347                              TankWashingAPI::StartWashingRunIfIdle(IDNumber, newTankWashRunId);
   \   00000098   9C0094E5           LDR      R0,[R4, #+156]
   \   0000009C   0D10A0E1           MOV      R1,SP
   \   000000A0   ........           _BLF     ??StartWashingRunIfIdle,??StartWashingRunIfIdle??rA
    348                              machineStatus = tcmos_running;
   \   000000A4   0482C4E5           STRB     R8,[R4, #+516]
    349                              LibPutValue(SVT_AL_ENABLE, TCMLowSpeedPtr           , "Enabled");
   \   000000A8   0710A0E1           MOV      R1,R7
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B4   181294E5           LDR      R1,[R4, #+536]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   0030A0E3           MOV      R3,#+0
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000000C8   0820A0E1           MOV      R2,R8
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   04008DE2           ADD      R0,SP,#+4
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
    350                              LibPutValue(SVT_AL_ENABLE, TCMPresetTimePassedPtr   , "Enabled");
   \   000000D8   0710A0E1           MOV      R1,R7
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000E4   1C1294E5           LDR      R1,[R4, #+540]
   \   000000E8   0830A0E1           MOV      R3,R8
   \   000000EC   0020A0E1           MOV      R2,R0
   \   000000F0   0600A0E1           MOV      R0,R6
   \   000000F4   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000000F8   0820A0E1           MOV      R2,R8
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   20008DE2           ADD      R0,SP,#+32
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
    351                              TotalRunningTime    = 0;
   \   00000108   148284E5           STR      R8,[R4, #+532]
    352                              TotalIdleTime       = 0;
   \   0000010C   0C8284E5           STR      R8,[R4, #+524]
    353                          }
    354                          if ( !RunningTimeStart ) {
   \                     ??Calculate_3:
   \   00000110   100294E5           LDR      R0,[R4, #+528]
   \   00000114   000050E3           CMP      R0,#+0
    355                              RunningTimeStart = Now;
   \   00000118   10528405           STREQ    R5,[R4, #+528]
    356                          }
    357                          if ( IdleTimeStart ) {
   \   0000011C   080294E5           LDR      R0,[R4, #+520]
   \   00000120   000050E3           CMP      R0,#+0
    358                              TotalIdleTime += Now - IdleTimeStart;
   \   00000124   0C129415           LDRNE    R1,[R4, #+524]
   \   00000128   01108510           ADDNE    R1,R5,R1
   \   0000012C   00004110           SUBNE    R0,R1,R0
   \   00000130   0C028415           STRNE    R0,[R4, #+524]
    359                              IdleTimeStart = 0;
   \   00000134   08828415           STRNE    R8,[R4, #+520]
    360                          }
    361                          RunningTime = Now - RunningTimeStart + TotalRunningTime;
   \   00000138   100294E5           LDR      R0,[R4, #+528]
   \   0000013C   141294E5           LDR      R1,[R4, #+532]
   \   00000140   000045E0           SUB      R0,R5,R0
   \   00000144   000081E0           ADD      R0,R1,R0
   \   00000148   600184E5           STR      R0,[R4, #+352]
   \   0000014C   3C0000EA           B        ??Calculate_4
    362                      } else {
    363                          if ( RunningTimeStart ) {
   \                     ??Calculate_2:
   \   00000150   100294E5           LDR      R0,[R4, #+528]
   \   00000154   000050E3           CMP      R0,#+0
    364                              TotalRunningTime += Now - RunningTimeStart;
   \   00000158   14129415           LDRNE    R1,[R4, #+532]
   \   0000015C   01108510           ADDNE    R1,R5,R1
   \   00000160   00004110           SUBNE    R0,R1,R0
   \   00000164   14028415           STRNE    R0,[R4, #+532]
    365                              RunningTimeStart = 0;
   \   00000168   10828415           STRNE    R8,[R4, #+528]
    366                          }
    367                          if ( !IdleTimeStart ) {
   \   0000016C   080294E5           LDR      R0,[R4, #+520]
   \   00000170   000050E3           CMP      R0,#+0
    368                              IdleTimeStart     = Now;
   \   00000174   08528405           STREQ    R5,[R4, #+520]
    369                          }
    370                          if ( machineStatus == tcmos_running ) {
   \   00000178   0402D4E5           LDRB     R0,[R4, #+516]
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   2F00001A           BNE      ??Calculate_4
    371                              switch ( GetPresetTimeAlarmState() ) {
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       ??GetPresetTimeAlarmState
   \   0000018C   010050E2           SUBS     R0,R0,#+1
   \   00000190   0200000A           BEQ      ??Calculate_5
   \   00000194   010050E2           SUBS     R0,R0,#+1
   \   00000198   0C00000A           BEQ      ??Calculate_6
   \   0000019C   280000EA           B        ??Calculate_4
    372                              case AlarmBasic::AlActive       :
    373                                  LibPutValue(SVT_AL_ENABLE, TCMLowSpeedPtr           , "Disabled");
   \                     ??Calculate_5:
   \   000001A0   081087E2           ADD      R1,R7,#+8
   \   000001A4   3C008DE2           ADD      R0,SP,#+60
   \   000001A8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001AC   181294E5           LDR      R1,[R4, #+536]
   \   000001B0   0030A0E3           MOV      R3,#+0
   \   000001B4   0020A0E1           MOV      R2,R0
   \   000001B8   0600A0E1           MOV      R0,R6
   \   000001BC   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   000001C0   0820A0E1           MOV      R2,R8
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   3C008DE2           ADD      R0,SP,#+60
   \   000001CC   1B0000EA           B        ??Calculate_7
    374                                  break;
    375                              case AlarmBasic::AlAknowledged  :
    376                                  // Only stop the machine unless it is already stopped and has reached preset time:
    377                                  TankWashingAPI::FinishWashingRunIfRunningOrError(IDNumber, false);
   \                     ??Calculate_6:
   \   000001D0   9C0094E5           LDR      R0,[R4, #+156]
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   ........           _BLF     ??FinishWashingRunIfRunningOrError,??FinishWashingRunIfRunningOrError??rA
    378                                  machineStatus = tcmos_idle;
   \   000001DC   0100A0E3           MOV      R0,#+1
   \   000001E0   0402C4E5           STRB     R0,[R4, #+516]
    379                                  // If reached preset time disable relevant alarms
    380                                  LibPutValue(SVT_AL_ENABLE, TCMPresetTimePassedPtr   , "Disabled");
   \   000001E4   081087E2           ADD      R1,R7,#+8
   \   000001E8   58008DE2           ADD      R0,SP,#+88
   \   000001EC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001F0   1C1294E5           LDR      R1,[R4, #+540]
   \   000001F4   0830A0E1           MOV      R3,R8
   \   000001F8   0020A0E1           MOV      R2,R0
   \   000001FC   0600A0E1           MOV      R0,R6
   \   00000200   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000204   0820A0E1           MOV      R2,R8
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   58008DE2           ADD      R0,SP,#+88
   \   00000210   ........           _BLF     ??_Tidy,??_Tidy??rA
    381                                  LibPutValue(SVT_AL_ENABLE, TCMLowSpeedPtr           , "Disabled");
   \   00000214   081087E2           ADD      R1,R7,#+8
   \   00000218   74008DE2           ADD      R0,SP,#+116
   \   0000021C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000220   181294E5           LDR      R1,[R4, #+536]
   \   00000224   0830A0E1           MOV      R3,R8
   \   00000228   0020A0E1           MOV      R2,R0
   \   0000022C   0600A0E1           MOV      R0,R6
   \   00000230   ........           _BLF     ??LibPutValue,??LibPutValue??rA
   \   00000234   0820A0E1           MOV      R2,R8
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   74008DE2           ADD      R0,SP,#+116
   \                     ??Calculate_7:
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
    382                                  break;
    383                              default:
    384                                  break;
    385                              }
    386                          }
    387                      }
    388                      SendData();
   \                     ??Calculate_4:
   \   00000244   A42094E5           LDR      R2,[R4, #+164]
   \   00000248   6510A0E3           MOV      R1,#+101
   \   0000024C   402092E5           LDR      R2,[R2, #+64]
   \   00000250   0400A0E1           MOV      R0,R4
   \   00000254   0FE0A0E1           MOV      LR,PC
   \   00000258   12FF2FE1           BX       R2
    389                  }
    390              }
    391          #endif
    392          }
   \                     ??Calculate_1:
   \   0000025C   90D08DE2           ADD      SP,SP,#+144
   \   00000260                      REQUIRE ?Subroutine28
   \   00000260                      ;; // Fall through to label ?Subroutine28
    393          

   \                                 In segment CODE, align 4, keep-with-next
    394          int PROTankWashingMachine::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   6060DDE5           LDRB     R6,[SP, #+96]
   \   0000000C   64709DE5           LDR      R7,[SP, #+100]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   01B0A0E1           MOV      R11,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    395              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   00208DE5           STR      R2,[SP, #+0]
    396          
    397              switch ( ValueId ) {
   \   0000002C   0190A0E3           MOV      R9,#+1
   \   00000030   3EA0A0E3           MOV      R10,#+62
   \   00000034   8CAD8AE3           ORR      R10,R10,#0x2300
   \   00000038   60004BE2           SUB      R0,R11,#+96
   \   0000003C   900D40E2           SUB      R0,R0,#+9216
   \   00000040   050050E3           CMP      R0,#+5
   \   00000044   5500008A           BHI      ??PutValue_3
   \   00000048   012F8FE2           ADR      R2,??PutValue_1
   \   0000004C   0020D2E7           LDRB     R2,[R2, R0]
   \   00000050   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   00000054   4C523652           DC8      +76,+82,+54,+82
   \   00000058   011E0000           DC8      +1,+30,+0,+0
    398              case SVT_TWM_PRESET_TIME_ENABLE :
    399                  if ( TCMPresetTimePassedPtr ) {
   \                     ??PutValue_4:
   \   0000005C   1C0294E5           LDR      R0,[R4, #+540]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   5F00000A           BEQ      ??PutValue_5
    400                      Status = TCMPresetTimePassedPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local);
   \   00000068   A40090E5           LDR      R0,[R0, #+164]
   \   0000006C   308080E2           ADD      R8,R0,#+48
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   ........           _BLF     ??string,??string??rA
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   40002DE9           PUSH     {R6}
   \   00000084   1C0294E5           LDR      R0,[R4, #+540]
   \   00000088   0520A0E1           MOV      R2,R5
   \   0000008C   005098E5           LDR      R5,[R8, #+0]
   \   00000090   0C308DE2           ADD      R3,SP,#+12
   \   00000094   0A10A0E1           MOV      R1,R10
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   15FF2FE1           BX       R5
   \   000000A0   0080A0E1           MOV      R8,R0
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0C008DE2           ADD      R0,SP,#+12
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    401                      if ( !TCMPresetTimePassedPtr->Enable ) {
   \   000000B4   1C0294E5           LDR      R0,[R4, #+540]
   \                     ??PutValue_6:
   \   000000B8   E200D0E5           LDRB     R0,[R0, #+226]
   \   000000BC   08D08DE2           ADD      SP,SP,#+8
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   4500001A           BNE      ??PutValue_7
    402                          machineStatus = tcmos_idle;
   \   000000C8   0492C4E5           STRB     R9,[R4, #+516]
   \   000000CC   430000EA           B        ??PutValue_7
    403                      }
    404                  }
    405                  break;
    406              case SVT_TWM_LOW_SPEED_ENABLE   :
    407                  if ( TCMLowSpeedPtr ) {
   \                     ??PutValue_8:
   \   000000D0   180294E5           LDR      R0,[R4, #+536]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   4200000A           BEQ      ??PutValue_5
    408                      Status = TCMLowSpeedPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local);
   \   000000DC   A40090E5           LDR      R0,[R0, #+164]
   \   000000E0   308080E2           ADD      R8,R0,#+48
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     ??string,??string??rA
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   40002DE9           PUSH     {R6}
   \   000000F8   180294E5           LDR      R0,[R4, #+536]
   \   000000FC   0520A0E1           MOV      R2,R5
   \   00000100   005098E5           LDR      R5,[R8, #+0]
   \   00000104   0C308DE2           ADD      R3,SP,#+12
   \   00000108   0A10A0E1           MOV      R1,R10
   \   0000010C   0FE0A0E1           MOV      LR,PC
   \   00000110   15FF2FE1           BX       R5
   \   00000114   0080A0E1           MOV      R8,R0
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   0C008DE2           ADD      R0,SP,#+12
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
    409                      if ( !TCMLowSpeedPtr->Enable ) {
   \   00000128   180294E5           LDR      R0,[R4, #+536]
   \   0000012C   E1FFFFEA           B        ??PutValue_6
    410                          machineStatus = tcmos_idle;
    411                      }
    412                  }
    413                  break;
    414              case SVT_TWM_PRESET_TIME        :
    415                  if ( TCMPresetTimePassedPtr ) {
   \                     ??PutValue_9:
   \   00000130   1C0294E5           LDR      R0,[R4, #+540]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   2A00000A           BEQ      ??PutValue_5
    416                      Status = TCMPresetTimePassedPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local);
   \   0000013C   A40090E5           LDR      R0,[R0, #+164]
   \   00000140   308080E2           ADD      R8,R0,#+48
   \   00000144   04008DE2           ADD      R0,SP,#+4
   \   00000148   ........           _BLF     ??string,??string??rA
   \   0000014C   0000A0E3           MOV      R0,#+0
   \   00000150   01002DE9           PUSH     {R0}
   \   00000154   40002DE9           PUSH     {R6}
   \   00000158   1C0294E5           LDR      R0,[R4, #+540]
   \   0000015C   0520A0E1           MOV      R2,R5
   \   00000160   005098E5           LDR      R5,[R8, #+0]
   \   00000164   0C308DE2           ADD      R3,SP,#+12
   \   00000168   0C10CAE3           BIC      R1,R10,#0xC
   \   0000016C   0FE0A0E1           MOV      LR,PC
   \   00000170   15FF2FE1           BX       R5
   \   00000174   0080A0E1           MOV      R8,R0
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   0C008DE2           ADD      R0,SP,#+12
   \   00000184   130000EA           B        ??PutValue_10
    417                  }
    418                  break;
    419              case SVT_TWM_SERIAL_ID:
    420                  serialId = NewValue;
   \                     ??PutValue_11:
   \   00000188   ........           LDR      R0,??DataTable16  ;; ??npos
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   003090E5           LDR      R3,[R0, #+0]
   \   00000194   7A0F84E2           ADD      R0,R4,#+488
   \   00000198   ........           _BLF     ??assign,??assign??rA
   \   0000019C   110000EA           B        ??PutValue_5
    421                  break;
    422              default:
    423                  Status = PRogramObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   000001A0   20008DE2           ADD      R0,SP,#+32
   \   000001A4   ........           _BLF     ??string,??string??rA
   \   000001A8   0D00A0E1           MOV      R0,SP
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   40002DE9           PUSH     {R6}
   \   000001B4   28308DE2           ADD      R3,SP,#+40
   \   000001B8   0520A0E1           MOV      R2,R5
   \   000001BC   0B10A0E1           MOV      R1,R11
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001C8   0080A0E1           MOV      R8,R0
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   28008DE2           ADD      R0,SP,#+40
   \                     ??PutValue_10:
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   08D08DE2           ADD      SP,SP,#+8
    424                  break;
    425              }
    426          
    427              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_7:
   \   000001E0   000058E3           CMP      R8,#+0
   \   000001E4   0400001A           BNE      ??PutValue_12
    428                  SetModifiedFlag();
   \                     ??PutValue_5:
   \   000001E8   A41094E5           LDR      R1,[R4, #+164]
   \   000001EC   0400A0E1           MOV      R0,R4
   \   000001F0   541091E5           LDR      R1,[R1, #+84]
   \   000001F4   0FE0A0E1           MOV      LR,PC
   \   000001F8   11FF2FE1           BX       R1
    429              }
    430          
    431              if ( UnitId ) {
   \                     ??PutValue_12:
   \   000001FC   000057E3           CMP      R7,#+0
    432                  *UnitId = ValUnitId;
   \   00000200   00009D15           LDRNE    R0,[SP, #+0]
   \   00000204   00008715           STRNE    R0,[R7, #+0]
    433              }
    434          
    435              return (Status);
   \   00000208   0800A0E1           MOV      R0,R8
   \   0000020C   3CD08DE2           ADD      SP,SP,#+60
   \   00000210                      REQUIRE ?Subroutine30
   \   00000210                      ;; // Fall through to label ?Subroutine30
    436          }
    437          

   \                                 In segment CODE, align 4, keep-with-next
    438          int PROTankWashingMachine::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000008   0340A0E1           MOV      R4,R3
   \   0000000C   18309DE5           LDR      R3,[SP, #+24]
    439              int Status = GETVAL_NO_ERR;
   \   00000010   0050A0E3           MOV      R5,#+0
    440              switch ( ValueId ) {
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   05E0A0E1           MOV      LR,R5
   \   0000001C   5E7041E2           SUB      R7,R1,#+94
   \   00000020   907D47E2           SUB      R7,R7,#+9216
   \   00000024   080057E3           CMP      R7,#+8
   \   00000028   3A00008A           BHI      ??GetValue_3
   \   0000002C   018F8FE2           ADR      R8,??GetValue_1
   \   00000030   0780D8E7           LDRB     R8,[R8, R7]
   \   00000034   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??GetValue_1:
   \   00000038   0237371E           DC8      +2,+55,+55,+30
   \   0000003C   0E283737           DC8      +14,+40,+55,+55
   \   00000040   34000000           DC8      +52,+0,+0,+0
    441              case SVT_TWM_SPEED  :
    442                  if ( IsNewData ) {
   \                     ??GetValue_4:
   \   00000044   E060D0E5           LDRB     R6,[R0, #+224]
   \   00000048   1B10A0E3           MOV      R1,#+27
   \   0000004C   0220A0E3           MOV      R2,#+2
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   002083E5           STR      R2,[R3, #+0]
   \   00000058   00108CE5           STR      R1,[R12, #+0]
   \   0000005C   0200000A           BEQ      ??GetValue_5
    443                      DecPnt     = 2;
    444                      Unit       = REVOLUTIONS_UNIT;
    445                      MyRetValue = Speed;
   \   00000060   5C0190E5           LDR      R0,[R0, #+348]
   \                     ??GetValue_6:
   \   00000064   000084E5           STR      R0,[R4, #+0]
   \   00000068   300000EA           B        ??GetValue_7
    446                  } else {
    447                      DecPnt     = 2;
    448                      Unit       = REVOLUTIONS_UNIT;
    449                      Status     = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_5:
   \   0000006C   0150A0E3           MOV      R5,#+1
   \   00000070   2E0000EA           B        ??GetValue_7
    450                  }
    451                  break;
    452              case SVT_TWM_PRESET_TIME:
    453                  if ( TCMPresetTimePassedPtr ) {
   \                     ??GetValue_8:
   \   00000074   1C5290E5           LDR      R5,[R0, #+540]
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   0A00000A           BEQ      ??GetValue_9
    454                      Status = TCMPresetTimePassedPtr->GetValue(SVT_AL_LIMIT, Index, MyRetValue, DecPnt, Unit);
   \   00000080   00102DE9           PUSH     {R12}
   \   00000084   08002DE9           PUSH     {R3}
   \   00000088   0430A0E1           MOV      R3,R4
   \   0000008C   A44095E5           LDR      R4,[R5, #+164]
   \   00000090   3210A0E3           MOV      R1,#+50
   \   00000094   244094E5           LDR      R4,[R4, #+36]
   \   00000098   8C1D81E3           ORR      R1,R1,#0x2300
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   0FE0A0E1           MOV      LR,PC
   \   000000A4   14FF2FE1           BX       R4
   \   000000A8   1E0000EA           B        ??GetValue_10
    455                  } else {
    456                      Status = GETVAL_ERROR;
   \                     ??GetValue_9:
   \   000000AC   0450A0E3           MOV      R5,#+4
   \   000000B0   1E0000EA           B        ??GetValue_7
    457                  }
    458                  break;
    459              case SVT_TWM_ON_OFF_STATUS:
    460                  DecPnt      = 0;
   \                     ??GetValue_11:
   \   000000B4   00E083E5           STR      LR,[R3, #+0]
    461                  Unit        = NO_UNIT;
   \   000000B8   00E08CE5           STR      LR,[R12, #+0]
    462                  MyRetValue  = (machineStatus == tcmos_running ? 1.0 : 0.0);
   \   000000BC   0402D0E5           LDRB     R0,[R0, #+516]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   C015A003           MOVEQ    R1,#+805306368
   \   000000CC   FF168103           ORREQ    R1,R1,#0xFF00000
   \   000000D0   0010A013           MOVNE    R1,#+0
   \   000000D4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000D8   E1FFFFEA           B        ??GetValue_6
    463                  break;
    464              case SVT_TWM_REMAINING_TIME:
    465                  DecPnt      = 0;
   \                     ??GetValue_12:
   \   000000DC   00E083E5           STR      LR,[R3, #+0]
    466                  Unit        = HOUR_UNIT;
   \   000000E0   1810A0E3           MOV      R1,#+24
   \   000000E4   00108CE5           STR      R1,[R12, #+0]
    467                  MyRetValue  = GetRemainingRunTime();
   \                     ??GetValue_13:
   \   000000E8   ........           BL       ??GetRemainingRunTime
   \   000000EC   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000F0   000084E5           STR      R0,[R4, #+0]
    468                  if ( MyRetValue< 0 ) {
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   ........           _BLF     __fLess,??__fLess??rA
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0A00000A           BEQ      ??GetValue_7
    469                      MyRetValue = 0;
   \   00000104   006084E5           STR      R6,[R4, #+0]
   \   00000108   080000EA           B        ??GetValue_7
    470                  }
    471                  break;
    472              case SVT_TWM_LOW_SPEED_STATUS:
    473                  DecPnt      = 0;
   \                     ??GetValue_14:
   \   0000010C   00E083E5           STR      LR,[R3, #+0]
    474                  Unit        = NO_UNIT;
   \   00000110   00E08CE5           STR      LR,[R12, #+0]
    475                  MyRetValue  = GetRemainingRunTime();
   \   00000114   F3FFFFEA           B        ??GetValue_13
    476                  if ( MyRetValue< 0 ) {
    477                      MyRetValue = 0;
    478                  }
    479                  break;
    480              default:
    481                  Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000118   00102DE9           PUSH     {R12}
   \   0000011C   08002DE9           PUSH     {R3}
   \   00000120   0430A0E1           MOV      R3,R4
   \   00000124   ........           _BLF     ??GetValue_2,??GetValue??rA
   \                     ??GetValue_10:
   \   00000128   0050A0E1           MOV      R5,R0
   \   0000012C   08D08DE2           ADD      SP,SP,#+8
    482                  break;
    483              }
    484              return (Status);
   \                     ??GetValue_7:
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   ........           B        ?Subroutine28
    485          }
    486          
    487          
    488          

   \                                 In segment CODE, align 4, keep-with-next
    489          int PROTankWashingMachine::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00C0A0E1           MOV      R12,R0
    490              int returnValue = GETVAL_NO_ERR;
    491          
    492              switch ( ValueId ) {
   \   00000004   ........           LDR      R0,??DataTable16  ;; ??npos
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   1CD04DE2           SUB      SP,SP,#+28
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   1930A0E3           MOV      R3,#+25
   \   00000020   503E83E3           ORR      R3,R3,#0x500
   \   00000024   030051E1           CMP      R1,R3
   \   00000028   0D00000A           BEQ      ??GetStringValue_2
   \   0000002C   6030A0E3           MOV      R3,#+96
   \   00000030   903D83E3           ORR      R3,R3,#0x2400
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   0300000A           BEQ      ??GetStringValue_3
   \   0000003C   013083E3           ORR      R3,R3,#0x1
   \   00000040   030051E1           CMP      R1,R3
   \   00000044   0D00000A           BEQ      ??GetStringValue_4
   \   00000048   1C0000EA           B        ??GetStringValue_5
    493              case SVT_TWM_SERIAL_ID:
    494                  MyString = serialId;
   \                     ??GetStringValue_3:
   \   0000004C   0630A0E1           MOV      R3,R6
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   7A1F8CE2           ADD      R1,R12,#+488
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           _BLF     ??assign,??assign??rA
   \   00000060   1A0000EA           B        ??GetStringValue_6
    495                  break;
    496          
    497              case SVT_PRO_STATUS:
    498                  FindPROStatus(MyString);
   \                     ??GetStringValue_2:
   \   00000064   A4209CE5           LDR      R2,[R12, #+164]
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   1C2092E5           LDR      R2,[R2, #+28]
   \   00000070   0C00A0E1           MOV      R0,R12
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   12FF2FE1           BX       R2
   \   0000007C   130000EA           B        ??GetStringValue_6
    499                  break;
    500          
    501              case SVT_TWM_ON_OFF_STATUS:
    502                  if ( machineStatus == tcmos_running /*isMachineOn == true*/ ) {
   \                     ??GetStringValue_4:
   \   00000080   0402DCE5           LDRB     R0,[R12, #+516]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0410A013           MOVNE    R1,#+4
    503                      //MyString = "ON";
    504                      MyString = FindDictionaryWord(L_WORD3);
   \   0000008C   0310A003           MOVEQ    R1,#+3
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000098   0630A0E1           MOV      R3,R6
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0D10A0E1           MOV      R1,SP
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           _BLF     ??assign,??assign??rA
   \   000000AC   0420A0E1           MOV      R2,R4
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   030000EA           B        ??GetStringValue_6
    505                  } else {
    506                      //MyString = "OFF";
    507                      MyString = FindDictionaryWord(L_WORD4);
    508                  }
    509                  break;
    510          
    511              default:
    512                  returnValue = PRogramObject::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_5:
   \   000000C0   0530A0E1           MOV      R3,R5
   \   000000C4   0C00A0E1           MOV      R0,R12
   \   000000C8   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   000000CC   0040A0E1           MOV      R4,R0
    513                  break;
    514              }
    515              return returnValue;
   \                     ??GetStringValue_6:
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   1CD08DE2           ADD      SP,SP,#+28
   \   000000D8                      REQUIRE ?Subroutine29
   \   000000D8                      ;; // Fall through to label ?Subroutine29
    516          }
    517          

   \                                 In segment CODE, align 4, keep-with-next
    518          ValueList* PROTankWashingMachine::GetValueInfoTableStatic(int &Entries, int Index) {
    519              Entries = ValueNameList_Length;
   \                     ??GetValueInfoTableStatic:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   001080E5           STR      R1,[R0, #+0]
    520              return ValueNameList;
   \   00000008   00009FE5           LDR      R0,??GetValueInfoTableStatic_1  ;; ??ValueNameList
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTableStatic_1:
   \   00000010   ........           DC32     ??ValueNameList
    521          }
    522          
    523          ///////////////////////////////////////////////////////////////
    524          //
    525          // Routines for Saving of Settings
    526          //
    527          ///////////////////////////////////////////////////////////////
    528          

   \                                 In segment CODE, align 4, keep-with-next
    529          void PROTankWashingMachine::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   4DDF4DE2           SUB      SP,SP,#+308
   \   00000008   0040A0E1           MOV      R4,R0
    530          
    531              if (IsModified || WriteAll) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   F8019F05           LDREQ    R0,??SaveSettings_2  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   7900000A           BEQ      ??SaveSettings_3
    532                  IsModified = false;
    533                  AnsiString LocalString;
    534                  AnsiString IdNumStr;
    535                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    536          		LocalString += KeyWord(C_PRO_TANK_WASH_MACHINE) + IdNumStr + CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable14  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   FC008DE2           ADD      R0,SP,#+252
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3094E5           LDR      R3,[R4, #+156]
   \   00000048   ........           LDR      R2,??DataTable15  ;; `?<Constant "0x%0x">`
   \   0000004C   461F8DE2           ADD      R1,SP,#+280
   \   00000050   FC008DE2           ADD      R0,SP,#+252
   \   00000054   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   460F8DE2           ADD      R0,SP,#+280
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   7510A0E3           MOV      R1,#+117
   \   0000006C   401E81E3           ORR      R1,R1,#0x400
   \   00000070   8C008DE2           ADD      R0,SP,#+140
   \   00000074   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000078   FC208DE2           ADD      R2,SP,#+252
   \   0000007C   8C108DE2           ADD      R1,SP,#+140
   \   00000080   70008DE2           ADD      R0,SP,#+112
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   ........           LDR      R0,??DataTable16  ;; ??npos
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   54108DE2           ADD      R1,SP,#+84
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   54008DE2           ADD      R0,SP,#+84
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   70008DE2           ADD      R0,SP,#+112
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    537                  set<AlarmBasic *>::iterator pBIt;
    538                  for (pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++) {
   \   000000E4   E48094E5           LDR      R8,[R4, #+228]
   \   000000E8   1A0000EA           B        ??SaveSettings_4
    539                      AlarmBasic *element = *pBIt;
   \                     ??SaveSettings_5:
   \   000000EC   100098E5           LDR      R0,[R8, #+16]
    540                      if (element && !element->Locked) LocalString += (AnsiString)element->SaveSettings();
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??SaveSettings_6
   \   000000F8   E810D0E5           LDRB     R1,[R0, #+232]
   \   000000FC   000051E3           CMP      R1,#+0
   \   00000100   1100001A           BNE      ??SaveSettings_6
   \   00000104   38108DE2           ADD      R1,SP,#+56
   \   00000108   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   0000010C   38108DE2           ADD      R1,SP,#+56
   \   00000110   1C008DE2           ADD      R0,SP,#+28
   \   00000114   ........           _BLF     ??string,??string??rA
   \   00000118   0730A0E1           MOV      R3,R7
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   1C108DE2           ADD      R1,SP,#+28
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   ........           _BLF     ??append,??append??rA
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   1C008DE2           ADD      R0,SP,#+28
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   38008DE2           ADD      R0,SP,#+56
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
    541                  }
   \                     ??SaveSettings_6:
   \   0000014C   0800A0E1           MOV      R0,R8
   \   00000150   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000154   0080A0E1           MOV      R8,R0
   \                     ??SaveSettings_4:
   \   00000158   E40084E2           ADD      R0,R4,#+228
   \   0000015C   000058E1           CMP      R8,R0
   \   00000160   E1FFFF1A           BNE      ??SaveSettings_5
    542                  /*
    543                  for (unsigned j = 0; j < AnalogInList.size(); j++) {
    544                      if (AnalogInList[j]) LocalString += AnalogInList[j]->SaveAISettings();
    545                  }
    546                  */
    547                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   00000164   FA1FA0E3           MOV      R1,#+1000
   \   00000168   C4008DE2           ADD      R0,SP,#+196
   \   0000016C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000170   0620A0E1           MOV      R2,R6
   \   00000174   C4108DE2           ADD      R1,SP,#+196
   \   00000178   A8008DE2           ADD      R0,SP,#+168
   \   0000017C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000180   0730A0E1           MOV      R3,R7
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   A8108DE2           ADD      R1,SP,#+168
   \   0000018C   0D00A0E1           MOV      R0,SP
   \   00000190   ........           _BLF     ??append,??append??rA
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   A8008DE2           ADD      R0,SP,#+168
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   C4008DE2           ADD      R0,SP,#+196
   \   000001B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    548                  LocalString += CrLfStr;
   \   000001B4   0730A0E1           MOV      R3,R7
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0610A0E1           MOV      R1,R6
   \   000001C0   0D00A0E1           MOV      R0,SP
   \   000001C4   ........           _BLF     ??append,??append??rA
    549                  SettingsString->AddString(LocalString);
   \   000001C8   0D10A0E1           MOV      R1,SP
   \   000001CC   E0008DE2           ADD      R0,SP,#+224
   \   000001D0   ........           _BLF     ??string,??string??rA
   \   000001D4   E0108DE2           ADD      R1,SP,#+224
   \   000001D8   0500A0E1           MOV      R0,R5
   \   000001DC   ........           _BLF     ??AddString,??AddString??rA
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0110A0E3           MOV      R1,#+1
   \   000001E8   E0008DE2           ADD      R0,SP,#+224
   \   000001EC   ........           _BLF     ??_Tidy,??_Tidy??rA
    550              }
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   FC008DE2           ADD      R0,SP,#+252
   \   000001FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
    551          }
   \                     ??SaveSettings_3:
   \   00000210   4DDF8DE2           ADD      SP,SP,#+308
   \   00000214   ........           B        ?Subroutine28
   \                     ??SaveSettings_2:
   \   00000218   ........           DC32     ??WriteAll
    552          

   \                                 In segment CODE, align 4, keep-with-next
    553          bool PROTankWashingMachine::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    554              bool NoError   = true;
    555              int  ErrorLine = 0;
   \   00000004   18939FE5           LDR      R9,??RestoreSettings_1  ;; NewLineStr
   \   00000008   18A39FE5           LDR      R10,??RestoreSettings_1+0x4  ;; `?<Constant "TWM ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    556              int  Key;
    557              do {
    558                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    559                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_3
    560                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   A800000A           BEQ      ??RestoreSettings_4
    561                          RestoreSettingsWarning((AnsiString)"TWM " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   08208AE2           ADD      R2,R10,#+8
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_5:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   700000EA           B        ??RestoreSettings_4
    562                      }
    563                  } else {
    564                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    565                      switch ( Key ) {
   \   00000158   FA0F56E3           CMP      R6,#+1000
   \   0000015C   EA10A013           MOVNE    R1,#+234
   \   00000160   C01F8113           ORRNE    R1,R1,#0x300
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   FB0F5613           CMPNE    R6,#+1004
   \   0000016C   9810A013           MOVNE    R1,#+152
   \   00000170   801E8113           ORRNE    R1,R1,#0x800
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   B910A013           MOVNE    R1,#+185
   \   0000017C   B01E8113           ORRNE    R1,R1,#0xB00
   \   00000180   01005611           CMPNE    R6,R1
   \   00000184   4D00000A           BEQ      ??RestoreSettings_6
   \   00000188   2F1081E2           ADD      R1,R1,#+47
   \   0000018C   010056E1           CMP      R6,R1
   \   00000190   4E00000A           BEQ      ??RestoreSettings_7
   \   00000194   011081E3           ORR      R1,R1,#0x1
   \   00000198   010056E1           CMP      R6,R1
   \   0000019C   4900000A           BEQ      ??RestoreSettings_8
    566                      default:
    567                          NoError = false;
    568                          RestoreSettingsWarning((AnsiString)"TWM " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   000001A0   1C1095E5           LDR      R1,[R5, #+28]
   \   000001A4   0070A0E3           MOV      R7,#+0
   \   000001A8   710F8DE2           ADD      R0,SP,#+452
   \   000001AC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001B0   00B0A0E1           MOV      R11,R0
   \   000001B4   0A10A0E1           MOV      R1,R10
   \   000001B8   6A0F8DE2           ADD      R0,SP,#+424
   \   000001BC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001C0   0010A0E1           MOV      R1,R0
   \   000001C4   442084E2           ADD      R2,R4,#+68
   \   000001C8   630F8DE2           ADD      R0,SP,#+396
   \   000001CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001D0   2C208AE2           ADD      R2,R10,#+44
   \   000001D4   631F8DE2           ADD      R1,SP,#+396
   \   000001D8   5C0F8DE2           ADD      R0,SP,#+368
   \   000001DC   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000001E0   74208DE2           ADD      R2,SP,#+116
   \   000001E4   5C1F8DE2           ADD      R1,SP,#+368
   \   000001E8   550F8DE2           ADD      R0,SP,#+340
   \   000001EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F0   3C208AE2           ADD      R2,R10,#+60
   \   000001F4   551F8DE2           ADD      R1,SP,#+340
   \   000001F8   4E0F8DE2           ADD      R0,SP,#+312
   \   000001FC   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000200   0B20A0E1           MOV      R2,R11
   \   00000204   4E1F8DE2           ADD      R1,SP,#+312
   \   00000208   470F8DE2           ADD      R0,SP,#+284
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0920A0E1           MOV      R2,R9
   \   00000214   471F8DE2           ADD      R1,SP,#+284
   \   00000218   400F8DE2           ADD      R0,SP,#+256
   \   0000021C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000220   401F8DE2           ADD      R1,SP,#+256
   \   00000224   E4008DE2           ADD      R0,SP,#+228
   \   00000228   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000022C   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   E4008DE2           ADD      R0,SP,#+228
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0720A0E1           MOV      R2,R7
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   400F8DE2           ADD      R0,SP,#+256
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0720A0E1           MOV      R2,R7
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   470F8DE2           ADD      R0,SP,#+284
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0720A0E1           MOV      R2,R7
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   710F8DE2           ADD      R0,SP,#+452
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0720A0E1           MOV      R2,R7
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   4E0F8DE2           ADD      R0,SP,#+312
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0720A0E1           MOV      R2,R7
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   550F8DE2           ADD      R0,SP,#+340
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0720A0E1           MOV      R2,R7
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   5C0F8DE2           ADD      R0,SP,#+368
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0720A0E1           MOV      R2,R7
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   630F8DE2           ADD      R0,SP,#+396
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B0   0720A0E1           MOV      R2,R7
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   6A0F8DE2           ADD      R0,SP,#+424
   \   000002BC   99FFFFEA           B        ??RestoreSettings_5
    569                          break;
    570                      case C_AI_END:          // If AI type not found can continue with this
    571                      case C_AL_END:
    572                      case C_PRO_END:
    573                      case C_PRO_END_COMMON:
    574                      case C_PRO_END_PRO:
    575                          Key = C_PRO_END;
   \                     ??RestoreSettings_6:
   \   000002C0   FA6FA0E3           MOV      R6,#+1000
   \   000002C4   0A0000EA           B        ??RestoreSettings_4
    576                          break;
    577                      case ID_AL_TWM_ELAPSED_TIME:
    578                          if ( TCMLowSpeedPtr	) TCMLowSpeedPtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_8:
   \   000002C8   182294E5           LDR      R2,[R4, #+536]
   \   000002CC   000000EA           B        ??RestoreSettings_9
    579                          break;
    580                      case ID_AL_TWM_LOW_SPEED:
    581                          if ( TCMPresetTimePassedPtr ) TCMPresetTimePassedPtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_7:
   \   000002D0   1C2294E5           LDR      R2,[R4, #+540]
   \                     ??RestoreSettings_9:
   \   000002D4   000052E3           CMP      R2,#+0
   \   000002D8   0600000A           BEQ      ??RestoreSettings_10
   \   000002DC   0200A0E1           MOV      R0,R2
   \   000002E0   A42092E5           LDR      R2,[R2, #+164]
   \   000002E4   0510A0E1           MOV      R1,R5
   \   000002E8   142092E5           LDR      R2,[R2, #+20]
   \   000002EC   0FE0A0E1           MOV      LR,PC
   \   000002F0   12FF2FE1           BX       R2
    582                          break;
    583                      }
    584                  }
    585              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??RestoreSettings_4:
   \   000002F4   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_10:
   \   000002F8   0110A0E3           MOV      R1,#+1
   \   000002FC   74008DE2           ADD      R0,SP,#+116
   \   00000300   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000304   000057E3           CMP      R7,#+0
   \   00000308   00009D15           LDRNE    R0,[SP, #+0]
   \   0000030C   08005011           CMPNE    R0,R8
   \   00000310   FA0F5613           CMPNE    R6,#+1000
   \   00000314   43FFFF1A           BNE      ??RestoreSettings_2
    586              return (NoError);
   \   00000318   0700A0E1           MOV      R0,R7
   \   0000031C   78DF8DE2           ADD      SP,SP,#+480
   \   00000320   ........           B        ?Subroutine30
   \                     ??RestoreSettings_1:
   \   00000324   ........           DC32     NewLineStr
   \   00000328   ........           DC32     `?<Constant "TWM ">`
    587          }
    588          
    589          
    590          

   \                                 In segment CODE, align 4, keep-with-next
    591          time_t PROTankWashingMachine::GetRemainingRunTime(void) {
   \                     ??GetRemainingRunTime:
   \   00000000   10402DE9           PUSH     {R4,LR}
    592              if ( TCMPresetTimePassedPtr ) {
   \   00000004   601190E5           LDR      R1,[R0, #+352]
   \   00000008   1C0290E5           LDR      R0,[R0, #+540]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0700000A           BEQ      ??GetRemainingRunTime_1
    593                  return TCMPresetTimePassedPtr->Limit - RunningTime;
   \   00000014   E44090E5           LDR      R4,[R0, #+228]
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000030   000000EA           B        ??GetRemainingRunTime_2
    594              } else {
    595                  return RunningTime;
   \                     ??GetRemainingRunTime_1:
   \   00000034   0100A0E1           MOV      R0,R1
   \                     ??GetRemainingRunTime_2:
   \   00000038   1040BDE8           POP      {R4,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    596              }
    597          }
    598          

   \                                 In segment CODE, align 4, keep-with-next
    599          AlarmBasic::AlarmState PROTankWashingMachine::GetPresetTimeAlarmState(void) {
    600              if ( TCMPresetTimePassedPtr ) {
   \                     ??GetPresetTimeAlarmState:
   \   00000000   1C0290E5           LDR      R0,[R0, #+540]
   \   00000004   ........           B        ?Subroutine26
    601                  return TCMPresetTimePassedPtr->State;
    602              }
    603              return AlarmBasic::AlError;
    604          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   E000D015           LDRBNE   R0,[R0, #+224]
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   0400A0E3           MOV      R0,#+4
   \   00000010   1EFF2FE1           BX       LR               ;; return
    605          

   \                                 In segment CODE, align 4, keep-with-next
    606          bool PROTankWashingMachine::IsPresetTimeAlarmEnabled(void) {
    607              if ( TCMPresetTimePassedPtr ) {
   \                     ??IsPresetTimeAlarmEnabled:
   \   00000000   1C0290E5           LDR      R0,[R0, #+540]
   \   00000004   ........           B        ?Subroutine27
    608                  return TCMPresetTimePassedPtr->Enable;
    609              }
    610              return false;
    611          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   E200D015           LDRBNE   R0,[R0, #+226]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    612          
    613          

   \                                 In segment CODE, align 4, keep-with-next
    614          AlarmBasic::AlarmState PROTankWashingMachine::GetLowSpeedAlarmState(void) {
    615              if ( TCMLowSpeedPtr ) {
   \                     ??GetLowSpeedAlarmState:
   \   00000000   180290E5           LDR      R0,[R0, #+536]
   \   00000004                      REQUIRE ?Subroutine26
   \   00000004                      ;; // Fall through to label ?Subroutine26
    616                  return TCMLowSpeedPtr->State;
    617              }
    618              return AlarmBasic::AlError;
    619          }
    620          

   \                                 In segment CODE, align 4, keep-with-next
    621          bool PROTankWashingMachine::IsLowSpeedAlarmEnabled(void) {
    622              if ( TCMLowSpeedPtr ) {
   \                     ??IsLowSpeedAlarmEnabled:
   \   00000000   180290E5           LDR      R0,[R0, #+536]
   \   00000004                      REQUIRE ?Subroutine27
   \   00000004                      ;; // Fall through to label ?Subroutine27
    623                  return TCMLowSpeedPtr->Enable;
    624              }
    625              return false;
    626          }
    627          
    628          

   \                                 In segment CODE, align 4, keep-with-next
    629          int  PROTankWashingMachine::GetGearRatio(void) {
   \                     ??GetGearRatio:
   \   00000000   00402DE9           PUSH     {LR}
    630              return twm.GearRatio;
   \   00000004   DC0190E5           LDR      R0,[R0, #+476]
   \   00000008   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   0000000C                      REQUIRE ?Subroutine31
   \   0000000C                      ;; // Fall through to label ?Subroutine31
    631          }
    632          

   \                                 In segment CODE, align 4, keep-with-next
    633          int  PROTankWashingMachine::GetNozzleDiameter(void) {
    634              return twm.NozzleDiameter_mm;
   \                     ??GetNozzleDiameter:
   \   00000000   D40190E5           LDR      R0,[R0, #+468]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    635          }
    636          

   \                                 In segment CODE, align 4, keep-with-next
    637          int PROTankWashingMachine::GetNumberOfNozzles(void) {
    638              return twm.NumberOfNozzles;
   \                     ??GetNumberOfNozzles:
   \   00000000   D80190E5           LDR      R0,[R0, #+472]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    639          }
    640          

   \                                 In segment CODE, align 4, keep-with-next
    641          tcm_operation_status PROTankWashingMachine::GetRunningState(void) {
    642              return machineStatus;
   \                     ??GetRunningState:
   \   00000000   0402D0E5           LDRB     R0,[R0, #+516]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    643          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ValueNameList>`:
   \   00000000   870100000000       DC32 391, 0, 9313
   \              000061240000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Enabled">`:
   \   00000000   456E61626C65       DC8 "Enabled"
   \              6400        
   \   00000008   44697361626C       DC8 "Disabled"
   \              656400      
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank Washing Machine">`:
   \   00000000   54616E6B2057       DC8 "Tank Washing Machine"
   \              617368696E67
   \              204D61636869
   \              6E6500      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   54616E6B2077       DC8 "Tank washing machine IDNumber not correct"
   \              617368696E67
   \              206D61636869
   \              6E652049444E
   \              756D62657220
   \              6E6F7420636F
   \              727265637400
   \   00000042   0000               DC8 0, 0
   \   00000044   54616E6B2077       DC8 "Tank washing machine Name not declared"
   \              617368696E67
   \              206D61636869
   \              6E65204E616D
   \              65206E6F7420
   \              6465636C6172
   \              656400      
   \   0000006B   00                 DC8 0
   \   0000006C   54616E6B2077       DC8 "Tank washing sensor not declared for "
   \              617368696E67
   \              2073656E736F
   \              72206E6F7420
   \              6465636C6172
   \              656420666F72
   \              2000        
   \   00000092   0000               DC8 0, 0
   \   00000094   4E756D626572       DC8 "Number of nozzles not declared for "
   \              206F66206E6F
   \              7A7A6C657320
   \              6E6F74206465
   \              636C61726564
   \              20666F722000
   \   000000B8   4E6F7A7A6C65       DC8 "Nozzle diameter not declared for "
   \              206469616D65
   \              746572206E6F
   \              74206465636C
   \              617265642066
   \              6F722000    
   \   000000DA   0000               DC8 0, 0
   \   000000DC   476561722072       DC8 "Gear ratio not declared for "
   \              6174696F206E
   \              6F7420646563
   \              6C6172656420
   \              666F722000  
   \   000000F9   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TWM ">`:
   \   00000000   54574D2000         DC8 "TWM "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   0000003B   00                 DC8 0
   \   0000003C   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000059   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ObjectSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   44509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000020   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000024   1400C4E5           STRB     R0,[R4, #+20]
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000030   240084E2           ADD      R0,R4,#+36
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   0C0085E2           ADD      R0,R5,#+12
   \   0000003C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000040   180084E2           ADD      R0,R4,#+24
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000048   180085E2           ADD      R0,R5,#+24
   \   0000004C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000050   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000058   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankWashingMachine &PROTankWashingMachine::new PROTankWashingMachine(int, AnsiString)
   \                     `??new PROTankWashingMachine`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   880FA0E3           MOV      R0,#+544
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROTankWashingMachine_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROTankWashingMachine
   \                     `??new PROTankWashingMachine_1`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??npos
    644          
    645          
    646          //---------------------------------------------------------------------------

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROTankWashingMachine::Calculate()
                                      168
     PROTankWashingMachine::FilterValue(float, float, float)
                                       20
     PROTankWashingMachine::FindPROStatus(AnsiString &)
                                       60
     PROTankWashingMachine::GetGearRatio()
                                        4
     PROTankWashingMachine::GetLowSpeedAlarmState()
                                        0
     PROTankWashingMachine::GetNozzleDiameter()
                                        0
     PROTankWashingMachine::GetNumberOfNozzles()
                                        0
     PROTankWashingMachine::GetPresetTimeAlarmState()
                                        0
     PROTankWashingMachine::GetRemainingRunTime()
                                        8
     PROTankWashingMachine::GetRunningState()
                                        0
     PROTankWashingMachine::GetStringValue(int, int, AnsiString &)
                                       44
     PROTankWashingMachine::GetValue(int, int, float &, int &, int &)
                                       32
     PROTankWashingMachine::GetValueInfoTableStatic(int &, int)
                                        0
     PROTankWashingMachine::IsLowSpeedAlarmEnabled()
                                        0
     PROTankWashingMachine::IsPresetTimeAlarmEnabled()
                                        0
     PROTankWashingMachine::LoadConfigFromFile(TSNConfigString &)
                                      348
     PROTankWashingMachine::PROTankWashingMachine(int, AnsiString)
                                       76
     PROTankWashingMachine::PutValue(int, int, AnsiString, bool, int *)
                                      104
     PROTankWashingMachine::ReceiveData(unsigned char *)
                                        4
     PROTankWashingMachine::RestoreSettings(TSNConfigString *)
                                      516
     PROTankWashingMachine::SaveSettings(TSNConfigString *)
                                      332
     PROTankWashingMachine::SendData(unsigned short)
                                       36
     PROTankWashingMachine::WriteConfigToFile(TSNConfigString &)
                                     1176
     PROTankWashingMachine::new PROTankWashingMachine(int, AnsiString)
                                       12
     PROTankWashingMachine::~PROTankWashingMachine()
                                       16
     TankWashingMachine::~TankWashingMachine()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Insert(PROTankWashingMachine **, PROTankWashingMachine * const &)
                                       16
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Make_room(PROTankWashingMachine **, unsigned int)
                                       32
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Push_back0(PROTankWashingMachine *)
                                        8
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Tidy0()
                                        4
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12
     vector<PROTankWashingMachine *>::~vector()
                                        8
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Tidy0()
                                      36
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Insert(PROTankWashingMachine **, PROTankWashingMachine * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Make_room(PROTankWashingMachine **, unsigned int)
                                     232
     _Vector_impl<PROTankWashingMachine *, allocator<PROTankWashingMachine *>>::_Push_back0(PROTankWashingMachine *)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      28
     vector<PROTankWashingMachine *>::~vector()
                                      28
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     TankWashingMachine::~TankWashingMachine()
                                      64
     ?_0                              36
     PROTankWashingMachine::ObjectSet
                                      48
     PROTankWashingMachine::ValueNameList_Length
                                       4
     PROTankWashingMachine::ValueNameList
                                      12
     PROTankWashingMachine::PROTankWashingMachine(int, AnsiString)
                                     328
     ?Subroutine28                    24
     PROTankWashingMachine::~PROTankWashingMachine()
                                     128
     ?Subroutine29                     8
     PROTankWashingMachine::WriteConfigToFile(TSNConfigString &)
                                    1688
     PROTankWashingMachine::LoadConfigFromFile(TSNConfigString &)
                                    1540
     ?Subroutine30                     8
     PROTankWashingMachine::FindPROStatus(AnsiString &)
                                     284
     PROTankWashingMachine::ReceiveData(unsigned char *)
                                     140
     PROTankWashingMachine::SendData(unsigned short)
                                     220
     ?Subroutine31                     8
     PROTankWashingMachine::FilterValue(float, float, float)
                                     112
     PROTankWashingMachine::Calculate()
                                     608
     PROTankWashingMachine::PutValue(int, int, AnsiString, bool, int *)
                                     528
     PROTankWashingMachine::GetValue(int, int, float &, int &, int &)
                                     312
     PROTankWashingMachine::GetStringValue(int, int, AnsiString &)
                                     216
     PROTankWashingMachine::GetValueInfoTableStatic(int &, int)
                                      20
     PROTankWashingMachine::SaveSettings(TSNConfigString *)
                                     540
     PROTankWashingMachine::RestoreSettings(TSNConfigString *)
                                     812
     PROTankWashingMachine::GetRemainingRunTime()
                                      64
     PROTankWashingMachine::GetPresetTimeAlarmState()
                                       8
     ?Subroutine26                    20
     PROTankWashingMachine::IsPresetTimeAlarmEnabled()
                                       8
     ?Subroutine27                    12
     PROTankWashingMachine::GetLowSpeedAlarmState()
                                       4
     PROTankWashingMachine::IsLowSpeedAlarmEnabled()
                                       4
     PROTankWashingMachine::GetGearRatio()
                                      12
     PROTankWashingMachine::GetNozzleDiameter()
                                       8
     PROTankWashingMachine::GetNumberOfNozzles()
                                       8
     PROTankWashingMachine::GetRunningState()
                                       8
     ?<Initializer for ValueNameList>
                                      12
     ?<Constant "Enabled">            20
     ?<Constant "Tank Washing Machine">
                                     252
     ?<Constant "0x%0x">               8
     ?<Constant "TWM ">               92
     __sti__routine()                 92
     PROTankWashingMachine::new PROTankWashingMachine(int, AnsiString)
                                      48
     ??DataTable1                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable11                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
      Others                        1336

 
 12 168 bytes in segment CODE
    560 bytes in segment DATA_C
     12 bytes in segment DATA_I
     12 bytes in segment DATA_ID
     60 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 7 856 bytes of CODE  memory (+ 4 340 bytes shared)
   572 bytes of CONST memory
    72 bytes of DATA  memory

Errors: none
Warnings: none
