##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:22 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNAsyncsender.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\TSNAsyncsender.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNAsyncsender.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNAsyncsender.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNAsyncsender.cpp
      1          #ifdef ANBOOTLOADER
      2              #include "RTOS.h"
      3              #include "ANPro10Inc.h"
      4              #include "2410lib.h"
      5          #else
      6              #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Pairib _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::insert(TSNUart *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Erase(_Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::iterator _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Insert(bool, _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr, TSNUart *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<TSNUart *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
      7              #include "TSNUart.h"
      8          #endif
      9          #include "minilzo.h"
     10          //#include "TSNAsyncSender.h"
     11          
     12          TSNMessageQ *TSNAsyncSender::UrgentCommandQ = NULL;
     13          TSNMessageQ *TSNAsyncSender::NormalCommandQ = NULL;
     14          
     15          set<TSNUart *>TSNAsyncSender::ANPRO10ComPorts;
     16          #if !defined(ANWIN) && !defined(ANTDUSIM)
     17          extern OS_RSEMA PackSema;
     18          #endif
     19          
     20          extern TSNUart *fake_uart_port_for_tcp_clientPtr;

   \                                 In segment CODE, align 4, keep-with-next
     21          TSNAsyncSender::TSNAsyncSender(void) {
     22          }
   \                     ??TSNAsyncSender:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          TSNAsyncSender::~TSNAsyncSender(void) {
     25          }
   \                     `?~TSNAsyncSender`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     26          
     27          //#define USE_LZO

   \                                 In segment CODE, align 4, keep-with-next
     28          void TSNAsyncSender::TaskEntryPoint(void) {
   \                     ??TaskEntryPoint:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   64D04DE2           SUB      SP,SP,#+100
     29          
     30              TSNAsyncSender::UrgentCommandQ = new TSNMessageQ();
   \   00000008   0C00A0E3           MOV      R0,#+12
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0060B0E1           MOVS     R6,R0
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   0100000A           BEQ      ??TaskEntryPoint_1
   \   0000001C   ........           _BLF     ??TSNMessageQ,??TSNMessageQ??rA
   \   00000020   000000EA           B        ??TaskEntryPoint_2
   \                     ??TaskEntryPoint_1:
   \   00000024   0060A0E3           MOV      R6,#+0
   \                     ??TaskEntryPoint_2:
   \   00000028   ........           LDR      R5,??DataTable1  ;; ??ANPRO10ComPorts
     31              TSNAsyncSender::NormalCommandQ = new TSNMessageQ();
   \   0000002C   0C00A0E3           MOV      R0,#+12
   \   00000030   186085E5           STR      R6,[R5, #+24]
   \   00000034   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000038   0060B0E1           MOVS     R6,R0
   \   0000003C   0100000A           BEQ      ??TaskEntryPoint_3
   \   00000040   ........           _BLF     ??TSNMessageQ,??TSNMessageQ??rA
   \   00000044   000000EA           B        ??TaskEntryPoint_4
   \                     ??TaskEntryPoint_3:
   \   00000048   0060A0E3           MOV      R6,#+0
   \                     ??TaskEntryPoint_4:
   \   0000004C   1C6085E5           STR      R6,[R5, #+28]
     32          
     33              static U8 WrkMem[LZO1X_1_MEM_COMPRESS];
     34              static U8 UrgentPacketbuf[0x8000];
     35              static U8 NormalPacketbuf[0x8000];
     36              static U8 UrgentCommandbuf[MAX_ANPRO10_SIZE];    // See TSNMessageQ, must assume max size internal message, which is MAX_ANPRO10_SIZE
     37              static U8 NormalCommandbuf[MAX_ANPRO10_SIZE];    // See TSNMessageQ, must assume max size internal message, which is MAX_ANPRO10_SIZE
     38              static U8 CompressBuf[0x8000+0x100];  // Add a few bytes in case we can not compress
     39              QueueANPRO10_CommandHeading *UCmd = (QueueANPRO10_CommandHeading *)UrgentCommandbuf;
     40              QueueANPRO10_CommandHeading *NCmd = (QueueANPRO10_CommandHeading *)NormalCommandbuf;
     41              const U8 *CompressBufHeading  = (const U8 *)&CompressBuf;
     42              const U8 *CompressBufData     = (const U8 *)&CompressBuf + sizeof(ANPRO10_CommandHeading);
     43              ANPRO10_CommandHeading *pCH   = (ANPRO10_CommandHeading *)CompressBufHeading;
     44              U8 *UrgentCurrentpos = UrgentPacketbuf;
     45              U8 *NormalCurrentpos = NormalPacketbuf;
     46              U8 UrgentPrevRxId   = 0;
   \   00000050   08408DE5           STR      R4,[SP, #+8]
     47              U8 UrgentPrevRxAddr = 0;
   \   00000054   0C408DE5           STR      R4,[SP, #+12]
     48              U8 NormalPrevRxId   = 0;
   \   00000058   10408DE5           STR      R4,[SP, #+16]
     49              U8 NormalPrevRxAddr = 0;
   \   0000005C   14408DE5           STR      R4,[SP, #+20]
     50              TSNUart *UrgentSinglePort = NULL;
   \   00000060   1C408DE5           STR      R4,[SP, #+28]
     51              TSNUart *NormalSinglePort = NULL;
   \   00000064   20408DE5           STR      R4,[SP, #+32]
     52              int commandsize = 0; //, targetrole, addedBytes,
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   2C108DE5           STR      R1,[SP, #+44]
     53              unsigned MinBaudRate = 115200;
   \   00000070   401BA0E3           MOV      R1,#+65536
   \   00000074   C21C81E3           ORR      R1,R1,#0xC200
   \   00000078   30108DE5           STR      R1,[SP, #+48]
     54              for (int i = 0; i < MAX_COM_PORTS; i++) {
   \   0000007C   0460A0E1           MOV      R6,R4
   \                     ??TaskEntryPoint_5:
   \   00000080   68079FE5           LDR      R0,??TaskEntryPoint_6  ;; ??Channels
   \   00000084   062190E7           LDR      R2,[R0, +R6, LSL #+2]
   \   00000088   000052E3           CMP      R2,#+0
   \   0000008C   0D00000A           BEQ      ??TaskEntryPoint_7
   \   00000090   A80092E5           LDR      R0,[R2, #+168]
   \   00000094   6110A0E3           MOV      R1,#+97
   \   00000098   7C1D81E3           ORR      R1,R1,#0x1F00
   \   0000009C   010050E1           CMP      R0,R1
   \   000000A0   01108112           ADDNE    R1,R1,#+1
   \   000000A4   01005011           CMPNE    R0,R1
   \   000000A8   01108113           ORRNE    R1,R1,#0x1
   \   000000AC   01005011           CMPNE    R0,R1
   \   000000B0   02108112           ADDNE    R1,R1,#+2
   \   000000B4   01005011           CMPNE    R0,R1
   \   000000B8   0200001A           BNE      ??TaskEntryPoint_7
     55                  if (TSNUart::Channels[i] &&
     56                      (TSNUart::Channels[i]->Device == C_UART_DEVICE_TDU ||
     57                       TSNUart::Channels[i]->Device == C_UART_DEVICE_PC ||
     58                       TSNUart::Channels[i]->Device == C_UART_DEVICE_TCU ||
     59                       TSNUart::Channels[i]->Device == C_UART_DEVICE_ANPRO10)
     60                     ) {
     61                      ANPRO10ComPorts.insert(TSNUart::Channels[i]);
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   5C008DE2           ADD      R0,SP,#+92
   \   000000C4   ........           _BLF     ??insert,??insert??rA
     62                  }
     63              }
   \                     ??TaskEntryPoint_7:
   \   000000C8   016086E2           ADD      R6,R6,#+1
   \   000000CC   070056E3           CMP      R6,#+7
   \   000000D0   EAFFFFBA           BLT      ??TaskEntryPoint_5
     64              // open the uart objects that has the correct role
     65              set<TSNUart *>::iterator pBIt;
     66              for (pBIt = ANPRO10ComPorts.begin(); pBIt != ANPRO10ComPorts.end(); pBIt++) {
   \   000000D4   008095E5           LDR      R8,[R5, #+0]
   \   000000D8   080000EA           B        ??TaskEntryPoint_8
     67                  MinBaudRate = min((*pBIt)->BaudRate, MinBaudRate);
   \                     ??TaskEntryPoint_9:
   \   000000DC   100098E5           LDR      R0,[R8, #+16]
   \   000000E0   30109DE5           LDR      R1,[SP, #+48]
   \   000000E4   AC0090E5           LDR      R0,[R0, #+172]
   \   000000E8   010050E1           CMP      R0,R1
   \   000000EC   0010A031           MOVCC    R1,R0
   \   000000F0   30108D35           STRCC    R1,[SP, #+48]
     68              }
   \   000000F4   0800A0E1           MOV      R0,R8
   \   000000F8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000FC   0080A0E1           MOV      R8,R0
   \                     ??TaskEntryPoint_8:
   \   00000100   050058E1           CMP      R8,R5
   \   00000104   F4FFFF1A           BNE      ??TaskEntryPoint_9
     69          
     70              bool NotCompleteUrgentMsg = false;
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   0410CDE5           STRB     R1,[SP, #+4]
     71              bool NotCompleteNormalMsg = false;
   \   00000110   0510CDE5           STRB     R1,[SP, #+5]
     72              const U8 *UrgentFirstBlock = UrgentPacketbuf + (ANPRO10_NUM_SYNC + 1) + sizeof(ANPRO10_PacketHeading);
     73              const U8 *NormalFirstBlock = NormalPacketbuf + (ANPRO10_NUM_SYNC + 1) + sizeof(ANPRO10_PacketHeading);
     74              int  ExtraWait = 0;
     75              for (pBIt = ANPRO10ComPorts.begin(); !ExtraWait && pBIt != ANPRO10ComPorts.end(); pBIt++) {
   \   00000114   008095E5           LDR      R8,[R5, #+0]
   \   00000118   0160A0E1           MOV      R6,R1
   \                     ??TaskEntryPoint_10:
   \   0000011C   050058E1           CMP      R8,R5
   \   00000120   0A00000A           BEQ      ??TaskEntryPoint_11
     76                  switch ((*pBIt)->HWProtocol) {
   \   00000124   100098E5           LDR      R0,[R8, #+16]
   \   00000128   4C10A0E3           MOV      R1,#+76
   \   0000012C   A00090E5           LDR      R0,[R0, #+160]
   \   00000130   7C1D81E3           ORR      R1,R1,#0x1F00
   \   00000134   010050E1           CMP      R0,R1
     77                  case C_UART_HWPRO_232:
     78                      break;
     79                  case C_UART_HWPRO_485:
     80                      ExtraWait = RS485_DELAY;
   \   00000138   C860A003           MOVEQ    R6,#+200
     81                      break;
     82                  }
     83              }
   \   0000013C   0800A0E1           MOV      R0,R8
   \   00000140   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000144   0080A0E1           MOV      R8,R0
   \   00000148   000056E3           CMP      R6,#+0
   \   0000014C   F2FFFF0A           BEQ      ??TaskEntryPoint_10
   \                     ??TaskEntryPoint_11:
   \   00000150   9C169FE5           LDR      R1,??TaskEntryPoint_6+0x4  ;; OS_Time
     84          // do the loop
     85              while (true) {
     86                  int StartTime = TSN_Time;
     87                  int UMsgCnt  = 0;
   \   00000154   0060A0E3           MOV      R6,#+0
   \   00000158   001091E5           LDR      R1,[R1, #+0]
     88                  int NMsgCnt  = 0;
   \   0000015C   0490A0E1           MOV      R9,R4
   \   00000160   18108DE5           STR      R1,[SP, #+24]
     89                  bool SendPacketNow = false;
     90                  //targetrole			= 0;
     91                  UrgentCurrentpos = UrgentPacketbuf;
     92                  UrgentCurrentpos += ANPRO10_AddPacketPreAmble(UrgentCurrentpos);
   \   00000164   607BA0E3           MOV      R7,#+98304
   \   00000168   487F87E3           ORR      R7,R7,#0x120
   \   0000016C   051087E0           ADD      R1,R7,R5
   \   00000170   24108DE5           STR      R1,[SP, #+36]
   \   00000174   0100A0E1           MOV      R0,R1
   \   00000178   ........           _BLF     ??ANPRO10_AddPacketPreAmble,??ANPRO10_AddPacketPreAmble??rA
   \   0000017C   050080E0           ADD      R0,R0,R5
   \   00000180   007087E0           ADD      R7,R7,R0
     93                  NormalCurrentpos = NormalPacketbuf;
     94                  NormalCurrentpos += ANPRO10_AddPacketPreAmble(NormalCurrentpos);
   \   00000184   808BA0E3           MOV      R8,#+131072
   \   00000188   488F88E3           ORR      R8,R8,#0x120
   \   0000018C   051088E0           ADD      R1,R8,R5
   \   00000190   28108DE5           STR      R1,[SP, #+40]
   \   00000194   0100A0E1           MOV      R0,R1
   \   00000198   ........           _BLF     ??ANPRO10_AddPacketPreAmble,??ANPRO10_AddPacketPreAmble??rA
   \   0000019C   050080E0           ADD      R0,R0,R5
   \   000001A0   008088E0           ADD      R8,R8,R0
   \   000001A4   040000EA           B        ??TaskEntryPoint_12
     95                  while (!SendPacketNow && (abs(TSN_Time - StartTime) < 1000) && ((UrgentCurrentpos - UrgentPacketbuf) < TSNAsyncSender::WantedPacketSize) && ((NormalCurrentpos - NormalPacketbuf) < TSNAsyncSender::WantedPacketSize)) {
     96                      if (NotCompleteUrgentMsg) {
     97                          // This always is caused by address change
     98                          NotCompleteUrgentMsg = false;
     99          
    100                          if (UCmd->TxInfo.Port == fake_uart_port_for_tcp_clientPtr ) {
    101                              UCmd->TxInfo.Port = NULL;
    102                          }
    103                          UrgentSinglePort  = UCmd->TxInfo.Port;
    104                          UrgentPrevRxAddr  = UCmd->TxInfo.rxAddr;
    105                          UrgentPrevRxId    = UCmd->TxInfo.rxId;
    106                          UrgentCurrentpos += ANPRO10_AddPacketHeading(UrgentCurrentpos, UrgentPrevRxAddr, UrgentPrevRxId);
    107                          UrgentCurrentpos += ANPRO10_AddCommand(UrgentCurrentpos, (U8 *)&UCmd->Data);
    108                          UMsgCnt++;
    109                          if (Master) {
    110                              SendPacketNow = true;   // Send the message now!!!
    111                          } else {
    112                              StartTime -= 750;
    113                          }
    114                      } else if (NotCompleteNormalMsg) {
    115                          // This always is caused by address change
    116                          NotCompleteNormalMsg = false;
    117                          NMsgCnt++;
    118                          NormalSinglePort = NCmd->TxInfo.Port;
    119                          NormalPrevRxAddr = NCmd->TxInfo.rxAddr;
    120                          NormalPrevRxId   = NCmd->TxInfo.rxId;
    121                          NormalCurrentpos += ANPRO10_AddPacketHeading(NormalCurrentpos, NormalPrevRxAddr, NormalPrevRxId);
    122                          NormalCurrentpos += ANPRO10_AddCommand(NormalCurrentpos, (U8 *)&NCmd->Data);
    123                      } else if (UrgentCommandQ->GetMessageCond(UrgentCommandbuf, &commandsize)) {
    124                          // Are we first?
    125                          if (!UMsgCnt) {
    126                              if (UCmd->TxInfo.Port == fake_uart_port_for_tcp_clientPtr ) {
    127                                  UCmd->TxInfo.Port = NULL;
    128                              }
    129                              UrgentSinglePort  = UCmd->TxInfo.Port;
    130                              UrgentPrevRxAddr  = UCmd->TxInfo.rxAddr;
    131                              UrgentPrevRxId    = UCmd->TxInfo.rxId;
    132                              UrgentCurrentpos += ANPRO10_AddPacketHeading(UrgentCurrentpos, UrgentPrevRxAddr, UrgentPrevRxId);
    133                              UrgentCurrentpos += ANPRO10_AddCommand(UrgentCurrentpos, (U8 *)&UCmd->Data);
    134                              UMsgCnt++;
    135                              if (Master) {
    136                                  SendPacketNow = true;   // Send the message now!!!
    137                              } else {
    138                                  StartTime -= 750; //If urgent, and not master, we wait a little
    139                              }
    140                          } else if (UCmd->TxInfo.Port   == UrgentSinglePort
    141                                     && UCmd->TxInfo.rxAddr == UrgentPrevRxAddr
    142                                     && UCmd->TxInfo.rxId   == UrgentPrevRxId) {     // targetrole is the same
    143                              UrgentCurrentpos += ANPRO10_AddCommand(UrgentCurrentpos, (U8 *)&UCmd->Data);
    144                              UMsgCnt++;
    145                          } else {
    146                              NotCompleteUrgentMsg = true;
    147                              SendPacketNow        = true;
    148                          }
    149                      } else {
    150                          if (NormalCommandQ->GetMessageCond(NormalCommandbuf, &commandsize)) {
    151                              // Are we first
    152                              if (!NMsgCnt) {
    153                                  if (NCmd->TxInfo.Port == fake_uart_port_for_tcp_clientPtr ) {
    154                                      NCmd->TxInfo.Port = NULL;
    155                                  }
    156                                  NormalSinglePort  = NCmd->TxInfo.Port;
    157                                  NormalPrevRxAddr  = NCmd->TxInfo.rxAddr;
    158                                  NormalPrevRxId    = NCmd->TxInfo.rxId;
    159                                  NormalCurrentpos += ANPRO10_AddPacketHeading(NormalCurrentpos, NormalPrevRxAddr, NormalPrevRxId);
    160                                  NormalCurrentpos += ANPRO10_AddCommand(NormalCurrentpos, (U8 *)&NCmd->Data);
    161                                  NMsgCnt++;
    162                              } else if (NCmd->TxInfo.Port   == NormalSinglePort
    163                                         && NCmd->TxInfo.rxAddr == NormalPrevRxAddr
    164                                         && NCmd->TxInfo.rxId   == NormalPrevRxId) {        // targetrole is the same
    165                                  NormalCurrentpos += ANPRO10_AddCommand(NormalCurrentpos, (U8 *)&NCmd->Data);
   \                     ??TaskEntryPoint_13:
   \   000001A8   06108BE2           ADD      R1,R11,#+6
   \   000001AC   0800A0E1           MOV      R0,R8
   \   000001B0   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   000001B4   088080E0           ADD      R8,R0,R8
    166                                  NMsgCnt++;
   \   000001B8   019089E2           ADD      R9,R9,#+1
   \                     ??TaskEntryPoint_12:
   \   000001BC   30069FE5           LDR      R0,??TaskEntryPoint_6+0x4  ;; OS_Time
   \   000001C0   000090E5           LDR      R0,[R0, #+0]
   \   000001C4   18109DE5           LDR      R1,[SP, #+24]
   \   000001C8   010050E0           SUBS     R0,R0,R1
    167                              } else {
   \   000001CC   00006042           RSBMI    R0,R0,#+0
   \   000001D0   FA0F50E3           CMP      R0,#+1000
   \   000001D4   24009DB5           LDRLT    R0,[SP, #+36]
   \   000001D8   000047B0           SUBLT    R0,R7,R0
   \   000001DC   400D50B3           CMPLT    R0,#+4096
   \   000001E0   28009DB5           LDRLT    R0,[SP, #+40]
   \   000001E4   000048B0           SUBLT    R0,R8,R0
   \   000001E8   400D50B3           CMPLT    R0,#+4096
   \   000001EC   ED0000AA           BGE      ??TaskEntryPoint_14
   \   000001F0   00A69FE5           LDR      R10,??TaskEntryPoint_6+0x8  ;; ??UrgentCommandbuf
   \   000001F4   ED20E0E3           MVN      R2,#+237
   \   000001F8   802FC2E3           BIC      R2,R2,#0x200
   \   000001FC   011082E0           ADD      R1,R2,R1
   \   00000200   34108DE5           STR      R1,[SP, #+52]
   \   00000204   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   3300000A           BEQ      ??TaskEntryPoint_15
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0410CDE5           STRB     R1,[SP, #+4]
   \   00000218   0100A0E1           MOV      R0,R1
   \                     ??TaskEntryPoint_16:
   \   0000021C   0A20D0E7           LDRB     R2,[R0, +R10]
   \   00000220   38108DE2           ADD      R1,SP,#+56
   \   00000224   0120C0E7           STRB     R2,[R0, +R1]
   \   00000228   010080E2           ADD      R0,R0,#+1
   \   0000022C   040050E3           CMP      R0,#+4
   \   00000230   F9FFFFBA           BLT      ??TaskEntryPoint_16
   \   00000234   C0159FE5           LDR      R1,??TaskEntryPoint_6+0xC  ;; fake_uart_port_for_tcp_clientPtr
   \   00000238   38009DE5           LDR      R0,[SP, #+56]
   \   0000023C   001091E5           LDR      R1,[R1, #+0]
   \   00000240   010050E1           CMP      R0,R1
   \   00000244   0700001A           BNE      ??TaskEntryPoint_17
   \   00000248   00408DE5           STR      R4,[SP, #+0]
   \   0000024C   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_18:
   \   00000250   0D10A0E1           MOV      R1,SP
   \   00000254   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000258   0A10C0E7           STRB     R1,[R0, +R10]
   \   0000025C   010080E2           ADD      R0,R0,#+1
   \   00000260   040050E3           CMP      R0,#+4
   \   00000264   F9FFFFBA           BLT      ??TaskEntryPoint_18
   \                     ??TaskEntryPoint_17:
   \   00000268   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_19:
   \   0000026C   0A20D0E7           LDRB     R2,[R0, +R10]
   \   00000270   3C108DE2           ADD      R1,SP,#+60
   \   00000274   0120C0E7           STRB     R2,[R0, +R1]
   \   00000278   010080E2           ADD      R0,R0,#+1
   \   0000027C   040050E3           CMP      R0,#+4
   \   00000280   F9FFFFBA           BLT      ??TaskEntryPoint_19
   \   00000284   3C109DE5           LDR      R1,[SP, #+60]
   \   00000288   0700A0E1           MOV      R0,R7
   \   0000028C   1C108DE5           STR      R1,[SP, #+28]
   \   00000290   0410DAE5           LDRB     R1,[R10, #+4]
   \   00000294   016086E2           ADD      R6,R6,#+1
   \   00000298   0C108DE5           STR      R1,[SP, #+12]
   \   0000029C   0510DAE5           LDRB     R1,[R10, #+5]
   \   000002A0   08108DE5           STR      R1,[SP, #+8]
   \   000002A4   0120A0E1           MOV      R2,R1
   \   000002A8   0C109DE5           LDR      R1,[SP, #+12]
   \   000002AC   ........           _BLF     ??ANPRO10_AddPacketHeading,??ANPRO10_AddPacketHeading??rA
   \   000002B0   077080E0           ADD      R7,R0,R7
   \   000002B4   06108AE2           ADD      R1,R10,#+6
   \   000002B8   0700A0E1           MOV      R0,R7
   \   000002BC   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   000002C0   077080E0           ADD      R7,R0,R7
   \   000002C4   34059FE5           LDR      R0,??TaskEntryPoint_6+0x10  ;; Master
   \   000002C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   B400001A           BNE      ??TaskEntryPoint_14
   \                     ??TaskEntryPoint_20:
   \   000002D4   34109DE5           LDR      R1,[SP, #+52]
   \   000002D8   18108DE5           STR      R1,[SP, #+24]
   \   000002DC   B6FFFFEA           B        ??TaskEntryPoint_12
   \                     ??TaskEntryPoint_15:
   \   000002E0   0500DDE5           LDRB     R0,[SP, #+5]
   \   000002E4   18B59FE5           LDR      R11,??TaskEntryPoint_6+0x14  ;; ??NormalCommandbuf
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   1900000A           BEQ      ??TaskEntryPoint_21
   \   000002F0   0010A0E3           MOV      R1,#+0
   \   000002F4   0510CDE5           STRB     R1,[SP, #+5]
   \   000002F8   019089E2           ADD      R9,R9,#+1
   \   000002FC   0100A0E1           MOV      R0,R1
   \                     ??TaskEntryPoint_22:
   \   00000300   0B20D0E7           LDRB     R2,[R0, +R11]
   \   00000304   40108DE2           ADD      R1,SP,#+64
   \   00000308   0120C0E7           STRB     R2,[R0, +R1]
   \   0000030C   010080E2           ADD      R0,R0,#+1
   \   00000310   040050E3           CMP      R0,#+4
   \   00000314   F9FFFFBA           BLT      ??TaskEntryPoint_22
   \   00000318   40109DE5           LDR      R1,[SP, #+64]
   \   0000031C   0800A0E1           MOV      R0,R8
   \   00000320   20108DE5           STR      R1,[SP, #+32]
   \   00000324   0410DBE5           LDRB     R1,[R11, #+4]
   \                     ??TaskEntryPoint_23:
   \   00000328   14108DE5           STR      R1,[SP, #+20]
   \   0000032C   0510DBE5           LDRB     R1,[R11, #+5]
   \   00000330   10108DE5           STR      R1,[SP, #+16]
   \   00000334   0120A0E1           MOV      R2,R1
   \   00000338   14109DE5           LDR      R1,[SP, #+20]
   \   0000033C   ........           _BLF     ??ANPRO10_AddPacketHeading,??ANPRO10_AddPacketHeading??rA
   \   00000340   088080E0           ADD      R8,R0,R8
   \   00000344   06108BE2           ADD      R1,R11,#+6
   \   00000348   0800A0E1           MOV      R0,R8
   \   0000034C   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   00000350   088080E0           ADD      R8,R0,R8
   \   00000354   98FFFFEA           B        ??TaskEntryPoint_12
   \                     ??TaskEntryPoint_21:
   \   00000358   180095E5           LDR      R0,[R5, #+24]
   \   0000035C   2C208DE2           ADD      R2,SP,#+44
   \   00000360   0A10A0E1           MOV      R1,R10
   \   00000364   ........           _BLF     ??GetMessageCond,??GetMessageCond??rA
   \   00000368   000050E3           CMP      R0,#+0
   \   0000036C   5000000A           BEQ      ??TaskEntryPoint_24
   \   00000370   000056E3           CMP      R6,#+0
   \   00000374   0000A0E3           MOV      R0,#+0
   \   00000378   2E00001A           BNE      ??TaskEntryPoint_25
   \                     ??TaskEntryPoint_26:
   \   0000037C   0A20D0E7           LDRB     R2,[R0, +R10]
   \   00000380   44108DE2           ADD      R1,SP,#+68
   \   00000384   0120C0E7           STRB     R2,[R0, +R1]
   \   00000388   010080E2           ADD      R0,R0,#+1
   \   0000038C   040050E3           CMP      R0,#+4
   \   00000390   F9FFFFBA           BLT      ??TaskEntryPoint_26
   \   00000394   60149FE5           LDR      R1,??TaskEntryPoint_6+0xC  ;; fake_uart_port_for_tcp_clientPtr
   \   00000398   44009DE5           LDR      R0,[SP, #+68]
   \   0000039C   001091E5           LDR      R1,[R1, #+0]
   \   000003A0   010050E1           CMP      R0,R1
   \   000003A4   0700001A           BNE      ??TaskEntryPoint_27
   \   000003A8   00408DE5           STR      R4,[SP, #+0]
   \   000003AC   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_28:
   \   000003B0   0D10A0E1           MOV      R1,SP
   \   000003B4   0110D0E7           LDRB     R1,[R0, +R1]
   \   000003B8   0A10C0E7           STRB     R1,[R0, +R10]
   \   000003BC   010080E2           ADD      R0,R0,#+1
   \   000003C0   040050E3           CMP      R0,#+4
   \   000003C4   F9FFFFBA           BLT      ??TaskEntryPoint_28
   \                     ??TaskEntryPoint_27:
   \   000003C8   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_29:
   \   000003CC   0A20D0E7           LDRB     R2,[R0, +R10]
   \   000003D0   48108DE2           ADD      R1,SP,#+72
   \   000003D4   0120C0E7           STRB     R2,[R0, +R1]
   \   000003D8   010080E2           ADD      R0,R0,#+1
   \   000003DC   040050E3           CMP      R0,#+4
   \   000003E0   F9FFFFBA           BLT      ??TaskEntryPoint_29
   \   000003E4   48109DE5           LDR      R1,[SP, #+72]
   \   000003E8   0700A0E1           MOV      R0,R7
   \   000003EC   1C108DE5           STR      R1,[SP, #+28]
   \   000003F0   0410DAE5           LDRB     R1,[R10, #+4]
   \   000003F4   0C108DE5           STR      R1,[SP, #+12]
   \   000003F8   0510DAE5           LDRB     R1,[R10, #+5]
   \   000003FC   08108DE5           STR      R1,[SP, #+8]
   \   00000400   0120A0E1           MOV      R2,R1
   \   00000404   0C109DE5           LDR      R1,[SP, #+12]
   \   00000408   ........           _BLF     ??ANPRO10_AddPacketHeading,??ANPRO10_AddPacketHeading??rA
   \   0000040C   076080E0           ADD      R6,R0,R7
   \   00000410   06108AE2           ADD      R1,R10,#+6
   \   00000414   0600A0E1           MOV      R0,R6
   \   00000418   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   0000041C   067080E0           ADD      R7,R0,R6
   \   00000420   D8039FE5           LDR      R0,??TaskEntryPoint_6+0x10  ;; Master
   \   00000424   0160A0E3           MOV      R6,#+1
   \   00000428   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000042C   000050E3           CMP      R0,#+0
   \   00000430   1A00001A           BNE      ??TaskEntryPoint_30
   \   00000434   A6FFFFEA           B        ??TaskEntryPoint_20
   \                     ??TaskEntryPoint_25:
   \   00000438   0A20D0E7           LDRB     R2,[R0, +R10]
   \   0000043C   4C108DE2           ADD      R1,SP,#+76
   \   00000440   0120C0E7           STRB     R2,[R0, +R1]
   \   00000444   010080E2           ADD      R0,R0,#+1
   \   00000448   040050E3           CMP      R0,#+4
   \   0000044C   F9FFFFBA           BLT      ??TaskEntryPoint_25
   \   00000450   4C009DE5           LDR      R0,[SP, #+76]
   \   00000454   1C109DE5           LDR      R1,[SP, #+28]
   \   00000458   010050E1           CMP      R0,R1
   \   0000045C   0400DA05           LDRBEQ   R0,[R10, #+4]
   \   00000460   0C109D05           LDREQ    R1,[SP, #+12]
   \   00000464   011CA001           MOVEQ    R1,R1, LSL #+24
   \   00000468   210C5001           CMPEQ    R0,R1, LSR #+24
   \   0000046C   0500DA05           LDRBEQ   R0,[R10, #+5]
   \   00000470   08109D05           LDREQ    R1,[SP, #+8]
   \   00000474   011CA001           MOVEQ    R1,R1, LSL #+24
   \   00000478   210C5001           CMPEQ    R0,R1, LSR #+24
   \   0000047C   0500001A           BNE      ??TaskEntryPoint_31
   \   00000480   06108AE2           ADD      R1,R10,#+6
   \   00000484   0700A0E1           MOV      R0,R7
   \   00000488   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   0000048C   077080E0           ADD      R7,R0,R7
   \   00000490   016086E2           ADD      R6,R6,#+1
   \   00000494   48FFFFEA           B        ??TaskEntryPoint_12
   \                     ??TaskEntryPoint_31:
   \   00000498   0110A0E3           MOV      R1,#+1
   \   0000049C   0410CDE5           STRB     R1,[SP, #+4]
    168                                  NotCompleteNormalMsg = true;
    169                                  SendPacketNow        = true;
    170                              }
    171                          } else {
    172                              TSN_Delay(MessageQPollPeriod);
    173                          }
    174                      }
    175                  }
    176                  if (UMsgCnt || NMsgCnt) {
    177                      U8 *FirstBlock      = NULL;
    178                      U8 *Packetbuf       = NULL;
    179                      U8 *Currentpos      = NULL;
    180                      TSNUart *SinglePort = NULL;
    181                      if (UMsgCnt) {
    182                          UMsgCnt    = 0;
    183                          FirstBlock = (U8 *)UrgentFirstBlock;
   \                     ??TaskEntryPoint_30:
   \   000004A0   60039FE5           LDR      R0,??TaskEntryPoint_6+0x18  ;; 0x1812b
    184                          Packetbuf  = UrgentPacketbuf;
   \   000004A4   24609DE5           LDR      R6,[SP, #+36]
    185                          Currentpos = UrgentCurrentpos;
    186                          SinglePort = UrgentSinglePort;
   \   000004A8   1CA09DE5           LDR      R10,[SP, #+28]
   \   000004AC   059080E0           ADD      R9,R0,R5
   \   000004B0   450000EA           B        ??TaskEntryPoint_32
    187                      } else {
   \                     ??TaskEntryPoint_24:
   \   000004B4   1C0095E5           LDR      R0,[R5, #+28]
   \   000004B8   2C208DE2           ADD      R2,SP,#+44
   \   000004BC   0B10A0E1           MOV      R1,R11
   \   000004C0   ........           _BLF     ??GetMessageCond,??GetMessageCond??rA
   \   000004C4   000050E3           CMP      R0,#+0
   \   000004C8   7700000A           BEQ      ??TaskEntryPoint_33
   \   000004CC   000059E3           CMP      R9,#+0
   \   000004D0   0000A0E3           MOV      R0,#+0
   \   000004D4   1F00001A           BNE      ??TaskEntryPoint_34
   \                     ??TaskEntryPoint_35:
   \   000004D8   0B20D0E7           LDRB     R2,[R0, +R11]
   \   000004DC   50108DE2           ADD      R1,SP,#+80
   \   000004E0   0120C0E7           STRB     R2,[R0, +R1]
   \   000004E4   010080E2           ADD      R0,R0,#+1
   \   000004E8   040050E3           CMP      R0,#+4
   \   000004EC   F9FFFFBA           BLT      ??TaskEntryPoint_35
   \   000004F0   04139FE5           LDR      R1,??TaskEntryPoint_6+0xC  ;; fake_uart_port_for_tcp_clientPtr
   \   000004F4   50009DE5           LDR      R0,[SP, #+80]
   \   000004F8   001091E5           LDR      R1,[R1, #+0]
   \   000004FC   010050E1           CMP      R0,R1
   \   00000500   0700001A           BNE      ??TaskEntryPoint_36
   \   00000504   00408DE5           STR      R4,[SP, #+0]
   \   00000508   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_37:
   \   0000050C   0D10A0E1           MOV      R1,SP
   \   00000510   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000514   0B10C0E7           STRB     R1,[R0, +R11]
   \   00000518   010080E2           ADD      R0,R0,#+1
   \   0000051C   040050E3           CMP      R0,#+4
   \   00000520   F9FFFFBA           BLT      ??TaskEntryPoint_37
   \                     ??TaskEntryPoint_36:
   \   00000524   0000A0E3           MOV      R0,#+0
   \                     ??TaskEntryPoint_38:
   \   00000528   0B20D0E7           LDRB     R2,[R0, +R11]
   \   0000052C   54108DE2           ADD      R1,SP,#+84
   \   00000530   0120C0E7           STRB     R2,[R0, +R1]
   \   00000534   010080E2           ADD      R0,R0,#+1
   \   00000538   040050E3           CMP      R0,#+4
   \   0000053C   F9FFFFBA           BLT      ??TaskEntryPoint_38
   \   00000540   54109DE5           LDR      R1,[SP, #+84]
   \   00000544   0800A0E1           MOV      R0,R8
   \   00000548   20108DE5           STR      R1,[SP, #+32]
   \   0000054C   0410DBE5           LDRB     R1,[R11, #+4]
   \   00000550   0190A0E3           MOV      R9,#+1
   \   00000554   73FFFFEA           B        ??TaskEntryPoint_23
   \                     ??TaskEntryPoint_34:
   \   00000558   0B20D0E7           LDRB     R2,[R0, +R11]
   \   0000055C   58108DE2           ADD      R1,SP,#+88
   \   00000560   0120C0E7           STRB     R2,[R0, +R1]
   \   00000564   010080E2           ADD      R0,R0,#+1
   \   00000568   040050E3           CMP      R0,#+4
   \   0000056C   F9FFFFBA           BLT      ??TaskEntryPoint_34
   \   00000570   58009DE5           LDR      R0,[SP, #+88]
   \   00000574   20109DE5           LDR      R1,[SP, #+32]
   \   00000578   010050E1           CMP      R0,R1
   \   0000057C   0400DB05           LDRBEQ   R0,[R11, #+4]
   \   00000580   14109D05           LDREQ    R1,[SP, #+20]
   \   00000584   011CA001           MOVEQ    R1,R1, LSL #+24
   \   00000588   210C5001           CMPEQ    R0,R1, LSR #+24
   \   0000058C   0500DB05           LDRBEQ   R0,[R11, #+5]
   \   00000590   10109D05           LDREQ    R1,[SP, #+16]
   \   00000594   011CA001           MOVEQ    R1,R1, LSL #+24
   \   00000598   210C5001           CMPEQ    R0,R1, LSR #+24
   \   0000059C   01FFFF0A           BEQ      ??TaskEntryPoint_13
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   0510CDE5           STRB     R1,[SP, #+5]
   \                     ??TaskEntryPoint_14:
   \   000005A8   000056E3           CMP      R6,#+0
   \   000005AC   BBFFFF1A           BNE      ??TaskEntryPoint_30
   \   000005B0   000059E3           CMP      R9,#+0
   \   000005B4   E5FEFF0A           BEQ      ??TaskEntryPoint_11
    188                          NMsgCnt    = 0;
    189                          FirstBlock = (U8 *)NormalFirstBlock;
   \   000005B8   4C029FE5           LDR      R0,??TaskEntryPoint_6+0x1C  ;; 0x2012b
    190                          Packetbuf  = NormalPacketbuf;
   \   000005BC   28609DE5           LDR      R6,[SP, #+40]
    191                          Currentpos = NormalCurrentpos;
    192                          SinglePort = NormalSinglePort;
   \   000005C0   20A09DE5           LDR      R10,[SP, #+32]
   \   000005C4   059080E0           ADD      R9,R0,R5
   \   000005C8   0870A0E1           MOV      R7,R8
    193                      }
    194          #if (USE_LZO == 1)
    195                      {
    196                          PutU16(Currentpos, ECMD_NMDWOACK);
   \                     ??TaskEntryPoint_32:
   \   000005CC   0010A0E3           MOV      R1,#+0
   \   000005D0   0700A0E1           MOV      R0,R7
   \   000005D4   ........           _BLF     ??PutU16,??PutU16??rA
    197                          lzo_uint OrgSize = Currentpos + sizeof(U16) - Packetbuf;
   \   000005D8   020087E2           ADD      R0,R7,#+2
   \   000005DC   06B040E0           SUB      R11,R0,R6
    198                          lzo_uint NewSize = OrgSize;
   \   000005E0   00B08DE5           STR      R11,[SP, #+0]
    199                          int r = lzo1x_1_compress((const U8 *)FirstBlock, OrgSize, (U8 *)CompressBufData, &NewSize, WrkMem);
    200                          int SizeChange = NewSize - OrgSize - sizeof(U16);
    201                          //int r = LZO_E_ERROR;
    202                          //if ( r == LZO_E_OK && LZOControlOK && ( SizeChange < 0) ) {
    203                          if (r == LZO_E_OK && (SizeChange < 0)) {
   \   000005E4   2000A0E3           MOV      R0,#+32
   \   000005E8   810C80E3           ORR      R0,R0,#0x8100
   \   000005EC   050080E0           ADD      R0,R0,R5
   \   000005F0   01002DE9           PUSH     {R0}
   \   000005F4   04308DE2           ADD      R3,SP,#+4
   \   000005F8   242085E2           ADD      R2,R5,#+36
   \   000005FC   0B10A0E1           MOV      R1,R11
   \   00000600   0900A0E1           MOV      R0,R9
   \   00000604   ........           _BLF     lzo1x_1_compress,??lzo1x_1_compress??rA
   \   00000608   000050E3           CMP      R0,#+0
   \   0000060C   04D08DE2           ADD      SP,SP,#+4
   \   00000610   0F00001A           BNE      ??TaskEntryPoint_39
   \   00000614   00009DE5           LDR      R0,[SP, #+0]
   \   00000618   0B0040E0           SUB      R0,R0,R11
   \   0000061C   020050E2           SUBS     R0,R0,#+2
   \   00000620   0B00005A           BPL      ??TaskEntryPoint_39
    204                              pCH->CommandNo = CMD_TXU_COMPRESSED_PACKET;
   \   00000624   D300A0E3           MOV      R0,#+211
   \   00000628   2000C5E5           STRB     R0,[R5, #+32]
   \   0000062C   0700A0E3           MOV      R0,#+7
   \   00000630   2100C5E5           STRB     R0,[R5, #+33]
    205                              pCH->ndb       = NewSize;
   \   00000634   00009DE5           LDR      R0,[SP, #+0]
    206                              Currentpos = (U8 *)FirstBlock + ANPRO10_AddCommand((U8 *)FirstBlock, (U8 *)CompressBufHeading);
   \   00000638   201085E2           ADD      R1,R5,#+32
   \   0000063C   2200C5E5           STRB     R0,[R5, #+34]
   \   00000640   2004A0E1           LSR      R0,R0,#+8
   \   00000644   2300C5E5           STRB     R0,[R5, #+35]
   \   00000648   0900A0E1           MOV      R0,R9
   \   0000064C   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   00000650   097080E0           ADD      R7,R0,R9
    207                          } else {
    208                              // No compression, no reason to add END_OF_DATA
    209                              //Ptr--;
    210                          }
    211          
    212          
    213                      }
    214          #endif
    215                      Currentpos += ANPRO10_AddPacketTail(Packetbuf, Currentpos - Packetbuf, false); //requestack is always false
   \                     ??TaskEntryPoint_39:
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   061047E0           SUB      R1,R7,R6
   \   0000065C   0600A0E1           MOV      R0,R6
   \   00000660   ........           _BLF     ??ANPRO10_AddPacketTail,??ANPRO10_AddPacketTail??rA
   \   00000664   070080E0           ADD      R0,R0,R7
    216                                                                                                     // transmit the package
    217                      if (SinglePort) {
   \   00000668   00005AE3           CMP      R10,#+0
   \   0000066C   1100000A           BEQ      ??TaskEntryPoint_40
    218                          SinglePort->Send(Packetbuf, Currentpos - Packetbuf, 4);
   \   00000670   0110A0E3           MOV      R1,#+1
   \   00000674   02002DE9           PUSH     {R1}
   \   00000678   062040E0           SUB      R2,R0,R6
   \   0000067C   0610A0E1           MOV      R1,R6
   \   00000680   DC609AE5           LDR      R6,[R10, #+220]
   \   00000684   0430A0E3           MOV      R3,#+4
   \   00000688   046096E5           LDR      R6,[R6, #+4]
   \   0000068C   0A00A0E1           MOV      R0,R10
   \   00000690   0FE0A0E1           MOV      LR,PC
   \   00000694   16FF2FE1           BX       R6
    219                          SinglePort->TxCnt++;
   \   00000698   B8009AE5           LDR      R0,[R10, #+184]
   \   0000069C   010080E2           ADD      R0,R0,#+1
   \   000006A0   B8008AE5           STR      R0,[R10, #+184]
   \   000006A4   04D08DE2           ADD      SP,SP,#+4
   \   000006A8   A8FEFFEA           B        ??TaskEntryPoint_11
    220          
    221                      } else /*if ( SendFlashDataInProgress == FLASH_IDLE)*/{
   \                     ??TaskEntryPoint_33:
   \   000006AC   1900A0E3           MOV      R0,#+25
   \   000006B0   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   000006B4   C0FEFFEA           B        ??TaskEntryPoint_12
    222          #if defined(S2TXU) || defined(ANBOOTLOADER)
    223                          char EventMsk = 0;
    224                          int  ComCnt   = 0;
    225                          int Size = Currentpos - Packetbuf;
    226                          for (pBIt = ANPRO10ComPorts.begin();  pBIt != ANPRO10ComPorts.end(); pBIt++) {
   \                     ??TaskEntryPoint_40:
   \   000006B8   008095E5           LDR      R8,[R5, #+0]
   \   000006BC   0090A0E3           MOV      R9,#+0
   \   000006C0   067040E0           SUB      R7,R0,R6
   \   000006C4   170000EA           B        ??TaskEntryPoint_41
    227                              char ComSignal = 1 << ComCnt++;
    228                              EventMsk |= ComSignal;
    229                              (*pBIt)->Send(Packetbuf, Size, ComSignal, false);
   \                     ??TaskEntryPoint_42:
   \   000006C8   10B098E5           LDR      R11,[R8, #+16]
   \   000006CC   0100A0E3           MOV      R0,#+1
   \   000006D0   1039A0E1           LSL      R3,R0,R9
   \   000006D4   0000A0E3           MOV      R0,#+0
   \   000006D8   01002DE9           PUSH     {R0}
   \   000006DC   0B00A0E1           MOV      R0,R11
   \   000006E0   DCB09BE5           LDR      R11,[R11, #+220]
   \   000006E4   FF3003E2           AND      R3,R3,#0xFF
   \   000006E8   04C09BE5           LDR      R12,[R11, #+4]
   \   000006EC   0AA083E1           ORR      R10,R3,R10
   \   000006F0   0720A0E1           MOV      R2,R7
   \   000006F4   0610A0E1           MOV      R1,R6
   \   000006F8   0FE0A0E1           MOV      LR,PC
   \   000006FC   1CFF2FE1           BX       R12
    230                              (*pBIt)->TxCnt++;
   \   00000700   100088E2           ADD      R0,R8,#+16
   \   00000704   000090E5           LDR      R0,[R0, #+0]
   \   00000708   019089E2           ADD      R9,R9,#+1
   \   0000070C   B81090E5           LDR      R1,[R0, #+184]
   \   00000710   011081E2           ADD      R1,R1,#+1
   \   00000714   B81080E5           STR      R1,[R0, #+184]
    231                          }
   \   00000718   0800A0E1           MOV      R0,R8
   \   0000071C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000720   0080A0E1           MOV      R8,R0
   \   00000724   04D08DE2           ADD      SP,SP,#+4
   \                     ??TaskEntryPoint_41:
   \   00000728   050058E1           CMP      R8,R5
   \   0000072C   E5FFFF1A           BNE      ??TaskEntryPoint_42
    232                          int WaitTime    = (130000 * Size) / MinBaudRate + 2;
   \   00000730   7C1BA0E3           MOV      R1,#+126976
   \   00000734   BD1E81E3           ORR      R1,R1,#0xBD0
   \   00000738   910700E0           MUL      R0,R1,R7
   \   0000073C   30109DE5           LDR      R1,[SP, #+48]
    233                          int Cnt = 0;
   \   00000740   0070A0E3           MOV      R7,#+0
   \   00000744   ........           _BLF     ??divu32_a,??rA??divu32_a
    234                          int StartTime   = OS_Time;
   \   00000748   A4009FE5           LDR      R0,??TaskEntryPoint_6+0x4  ;; OS_Time
   \   0000074C   026081E2           ADD      R6,R1,#+2
   \   00000750   008090E5           LDR      R8,[R0, #+0]
   \   00000754   030000EA           B        ??TaskEntryPoint_43
    235                          do {
    236                              char OccuredEvents = OS_WaitEventTimed(EventMsk, WaitTime);
    237                              EventMsk    &= ~OccuredEvents;
    238                              WaitTime    -= OS_Time - StartTime;
    239                              StartTime    = OS_Time;
    240                          } while (WaitTime > 0 && EventMsk && (Cnt++ < 3));
   \                     ??TaskEntryPoint_44:
   \   00000758   0700A0E1           MOV      R0,R7
   \   0000075C   017080E2           ADD      R7,R0,#+1
   \   00000760   030050E3           CMP      R0,#+3
   \   00000764   100000AA           BGE      ??TaskEntryPoint_45
   \                     ??TaskEntryPoint_43:
   \   00000768   0610A0E1           MOV      R1,R6
   \   0000076C   FF000AE2           AND      R0,R10,#0xFF
   \   00000770   ........           _BLF     OS_WaitEventTimed,??OS_WaitEventTimed??rA
   \   00000774   00A0CAE1           BIC      R10,R10,R0
   \   00000778   74009FE5           LDR      R0,??TaskEntryPoint_6+0x4  ;; OS_Time
   \   0000077C   FFA00AE2           AND      R10,R10,#0xFF
   \   00000780   000090E5           LDR      R0,[R0, #+0]
   \   00000784   000046E0           SUB      R0,R6,R0
   \   00000788   006088E0           ADD      R6,R8,R0
   \   0000078C   60009FE5           LDR      R0,??TaskEntryPoint_6+0x4  ;; OS_Time
   \   00000790   010056E3           CMP      R6,#+1
   \   00000794   008090E5           LDR      R8,[R0, #+0]
   \   00000798   010000BA           BLT      ??TaskEntryPoint_46
   \   0000079C   0A00B0E1           MOVS     R0,R10
   \   000007A0   ECFFFF1A           BNE      ??TaskEntryPoint_44
    241                          if (EventMsk) {
   \                     ??TaskEntryPoint_46:
   \   000007A4   0A00B0E1           MOVS     R0,R10
   \   000007A8   68FEFF0A           BEQ      ??TaskEntryPoint_11
    242                              int ComCnt = 0;
    243                              for (pBIt = ANPRO10ComPorts.begin();  pBIt != ANPRO10ComPorts.end(); pBIt++) {
   \                     ??TaskEntryPoint_45:
   \   000007AC   008095E5           LDR      R8,[R5, #+0]
   \   000007B0   0060A0E3           MOV      R6,#+0
   \                     ??TaskEntryPoint_47:
   \   000007B4   050058E1           CMP      R8,R5
   \   000007B8   64FEFF0A           BEQ      ??TaskEntryPoint_11
    244                                  if (EventMsk & (1 << ComCnt++)) {
   \   000007BC   0600A0E1           MOV      R0,R6
   \   000007C0   016080E2           ADD      R6,R0,#+1
   \   000007C4   0120A0E3           MOV      R2,#+1
   \   000007C8   1200A0E1           LSL      R0,R2,R0
   \   000007CC   0A0010E1           TST      R0,R10
   \   000007D0   0200000A           BEQ      ??TaskEntryPoint_48
    245                                      (*pBIt)->SetTaskPtr(NULL);
   \   000007D4   100098E5           LDR      R0,[R8, #+16]
   \   000007D8   0010A0E3           MOV      R1,#+0
   \   000007DC   ........           _BLF     ??SetTaskPtr,??SetTaskPtr??rA
    246                                  }
    247                              }
   \                     ??TaskEntryPoint_48:
   \   000007E0   0800A0E1           MOV      R0,R8
   \   000007E4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000007E8   0080A0E1           MOV      R8,R0
   \   000007EC   F0FFFFEA           B        ??TaskEntryPoint_47
   \                     ??TaskEntryPoint_6:
   \   000007F0   ........           DC32     ??Channels
   \   000007F4   ........           DC32     OS_Time
   \   000007F8   ........           DC32     ??UrgentCommandbuf
   \   000007FC   ........           DC32     fake_uart_port_for_tcp_clientPtr
   \   00000800   ........           DC32     Master
   \   00000804   ........           DC32     ??NormalCommandbuf
   \   00000808   2B810100           DC32     0x1812b
   \   0000080C   2B010200           DC32     0x2012b
    248                          }
    249          #endif
    250                      }
    251                  }
    252              }
    253          }

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ANPRO10ComPorts:
   \   00000000                      DS8 24
   \                     ??UrgentCommandQ:
   \   00000018                      DS8 4
   \                     ??NormalCommandQ:
   \   0000001C                      DS8 4
   \   00000020                      DS8 33024
   \   00008120                      DS8 65536
   \   00018120                      DS8 32768
   \   00020120                      DS8 32768

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??UrgentCommandbuf:
   \   00000000                      DS8 16000

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??NormalCommandbuf:
   \   00000000                      DS8 16000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNAsyncSender &TSNAsyncSender::new TSNAsyncSender()
   \                     `??new TSNAsyncSender`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   ........           B        ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TSNAsyncSender::delete ~TSNAsyncSender(TSNAsyncSender *)
   \                     `??delete ~TSNAsyncSender`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0000000A           BEQ      `??delete ~TSNAsyncSender_1`
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TSNAsyncSender_1`:
   \   00000010                      REQUIRE ?Subroutine6
   \   00000010                      ;; // Fall through to label ?Subroutine6

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ANPRO10ComPorts
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ANPRO10ComPorts
    254          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TSNAsyncSender::TSNAsyncSender()
                                        0
     TSNAsyncSender::TaskEntryPoint()
                                      140
     TSNAsyncSender::delete ~TSNAsyncSender(TSNAsyncSender *)
                                        4
     TSNAsyncSender::new TSNAsyncSender()
                                        4
     TSNAsyncSender::~TSNAsyncSender()
                                        0
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Erase(_Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Insert(bool, _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr, TSNUart *)
                                       24
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::insert(TSNUart *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     set<TSNUart *>::~set()             8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        92
     _Tree_algobase<allocator<void>>::_Clear()
                                        36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       356
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::insert(TSNUart *)
                                       200
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Erase(_Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr)
                                        68
     _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Insert(bool, _Tree<_Tset_traits<TSNUart *, less<TSNUart *>, allocator<TSNUart *>, false>>::_Nodeptr, TSNUart *)
                                        96
     set<TSNUart *>::~set()             32
     TSNAsyncSender::TSNAsyncSender()
                                         4
     TSNAsyncSender::~TSNAsyncSender()
                                         4
     TSNAsyncSender::TaskEntryPoint()
                                      2064
     TSNAsyncSender::ANPRO10ComPorts
                                    164128
     UrgentCommandbuf                16000
     NormalCommandbuf                16000
     TSNAsyncSender::new TSNAsyncSender()
                                        16
     TSNAsyncSender::delete ~TSNAsyncSender(TSNAsyncSender *)
                                        16
     ?Subroutine6                        8
     __sti__routine()                   56
     ??DataTable1                        4
      Others                           356

 
   3 644 bytes in segment CODE
      12 bytes in segment DATA_C
 196 132 bytes in segment DATA_Z
       4 bytes in segment DIFUNCT
      12 bytes in segment INITTAB
 
   2 176 bytes of CODE  memory (+ 1 484 bytes shared)
      12 bytes of CONST memory
 196 132 bytes of DATA  memory

Errors: none
Warnings: none
