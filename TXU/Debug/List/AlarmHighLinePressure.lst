##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHighLinePressure.Cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHighLinePressure.Cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHighLinePressure.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHighLinePressure.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHighLinePressure.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_2  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_2:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighLinePressure::~AlarmHighLinePressure()
   \                     `?~AlarmHighLinePressure`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHighLinePressure_1`
   \   00000014   0100000A           BEQ      `?~AlarmHighLinePressure_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHighLinePressure_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHighLinePressure_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHighLinePressure_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmHighLinePressure::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmHighLinePressure::AlarmHighLinePressure(void):AlarmBasic(NULL){
   \                     ??AlarmHighLinePressure:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     12              NumberOfAlarmSettings++; // Should not do this, but must maintain backward compatibility
   \   00000018   ........           LDR      R0,??DataTable4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     13          	Deadband            = 10.0 / MH2O_TO_MBAR;
   \   00000028   ........           LDR      R0,??DataTable5  ;; 0x3dd0d67f
   \   0000002C   BC0084E5           STR      R0,[R4, #+188]
     14          }
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034                      REQUIRE ?Subroutine11
   \   00000034                      ;; // Fall through to label ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     15          AlarmHighLinePressure::AlarmHighLinePressure(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmHighLinePressure_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     16          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     17          	NumberOfAlarmSettings++;
   \   00000018   ........           LDR      R0,??DataTable4  ;; ??NumberOfAlarmSettings
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
     18          	PROPointer          = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     19          	PROLPressPtr        = (PROLinePressure*)PROPtr;
   \   0000002C   EC5084E5           STR      R5,[R4, #+236]
     20          	IDNumber            = (ID_AL_HIGH_LINE_PRESS << 16)+NumberOfAlarmSettings;
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   8016A0E3           MOV      R1,#+134217728
   \   00000038   F71781E3           ORR      R1,R1,#0x3DC0000
   \   0000003C   000081E0           ADD      R0,R1,R0
   \   00000040   9C0084E5           STR      R0,[R4, #+156]
     21          	Type                = ID_AL_HIGH_LINE_PRESS;
   \   00000044   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000048   A00084E5           STR      R0,[R4, #+160]
     22          	Locked              = PROLPressPtr->HighLinePressLocked;
   \   0000004C   9001D5E5           LDRB     R0,[R5, #+400]
   \   00000050   E800C4E5           STRB     R0,[R4, #+232]
     23          	Limit               = PROLPressPtr->HighPressLimit;
   \   00000054   880195E5           LDR      R0,[R5, #+392]
   \   00000058   E40084E5           STR      R0,[R4, #+228]
     24          	Deadband            = 10.0 / MH2O_TO_MBAR;
   \   0000005C   ........           LDR      R0,??DataTable5  ;; 0x3dd0d67f
   \   00000060   BC0084E5           STR      R0,[R4, #+188]
     25          	MessageKey          = L_WORD504; // HighLinePress
   \   00000064   7E0FA0E3           MOV      R0,#+504
   \   00000068   B80084E5           STR      R0,[R4, #+184]
     26          	TPCMessageKey       = L_WORD505;  // HLPr
   \   0000006C   010080E3           ORR      R0,R0,#0x1
   \   00000070   B40084E5           STR      R0,[R4, #+180]
     27          }
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   3040BDE8           POP      {R4,R5,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          void AlarmHighLinePressure::Check(void)
     30          {
   \                     ??Check:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     31          	int Status = AL_STAT_IN_DEADBAND;
     32          	if ( PROLPressPtr->HasPressure ) {
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   5C11D0E5           LDRB     R1,[R0, #+348]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0900000A           BEQ      ??Check_1
     33          		float Val = PROLPressPtr->Pressure;
   \   0000001C   746190E5           LDR      R6,[R0, #+372]
     34          		if ( Val < Limit - Deadband ) {
   \   00000020   E47094E5           LDR      R7,[R4, #+228]
   \   00000024   BC1094E5           LDR      R1,[R4, #+188]
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   0010A0E1           MOV      R1,R0
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     __fLess,??__fLess??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??Check_2
     35          			Status = AL_STAT_IN_NORMAL;
   \                     ??Check_1:
   \   00000044   0050A0E3           MOV      R5,#+0
   \   00000048   040000EA           B        ??Check_3
     36          		} else if ( Val >= Limit ) {
   \                     ??Check_2:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000058   000050E3           CMP      R0,#+0
     37          			Status = AL_STAT_IN_ALARM;
   \   0000005C   0150A013           MOVNE    R5,#+1
     38          		}
     39          	} else {
     40          		Status = AL_STAT_IN_NORMAL;
     41          	}
     42          	UpdateAlarm(Status);
   \                     ??Check_3:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     43          }
   \   0000006C   F040BDE8           POP      {R4-R7,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
     44          
     45          ///////////////////////////////////////////////////////////////
     46          //
     47          // Routines for the librarian for input
     48          //
     49          ///////////////////////////////////////////////////////////////
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          int AlarmHighLinePressure::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     52          {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   78D04DE2           SUB      SP,SP,#+120
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   9CA0DDE5           LDRB     R10,[SP, #+156]
   \   00000010   A0509DE5           LDR      R5,[SP, #+160]
   \   00000014   0180A0E1           MOV      R8,R1
     53          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   04108DE5           STR      R1,[SP, #+4]
     54          	if ( Locked ) {
   \   00000024   E800D4E5           LDRB     R0,[R4, #+232]
   \   00000028   0290A0E1           MOV      R9,R2
   \   0000002C   0370A0E1           MOV      R7,R3
   \   00000030   000050E3           CMP      R0,#+0
     55          		Status = E_NO_INPUT_PERMISSION;
   \   00000034   2A10A013           MOVNE    R1,#+42
   \   00000038   00108D15           STRNE    R1,[SP, #+0]
   \   0000003C   7700001A           BNE      ??PutValue_3
     56          	} else {
     57                  float OrgLimit = Limit;
   \   00000040   E46094E5           LDR      R6,[R4, #+228]
     58          		int Key = FindConfigKey(NewValue);
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   5C008DE2           ADD      R0,SP,#+92
   \   0000004C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000050   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000054   00B0A0E1           MOV      R11,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   5C008DE2           ADD      R0,SP,#+92
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
     59          		switch ( Key ) {
   \   00000068   64B04BE2           SUB      R11,R11,#+100
   \   0000006C   05005BE3           CMP      R11,#+5
   \   00000070   0A00008A           BHI      ??PutValue_4
   \   00000074   010F8FE2           ADR      R0,??PutValue_1
   \   00000078   0B00D0E7           LDRB     R0,[R0, R11]
   \   0000007C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000080   01050105           DC8      +1,+5,+1,+5
   \   00000084   01050000           DC8      +1,+5,+0,+0
     60          			case C_ON:
     61          			case C_OPEN:
     62          			case C_ENABLE:
     63                          SetEnable(EnableTrue);
   \                     ??PutValue_5:
   \   00000088   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_6:
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     ??SetEnable,??SetEnable??rA
   \   00000094   4A0000EA           B        ??PutValue_7
     64          				break;
     65          			case C_OFF:
     66          			case C_CLOSE:
     67          			case C_DISABLE:
     68                          SetEnable(EnableFalse);
   \                     ??PutValue_8:
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   FAFFFFEA           B        ??PutValue_6
     69          				break;
     70          			default:
     71          				switch ( ValueId ) {
   \                     ??PutValue_4:
   \   000000A0   3210A0E3           MOV      R1,#+50
   \   000000A4   8C1D81E3           ORR      R1,R1,#0x2300
   \   000000A8   010058E1           CMP      R8,R1
   \   000000AC   0710A0E1           MOV      R1,R7
   \   000000B0   3300001A           BNE      ??PutValue_9
     72          					case SVT_AL_LIMIT:
     73          						{
     74          							int NewStatus = FindConfigKey(NewValue);
   \   000000B4   24008DE2           ADD      R0,SP,#+36
   \   000000B8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000BC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000C0   0080A0E1           MOV      R8,R0
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
     75          							switch ( NewStatus ) {
   \   000000D4   648058E2           SUBS     R8,R8,#+100
   \   000000D8   0200000A           BEQ      ??PutValue_10
   \   000000DC   018058E2           SUBS     R8,R8,#+1
   \   000000E0   0300000A           BEQ      ??PutValue_11
   \   000000E4   040000EA           B        ??PutValue_12
     76          								case C_ENABLE:
     77          									Enable = true;
   \                     ??PutValue_10:
   \   000000E8   0100A0E3           MOV      R0,#+1
   \                     ??PutValue_13:
   \   000000EC   E200C4E5           STRB     R0,[R4, #+226]
   \   000000F0   330000EA           B        ??PutValue_7
     78          									break;
     79          								case C_DISABLE:
     80          									Enable = false;
   \                     ??PutValue_11:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   FBFFFFEA           B        ??PutValue_13
     81          									break;
     82          								default:
     83          									{
     84          										float Value = ConvertToSi(NewValue, ValUnitId=PRESSURE_UNIT3, Status,LIMIT_LOW_LINEPRESS ,PROLPressPtr->GetHiHiPressLimit(),0.0);
   \                     ??PutValue_12:
   \   000000FC   EC0094E5           LDR      R0,[R4, #+236]
   \   00000100   ........           _BLF     ??GetHiHiPressLimit,??GetHiHiPressLimit??rA
   \   00000104   0080A0E1           MOV      R8,R0
   \   00000108   0810A0E3           MOV      R1,#+8
   \   0000010C   04108DE5           STR      R1,[SP, #+4]
   \   00000110   0710A0E1           MOV      R1,R7
   \   00000114   40008DE2           ADD      R0,SP,#+64
   \   00000118   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000011C   0070A0E1           MOV      R7,R0
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   03002DE9           PUSH     {R0,R1}
   \   0000012C   0800A0E1           MOV      R0,R8
   \   00000130   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000134   03002DE9           PUSH     {R0,R1}
   \   00000138   FC009FE5           LDR      R0,??PutValue_14  ;; 0x6f46d2ce
   \   0000013C   FC109FE5           LDR      R1,??PutValue_14+0x4  ;; 0xffffffffc02464f2
   \   00000140   03002DE9           PUSH     {R0,R1}
   \   00000144   18208DE2           ADD      R2,SP,#+24
   \   00000148   0800BDE8           POP      {R3}
   \   0000014C   0810A0E3           MOV      R1,#+8
   \   00000150   0700A0E1           MOV      R0,R7
   \   00000154   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000158   0070A0E1           MOV      R7,R0
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   54008DE2           ADD      R0,SP,#+84
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
     85          										if ( Status== E_NO_ERR ) {
   \   0000016C   14009DE5           LDR      R0,[SP, #+20]
   \   00000170   14D08DE2           ADD      SP,SP,#+20
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   1100001A           BNE      ??PutValue_7
     86          											Limit = Value;
   \   0000017C   E47084E5           STR      R7,[R4, #+228]
   \   00000180   120000EA           B        ??PutValue_15
     87          										}
     88          									}
     89          									break;
     90          							}
     91          						}
     92          						break;
     93          					default:
     94          						Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \                     ??PutValue_9:
   \   00000184   08008DE2           ADD      R0,SP,#+8
   \   00000188   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000018C   0030A0E1           MOV      R3,R0
   \   00000190   04008DE2           ADD      R0,SP,#+4
   \   00000194   01002DE9           PUSH     {R0}
   \   00000198   00042DE9           PUSH     {R10}
   \   0000019C   0920A0E1           MOV      R2,R9
   \   000001A0   0810A0E1           MOV      R1,R8
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001AC   08008DE5           STR      R0,[SP, #+8]
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   10008DE2           ADD      R0,SP,#+16
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   08D08DE2           ADD      SP,SP,#+8
     95          						break;
     96          				}
     97          				break; // switch ( ValueId )
     98          		}//switch ( Key )
     99          		if ( Status==E_NO_ERR ) {
   \                     ??PutValue_7:
   \   000001C4   00009DE5           LDR      R0,[SP, #+0]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   1300001A           BNE      ??PutValue_3
    100          			SetModifiedFlag();
   \                     ??PutValue_15:
   \   000001D0   A41094E5           LDR      R1,[R4, #+164]
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   541091E5           LDR      R1,[R1, #+84]
   \   000001DC   0FE0A0E1           MOV      LR,PC
   \   000001E0   11FF2FE1           BX       R1
    101          			if ( Limit != OrgLimit ) {
   \   000001E4   E40094E5           LDR      R0,[R4, #+228]
   \   000001E8   0610A0E1           MOV      R1,R6
   \   000001EC   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0900000A           BEQ      ??PutValue_3
    102          				LogEvent("New limit");
   \   000001F8   44109FE5           LDR      R1,??PutValue_14+0x8  ;; `?<Constant "New limit">`
   \   000001FC   08008DE2           ADD      R0,SP,#+8
   \   00000200   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000204   0010A0E1           MOV      R1,R0
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   ........           _BLF     ??LogEvent,??LogEvent??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   08008DE2           ADD      R0,SP,#+8
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
    103          			}
    104          		}
    105          	}// if ( Locked ) else
    106          	if (UnitId) {
   \                     ??PutValue_3:
   \   00000220   000055E3           CMP      R5,#+0
    107          		*UnitId = ValUnitId;
   \   00000224   04009D15           LDRNE    R0,[SP, #+4]
   \   00000228   00008515           STRNE    R0,[R5, #+0]
    108          	}
    109          	return(Status);
   \   0000022C   00009DE5           LDR      R0,[SP, #+0]
   \   00000230   78D08DE2           ADD      SP,SP,#+120
   \   00000234   F04FBDE8           POP      {R4-R11,LR}
   \   00000238   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_14:
   \   0000023C   CED2466F           DC32     0x6f46d2ce
   \   00000240   F26424C0           DC32     0xffffffffc02464f2
   \   00000244   ........           DC32     `?<Constant "New limit">`
    110          }
    111          

   \                                 In segment CODE, align 4, keep-with-next
    112          int  AlarmHighLinePressure::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    113          {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C409DE5           LDR      R4,[SP, #+28]
   \   00000008   20509DE5           LDR      R5,[SP, #+32]
    114          	int Status = GETVAL_NO_ERR;
   \   0000000C   00C0A0E3           MOV      R12,#+0
    115          	switch ( ValueId ) {
   \   00000010   0860A0E3           MOV      R6,#+8
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   328041E2           SUB      R8,R1,#+50
   \   0000001C   8C8D48E2           SUB      R8,R8,#+8960
   \   00000020   010058E3           CMP      R8,#+1
   \   00000024   1200008A           BHI      ??GetValue_3
   \   00000028   019F8FE2           ADR      R9,??GetValue_1
   \   0000002C   0890D9E7           LDRB     R9,[R9, R8]
   \   00000030   09F18FE0           ADD      PC,PC,R9, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00090000           DC8      +0,+9,+0,+0
    116          		case SVT_AL_LIMIT:
    117          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E41090E5           LDR      R1,[R0, #+228]
   \   0000003C   001083E5           STR      R1,[R3, #+0]
    118          			DecPnt     = 1;
   \   00000040   007084E5           STR      R7,[R4, #+0]
    119          			Unit       = PRESSURE_UNIT3;
   \   00000044   006085E5           STR      R6,[R5, #+0]
    120          			if ( !Enable ) {
   \   00000048   E200D0E5           LDRB     R0,[R0, #+226]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0C00001A           BNE      ??GetValue_5
    121          				Status     = GETVAL_DISABLED;
   \   00000054   09C0A0E3           MOV      R12,#+9
   \   00000058   0A0000EA           B        ??GetValue_5
    122          			}
    123          			break;
    124          		case SVT_AL_VALUE:
    125          			MyRetValue = PROLPressPtr->Pressure;
   \                     ??GetValue_6:
   \   0000005C   EC0090E5           LDR      R0,[R0, #+236]
   \   00000060   740190E5           LDR      R0,[R0, #+372]
   \   00000064   000083E5           STR      R0,[R3, #+0]
    126          			DecPnt     = 1;
   \   00000068   007084E5           STR      R7,[R4, #+0]
    127          			Unit       = PRESSURE_UNIT3;
   \   0000006C   006085E5           STR      R6,[R5, #+0]
   \   00000070   040000EA           B        ??GetValue_5
    128          			break;
    129          		default:
    130          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000074   20002DE9           PUSH     {R5}
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   00C0A0E1           MOV      R12,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    131          			break;
    132          	}
    133          	return(Status);
   \                     ??GetValue_5:
   \   00000088   F043BDE8           POP      {R4-R9,LR}
   \   0000008C   0C00A0E1           MOV      R0,R12
   \   00000090   1EFF2FE1           BX       LR               ;; return
    134          }
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          int AlarmHighLinePressure::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    137          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    138          	int Status = GETVAL_NO_ERR;
    139          	//switch ( ValueId ) {
    140          	//	default:
    141          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
    142          	//		break;
    143          	//}
    144          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008                      REQUIRE ?Subroutine10
   \   00000008                      ;; // Fall through to label ?Subroutine10
    145          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          int AlarmHighLinePressure::PutFloatValue( int ValueId, float NewValue)
    148          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    149          	int Status= E_NO_ERR;
    150          	//switch ( ValueId ) {
    151          	//   default:
    152          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
    153          	//     break;
    154          	//}
    155          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   ........           B        ?Subroutine10
    156          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighLinePressure &AlarmHighLinePressure::new AlarmHighLinePressure()
   \                     `??new AlarmHighLinePressure`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   F000A0E3           MOV      R0,#+240
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AlarmHighLinePressure_2`
   \   00000014   ........           BL       ??AlarmHighLinePressure
   \                     `??new AlarmHighLinePressure_2`:
   \   00000018   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighLinePressure &AlarmHighLinePressure::new AlarmHighLinePressure(PRogramObjectBase *)
   \                     `??new AlarmHighLinePressure_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmHighLinePressure_3`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmHighLinePressure_1
   \                     `??new AlarmHighLinePressure_3`:
   \   00000020   ........           B        ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??NumberOfAlarmSettings

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   7FD6D03D           DC32     0x3dd0d67f
    157          
    158          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHighLinePressure::AlarmHighLinePressure()
                                        8
     AlarmHighLinePressure::AlarmHighLinePressure(PRogramObjectBase *)
                                       12
     AlarmHighLinePressure::Check()    24
     AlarmHighLinePressure::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmHighLinePressure::GetValue(int, int, float &, int &, int &)
                                       36
     AlarmHighLinePressure::PutFloatValue(int, float)
                                        4
     AlarmHighLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                      180
     AlarmHighLinePressure::new AlarmHighLinePressure()
                                        4
     AlarmHighLinePressure::new AlarmHighLinePressure(PRogramObjectBase *)
                                        8
     AlarmHighLinePressure::~AlarmHighLinePressure()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AlarmHighLinePressure::~AlarmHighLinePressure()
                                      56
     AlarmHighLinePressure::NumberOfAlarmSettings
                                       4
     AlarmHighLinePressure::AlarmHighLinePressure()
                                      52
     ?Subroutine11                     8
     AlarmHighLinePressure::AlarmHighLinePressure(PRogramObjectBase *)
                                     128
     AlarmHighLinePressure::Check()  116
     AlarmHighLinePressure::PutValue(int, int, AnsiString, bool, int *)
                                     584
     AlarmHighLinePressure::GetValue(int, int, float &, int &, int &)
                                     148
     AlarmHighLinePressure::GetStringValue(int, int, AnsiString &)
                                       8
     ?Subroutine10                     8
     AlarmHighLinePressure::PutFloatValue(int, float)
                                      12
     ?<Constant "New limit">          12
     AlarmHighLinePressure::new AlarmHighLinePressure()
                                      28
     AlarmHighLinePressure::new AlarmHighLinePressure(PRogramObjectBase *)
                                      36
     __sti__routine()                  4
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
      Others                         448

 
 1 580 bytes in segment CODE
   128 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 148 bytes of CODE  memory (+ 448 bytes shared)
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
