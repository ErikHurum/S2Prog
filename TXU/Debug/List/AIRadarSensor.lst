##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIRadarSensor.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\AIRadarSensor.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIRadarSensor.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIRadarSensor.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIRadarSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIRadarSensor::AIRadarSensor(int SnsType) {
   \                     ??AIRadarSensor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000010   28009FE5           LDR      R0,??AIRadarSensor_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     10              Type                = SnsType;
   \   00000018   A05084E5           STR      R5,[R4, #+160]
     11              BasicSensorType     = AI_SENSOR_RADAR;
   \   0000001C   0300A0E3           MOV      R0,#+3
   \   00000020   100184E5           STR      R0,[R4, #+272]
     12              BasicSensorTypeWord = L_WORD600; //Rad
   \   00000024   960FA0E3           MOV      R0,#+600
   \   00000028   140184E5           STR      R0,[R4, #+276]
     13              Location            = C_AI_LOC_DECK;
   \   0000002C   EA00A0E3           MOV      R0,#+234
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   280184E5           STR      R0,[R4, #+296]
     14          }
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           B        ?Subroutine10
   \                     ??AIRadarSensor_1:
   \   00000040   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          AIRadarSensor::~AIRadarSensor(void) {
   \                     `?~AIRadarSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIRadarSensor_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIRadarSensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIRadarSensor_1`:
   \   0000002C                      REQUIRE ?Subroutine10
   \   0000002C                      ;; // Fall through to label ?Subroutine10
     18          
     19          
     20          ///////////////////////////////////////////////////////////////
     21          //
     22          // Routines for the Configuration
     23          //
     24          ///////////////////////////////////////////////////////////////
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          AnsiString AIRadarSensor::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     27              AnsiString LocalString = TabStrX(1, ExtraTabs) + KeyWord(Type) + CrLfStr;
   \   00000004   84719FE5           LDR      R7,??MakeConfigString_2  ;; CrLfStr
   \   00000008   FCD04DE2           SUB      SP,SP,#+252
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   A01094E5           LDR      R1,[R4, #+160]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   54008DE2           ADD      R0,SP,#+84
   \   00000020   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000024   0620A0E1           MOV      R2,R6
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   38008DE2           ADD      R0,SP,#+56
   \   00000030   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000034   54208DE2           ADD      R2,SP,#+84
   \   00000038   38108DE2           ADD      R1,SP,#+56
   \   0000003C   1C008DE2           ADD      R0,SP,#+28
   \   00000040   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   1C108DE2           ADD      R1,SP,#+28
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   1C008DE2           ADD      R0,SP,#+28
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   54008DE2           ADD      R0,SP,#+84
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   38008DE2           ADD      R0,SP,#+56
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
     28              LocalString += AnalogInput::MakeConfigString();     //common
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   70108DE2           ADD      R1,SP,#+112
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000B0   ........           LDR      R0,??DataTable3  ;; ??npos
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   004090E5           LDR      R4,[R0, #+0]
   \   000000BC   70108DE2           ADD      R1,SP,#+112
   \   000000C0   0430A0E1           MOV      R3,R4
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     ??append,??append??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   70008DE2           ADD      R0,SP,#+112
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     29              LocalString += TabStrX(1, ExtraTabs) + KeyWord(C_AI_END) + CrLfStr;
   \   000000DC   9810A0E3           MOV      R1,#+152
   \   000000E0   801E81E3           ORR      R1,R1,#0x800
   \   000000E4   E0008DE2           ADD      R0,SP,#+224
   \   000000E8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000EC   0620A0E1           MOV      R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C4008DE2           ADD      R0,SP,#+196
   \   000000F8   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   000000FC   E0208DE2           ADD      R2,SP,#+224
   \   00000100   C4108DE2           ADD      R1,SP,#+196
   \   00000104   A8008DE2           ADD      R0,SP,#+168
   \   00000108   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000010C   0720A0E1           MOV      R2,R7
   \   00000110   A8108DE2           ADD      R1,SP,#+168
   \   00000114   8C008DE2           ADD      R0,SP,#+140
   \   00000118   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000011C   0430A0E1           MOV      R3,R4
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   8C108DE2           ADD      R1,SP,#+140
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   ........           _BLF     ??append,??append??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   8C008DE2           ADD      R0,SP,#+140
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   A8008DE2           ADD      R0,SP,#+168
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   E0008DE2           ADD      R0,SP,#+224
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   C4008DE2           ADD      R0,SP,#+196
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
     30              LocalString += CrLfStr;
   \   00000170   0430A0E1           MOV      R3,R4
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0710A0E1           MOV      R1,R7
   \   0000017C   0500A0E1           MOV      R0,R5
   \   00000180   ........           _BLF     ??append,??append??rA
     31          
     32          	return (LocalString);
   \   00000184   FCD08DE2           ADD      SP,SP,#+252
   \   00000188   F040BDE8           POP      {R4-R7,LR}
   \   0000018C   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000190   ........           DC32     CrLfStr
     33          }
     34          //---------------------------------------------------------------------------
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          bool AIRadarSensor::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     37              bool NoError = true;
     38              int ErrorLine = 0;
     39              int Key;
     40              AnsiString PROName = "Radar sensor";
   \   00000004   0C729FE5           LDR      R7,??LoadConfigString_3+0x4  ;; `?<Constant "Radar sensor">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0710A0E1           MOV      R1,R7
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
     41              if (PROPtr)   PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000028   498FA0E3           MOV      R8,#+292
   \   0000002C   040098E7           LDR      R0,[R8, +R4]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1500000A           BEQ      ??LoadConfigString_4
   \   00000038   101087E2           ADD      R1,R7,#+16
   \   0000003C   20008DE2           ADD      R0,SP,#+32
   \   00000040   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000044   041098E7           LDR      R1,[R8, +R4]
   \   00000048   442081E2           ADD      R2,R1,#+68
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   ........           LDR      R0,??DataTable3  ;; ??npos
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   003090E5           LDR      R3,[R0, #+0]
   \   00000064   04108DE2           ADD      R1,SP,#+4
   \   00000068   3C008DE2           ADD      R0,SP,#+60
   \   0000006C   ........           _BLF     ??append,??append??rA
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   20008DE2           ADD      R0,SP,#+32
   \   0000008C   ........           _BLF     ??_Tidy,??_Tidy??rA
     42              PROName += ":\n";
   \                     ??LoadConfigString_4:
   \   00000090   5F7F8FE2           ADR      R7,??LoadConfigString_3  ;; ":\n"
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           _BLF     strlen,??strlen??rA
   \   0000009C   0020A0E1           MOV      R2,R0
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   3C008DE2           ADD      R0,SP,#+60
   \   000000A8   ........           _BLF     ??append_1,??append??rA_1
   \   000000AC   0070E0E3           MVN      R7,#+0
     43              do {
     44                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_5:
   \   000000B0   0030A0E3           MOV      R3,#+0
   \   000000B4   0D20A0E1           MOV      R2,SP
   \   000000B8   20108DE2           ADD      R1,SP,#+32
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           _BLF     ??NextWord,??NextWord??rA
     45                  if (ErrorLine) {
   \   000000C4   00009DE5           LDR      R0,[SP, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0C00000A           BEQ      ??LoadConfigString_6
     46          			if (ErrorLine != EOF) {
   \   000000D0   070050E1           CMP      R0,R7
   \   000000D4   3100000A           BEQ      ??LoadConfigString_7
     47                          GiveConfigWarning(PROName, ErrorLine);
   \   000000D8   3C108DE2           ADD      R1,SP,#+60
   \   000000DC   04008DE2           ADD      R0,SP,#+4
   \   000000E0   ........           _BLF     ??string,??string??rA
   \   000000E4   00109DE5           LDR      R1,[SP, #+0]
   \   000000E8   04008DE2           ADD      R0,SP,#+4
   \   000000EC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_8:
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   260000EA           B        ??LoadConfigString_7
     48                      }
     49                  } else {
     50                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_6:
   \   00000104   20108DE2           ADD      R1,SP,#+32
   \   00000108   04008DE2           ADD      R0,SP,#+4
   \   0000010C   ........           _BLF     ??string,??string??rA
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000118   0060A0E1           MOV      R6,R0
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   04008DE2           ADD      R0,SP,#+4
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
     51                      switch (Key) {
   \   0000012C   980046E2           SUB      R0,R6,#+152
   \   00000130   800E40E2           SUB      R0,R0,#+2048
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   0300008A           BHI      ??LoadConfigString_9
   \   0000013C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000140   0010D1E7           LDRB     R1,[R1, R0]
   \   00000144   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000148   15120000           DC8      +21,+18,+0,+0
     52                      default:
     53                          GiveConfigWarning(PROName, InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_9:
   \   0000014C   20108DE2           ADD      R1,SP,#+32
   \   00000150   58008DE2           ADD      R0,SP,#+88
   \   00000154   ........           _BLF     ??string,??string??rA
   \   00000158   3C108DE2           ADD      R1,SP,#+60
   \   0000015C   74008DE2           ADD      R0,SP,#+116
   \   00000160   ........           _BLF     ??string,??string??rA
   \   00000164   1C2095E5           LDR      R2,[R5, #+28]
   \   00000168   58108DE2           ADD      R1,SP,#+88
   \   0000016C   74008DE2           ADD      R0,SP,#+116
   \   00000170   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   58008DE2           ADD      R0,SP,#+88
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0110A0E3           MOV      R1,#+1
   \   0000018C   74008DE2           ADD      R0,SP,#+116
   \   00000190   D9FFFFEA           B        ??LoadConfigString_8
     54                          break;
     55                      case C_AI_START_COMMON:
     56                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_10:
   \   00000194   0510A0E1           MOV      R1,R5
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     57                          break;
     58                      case C_AI_END:
     59                          break;
     60                      }
     61                  }
     62              }while (NoError && (ErrorLine != EOF) && (Key != C_AI_END));
   \                     ??LoadConfigString_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   20008DE2           ADD      R0,SP,#+32
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   00009DE5           LDR      R0,[SP, #+0]
   \   000001B4   070050E1           CMP      R0,R7
   \   000001B8   9800A013           MOVNE    R0,#+152
   \   000001BC   800E8013           ORRNE    R0,R0,#0x800
   \   000001C0   00005611           CMPNE    R6,R0
   \   000001C4   B9FFFF1A           BNE      ??LoadConfigString_5
     63              if (!MinRange && !MaxRange) {
   \   000001C8   575FA0E3           MOV      R5,#+348
   \   000001CC   041095E7           LDR      R1,[R5, +R4]
   \   000001D0   0000A0E3           MOV      R0,#+0
   \   000001D4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   0400001A           BNE      ??LoadConfigString_11
   \   000001E0   601194E5           LDR      R1,[R4, #+352]
   \   000001E4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001E8   000050E3           CMP      R0,#+0
     64                  MinRange = Distance;
   \   000001EC   2C019405           LDREQ    R0,[R4, #+300]
   \   000001F0   04008507           STREQ    R0,[R5, +R4]
     65              }
     66          
     67              return (NoError);
   \                     ??LoadConfigString_11:
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   3C008DE2           ADD      R0,SP,#+60
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   90D08DE2           ADD      SP,SP,#+144
   \   00000208   F041BDE8           POP      {R4-R8,LR}
   \   0000020C   0100A0E3           MOV      R0,#+1
   \   00000210   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_3:
   \   00000214   3A0A0000           DC8      ":\n",+0
   \   00000218   ........           DC32     `?<Constant "Radar sensor">`
     68          }
     69          //---------------------------------------------------------------------------
     70          
     71          ///////////////////////////////////////////////////////////////
     72          //
     73          // Routines for the librarian for input
     74          //
     75          ///////////////////////////////////////////////////////////////
     76          
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          int AIRadarSensor::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   7480DDE5           LDRB     R8,[SP, #+116]
   \   0000000C   78509DE5           LDR      R5,[SP, #+120]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0310A0E1           MOV      R1,R3
     79              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
     80              switch (ValueId) {
   \   0000002C   B50046E2           SUB      R0,R6,#+181
   \   00000030   400E40E2           SUB      R0,R0,#+1024
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   3000008A           BHI      ??PutValue_3
   \   0000003C   012F8FE2           ADR      R2,??PutValue_1
   \   00000040   0020D2E7           LDRB     R2,[R2, R0]
   \   00000044   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   00000048   002D2D1B           DC8      +0,+45,+45,+27
     81              case SVT_AI_OFFSET   :
     82                  Offset = ConvertToSi(NewValue, ValUnitId = LENGTH_UNIT, Status, -5.0, 50.0, Offset);
   \                     ??PutValue_4:
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   04208DE5           STR      R2,[SP, #+4]
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   ........           _BLF     ??string,??string??rA
   \   0000005C   506FA0E3           MOV      R6,#+320
   \   00000060   040096E7           LDR      R0,[R6, +R4]
   \   00000064   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000068   03002DE9           PUSH     {R0,R1}
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   4014A0E3           MOV      R1,#+1073741824
   \   00000074   491881E3           ORR      R1,R1,#0x490000
   \   00000078   03002DE9           PUSH     {R0,R1}
   \   0000007C   C014A0E3           MOV      R1,#-1073741824
   \   00000080   501981E3           ORR      R1,R1,#0x140000
   \   00000084   03002DE9           PUSH     {R0,R1}
   \   00000088   18208DE2           ADD      R2,SP,#+24
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   0800BDE8           POP      {R3}
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   0000009C   040086E7           STR      R0,[R6, +R4]
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   1C008DE2           ADD      R0,SP,#+28
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B0   14D08DE2           ADD      SP,SP,#+20
   \   000000B4   210000EA           B        ??PutValue_5
     83                  break;
     84              case SVT_AI_CALC_VAL :
     85                  Status = AdjustSensor(NewValue, ValUnitId = LENGTH_UNIT, 0.0, 50.0, Local);
   \                     ??PutValue_6:
   \   000000B8   0120A0E3           MOV      R2,#+1
   \   000000BC   04208DE5           STR      R2,[SP, #+4]
   \   000000C0   24008DE2           ADD      R0,SP,#+36
   \   000000C4   ........           _BLF     ??string,??string??rA
   \   000000C8   00012DE9           PUSH     {R8}
   \   000000CC   4004A0E3           MOV      R0,#+1073741824
   \   000000D0   920780E3           ORR      R0,R0,#0x2480000
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   0030A0E3           MOV      R3,#+0
   \   000000DC   0120A0E3           MOV      R2,#+1
   \   000000E0   2C108DE2           ADD      R1,SP,#+44
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   000000EC   08008DE5           STR      R0,[SP, #+8]
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   2C008DE2           ADD      R0,SP,#+44
   \   000000FC   0D0000EA           B        ??PutValue_7
     86                  break;
     87              default:
     88                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   00000100   40008DE2           ADD      R0,SP,#+64
   \   00000104   ........           _BLF     ??string,??string??rA
   \   00000108   04008DE2           ADD      R0,SP,#+4
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   00012DE9           PUSH     {R8}
   \   00000114   48308DE2           ADD      R3,SP,#+72
   \   00000118   0720A0E1           MOV      R2,R7
   \   0000011C   0610A0E1           MOV      R1,R6
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000128   08008DE5           STR      R0,[SP, #+8]
   \   0000012C   0020A0E3           MOV      R2,#+0
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   48008DE2           ADD      R0,SP,#+72
   \                     ??PutValue_7:
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   08D08DE2           ADD      SP,SP,#+8
     89                  break;
     90              }
     91              if (Status == E_NO_ERR) {
   \                     ??PutValue_5:
   \   00000140   00009DE5           LDR      R0,[SP, #+0]
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0400001A           BNE      ??PutValue_8
     92                  SetModifiedFlag();
   \   0000014C   A41094E5           LDR      R1,[R4, #+164]
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   541091E5           LDR      R1,[R1, #+84]
   \   00000158   0FE0A0E1           MOV      LR,PC
   \   0000015C   11FF2FE1           BX       R1
     93              }
     94              if (UnitId) {
   \                     ??PutValue_8:
   \   00000160   000055E3           CMP      R5,#+0
     95                  *UnitId = ValUnitId;
   \   00000164   04009D15           LDRNE    R0,[SP, #+4]
   \   00000168   00008515           STRNE    R0,[R5, #+0]
     96              }
     97              return (Status);
   \   0000016C   00009DE5           LDR      R0,[SP, #+0]
   \   00000170   5CD08DE2           ADD      SP,SP,#+92
   \   00000174   F041BDE8           POP      {R4-R8,LR}
   \   00000178   1EFF2FE1           BX       LR               ;; return
     98          }
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          int  AIRadarSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   00C0A0E1           MOV      R12,R0
   \   00000010   0340A0E1           MOV      R4,R3
    101              int Status = GETVAL_NO_ERR;
   \   00000014   0070A0E3           MOV      R7,#+0
    102              switch (ValueId) {
   \   00000018   0180A0E3           MOV      R8,#+1
   \   0000001C   0390A0E3           MOV      R9,#+3
   \   00000020   B50041E2           SUB      R0,R1,#+181
   \   00000024   400E40E2           SUB      R0,R0,#+1024
   \   00000028   030050E3           CMP      R0,#+3
   \   0000002C   0E00008A           BHI      ??GetValue_3
   \   00000030   013F8FE2           ADR      R3,??GetValue_1
   \   00000034   0030D3E7           LDRB     R3,[R3, R0]
   \   00000038   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetValue_1:
   \   0000003C   000B0B05           DC8      +0,+11,+11,+5
    103              case SVT_AI_OFFSET   :
    104                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000040   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_5:
   \   00000044   000084E5           STR      R0,[R4, #+0]
    105                  DecPnt     = 3;
   \   00000048   009085E5           STR      R9,[R5, #+0]
    106                  Unit       = LENGTH_UNIT;
   \   0000004C   008086E5           STR      R8,[R6, #+0]
   \   00000050   0C0000EA           B        ??GetValue_6
    107                  break;
    108              case SVT_AI_CALC_VAL :
    109                  MyRetValue = Calculate();
   \                     ??GetValue_7:
   \   00000054   A4109CE5           LDR      R1,[R12, #+164]
   \   00000058   0C00A0E1           MOV      R0,R12
   \   0000005C   601091E5           LDR      R1,[R1, #+96]
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   11FF2FE1           BX       R1
   \   00000068   F5FFFFEA           B        ??GetValue_5
    110                  DecPnt     = 3;
    111                  Unit       = LENGTH_UNIT;
    112                  break;
    113              default:
    114                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   0000006C   40002DE9           PUSH     {R6}
   \   00000070   20002DE9           PUSH     {R5}
   \   00000074   0430A0E1           MOV      R3,R4
   \   00000078   0C00A0E1           MOV      R0,R12
   \   0000007C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000080   0070A0E1           MOV      R7,R0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
    115                  break;
    116              }
    117              return (Status);
   \                     ??GetValue_6:
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   F043BDE8           POP      {R4-R9,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
    118          }
    119          
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int AIRadarSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   E0D04DE2           SUB      SP,SP,#+224
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0350A0E1           MOV      R5,R3
    122              int Status = GETVAL_NO_ERR;
   \   00000010   0060A0E3           MOV      R6,#+0
    123              switch (ValueId) {
   \   00000014   BF30A0E3           MOV      R3,#+191
   \   00000018   403E83E3           ORR      R3,R3,#0x400
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   0F00000A           BEQ      ??GetStringValue_2
   \   00000024   4C0E51E3           CMP      R1,#+1216
   \   00000028   4F00001A           BNE      ??GetStringValue_3
    124              case SVT_AI_UNIT:
    125                  MyString = GetUnitName(LENGTH_UNIT);
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   ........           LDR      R0,??DataTable3  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \                     ??GetStringValue_4:
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000060   440000EA           B        ??GetStringValue_5
    126                  break;
    127              case SVT_AI_RANGE:
    128          
    129                  MyString = "Range:" + LibGetValue(SVT_AI_MIN_RANGE, this) + " to " + LibGetValue(SVT_AI_MAX_RANGE, this) + " meter";
   \                     ??GetStringValue_2:
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   BE10A0E3           MOV      R1,#+190
   \   00000070   401E81E3           ORR      R1,R1,#0x400
   \   00000074   C4008DE2           ADD      R0,SP,#+196
   \   00000078   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   0000007C   0420A0E1           MOV      R2,R4
   \   00000080   00419FE5           LDR      R4,??GetStringValue_6  ;; `?<Constant "Range:">`
   \   00000084   0630A0E1           MOV      R3,R6
   \   00000088   BD10A0E3           MOV      R1,#+189
   \   0000008C   401E81E3           ORR      R1,R1,#0x400
   \   00000090   A8008DE2           ADD      R0,SP,#+168
   \   00000094   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000098   A8208DE2           ADD      R2,SP,#+168
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   8C008DE2           ADD      R0,SP,#+140
   \   000000A4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000000A8   082084E2           ADD      R2,R4,#+8
   \   000000AC   8C108DE2           ADD      R1,SP,#+140
   \   000000B0   70008DE2           ADD      R0,SP,#+112
   \   000000B4   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000000B8   C4208DE2           ADD      R2,SP,#+196
   \   000000BC   70108DE2           ADD      R1,SP,#+112
   \   000000C0   54008DE2           ADD      R0,SP,#+84
   \   000000C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C8   102084E2           ADD      R2,R4,#+16
   \   000000CC   54108DE2           ADD      R1,SP,#+84
   \   000000D0   38008DE2           ADD      R0,SP,#+56
   \   000000D4   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000000D8   38108DE2           ADD      R1,SP,#+56
   \   000000DC   1C008DE2           ADD      R0,SP,#+28
   \   000000E0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000E4   ........           LDR      R1,??DataTable3  ;; ??npos
   \   000000E8   0620A0E1           MOV      R2,R6
   \   000000EC   003091E5           LDR      R3,[R1, #+0]
   \   000000F0   0010A0E1           MOV      R1,R0
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   ........           _BLF     ??assign,??assign??rA
   \   000000FC   0620A0E1           MOV      R2,R6
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   1C008DE2           ADD      R0,SP,#+28
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0620A0E1           MOV      R2,R6
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   38008DE2           ADD      R0,SP,#+56
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0620A0E1           MOV      R2,R6
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   54008DE2           ADD      R0,SP,#+84
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   0620A0E1           MOV      R2,R6
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   C4008DE2           ADD      R0,SP,#+196
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0620A0E1           MOV      R2,R6
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   70008DE2           ADD      R0,SP,#+112
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000014C   0620A0E1           MOV      R2,R6
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   8C008DE2           ADD      R0,SP,#+140
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   A8008DE2           ADD      R0,SP,#+168
   \   00000168   BBFFFFEA           B        ??GetStringValue_4
    130                  break;
    131              default:
    132                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_3:
   \   0000016C   0530A0E1           MOV      R3,R5
   \   00000170   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000174   0060A0E1           MOV      R6,R0
    133                  break;
    134              }
    135              return (Status);
   \                     ??GetStringValue_5:
   \   00000178   0600A0E1           MOV      R0,R6
   \   0000017C   E0D08DE2           ADD      SP,SP,#+224
   \   00000180   7040BDE8           POP      {R4-R6,LR}
   \   00000184   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_6:
   \   00000188   ........           DC32     `?<Constant "Range:">`
    136          }
    137          

   \                                 In segment CODE, align 4, keep-with-next
    138          int AIRadarSensor::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    139              return (AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    140          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Radar sensor">`:
   \   00000000   526164617220       DC8 "Radar sensor"
   \              73656E736F72
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   2C20666F7220       DC8 ", for "
   \              00          
   \   00000017   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Range:">`:
   \   00000000   52616E67653A       DC8 "Range:"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   20746F2000         DC8 " to "
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   206D65746572       DC8 " meter"
   \              00          
   \   00000017   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIRadarSensor &AIRadarSensor::new AIRadarSensor(int)
   \                     `??new AIRadarSensor`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   590FA0E3           MOV      R0,#+356
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AIRadarSensor_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AIRadarSensor
   \                     `??new AIRadarSensor_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??npos
    141          
    142          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIRadarSensor::AIRadarSensor(int)
                                       12
     AIRadarSensor::GetStringValue(int, int, AnsiString &)
                                      240
     AIRadarSensor::GetValue(int, int, float &, int &, int &)
                                       36
     AIRadarSensor::LoadConfigString(TSNConfigString &)
                                      168
     AIRadarSensor::MakeConfigString(int)
                                      272
     AIRadarSensor::PutFloatValue(int, float)
                                        4
     AIRadarSensor::PutValue(int, int, AnsiString, bool, int *)
                                      140
     AIRadarSensor::new AIRadarSensor(int)
                                        8
     AIRadarSensor::~AIRadarSensor()
                                       12
     __sti__routine()                   0
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     AIRadarSensor::AIRadarSensor(int)
                                      68
     ?Subroutine10                     8
     AIRadarSensor::~AIRadarSensor()
                                      44
     AIRadarSensor::MakeConfigString(int)
                                     404
     AIRadarSensor::LoadConfigString(TSNConfigString &)
                                     540
     AIRadarSensor::PutValue(int, int, AnsiString, bool, int *)
                                     380
     AIRadarSensor::GetValue(int, int, float &, int &, int &)
                                     148
     AIRadarSensor::GetStringValue(int, int, AnsiString &)
                                     396
     AIRadarSensor::PutFloatValue(int, float)
                                      16
     ?<Constant "Radar sensor">       24
     ?<Constant ":\n">                 3
     ?<Constant "Range:">             24
     AIRadarSensor::new AIRadarSensor(int)
                                      40
     __sti__routine()                  4
     ??DataTable3                      4
      Others                         584

 
 2 872 bytes in segment CODE
   183 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 2 056 bytes of CODE  memory (+ 820 bytes shared)
   183 bytes of CONST memory

Errors: none
Warnings: none
