##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmLoLoLevel.Cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmLoLoLevel.Cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmLoLoLevel.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmLoLoLevel.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmLoLoLevel.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLoLoLevel::~AlarmLoLoLevel()
   \                     `?~AlarmLoLoLevel`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmLoLoLevel_1`
   \   00000014   0100000A           BEQ      `?~AlarmLoLoLevel_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmLoLoLevel_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmLoLoLevel_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmLoLoLevel_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmLoLoLevel::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmLoLoLevel::AlarmLoLoLevel(PRogramObjectBase *PROPtr, float Lim, bool Lock) : AlarmLowLevel(PROPtr, Lim, Lock) {
   \                     ??AlarmLoLoLevel:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??AlarmLowLevel,??AlarmLowLevel??rA
   \   0000000C   4C009FE5           LDR      R0,??AlarmLoLoLevel_1  ;; ??__vtbl
   \   00000010   A40084E5           STR      R0,[R4, #+164]
     12              NumberOfAlarmSettings++;
   \   00000014   48009FE5           LDR      R0,??AlarmLoLoLevel_1+0x4  ;; ??NumberOfAlarmSettings
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   001080E5           STR      R1,[R0, #+0]
     13              IDNumber        = (ID_AL_LOWLOW_LEVEL << 16) + NumberOfAlarmSettings;
   \   00000024   B006A0E3           MOV      R0,#+184549376
   \   00000028   C50880E3           ORR      R0,R0,#0xC50000
   \   0000002C   010080E0           ADD      R0,R0,R1
   \   00000030   9C0084E5           STR      R0,[R4, #+156]
     14              Type            = ID_AL_LOWLOW_LEVEL;
   \   00000034   C500A0E3           MOV      R0,#+197
   \   00000038   B00E80E3           ORR      R0,R0,#0xB00
   \   0000003C   A00084E5           STR      R0,[R4, #+160]
     15              MessageKey      = L_WORD1106;    // LoLoLevel
   \   00000040   5200A0E3           MOV      R0,#+82
   \   00000044   400E80E3           ORR      R0,R0,#0x400
   \   00000048   B80084E5           STR      R0,[R4, #+184]
     16              TPCMessageKey   = L_WORD1107;    // LLLev
   \   0000004C   010080E3           ORR      R0,R0,#0x1
   \   00000050   B40084E5           STR      R0,[R4, #+180]
     17          }
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   1040BDE8           POP      {R4,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   \                     ??AlarmLoLoLevel_1:
   \   00000060   ........           DC32     ??__vtbl
   \   00000064   ........           DC32     ??NumberOfAlarmSettings
     18          
     19          ///////////////////////////////////////////////////////////////
     20          //
     21          // Routines for the librarian
     22          //
     23          ///////////////////////////////////////////////////////////////
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          int AlarmLoLoLevel::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3880DDE5           LDRB     R8,[SP, #+56]
   \   0000000C   3C909DE5           LDR      R9,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     26              switch ( ValueId ) {
   \   00000020   FD0045E2           SUB      R0,R5,#+253
   \   00000024   8C0D40E2           SUB      R0,R0,#+8960
   \   00000028   040050E3           CMP      R0,#+4
   \   0000002C   0E00008A           BHI      ??PutValue_3
   \   00000030   011F8FE2           ADR      R1,??PutValue_1
   \   00000034   0010D1E7           LDRB     R1,[R1, R0]
   \   00000038   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   0000003C   01030507           DC8      +1,+3,+5,+7
   \   00000040   09000000           DC8      +9,+0,+0,+0
     27              case SVT_LOLO_VOLPCNT_LIM:
     28                  ValueId = SVT_LO_VOLPCNT_LIM;
   \                     ??PutValue_4:
   \   00000044   F850A0E3           MOV      R5,#+248
   \   00000048   060000EA           B        ??PutValue_5
     29                  break;
     30              case SVT_LOLO_VOLUME_LIM :
     31                  ValueId = SVT_LO_VOLUME_LIM;
   \                     ??PutValue_6:
   \   0000004C   F950A0E3           MOV      R5,#+249
   \   00000050   040000EA           B        ??PutValue_5
     32                  break;
     33              case SVT_LOLO_WEIGHT_LIM :
     34                  ValueId = SVT_LO_WEIGHT_LIM;
   \                     ??PutValue_7:
   \   00000054   FA50A0E3           MOV      R5,#+250
   \   00000058   020000EA           B        ??PutValue_5
     35                  break;
     36              case SVT_LOLO_ULLAGE_LIM :
     37                  ValueId = SVT_LO_ULLAGE_LIM;
   \                     ??PutValue_8:
   \   0000005C   FB50A0E3           MOV      R5,#+251
   \   00000060   000000EA           B        ??PutValue_5
     38                  break;
     39              case SVT_LOLO_LEVEL_LIM  :
     40                  ValueId = SVT_LO_LEVEL_LIM;
   \                     ??PutValue_9:
   \   00000064   FC50A0E3           MOV      R5,#+252
   \                     ??PutValue_5:
   \   00000068   8C5D85E3           ORR      R5,R5,#0x2300
     41                  break;
     42              }
     43              int Status = AlarmLowLevel::PutValue(ValueId, Index, NewValue, Local, UnitId);
   \                     ??PutValue_3:
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   50009FE5           LDR      R0,??PutValue_10  ;; ??npos
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   003090E5           LDR      R3,[R0, #+0]
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??assign,??assign??rA
   \   00000094   00022DE9           PUSH     {R9}
   \   00000098   00012DE9           PUSH     {R8}
   \   0000009C   08308DE2           ADD      R3,SP,#+8
   \   000000A0   0620A0E1           MOV      R2,R6
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000000B0   0040A0E1           MOV      R4,R0
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   08008DE2           ADD      R0,SP,#+8
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
     44              return (Status);
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   24D08DE2           ADD      SP,SP,#+36
   \   000000CC   F043BDE8           POP      {R4-R9,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_10:
   \   000000D4   ........           DC32     ??npos
     45          }
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          int  AlarmLoLoLevel::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10C09DE5           LDR      R12,[SP, #+16]
   \   00000008   14409DE5           LDR      R4,[SP, #+20]
     48              int Status = GETVAL_NO_ERR;
     49              switch ( ValueId ) {
   \   0000000C   FD5041E2           SUB      R5,R1,#+253
   \   00000010   8C5D45E2           SUB      R5,R5,#+8960
   \   00000014   040055E3           CMP      R5,#+4
   \   00000018   0E00008A           BHI      ??GetValue_3
   \   0000001C   016F8FE2           ADR      R6,??GetValue_1
   \   00000020   0560D6E7           LDRB     R6,[R6, R5]
   \   00000024   06F18FE0           ADD      PC,PC,R6, LSL #+2
   \                     ??GetValue_1:
   \   00000028   01030507           DC8      +1,+3,+5,+7
   \   0000002C   09000000           DC8      +9,+0,+0,+0
     50              case SVT_LOLO_VOLPCNT_LIM:
     51                  ValueId = SVT_LO_VOLPCNT_LIM;
   \                     ??GetValue_4:
   \   00000030   F810A0E3           MOV      R1,#+248
   \   00000034   060000EA           B        ??GetValue_5
     52                  break;
     53              case SVT_LOLO_VOLUME_LIM :
     54                  ValueId = SVT_LO_VOLUME_LIM;
   \                     ??GetValue_6:
   \   00000038   F910A0E3           MOV      R1,#+249
   \   0000003C   040000EA           B        ??GetValue_5
     55                  break;
     56              case SVT_LOLO_WEIGHT_LIM :
     57                  ValueId = SVT_LO_WEIGHT_LIM;
   \                     ??GetValue_7:
   \   00000040   FA10A0E3           MOV      R1,#+250
   \   00000044   020000EA           B        ??GetValue_5
     58                  break;
     59              case SVT_LOLO_ULLAGE_LIM :
     60                  ValueId = SVT_LO_ULLAGE_LIM;
   \                     ??GetValue_8:
   \   00000048   FB10A0E3           MOV      R1,#+251
   \   0000004C   000000EA           B        ??GetValue_5
     61                  break;
     62              case SVT_LOLO_LEVEL_LIM  :
     63                  ValueId = SVT_LO_LEVEL_LIM;
   \                     ??GetValue_9:
   \   00000050   FC10A0E3           MOV      R1,#+252
   \                     ??GetValue_5:
   \   00000054   8C1D81E3           ORR      R1,R1,#0x2300
     64                  break;
     65              }
     66              Status = AlarmLowLevel::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
     67              return (Status);
   \                     ??GetValue_3:
   \   00000058   10002DE9           PUSH     {R4}
   \   0000005C   00102DE9           PUSH     {R12}
   \   00000060   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000064   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
     68          }
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          int AlarmLoLoLevel::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     71              int Status = GETVAL_NO_ERR;
     72              //switch ( ValueId ) {
     73              //	default:
     74              Status = AlarmLowLevel::GetStringValue(ValueId, Index, MyString);
     75              //		break;
     76              //}
     77              return (Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine7
     78          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          int AlarmLoLoLevel::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
     81              int Status = E_NO_ERR;
     82              switch ( ValueId ) {
   \   00000004   FD3041E2           SUB      R3,R1,#+253
   \   00000008   8C3D43E2           SUB      R3,R3,#+8960
   \   0000000C   040053E3           CMP      R3,#+4
   \   00000010   0E00008A           BHI      ??PutFloatValue_3
   \   00000014   01CF8FE2           ADR      R12,??PutFloatValue_1
   \   00000018   03C0DCE7           LDRB     R12,[R12, R3]
   \   0000001C   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000020   01030507           DC8      +1,+3,+5,+7
   \   00000024   09000000           DC8      +9,+0,+0,+0
     83              case SVT_LOLO_VOLPCNT_LIM:
     84                  ValueId = SVT_LO_VOLPCNT_LIM;
   \                     ??PutFloatValue_4:
   \   00000028   F810A0E3           MOV      R1,#+248
   \   0000002C   060000EA           B        ??PutFloatValue_5
     85                  break;
     86              case SVT_LOLO_VOLUME_LIM :
     87                  ValueId = SVT_LO_VOLUME_LIM;
   \                     ??PutFloatValue_6:
   \   00000030   F910A0E3           MOV      R1,#+249
   \   00000034   040000EA           B        ??PutFloatValue_5
     88                  break;
     89              case SVT_LOLO_WEIGHT_LIM :
     90                  ValueId = SVT_LO_WEIGHT_LIM;
   \                     ??PutFloatValue_7:
   \   00000038   FA10A0E3           MOV      R1,#+250
   \   0000003C   020000EA           B        ??PutFloatValue_5
     91                  break;
     92              case SVT_LOLO_ULLAGE_LIM :
     93                  ValueId = SVT_LO_ULLAGE_LIM;
   \                     ??PutFloatValue_8:
   \   00000040   FB10A0E3           MOV      R1,#+251
   \   00000044   000000EA           B        ??PutFloatValue_5
     94                  break;
     95              case SVT_LOLO_LEVEL_LIM  :
     96                  ValueId = SVT_LO_LEVEL_LIM;
   \                     ??PutFloatValue_9:
   \   00000048   FC10A0E3           MOV      R1,#+252
   \                     ??PutFloatValue_5:
   \   0000004C   8C1D81E3           ORR      R1,R1,#0x2300
     97                  break;
     98              }
     99              Status = AlarmLowLevel::PutFloatValue(ValueId, NewValue);
    100              return (Status);
   \                     ??PutFloatValue_3:
   \   00000050   ........           _BLF     ??PutFloatValue_2,??PutFloatValue??rA
   \   00000054                      REQUIRE ?Subroutine7
   \   00000054                      ;; // Fall through to label ?Subroutine7
    101          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmLoLoLevel &AlarmLoLoLevel::new AlarmLoLoLevel(PRogramObjectBase *, float, bool)
   \                     `??new AlarmLoLoLevel`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   410FA0E3           MOV      R0,#+260
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmLoLoLevel_1`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmLoLoLevel
   \                     `??new AlarmLoLoLevel_1`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    102          
    103          
    104          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmLoLoLevel::AlarmLoLoLevel(PRogramObjectBase *, float, bool)
                                        8
     AlarmLoLoLevel::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmLoLoLevel::GetValue(int, int, float &, int &, int &)
                                       24
     AlarmLoLoLevel::PutFloatValue(int, float)
                                        4
     AlarmLoLoLevel::PutValue(int, int, AnsiString, bool, int *)
                                       64
     AlarmLoLoLevel::new AlarmLoLoLevel(PRogramObjectBase *, float, bool)
                                       16
     AlarmLoLoLevel::~AlarmLoLoLevel()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmLoLoLevel::~AlarmLoLoLevel()
                                      56
     AlarmLoLoLevel::NumberOfAlarmSettings
                                       4
     AlarmLoLoLevel::AlarmLoLoLevel(PRogramObjectBase *, float, bool)
                                     104
     AlarmLoLoLevel::PutValue(int, int, AnsiString, bool, int *)
                                     216
     AlarmLoLoLevel::GetValue(int, int, float &, int &, int &)
                                     108
     AlarmLoLoLevel::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine7                      8
     AlarmLoLoLevel::PutFloatValue(int, float)
                                      84
     AlarmLoLoLevel::new AlarmLoLoLevel(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
      Others                         280

 
 796 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 596 bytes of CODE  memory (+ 216 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
