##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROLevelSwitch.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\PROLevelSwitch.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROLevelSwitch.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROLevelSwitch.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROLevelSwitch.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_4
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_4:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_5
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_5
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_6
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_5
   \                     ??_Make_room_6:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_5:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_3
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_4
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_C, align 4, align-sorted
      9          vector<PRogramObjectBase *>PROLevelSwitch::AllObjVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??AllObjVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjVector, `?~vector`
   \              ............
   \   00000018   ............       DC32 ?_5, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
     10          vector<PRogramObjectBase *>PROLevelSwitch::ObjVector;
     11          set<PRogramObjectBase *>PROLevelSwitch::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??AllObjVector:
   \   00000018                      DS8 12
   \                     ??ObjVector:
   \   00000024                      DS8 12

   \                                 In segment DATA_Z, align 1, align-sorted
     12          bool PROLevelSwitch::Adjustable = false;
   \                     ??Adjustable:
   \   00000000                      DS8 1

   \                                 In segment CODE, align 4, keep-with-next
     13          PROLevelSwitch::PROLevelSwitch(void) : PROXRefObject(true) {
   \                     ??PROLevelSwitch:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
     14              ObjectSet.insert(this);
   \   00000004   ........           LDR      R5,??DataTable6  ;; ??ObjectSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000014   ........           LDR      R0,??DataTable5  ;; ??__vtbl
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??insert,??insert??rA
     15              AllObjVector.push_back(this);
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   180085E2           ADD      R0,R5,#+24
   \   00000034   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     16              IDNumber = (C_PRO_LEVSWITCH << 16) + ObjectSet.size();
   \   00000038   100095E5           LDR      R0,[R5, #+16]
   \   0000003C   4016A0E3           MOV      R1,#+67108864
   \   00000040   E01981E3           ORR      R1,R1,#0x380000
   \   00000044   000081E0           ADD      R0,R1,R0
   \   00000048   9C0084E5           STR      R0,[R4, #+156]
     17              TankType = TANKTYPE_LEVEL_SWITCH;
   \   0000004C   0C00A0E3           MOV      R0,#+12
   \   00000050   540184E5           STR      R0,[R4, #+340]
     18              Initiate();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       ??Initiate
     19          }
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   00000064   1EFF2FE1           BX       LR               ;; return
     20          //---------------------------------------------------------------------------
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          PROLevelSwitch::PROLevelSwitch(int number) : PROXRefObject(true) {
   \                     ??PROLevelSwitch_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
     23              ObjectSet.insert(this);
   \   00000004   ........           LDR      R6,??DataTable6  ;; ??ObjectSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000018   ........           LDR      R0,??DataTable5  ;; ??__vtbl
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           _BLF     ??insert,??insert??rA
     24              AllObjVector.push_back(this);
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   180086E2           ADD      R0,R6,#+24
   \   00000038   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     25              if ( number == 0 ) {
   \   0000003C   000055E3           CMP      R5,#+0
     26                  IDNumber = (C_PRO_LEVSWITCH << 16) + ObjectSet.size();
   \   00000040   10009605           LDREQ    R0,[R6, #+16]
   \   00000044   4016A003           MOVEQ    R1,#+67108864
   \   00000048   E0198103           ORREQ    R1,R1,#0x380000
   \   0000004C   00508100           ADDEQ    R5,R1,R0
     27              } else {
     28                  IDNumber = number;
   \   00000050   9C5084E5           STR      R5,[R4, #+156]
     29              }
     30              Type       = C_PRO_LEVSWITCH;
   \   00000054   3800A0E3           MOV      R0,#+56
   \   00000058   400E80E3           ORR      R0,R0,#0x400
   \   0000005C   A00084E5           STR      R0,[R4, #+160]
     31              TankType = TANKTYPE_LEVEL_SWITCH;
   \   00000060   0C00A0E3           MOV      R0,#+12
   \   00000064   540184E5           STR      R0,[R4, #+340]
     32              Initiate();
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       ??Initiate
     33          }
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
     34          //---------------------------------------------------------------------------
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          void PROLevelSwitch::Initiate(void) {
   \                     ??Initiate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     37              IsActive              = false;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   5C01C4E5           STRB     R0,[R4, #+348]
     38              IsFailure             = false;
   \   00000014   5D01C4E5           STRB     R0,[R4, #+349]
     39              Location              = C_AI_LOC_DECK;
   \   00000018   EA00A0E3           MOV      R0,#+234
   \   0000001C   800E80E3           ORR      R0,R0,#0x800
   \   00000020   580184E5           STR      R0,[R4, #+344]
     40              LevelSwitchSensor     = NULL;
   \   00000024   605184E5           STR      R5,[R4, #+352]
     41              LevelSwitchAlPtr      = NULL;
   \   00000028   645184E5           STR      R5,[R4, #+356]
     42              AddToIOObjectList();
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     43              Page                  = 0;
   \   00000034   685184E5           STR      R5,[R4, #+360]
     44              XPos                  = 0;
   \   00000038   6C5184E5           STR      R5,[R4, #+364]
     45              YPos                  = 0;
   \   0000003C   705184E5           STR      R5,[R4, #+368]
     46              IsWarning             = false;
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   7401C4E5           STRB     R0,[R4, #+372]
     47          
     48              //AddAlarms(CompleteAlarmInfoList);
     49          }
   \   00000048   ........           B        ?Subroutine24

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine24:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     50          //---------------------------------------------------------------------------
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          PROLevelSwitch::~PROLevelSwitch(void) {
   \                     `?~PROLevelSwitch`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1400000A           BEQ      `?~PROLevelSwitch_1`
   \   00000014   ........           LDR      R0,??DataTable5  ;; ??__vtbl
     53              ObjectSet.erase(this);
   \   00000018   ........           LDR      R6,??DataTable6  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??erase_1,??erase??rA_1
     54              EraseFromVector(ObjVector, this);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   241086E2           ADD      R1,R6,#+36
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     55              EraseFromVector(AllObjVector, this);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   181086E2           ADD      R1,R6,#+24
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     56          }
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     `?~PROXRefObject`,`?~PROXRefObject??rA`
   \   00000058   010015E3           TST      R5,#0x1
   \   0000005C   0100000A           BEQ      `?~PROLevelSwitch_1`
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROLevelSwitch_1`:
   \   00000068   ........           B        ?Subroutine25

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     57          //---------------------------------------------------------------------------
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          void PROLevelSwitch::WriteConfigToFile(TSNConfigString &ConfigString) {
   \                     ??WriteConfigToFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   E7DF4DE2           SUB      SP,SP,#+924
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0140A0E1           MOV      R4,R1
     60              AnsiString LocalString;
     61              AnsiString IdNumStr;
     62              IdNumStr.cat_sprintf("0x%0x", IDNumber);
     63              LocalString += KeyWord(Type) + TabStr1 + IdNumStr + CrLfStr;
   \   00000010   6C859FE5           LDR      R8,??WriteConfigToFile_1  ;; TabStr1
   \   00000014   ........           LDR      R5,??DataTable7  ;; CrLfStr
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   C40F8DE2           ADD      R0,SP,#+784
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000028   9C3097E5           LDR      R3,[R7, #+156]
   \   0000002C   ........           LDR      R2,??DataTable8  ;; `?<Constant "0x%0x">`
   \   00000030   CB1F8DE2           ADD      R1,SP,#+812
   \   00000034   C40F8DE2           ADD      R0,SP,#+784
   \   00000038   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   CB0F8DE2           ADD      R0,SP,#+812
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   A01097E5           LDR      R1,[R7, #+160]
   \   00000050   C4008DE2           ADD      R0,SP,#+196
   \   00000054   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000058   0820A0E1           MOV      R2,R8
   \   0000005C   C4108DE2           ADD      R1,SP,#+196
   \   00000060   A8008DE2           ADD      R0,SP,#+168
   \   00000064   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000068   C42F8DE2           ADD      R2,SP,#+784
   \   0000006C   A8108DE2           ADD      R1,SP,#+168
   \   00000070   8C008DE2           ADD      R0,SP,#+140
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   8C108DE2           ADD      R1,SP,#+140
   \   00000080   70008DE2           ADD      R0,SP,#+112
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   ........           LDR      R0,??DataTable14  ;; ??npos
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   006090E5           LDR      R6,[R0, #+0]
   \   00000094   70108DE2           ADD      R1,SP,#+112
   \   00000098   0630A0E1           MOV      R3,R6
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           _BLF     ??append,??append??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   70008DE2           ADD      R0,SP,#+112
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   8C008DE2           ADD      R0,SP,#+140
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   A8008DE2           ADD      R0,SP,#+168
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   C4008DE2           ADD      R0,SP,#+196
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
     64              LocalString += PRogramObject::MakeConfigString();    //common
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   E0108DE2           ADD      R1,SP,#+224
   \   000000EC   0700A0E1           MOV      R0,R7
   \   000000F0   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000F4   0630A0E1           MOV      R3,R6
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   E0108DE2           ADD      R1,SP,#+224
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   ........           _BLF     ??append,??append??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   E0008DE2           ADD      R0,SP,#+224
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
     65              LocalString += TabStr1 + KeyWord(C_PAGE) + TabStr1 + (AnsiString)Page + CrLfStr;
   \   00000118   681197E5           LDR      R1,[R7, #+360]
   \   0000011C   D20F8DE2           ADD      R0,SP,#+840
   \   00000120   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000124   0090A0E1           MOV      R9,R0
   \   00000128   CB10A0E3           MOV      R1,#+203
   \   0000012C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000130   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000134   5B2F8DE2           ADD      R2,SP,#+364
   \   00000138   0810A0E1           MOV      R1,R8
   \   0000013C   540F8DE2           ADD      R0,SP,#+336
   \   00000140   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000144   0820A0E1           MOV      R2,R8
   \   00000148   541F8DE2           ADD      R1,SP,#+336
   \   0000014C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000150   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000154   0920A0E1           MOV      R2,R9
   \   00000158   4D1F8DE2           ADD      R1,SP,#+308
   \   0000015C   460F8DE2           ADD      R0,SP,#+280
   \   00000160   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000164   0520A0E1           MOV      R2,R5
   \   00000168   461F8DE2           ADD      R1,SP,#+280
   \   0000016C   FC008DE2           ADD      R0,SP,#+252
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   0630A0E1           MOV      R3,R6
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   FC108DE2           ADD      R1,SP,#+252
   \   00000180   0D00A0E1           MOV      R0,SP
   \   00000184   ........           _BLF     ??append,??append??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   FC008DE2           ADD      R0,SP,#+252
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   460F8DE2           ADD      R0,SP,#+280
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   D20F8DE2           ADD      R0,SP,#+840
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   4D0F8DE2           ADD      R0,SP,#+308
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   540F8DE2           ADD      R0,SP,#+336
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   5B0F8DE2           ADD      R0,SP,#+364
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     66              LocalString += TabStr1 + KeyWord(C_XPOS) + TabStr1 + (AnsiString)XPos + CrLfStr;
   \   000001E8   6C1197E5           LDR      R1,[R7, #+364]
   \   000001EC   D90F8DE2           ADD      R0,SP,#+868
   \   000001F0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001F4   0090A0E1           MOV      R9,R0
   \   000001F8   C810A0E3           MOV      R1,#+200
   \   000001FC   7E0F8DE2           ADD      R0,SP,#+504
   \   00000200   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000204   7E2F8DE2           ADD      R2,SP,#+504
   \   00000208   0810A0E1           MOV      R1,R8
   \   0000020C   770F8DE2           ADD      R0,SP,#+476
   \   00000210   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000214   0820A0E1           MOV      R2,R8
   \   00000218   771F8DE2           ADD      R1,SP,#+476
   \   0000021C   700F8DE2           ADD      R0,SP,#+448
   \   00000220   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000224   0920A0E1           MOV      R2,R9
   \   00000228   701F8DE2           ADD      R1,SP,#+448
   \   0000022C   690F8DE2           ADD      R0,SP,#+420
   \   00000230   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000234   0520A0E1           MOV      R2,R5
   \   00000238   691F8DE2           ADD      R1,SP,#+420
   \   0000023C   620F8DE2           ADD      R0,SP,#+392
   \   00000240   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000244   0630A0E1           MOV      R3,R6
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   621F8DE2           ADD      R1,SP,#+392
   \   00000250   0D00A0E1           MOV      R0,SP
   \   00000254   ........           _BLF     ??append,??append??rA
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   620F8DE2           ADD      R0,SP,#+392
   \   00000264   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   0110A0E3           MOV      R1,#+1
   \   00000270   690F8DE2           ADD      R0,SP,#+420
   \   00000274   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   0110A0E3           MOV      R1,#+1
   \   00000280   D90F8DE2           ADD      R0,SP,#+868
   \   00000284   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   700F8DE2           ADD      R0,SP,#+448
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   770F8DE2           ADD      R0,SP,#+476
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   7E0F8DE2           ADD      R0,SP,#+504
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     67              LocalString += TabStr1 + KeyWord(C_YPOS) + TabStr1 + (AnsiString)YPos + CrLfStr;
   \   000002B8   701197E5           LDR      R1,[R7, #+368]
   \   000002BC   E00F8DE2           ADD      R0,SP,#+896
   \   000002C0   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000002C4   0090A0E1           MOV      R9,R0
   \   000002C8   C910A0E3           MOV      R1,#+201
   \   000002CC   A10F8DE2           ADD      R0,SP,#+644
   \   000002D0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002D4   A12F8DE2           ADD      R2,SP,#+644
   \   000002D8   0810A0E1           MOV      R1,R8
   \   000002DC   9A0F8DE2           ADD      R0,SP,#+616
   \   000002E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E4   0820A0E1           MOV      R2,R8
   \   000002E8   9A1F8DE2           ADD      R1,SP,#+616
   \   000002EC   930F8DE2           ADD      R0,SP,#+588
   \   000002F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002F4   0920A0E1           MOV      R2,R9
   \   000002F8   931F8DE2           ADD      R1,SP,#+588
   \   000002FC   8C0F8DE2           ADD      R0,SP,#+560
   \   00000300   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000304   0520A0E1           MOV      R2,R5
   \   00000308   8C1F8DE2           ADD      R1,SP,#+560
   \   0000030C   850F8DE2           ADD      R0,SP,#+532
   \   00000310   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000314   0630A0E1           MOV      R3,R6
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   851F8DE2           ADD      R1,SP,#+532
   \   00000320   0D00A0E1           MOV      R0,SP
   \   00000324   ........           _BLF     ??append,??append??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   850F8DE2           ADD      R0,SP,#+532
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   8C0F8DE2           ADD      R0,SP,#+560
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   0020A0E3           MOV      R2,#+0
   \   0000034C   0110A0E3           MOV      R1,#+1
   \   00000350   E00F8DE2           ADD      R0,SP,#+896
   \   00000354   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000358   0020A0E3           MOV      R2,#+0
   \   0000035C   0110A0E3           MOV      R1,#+1
   \   00000360   930F8DE2           ADD      R0,SP,#+588
   \   00000364   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   0110A0E3           MOV      R1,#+1
   \   00000370   9A0F8DE2           ADD      R0,SP,#+616
   \   00000374   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000378   0020A0E3           MOV      R2,#+0
   \   0000037C   0110A0E3           MOV      R1,#+1
   \   00000380   A10F8DE2           ADD      R0,SP,#+644
   \   00000384   ........           _BLF     ??_Tidy,??_Tidy??rA
     68              if ( IsWarning ) {
   \   00000388   7401D7E5           LDRB     R0,[R7, #+372]
   \   0000038C   000050E3           CMP      R0,#+0
   \   00000390   1B00000A           BEQ      ??WriteConfigToFile_2
     69                  LocalString += TabStr1 + KeyWord(C_WARNING) + CrLfStr;
   \   00000394   E810A0E3           MOV      R1,#+232
   \   00000398   1C008DE2           ADD      R0,SP,#+28
   \   0000039C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003A0   1C208DE2           ADD      R2,SP,#+28
   \   000003A4   0810A0E1           MOV      R1,R8
   \   000003A8   38008DE2           ADD      R0,SP,#+56
   \   000003AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003B0   0520A0E1           MOV      R2,R5
   \   000003B4   38108DE2           ADD      R1,SP,#+56
   \   000003B8   54008DE2           ADD      R0,SP,#+84
   \   000003BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C0   0630A0E1           MOV      R3,R6
   \   000003C4   0020A0E3           MOV      R2,#+0
   \   000003C8   54108DE2           ADD      R1,SP,#+84
   \   000003CC   0D00A0E1           MOV      R0,SP
   \   000003D0   ........           _BLF     ??append,??append??rA
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   0110A0E3           MOV      R1,#+1
   \   000003DC   54008DE2           ADD      R0,SP,#+84
   \   000003E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E4   0020A0E3           MOV      R2,#+0
   \   000003E8   0110A0E3           MOV      R1,#+1
   \   000003EC   38008DE2           ADD      R0,SP,#+56
   \   000003F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   1C008DE2           ADD      R0,SP,#+28
   \   00000400   ........           _BLF     ??_Tidy,??_Tidy??rA
     70              }
     71              if ( LevelSwitchSensor ) {
   \                     ??WriteConfigToFile_2:
   \   00000404   600197E5           LDR      R0,[R7, #+352]
   \   00000408   000050E3           CMP      R0,#+0
     72                  if ( Location != C_AI_LOC_DECK ) {
   \   0000040C   58119715           LDRNE    R1,[R7, #+344]
   \   00000410   EA00A013           MOVNE    R0,#+234
   \   00000414   800E8013           ORRNE    R0,R0,#0x800
   \   00000418   00005111           CMPNE    R1,R0
   \   0000041C   1A00000A           BEQ      ??WriteConfigToFile_3
     73                      LocalString += TabStr1 + KeyWord(Location) + CrLfStr;
   \   00000420   54008DE2           ADD      R0,SP,#+84
   \   00000424   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000428   54208DE2           ADD      R2,SP,#+84
   \   0000042C   0810A0E1           MOV      R1,R8
   \   00000430   38008DE2           ADD      R0,SP,#+56
   \   00000434   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000438   0520A0E1           MOV      R2,R5
   \   0000043C   38108DE2           ADD      R1,SP,#+56
   \   00000440   1C008DE2           ADD      R0,SP,#+28
   \   00000444   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000448   0630A0E1           MOV      R3,R6
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   1C108DE2           ADD      R1,SP,#+28
   \   00000454   0D00A0E1           MOV      R0,SP
   \   00000458   ........           _BLF     ??append,??append??rA
   \   0000045C   0020A0E3           MOV      R2,#+0
   \   00000460   0110A0E3           MOV      R1,#+1
   \   00000464   1C008DE2           ADD      R0,SP,#+28
   \   00000468   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   38008DE2           ADD      R0,SP,#+56
   \   00000478   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   54008DE2           ADD      R0,SP,#+84
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
     74                  }
     75              }
     76              LocalString += LevelSwitchSensor->MakeConfigString();
   \                     ??WriteConfigToFile_3:
   \   0000048C   603197E5           LDR      R3,[R7, #+352]
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0300A0E1           MOV      R0,R3
   \   00000498   A43093E5           LDR      R3,[R3, #+164]
   \   0000049C   A81F8DE2           ADD      R1,SP,#+672
   \   000004A0   0C3093E5           LDR      R3,[R3, #+12]
   \   000004A4   0FE0A0E1           MOV      LR,PC
   \   000004A8   13FF2FE1           BX       R3
   \   000004AC   0630A0E1           MOV      R3,R6
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   A81F8DE2           ADD      R1,SP,#+672
   \   000004B8   0D00A0E1           MOV      R0,SP
   \   000004BC   ........           _BLF     ??append,??append??rA
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   A80F8DE2           ADD      R0,SP,#+672
   \   000004CC   ........           _BLF     ??_Tidy,??_Tidy??rA
     77              LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   000004D0   FA1FA0E3           MOV      R1,#+1000
   \   000004D4   B60F8DE2           ADD      R0,SP,#+728
   \   000004D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004DC   0520A0E1           MOV      R2,R5
   \   000004E0   B61F8DE2           ADD      R1,SP,#+728
   \   000004E4   AF0F8DE2           ADD      R0,SP,#+700
   \   000004E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004EC   0630A0E1           MOV      R3,R6
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   AF1F8DE2           ADD      R1,SP,#+700
   \   000004F8   0D00A0E1           MOV      R0,SP
   \   000004FC   ........           _BLF     ??append,??append??rA
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0110A0E3           MOV      R1,#+1
   \   00000508   AF0F8DE2           ADD      R0,SP,#+700
   \   0000050C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000510   0020A0E3           MOV      R2,#+0
   \   00000514   0110A0E3           MOV      R1,#+1
   \   00000518   B60F8DE2           ADD      R0,SP,#+728
   \   0000051C   ........           _BLF     ??_Tidy,??_Tidy??rA
     78              LocalString += CrLfStr;
   \   00000520   0630A0E1           MOV      R3,R6
   \   00000524   0020A0E3           MOV      R2,#+0
   \   00000528   0510A0E1           MOV      R1,R5
   \   0000052C   0D00A0E1           MOV      R0,SP
   \   00000530   ........           _BLF     ??append,??append??rA
     79          
     80              ConfigString.AddString(LocalString);
   \   00000534   0D10A0E1           MOV      R1,SP
   \   00000538   BD0F8DE2           ADD      R0,SP,#+756
   \   0000053C   ........           _BLF     ??string,??string??rA
   \   00000540   BD1F8DE2           ADD      R1,SP,#+756
   \   00000544   0400A0E1           MOV      R0,R4
   \   00000548   ........           _BLF     ??AddString,??AddString??rA
   \   0000054C   0020A0E3           MOV      R2,#+0
   \   00000550   0110A0E3           MOV      R1,#+1
   \   00000554   BD0F8DE2           ADD      R0,SP,#+756
   \   00000558   ........           _BLF     ??_Tidy,??_Tidy??rA
     81          }
   \   0000055C   0020A0E3           MOV      R2,#+0
   \   00000560   0110A0E3           MOV      R1,#+1
   \   00000564   C40F8DE2           ADD      R0,SP,#+784
   \   00000568   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000056C   0020A0E3           MOV      R2,#+0
   \   00000570   0110A0E3           MOV      R1,#+1
   \   00000574   0D00A0E1           MOV      R0,SP
   \   00000578   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000057C   E7DF8DE2           ADD      SP,SP,#+924
   \   00000580   ........           B        ?Subroutine26
   \                     ??WriteConfigToFile_1:
   \   00000584   ........           DC32     TabStr1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine26_0:
   \   00000008   ........           DC32     `?<Constant "Level Switch ">`
   \   0000000C   D23A2A3C           DC32     0x3c2a3ad2
   \   00000010   E02D103B           DC32     0x3b102de0
   \   00000014   FCA9713C           DC32     0x3c71a9fc
   \   00000018   27A5A03C           DC32     0x3ca0a527
   \   0000001C   5839B43B           DC32     0x3bb43958
   \   00000020   6F12033B           DC32     0x3b03126f
   \   00000024   ........           DC32     ??Default_SwitchWindow
   \   00000028   ........           DC32     ??Default_SwitchOff_mA
   \   0000002C   ........           DC32     ??Default_SwitchOn_mA
   \   00000030   F4FD543C           DC32     0x3c54fdf4
   \   00000034   0AD7A33B           DC32     0x3ba3d70a
   \   00000038   4260653C           DC32     0x3c656042
   \   0000003C   4260653B           DC32     0x3b656042
   \   00000040   ED0DBE3B           DC32     0x3bbe0ded
   \   00000044   006F813C           DC32     0x3c816f00
     82          //---------------------------------------------------------------------------
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          int PROLevelSwitch::LoadConfigFromFile(TSNConfigString &ConfigString) {
   \                     ??LoadConfigFromFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   81DF4DE2           SUB      SP,SP,#+516
     85              SetLineNumber(ConfigString.LineCount);
     86              bool NoError = true;
     87              int ErrorLine = 0;
   \   00000008   ........           LDR      R8,??Subroutine26_0  ;; `?<Constant "Level Switch ">`
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0160E0E1           MVN      R6,R1
   \   00000028   4B9FA0E3           MOV      R9,#+300
     88              int Key;
     89              do {
     90                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_2:
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0D20A0E1           MOV      R2,SP
   \   00000034   44108DE2           ADD      R1,SP,#+68
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??NextWord,??NextWord??rA
     91                  if ( ErrorLine ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1A00000A           BEQ      ??LoadConfigFromFile_3
     92                      if ( ErrorLine != EOF ) {
   \   0000004C   060050E1           CMP      R0,R6
   \   00000050   DA01000A           BEQ      ??LoadConfigFromFile_4
     93                          GiveConfigWarning((AnsiString)"Level Switch " + Name, ErrorLine);
   \   00000054   0810A0E1           MOV      R1,R8
   \   00000058   28008DE2           ADD      R0,SP,#+40
   \   0000005C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000060   442084E2           ADD      R2,R4,#+68
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000070   04108DE2           ADD      R1,SP,#+4
   \   00000074   60008DE2           ADD      R0,SP,#+96
   \   00000078   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000007C   00109DE5           LDR      R1,[SP, #+0]
   \   00000080   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   60008DE2           ADD      R0,SP,#+96
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   04008DE2           ADD      R0,SP,#+4
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   28008DE2           ADD      R0,SP,#+40
   \                     ??LoadConfigFromFile_5:
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   C10100EA           B        ??LoadConfigFromFile_4
     94                      }
     95                  } else {
     96                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_3:
   \   000000B8   44108DE2           ADD      R1,SP,#+68
   \   000000BC   28008DE2           ADD      R0,SP,#+40
   \   000000C0   ........           _BLF     ??string,??string??rA
   \   000000C4   28008DE2           ADD      R0,SP,#+40
   \   000000C8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000CC   0070A0E1           MOV      R7,R0
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   28008DE2           ADD      R0,SP,#+40
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     97                      switch ( Key ) {
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   C80050E3           CMP      R0,#+200
   \   000000E8   9E01000A           BEQ      ??LoadConfigFromFile_6
   \   000000EC   C90050E3           CMP      R0,#+201
   \   000000F0   A201000A           BEQ      ??LoadConfigFromFile_7
   \   000000F4   CB0050E3           CMP      R0,#+203
   \   000000F8   A601000A           BEQ      ??LoadConfigFromFile_8
   \   000000FC   E80050E3           CMP      R0,#+232
   \   00000100   AA01000A           BEQ      ??LoadConfigFromFile_9
   \   00000104   FA0F50E3           CMP      R0,#+1000
   \   00000108   EA10A013           MOVNE    R1,#+234
   \   0000010C   C01F8113           ORRNE    R1,R1,#0x300
   \   00000110   01005011           CMPNE    R0,R1
   \   00000114   A901000A           BEQ      ??LoadConfigFromFile_4
   \   00000118   011081E3           ORR      R1,R1,#0x1
   \   0000011C   010050E1           CMP      R0,R1
   \   00000120   5200000A           BEQ      ??LoadConfigFromFile_10
   \   00000124   FB0F50E3           CMP      R0,#+1004
   \   00000128   A401000A           BEQ      ??LoadConfigFromFile_4
   \   0000012C   6910A0E3           MOV      R1,#+105
   \   00000130   801E81E3           ORR      R1,R1,#0x800
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   2E01000A           BEQ      ??LoadConfigFromFile_11
   \   0000013C   011081E2           ADD      R1,R1,#+1
   \   00000140   010050E1           CMP      R0,R1
   \   00000144   01108113           ORRNE    R1,R1,#0x1
   \   00000148   01005011           CMPNE    R0,R1
   \   0000014C   01108112           ADDNE    R1,R1,#+1
   \   00000150   01005011           CMPNE    R0,R1
   \   00000154   870E5013           CMPNE    R0,#+2160
   \   00000158   05108112           ADDNE    R1,R1,#+5
   \   0000015C   01005011           CMPNE    R0,R1
   \   00000160   8C00000A           BEQ      ??LoadConfigFromFile_12
   \   00000164   011081E2           ADD      R1,R1,#+1
   \   00000168   010050E1           CMP      R0,R1
   \   0000016C   4A00000A           BEQ      ??LoadConfigFromFile_13
   \   00000170   011081E3           ORR      R1,R1,#0x1
   \   00000174   010050E1           CMP      R0,R1
   \   00000178   8600000A           BEQ      ??LoadConfigFromFile_12
   \   0000017C   071081E2           ADD      R1,R1,#+7
   \   00000180   010050E1           CMP      R0,R1
   \   00000184   4901000A           BEQ      ??LoadConfigFromFile_14
   \   00000188   0B1081E2           ADD      R1,R1,#+11
   \   0000018C   010050E1           CMP      R0,R1
   \   00000190   E900000A           BEQ      ??LoadConfigFromFile_15
   \   00000194   131081E2           ADD      R1,R1,#+19
   \   00000198   010050E1           CMP      R0,R1
   \   0000019C   8701000A           BEQ      ??LoadConfigFromFile_4
   \   000001A0   471081E3           ORR      R1,R1,#0x47
   \   000001A4   010050E1           CMP      R0,R1
   \   000001A8   8E0E5013           CMPNE    R0,#+2272
   \   000001AC   02108112           ADDNE    R1,R1,#+2
   \   000001B0   01005011           CMPNE    R0,R1
   \   000001B4   02108113           ORRNE    R1,R1,#0x2
   \   000001B8   01005011           CMPNE    R0,R1
   \   000001BC   01108112           ADDNE    R1,R1,#+1
   \   000001C0   01005011           CMPNE    R0,R1
   \   000001C4   06108112           ADDNE    R1,R1,#+6
   \   000001C8   01005011           CMPNE    R0,R1
   \   000001CC   7A01000A           BEQ      ??LoadConfigFromFile_16
   \   000001D0   B910A0E3           MOV      R1,#+185
   \   000001D4   B01E81E3           ORR      R1,R1,#0xB00
   \   000001D8   010050E1           CMP      R0,R1
   \   000001DC   7701000A           BEQ      ??LoadConfigFromFile_4
   \   000001E0   3410A0E3           MOV      R1,#+52
   \   000001E4   841D81E3           ORR      R1,R1,#0x2100
   \   000001E8   010050E1           CMP      R0,R1
   \   000001EC   2300000A           BEQ      ??LoadConfigFromFile_17
     98                      default:
     99                          GiveConfigWarning((AnsiString)"Level Switch " + Name, InputKeyWord, ConfigString.LineCount);
   \   000001F0   44108DE2           ADD      R1,SP,#+68
   \   000001F4   7C008DE2           ADD      R0,SP,#+124
   \   000001F8   ........           _BLF     ??string,??string??rA
   \   000001FC   0810A0E1           MOV      R1,R8
   \   00000200   D0008DE2           ADD      R0,SP,#+208
   \   00000204   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000208   442084E2           ADD      R2,R4,#+68
   \   0000020C   0010A0E1           MOV      R1,R0
   \   00000210   B4008DE2           ADD      R0,SP,#+180
   \   00000214   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000218   B4108DE2           ADD      R1,SP,#+180
   \   0000021C   98008DE2           ADD      R0,SP,#+152
   \   00000220   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000224   1C2095E5           LDR      R2,[R5, #+28]
   \   00000228   7C108DE2           ADD      R1,SP,#+124
   \   0000022C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   7C008DE2           ADD      R0,SP,#+124
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   98008DE2           ADD      R0,SP,#+152
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   B4008DE2           ADD      R0,SP,#+180
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   D0008DE2           ADD      R0,SP,#+208
   \   0000026C   8FFFFFEA           B        ??LoadConfigFromFile_5
    100                          break;
    101                      case C_AI_END:      // If AI type not found can continue with this
    102                      case C_AL_END:
    103                      case C_PRO_END:
    104                      case C_PRO_END_COMMON:
    105                      case C_PRO_END_PRO:
    106                          break;
    107                      case C_PRO_START_PRO:
    108                          PRogramObject::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_10:
   \   00000270   0510A0E1           MOV      R1,R5
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000027C   4F0100EA           B        ??LoadConfigFromFile_4
    109                          break;
    110                      case C_XREF_START:
    111                          LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_17:
   \   00000280   A42094E5           LDR      R2,[R4, #+164]
   \   00000284   0510A0E1           MOV      R1,R5
   \   00000288   102092E5           LDR      R2,[R2, #+16]
   \   0000028C   0400A0E1           MOV      R0,R4
   \   00000290   0FE0A0E1           MOV      LR,PC
   \   00000294   12FF2FE1           BX       R2
   \   00000298   480100EA           B        ??LoadConfigFromFile_4
    112                          break;
    113                      case C_AI_LeSw_HS:
    114                          switch ( Key ) {
   \                     ??LoadConfigFromFile_13:
   \   0000029C   0A00001A           BNE      ??LoadConfigFromFile_18
    115                          case C_AI_LeSw_HS:
    116                              LevelSwitchSensor = (AnalogInput *)new AILevelSwitchOptical_mA(Key, LEVELSWITCH_HS_MA_ON, LEVELSWITCH_HS_MA_OFF, LEVELSWITCH_HS_MA_WIN, LEVELSWITCH_HS_MA_TEST, LEVELSWITCH_HS_MA_LIGHT);
   \   000002A0   ........           LDR      R0,??Subroutine26_0+0x4  ;; 0x3c2a3ad2
   \   000002A4   ........           LDR      R3,??Subroutine26_0+0x8  ;; 0x3b102de0
   \   000002A8   ........           LDR      R2,??Subroutine26_0+0xC  ;; 0x3c71a9fc
   \   000002AC   ........           LDR      R1,??Subroutine26_0+0x10  ;; 0x3ca0a527
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   ........           LDR      R0,??Subroutine26_0+0x14  ;; 0x3bb43958
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   0700A0E1           MOV      R0,R7
   \   000002C0   ........           _BLF     `??new AILevelSwitchOptical_mA`,`??new AILevelSwitchOptical_mA??rA`
   \   000002C4   600184E5           STR      R0,[R4, #+352]
   \   000002C8   08D08DE2           ADD      SP,SP,#+8
    117                              break;
    118                          }
    119                          LevelSwitchSensor->LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_18:
   \   000002CC   602194E5           LDR      R2,[R4, #+352]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0200A0E1           MOV      R0,R2
   \   000002D8   A42092E5           LDR      R2,[R2, #+164]
   \   000002DC   102092E5           LDR      R2,[R2, #+16]
   \   000002E0   0FE0A0E1           MOV      LR,PC
   \   000002E4   12FF2FE1           BX       R2
    120                          AnalogInList.push_back((AnalogInput *)LevelSwitchSensor);
   \   000002E8   601194E5           LDR      R1,[R4, #+352]
   \   000002EC   040089E0           ADD      R0,R9,R4
   \   000002F0   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    121                          if ( Description.IsEmpty() ) {
   \   000002F4   7C0084E2           ADD      R0,R4,#+124
   \   000002F8   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   0C00000A           BEQ      ??LoadConfigFromFile_19
    122                              Description = "LevSwitch";
   \   00000304   101088E2           ADD      R1,R8,#+16
   \   00000308   04008DE2           ADD      R0,SP,#+4
   \   0000030C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000310   ........           LDR      R1,??DataTable14  ;; ??npos
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   003091E5           LDR      R3,[R1, #+0]
   \   0000031C   0010A0E1           MOV      R1,R0
   \   00000320   7C0084E2           ADD      R0,R4,#+124
   \   00000324   ........           _BLF     ??assign,??assign??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   04008DE2           ADD      R0,SP,#+4
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
    123                          }
    124                          LevelSwitchAlPtr = new AlarmLevelSwitch(this, Name, Description);
   \                     ??LoadConfigFromFile_19:
   \   00000338   7C1084E2           ADD      R1,R4,#+124
   \   0000033C   420F8DE2           ADD      R0,SP,#+264
   \   00000340   ........           _BLF     ??string,??string??rA
   \   00000344   441084E2           ADD      R1,R4,#+68
   \   00000348   EC008DE2           ADD      R0,SP,#+236
   \   0000034C   ........           _BLF     ??string,??string??rA
   \   00000350   422F8DE2           ADD      R2,SP,#+264
   \   00000354   EC108DE2           ADD      R1,SP,#+236
   \   00000358   0400A0E1           MOV      R0,R4
   \   0000035C   ........           _BLF     `??new AlarmLevelSwitch`,`??new AlarmLevelSwitch??rA`
   \   00000360   640184E5           STR      R0,[R4, #+356]
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   420F8DE2           ADD      R0,SP,#+264
   \   00000370   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000374   0020A0E3           MOV      R2,#+0
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   EC008DE2           ADD      R0,SP,#+236
   \                     ??LoadConfigFromFile_20:
   \   00000380   ........           _BLF     ??_Tidy,??_Tidy??rA
    125                          AlarmSet.insert(LevelSwitchAlPtr);
   \   00000384   642194E5           LDR      R2,[R4, #+356]
   \   00000388   E41084E2           ADD      R1,R4,#+228
   \   0000038C   20008DE2           ADD      R0,SP,#+32
   \   00000390   ........           _BLF     ??insert_1,??insert??rA_1
   \   00000394   090100EA           B        ??LoadConfigFromFile_4
    126                          break;
    127                      case C_AI_LeSw_mA:
    128                      case C_AI_LeSw_Valcom:
    129                      case C_AI_LeSw_API:
    130                      case C_AI_LeSw_Vega:
    131                      case C_AI_LeSw_Vega62:
    132                      case C_AI_LeSw_Vega64:
    133                          {
    134                              switch ( Key ) {
   \                     ??LoadConfigFromFile_12:
   \   00000398   ........           LDR      R3,??Subroutine26_0+0x18  ;; 0x3b03126f
   \   0000039C   6A1047E2           SUB      R1,R7,#+106
   \   000003A0   4007C3E3           BIC      R0,R3,#0x1000000
   \   000003A4   801E41E2           SUB      R1,R1,#+2048
   \   000003A8   090051E3           CMP      R1,#+9
   \   000003AC   2900008A           BHI      ??LoadConfigFromFile_21
   \   000003B0   012F8FE2           ADR      R2,??LoadConfigFromFile_1
   \   000003B4   0120D2E7           LDRB     R2,[R2, R1]
   \   000003B8   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??LoadConfigFromFile_1:
   \   000003BC   0D111526           DC8      +13,+17,+21,+38
   \   000003C0   2626151C           DC8      +38,+38,+21,+28
   \   000003C4   26020000           DC8      +38,+2,+0,+0
    135                              case C_AI_LeSw_mA:
    136                                  LevelSwitchSensor = (AnalogInput *)new AILevelSwitch_mA(C_AI_LeSw_mA, PROProjectInfo::Default_SwitchOn_mA, PROProjectInfo::Default_SwitchOff_mA, PROProjectInfo::Default_SwitchWindow);
   \                     ??LoadConfigFromFile_22:
   \   000003C8   ........           LDR      R0,??Subroutine26_0+0x1C  ;; ??Default_SwitchWindow
   \   000003CC   003090E5           LDR      R3,[R0, #+0]
   \   000003D0   ........           LDR      R0,??Subroutine26_0+0x20  ;; ??Default_SwitchOff_mA
   \   000003D4   002090E5           LDR      R2,[R0, #+0]
   \   000003D8   ........           LDR      R0,??Subroutine26_0+0x24  ;; ??Default_SwitchOn_mA
   \   000003DC   001090E5           LDR      R1,[R0, #+0]
   \   000003E0   7300A0E3           MOV      R0,#+115
   \                     ??LoadConfigFromFile_23:
   \   000003E4   800E80E3           ORR      R0,R0,#0x800
   \   000003E8   ........           _BLF     `??new AILevelSwitch_mA`,`??new AILevelSwitch_mA??rA`
   \   000003EC   600184E5           STR      R0,[R4, #+352]
   \   000003F0   180000EA           B        ??LoadConfigFromFile_21
    137                                  break;
    138                              case C_AI_LeSw_Valcom:
    139                                  LevelSwitchSensor = (AnalogInput *)new AILevelSwitch_mA(C_AI_LeSw_Valcom, LEVELSWITCH_VALCOM_MA_ON, LEVELSWITCH_VALCOM_MA_OFF, LEVELSWITCH_VALCOM_MA_WIN);
   \                     ??LoadConfigFromFile_24:
   \   000003F4   ........           LDR      R2,??Subroutine26_0+0x28  ;; 0x3c54fdf4
   \   000003F8   ........           LDR      R1,??Subroutine26_0+0x2C  ;; 0x3ba3d70a
   \   000003FC   6A00A0E3           MOV      R0,#+106
   \   00000400   F7FFFFEA           B        ??LoadConfigFromFile_23
    140                                  break;
    141                              case C_AI_LeSw_API:
    142                                  LevelSwitchSensor = (AnalogInput *)new AILevelSwitch_mA(C_AI_LeSw_API, LEVELSWITCH_API_MA_ON, LEVELSWITCH_API_MA_OFF, LEVELSWITCH_API_MA_WIN);
   \                     ??LoadConfigFromFile_25:
   \   00000404   ........           LDR      R2,??Subroutine26_0+0x30  ;; 0x3c656042
   \   00000408   6B00A0E3           MOV      R0,#+107
   \   0000040C   801842E2           SUB      R1,R2,#+8388608
   \   00000410   F3FFFFEA           B        ??LoadConfigFromFile_23
    143                                  break;
    144                              case C_AI_LeSw_Vega     :
    145                              case C_AI_LeSw_Vega62   :
    146                                  LevelSwitchSensor = (AnalogInput *)new AILevelSwitchVega(C_AI_LeSw_Vega62, LEVELSWITCH_VEGA62_MA_ON, LEVELSWITCH_VEGA62_MA_OFF, LEVELSWITCH_VEGA62_MA_WIN, LEVELSWITCH_VEGA62_MA_TEST);
   \                     ??LoadConfigFromFile_26:
   \   00000414   ........           LDR      R2,??Subroutine26_0+0x34  ;; 0x3b656042
   \   00000418   0010A0E3           MOV      R1,#+0
   \   0000041C   02002DE9           PUSH     {R1}
   \   00000420   0030A0E1           MOV      R3,R0
   \   00000424   801880E3           ORR      R1,R0,#0x800000
   \   00000428   870EA0E3           MOV      R0,#+2160
   \   0000042C   060000EA           B        ??LoadConfigFromFile_27
    147                                  break;
    148                              case C_AI_LeSw_Vega64   :
    149                                  LevelSwitchSensor = (AnalogInput *)new AILevelSwitchVega(C_AI_LeSw_Vega64, LEVELSWITCH_VEGA64_MA_ON, LEVELSWITCH_VEGA64_MA_OFF, LEVELSWITCH_VEGA64_MA_WIN, LEVELSWITCH_VEGA64_MA_TEST);
   \                     ??LoadConfigFromFile_28:
   \   00000430   ........           LDR      R2,??Subroutine26_0+0x38  ;; 0x3bbe0ded
   \   00000434   0010A0E3           MOV      R1,#+0
   \   00000438   02002DE9           PUSH     {R1}
   \   0000043C   ........           LDR      R1,??Subroutine26_0+0x3C  ;; 0x3c816f00
   \   00000440   0030A0E1           MOV      R3,R0
   \   00000444   7100A0E3           MOV      R0,#+113
   \   00000448   800E80E3           ORR      R0,R0,#0x800
   \                     ??LoadConfigFromFile_27:
   \   0000044C   ........           _BLF     `??new AILevelSwitchVega`,`??new AILevelSwitchVega??rA`
   \   00000450   600184E5           STR      R0,[R4, #+352]
   \   00000454   04D08DE2           ADD      SP,SP,#+4
    150                                  break;
    151                              }
    152                          }
    153                          LevelSwitchSensor->LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_21:
   \   00000458   602194E5           LDR      R2,[R4, #+352]
   \   0000045C   0510A0E1           MOV      R1,R5
   \   00000460   0200A0E1           MOV      R0,R2
   \   00000464   A42092E5           LDR      R2,[R2, #+164]
   \   00000468   102092E5           LDR      R2,[R2, #+16]
   \   0000046C   0FE0A0E1           MOV      LR,PC
   \   00000470   12FF2FE1           BX       R2
    154                          AnalogInList.push_back((AnalogInput *)LevelSwitchSensor);
   \   00000474   601194E5           LDR      R1,[R4, #+352]
   \   00000478   040089E0           ADD      R0,R9,R4
   \   0000047C   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    155          
    156                          if ( Description.IsEmpty() ) {
   \   00000480   7C0084E2           ADD      R0,R4,#+124
   \   00000484   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000488   000050E3           CMP      R0,#+0
   \   0000048C   0C00000A           BEQ      ??LoadConfigFromFile_29
    157                              Description = "LevSwitch";
   \   00000490   101088E2           ADD      R1,R8,#+16
   \   00000494   04008DE2           ADD      R0,SP,#+4
   \   00000498   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000049C   ........           LDR      R1,??DataTable14  ;; ??npos
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   003091E5           LDR      R3,[R1, #+0]
   \   000004A8   0010A0E1           MOV      R1,R0
   \   000004AC   7C0084E2           ADD      R0,R4,#+124
   \   000004B0   ........           _BLF     ??assign,??assign??rA
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   0110A0E3           MOV      R1,#+1
   \   000004BC   04008DE2           ADD      R0,SP,#+4
   \   000004C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    158                          }
    159                          LevelSwitchAlPtr = new AlarmLevelSwitch(this, Name, Description);
   \                     ??LoadConfigFromFile_29:
   \   000004C4   7C1084E2           ADD      R1,R4,#+124
   \   000004C8   500F8DE2           ADD      R0,SP,#+320
   \   000004CC   ........           _BLF     ??string,??string??rA
   \   000004D0   441084E2           ADD      R1,R4,#+68
   \   000004D4   490F8DE2           ADD      R0,SP,#+292
   \   000004D8   ........           _BLF     ??string,??string??rA
   \   000004DC   502F8DE2           ADD      R2,SP,#+320
   \   000004E0   491F8DE2           ADD      R1,SP,#+292
   \   000004E4   0400A0E1           MOV      R0,R4
   \   000004E8   ........           _BLF     `??new AlarmLevelSwitch`,`??new AlarmLevelSwitch??rA`
   \   000004EC   640184E5           STR      R0,[R4, #+356]
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   0110A0E3           MOV      R1,#+1
   \   000004F8   500F8DE2           ADD      R0,SP,#+320
   \   000004FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0110A0E3           MOV      R1,#+1
   \   00000508   490F8DE2           ADD      R0,SP,#+292
   \   0000050C   ........           _BLF     ??_Tidy,??_Tidy??rA
    160                          AlarmSet.insert(LevelSwitchAlPtr);
   \   00000510   642194E5           LDR      R2,[R4, #+356]
   \   00000514   E41084E2           ADD      R1,R4,#+228
   \   00000518   20008DE2           ADD      R0,SP,#+32
   \   0000051C   ........           _BLF     ??insert_1,??insert??rA_1
    161                          switch ( Key ) {
   \   00000520   870E57E3           CMP      R7,#+2160
   \   00000524   A500001A           BNE      ??LoadConfigFromFile_4
    162                          case C_AI_LeSw_mA:
    163                          case C_AI_LeSw_Valcom:
    164                          case C_AI_LeSw_API:
    165                              break;
    166                          case C_AI_LeSw_Vega62:
    167                              LevelSwitchAlPtr->SetAlarmDelay(5000);
   \   00000528   640194E5           LDR      R0,[R4, #+356]
   \   0000052C   8810A0E3           MOV      R1,#+136
   \   00000530   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000534   ........           _BLF     ??SetAlarmDelay,??SetAlarmDelay??rA
   \   00000538   A00000EA           B        ??LoadConfigFromFile_4
    168                              break;
    169                          }
    170                          break;
    171                      case C_AI_WATERINGRESS:
    172                          LevelSwitchSensor = (AnalogInput *)new AIWaterIngressSensor(Key);
   \                     ??LoadConfigFromFile_15:
   \   0000053C   0010A0E3           MOV      R1,#+0
   \   00000540   ........           _BLF     `??new AIWaterIngressSensor`,`??new AIWaterIngressSensor??rA`
   \   00000544   600184E5           STR      R0,[R4, #+352]
    173                          LevelSwitchSensor->LoadConfigString(ConfigString);
   \   00000548   A42090E5           LDR      R2,[R0, #+164]
   \   0000054C   0510A0E1           MOV      R1,R5
   \   00000550   102092E5           LDR      R2,[R2, #+16]
   \   00000554   0FE0A0E1           MOV      LR,PC
   \   00000558   12FF2FE1           BX       R2
    174                          AnalogInList.push_back((AnalogInput *)LevelSwitchSensor);
   \   0000055C   601194E5           LDR      R1,[R4, #+352]
   \   00000560   040089E0           ADD      R0,R9,R4
   \   00000564   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    175                          if ( Description.IsEmpty() ) {
   \   00000568   7C0084E2           ADD      R0,R4,#+124
   \   0000056C   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000570   000050E3           CMP      R0,#+0
   \   00000574   0C00000A           BEQ      ??LoadConfigFromFile_30
    176                              Description = "WaterDetect";
   \   00000578   1C1088E2           ADD      R1,R8,#+28
   \   0000057C   04008DE2           ADD      R0,SP,#+4
   \   00000580   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000584   ........           LDR      R1,??DataTable14  ;; ??npos
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   003091E5           LDR      R3,[R1, #+0]
   \   00000590   0010A0E1           MOV      R1,R0
   \   00000594   7C0084E2           ADD      R0,R4,#+124
   \   00000598   ........           _BLF     ??assign,??assign??rA
   \   0000059C   0020A0E3           MOV      R2,#+0
   \   000005A0   0110A0E3           MOV      R1,#+1
   \   000005A4   04008DE2           ADD      R0,SP,#+4
   \   000005A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    177                          }
    178          
    179                          LevelSwitchAlPtr = new AlarmLevelSwitch(this, Name, Description);
   \                     ??LoadConfigFromFile_30:
   \   000005AC   7C1084E2           ADD      R1,R4,#+124
   \   000005B0   5E0F8DE2           ADD      R0,SP,#+376
   \   000005B4   ........           _BLF     ??string,??string??rA
   \   000005B8   441084E2           ADD      R1,R4,#+68
   \   000005BC   570F8DE2           ADD      R0,SP,#+348
   \   000005C0   ........           _BLF     ??string,??string??rA
   \   000005C4   5E2F8DE2           ADD      R2,SP,#+376
   \   000005C8   571F8DE2           ADD      R1,SP,#+348
   \   000005CC   0400A0E1           MOV      R0,R4
   \   000005D0   ........           _BLF     `??new AlarmLevelSwitch`,`??new AlarmLevelSwitch??rA`
   \   000005D4   640184E5           STR      R0,[R4, #+356]
   \   000005D8   0020A0E3           MOV      R2,#+0
   \   000005DC   0110A0E3           MOV      R1,#+1
   \   000005E0   5E0F8DE2           ADD      R0,SP,#+376
   \   000005E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005E8   0020A0E3           MOV      R2,#+0
   \   000005EC   0110A0E3           MOV      R1,#+1
   \   000005F0   570F8DE2           ADD      R0,SP,#+348
   \   000005F4   61FFFFEA           B        ??LoadConfigFromFile_20
    180                          AlarmSet.insert(LevelSwitchAlPtr);
    181                          break;
    182                      case C_AI_LeSw_ADCard:
    183                          LevelSwitchSensor = (AnalogInput *)new AiLevelSwitchSensor_mV(Key);
   \                     ??LoadConfigFromFile_11:
   \   000005F8   ........           _BLF     `??new AiLevelSwitchSensor_mV`,`??new AiLevelSwitchSensor_mV??rA`
   \   000005FC   600184E5           STR      R0,[R4, #+352]
    184                          LevelSwitchSensor->LoadConfigString(ConfigString);
   \   00000600   A42090E5           LDR      R2,[R0, #+164]
   \   00000604   0510A0E1           MOV      R1,R5
   \   00000608   102092E5           LDR      R2,[R2, #+16]
   \   0000060C   0FE0A0E1           MOV      LR,PC
   \   00000610   12FF2FE1           BX       R2
    185                          AnalogInList.push_back((AnalogInput *)LevelSwitchSensor);
   \   00000614   601194E5           LDR      R1,[R4, #+352]
   \   00000618   040089E0           ADD      R0,R9,R4
   \   0000061C   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    186                          if ( Description.IsEmpty() ) {
   \   00000620   7C0084E2           ADD      R0,R4,#+124
   \   00000624   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000628   000050E3           CMP      R0,#+0
   \   0000062C   0C00000A           BEQ      ??LoadConfigFromFile_31
    187                              Description = "LevSwitch";
   \   00000630   101088E2           ADD      R1,R8,#+16
   \   00000634   04008DE2           ADD      R0,SP,#+4
   \   00000638   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000063C   0010A0E1           MOV      R1,R0
   \   00000640   ........           LDR      R0,??DataTable14  ;; ??npos
   \   00000644   0020A0E3           MOV      R2,#+0
   \   00000648   003090E5           LDR      R3,[R0, #+0]
   \   0000064C   7C0084E2           ADD      R0,R4,#+124
   \   00000650   ........           _BLF     ??assign,??assign??rA
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   0110A0E3           MOV      R1,#+1
   \   0000065C   04008DE2           ADD      R0,SP,#+4
   \   00000660   ........           _BLF     ??_Tidy,??_Tidy??rA
    188                          }
    189          
    190                          LevelSwitchAlPtr = new AlarmLevelSwitch(this, Name, Description);
   \                     ??LoadConfigFromFile_31:
   \   00000664   7C1084E2           ADD      R1,R4,#+124
   \   00000668   6C0F8DE2           ADD      R0,SP,#+432
   \   0000066C   ........           _BLF     ??string,??string??rA
   \   00000670   441084E2           ADD      R1,R4,#+68
   \   00000674   650F8DE2           ADD      R0,SP,#+404
   \   00000678   ........           _BLF     ??string,??string??rA
   \   0000067C   6C2F8DE2           ADD      R2,SP,#+432
   \   00000680   651F8DE2           ADD      R1,SP,#+404
   \   00000684   0400A0E1           MOV      R0,R4
   \   00000688   ........           _BLF     `??new AlarmLevelSwitch`,`??new AlarmLevelSwitch??rA`
   \   0000068C   640184E5           STR      R0,[R4, #+356]
   \   00000690   0020A0E3           MOV      R2,#+0
   \   00000694   0110A0E3           MOV      R1,#+1
   \   00000698   6C0F8DE2           ADD      R0,SP,#+432
   \   0000069C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006A0   0020A0E3           MOV      R2,#+0
   \   000006A4   0110A0E3           MOV      R1,#+1
   \   000006A8   650F8DE2           ADD      R0,SP,#+404
   \   000006AC   33FFFFEA           B        ??LoadConfigFromFile_20
    191                          AlarmSet.insert(LevelSwitchAlPtr);
    192                          break;
    193                      case C_AI_COIL_IN:
    194                          LevelSwitchSensor = (AnalogInput *)new AiCoilInSensor(Key);
   \                     ??LoadConfigFromFile_14:
   \   000006B0   ........           _BLF     `??new AiCoilInSensor`,`??new AiCoilInSensor??rA`
   \   000006B4   600184E5           STR      R0,[R4, #+352]
    195                          LevelSwitchSensor->LoadConfigString(ConfigString);
   \   000006B8   A42090E5           LDR      R2,[R0, #+164]
   \   000006BC   0510A0E1           MOV      R1,R5
   \   000006C0   102092E5           LDR      R2,[R2, #+16]
   \   000006C4   0FE0A0E1           MOV      LR,PC
   \   000006C8   12FF2FE1           BX       R2
    196                          AnalogInList.push_back((AnalogInput *)LevelSwitchSensor);
   \   000006CC   601194E5           LDR      R1,[R4, #+352]
   \   000006D0   040089E0           ADD      R0,R9,R4
   \   000006D4   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    197                          if ( Description.IsEmpty() ) {
   \   000006D8   7C0084E2           ADD      R0,R4,#+124
   \   000006DC   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000006E0   000050E3           CMP      R0,#+0
   \   000006E4   0C00000A           BEQ      ??LoadConfigFromFile_32
    198                              Description = "Alarm";
   \   000006E8   281088E2           ADD      R1,R8,#+40
   \   000006EC   04008DE2           ADD      R0,SP,#+4
   \   000006F0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000006F4   ........           LDR      R1,??DataTable14  ;; ??npos
   \   000006F8   0020A0E3           MOV      R2,#+0
   \   000006FC   003091E5           LDR      R3,[R1, #+0]
   \   00000700   0010A0E1           MOV      R1,R0
   \   00000704   7C0084E2           ADD      R0,R4,#+124
   \   00000708   ........           _BLF     ??assign,??assign??rA
   \   0000070C   0020A0E3           MOV      R2,#+0
   \   00000710   0110A0E3           MOV      R1,#+1
   \   00000714   04008DE2           ADD      R0,SP,#+4
   \   00000718   ........           _BLF     ??_Tidy,??_Tidy??rA
    199                          }
    200                          LevelSwitchAlPtr = new AlarmLevelSwitch(this, Name, Description);
   \                     ??LoadConfigFromFile_32:
   \   0000071C   7C1084E2           ADD      R1,R4,#+124
   \   00000720   7A0F8DE2           ADD      R0,SP,#+488
   \   00000724   ........           _BLF     ??string,??string??rA
   \   00000728   441084E2           ADD      R1,R4,#+68
   \   0000072C   730F8DE2           ADD      R0,SP,#+460
   \   00000730   ........           _BLF     ??string,??string??rA
   \   00000734   7A2F8DE2           ADD      R2,SP,#+488
   \   00000738   731F8DE2           ADD      R1,SP,#+460
   \   0000073C   0400A0E1           MOV      R0,R4
   \   00000740   ........           _BLF     `??new AlarmLevelSwitch`,`??new AlarmLevelSwitch??rA`
   \   00000744   640184E5           STR      R0,[R4, #+356]
   \   00000748   0020A0E3           MOV      R2,#+0
   \   0000074C   0110A0E3           MOV      R1,#+1
   \   00000750   7A0F8DE2           ADD      R0,SP,#+488
   \   00000754   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000758   0020A0E3           MOV      R2,#+0
   \   0000075C   0110A0E3           MOV      R1,#+1
   \   00000760   730F8DE2           ADD      R0,SP,#+460
   \   00000764   05FFFFEA           B        ??LoadConfigFromFile_20
    201                          AlarmSet.insert(LevelSwitchAlPtr);
    202                          break;
    203                      case C_XPOS:
    204                          XPos = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_6:
   \   00000768   0020A0E3           MOV      R2,#+0
   \   0000076C   0D10A0E1           MOV      R1,SP
   \   00000770   0500A0E1           MOV      R0,R5
   \   00000774   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000778   6C0184E5           STR      R0,[R4, #+364]
   \   0000077C   0F0000EA           B        ??LoadConfigFromFile_4
    205                          break;
    206                      case C_YPOS:
    207                          YPos = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_7:
   \   00000780   0020A0E3           MOV      R2,#+0
   \   00000784   0D10A0E1           MOV      R1,SP
   \   00000788   0500A0E1           MOV      R0,R5
   \   0000078C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000790   700184E5           STR      R0,[R4, #+368]
   \   00000794   090000EA           B        ??LoadConfigFromFile_4
    208                          break;
    209                      case C_PAGE:
    210                          Page = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_8:
   \   00000798   0020A0E3           MOV      R2,#+0
   \   0000079C   0D10A0E1           MOV      R1,SP
   \   000007A0   0500A0E1           MOV      R0,R5
   \   000007A4   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000007A8   680184E5           STR      R0,[R4, #+360]
   \   000007AC   030000EA           B        ??LoadConfigFromFile_4
    211                          break;
    212                      case C_WARNING:
    213                          IsWarning = true;
   \                     ??LoadConfigFromFile_9:
   \   000007B0   0100A0E3           MOV      R0,#+1
   \   000007B4   7401C4E5           STRB     R0,[R4, #+372]
   \   000007B8   000000EA           B        ??LoadConfigFromFile_4
    214                          break;
    215                      case C_AI_LOC_BOTTOM      :
    216                      case C_AI_LOC_MIDDLE      :
    217                      case C_AI_LOC_UPPER       :
    218                      case C_AI_LOC_DECK        :
    219                      case C_AI_LOC_PUMP_ROOM   :
    220                      case C_AI_LOC_ENGINE_ROOM :
    221                          Location = Key;
   \                     ??LoadConfigFromFile_16:
   \   000007BC   587184E5           STR      R7,[R4, #+344]
    222                          break;
    223                      }
    224                  }
    225              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??LoadConfigFromFile_4:
   \   000007C0   0020A0E3           MOV      R2,#+0
   \   000007C4   0110A0E3           MOV      R1,#+1
   \   000007C8   44008DE2           ADD      R0,SP,#+68
   \   000007CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007D0   00009DE5           LDR      R0,[SP, #+0]
   \   000007D4   060050E1           CMP      R0,R6
   \   000007D8   FA0F5713           CMPNE    R7,#+1000
   \   000007DC   12FEFF1A           BNE      ??LoadConfigFromFile_2
    226              CopyAnalogList();
   \   000007E0   0400A0E1           MOV      R0,R4
   \   000007E4   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    227          
    228              if ( LevelSwitchSensor ) {
   \   000007E8   600194E5           LDR      R0,[R4, #+352]
   \   000007EC   000050E3           CMP      R0,#+0
    229                  LevelSwitchSensor->Location = Location;
   \   000007F0   58119415           LDRNE    R1,[R4, #+344]
   \   000007F4   28118015           STRNE    R1,[R0, #+296]
    230              }
    231              AddAlarms(CompleteAlarmInfoList);
   \   000007F8   FC1084E2           ADD      R1,R4,#+252
   \   000007FC   0400A0E1           MOV      R0,R4
   \   00000800   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    232              AddSensorAlarms();
   \   00000804   0400A0E1           MOV      R0,R4
   \   00000808   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    233              SetChildUserRights();
   \   0000080C   0400A0E1           MOV      R0,R4
   \   00000810   ........           _BLF     ??SetChildUserRights,??SetChildUserRights??rA
    234              return ErrorLine;
   \   00000814   00009DE5           LDR      R0,[SP, #+0]
   \   00000818   81DF8DE2           ADD      SP,SP,#+516
   \   0000081C                      REQUIRE ?Subroutine26
   \   0000081C                      ;; // Fall through to label ?Subroutine26
    235          }
    236          
    237          //---------------------------------------------------------------------------
    238          ///////////////////////////////////////////////////////////////
    239          //
    240          // Routines for Saving of Settings
    241          ///////////////////////////////////////////////////////////////
    242          

   \                                 In segment CODE, align 4, keep-with-next
    243          void PROLevelSwitch::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   4DDF4DE2           SUB      SP,SP,#+308
   \   00000008   0040A0E1           MOV      R4,R0
    244          
    245              if ( IsModified || WriteAll ) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   64029F05           LDREQ    R0,??SaveSettings_2  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   9400000A           BEQ      ??SaveSettings_3
    246                  IsModified = false;
    247                  AnsiString LocalString;
    248                  AnsiString IdNumStr;
    249                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    250                  LocalString += KeyWord(Type) + IdNumStr + CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable15  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   FC008DE2           ADD      R0,SP,#+252
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3094E5           LDR      R3,[R4, #+156]
   \   00000048   ........           LDR      R2,??DataTable16  ;; `?<Constant "0x%0x">`
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   461F8DE2           ADD      R1,SP,#+280
   \   00000054   FC008DE2           ADD      R0,SP,#+252
   \   00000058   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000005C   0820A0E1           MOV      R2,R8
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   460F8DE2           ADD      R0,SP,#+280
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   A01094E5           LDR      R1,[R4, #+160]
   \   00000070   8C008DE2           ADD      R0,SP,#+140
   \   00000074   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000078   FC208DE2           ADD      R2,SP,#+252
   \   0000007C   8C108DE2           ADD      R1,SP,#+140
   \   00000080   70008DE2           ADD      R0,SP,#+112
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   ........           LDR      R0,??DataTable19  ;; ??npos
   \   0000009C   0820A0E1           MOV      R2,R8
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   54108DE2           ADD      R1,SP,#+84
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   54008DE2           ADD      R0,SP,#+84
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0820A0E1           MOV      R2,R8
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   70008DE2           ADD      R0,SP,#+112
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    251                  set<AlarmBasic *>::iterator pBIt;
    252                  for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   000000E4   E49094E5           LDR      R9,[R4, #+228]
   \   000000E8   1A0000EA           B        ??SaveSettings_4
    253                      AlarmBasic *element = *pBIt;
   \                     ??SaveSettings_5:
   \   000000EC   100099E5           LDR      R0,[R9, #+16]
    254                      if ( element && !element->Locked ) LocalString += (AnsiString)element->SaveSettings();
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??SaveSettings_6
   \   000000F8   E810D0E5           LDRB     R1,[R0, #+232]
   \   000000FC   000051E3           CMP      R1,#+0
   \   00000100   1100001A           BNE      ??SaveSettings_6
   \   00000104   0D10A0E1           MOV      R1,SP
   \   00000108   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   0000010C   0D10A0E1           MOV      R1,SP
   \   00000110   38008DE2           ADD      R0,SP,#+56
   \   00000114   ........           _BLF     ??string,??string??rA
   \   00000118   0730A0E1           MOV      R3,R7
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   38108DE2           ADD      R1,SP,#+56
   \   00000124   1C008DE2           ADD      R0,SP,#+28
   \   00000128   ........           _BLF     ??append,??append??rA
   \   0000012C   0820A0E1           MOV      R2,R8
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0820A0E1           MOV      R2,R8
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   0D00A0E1           MOV      R0,SP
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
    255                  }
   \                     ??SaveSettings_6:
   \   0000014C   0900A0E1           MOV      R0,R9
   \   00000150   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000154   0090A0E1           MOV      R9,R0
   \                     ??SaveSettings_4:
   \   00000158   E40084E2           ADD      R0,R4,#+228
   \   0000015C   000059E1           CMP      R9,R0
   \   00000160   E1FFFF1A           BNE      ??SaveSettings_5
    256                  for ( unsigned j = 0; j < AnalogInList.size(); j++ ) {
   \   00000164   4B9FA0E3           MOV      R9,#+300
   \   00000168   120000EA           B        ??SaveSettings_7
    257                      LocalString += AnalogInList[j]->SaveAISettings();
   \                     ??SaveSettings_8:
   \   0000016C   040099E7           LDR      R0,[R9, +R4]
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   00000178   0D10A0E1           MOV      R1,SP
   \   0000017C   0300A0E1           MOV      R0,R3
   \   00000180   A43093E5           LDR      R3,[R3, #+164]
    258                  }
   \   00000184   018088E2           ADD      R8,R8,#+1
   \   00000188   6C3093E5           LDR      R3,[R3, #+108]
   \   0000018C   0FE0A0E1           MOV      LR,PC
   \   00000190   13FF2FE1           BX       R3
   \   00000194   0730A0E1           MOV      R3,R7
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0D10A0E1           MOV      R1,SP
   \   000001A0   1C008DE2           ADD      R0,SP,#+28
   \   000001A4   ........           _BLF     ??append,??append??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   0D00A0E1           MOV      R0,SP
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SaveSettings_7:
   \   000001B8   040089E0           ADD      R0,R9,R4
   \   000001BC   041090E5           LDR      R1,[R0, #+4]
   \   000001C0   000090E5           LDR      R0,[R0, #+0]
   \   000001C4   000041E0           SUB      R0,R1,R0
   \   000001C8   200158E1           CMP      R8,R0, LSR #+2
   \   000001CC   E6FFFF3A           BCC      ??SaveSettings_8
    259                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   000001D0   FA1FA0E3           MOV      R1,#+1000
   \   000001D4   C4008DE2           ADD      R0,SP,#+196
   \   000001D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   C4108DE2           ADD      R1,SP,#+196
   \   000001E4   A8008DE2           ADD      R0,SP,#+168
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0730A0E1           MOV      R3,R7
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   A8108DE2           ADD      R1,SP,#+168
   \   000001F8   1C008DE2           ADD      R0,SP,#+28
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   A8008DE2           ADD      R0,SP,#+168
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   C4008DE2           ADD      R0,SP,#+196
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
    260                  LocalString += CrLfStr;
   \   00000220   0730A0E1           MOV      R3,R7
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0610A0E1           MOV      R1,R6
   \   0000022C   1C008DE2           ADD      R0,SP,#+28
   \   00000230   ........           _BLF     ??append,??append??rA
    261                  SettingsString->AddString(LocalString);
   \   00000234   1C108DE2           ADD      R1,SP,#+28
   \   00000238   E0008DE2           ADD      R0,SP,#+224
   \   0000023C   ........           _BLF     ??string,??string??rA
   \   00000240   E0108DE2           ADD      R1,SP,#+224
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   ........           _BLF     ??AddString,??AddString??rA
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   E0008DE2           ADD      R0,SP,#+224
   \   00000258   ........           _BLF     ??_Tidy,??_Tidy??rA
    262              }
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   FC008DE2           ADD      R0,SP,#+252
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   1C008DE2           ADD      R0,SP,#+28
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
    263          }
   \                     ??SaveSettings_3:
   \   0000027C   4DDF8DE2           ADD      SP,SP,#+308
   \   00000280   ........           B        ?Subroutine26
   \                     ??SaveSettings_2:
   \   00000284   ........           DC32     ??WriteAll
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          bool PROLevelSwitch::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    266              bool NoError = true;
    267              int ErrorLine = 0;
   \   00000004   88939FE5           LDR      R9,??RestoreSettings_1  ;; NewLineStr
   \   00000008   88A39FE5           LDR      R10,??RestoreSettings_1+0x4  ;; `?<Constant "Level switch ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    268              int Key;
    269              do {
    270                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    271                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_3
    272                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   B900000A           BEQ      ??RestoreSettings_4
    273                          RestoreSettingsWarning((AnsiString)"Level switch " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   10208AE2           ADD      R2,R10,#+16
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_5:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   810000EA           B        ??RestoreSettings_4
    274                      }
    275                  } else {
    276                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    277                      switch ( Key ) {
   \   00000158   FA0F56E3           CMP      R6,#+1000
   \   0000015C   EA10A013           MOVNE    R1,#+234
   \   00000160   C01F8113           ORRNE    R1,R1,#0x300
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   FB0F5613           CMPNE    R6,#+1004
   \   0000016C   AF10A013           MOVNE    R1,#+175
   \   00000170   501E8113           ORRNE    R1,R1,#0x500
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   6000000A           BEQ      ??RestoreSettings_6
   \   0000017C   6910A0E3           MOV      R1,#+105
   \   00000180   801E81E3           ORR      R1,R1,#0x800
   \   00000184   010056E1           CMP      R6,R1
   \   00000188   01108112           ADDNE    R1,R1,#+1
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   01108113           ORRNE    R1,R1,#0x1
   \   00000194   01005611           CMPNE    R6,R1
   \   00000198   01108112           ADDNE    R1,R1,#+1
   \   0000019C   01005611           CMPNE    R6,R1
   \   000001A0   870E5613           CMPNE    R6,#+2160
   \   000001A4   05108112           ADDNE    R1,R1,#+5
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   01108112           ADDNE    R1,R1,#+1
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108113           ORRNE    R1,R1,#0x1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   07108112           ADDNE    R1,R1,#+7
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   4F00000A           BEQ      ??RestoreSettings_7
   \   000001C8   1E1081E2           ADD      R1,R1,#+30
   \   000001CC   010056E1           CMP      R6,R1
   \   000001D0   B910A013           MOVNE    R1,#+185
   \   000001D4   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   4700000A           BEQ      ??RestoreSettings_6
    278                      default:
    279                          NoError = false;
    280                          RestoreSettingsWarning((AnsiString)"Level switch " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   000001E0   1C1095E5           LDR      R1,[R5, #+28]
   \   000001E4   0070A0E3           MOV      R7,#+0
   \   000001E8   710F8DE2           ADD      R0,SP,#+452
   \   000001EC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001F0   00B0A0E1           MOV      R11,R0
   \   000001F4   0A10A0E1           MOV      R1,R10
   \   000001F8   6A0F8DE2           ADD      R0,SP,#+424
   \   000001FC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000200   0010A0E1           MOV      R1,R0
   \   00000204   442084E2           ADD      R2,R4,#+68
   \   00000208   630F8DE2           ADD      R0,SP,#+396
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   34208AE2           ADD      R2,R10,#+52
   \   00000214   631F8DE2           ADD      R1,SP,#+396
   \   00000218   5C0F8DE2           ADD      R0,SP,#+368
   \   0000021C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000220   74208DE2           ADD      R2,SP,#+116
   \   00000224   5C1F8DE2           ADD      R1,SP,#+368
   \   00000228   550F8DE2           ADD      R0,SP,#+340
   \   0000022C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000230   44208AE2           ADD      R2,R10,#+68
   \   00000234   551F8DE2           ADD      R1,SP,#+340
   \   00000238   4E0F8DE2           ADD      R0,SP,#+312
   \   0000023C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000240   0B20A0E1           MOV      R2,R11
   \   00000244   4E1F8DE2           ADD      R1,SP,#+312
   \   00000248   470F8DE2           ADD      R0,SP,#+284
   \   0000024C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000250   0920A0E1           MOV      R2,R9
   \   00000254   471F8DE2           ADD      R1,SP,#+284
   \   00000258   400F8DE2           ADD      R0,SP,#+256
   \   0000025C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000260   401F8DE2           ADD      R1,SP,#+256
   \   00000264   E4008DE2           ADD      R0,SP,#+228
   \   00000268   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000026C   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   E4008DE2           ADD      R0,SP,#+228
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0720A0E1           MOV      R2,R7
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   400F8DE2           ADD      R0,SP,#+256
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0720A0E1           MOV      R2,R7
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   470F8DE2           ADD      R0,SP,#+284
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0720A0E1           MOV      R2,R7
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   710F8DE2           ADD      R0,SP,#+452
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B0   0720A0E1           MOV      R2,R7
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   4E0F8DE2           ADD      R0,SP,#+312
   \   000002BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C0   0720A0E1           MOV      R2,R7
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   550F8DE2           ADD      R0,SP,#+340
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   0720A0E1           MOV      R2,R7
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   5C0F8DE2           ADD      R0,SP,#+368
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E0   0720A0E1           MOV      R2,R7
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   630F8DE2           ADD      R0,SP,#+396
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F0   0720A0E1           MOV      R2,R7
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   6A0F8DE2           ADD      R0,SP,#+424
   \   000002FC   89FFFFEA           B        ??RestoreSettings_5
    281                          break;
    282                      case C_AI_END:          // If AI type not found can continue with this
    283                      case C_AL_END:
    284                      case C_CT_END:
    285                      case C_PRO_END:
    286                      case C_PRO_END_COMMON:
    287                      case C_PRO_END_PRO:
    288                          Key = C_PRO_END;
   \                     ??RestoreSettings_6:
   \   00000300   FA6FA0E3           MOV      R6,#+1000
   \   00000304   0B0000EA           B        ??RestoreSettings_4
    289                          break;
    290                      case C_AI_LeSw_ADCard   :
    291                      case C_AI_LeSw_Valcom   :
    292                      case C_AI_LeSw_API      :
    293                      case C_AI_LeSw_Vega     :
    294                      case C_AI_LeSw_Vega62   :
    295                      case C_AI_LeSw_Vega64   :
    296                      case C_AI_LeSw_HS       :
    297                      case C_AI_LeSw_mA       :
    298                      case C_AI_COIL_IN       :
    299                          {
    300                              int AIIDNumber = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_7:
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0D10A0E1           MOV      R1,SP
   \   00000310   0500A0E1           MOV      R0,R5
   \   00000314   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    301                              AnalogInput *AnalogInPtr = (AnalogInput *)FindObject(AIIDNumber);
   \   00000318   ........           _BLF     ??FindObject,??FindObject??rA
   \   0000031C   0020B0E1           MOVS     R2,R0
    302                              if ( AnalogInPtr ) AnalogInPtr->RestoreAISettings(SettingsString);
   \   00000320   0500000A           BEQ      ??RestoreSettings_8
   \   00000324   A42092E5           LDR      R2,[R2, #+164]
   \   00000328   0510A0E1           MOV      R1,R5
   \   0000032C   702092E5           LDR      R2,[R2, #+112]
   \   00000330   0FE0A0E1           MOV      LR,PC
   \   00000334   12FF2FE1           BX       R2
    303                          }
    304                          break;
    305                      }
    306                  }
    307              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??RestoreSettings_4:
   \   00000338   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_8:
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   74008DE2           ADD      R0,SP,#+116
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   000057E3           CMP      R7,#+0
   \   0000034C   00009D15           LDRNE    R0,[SP, #+0]
   \   00000350   08005011           CMPNE    R0,R8
   \   00000354   FA0F5613           CMPNE    R6,#+1000
   \   00000358   32FFFF1A           BNE      ??RestoreSettings_2
    308              if ( Master && NoError ) {
   \   0000035C   38009FE5           LDR      R0,??RestoreSettings_1+0x8  ;; Master
   \   00000360   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000364   000017E1           TST      R7,R0
   \   00000368   0500000A           BEQ      ??RestoreSettings_9
    309                  SendData(CMD_GENERIC_STATIC_DATA);
   \   0000036C   A42094E5           LDR      R2,[R4, #+164]
   \   00000370   6610A0E3           MOV      R1,#+102
   \   00000374   402092E5           LDR      R2,[R2, #+64]
   \   00000378   0400A0E1           MOV      R0,R4
   \   0000037C   0FE0A0E1           MOV      LR,PC
   \   00000380   12FF2FE1           BX       R2
    310              }
    311          
    312              return (NoError);
   \                     ??RestoreSettings_9:
   \   00000384   0700A0E1           MOV      R0,R7
   \   00000388   78DF8DE2           ADD      SP,SP,#+480
   \   0000038C   F04FBDE8           POP      {R4-R11,LR}
   \   00000390   1EFF2FE1           BX       LR               ;; return
   \                     ??RestoreSettings_1:
   \   00000394   ........           DC32     NewLineStr
   \   00000398   ........           DC32     `?<Constant "Level switch ">`
   \   0000039C   ........           DC32     Master
    313          }
    314          
    315          
    316          
    317          //
    318          // Routines for the librarian
    319          //
    320          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    321          int PROLevelSwitch::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    322              int PROStatus1 = ST_OK;
    323              int PROStatus2 = ST_OK;
    324              if ( HWFailure ) {
   \   0000000C   3C00D4E5           LDRB     R0,[R4, #+60]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   3D70A0E3           MOV      R7,#+61
   \   00000018   F07E87E3           ORR      R7,R7,#0xF00
   \   0000001C   0760A0E1           MOV      R6,R7
   \   00000020   048086E2           ADD      R8,R6,#+4
   \   00000024   000050E3           CMP      R0,#+0
    325                  PROStatus1 = ST_ERROR;
   \   00000028   0860A011           MOVNE    R6,R8
   \   0000002C   2200001A           BNE      ??FindPROStatus_1
    326              }
    327              if ( PROStatus1 != ST_ERROR ) {
    328                  switch ( State ) {
   \   00000030   4801D4E5           LDRB     R0,[R4, #+328]
    329                  case tSeaGoing      :
    330                  case tTankCleaning  :
    331                      PROStatus1 = ST_WARNING;
    332                      break;
    333                  default:
    334                      break;
    335                  }
    336              }
    337              if ( PROStatus1 != ST_ERROR ) {
    338                  if ( LevelSwitchSensor ) {
   \   00000034   602194E5           LDR      R2,[R4, #+352]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   03005012           SUBSNE   R0,R0,#+3
   \   00000040   02608603           ORREQ    R6,R6,#0x2
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   0A00000A           BEQ      ??FindPROStatus_2
    339                      PROStatus2 = LevelSwitchSensor->FindPROStatus(MyString);
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   A42092E5           LDR      R2,[R2, #+164]
   \   00000054   1C2092E5           LDR      R2,[R2, #+28]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   12FF2FE1           BX       R2
   \   00000060   0070A0E1           MOV      R7,R0
    340                      if ( PROStatus2 > PROStatus1 ) {
   \   00000064   070056E1           CMP      R6,R7
   \   00000068   020000AA           BGE      ??FindPROStatus_2
    341                          PROStatus1 = PROStatus2;
   \   0000006C   0760A0E1           MOV      R6,R7
    342                      }
    343                  }
    344              }
    345              if ( PROStatus1 != ST_ERROR ) {
   \   00000070   080056E1           CMP      R6,R8
   \   00000074   1000000A           BEQ      ??FindPROStatus_1
    346                  bool AlActive = false;
    347                  set<AlarmBasic *>::iterator pBIt;
    348                  for ( pBIt = AlarmSet.begin(); !AlActive && pBIt != AlarmSet.end(); pBIt++ ) {
   \                     ??FindPROStatus_2:
   \   00000078   E40094E5           LDR      R0,[R4, #+228]
   \   0000007C   0080A0E3           MOV      R8,#+0
   \                     ??FindPROStatus_3:
   \   00000080   E41084E2           ADD      R1,R4,#+228
   \   00000084   010050E1           CMP      R0,R1
   \   00000088   0700000A           BEQ      ??FindPROStatus_4
    349                      AlarmBasic *Element = *pBIt;
   \   0000008C   101090E5           LDR      R1,[R0, #+16]
    350                      if ( Element && (Element->State != AlarmBasic::AlIdle) ) AlActive = true;
   \   00000090   000051E3           CMP      R1,#+0
   \   00000094   E010D115           LDRBNE   R1,[R1, #+224]
   \   00000098   00005113           CMPNE    R1,#+0
   \   0000009C   0180A013           MOVNE    R8,#+1
    351                  }
   \   000000A0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000A4   000058E3           CMP      R8,#+0
   \   000000A8   F4FFFF0A           BEQ      ??FindPROStatus_3
    352                  if ( AlActive ) {
   \                     ??FindPROStatus_4:
   \   000000AC   000058E3           CMP      R8,#+0
    353                      PROStatus2 = ST_ALARM;
   \   000000B0   F47EA013           MOVNE    R7,#+3904
    354                  }
    355                  if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
   \   000000B4   070056E1           CMP      R6,R7
   \   000000B8   0760A0B1           MOVLT    R6,R7
    356              }
    357              MyString = FindStatusChar(PROStatus1);
   \                     ??FindPROStatus_1:
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   000000CC   ........           LDR      R0,??DataTable19  ;; ??npos
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   003090E5           LDR      R3,[R0, #+0]
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           _BLF     ??assign,??assign??rA
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   0D00A0E1           MOV      R0,SP
   \   000000F0   ........           _BLF     ??_Tidy,??_Tidy??rA
    358              return (PROStatus1);
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   1CD08DE2           ADD      SP,SP,#+28
   \   000000FC   ........           B        ?Subroutine27
    359          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    360          

   \                                 In segment CODE, align 4, keep-with-next
    361          int  PROLevelSwitch::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   14409DE5           LDR      R4,[SP, #+20]
   \   00000008   18509DE5           LDR      R5,[SP, #+24]
   \   0000000C   00C0A0E1           MOV      R12,R0
    362              int Status = GETVAL_NO_ERR;
   \   00000010   0000A0E3           MOV      R0,#+0
    363          	switch ( ValueId ) {
   \   00000014   8D70A0E3           MOV      R7,#+141
   \   00000018   407E87E3           ORR      R7,R7,#0x400
   \   0000001C   070051E1           CMP      R1,R7
    364              case SVT_LEVEL_SWITCH_STATUS    :
    365                  {
    366                      MyRetValue = (float)Status;
   \   00000020   0010A003           MOVEQ    R1,#+0
   \   00000024   00108305           STREQ    R1,[R3, #+0]
    367                      DecPnt = 0;
   \   00000028   00108405           STREQ    R1,[R4, #+0]
    368                      Unit   = NO_UNIT;
   \   0000002C   00108505           STREQ    R1,[R5, #+0]
   \   00000030   0400000A           BEQ      ??GetValue_2
    369                  }
    370                  break;
    371              default:
    372                  Status = PROXRefObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \   00000034   20002DE9           PUSH     {R5}
   \   00000038   10002DE9           PUSH     {R4}
   \   0000003C   0C00A0E1           MOV      R0,R12
   \   00000040   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000044   08D08DE2           ADD      SP,SP,#+8
    373                  break;
    374              }
    375              return (Status);
   \                     ??GetValue_2:
   \   00000048   F040BDE8           POP      {R4-R7,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    376          }
    377          

   \                                 In segment CODE, align 4, keep-with-next
    378          int PROLevelSwitch::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    379              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    380              switch ( ValueId ) {
   \   00000010   8D30A0E3           MOV      R3,#+141
   \   00000014   403E83E3           ORR      R3,R3,#0x400
   \   00000018   030051E1           CMP      R1,R3
   \   0000001C   0300000A           BEQ      ??GetStringValue_2
   \   00000020   8C3083E2           ADD      R3,R3,#+140
   \   00000024   030051E1           CMP      R1,R3
   \   00000028   1100000A           BEQ      ??GetStringValue_3
   \   0000002C   160000EA           B        ??GetStringValue_4
    381              case SVT_LEVEL_SWITCH_STATUS:
    382          		MyString = LibGetValue(SVT_AL_STATE, LevelSwitchAlPtr);
   \                     ??GetStringValue_2:
   \   00000030   642190E5           LDR      R2,[R0, #+356]
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   4310A0E3           MOV      R1,#+67
   \   0000003C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000048   ........           LDR      R0,??DataTable19  ;; ??npos
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   003090E5           LDR      R3,[R0, #+0]
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??assign,??assign??rA
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   080000EA           B        ??GetStringValue_5
    383                  break;
    384              case SVT_PRO_STATUS:
    385          		FindPROStatus(MyString);
   \                     ??GetStringValue_3:
   \   00000074   A42090E5           LDR      R2,[R0, #+164]
   \   00000078   0410A0E1           MOV      R1,R4
   \   0000007C   1C2092E5           LDR      R2,[R2, #+28]
   \   00000080   0FE0A0E1           MOV      LR,PC
   \   00000084   12FF2FE1           BX       R2
   \   00000088   020000EA           B        ??GetStringValue_5
    386                  break;
    387              default:
    388                  Status = PROXRefObject::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_4:
   \   0000008C   0430A0E1           MOV      R3,R4
   \   00000090   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000094   0050A0E1           MOV      R5,R0
    389                  break;
    390              }
    391              return (Status);
   \                     ??GetStringValue_5:
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   1CD08DE2           ADD      SP,SP,#+28
   \   000000A0                      REQUIRE ?Subroutine24
   \   000000A0                      ;; // Fall through to label ?Subroutine24
    392          }
    393          

   \                                 In segment CODE, align 4, keep-with-next
    394          int PROLevelSwitch::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3870DDE5           LDRB     R7,[SP, #+56]
   \   0000000C   3C809DE5           LDR      R8,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    395              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
    396              //switch ( ValueId ) {
    397              //  default:
    398              Status = PROXRefObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   ........           _BLF     ??string,??string??rA
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   80002DE9           PUSH     {R7}
   \   0000003C   0C308DE2           ADD      R3,SP,#+12
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000050   0050A0E1           MOV      R5,R0
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   0C008DE2           ADD      R0,SP,#+12
   \   00000060   ........           _BLF     ??_Tidy,??_Tidy??rA
    399              //      break;
    400              //}
    401              if ( Status == E_NO_ERR ) {
   \   00000064   000055E3           CMP      R5,#+0
   \   00000068   08D08DE2           ADD      SP,SP,#+8
   \   0000006C   0400001A           BNE      ??PutValue_2
    402                  SetModifiedFlag();
   \   00000070   A41094E5           LDR      R1,[R4, #+164]
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   541091E5           LDR      R1,[R1, #+84]
   \   0000007C   0FE0A0E1           MOV      LR,PC
   \   00000080   11FF2FE1           BX       R1
    403              }
    404              if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000084   000058E3           CMP      R8,#+0
    405                  *UnitId = ValUnitId;
   \   00000088   00009D15           LDRNE    R0,[SP, #+0]
   \   0000008C   00008815           STRNE    R0,[R8, #+0]
    406              }
    407              return (Status);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   20D08DE2           ADD      SP,SP,#+32
   \   00000098                      REQUIRE ?Subroutine27
   \   00000098                      ;; // Fall through to label ?Subroutine27
    408          }
    409          

   \                                 In segment CODE, align 4, keep-with-next
    410          int PROLevelSwitch::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    411              int Status = E_NO_ERR;
   \   00000008   0050A0E3           MOV      R5,#+0
    412              switch ( ValueId ) {
   \   0000000C   8D30A0E3           MOV      R3,#+141
   \   00000010   403E83E3           ORR      R3,R3,#0x400
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   0C00001A           BNE      ??PutFloatValue_2
    413              case SVT_LEVEL_SWITCH_STATUS:
    414                  LevelSwitchSensor->SetNewStatus(bool(NewValue));
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0210A0E1           MOV      R1,R2
   \   00000024   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000028   602194E5           LDR      R2,[R4, #+352]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0200A0E1           MOV      R0,R2
   \   00000034   A42092E5           LDR      R2,[R2, #+164]
   \   00000038   0110A013           MOVNE    R1,#+1
   \   0000003C   7C2092E5           LDR      R2,[R2, #+124]
   \   00000040   0010A003           MOVEQ    R1,#+0
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
   \   0000004C   010000EA           B        ??PutFloatValue_3
    415                  break;
    416              default:
    417                  Status = PRogramObject::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_2:
   \   00000050   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
    418                  break;
    419              }
    420              return (Status);
   \                     ??PutFloatValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           B        ?Subroutine24
    421          
    422          }
    423          

   \                                 In segment CODE, align 4, keep-with-next
    424          void PROLevelSwitch::Calculate(void) {
   \                     ??Calculate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    425              HWFailure = false;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3C00C4E5           STRB     R0,[R4, #+60]
    426              if ( LevelSwitchSensor ) {
   \   00000010   601194E5           LDR      R1,[R4, #+352]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   3500000A           BEQ      ??Calculate_2
    427                  float LSSwitchresult = LevelSwitchSensor->Calculate();
   \   0000001C   0100A0E1           MOV      R0,R1
   \   00000020   A41091E5           LDR      R1,[R1, #+164]
   \   00000024   601091E5           LDR      R1,[R1, #+96]
   \   00000028   0FE0A0E1           MOV      LR,PC
   \   0000002C   11FF2FE1           BX       R1
    428                  int LSwitchStatus  = int(LSSwitchresult);
   \   00000030   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000034   0060A0E1           MOV      R6,R0
    429          
    430                  IsFailure = LevelSwitchSensor->Failure;
   \   00000038   600194E5           LDR      R0,[R4, #+352]
    431                  switch ( LevelSwitchSensor->Type ) {
   \   0000003C   8520A0E3           MOV      R2,#+133
   \   00000040   3811D0E5           LDRB     R1,[R0, #+312]
   \   00000044   802E82E3           ORR      R2,R2,#0x800
   \   00000048   000051E3           CMP      R1,#+0
   \   0000004C   0110A013           MOVNE    R1,#+1
   \   00000050   5D11C4E5           STRB     R1,[R4, #+349]
   \   00000054   A01090E5           LDR      R1,[R0, #+160]
   \   00000058   020051E1           CMP      R1,R2
   \   0000005C   0900001A           BNE      ??Calculate_3
    432                  case C_AI_WATERINGRESS:
    433                      if ( HWFailure || LevelSwitchSensor->HasActiveAlarms() ) {
   \   00000060   3C10D4E5           LDRB     R1,[R4, #+60]
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   1500001A           BNE      ??Calculate_4
   \   0000006C   ........           _BLF     ??HasActiveAlarms,??HasActiveAlarms??rA
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   1200001A           BNE      ??Calculate_4
    434                          LSwitchStatus = LEVELSWITCH_HW_ERROR;
    435                      } else if ( LSwitchStatus & 0x10 ) {
    436                          LSwitchStatus = LEVELSWITCH_ON;
    437                      } else {
    438                          LSwitchStatus = LEVELSWITCH_OFF;
   \   00000078   100016E3           TST      R6,#0x10
   \   0000007C   0060A003           MOVEQ    R6,#+0
   \   00000080   0160A013           MOVNE    R6,#+1
   \   00000084   020000EA           B        ??Calculate_5
    439                      }
    440                      break;
    441                  case C_AI_LeSw_ADCard   :
    442                  case C_AI_LeSw_Valcom   :
    443                  case C_AI_LeSw_API      :
    444                  case C_AI_LeSw_Vega     :
    445                  case C_AI_LeSw_Vega62   :
    446                  case C_AI_LeSw_Vega64   :
    447                  case C_AI_COIL_IN       :
    448                  default:
    449                      if ( HWFailure ) {
   \                     ??Calculate_3:
   \   00000088   3C00D4E5           LDRB     R0,[R4, #+60]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0B00001A           BNE      ??Calculate_4
    450                          LSwitchStatus = LEVELSWITCH_HW_ERROR;
    451                      }
    452                      break;
    453                  }
    454                  switch ( LSwitchStatus ) {
   \                     ??Calculate_5:
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   050056E3           CMP      R6,#+5
   \   0000009C   1100008A           BHI      ??Calculate_6
   \   000000A0   011F8FE2           ADR      R1,??Calculate_1
   \   000000A4   0610D1E7           LDRB     R1,[R1, R6]
   \   000000A8   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??Calculate_1:
   \   000000AC   01020E05           DC8      +1,+2,+14,+5
   \   000000B0   03030000           DC8      +3,+3,+0,+0
    455                  case LEVELSWITCH_ON    :
    456                      IsActive       = true;
    457                      IsFailure      = false;
    458                      break;
    459                  case LEVELSWITCH_OFF   :
    460                      IsActive       = false;
   \                     ??Calculate_7:
   \   000000B4   0000A0E3           MOV      R0,#+0
   \                     ??Calculate_8:
   \   000000B8   5C01C4E5           STRB     R0,[R4, #+348]
    461                  case LEVELSWITCH_TEST  : // Don't touch the IsActive flag
    462                  case LEVELSWITCH_LIGHT : // Don't touch the IsActive flag
    463                      IsFailure      = false;
   \                     ??Calculate_9:
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   0A0000EA           B        ??Calculate_10
    464                      break;
    465                  case LEVELSWITCH_HW_ERROR:
    466                      IsActive       = false;
   \                     ??Calculate_4:
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   5C01C4E5           STRB     R0,[R4, #+348]
    467                      IsFailure      = false;
   \   000000CC   5D01C4E5           STRB     R0,[R4, #+349]
    468                      AcknowledgeAlarms(AlarmSet);
   \   000000D0   E40084E2           ADD      R0,R4,#+228
   \   000000D4   ........           _BLF     ??AcknowledgeAlarms,??AcknowledgeAlarms??rA
    469                      AcknowledgeSoftAlarms(LevelSwitchSensor->AlarmSet);
   \   000000D8   600194E5           LDR      R0,[R4, #+352]
   \   000000DC   C00080E2           ADD      R0,R0,#+192
   \   000000E0   ........           _BLF     ??AcknowledgeSoftAlarms,??AcknowledgeSoftAlarms??rA
   \   000000E4   020000EA           B        ??Calculate_2
    470                      break;
    471                  case LEVELSWITCH_ERROR :
    472                  default:
    473                      IsActive       = false;
   \                     ??Calculate_6:
   \   000000E8   0010A0E3           MOV      R1,#+0
   \   000000EC   5C11C4E5           STRB     R1,[R4, #+348]
    474                      IsFailure      = true;
   \                     ??Calculate_10:
   \   000000F0   5D01C4E5           STRB     R0,[R4, #+349]
    475                      break;
    476          
    477                  }
    478              }
    479              SendData();
   \                     ??Calculate_2:
   \   000000F4   A42094E5           LDR      R2,[R4, #+164]
   \   000000F8   6510A0E3           MOV      R1,#+101
   \   000000FC   402092E5           LDR      R2,[R2, #+64]
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   0FE0A0E1           MOV      LR,PC
   \   00000108   12FF2FE1           BX       R2
    480          }
   \   0000010C                      REQUIRE ?Subroutine25
   \   0000010C                      ;; // Fall through to label ?Subroutine25
    481          
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          void PROLevelSwitch::SimCalculate(void) {
   \                     ??SimCalculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    484              // Simulate a level
    485              HWFailure = false;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3C00C4E5           STRB     R0,[R4, #+60]
    486              IsActive = (rand() % 10 == 2);
   \   00000010   ........           _BLF     rand,??rand??rA
   \   00000014   0A10A0E3           MOV      R1,#+10
   \   00000018   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   0100A003           MOVEQ    R0,#+1
   \   00000024   0000A013           MOVNE    R0,#+0
   \   00000028   5C01C4E5           STRB     R0,[R4, #+348]
    487          }
   \   0000002C                      REQUIRE ?Subroutine23
   \   0000002C                      ;; // Fall through to label ?Subroutine23

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine23:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    488          

   \                                 In segment CODE, align 4, keep-with-next
    489          int PROLevelSwitch::ReceiveData(U8 *data) {
    490              int ErrorStatus = E_OK;
    491              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    492              switch ( pCH->CommandNo ) {
   \                     ??ReceiveData:
   \   00000000   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000004   0030D1E5           LDRB     R3,[R1, #+0]
   \   00000008   022483E1           ORR      R2,R3,R2, LSL #+8
   \   0000000C   650052E3           CMP      R2,#+101
   \   00000010   0800001A           BNE      ??ReceiveData_1
    493              case CMD_GENERIC_REALTIME_DATA:
    494                  {
    495                      ANPRO10_COMMAND_2120  *pData = (ANPRO10_COMMAND_2120 *)data;
    496                      IsActive       = pData->IsActive;
   \   00000014   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000018   5C21C0E5           STRB     R2,[R0, #+348]
    497                      IsFailure      = pData->IsFailure;
   \   0000001C   0920D1E5           LDRB     R2,[R1, #+9]
   \   00000020   5D21C0E5           STRB     R2,[R0, #+349]
    498                      IsNewData      = pData->IsNewData;
   \   00000024   0B20D1E5           LDRB     R2,[R1, #+11]
   \   00000028   E020C0E5           STRB     R2,[R0, #+224]
    499                      State          = (TankState)pData->State;
   \   0000002C   0C10D1E5           LDRB     R1,[R1, #+12]
   \   00000030   4811C0E5           STRB     R1,[R0, #+328]
    500                      ErrorStatus    = E_OK;
   \   00000034   ........           B        ?Subroutine28
    501                  }
    502                  break;
    503              default:
    504                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_1:
   \   00000038   0100A0E3           MOV      R0,#+1
    505                  break;
    506              }
    507              return (ErrorStatus);
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    508          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR
    509          

   \                                 In segment CODE, align 4, keep-with-next
    510          int PROLevelSwitch::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    511              int ErrorStatus = E_OK;
    512              switch ( cmd ) {
   \   00000008   650051E3           CMP      R1,#+101
   \   0000000C   2100001A           BNE      ??SendData_1
    513              case CMD_GENERIC_REALTIME_DATA:
    514                  {
    515                      QueueANPRO10_COMMAND_2120 Cmd;
    516                      Cmd.TxInfo.Port         = NULL;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    517                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   0420CDE5           STRB     R2,[SP, #+4]
    518                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   00000020   0E20A0E3           MOV      R2,#+14
   \   00000024   0520CDE5           STRB     R2,[SP, #+5]
    519                      Cmd.Data.ObjectId       = IDNumber;
   \   00000028   9C1090E5           LDR      R1,[R0, #+156]
    520                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000002C   0920A0E3           MOV      R2,#+9
   \   00000030   0A10CDE5           STRB     R1,[SP, #+10]
   \   00000034   2114A0E1           LSR      R1,R1,#+8
   \   00000038   0B10CDE5           STRB     R1,[SP, #+11]
   \   0000003C   2114A0E1           LSR      R1,R1,#+8
   \   00000040   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000044   2114A0E1           LSR      R1,R1,#+8
   \   00000048   0D10CDE5           STRB     R1,[SP, #+13]
   \   0000004C   B820CDE1           STRH     R2,[SP, #+8]
    521                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000050   6520A0E3           MOV      R2,#+101
   \   00000054   B620CDE1           STRH     R2,[SP, #+6]
    522                      Cmd.Data.HWFailure      = HWFailure;
   \   00000058   3C20D0E5           LDRB     R2,[R0, #+60]
   \   0000005C   1020CDE5           STRB     R2,[SP, #+16]
    523                      Cmd.Data.IsNewData      = IsNewData;
   \   00000060   E020D0E5           LDRB     R2,[R0, #+224]
   \   00000064   1120CDE5           STRB     R2,[SP, #+17]
    524                      Cmd.Data.IsActive       = IsActive;
   \   00000068   5C21D0E5           LDRB     R2,[R0, #+348]
   \   0000006C   0E20CDE5           STRB     R2,[SP, #+14]
    525                      Cmd.Data.IsFailure      = IsFailure;
   \   00000070   5D21D0E5           LDRB     R2,[R0, #+349]
   \   00000074   0F20CDE5           STRB     R2,[SP, #+15]
    526                      Cmd.Data.State          = State;
   \   00000078   4801D0E5           LDRB     R0,[R0, #+328]
   \   0000007C   1200CDE5           STRB     R0,[SP, #+18]
    527          
    528                      bool sent = ANPRO10SendNormal(&Cmd);
    529                      if ( !sent ) ErrorStatus = E_QUEUE_FULL;
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0000A013           MOVNE    R0,#+0
   \   00000090   0300A003           MOVEQ    R0,#+3
   \   00000094   000000EA           B        ??SendData_2
    530                      else ErrorStatus =  E_OK;
    531                  }
    532                  break;
    533              default:
    534                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_1:
   \   00000098   0100A0E3           MOV      R0,#+1
    535                  break;
    536              }
    537              return (ErrorStatus);
   \                     ??SendData_2:
   \   0000009C   14D08DE2           ADD      SP,SP,#+20
   \   000000A0                      REQUIRE ?Subroutine22
   \   000000A0                      ;; // Fall through to label ?Subroutine22
    538          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    539          

   \                                 In segment CODE, align 4, keep-with-next
    540          void PROLevelSwitch::SetState(TankState newState) {
   \                     ??SetState:
   \   00000000   37002DE9           PUSH     {R0-R2,R4,R5}
    541              switch ( newState ) {
   \   00000004   522FA0E3           MOV      R2,#+328
   \   00000008   040051E3           CMP      R1,#+4
    542              case tSeaGoing      :
    543              case tLoad          :
    544              case tDischarge     :
    545              case tTankCleaning  :
    546              case tUndefined     :
    547                  State = newState;
   \   0000000C   0010C297           STRBLS   R1,[R2, +R0]
    548                  break;
    549              default:
    550                  break;
    551              }
    552              if ( !ExcludeState ) {
   \   00000010   4911D0E5           LDRB     R1,[R0, #+329]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0D00001A           BNE      ??SetState_1
    553                  const AlarmBasic::StateAlarmTable AlarmSet[] = {     //tSeaGoing  ,tLoad     , tDischarge, tTankCleaning, tUndefined
    554                      { (AlarmBasic *)LevelSwitchAlPtr, { EnableFalse, EnableTrue, EnableTrue, EnableFalse } },
    555                  };
   \   0000001C   38309FE5           LDR      R3,??SetState_2  ;; `?<Constant {{(AlarmBasic *)0, {EnableFalse, En`
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   301093E8           LDM      R3,{R4,R5,R12}
   \   00000028   301081E8           STM      R1,{R4,R5,R12}
   \   0000002C   643190E5           LDR      R3,[R0, #+356]
   \   00000030   00308DE5           STR      R3,[SP, #+0]
    556                  for ( unsigned i = 0; i < NELEMENTS(AlarmSet); i++ ) {
    557                      AlarmBasic *AlPtr = AlarmSet[i].AlarmPtr;
    558                      if ( AlPtr ) {
   \   00000034   000053E3           CMP      R3,#+0
   \   00000038   0500000A           BEQ      ??SetState_1
    559                          AlarmSet[i].AlarmPtr->Enable = AlarmSet[i].Enable[State];
   \   0000003C   0000D2E7           LDRB     R0,[R2, +R0]
   \   00000040   010080E0           ADD      R0,R0,R1
   \   00000044   0400D0E5           LDRB     R0,[R0, #+4]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100A013           MOVNE    R0,#+1
   \   00000050   E200C3E5           STRB     R0,[R3, #+226]
    560                      }
    561                  }
    562              }
    563          }
   \                     ??SetState_1:
   \   00000054   3700BDE8           POP      {R0-R2,R4,R5}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??SetState_2:
   \   0000005C   ........           DC32     `?<Constant {{(AlarmBasic *)0, {EnableFalse, En`
    564          

   \                                 In segment CODE, align 4, keep-with-next
    565          int PROLevelSwitch::WriteXML(char *StrBuf, bool IncAlarms) {
    566          #ifdef ANWIN
    567              //return 0;
    568              AnsiString UnitStr;
    569              AnsiString PressureStr = LibGetValue(SVT_PRESSURE, this, 0, &UnitStr) + SpaceStr + UnitStr;
    570              // Alarm status and text
    571              //
    572              AnsiString AlMessageStr = "No alarm";
    573              int LEDStatus = TPC_LED_OFF;
    574              if ( !CompleteAlarmInfoList.empty() ) {
    575                  bool ActiveAlarm = false;
    576                  time_t NewestAlarmAct = 0;
    577                  time_t NewestAlarmAck = 0;
    578                  set<AlarmBasic *>::iterator pBIt;
    579                  for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
    580                      AlarmBasic *Element = *pBIt;
    581                      if ( Element ) {
    582                          switch ( Element->State ) {
    583                          case AlarmBasic::AlIdle :
    584                              break;
    585                          case AlarmBasic::AlActive :
    586                              if ( Element->Time_Rised > NewestAlarmAct ) {
    587                                  NewestAlarmAct = Element->Time_Rised;
    588                                  ActiveAlarm = true;
    589                                  AlMessageStr = Element->Get_TPCMessage();
    590                                  LEDStatus = TPC_LED_FLASH;
    591                              }
    592                              break;
    593                          case AlarmBasic::AlAknowledged :
    594                              if ( !ActiveAlarm && (Element->Time_Acknowledged > NewestAlarmAck) ) {
    595                                  NewestAlarmAck = Element->Time_Acknowledged;
    596                                  AlMessageStr = Element->Get_TPCMessage();
    597                                  LEDStatus = TPC_LED_ON;
    598                              }
    599                              break;
    600                          }
    601                      }
    602                  }
    603              }
    604          
    605              int  tmpPtr = sprintf(StrBuf, "\t<Packet>\r\n");
    606              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<PacketID>Freevalue</PacketID>\r\n");
    607              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<TagID>%s</TagID>\r\n", TagName.c_str());
    608              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Value>%i</Value>\r\n", LEDStatus);
    609              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Alarm>%s</Alarm>\r\n", AlMessageStr);
    610              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t</Packet>\r\n");
    611              return tmpPtr;
    612          #else
    613              return 0;
   \                     ??WriteXML:
   \   00000000                      REQUIRE ?Subroutine28
   \   00000000                      ;; // Fall through to label ?Subroutine28

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Level Switch ">`:
   \   00000000   4C6576656C20       DC8 "Level Switch "
   \              537769746368
   \              2000        
   \   0000000E   0000               DC8 0, 0
   \   00000010   4C6576537769       DC8 "LevSwitch"
   \              74636800    
   \   0000001A   0000               DC8 0, 0
   \   0000001C   576174657244       DC8 "WaterDetect"
   \              657465637400
   \   00000028   416C61726D00       DC8 "Alarm"
   \   0000002E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Level switch ">`:
   \   00000000   4C6576656C20       DC8 "Level switch "
   \              737769746368
   \              2000        
   \   0000000E   0000               DC8 0, 0
   \   00000010   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   00000043   00                 DC8 0
   \   00000044   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000061   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{(AlarmBasic *)0, {EnableFalse, En`:
   \   00000000   00000000           DC32 0H
   \   00000004   000101000000       DC8 0, 1, 1, 0, 0, 0, 0, 0
   \              0000        

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable6  ;; ??ObjectSet
   \   00000008   54609FE5           LDR      R6,??__sti__routine_1  ;; ?_0
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   185084E5           STR      R5,[R4, #+24]
   \   00000014   1C5084E5           STR      R5,[R4, #+28]
   \   00000018   205084E5           STR      R5,[R4, #+32]
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000024   245084E5           STR      R5,[R4, #+36]
   \   00000028   285084E5           STR      R5,[R4, #+40]
   \   0000002C   2C5084E5           STR      R5,[R4, #+44]
   \   00000030   0C0086E2           ADD      R0,R6,#+12
   \   00000034   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000004C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000050   1400C4E5           STRB     R0,[R4, #+20]
   \   00000054   180086E2           ADD      R0,R6,#+24
   \   00000058   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000005C   7140BDE8           POP      {R0,R4-R6,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000064   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROLevelSwitch &PROLevelSwitch::new PROLevelSwitch()
   \                     `??new PROLevelSwitch`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5E0FA0E3           MOV      R0,#+376
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new PROLevelSwitch_2`
   \   00000014   ........           BL       ??PROLevelSwitch
   \                     `??new PROLevelSwitch_2`:
   \   00000018   ........           B        ?Subroutine22

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROLevelSwitch &PROLevelSwitch::new PROLevelSwitch(int)
   \                     `??new PROLevelSwitch_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   5E0FA0E3           MOV      R0,#+376
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new PROLevelSwitch_3`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??PROLevelSwitch_1
   \                     `??new PROLevelSwitch_3`:
   \   00000020   ........           B        ?Subroutine23

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??npos
    614          #endif
    615          }
    616          
    617          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROLevelSwitch::Calculate()       16
     PROLevelSwitch::FindPROStatus(AnsiString &)
                                       52
     PROLevelSwitch::GetStringValue(int, int, AnsiString &)
                                       40
     PROLevelSwitch::GetValue(int, int, float &, int &, int &)
                                       28
     PROLevelSwitch::Initiate()        12
     PROLevelSwitch::LoadConfigFromFile(TSNConfigString &)
                                      552
     PROLevelSwitch::PROLevelSwitch()
                                       20
     PROLevelSwitch::PROLevelSwitch(int)
                                       24
     PROLevelSwitch::PutFloatValue(int, float)
                                       12
     PROLevelSwitch::PutValue(int, int, AnsiString, bool, int *)
                                       64
     PROLevelSwitch::ReceiveData(unsigned char *)
                                        0
     PROLevelSwitch::RestoreSettings(TSNConfigString *)
                                      516
     PROLevelSwitch::SaveSettings(TSNConfigString *)
                                      336
     PROLevelSwitch::SendData(unsigned short)
                                       24
     PROLevelSwitch::SetState(TankState)
                                       20
     PROLevelSwitch::SimCalculate()     8
     PROLevelSwitch::WriteConfigToFile(TSNConfigString &)
                                      952
     PROLevelSwitch::WriteXML(char *, bool)
                                        0
     PROLevelSwitch::new PROLevelSwitch()
                                        4
     PROLevelSwitch::new PROLevelSwitch(int)
                                        8
     PROLevelSwitch::~PROLevelSwitch()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     __sti__routine()                  20
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      36
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     ?_0                              36
     PROLevelSwitch::ObjectSet        48
     PROLevelSwitch::Adjustable        1
     PROLevelSwitch::PROLevelSwitch()
                                     104
     PROLevelSwitch::PROLevelSwitch(int)
                                     124
     PROLevelSwitch::Initiate()       76
     ?Subroutine24                     8
     PROLevelSwitch::~PROLevelSwitch()
                                     108
     ?Subroutine25                     8
     PROLevelSwitch::WriteConfigToFile(TSNConfigString &)
                                    1416
     ?Subroutine26                    72
     PROLevelSwitch::LoadConfigFromFile(TSNConfigString &)
                                    2076
     PROLevelSwitch::SaveSettings(TSNConfigString *)
                                     648
     PROLevelSwitch::RestoreSettings(TSNConfigString *)
                                     928
     PROLevelSwitch::FindPROStatus(AnsiString &)
                                     256
     ?Subroutine27                     8
     PROLevelSwitch::GetValue(int, int, float &, int &, int &)
                                      80
     PROLevelSwitch::GetStringValue(int, int, AnsiString &)
                                     160
     PROLevelSwitch::PutValue(int, int, AnsiString, bool, int *)
                                     152
     PROLevelSwitch::PutFloatValue(int, float)
                                      96
     PROLevelSwitch::Calculate()     268
     PROLevelSwitch::SimCalculate()   44
     ?Subroutine23                     8
     PROLevelSwitch::ReceiveData(unsigned char *)
                                      64
     ?Subroutine28                     8
     PROLevelSwitch::SendData(unsigned short)
                                     160
     ?Subroutine22                     8
     PROLevelSwitch::SetState(TankState)
                                      96
     PROLevelSwitch::WriteXML(char *, bool)
                                       0
     ?<Constant "0x%0x">               8
     ?<Constant "Level Switch ">      48
     ?<Constant "Level switch ">     100
     ?<Constant {{(AlarmBasic *)0, {EnableFalse, En
                                      12
     __sti__routine()                104
     PROLevelSwitch::new PROLevelSwitch()
                                      28
     PROLevelSwitch::new PROLevelSwitch(int)
                                      36
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable19                     4
      Others                        1332

 
 12 024 bytes in segment CODE
    352 bytes in segment DATA_C
     61 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 7 180 bytes of CODE  memory (+ 4 860 bytes shared)
   352 bytes of CONST memory
    61 bytes of DATA  memory

Errors: none
Warnings: none
