##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:33 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\CloseWindowTimer.cpp               #
#    Command line    =  D:\S2Prog\TXU\src\CloseWindowTimer.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\CloseWindowTimer.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\CloseWindowTimer.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\CloseWindowTimer.cpp
      1          
      2          #ifdef S2TXU
      3              #include "rtos.h"
      4              #include "stdafx.h"
      5          #endif
      6          #include "CloseWindowTimer.h"
      7          #ifdef S2TXU
      8          extern OS_MAILBOX CloseWinTimerBuf;
      9          #endif

   \                                 In segment CODE, align 4, keep-with-next
     10          CloseWindowTimer::CloseWindowTimer(void)
   \                     ??CloseWindowTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     11          {
   \   00000008   ........           _BLF     ??TSNTimer,??TSNTimer??rA
   \   0000000C   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000010   1C0084E5           STR      R0,[R4, #+28]
     12          }
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     13          CloseWindowTimer::CloseWindowTimer(GUI_HWIN WinHandl, volatile bool *Closed)
   \                     ??CloseWindowTimer_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     14          {
   \   00000010   ........           _BLF     ??TSNTimer,??TSNTimer??rA
   \   00000014   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000018   1C0084E5           STR      R0,[R4, #+28]
     15              m_WinHandl = WinHandl;
   \   0000001C   B252C4E1           STRH     R5,[R4, #+34]
     16              m_Closed = Closed;
   \   00000020   246084E5           STR      R6,[R4, #+36]
     17          }
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          CloseWindowTimer::~CloseWindowTimer(void)
     20          {
   \                     `?~CloseWindowTimer`:
   \   00000000   00402DE9           PUSH     {LR}
     21          }
   \   00000004   ........           _BLF     `?~TSNTimer`,`?~TSNTimer??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          void CloseWindowTimer::TimerCallback()
     24          {
   \                     ??TimerCallback:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     25              if ( !(*m_Closed) ) {
   \   00000008   241090E5           LDR      R1,[R0, #+36]
   \   0000000C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   0D00001A           BNE      ??TimerCallback_1
     26                  *m_Closed = true;
   \   00000018   0120A0E3           MOV      R2,#+1
   \   0000001C   0020C1E5           STRB     R2,[R1, #+0]
     27                  // Problem EHSMark
     28          #ifdef S2TXU
     29                  CloseWinPacket CWinPacket;
     30                  CWinPacket.IsDialogWin= IsDialogWin;
   \   00000020   2030D0E5           LDRB     R3,[R0, #+32]
     31                  CWinPacket.m_Closed   = m_Closed;
   \   00000024   04108DE5           STR      R1,[SP, #+4]
     32                  CWinPacket.m_WinHandl = m_WinHandl;
     33                  CWinPacket.m_UserTimer= m_UserTimer;
   \   00000028   08108DE2           ADD      R1,SP,#+8
   \   0000002C   0230CDE5           STRB     R3,[SP, #+2]
   \   00000030   F222D0E1           LDRSH    R2,[R0, #+34]
   \   00000034   040080E2           ADD      R0,R0,#+4
   \   00000038   B020CDE1           STRH     R2,[SP, #+0]
   \   0000003C   7C1090E8           LDM      R0,{R2-R6,R12}
     34                  if ( !OS_PutMailCond(&CloseWinTimerBuf,(char*)&CWinPacket) ) {
   \   00000040   14009FE5           LDR      R0,??TimerCallback_2  ;; CloseWinTimerBuf
   \   00000044   7C1081E8           STM      R1,{R2-R6,R12}
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   ........           _BLF     OS_PutMailCond,??OS_PutMailCond??rA
     35                      // If we get her, the message was not transferred
     36                  }
     37          #else
     38                  if ( m_WinHandl > 0 ) {
     39                      if ( IsDialogWin ) {
     40                          GUI_EndDialog(m_WinHandl, 0);
     41                      } else {
     42                          WM_DeleteWindow(m_WinHandl);
     43                      }
     44                  }
     45          #endif
     46              }
     47          }
   \                     ??TimerCallback_1:
   \   00000050   20D08DE2           ADD      SP,SP,#+32
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??TimerCallback_2:
   \   0000005C   ........           DC32     CloseWinTimerBuf
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void CloseWindowTimer::Init(GUI_HWIN WinHandl,bool IsDialog, volatile bool *Closed,unsigned int timeout)
     50          {
   \                     ??Init:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04C09DE5           LDR      R12,[SP, #+4]
     51              m_Closed   = Closed;
   \   00000008   243080E5           STR      R3,[R0, #+36]
     52              m_WinHandl = WinHandl;
   \   0000000C   B212C0E1           STRH     R1,[R0, #+34]
     53              IsDialogWin= IsDialog;
   \   00000010   2020C0E5           STRB     R2,[R0, #+32]
     54              Start(timeout);
   \   00000014   0C10A0E1           MOV      R1,R12
   \   00000018   ........           _BLF     ??Start,??Start??rA
     55          }
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void CloseWindowTimer::Stop(void)
     58          {
   \                     ??Stop:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     59              TSNTimer::Stop();
   \   00000008   ........           _BLF     ??Stop_1,??Stop??rA
     60              if ( m_Closed ) {
   \   0000000C   240094E5           LDR      R0,[R4, #+36]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0E00000A           BEQ      ??Stop_2
     61                  if ( !(*m_Closed) ) {
   \   00000018   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0B00001A           BNE      ??Stop_2
     62                      *m_Closed = true;
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
     63                      if ( m_WinHandl > 0 ) {
   \   0000002C   F202D4E1           LDRSH    R0,[R4, #+34]
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   060000BA           BLT      ??Stop_2
     64                          if ( IsDialogWin ) {
   \   00000038   2010D4E5           LDRB     R1,[R4, #+32]
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0200000A           BEQ      ??Stop_3
     65                              GUI_EndDialog(m_WinHandl, 0);
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   ........           _BLF     GUI_EndDialog,??GUI_EndDialog??rA
   \   0000004C   000000EA           B        ??Stop_2
     66                          } else {
     67                              WM_DeleteWindow(m_WinHandl);
   \                     ??Stop_3:
   \   00000050   ........           _BLF     WM_DeleteWindow,??WM_DeleteWindow??rA
     68                          }
     69                      }
     70                  }
     71              }
     72          }
   \                     ??Stop_2:
   \   00000054   1040BDE8           POP      {R4,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CloseWindowTimer &CloseWindowTimer::new CloseWindowTimer()
   \                     `??new CloseWindowTimer`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2800A0E3           MOV      R0,#+40
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   0040B0E1           MOVS     R4,R0
   \   00000010   0200000A           BEQ      `??new CloseWindowTimer_2`
   \   00000014   ........           _BLF     ??TSNTimer,??TSNTimer??rA
   \   00000018   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   0000001C   1C0084E5           STR      R0,[R4, #+28]
   \                     `??new CloseWindowTimer_2`:
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CloseWindowTimer &CloseWindowTimer::new CloseWindowTimer(GUI_HWIN, bool volatile *)
   \                     `??new CloseWindowTimer_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   2800A0E3           MOV      R0,#+40
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new CloseWindowTimer_3`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??CloseWindowTimer_1
   \                     `??new CloseWindowTimer_3`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CloseWindowTimer::delete ~CloseWindowTimer(CloseWindowTimer *)
   \                     `??delete ~CloseWindowTimer`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~CloseWindowTimer_1`
   \   0000000C   ........           _BLF     `?~TSNTimer`,`?~TSNTimer??rA`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~CloseWindowTimer_1`:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??__vtbl

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CloseWindowTimer::CloseWindowTimer()
                                        8
     CloseWindowTimer::CloseWindowTimer(GUI_HWIN, bool volatile *)
                                       16
     CloseWindowTimer::Init(GUI_HWIN, bool, bool volatile *, unsigned int)
                                        4
     CloseWindowTimer::Stop()           8
     CloseWindowTimer::TimerCallback()
                                       48
     CloseWindowTimer::delete ~CloseWindowTimer(CloseWindowTimer *)
                                        8
     CloseWindowTimer::new CloseWindowTimer()
                                        8
     CloseWindowTimer::new CloseWindowTimer(GUI_HWIN, bool volatile *)
                                       12
     CloseWindowTimer::~CloseWindowTimer()
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CloseWindowTimer::CloseWindowTimer()
                                      32
     CloseWindowTimer::CloseWindowTimer(GUI_HWIN, bool volatile *)
                                      48
     CloseWindowTimer::~CloseWindowTimer()
                                      16
     CloseWindowTimer::TimerCallback()
                                      96
     CloseWindowTimer::Init(GUI_HWIN, bool, bool volatile *, unsigned int)
                                      36
     CloseWindowTimer::Stop()         92
     CloseWindowTimer::new CloseWindowTimer()
                                      44
     CloseWindowTimer::new CloseWindowTimer(GUI_HWIN, bool volatile *)
                                      48
     CloseWindowTimer::delete ~CloseWindowTimer(CloseWindowTimer *)
                                      32
     ??DataTable2                      4
      Others                         152

 
 592 bytes in segment CODE
   8 bytes in segment DATA_C
 
 448 bytes of CODE  memory (+ 144 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none
