##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:17:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PRogramObject.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\PRogramObject.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PRogramObject.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PRogramObject.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PRogramObject.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObject **unique(PRogramObject **, PRogramObject **)
   \                     ??unique:
   \                     ??unique_2:
   \   00000000   0020A0E1           MOV      R2,R0
   \   00000004   010052E1           CMP      R2,R1
   \   00000008   1100000A           BEQ      ??unique_3
   \   0000000C   040080E2           ADD      R0,R0,#+4
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   003092E5           LDR      R3,[R2, #+0]
   \   0000001C   00C090E5           LDR      R12,[R0, #+0]
   \   00000020   0C0053E1           CMP      R3,R12
   \   00000024   F5FFFF1A           BNE      ??unique_2
   \                     ??unique_4:
   \   00000028   040080E2           ADD      R0,R0,#+4
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   0500000A           BEQ      ??unique_5
   \   00000034   003090E5           LDR      R3,[R0, #+0]
   \   00000038   00C092E5           LDR      R12,[R2, #+0]
   \   0000003C   03005CE1           CMP      R12,R3
   \   00000040   F8FFFF0A           BEQ      ??unique_4
   \   00000044   0430A2E5           STR      R3,[R2, #+4]!
   \   00000048   F6FFFFEA           B        ??unique_4
   \                     ??unique_5:
   \   0000004C   040082E2           ADD      R0,R2,#+4
   \   00000050   1EFF2FE1           BX       LR
   \                     ??unique_3:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase **unique(PRogramObjectBase **, PRogramObjectBase **)
   \                     ??unique_1:
   \                     ??unique_6:
   \   00000000   0020A0E1           MOV      R2,R0
   \   00000004   010052E1           CMP      R2,R1
   \   00000008   1100000A           BEQ      ??unique_7
   \   0000000C   040080E2           ADD      R0,R0,#+4
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   003092E5           LDR      R3,[R2, #+0]
   \   0000001C   00C090E5           LDR      R12,[R0, #+0]
   \   00000020   0C0053E1           CMP      R3,R12
   \   00000024   F5FFFF1A           BNE      ??unique_6
   \                     ??unique_8:
   \   00000028   040080E2           ADD      R0,R0,#+4
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   0500000A           BEQ      ??unique_9
   \   00000034   003090E5           LDR      R3,[R0, #+0]
   \   00000038   00C092E5           LDR      R12,[R2, #+0]
   \   0000003C   03005CE1           CMP      R12,R3
   \   00000040   F8FFFF0A           BEQ      ??unique_8
   \   00000044   0430A2E5           STR      R3,[R2, #+4]!
   \   00000048   F6FFFFEA           B        ??unique_8
   \                     ??unique_9:
   \   0000004C   040082E2           ADD      R0,R2,#+4
   \   00000050   1EFF2FE1           BX       LR
   \                     ??unique_7:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_6
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_7
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_6:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_7:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_8
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_9
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_9:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_10
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_11
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_12:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_10:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_14
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_15
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_15:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_14
   \                     ??_Erase_8:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_16
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_16:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_17
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_17:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_14:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_18
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_19
   \                     ??_Erase_20:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_21
   \                     ??_Erase_22:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_23:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_19:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_24
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_24
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_25
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_26
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_26:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_23
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_20
   \                     ??_Erase_21:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_27
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_27:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_24
   \                     ??_Erase_25:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_28
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_28:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_23
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_22
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_29
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_29:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_24:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_18:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_6
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_7:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_8
   \                     ??_Insert_6:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_9
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_8
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_8
   \                     ??_Insert_9:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_8
   \   00000060   F0FFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_8:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_11
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_12
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_10
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_13
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_13:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_8
   \                     ??_Insert_12:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_10
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_14
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_14:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_6
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_7
   \                     ??erase_8:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_6:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_8
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_7:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   1000001A           BNE      ??erase_9
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??_Erase_2,??_Erase??rA_1
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0C0000EA           B        ??erase_10
   \                     ??erase_11:
   \   0000003C   0570A0E1           MOV      R7,R5
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000054   0710A0E1           MOV      R1,R7
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000060   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_9:
   \   00000064   060055E1           CMP      R5,R6
   \   00000068   F3FFFF1A           BNE      ??erase_11
   \   0000006C   0500A0E1           MOV      R0,R5
   \                     ??erase_10:
   \   00000070   F040BDE8           POP      {R4-R7,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
   \                     ??erase_2:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_12
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_13
   \                     ??erase_14:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_12:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_14
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_13:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
   \                     ??erase_3:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_15
   \                     ??erase_16:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_15:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_16
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_4:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range_1,??equal_range??rA_1
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_17
   \                     ??erase_18:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_17:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_18
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase_1,??erase??rA_1
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_5,??_Erase??rA_2
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::clear()
   \                     ??clear_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_3,??_Erase??rA_3
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound_1,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range_1:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound_1,??_Ubound??rA_1
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA_1
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_2,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_4
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_5
   \                     ??_Copy_6:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_5:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_6
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_7
   \                     ??_Copy_4:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_7:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
   \                     ??_Copy_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_3,??_Copy??rA_1
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_8
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_9
   \                     ??_Copy_10:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_9:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_10
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_11
   \                     ??_Copy_8:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_11:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Copy_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_12
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_13
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_13:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_2
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_2
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_12:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
   \                     ??_Copy_3:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_14
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_15
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_15:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_3
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_3
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_14:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_30
   \                     ??_Erase_31:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_30:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_31
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_32
   \                     ??_Erase_33:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_32:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_33
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Erase_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_34
   \                     ??_Erase_35:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_3
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_34:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_35
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Erase(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
   \                     ??_Erase_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_36
   \                     ??_Erase_37:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_4
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_36:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_37
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_38
   \                     ??_Erase_39:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_5
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_38:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_39
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_2:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_2

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
   \                     ??_Lbound_1:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_3:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_3

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_2:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_2

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound_1:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_3:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_3

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AlarmBasic *>::~set()
   \                     `?~set_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_4
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<unsigned int>::set(set<unsigned int> const &)
   \                     ??set:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy,??_Copy??rA_2
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObject *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<unsigned int> &set<unsigned int>::operator=(set<unsigned int> const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   0500000A           BEQ      `??operator=_1`
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   ........           _BLF     ??erase_2,??erase??rA_2
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??_Copy,??_Copy??rA_2
   \                     `??operator=_1`:
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AlarmBasic *>::set()
   \                     ??set_1:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1240BDE8           POP      {R1,R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_4
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_4:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
   \                     ??_Tidy0_2:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_5
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_5:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObject ** _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Insert(PRogramObject **, PRogramObject * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_18:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_18
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_2
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_3
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_3
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_4
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_3
   \                     ??_Make_room_4:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_3:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_5
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_5
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_6
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_5
   \                     ??_Make_room_6:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_5:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObject ** _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Make_room(PRogramObject **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_7
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_7
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_8
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_2
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_7
   \                     ??_Make_room_8:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_7:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_3
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_4:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_4
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_5
   \                     ??_Push_back0_3:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_3
   \                     ??_Push_back0_5:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Push_back0(PRogramObject *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_6
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_7:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_7
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_6:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_4
   \                     ??_Push_back0_8:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_9
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_10:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_10
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_11
   \                     ??_Push_back0_9:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_5
   \                     ??_Push_back0_11:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObject *>::~vector()
   \                     `?~vector_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA_2
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** vector<AnalogInput *>::erase(AnalogInput **)
   \                     ??erase_5:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   041094E5           LDR      R1,[R4, #+4]
   \   00000010   0520A0E1           MOV      R2,R5
   \   00000014   040085E2           ADD      R0,R5,#+4
   \   00000018   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   040040E2           SUB      R0,R0,#+4
   \   00000024   040084E5           STR      R0,[R4, #+4]
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_C, align 4, align-sorted
      9          vector<PRogramObjectBase *>PRogramObject::ScratchPageVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??ScratchPageVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??IOObjectVector, `?~vector_1`
   \              ............
   \   00000018   ............       DC32 ?_5, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
     10          vector<PRogramObject *>PRogramObject::IOObjectVector;
     11          set<PRogramObject *>PRogramObject::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??ScratchPageVector:
   \   00000018                      DS8 12
   \                     ??IOObjectVector:
   \   00000024                      DS8 12

   \                                 In segment CODE, align 4, keep-with-next
     12          PRogramObject::PRogramObject(bool AddToList) : PRogramObjectBase(AddToList) {
   \                     ??PRogramObject:
   \   00000000   37402DE9           PUSH     {R0-R2,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   0000000C   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000010   AC5084E2           ADD      R5,R4,#+172
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000002C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000030   1400C5E5           STRB     R0,[R5, #+20]
   \   00000034   C40084E2           ADD      R0,R4,#+196
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   E40084E2           ADD      R0,R4,#+228
   \   00000040   ........           _BLF     ??set_1,??set??rA
   \   00000044   FC0084E2           ADD      R0,R4,#+252
   \   00000048   ........           _BLF     ??set_1,??set??rA
   \   0000004C   450F84E2           ADD      R0,R4,#+276
   \   00000050   ........           _BLF     ??set_1,??set??rA
   \   00000054   4B0F84E2           ADD      R0,R4,#+300
   \   00000058   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000005C   4E0F84E2           ADD      R0,R4,#+312
   \   00000060   ........           _BLF     ??_Zero,??_Zero??rA
     13              ObjectSet.insert(this);
   \   00000064   ........           LDR      R1,??DataTable4  ;; ??ObjectSet
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   ........           _BLF     ??insert_1,??insert??rA
     14              DataFromOther  = false;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   4401C4E5           STRB     R0,[R4, #+324]
     15              IsNewData      = false;
   \   0000007C   E000C4E5           STRB     R0,[R4, #+224]
     16              SimulatorSign  = 1.0;   // Only used for simulation
   \   00000080   FE05A0E3           MOV      R0,#+1065353216
   \   00000084   A80084E5           STR      R0,[R4, #+168]
     17          
     18          }
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   3E40BDE8           POP      {R1-R5,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          PRogramObject::~PRogramObject(void) {
   \                     `?~PRogramObject`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   6200000A           BEQ      `?~PRogramObject_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     21              for ( unsigned j = 0; j < AnalogInList.size(); j++ ) {
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   4B6FA0E3           MOV      R6,#+300
   \   00000024   0C0000EA           B        `?~PRogramObject_2`
     22                  if ( AnalogInList[j] ) {
   \                     `?~PRogramObject_3`:
   \   00000028   040096E7           LDR      R0,[R6, +R4]
   \   0000002C   070180E0           ADD      R0,R0,R7, LSL #+2
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   000051E3           CMP      R1,#+0
     23                      delete AnalogInList[j];
   \   00000038   0120A011           MOVNE    R2,R1
   \   0000003C   0500000A           BEQ      `?~PRogramObject_4`
   \   00000040   0200A0E1           MOV      R0,R2
   \   00000044   A42092E5           LDR      R2,[R2, #+164]
   \   00000048   0310A0E3           MOV      R1,#+3
   \   0000004C   002092E5           LDR      R2,[R2, #+0]
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   12FF2FE1           BX       R2
     24                  }
     25              }
   \                     `?~PRogramObject_4`:
   \   00000058   017087E2           ADD      R7,R7,#+1
   \                     `?~PRogramObject_2`:
   \   0000005C   040086E0           ADD      R0,R6,R4
   \   00000060   041090E5           LDR      R1,[R0, #+4]
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   000041E0           SUB      R0,R1,R0
   \   0000006C   200157E1           CMP      R7,R0, LSR #+2
   \   00000070   ECFFFF3A           BCC      `?~PRogramObject_3`
     26              AnalogInList.clear();
   \   00000074   047086E0           ADD      R7,R6,R4
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           _BLF     ??_Zero,??_Zero??rA
     27          
     28              set<AlarmBasic *>::iterator pBIt;
     29              for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   00000088   E47094E5           LDR      R7,[R4, #+228]
   \   0000008C   0B0000EA           B        `?~PRogramObject_5`
     30                  delete (*pBIt);
   \                     `?~PRogramObject_6`:
   \   00000090   102097E5           LDR      R2,[R7, #+16]
   \   00000094   000052E3           CMP      R2,#+0
   \   00000098   0500000A           BEQ      `?~PRogramObject_7`
   \   0000009C   0200A0E1           MOV      R0,R2
   \   000000A0   A42092E5           LDR      R2,[R2, #+164]
   \   000000A4   0310A0E3           MOV      R1,#+3
   \   000000A8   002092E5           LDR      R2,[R2, #+0]
   \   000000AC   0FE0A0E1           MOV      LR,PC
   \   000000B0   12FF2FE1           BX       R2
     31              }
   \                     `?~PRogramObject_7`:
   \   000000B4   0700A0E1           MOV      R0,R7
   \   000000B8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000BC   0070A0E1           MOV      R7,R0
   \                     `?~PRogramObject_5`:
   \   000000C0   E40084E2           ADD      R0,R4,#+228
   \   000000C4   000057E1           CMP      R7,R0
   \   000000C8   F0FFFF1A           BNE      `?~PRogramObject_6`
     32              vector<PRogramObject *>::iterator it;
     33              it = find(IOObjectVector.begin(), IOObjectVector.end(), this);
   \   000000CC   ........           LDR      R7,??DataTable4  ;; ??ObjectSet
   \   000000D0   281097E5           LDR      R1,[R7, #+40]
   \   000000D4   243097E5           LDR      R3,[R7, #+36]
   \   000000D8   000000EA           B        `?~PRogramObject_8`
   \                     `?~PRogramObject_9`:
   \   000000DC   043083E2           ADD      R3,R3,#+4
   \                     `?~PRogramObject_8`:
   \   000000E0   010053E1           CMP      R3,R1
   \   000000E4   00C09315           LDRNE    R12,[R3, #+0]
   \   000000E8   04005C11           CMPNE    R12,R4
   \   000000EC   FAFFFF1A           BNE      `?~PRogramObject_9`
     34              if ( it != IOObjectVector.end() ) {
   \   000000F0   010053E1           CMP      R3,R1
   \   000000F4   0500000A           BEQ      `?~PRogramObject_10`
     35                  IOObjectVector.erase(it);
   \   000000F8   0320A0E1           MOV      R2,R3
   \   000000FC   040083E2           ADD      R0,R3,#+4
   \   00000100   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000104   280097E5           LDR      R0,[R7, #+40]
   \   00000108   040040E2           SUB      R0,R0,#+4
   \   0000010C   280087E5           STR      R0,[R7, #+40]
     36              }
     37              ObjectSet.erase(this);
   \                     `?~PRogramObject_10`:
   \   00000110   0410A0E1           MOV      R1,R4
   \   00000114   0700A0E1           MOV      R0,R7
   \   00000118   ........           _BLF     ??erase_3,??erase??rA_3
     38          }
   \   0000011C   4E7F84E2           ADD      R7,R4,#+312
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000130   046086E0           ADD      R6,R6,R4
   \   00000134   0600A0E1           MOV      R0,R6
   \   00000138   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   0000013C   0600A0E1           MOV      R0,R6
   \   00000140   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000144   450F84E2           ADD      R0,R4,#+276
   \   00000148   ........           _BLF     `?~set_1`,`?~set??rA`
   \   0000014C   FC0084E2           ADD      R0,R4,#+252
   \   00000150   ........           _BLF     `?~set_1`,`?~set??rA`
   \   00000154   E40084E2           ADD      R0,R4,#+228
   \   00000158   ........           _BLF     `?~set_1`,`?~set??rA`
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   C40084E2           ADD      R0,R4,#+196
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000016C   AC6084E2           ADD      R6,R4,#+172
   \   00000170   041096E5           LDR      R1,[R6, #+4]
   \   00000174   0600A0E1           MOV      R0,R6
   \   00000178   ........           _BLF     ??_Erase_4,??_Erase??rA_5
   \   0000017C   0600A0E1           MOV      R0,R6
   \   00000180   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   00000190   010015E3           TST      R5,#0x1
   \   00000194   0100000A           BEQ      `?~PRogramObject_1`
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PRogramObject_1`:
   \   000001A0   ........           B        ?Subroutine51

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine51:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     39          //---------------------------------------------------------------------------
     40          
     41          ///////////////////////////////////////////////////////////////
     42          //
     43          // Routines for the Configuration
     44          //
     45          ///////////////////////////////////////////////////////////////
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          AnsiString PRogramObject::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     48              AnsiString LocalString;
     49              LocalString += TabStr1 + KeyWord(C_PRO_START_PRO) + CrLfStr;
   \   00000004   74629FE5           LDR      R6,??MakeConfigString_2  ;; TabStr1
   \   00000008   ........           LDR      R7,??DataTable11  ;; CrLfStr
   \   0000000C   4DDF4DE2           SUB      SP,SP,#+308
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   EB10A0E3           MOV      R1,#+235
   \   00000024   C01F81E3           ORR      R1,R1,#0x300
   \   00000028   A8008DE2           ADD      R0,SP,#+168
   \   0000002C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000030   A8208DE2           ADD      R2,SP,#+168
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   8C008DE2           ADD      R0,SP,#+140
   \   0000003C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   8C108DE2           ADD      R1,SP,#+140
   \   00000048   70008DE2           ADD      R0,SP,#+112
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   ........           LDR      R0,??DataTable16  ;; ??npos
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   008090E5           LDR      R8,[R0, #+0]
   \   0000005C   70108DE2           ADD      R1,SP,#+112
   \   00000060   0830A0E1           MOV      R3,R8
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     ??append,??append??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   70008DE2           ADD      R0,SP,#+112
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   8C008DE2           ADD      R0,SP,#+140
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   A8008DE2           ADD      R0,SP,#+168
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
     50          
     51              LocalString += PRogramObjectBase::MakeConfigString();
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   C4108DE2           ADD      R1,SP,#+196
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000AC   0830A0E1           MOV      R3,R8
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   C4108DE2           ADD      R1,SP,#+196
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           _BLF     ??append,??append??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   C4008DE2           ADD      R0,SP,#+196
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              if ( !LongName.IsEmpty() ) {
   \   000000D0   C40084E2           ADD      R0,R4,#+196
   \   000000D4   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   2400001A           BNE      ??MakeConfigString_3
     53                  LocalString += TabStr2 + KeyWord(C_PRO_LONGNAME) + LongName + CrLfStr;
   \   000000E0   1610A0E3           MOV      R1,#+22
   \   000000E4   501E81E3           ORR      R1,R1,#0x500
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000F0   8C119FE5           LDR      R1,??MakeConfigString_2+0x4  ;; TabStr2
   \   000000F4   0D20A0E1           MOV      R2,SP
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000100   C42084E2           ADD      R2,R4,#+196
   \   00000104   1C108DE2           ADD      R1,SP,#+28
   \   00000108   38008DE2           ADD      R0,SP,#+56
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   0720A0E1           MOV      R2,R7
   \   00000114   38108DE2           ADD      R1,SP,#+56
   \   00000118   54008DE2           ADD      R0,SP,#+84
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   0830A0E1           MOV      R3,R8
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   54108DE2           ADD      R1,SP,#+84
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           _BLF     ??append,??append??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   54008DE2           ADD      R0,SP,#+84
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   38008DE2           ADD      R0,SP,#+56
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   1C008DE2           ADD      R0,SP,#+28
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   0D00A0E1           MOV      R0,SP
   \   00000170   ........           _BLF     ??_Tidy,??_Tidy??rA
     54              }
     55              if ( DataFromOther ) {
   \                     ??MakeConfigString_3:
   \   00000174   4401D4E5           LDRB     R0,[R4, #+324]
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   1C00000A           BEQ      ??MakeConfigString_4
     56                  LocalString += TabStr1 + KeyWord(C_DATA_FROM_OTHER) + CrLfStr;
   \   00000180   9110A0E3           MOV      R1,#+145
   \   00000184   501E81E3           ORR      R1,R1,#0x500
   \   00000188   38008DE2           ADD      R0,SP,#+56
   \   0000018C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000190   38208DE2           ADD      R2,SP,#+56
   \   00000194   0610A0E1           MOV      R1,R6
   \   00000198   1C008DE2           ADD      R0,SP,#+28
   \   0000019C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001A0   0720A0E1           MOV      R2,R7
   \   000001A4   1C108DE2           ADD      R1,SP,#+28
   \   000001A8   0D00A0E1           MOV      R0,SP
   \   000001AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001B0   0830A0E1           MOV      R3,R8
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0D10A0E1           MOV      R1,SP
   \   000001BC   0500A0E1           MOV      R0,R5
   \   000001C0   ........           _BLF     ??append,??append??rA
   \   000001C4   0020A0E3           MOV      R2,#+0
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   0D00A0E1           MOV      R0,SP
   \   000001D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D4   0020A0E3           MOV      R2,#+0
   \   000001D8   0110A0E3           MOV      R1,#+1
   \   000001DC   1C008DE2           ADD      R0,SP,#+28
   \   000001E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0110A0E3           MOV      R1,#+1
   \   000001EC   38008DE2           ADD      R0,SP,#+56
   \   000001F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              }
     58              LocalString += TabStr1 + KeyWord(C_PRO_END_PRO) + CrLfStr;
   \                     ??MakeConfigString_4:
   \   000001F4   FB1FA0E3           MOV      R1,#+1004
   \   000001F8   460F8DE2           ADD      R0,SP,#+280
   \   000001FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000200   462F8DE2           ADD      R2,SP,#+280
   \   00000204   0610A0E1           MOV      R1,R6
   \   00000208   FC008DE2           ADD      R0,SP,#+252
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0720A0E1           MOV      R2,R7
   \   00000214   FC108DE2           ADD      R1,SP,#+252
   \   00000218   E0008DE2           ADD      R0,SP,#+224
   \   0000021C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000220   0830A0E1           MOV      R3,R8
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   E0108DE2           ADD      R1,SP,#+224
   \   0000022C   0500A0E1           MOV      R0,R5
   \   00000230   ........           _BLF     ??append,??append??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   E0008DE2           ADD      R0,SP,#+224
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   FC008DE2           ADD      R0,SP,#+252
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   460F8DE2           ADD      R0,SP,#+280
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              LocalString += CrLfStr;
   \   00000264   0830A0E1           MOV      R3,R8
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   0710A0E1           MOV      R1,R7
   \   00000270   0500A0E1           MOV      R0,R5
   \   00000274   ........           _BLF     ??append,??append??rA
     60              return (LocalString);
   \   00000278   4DDF8DE2           ADD      SP,SP,#+308
   \   0000027C   ........           B        ??Subroutine46_0
   \                     ??MakeConfigString_2:
   \   00000280   ........           DC32     TabStr1
   \   00000284   ........           DC32     TabStr2
     61          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine46:
   \   00000000   050000EA           B        ??Subroutine46_1
   \                     ??Subroutine46_2:
   \   00000004   040096E7           LDR      R0,[R6, +R4]
   \   00000008   080190E7           LDR      R0,[R0, +R8, LSL #+2]
   \   0000000C   018088E2           ADD      R8,R8,#+1
   \   00000010   ........           _BLF     ??GetBasicSensorType,??GetBasicSensorType??rA
   \   00000014   050050E1           CMP      R0,R5
   \   00000018   01708702           ADDEQ    R7,R7,#+1
   \                     ??Subroutine46_1:
   \   0000001C   040086E0           ADD      R0,R6,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   200158E1           CMP      R8,R0, LSR #+2
   \   00000030   F3FFFF3A           BCC      ??Subroutine46_2
   \   00000034   0700A0E1           MOV      R0,R7
   \                     ??Subroutine46_0:
   \   00000038   F041BDE8           POP      {R4-R8,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     62          //---------------------------------------------------------------------------
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          bool PRogramObject::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     65              bool NoError = true;
     66              int ErrorLine = 0;
   \   00000004   78929FE5           LDR      R9,??LoadConfigString_2+0x4  ;; `?<Constant "PRogram object ">`
   \   00000008   40DF4DE2           SUB      SP,SP,#+256
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0150A0E3           MOV      R5,#+1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0180E0E1           MVN      R8,R1
     67              int Key;
     68              do {
     69                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   20108DE2           ADD      R1,SP,#+32
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   ........           _BLF     ??NextWord,??NextWord??rA
     70                  if ( ErrorLine ) {
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   1A00000A           BEQ      ??LoadConfigString_4
     71                      if ( ErrorLine != EOF ) {
   \   00000044   080050E1           CMP      R0,R8
   \   00000048   6900000A           BEQ      ??LoadConfigString_5
     72                          GiveConfigWarning((AnsiString)"PRogram object " + Name, ErrorLine);
   \   0000004C   0910A0E1           MOV      R1,R9
   \   00000050   58008DE2           ADD      R0,SP,#+88
   \   00000054   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000058   442084E2           ADD      R2,R4,#+68
   \   0000005C   0010A0E1           MOV      R1,R0
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   3C008DE2           ADD      R0,SP,#+60
   \   00000070   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000074   00109DE5           LDR      R1,[SP, #+0]
   \   00000078   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   3C008DE2           ADD      R0,SP,#+60
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   04008DE2           ADD      R0,SP,#+4
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   58008DE2           ADD      R0,SP,#+88
   \                     ??LoadConfigString_6:
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   500000EA           B        ??LoadConfigString_5
     73                      }
     74                  } else {
     75                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   000000B0   20108DE2           ADD      R1,SP,#+32
   \   000000B4   04008DE2           ADD      R0,SP,#+4
   \   000000B8   ........           _BLF     ??string,??string??rA
   \   000000BC   04008DE2           ADD      R0,SP,#+4
   \   000000C0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000C4   0070A0E1           MOV      R7,R0
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   04008DE2           ADD      R0,SP,#+4
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     76                      switch ( Key ) {
   \   000000D8   E910A0E3           MOV      R1,#+233
   \   000000DC   C01F81E3           ORR      R1,R1,#0x300
   \   000000E0   010057E1           CMP      R7,R1
   \   000000E4   2900000A           BEQ      ??LoadConfigString_7
   \   000000E8   011081E2           ADD      R1,R1,#+1
   \   000000EC   010057E1           CMP      R7,R1
   \   000000F0   FB0F5713           CMPNE    R7,#+1004
   \   000000F4   3E00000A           BEQ      ??LoadConfigString_5
   \   000000F8   4B1F81E2           ADD      R1,R1,#+300
   \   000000FC   010057E1           CMP      R7,R1
   \   00000100   2600000A           BEQ      ??LoadConfigString_8
   \   00000104   7B1081E2           ADD      R1,R1,#+123
   \   00000108   010057E1           CMP      R7,R1
   \   0000010C   3600000A           BEQ      ??LoadConfigString_9
     77                      default:
     78                          GiveConfigWarning((AnsiString)"PRogram object " + Name, InputKeyWord, ConfigString.LineCount);
   \   00000110   20108DE2           ADD      R1,SP,#+32
   \   00000114   74008DE2           ADD      R0,SP,#+116
   \   00000118   ........           _BLF     ??string,??string??rA
   \   0000011C   0910A0E1           MOV      R1,R9
   \   00000120   C8008DE2           ADD      R0,SP,#+200
   \   00000124   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000128   0010A0E1           MOV      R1,R0
   \   0000012C   442084E2           ADD      R2,R4,#+68
   \   00000130   AC008DE2           ADD      R0,SP,#+172
   \   00000134   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000138   AC108DE2           ADD      R1,SP,#+172
   \   0000013C   90008DE2           ADD      R0,SP,#+144
   \   00000140   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000144   1C2096E5           LDR      R2,[R6, #+28]
   \   00000148   74108DE2           ADD      R1,SP,#+116
   \   0000014C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   74008DE2           ADD      R0,SP,#+116
   \   0000015C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   90008DE2           ADD      R0,SP,#+144
   \   0000016C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   AC008DE2           ADD      R0,SP,#+172
   \   0000017C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   C8008DE2           ADD      R0,SP,#+200
   \   0000018C   C5FFFFEA           B        ??LoadConfigString_6
     79                          break;
     80                      case C_PRO_END_PRO:
     81                      case C_PRO_END_COMMON:
     82                          break;
     83                      case C_PRO_START_COMMON:
     84                          PRogramObjectBase::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_7:
   \   00000190   0610A0E1           MOV      R1,R6
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000019C   140000EA           B        ??LoadConfigString_5
     85                          break;
     86                      case C_PRO_LONGNAME:
     87                          LongName = ConfigString.GetRemainingLine(ErrorLine);
   \                     ??LoadConfigString_8:
   \   000001A0   0D20A0E1           MOV      R2,SP
   \   000001A4   E4108DE2           ADD      R1,SP,#+228
   \   000001A8   0600A0E1           MOV      R0,R6
   \   000001AC   ........           _BLF     ??GetRemainingLine,??GetRemainingLine??rA
   \   000001B0   ........           LDR      R0,??DataTable16  ;; ??npos
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   003090E5           LDR      R3,[R0, #+0]
   \   000001BC   E4108DE2           ADD      R1,SP,#+228
   \   000001C0   C40084E2           ADD      R0,R4,#+196
   \   000001C4   ........           _BLF     ??assign,??assign??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   E4008DE2           ADD      R0,SP,#+228
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     88                          NoError = !ErrorLine;
   \   000001D8   00009DE5           LDR      R0,[SP, #+0]
   \   000001DC   000050E3           CMP      R0,#+0
   \   000001E0   0050A013           MOVNE    R5,#+0
   \   000001E4   0150A003           MOVEQ    R5,#+1
   \   000001E8   010000EA           B        ??LoadConfigString_5
     89                          break;
     90                      case C_DATA_FROM_OTHER:
     91                          DataFromOther = true;
   \                     ??LoadConfigString_9:
   \   000001EC   0100A0E3           MOV      R0,#+1
   \   000001F0   4401C4E5           STRB     R0,[R4, #+324]
     92                          break;
     93                      }
     94                  }
     95              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END_PRO) );
   \                     ??LoadConfigString_5:
   \   000001F4   0020A0E3           MOV      R2,#+0
   \   000001F8   0110A0E3           MOV      R1,#+1
   \   000001FC   20008DE2           ADD      R0,SP,#+32
   \   00000200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000204   000055E3           CMP      R5,#+0
   \   00000208   00009D15           LDRNE    R0,[SP, #+0]
   \   0000020C   08005011           CMPNE    R0,R8
   \   00000210   FB0F5713           CMPNE    R7,#+1004
   \   00000214   82FFFF1A           BNE      ??LoadConfigString_3
     96          
     97              if ( LongName.IsEmpty() || (LongName == "0") ) {
   \   00000218   C40084E2           ADD      R0,R4,#+196
   \   0000021C   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000220   000050E3           CMP      R0,#+0
   \   00000224   0C00001A           BNE      ??LoadConfigString_10
   \   00000228   146F8FE2           ADR      R6,??LoadConfigString_2  ;; "0"
   \   0000022C   C47084E2           ADD      R7,R4,#+196
   \   00000230   0600A0E1           MOV      R0,R6
   \   00000234   ........           _BLF     strlen,??strlen??rA
   \   00000238   01002DE9           PUSH     {R0}
   \   0000023C   142097E5           LDR      R2,[R7, #+20]
   \   00000240   0630A0E1           MOV      R3,R6
   \   00000244   0010A0E3           MOV      R1,#+0
   \   00000248   0700A0E1           MOV      R0,R7
   \   0000024C   ........           _BLF     ??compare,??compare??rA
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   04D08DE2           ADD      SP,SP,#+4
   \   00000258   0500001A           BNE      ??LoadConfigString_11
     98                  LongName = Name;
   \                     ??LoadConfigString_10:
   \   0000025C   ........           LDR      R0,??DataTable16  ;; ??npos
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   003090E5           LDR      R3,[R0, #+0]
   \   00000268   441084E2           ADD      R1,R4,#+68
   \   0000026C   C40084E2           ADD      R0,R4,#+196
   \   00000270   ........           _BLF     ??assign,??assign??rA
     99              }
    100              return (NoError);
   \                     ??LoadConfigString_11:
   \   00000274   0500A0E1           MOV      R0,R5
   \   00000278   40DF8DE2           ADD      SP,SP,#+256
   \   0000027C   ........           B        ??Subroutine48_0
   \                     ??LoadConfigString_2:
   \   00000280   30000000           DC8      "0",+0,+0
   \   00000284   ........           DC32     `?<Constant "PRogram object ">`
    101          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine48:
   \   00000000   0700A0E1           MOV      R0,R7
   \                     ??Subroutine48_0:
   \   00000004   F043BDE8           POP      {R4-R9,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
    102          //---------------------------------------------------------------------------
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          void PRogramObject::SortAnalogInputs(void) {
   \                     ??SortAnalogInputs:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    105              for ( unsigned j = 0; j < AnalogInList.size(); j++ ) {
   \   00000008   0080A0E3           MOV      R8,#+0
   \   0000000C   4B5FA0E3           MOV      R5,#+300
   \   00000010   150000EA           B        ??SortAnalogInputs_1
    106                  float MinDistance = AnalogInList[j]->Distance;
    107                  int MinDistIndex = j;
    108                  for ( unsigned i = j + 1; i < AnalogInList.size(); i++ ) {
    109                      if ( AnalogInList[i]->Distance < MinDistance ) {
   \                     ??SortAnalogInputs_2:
   \   00000014   0AB186E0           ADD      R11,R6,R10, LSL #+2
   \   00000018   00009BE5           LDR      R0,[R11, #+0]
   \   0000001C   0910A0E1           MOV      R1,R9
   \   00000020   2C0190E5           LDR      R0,[R0, #+300]
   \   00000024   ........           _BLF     __fLess,??__fLess??rA
   \   00000028   000050E3           CMP      R0,#+0
    110                          MinDistance  = AnalogInList[i]->Distance;
   \   0000002C   00009B15           LDRNE    R0,[R11, #+0]
   \   00000030   2C919015           LDRNE    R9,[R0, #+300]
    111                          MinDistIndex = i;
   \   00000034   00A08D15           STRNE    R10,[SP, #+0]
    112                      }
    113                  }
   \   00000038   01A08AE2           ADD      R10,R10,#+1
   \                     ??SortAnalogInputs_3:
   \   0000003C   040085E0           ADD      R0,R5,R4
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000041E0           SUB      R0,R1,R0
   \   0000004C   20015AE1           CMP      R10,R0, LSR #+2
   \   00000050   EFFFFF3A           BCC      ??SortAnalogInputs_2
    114                  AnalogInput *TmpPtr         = AnalogInList[j];
    115                  AnalogInList[j] = AnalogInList[MinDistIndex];
   \   00000054   00109DE5           LDR      R1,[SP, #+0]
   \   00000058   000097E5           LDR      R0,[R7, #+0]
   \   0000005C   011186E0           ADD      R1,R6,R1, LSL #+2
   \   00000060   002091E5           LDR      R2,[R1, #+0]
   \   00000064   002087E5           STR      R2,[R7, #+0]
    116                  AnalogInList[MinDistIndex] = TmpPtr;
   \   00000068   000081E5           STR      R0,[R1, #+0]
   \                     ??SortAnalogInputs_1:
   \   0000006C   040085E0           ADD      R0,R5,R4
   \   00000070   041090E5           LDR      R1,[R0, #+4]
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000041E0           SUB      R0,R1,R0
   \   0000007C   200158E1           CMP      R8,R0, LSR #+2
   \   00000080   0700002A           BCS      ??SortAnalogInputs_4
   \   00000084   046095E7           LDR      R6,[R5, +R4]
   \   00000088   087186E0           ADD      R7,R6,R8, LSL #+2
   \   0000008C   000097E5           LDR      R0,[R7, #+0]
   \   00000090   2C9190E5           LDR      R9,[R0, #+300]
   \   00000094   00808DE5           STR      R8,[SP, #+0]
   \   00000098   018088E2           ADD      R8,R8,#+1
   \   0000009C   08A0A0E1           MOV      R10,R8
   \   000000A0   E5FFFFEA           B        ??SortAnalogInputs_3
    117              }
    118          }
   \                     ??SortAnalogInputs_4:
   \   000000A4   F14FBDE8           POP      {R0,R4-R11,LR}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          void PRogramObject::CopyAnalogList(void) {
   \                     ??CopyAnalogList:
   \   00000000   00402DE9           PUSH     {LR}
    121              AllAnalogInList = AnalogInList;
   \   00000004   4B1F80E2           ADD      R1,R0,#+300
   \   00000008   4E0F80E2           ADD      R0,R0,#+312
   \   0000000C   ........           _BLF     ??_Assign,??_Assign??rA
    122          
    123          }
   \   00000010   ........           B        ?Subroutine52

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine52:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          void PRogramObject::AddToIOObjectList(void) {
   \                     ??AddToIOObjectList:
   \   00000000   10402DE9           PUSH     {R4,LR}
    126              IOObjectVector.push_back(this);
   \   00000004   ........           LDR      R4,??DataTable10  ;; ??ObjectSet
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   240084E2           ADD      R0,R4,#+36
   \   00000010   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
    127              //move consecutive duplicates past the end; store new end
    128              vector<PRogramObject *>::iterator new_end = unique(IOObjectVector.begin(), IOObjectVector.end());
   \   00000014   281094E5           LDR      R1,[R4, #+40]
   \   00000018   240094E5           LDR      R0,[R4, #+36]
   \   0000001C   ........           _BLF     ??unique,??unique??rA
    129              // delete all elements past new_end
    130              IOObjectVector.erase(new_end, IOObjectVector.end());
   \   00000020   281094E5           LDR      R1,[R4, #+40]
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   000052E1           CMP      R2,R0
   \   00000030   0100000A           BEQ      ??AddToIOObjectList_1
   \   00000034   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000038   280084E5           STR      R0,[R4, #+40]
    131          
    132          }
   \                     ??AddToIOObjectList_1:
   \   0000003C                      REQUIRE ?Subroutine50
   \   0000003C                      ;; // Fall through to label ?Subroutine50

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine50:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    133          void PRogramObject::AddToScratchPageVector(void) {
   \                     ??AddToScratchPageVector:
   \   00000000   10402DE9           PUSH     {R4,LR}
    134              ScratchPageVector.push_back(this);
   \   00000004   ........           LDR      R4,??DataTable10  ;; ??ObjectSet
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    135              //move consecutive duplicates past the end; store new end
    136              vector<PRogramObjectBase *>::iterator new_end = unique(ScratchPageVector.begin(), ScratchPageVector.end());
   \   00000014   1C1094E5           LDR      R1,[R4, #+28]
   \   00000018   180094E5           LDR      R0,[R4, #+24]
   \   0000001C   ........           _BLF     ??unique_1,??unique??rA_1
    137              // delete all elements past new_end
    138              ScratchPageVector.erase(new_end, ScratchPageVector.end());
   \   00000020   1C1094E5           LDR      R1,[R4, #+28]
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   000052E1           CMP      R2,R0
   \   00000030   0100000A           BEQ      ??AddToScratchPageVector_1
   \   00000034   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000038   1C0084E5           STR      R0,[R4, #+28]
    139          }
   \                     ??AddToScratchPageVector_1:
   \   0000003C   ........           B        ?Subroutine50
    140          ///////////////////////////////////////////////////////////////
    141          //
    142          // Routines for Saving of Settings
    143          //
    144          ///////////////////////////////////////////////////////////////
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          void PRogramObject::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0040A0E1           MOV      R4,R0
    147              if ( IsModified || WriteAll ) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   18039F05           LDREQ    R0,??SaveSettings_2  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   C100000A           BEQ      ??SaveSettings_3
    148                  IsModified = false;
    149                  AnsiString LocalString;
    150                  AnsiString IdNumStr;
    151                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    152                  if ( Type >= C_PRO_PROJINFO && Type < 10000 ) {
   \   00000028   ........           LDR      R6,??DataTable11  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   \   00000034   54008DE2           ADD      R0,SP,#+84
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   C4008DE2           ADD      R0,SP,#+196
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3094E5           LDR      R3,[R4, #+156]
   \   00000048   EC229FE5           LDR      R2,??SaveSettings_2+0x4  ;; `?<Constant "0x%0x">`
   \   0000004C   0070A0E3           MOV      R7,#+0
   \   00000050   E0108DE2           ADD      R1,SP,#+224
   \   00000054   C4008DE2           ADD      R0,SP,#+196
   \   00000058   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   E0008DE2           ADD      R0,SP,#+224
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   A01094E5           LDR      R1,[R4, #+160]
   \   00000070   F200A0E3           MOV      R0,#+242
   \   00000074   C00F80E3           ORR      R0,R0,#0x300
   \   00000078   000051E1           CMP      R1,R0
   \   0000007C   1F0000BA           BLT      ??SaveSettings_4
   \   00000080   1000A0E3           MOV      R0,#+16
   \   00000084   9C0D80E3           ORR      R0,R0,#0x2700
   \   00000088   000051E1           CMP      R1,R0
   \   0000008C   1B0000AA           BGE      ??SaveSettings_4
    153                      LocalString += KeyWord(Type) + IdNumStr + CrLfStr;
   \   00000090   38008DE2           ADD      R0,SP,#+56
   \   00000094   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000098   C4208DE2           ADD      R2,SP,#+196
   \   0000009C   38108DE2           ADD      R1,SP,#+56
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   0620A0E1           MOV      R2,R6
   \   000000AC   0D10A0E1           MOV      R1,SP
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B8   ........           LDR      R0,??DataTable16  ;; ??npos
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   003090E5           LDR      R3,[R0, #+0]
   \   000000C4   1C108DE2           ADD      R1,SP,#+28
   \   000000C8   54008DE2           ADD      R0,SP,#+84
   \   000000CC   ........           _BLF     ??append,??append??rA
   \   000000D0   0720A0E1           MOV      R2,R7
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   0720A0E1           MOV      R2,R7
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   0720A0E1           MOV      R2,R7
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   38008DE2           ADD      R0,SP,#+56
   \   000000FC   1C0000EA           B        ??SaveSettings_5
    154                  } else {
    155                      LocalString += KeyWord(C_PRO_START_PRO) + IdNumStr + CrLfStr;
   \                     ??SaveSettings_4:
   \   00000100   EB10A0E3           MOV      R1,#+235
   \   00000104   C01F81E3           ORR      R1,R1,#0x300
   \   00000108   1C008DE2           ADD      R0,SP,#+28
   \   0000010C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000110   C4208DE2           ADD      R2,SP,#+196
   \   00000114   1C108DE2           ADD      R1,SP,#+28
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   0620A0E1           MOV      R2,R6
   \   00000124   0D10A0E1           MOV      R1,SP
   \   00000128   38008DE2           ADD      R0,SP,#+56
   \   0000012C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000130   ........           LDR      R0,??DataTable16  ;; ??npos
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   003090E5           LDR      R3,[R0, #+0]
   \   0000013C   38108DE2           ADD      R1,SP,#+56
   \   00000140   54008DE2           ADD      R0,SP,#+84
   \   00000144   ........           _BLF     ??append,??append??rA
   \   00000148   0720A0E1           MOV      R2,R7
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   38008DE2           ADD      R0,SP,#+56
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000158   0720A0E1           MOV      R2,R7
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   0D00A0E1           MOV      R0,SP
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0720A0E1           MOV      R2,R7
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   1C008DE2           ADD      R0,SP,#+28
   \                     ??SaveSettings_5:
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
    156                  }
    157                  if ( !AlarmSet.empty() ) {
   \   00000178   F40094E5           LDR      R0,[R4, #+244]
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   1D00000A           BEQ      ??SaveSettings_6
    158                      set<AlarmBasic *>::iterator pBIt;
    159                      for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   00000184   E48094E5           LDR      R8,[R4, #+228]
   \   00000188   180000EA           B        ??SaveSettings_7
    160                          AlarmBasic *element = *pBIt;
   \                     ??SaveSettings_8:
   \   0000018C   100098E5           LDR      R0,[R8, #+16]
    161                          if ( element ) LocalString += (AnsiString)element->SaveSettings();
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   1200000A           BEQ      ??SaveSettings_9
   \   00000198   0D10A0E1           MOV      R1,SP
   \   0000019C   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   000001A0   0D10A0E1           MOV      R1,SP
   \   000001A4   1C008DE2           ADD      R0,SP,#+28
   \   000001A8   ........           _BLF     ??string,??string??rA
   \   000001AC   ........           LDR      R0,??DataTable16  ;; ??npos
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   003090E5           LDR      R3,[R0, #+0]
   \   000001B8   1C108DE2           ADD      R1,SP,#+28
   \   000001BC   54008DE2           ADD      R0,SP,#+84
   \   000001C0   ........           _BLF     ??append,??append??rA
   \   000001C4   0720A0E1           MOV      R2,R7
   \   000001C8   0110A0E3           MOV      R1,#+1
   \   000001CC   1C008DE2           ADD      R0,SP,#+28
   \   000001D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D4   0720A0E1           MOV      R2,R7
   \   000001D8   0110A0E3           MOV      R1,#+1
   \   000001DC   0D00A0E1           MOV      R0,SP
   \   000001E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    162                      }
   \                     ??SaveSettings_9:
   \   000001E4   0800A0E1           MOV      R0,R8
   \   000001E8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001EC   0080A0E1           MOV      R8,R0
   \                     ??SaveSettings_7:
   \   000001F0   E40084E2           ADD      R0,R4,#+228
   \   000001F4   000058E1           CMP      R8,R0
   \   000001F8   E3FFFF1A           BNE      ??SaveSettings_8
    163                  }
    164                  for ( unsigned j = 0; j < AnalogInList.size(); j++ ) {
   \                     ??SaveSettings_6:
   \   000001FC   4B8FA0E3           MOV      R8,#+300
   \   00000200   170000EA           B        ??SaveSettings_10
    165                      if ( AnalogInList[j] ) LocalString += AnalogInList[j]->SaveAISettings();
   \                     ??SaveSettings_11:
   \   00000204   040098E7           LDR      R0,[R8, +R4]
   \   00000208   070180E0           ADD      R0,R0,R7, LSL #+2
   \   0000020C   001090E5           LDR      R1,[R0, #+0]
   \   00000210   000051E3           CMP      R1,#+0
   \   00000214   1100000A           BEQ      ??SaveSettings_12
   \   00000218   0130A0E1           MOV      R3,R1
   \   0000021C   0300A0E1           MOV      R0,R3
   \   00000220   A43093E5           LDR      R3,[R3, #+164]
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   6C3093E5           LDR      R3,[R3, #+108]
   \   0000022C   0D10A0E1           MOV      R1,SP
   \   00000230   0FE0A0E1           MOV      LR,PC
   \   00000234   13FF2FE1           BX       R3
   \   00000238   ........           LDR      R0,??DataTable16  ;; ??npos
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   003090E5           LDR      R3,[R0, #+0]
   \   00000244   0D10A0E1           MOV      R1,SP
   \   00000248   54008DE2           ADD      R0,SP,#+84
   \   0000024C   ........           _BLF     ??append,??append??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   0D00A0E1           MOV      R0,SP
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
    166                  }
   \                     ??SaveSettings_12:
   \   00000260   017087E2           ADD      R7,R7,#+1
   \                     ??SaveSettings_10:
   \   00000264   040088E0           ADD      R0,R8,R4
   \   00000268   041090E5           LDR      R1,[R0, #+4]
   \   0000026C   000090E5           LDR      R0,[R0, #+0]
   \   00000270   000041E0           SUB      R0,R1,R0
   \   00000274   200157E1           CMP      R7,R0, LSR #+2
   \   00000278   E1FFFF3A           BCC      ??SaveSettings_11
    167                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   0000027C   FA1FA0E3           MOV      R1,#+1000
   \   00000280   8C008DE2           ADD      R0,SP,#+140
   \   00000284   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000288   0620A0E1           MOV      R2,R6
   \   0000028C   8C108DE2           ADD      R1,SP,#+140
   \   00000290   70008DE2           ADD      R0,SP,#+112
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   ........           LDR      R0,??DataTable16  ;; ??npos
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   004090E5           LDR      R4,[R0, #+0]
   \   000002A4   70108DE2           ADD      R1,SP,#+112
   \   000002A8   0430A0E1           MOV      R3,R4
   \   000002AC   54008DE2           ADD      R0,SP,#+84
   \   000002B0   ........           _BLF     ??append,??append??rA
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   70008DE2           ADD      R0,SP,#+112
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   0020A0E3           MOV      R2,#+0
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   8C008DE2           ADD      R0,SP,#+140
   \   000002D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    168                  LocalString += CrLfStr;
   \   000002D4   0430A0E1           MOV      R3,R4
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0610A0E1           MOV      R1,R6
   \   000002E0   54008DE2           ADD      R0,SP,#+84
   \   000002E4   ........           _BLF     ??append,??append??rA
    169                  SettingsString->AddString(LocalString);
   \   000002E8   54108DE2           ADD      R1,SP,#+84
   \   000002EC   A8008DE2           ADD      R0,SP,#+168
   \   000002F0   ........           _BLF     ??string,??string??rA
   \   000002F4   A8108DE2           ADD      R1,SP,#+168
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   ........           _BLF     ??AddString,??AddString??rA
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0110A0E3           MOV      R1,#+1
   \   00000308   A8008DE2           ADD      R0,SP,#+168
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
    170              }
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   C4008DE2           ADD      R0,SP,#+196
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000320   0020A0E3           MOV      R2,#+0
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   54008DE2           ADD      R0,SP,#+84
   \   0000032C   ........           _BLF     ??_Tidy,??_Tidy??rA
    171          }
   \                     ??SaveSettings_3:
   \   00000330   FCD08DE2           ADD      SP,SP,#+252
   \   00000334   ........           B        ??Subroutine46_0
   \                     ??SaveSettings_2:
   \   00000338   ........           DC32     ??WriteAll
   \   0000033C   ........           DC32     `?<Constant "0x%0x">`
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          bool PRogramObject::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    174              bool NoError = true;
    175              int ErrorLine = 0;
   \   00000004   B8939FE5           LDR      R9,??RestoreSettings_1  ;; NewLineStr
   \   00000008   B8A39FE5           LDR      R10,??RestoreSettings_1+0x4  ;; `?<Constant "Tank ">`
   \   0000000C   78DF4DE2           SUB      SP,SP,#+480
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    176              int Key;
    177              do {
    178                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    179                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_3
    180                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   CF00000A           BEQ      ??RestoreSettings_4
    181                          RestoreSettingsWarning((AnsiString)"Tank " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   C8008DE2           ADD      R0,SP,#+200
   \   00000058   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   AC008DE2           ADD      R0,SP,#+172
   \   00000068   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   08208AE2           ADD      R2,R10,#+8
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   90008DE2           ADD      R0,SP,#+144
   \   000000B4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   90008DE2           ADD      R0,SP,#+144
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   C8008DE2           ADD      R0,SP,#+200
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_5:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   970000EA           B        ??RestoreSettings_4
    182                      }
    183                  } else {
    184                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    185                      switch ( Key ) {
   \   00000158   FA0F56E3           CMP      R6,#+1000
   \   0000015C   EA10A013           MOVNE    R1,#+234
   \   00000160   C01F8113           ORRNE    R1,R1,#0x300
   \   00000164   01005611           CMPNE    R6,R1
   \   00000168   FB0F5613           CMPNE    R6,#+1004
   \   0000016C   AF10A013           MOVNE    R1,#+175
   \   00000170   501E8113           ORRNE    R1,R1,#0x500
   \   00000174   01005611           CMPNE    R6,R1
   \   00000178   9810A013           MOVNE    R1,#+152
   \   0000017C   801E8113           ORRNE    R1,R1,#0x800
   \   00000180   01005611           CMPNE    R6,R1
   \   00000184   B910A013           MOVNE    R1,#+185
   \   00000188   B01E8113           ORRNE    R1,R1,#0xB00
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   7D00000A           BEQ      ??RestoreSettings_6
   \   00000194   091081E2           ADD      R1,R1,#+9
   \   00000198   010056E1           CMP      R6,R1
   \   0000019C   01108113           ORRNE    R1,R1,#0x1
   \   000001A0   01005611           CMPNE    R6,R1
   \   000001A4   01108112           ADDNE    R1,R1,#+1
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   01108113           ORRNE    R1,R1,#0x1
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108112           ADDNE    R1,R1,#+1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108113           ORRNE    R1,R1,#0x1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108112           ADDNE    R1,R1,#+1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   01108113           ORRNE    R1,R1,#0x1
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   04108113           ORRNE    R1,R1,#0x4
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   01108112           ADDNE    R1,R1,#+1
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108113           ORRNE    R1,R1,#0x1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   BD0E5613           CMPNE    R6,#+3024
   \   000001F0   02108112           ADDNE    R1,R1,#+2
   \   000001F4   01005611           CMPNE    R6,R1
   \   000001F8   01108112           ADDNE    R1,R1,#+1
   \   000001FC   01005611           CMPNE    R6,R1
   \   00000200   01108113           ORRNE    R1,R1,#0x1
   \   00000204   01005611           CMPNE    R6,R1
   \   00000208   01108112           ADDNE    R1,R1,#+1
   \   0000020C   01005611           CMPNE    R6,R1
   \   00000210   01108113           ORRNE    R1,R1,#0x1
   \   00000214   01005611           CMPNE    R6,R1
   \   00000218   01108112           ADDNE    R1,R1,#+1
   \   0000021C   01005611           CMPNE    R6,R1
   \   00000220   01108113           ORRNE    R1,R1,#0x1
   \   00000224   01005611           CMPNE    R6,R1
   \   00000228   01108112           ADDNE    R1,R1,#+1
   \   0000022C   01005611           CMPNE    R6,R1
   \   00000230   01108113           ORRNE    R1,R1,#0x1
   \   00000234   01005611           CMPNE    R6,R1
   \   00000238   01108112           ADDNE    R1,R1,#+1
   \   0000023C   01005611           CMPNE    R6,R1
   \   00000240   01108113           ORRNE    R1,R1,#0x1
   \   00000244   01005611           CMPNE    R6,R1
   \   00000248   01108112           ADDNE    R1,R1,#+1
   \   0000024C   01005611           CMPNE    R6,R1
   \   00000250   01108113           ORRNE    R1,R1,#0x1
   \   00000254   01005611           CMPNE    R6,R1
   \   00000258   0B108112           ADDNE    R1,R1,#+11
   \   0000025C   01005611           CMPNE    R6,R1
   \   00000260   01108113           ORRNE    R1,R1,#0x1
   \   00000264   01005611           CMPNE    R6,R1
   \   00000268   4800000A           BEQ      ??RestoreSettings_4
    186                      default:
    187                          NoError = false;
    188                          RestoreSettingsWarning((AnsiString)"Tank " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   0000026C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000270   0070A0E3           MOV      R7,#+0
   \   00000274   710F8DE2           ADD      R0,SP,#+452
   \   00000278   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000027C   00B0A0E1           MOV      R11,R0
   \   00000280   0A10A0E1           MOV      R1,R10
   \   00000284   6A0F8DE2           ADD      R0,SP,#+424
   \   00000288   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000028C   0010A0E1           MOV      R1,R0
   \   00000290   442084E2           ADD      R2,R4,#+68
   \   00000294   630F8DE2           ADD      R0,SP,#+396
   \   00000298   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000029C   2C208AE2           ADD      R2,R10,#+44
   \   000002A0   631F8DE2           ADD      R1,SP,#+396
   \   000002A4   5C0F8DE2           ADD      R0,SP,#+368
   \   000002A8   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   000002AC   74208DE2           ADD      R2,SP,#+116
   \   000002B0   5C1F8DE2           ADD      R1,SP,#+368
   \   000002B4   550F8DE2           ADD      R0,SP,#+340
   \   000002B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002BC   3C208AE2           ADD      R2,R10,#+60
   \   000002C0   551F8DE2           ADD      R1,SP,#+340
   \   000002C4   4E0F8DE2           ADD      R0,SP,#+312
   \   000002C8   ........           _BLF     `??operator+_2`,`??operator+??rA_1`
   \   000002CC   0B20A0E1           MOV      R2,R11
   \   000002D0   4E1F8DE2           ADD      R1,SP,#+312
   \   000002D4   470F8DE2           ADD      R0,SP,#+284
   \   000002D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002DC   0920A0E1           MOV      R2,R9
   \   000002E0   471F8DE2           ADD      R1,SP,#+284
   \   000002E4   400F8DE2           ADD      R0,SP,#+256
   \   000002E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002EC   401F8DE2           ADD      R1,SP,#+256
   \   000002F0   E4008DE2           ADD      R0,SP,#+228
   \   000002F4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002F8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   E4008DE2           ADD      R0,SP,#+228
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0720A0E1           MOV      R2,R7
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   400F8DE2           ADD      R0,SP,#+256
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0720A0E1           MOV      R2,R7
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   470F8DE2           ADD      R0,SP,#+284
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000032C   0720A0E1           MOV      R2,R7
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   710F8DE2           ADD      R0,SP,#+452
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0720A0E1           MOV      R2,R7
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   4E0F8DE2           ADD      R0,SP,#+312
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0720A0E1           MOV      R2,R7
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   550F8DE2           ADD      R0,SP,#+340
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000035C   0720A0E1           MOV      R2,R7
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   5C0F8DE2           ADD      R0,SP,#+368
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000036C   0720A0E1           MOV      R2,R7
   \   00000370   0110A0E3           MOV      R1,#+1
   \   00000374   630F8DE2           ADD      R0,SP,#+396
   \   00000378   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000037C   0720A0E1           MOV      R2,R7
   \   00000380   0110A0E3           MOV      R1,#+1
   \   00000384   6A0F8DE2           ADD      R0,SP,#+424
   \   00000388   66FFFFEA           B        ??RestoreSettings_5
    189                          break;
    190                      case C_AI_END:          // If AI type not found can continue with this
    191                      case C_AL_END:
    192                      case C_CT_END:
    193                      case C_PRO_END:
    194                      case C_PRO_END_COMMON:
    195                      case C_PRO_END_PRO:
    196                          Key = C_PRO_END;
   \                     ??RestoreSettings_6:
   \   0000038C   FA6FA0E3           MOV      R6,#+1000
    197                          break;
    198                      case ID_AL_OVERFILL             :
    199                      case ID_AL_HIGH_LEVEL           :
    200                      case ID_AL_LOW_LEVEL            :
    201                      case ID_AL_LOWLOW_LEVEL         :
    202                      case ID_AL_HIGH_TEMP            :
    203                      case ID_AL_LOW_TEMP             :
    204                      case ID_AL_HIGH_BOT_TEMP        :
    205                      case ID_AL_LOW_BOT_TEMP         :
    206                      case ID_AL_MAIN_WATERINGR       :
    207                      case ID_AL_PRE_WATERINGR        :
    208                      case ID_AL_LOW_T_PRESS          :
    209                      case ID_AL_HIGH_T_PRESS         :
    210                      case ID_AL_LOW_INERT_GAS_PRESS  :
    211                      case ID_AL_HIGH_INERT_GAS_PRESS :
    212                      case ID_AL_LOW_PRESS_VAC        :
    213                      case ID_AL_HIGH_PRESS_VAC       :
    214                      case ID_AL_LOW_VAPOUR_RETURN    :
    215                      case ID_AL_HIGH_VAPOUR_RETURN   :
    216                      case ID_AL_LOW_LOADRATE         :
    217                      case ID_AL_HIGH_LOADRATE        :
    218                      case ID_AL_LEVEL_CHANGE         :
    219                      case ID_AL_DENS_DIFF            :
    220                      case ID_AL_LOW_LINE_PRESS       :
    221                      case ID_AL_HIGH_LINE_PRESS      :
    222                      case ID_AL_HIGHHIGH_LINE_PRESS  :
    223                      case ID_AL_TWM_ELAPSED_TIME  :
    224                      case ID_AL_TWM_LOW_SPEED  :
    225                          break;
    226                      }
    227                  }
    228              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??RestoreSettings_4:
   \   00000390   0020A0E3           MOV      R2,#+0
   \   00000394   0110A0E3           MOV      R1,#+1
   \   00000398   74008DE2           ADD      R0,SP,#+116
   \   0000039C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A0   000057E3           CMP      R7,#+0
   \   000003A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000003A8   08005011           CMPNE    R0,R8
   \   000003AC   FA0F5613           CMPNE    R6,#+1000
   \   000003B0   1CFFFF1A           BNE      ??RestoreSettings_2
    229              return (NoError);
   \   000003B4   0700A0E1           MOV      R0,R7
   \   000003B8   78DF8DE2           ADD      SP,SP,#+480
   \   000003BC   F04FBDE8           POP      {R4-R11,LR}
   \   000003C0   1EFF2FE1           BX       LR               ;; return
   \                     ??RestoreSettings_1:
   \   000003C4   ........           DC32     NewLineStr
   \   000003C8   ........           DC32     `?<Constant "Tank ">`
    230          }
    231          

   \                                 In segment CODE, align 4, keep-with-next
    232          AnalogInput* PRogramObject::FindAIFromIDNumber(unsigned AIIDNumber) {
   \                     ??FindAIFromIDNumber:
   \   00000000   30002DE9           PUSH     {R4,R5}
    233              AnalogInput *AIPtr = NULL;
   \   00000004   0020A0E3           MOV      R2,#+0
    234              unsigned type = AIIDNumber >> 16;
   \   00000008   2138A0E1           LSR      R3,R1,#+16
    235              if ( type >= C_PRO_PROJINFO && type < 10000 ) { //only to strip of fault
   \   0000000C   F240A0E3           MOV      R4,#+242
   \   00000010   C04F84E3           ORR      R4,R4,#0x300
   \   00000014   040053E1           CMP      R3,R4
   \   00000018   1400003A           BCC      ??FindAIFromIDNumber_1
   \   0000001C   1040A0E3           MOV      R4,#+16
   \   00000020   9C4D84E3           ORR      R4,R4,#0x2700
   \   00000024   040053E1           CMP      R3,R4
   \   00000028   1000002A           BCS      ??FindAIFromIDNumber_1
    236                  for ( unsigned j = 0; !AIPtr && j < AnalogInList.size(); j++ ) {
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   4BCFA0E3           MOV      R12,#+300
   \                     ??FindAIFromIDNumber_2:
   \   00000034   00408CE0           ADD      R4,R12,R0
   \   00000038   045094E5           LDR      R5,[R4, #+4]
   \   0000003C   004094E5           LDR      R4,[R4, #+0]
   \   00000040   044045E0           SUB      R4,R5,R4
   \   00000044   240153E1           CMP      R3,R4, LSR #+2
   \   00000048   0800002A           BCS      ??FindAIFromIDNumber_1
    237                      if ( AnalogInList[j]->IDNumber == AIIDNumber ) {
   \   0000004C   00409CE7           LDR      R4,[R12, +R0]
   \   00000050   034184E0           ADD      R4,R4,R3, LSL #+2
   \   00000054   005094E5           LDR      R5,[R4, #+0]
    238                          AIPtr = AnalogInList[j];
    239                      }
    240                  }
   \   00000058   013083E2           ADD      R3,R3,#+1
   \   0000005C   9C5095E5           LDR      R5,[R5, #+156]
   \   00000060   010055E1           CMP      R5,R1
   \   00000064   00209405           LDREQ    R2,[R4, #+0]
   \   00000068   000052E3           CMP      R2,#+0
   \   0000006C   F0FFFF0A           BEQ      ??FindAIFromIDNumber_2
    241              }
    242              return (AIPtr);
   \                     ??FindAIFromIDNumber_1:
   \   00000070   ........           B        ?Subroutine47
    243          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine47:
   \   00000000   3000BDE8           POP      {R4,R5}
   \   00000004   0200A0E1           MOV      R0,R2
   \   00000008   1EFF2FE1           BX       LR               ;; return
    244          
    245          ///////////////////////////////////////////////////////////////
    246          //
    247          // Routines for the librarian
    248          //
    249          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    250          AnalogInput* PRogramObject::FindAnalogInput(int Location) {
   \                     ??FindAnalogInput:
   \   00000000   30002DE9           PUSH     {R4,R5}
    251              AnalogInput *SnsPtr = NULL;
   \   00000004   0020A0E3           MOV      R2,#+0
    252              for ( unsigned j = 0; !SnsPtr && j < AnalogInList.size(); j++ ) {
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   4BCFA0E3           MOV      R12,#+300
   \                     ??FindAnalogInput_2:
   \   00000010   00408CE0           ADD      R4,R12,R0
   \   00000014   045094E5           LDR      R5,[R4, #+4]
   \   00000018   004094E5           LDR      R4,[R4, #+0]
   \   0000001C   044045E0           SUB      R4,R5,R4
   \   00000020   240153E1           CMP      R3,R4, LSR #+2
   \   00000024   0800002A           BCS      ??FindAnalogInput_3
    253                  if ( AnalogInList[j]->Location == Location ) {
   \   00000028   00409CE7           LDR      R4,[R12, +R0]
   \   0000002C   034184E0           ADD      R4,R4,R3, LSL #+2
   \   00000030   005094E5           LDR      R5,[R4, #+0]
    254                      SnsPtr = AnalogInList[j];
    255                  }
    256              }
   \   00000034   013083E2           ADD      R3,R3,#+1
   \   00000038   285195E5           LDR      R5,[R5, #+296]
   \   0000003C   010055E1           CMP      R5,R1
   \   00000040   00209405           LDREQ    R2,[R4, #+0]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   F0FFFF0A           BEQ      ??FindAnalogInput_2
    257              return (SnsPtr);
   \                     ??FindAnalogInput_3:
   \   0000004C                      REQUIRE ?Subroutine47
   \   0000004C                      ;; // Fall through to label ?Subroutine47
    258          }

   \                                 In segment CODE, align 4, keep-with-next
    259          AnalogInput* PRogramObject::FindAnalogInput(int Location, int BasicSensorType) {
   \                     ??FindAnalogInput_1:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    260              AnalogInput *SnsPtr = NULL;
   \   00000010   0070A0E3           MOV      R7,#+0
    261              for ( unsigned j = 0; !SnsPtr && j < AnalogInList.size(); j++ ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   4B9FA0E3           MOV      R9,#+300
   \                     ??FindAnalogInput_4:
   \   0000001C   040089E0           ADD      R0,R9,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   200158E1           CMP      R8,R0, LSR #+2
   \   00000030   0D00002A           BCS      ??FindAnalogInput_5
    262                  int Loc = AnalogInList[j]->Location;
    263                  if ( Loc == Location && AnalogInList[j]->GetBasicSensorType() == BasicSensorType ) {
   \   00000034   040099E7           LDR      R0,[R9, +R4]
   \   00000038   080180E0           ADD      R0,R0,R8, LSL #+2
   \   0000003C   001090E5           LDR      R1,[R0, #+0]
   \   00000040   281191E5           LDR      R1,[R1, #+296]
   \   00000044   050051E1           CMP      R1,R5
   \   00000048   0400001A           BNE      ??FindAnalogInput_6
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   ........           _BLF     ??GetBasicSensorType,??GetBasicSensorType??rA
   \   00000054   060050E1           CMP      R0,R6
    264                      SnsPtr = AnalogInList[j];
   \   00000058   04009907           LDREQ    R0,[R9, +R4]
   \   0000005C   08719007           LDREQ    R7,[R0, +R8, LSL #+2]
    265                  }
    266              }
   \                     ??FindAnalogInput_6:
   \   00000060   018088E2           ADD      R8,R8,#+1
   \   00000064   000057E3           CMP      R7,#+0
   \   00000068   EBFFFF0A           BEQ      ??FindAnalogInput_4
    267              return (SnsPtr);
   \                     ??FindAnalogInput_5:
   \   0000006C   ........           B        ?Subroutine48
    268          }
    269          

   \                                 In segment CODE, align 4, keep-with-next
    270          AnalogInput* PRogramObject::FindAllAnalogInput(int Location, int BasicSensorType) {
   \                     ??FindAllAnalogInput:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    271              AnalogInput *SnsPtr = NULL;
   \   00000010   0070A0E3           MOV      R7,#+0
    272              for ( unsigned j = 0; !SnsPtr && j < AllAnalogInList.size(); j++ ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   4E9FA0E3           MOV      R9,#+312
   \                     ??FindAllAnalogInput_1:
   \   0000001C   040089E0           ADD      R0,R9,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   200158E1           CMP      R8,R0, LSR #+2
   \   00000030   0D00002A           BCS      ??FindAllAnalogInput_2
    273                  int Loc = AllAnalogInList[j]->Location;
    274                  if ( Loc == Location && AllAnalogInList[j]->GetBasicSensorType() == BasicSensorType ) {
   \   00000034   040099E7           LDR      R0,[R9, +R4]
   \   00000038   080180E0           ADD      R0,R0,R8, LSL #+2
   \   0000003C   001090E5           LDR      R1,[R0, #+0]
   \   00000040   281191E5           LDR      R1,[R1, #+296]
   \   00000044   050051E1           CMP      R1,R5
   \   00000048   0400001A           BNE      ??FindAllAnalogInput_3
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   ........           _BLF     ??GetBasicSensorType,??GetBasicSensorType??rA
   \   00000054   060050E1           CMP      R0,R6
    275                      SnsPtr = AllAnalogInList[j];
   \   00000058   04009907           LDREQ    R0,[R9, +R4]
   \   0000005C   08719007           LDREQ    R7,[R0, +R8, LSL #+2]
    276                  }
    277              }
   \                     ??FindAllAnalogInput_3:
   \   00000060   018088E2           ADD      R8,R8,#+1
   \   00000064   000057E3           CMP      R7,#+0
   \   00000068   EBFFFF0A           BEQ      ??FindAllAnalogInput_1
    278              return (SnsPtr);
   \                     ??FindAllAnalogInput_2:
   \   0000006C                      REQUIRE ?Subroutine48
   \   0000006C                      ;; // Fall through to label ?Subroutine48
    279          }

   \                                 In segment CODE, align 4, keep-with-next
    280          int PRogramObject::FindTypeNumberOfSensors(int BasicSensorType) {
   \                     ??FindTypeNumberOfSensors:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    281              int tmpCnt = 0;
   \   0000000C   0070A0E3           MOV      R7,#+0
    282              for ( unsigned j = 0; j < AnalogInList.size(); j++ ) {
   \   00000010   0080A0E3           MOV      R8,#+0
   \   00000014   4B6FA0E3           MOV      R6,#+300
   \   00000018   ........           B        ?Subroutine46
    283                  if ( AnalogInList[j]->GetBasicSensorType() == BasicSensorType ) {
    284                      tmpCnt++;
    285                  }
    286              }
    287              return (tmpCnt);
    288          }
    289          

   \                                 In segment CODE, align 4, keep-with-next
    290          int PRogramObject::FindTypeNumberOfAllSensors(int BasicSensorType) {
   \                     ??FindTypeNumberOfAllSensors:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    291              int tmpCnt = 0;
   \   0000000C   0070A0E3           MOV      R7,#+0
    292              for ( unsigned j = 0;  j < AllAnalogInList.size(); j++ ) {
   \   00000010   0080A0E3           MOV      R8,#+0
   \   00000014   4E6FA0E3           MOV      R6,#+312
   \   00000018                      REQUIRE ?Subroutine46
   \   00000018                      ;; // Fall through to label ?Subroutine46
    293                  if ( AllAnalogInList[j]->GetBasicSensorType() == BasicSensorType ) {
    294                      tmpCnt++;
    295                  }
    296              }
    297              return (tmpCnt);
    298          }
    299          

   \                                 In segment CODE, align 4, keep-with-next
    300          int PRogramObject::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
    301              return (PRogramObjectBase::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit));
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    302          }
    303          

   \                                 In segment CODE, align 4, keep-with-next
    304          int PRogramObject::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   03C0A0E1           MOV      R12,R3
    305              int Status = GETVAL_NO_ERR;
   \   00000008   0040A0E3           MOV      R4,#+0
    306              switch ( ValueId ) {
   \   0000000C   16E0A0E3           MOV      LR,#+22
   \   00000010   50EE8EE3           ORR      LR,LR,#0x500
   \   00000014   0E0051E1           CMP      R1,LR
   \   00000018   0600001A           BNE      ??GetStringValue_2
    307              case SVT_PRO_LONGNAME:
    308                  MyString = LongName;
   \   0000001C   ........           LDR      R1,??DataTable25  ;; ??npos
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   003091E5           LDR      R3,[R1, #+0]
   \   00000028   C41080E2           ADD      R1,R0,#+196
   \   0000002C   0C00A0E1           MOV      R0,R12
   \   00000030   ........           _BLF     ??assign,??assign??rA
   \   00000034   010000EA           B        ??GetStringValue_3
    309                  break;
    310              default:
    311                  Status = PRogramObjectBase::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000038   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   0000003C   0040A0E1           MOV      R4,R0
    312                  break;
    313              }
    314              return (Status);
   \                     ??GetStringValue_3:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           B        ?Subroutine50
    315          }
    316          

   \                                 In segment CODE, align 4, keep-with-next
    317          int PRogramObject::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   3470DDE5           LDRB     R7,[SP, #+52]
   \   0000000C   38809DE5           LDR      R8,[SP, #+56]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    318              return (PRogramObjectBase::PutValue(ValueId, Index, NewValue, Local, UnitId));
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??string,??string??rA
   \   00000028   00012DE9           PUSH     {R8}
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   24D08DE2           ADD      SP,SP,#+36
   \   00000060   ........           B        ??Subroutine46_0
    319          }
    320          

   \                                 In segment CODE, align 4, keep-with-next
    321          int PRogramObject::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    322              return (PRogramObjectBase::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine52
   \   00000008                      ;; // Fall through to label ?Subroutine52
    323          }
    324          

   \                                 In segment CODE, align 4, keep-with-next
    325          void PRogramObject::Calculate(void) {
    326          }
   \                     ??Calculate:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    327          void PRogramObject::AddAlarms(set<AlarmBasic *> &AlInfoList) {
   \                     ??AddAlarms:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    328              set<AlarmBasic *>::iterator pBIt;
    329              for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   00000008   E46094E5           LDR      R6,[R4, #+228]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   060000EA           B        ??AddAlarms_2
    330                  AlInfoList.insert(*pBIt);
   \                     ??AddAlarms_3:
   \   00000014   102096E5           LDR      R2,[R6, #+16]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??insert,??insert??rA_1
    331              }
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000002C   0060A0E1           MOV      R6,R0
   \                     ??AddAlarms_2:
   \   00000030   E40084E2           ADD      R0,R4,#+228
   \   00000034   000056E1           CMP      R6,R0
   \   00000038   F5FFFF1A           BNE      ??AddAlarms_3
    332          }
   \   0000003C   ........           B        ?Subroutine53

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine53:
   \   00000000   7340BDE8           POP      {R0,R1,R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          void PRogramObject::AddToExternalAlarms(set<AlarmBasic *> &AlInfoList) {
   \                     ??AddToExternalAlarms:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    335              set<AlarmBasic *>::iterator pBIt;
    336              for ( pBIt = AlInfoList.begin(); pBIt != AlInfoList.end(); pBIt++ ) {
   \   0000000C   006095E5           LDR      R6,[R5, #+0]
   \   00000010   060000EA           B        ??AddToExternalAlarms_1
    337                  ExternalAlarmList.insert(*pBIt);
   \                     ??AddToExternalAlarms_2:
   \   00000014   102096E5           LDR      R2,[R6, #+16]
   \   00000018   451F84E2           ADD      R1,R4,#+276
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??insert,??insert??rA_1
    338              }
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000002C   0060A0E1           MOV      R6,R0
   \                     ??AddToExternalAlarms_1:
   \   00000030   050056E1           CMP      R6,R5
   \   00000034   F6FFFF1A           BNE      ??AddToExternalAlarms_2
    339          }
   \   00000038                      REQUIRE ?Subroutine53
   \   00000038                      ;; // Fall through to label ?Subroutine53
    340          

   \                                 In segment CODE, align 4, keep-with-next
    341          void PRogramObject::AddCompleteList(set<AlarmBasic *> &AlInfoList) {
   \                     ??AddCompleteList:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    342              AddSensorAlarms();
   \   0000000C   ........           BL       ??AddSensorAlarms
    343              set<AlarmBasic *>::iterator pBIt;
    344              for ( pBIt = CompleteAlarmInfoList.begin(); pBIt != CompleteAlarmInfoList.end(); pBIt++ ) {
   \   00000010   FC6094E5           LDR      R6,[R4, #+252]
   \   00000014   060000EA           B        ??AddCompleteList_1
    345                  AlInfoList.insert(*pBIt);
   \                     ??AddCompleteList_2:
   \   00000018   102096E5           LDR      R2,[R6, #+16]
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     ??insert,??insert??rA_1
    346              }
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000030   0060A0E1           MOV      R6,R0
   \                     ??AddCompleteList_1:
   \   00000034   FC0084E2           ADD      R0,R4,#+252
   \   00000038   000056E1           CMP      R6,R0
   \   0000003C   F5FFFF1A           BNE      ??AddCompleteList_2
    347          }
   \   00000040   ........           B        ?Subroutine53
    348          

   \                                 In segment CODE, align 4, keep-with-next
    349          void PRogramObject::AddSensorAlarms(void) {
   \                     ??AddSensorAlarms:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    350              for ( unsigned i = 0; i < AnalogInList.size(); i++ ) {
   \   00000008   0060A0E3           MOV      R6,#+0
   \   0000000C   4B5FA0E3           MOV      R5,#+300
   \   00000010   080000EA           B        ??AddSensorAlarms_1
    351                  AnalogInList[i]->AddAlarms(CompleteAlarmInfoList);
   \                     ??AddSensorAlarms_2:
   \   00000014   040095E7           LDR      R0,[R5, +R4]
   \   00000018   FC1084E2           ADD      R1,R4,#+252
   \   0000001C   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   00000020   ........           _BLF     ??AddAlarms_1,??AddAlarms??rA
    352                  AnalogInList[i]->SetPROPtr((PRogramObject *)this);
   \   00000024   040095E7           LDR      R0,[R5, +R4]
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    353              }
   \   00000030   016086E2           ADD      R6,R6,#+1
   \   00000034   ........           _BLF     ??SetPROPtr,??SetPROPtr??rA
   \                     ??AddSensorAlarms_1:
   \   00000038   040085E0           ADD      R0,R5,R4
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000041E0           SUB      R0,R1,R0
   \   00000048   200156E1           CMP      R6,R0, LSR #+2
   \   0000004C   F0FFFF3A           BCC      ??AddSensorAlarms_2
    354          }
   \   00000050   ........           B        ?Subroutine54

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine54:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    355          
    356          

   \                                 In segment CODE, align 4, keep-with-next
    357          void PRogramObject::CreateAlarms(void) {
    358          
    359          }
   \                     ??CreateAlarms:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    360          

   \                                 In segment CODE, align 4, keep-with-next
    361          int PRogramObject::WriteXML(char *StrBuf, bool IncAlarms) {
    362              return 0;
   \                     ??WriteXML:
   \   00000000   ........           B        ?Subroutine55
    363          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine55:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    364          int PRogramObject::LCWriteXML(char *StrBuf) {
    365              return 0;
   \                     ??LCWriteXML:
   \   00000000                      REQUIRE ?Subroutine55
   \   00000000                      ;; // Fall through to label ?Subroutine55
    366          }
    367          

   \                                 In segment CODE, align 4, keep-with-next
    368          void PRogramObject::RemoveAnalogInI(int Index, bool DeleteAI) {
   \                     ??RemoveAnalogInI:
   \   00000000   00402DE9           PUSH     {LR}
    369              if ( Index >= 0 && Index < (int)AnalogInList.size() ) {
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0800004A           BMI      ??RemoveAnalogInI_1
   \   0000000C   4B3F80E2           ADD      R3,R0,#+300
   \   00000010   04C093E5           LDR      R12,[R3, #+4]
   \   00000014   003093E5           LDR      R3,[R3, #+0]
   \   00000018   03304CE0           SUB      R3,R12,R3
   \   0000001C   230151E1           CMP      R1,R3, LSR #+2
   \   00000020   020000AA           BGE      ??RemoveAnalogInI_1
    370                  RemoveAnalogInP(AllAnalogInList[Index], DeleteAI);
   \   00000024   383190E5           LDR      R3,[R0, #+312]
   \   00000028   011193E7           LDR      R1,[R3, +R1, LSL #+2]
   \   0000002C   ........           BL       ??RemoveAnalogInP
    371              }
    372          }
   \                     ??RemoveAnalogInI_1:
   \   00000030   ........           B        ?Subroutine52
    373          

   \                                 In segment CODE, align 4, keep-with-next
    374          void PRogramObject::RemoveAnalogInP(AnalogInput *AIPtr, bool DeleteAI) {
   \                     ??RemoveAnalogInP:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    375              if ( AIPtr ) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   2400000A           BEQ      ??RemoveAnalogInP_1
    376                  //bool NotFound = true;
    377                  vector<AnalogInput *>::iterator Iter;
    378          
    379                  for ( Iter = AnalogInList.begin(); Iter != AnalogInList.end(); Iter++ ) {
   \   00000018   4B7FA0E3           MOV      R7,#+300
   \   0000001C   048097E7           LDR      R8,[R7, +R4]
   \   00000020   060000EA           B        ??RemoveAnalogInP_2
    380                      if ( AIPtr == *Iter ) {
   \                     ??RemoveAnalogInP_3:
   \   00000024   000098E5           LDR      R0,[R8, #+0]
   \   00000028   000055E1           CMP      R5,R0
   \   0000002C   0200001A           BNE      ??RemoveAnalogInP_4
    381                          AnalogInList.erase(Iter);
   \   00000030   0810A0E1           MOV      R1,R8
   \   00000034   040087E0           ADD      R0,R7,R4
   \   00000038   ........           _BLF     ??erase_5,??erase??rA_4
    382                      }
    383                  }
   \                     ??RemoveAnalogInP_4:
   \   0000003C   048088E2           ADD      R8,R8,#+4
   \                     ??RemoveAnalogInP_2:
   \   00000040   300194E5           LDR      R0,[R4, #+304]
   \   00000044   000058E1           CMP      R8,R0
   \   00000048   F5FFFF1A           BNE      ??RemoveAnalogInP_3
    384                  for ( Iter = AllAnalogInList.begin(); Iter != AllAnalogInList.end(); Iter++ ) {
   \   0000004C   4E7FA0E3           MOV      R7,#+312
   \   00000050   048097E7           LDR      R8,[R7, +R4]
   \   00000054   060000EA           B        ??RemoveAnalogInP_5
    385                      if ( AIPtr == *Iter ) {
   \                     ??RemoveAnalogInP_6:
   \   00000058   000098E5           LDR      R0,[R8, #+0]
   \   0000005C   000055E1           CMP      R5,R0
   \   00000060   0200001A           BNE      ??RemoveAnalogInP_7
    386                          AllAnalogInList.erase(Iter);
   \   00000064   0810A0E1           MOV      R1,R8
   \   00000068   040087E0           ADD      R0,R7,R4
   \   0000006C   ........           _BLF     ??erase_5,??erase??rA_4
    387                      }
    388                  }
   \                     ??RemoveAnalogInP_7:
   \   00000070   048088E2           ADD      R8,R8,#+4
   \                     ??RemoveAnalogInP_5:
   \   00000074   3C0194E5           LDR      R0,[R4, #+316]
   \   00000078   000058E1           CMP      R8,R0
   \   0000007C   F5FFFF1A           BNE      ??RemoveAnalogInP_6
    389                  if ( DeleteAI ) {
   \   00000080   000056E3           CMP      R6,#+0
   \   00000084   0800000A           BEQ      ??RemoveAnalogInP_1
    390                      AnalogInput::GlobalAISet.erase(AIPtr);
   \   00000088   20009FE5           LDR      R0,??RemoveAnalogInP_8  ;; ??GlobalAISet
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   ........           _BLF     ??erase_4,??erase??rA_5
    391                      delete AIPtr;
   \   00000094   A42095E5           LDR      R2,[R5, #+164]
   \   00000098   0310A0E3           MOV      R1,#+3
   \   0000009C   002092E5           LDR      R2,[R2, #+0]
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   0FE0A0E1           MOV      LR,PC
   \   000000A8   12FF2FE1           BX       R2
    392                  }
    393              }
    394          
    395          }
   \                     ??RemoveAnalogInP_1:
   \   000000AC   ........           B        ??Subroutine46_0
   \                     ??RemoveAnalogInP_8:
   \   000000B0   ........           DC32     ??GlobalAISet
    396          

   \                                 In segment CODE, align 4, keep-with-next
    397          void PRogramObject::AddAnalogIn(AnalogInput *AIPtr) {
   \                     ??AddAnalogIn:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    398              AnalogInList.push_back(AIPtr);
   \   0000000C   4B0F84E2           ADD      R0,R4,#+300
   \   00000010   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_2
    399              AllAnalogInList.push_back(AIPtr);
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   4E0F84E2           ADD      R0,R4,#+312
   \   0000001C   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_2
    400          }
   \   00000020   ........           B        ??Subroutine49_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine49:
   \   00000000   0500A0E1           MOV      R0,R5
   \                     ??Subroutine49_0:
   \   00000004   3040BDE8           POP      {R4,R5,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
    401          

   \                                 In segment CODE, align 4, keep-with-next
    402          void PRogramObject::SetChildUserRights(void) {
   \                     ??SetChildUserRights:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    403          
    404              for ( unsigned i = 0; i < AnalogInList.size(); i++ ) {
   \   00000008   0060A0E3           MOV      R6,#+0
   \   0000000C   4B5FA0E3           MOV      R5,#+300
   \   00000010   0A0000EA           B        ??SetChildUserRights_2
    405                  AnalogInList[i]->ReadPermissionSet  = ReadPermissionSet;
   \                     ??SetChildUserRights_3:
   \   00000014   040095E7           LDR      R0,[R5, +R4]
   \   00000018   081084E2           ADD      R1,R4,#+8
   \   0000001C   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   00000020   080080E2           ADD      R0,R0,#+8
   \   00000024   ........           _BLF     `??operator=`,`??operator=??rA`
    406                  AnalogInList[i]->WritePermissionSet = WritePermissionSet;
   \   00000028   040095E7           LDR      R0,[R5, +R4]
   \   0000002C   201084E2           ADD      R1,R4,#+32
   \   00000030   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    407              }
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   200080E2           ADD      R0,R0,#+32
   \   0000003C   ........           _BLF     `??operator=`,`??operator=??rA`
   \                     ??SetChildUserRights_2:
   \   00000040   040085E0           ADD      R0,R5,R4
   \   00000044   041090E5           LDR      R1,[R0, #+4]
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000041E0           SUB      R0,R1,R0
   \   00000050   200156E1           CMP      R6,R0, LSR #+2
   \   00000054   EEFFFF3A           BCC      ??SetChildUserRights_3
    408              set<AlarmBasic *>::iterator ObjIt;
    409              for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   00000058   E45094E5           LDR      R5,[R4, #+228]
   \   0000005C   0A0000EA           B        ??SetChildUserRights_4
    410                  (*ObjIt)->ReadPermissionSet  = ReadPermissionSet;
   \                     ??SetChildUserRights_5:
   \   00000060   100095E5           LDR      R0,[R5, #+16]
   \   00000064   081084E2           ADD      R1,R4,#+8
   \   00000068   080080E2           ADD      R0,R0,#+8
   \   0000006C   ........           _BLF     `??operator=`,`??operator=??rA`
    411                  (*ObjIt)->WritePermissionSet = WritePermissionSet;
   \   00000070   100095E5           LDR      R0,[R5, #+16]
   \   00000074   201084E2           ADD      R1,R4,#+32
   \   00000078   200080E2           ADD      R0,R0,#+32
   \   0000007C   ........           _BLF     `??operator=`,`??operator=??rA`
    412              }
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000088   0050A0E1           MOV      R5,R0
   \                     ??SetChildUserRights_4:
   \   0000008C   E40084E2           ADD      R0,R4,#+228
   \   00000090   000055E1           CMP      R5,R0
   \   00000094   F1FFFF1A           BNE      ??SetChildUserRights_5
    413          }
   \   00000098                      REQUIRE ?Subroutine54
   \   00000098                      ;; // Fall through to label ?Subroutine54
    414          

   \                                 In segment CODE, align 4, keep-with-next
    415          void PRogramObject::SetChildUserRights(PRogramObject *Child) {
   \                     ??SetChildUserRights_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    416              if ( Child ) {
   \   0000000C   0700000A           BEQ      ??SetChildUserRights_6
    417                  Child->ReadPermissionSet  = ReadPermissionSet;
   \   00000010   081084E2           ADD      R1,R4,#+8
   \   00000014   080085E2           ADD      R0,R5,#+8
   \   00000018   ........           _BLF     `??operator=`,`??operator=??rA`
    418                  Child->WritePermissionSet = WritePermissionSet;
   \   0000001C   201084E2           ADD      R1,R4,#+32
   \   00000020   200085E2           ADD      R0,R5,#+32
   \   00000024   ........           _BLF     `??operator=`,`??operator=??rA`
    419                  Child->SetChildUserRights();
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       ??SetChildUserRights
    420              }
    421          }
   \                     ??SetChildUserRights_6:
   \   00000030   ........           B        ??Subroutine49_0
    422          
    423          

   \                                 In segment CODE, align 4, keep-with-next
    424          void PRogramObject::MergeChildUserRights(PRogramObject *Child) {
   \                     ??MergeChildUserRights:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   C0D04DE2           SUB      SP,SP,#+192
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    425          
    426              if ( Child ) {
   \   00000010   6500000A           BEQ      ??MergeChildUserRights_1
    427                  // First merge my direct r/w permissions
    428                  MergeSet(Child->ReadPermissionSet, ReadPermissionSet);
   \   00000014   081084E2           ADD      R1,R4,#+8
   \   00000018   78008DE2           ADD      R0,SP,#+120
   \   0000001C   ........           _BLF     ??set,??set??rA_1
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   081085E2           ADD      R1,R5,#+8
   \   00000028   60008DE2           ADD      R0,SP,#+96
   \   0000002C   ........           _BLF     ??set,??set??rA_1
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   00000038   78008DE2           ADD      R0,SP,#+120
   \   0000003C   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000040   60008DE2           ADD      R0,SP,#+96
   \   00000044   ........           _BLF     ??clear_1,??clear??rA_1
    429                  MergeSet(Child->WritePermissionSet, WritePermissionSet);
   \   00000048   201084E2           ADD      R1,R4,#+32
   \   0000004C   A8008DE2           ADD      R0,SP,#+168
   \   00000050   ........           _BLF     ??set,??set??rA_1
   \   00000054   0060A0E1           MOV      R6,R0
   \   00000058   201085E2           ADD      R1,R5,#+32
   \   0000005C   90008DE2           ADD      R0,SP,#+144
   \   00000060   ........           _BLF     ??set,??set??rA_1
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   0000006C   A8008DE2           ADD      R0,SP,#+168
   \   00000070   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000074   90008DE2           ADD      R0,SP,#+144
   \   00000078   ........           _BLF     ??clear_1,??clear??rA_1
    430                  // Time for merging the analog inputs
    431                  for ( unsigned i = 0; i < AnalogInList.size(); i++ ) {
   \   0000007C   0050A0E3           MOV      R5,#+0
   \   00000080   4B6FA0E3           MOV      R6,#+300
   \   00000084   1E0000EA           B        ??MergeChildUserRights_2
    432                      MergeSet(AnalogInList[i]->ReadPermissionSet, ReadPermissionSet);
   \                     ??MergeChildUserRights_3:
   \   00000088   081084E2           ADD      R1,R4,#+8
   \   0000008C   30008DE2           ADD      R0,SP,#+48
   \   00000090   ........           _BLF     ??set,??set??rA_1
   \   00000094   0070A0E1           MOV      R7,R0
   \   00000098   040096E7           LDR      R0,[R6, +R4]
   \   0000009C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   000000A0   081080E2           ADD      R1,R0,#+8
   \   000000A4   48008DE2           ADD      R0,SP,#+72
   \   000000A8   ........           _BLF     ??set,??set??rA_1
   \   000000AC   0710A0E1           MOV      R1,R7
   \   000000B0   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   000000B4   30008DE2           ADD      R0,SP,#+48
   \   000000B8   ........           _BLF     ??clear_1,??clear??rA_1
   \   000000BC   48008DE2           ADD      R0,SP,#+72
   \   000000C0   ........           _BLF     ??clear_1,??clear??rA_1
    433                      MergeSet(AnalogInList[i]->WritePermissionSet, WritePermissionSet);
   \   000000C4   201084E2           ADD      R1,R4,#+32
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           _BLF     ??set,??set??rA_1
   \   000000D0   0070A0E1           MOV      R7,R0
   \   000000D4   040096E7           LDR      R0,[R6, +R4]
   \   000000D8   050190E7           LDR      R0,[R0, +R5, LSL #+2]
    434                  }
   \   000000DC   015085E2           ADD      R5,R5,#+1
   \   000000E0   201080E2           ADD      R1,R0,#+32
   \   000000E4   18008DE2           ADD      R0,SP,#+24
   \   000000E8   ........           _BLF     ??set,??set??rA_1
   \   000000EC   0710A0E1           MOV      R1,R7
   \   000000F0   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           _BLF     ??clear_1,??clear??rA_1
   \   000000FC   18008DE2           ADD      R0,SP,#+24
   \   00000100   ........           _BLF     ??clear_1,??clear??rA_1
   \                     ??MergeChildUserRights_2:
   \   00000104   040086E0           ADD      R0,R6,R4
   \   00000108   041090E5           LDR      R1,[R0, #+4]
   \   0000010C   000090E5           LDR      R0,[R0, #+0]
   \   00000110   000041E0           SUB      R0,R1,R0
   \   00000114   200155E1           CMP      R5,R0, LSR #+2
   \   00000118   DAFFFF3A           BCC      ??MergeChildUserRights_3
    435                  // Time for merging the alarms
    436                  set<AlarmBasic *>::iterator ObjIt;
    437                  for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   0000011C   E45094E5           LDR      R5,[R4, #+228]
   \   00000120   1E0000EA           B        ??MergeChildUserRights_4
    438                      MergeSet((*ObjIt)->ReadPermissionSet, ReadPermissionSet);
   \                     ??MergeChildUserRights_5:
   \   00000124   081084E2           ADD      R1,R4,#+8
   \   00000128   18008DE2           ADD      R0,SP,#+24
   \   0000012C   ........           _BLF     ??set,??set??rA_1
   \   00000130   0060A0E1           MOV      R6,R0
   \   00000134   100095E5           LDR      R0,[R5, #+16]
   \   00000138   081080E2           ADD      R1,R0,#+8
   \   0000013C   0D00A0E1           MOV      R0,SP
   \   00000140   ........           _BLF     ??set,??set??rA_1
   \   00000144   0610A0E1           MOV      R1,R6
   \   00000148   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   0000014C   18008DE2           ADD      R0,SP,#+24
   \   00000150   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000154   0D00A0E1           MOV      R0,SP
   \   00000158   ........           _BLF     ??clear_1,??clear??rA_1
    439                      MergeSet((*ObjIt)->WritePermissionSet, WritePermissionSet);
   \   0000015C   201084E2           ADD      R1,R4,#+32
   \   00000160   48008DE2           ADD      R0,SP,#+72
   \   00000164   ........           _BLF     ??set,??set??rA_1
   \   00000168   0060A0E1           MOV      R6,R0
   \   0000016C   100095E5           LDR      R0,[R5, #+16]
   \   00000170   201080E2           ADD      R1,R0,#+32
   \   00000174   30008DE2           ADD      R0,SP,#+48
   \   00000178   ........           _BLF     ??set,??set??rA_1
   \   0000017C   0610A0E1           MOV      R1,R6
   \   00000180   ........           _BLF     ??MergeSet,??MergeSet??rA
   \   00000184   48008DE2           ADD      R0,SP,#+72
   \   00000188   ........           _BLF     ??clear_1,??clear??rA_1
   \   0000018C   30008DE2           ADD      R0,SP,#+48
   \   00000190   ........           _BLF     ??clear_1,??clear??rA_1
    440                  }
   \   00000194   0500A0E1           MOV      R0,R5
   \   00000198   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000019C   0050A0E1           MOV      R5,R0
   \                     ??MergeChildUserRights_4:
   \   000001A0   E40084E2           ADD      R0,R4,#+228
   \   000001A4   000055E1           CMP      R5,R0
   \   000001A8   DDFFFF1A           BNE      ??MergeChildUserRights_5
    441              }
    442          }
   \                     ??MergeChildUserRights_1:
   \   000001AC   C0D08DE2           ADD      SP,SP,#+192
   \   000001B0                      REQUIRE ?Subroutine51
   \   000001B0                      ;; // Fall through to label ?Subroutine51
    443          
    444          //----------------------------------------------------------------------
    445          

   \                                 In segment CODE, align 4, keep-with-next
    446          AnsiString PRogramObject::GetHWAlarms(void) {
   \                     ??GetHWAlarms:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
    447              AnsiString MsgStr;
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
    448              set<AlarmBasic *>ActiveAlarmSet;
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??set_1,??set??rA
    449          
    450              set<AlarmBasic *>::iterator ObjIt;
    451              for ( ObjIt = CompleteAlarmInfoList.begin(); ObjIt != CompleteAlarmInfoList.end(); ObjIt++ ) {
   \   00000020   FC5096E5           LDR      R5,[R6, #+252]
   \   00000024   0A0000EA           B        ??GetHWAlarms_1
    452                  AlarmBasic *ALPtr = *ObjIt;
   \                     ??GetHWAlarms_2:
   \   00000028   102095E5           LDR      R2,[R5, #+16]
    453                  switch ( ALPtr->State ) {
   \   0000002C   E000D2E5           LDRB     R0,[R2, #+224]
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   0200008A           BHI      ??GetHWAlarms_3
    454                  case AlarmBasic::AlAknowledged  :
    455                  case AlarmBasic::AlActive       :
    456                      ActiveAlarmSet.insert(ALPtr);
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   50008DE2           ADD      R0,SP,#+80
   \   00000044   ........           _BLF     ??insert,??insert??rA_1
    457                      break;
    458                  case AlarmBasic::AlIdle         :
    459                  case AlarmBasic::AlBlocked    	:
    460                      break;
    461          
    462                  }
    463              }
   \                     ??GetHWAlarms_3:
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000050   0050A0E1           MOV      R5,R0
   \                     ??GetHWAlarms_1:
   \   00000054   FC0086E2           ADD      R0,R6,#+252
   \   00000058   000055E1           CMP      R5,R0
   \   0000005C   F1FFFF1A           BNE      ??GetHWAlarms_2
    464              for ( ObjIt = ActiveAlarmSet.begin(); ObjIt != ActiveAlarmSet.end(); ObjIt++ ) {
   \   00000060   00509DE5           LDR      R5,[SP, #+0]
   \   00000064   1B0000EA           B        ??GetHWAlarms_4
    465                  AlarmBasic *ALPtr = *ObjIt;
   \                     ??GetHWAlarms_5:
   \   00000068   102095E5           LDR      R2,[R5, #+16]
    466                  MsgStr += ALPtr->Get_CompleteMessage() + CrStr;
   \   0000006C   34108DE2           ADD      R1,SP,#+52
   \   00000070   0200A0E1           MOV      R0,R2
   \   00000074   A42092E5           LDR      R2,[R2, #+164]
   \   00000078   5C2092E5           LDR      R2,[R2, #+92]
   \   0000007C   0FE0A0E1           MOV      LR,PC
   \   00000080   12FF2FE1           BX       R2
   \   00000084   ........           LDR      R2,??DataTable22  ;; CrStr
   \   00000088   34108DE2           ADD      R1,SP,#+52
   \   0000008C   18008DE2           ADD      R0,SP,#+24
   \   00000090   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000094   ........           LDR      R0,??DataTable25  ;; ??npos
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   003090E5           LDR      R3,[R0, #+0]
   \   000000A0   18108DE2           ADD      R1,SP,#+24
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           _BLF     ??append,??append??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   18008DE2           ADD      R0,SP,#+24
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   34008DE2           ADD      R0,SP,#+52
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    467              }
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000D4   0050A0E1           MOV      R5,R0
   \                     ??GetHWAlarms_4:
   \   000000D8   0D00A0E1           MOV      R0,SP
   \   000000DC   000055E1           CMP      R5,R0
   \   000000E0   E0FFFF1A           BNE      ??GetHWAlarms_5
    468              return MsgStr;
   \   000000E4   ........           _BLF     `?~set_1`,`?~set??rA`
   \   000000E8   58D08DE2           ADD      SP,SP,#+88
   \   000000EC   ........           B        ?Subroutine54
    469          }

   \                                 In segment CODE, align 4, keep-with-next
    470          AnsiString PRogramObject::GetAlarms(void) {
   \                     ??GetAlarms:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    471              AnsiString MsgStr;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
    472              set<AlarmBasic *>::iterator ObjIt;
    473              for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   00000018   E46094E5           LDR      R6,[R4, #+228]
   \   0000001C   1F0000EA           B        ??GetAlarms_1
    474                  AlarmBasic *ALPtr = *ObjIt;
   \                     ??GetAlarms_2:
   \   00000020   102096E5           LDR      R2,[R6, #+16]
    475                  switch ( ALPtr->State ) {
   \   00000024   E000D2E5           LDRB     R0,[R2, #+224]
   \   00000028   010040E2           SUB      R0,R0,#+1
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   1700008A           BHI      ??GetAlarms_3
    476                  case AlarmBasic::AlAknowledged  :
    477                  case AlarmBasic::AlActive       :
    478                      MsgStr += ALPtr->Get_Message() + CrStr;
   \   00000034   0200A0E1           MOV      R0,R2
   \   00000038   A42092E5           LDR      R2,[R2, #+164]
   \   0000003C   1C108DE2           ADD      R1,SP,#+28
   \   00000040   682092E5           LDR      R2,[R2, #+104]
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
   \   0000004C   ........           LDR      R2,??DataTable22  ;; CrStr
   \   00000050   1C108DE2           ADD      R1,SP,#+28
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000005C   ........           LDR      R0,??DataTable25  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   1C008DE2           ADD      R0,SP,#+28
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
    479                      break;
    480                  case AlarmBasic::AlIdle         :
    481                  case AlarmBasic::AlBlocked    :
    482                      break;
    483          
    484                  }
    485              }
   \                     ??GetAlarms_3:
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000009C   0060A0E1           MOV      R6,R0
   \                     ??GetAlarms_1:
   \   000000A0   E40084E2           ADD      R0,R4,#+228
   \   000000A4   000056E1           CMP      R6,R0
   \   000000A8   DCFFFF1A           BNE      ??GetAlarms_2
    486              return MsgStr;
   \   000000AC   38D08DE2           ADD      SP,SP,#+56
   \   000000B0   ........           B        ?Subroutine54
    487          }

   \                                 In segment CODE, align 4, keep-with-next
    488          AnsiString PRogramObject::GetWarnings(void) {
   \                     ??GetWarnings:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    489              AnsiString DisabeledAlarmMsgStr;
    490              AnsiString DisabeledSensorsMsgStr;
    491              AnsiString MsgStr;
    492              set<AlarmBasic *>::iterator ObjIt;
    493              for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   00000004   ........           LDR      R6,??DataTable22  ;; CrStr
   \   00000008   8CD04DE2           SUB      SP,SP,#+140
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   54008DE2           ADD      R0,SP,#+84
   \   00000018   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000001C   70008DE2           ADD      R0,SP,#+112
   \   00000020   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   E47094E5           LDR      R7,[R4, #+228]
   \   00000030   1E0000EA           B        ??GetWarnings_1
    494                  AlarmBasic *ALPtr = *ObjIt;
   \                     ??GetWarnings_2:
   \   00000034   102097E5           LDR      R2,[R7, #+16]
    495                  if ( !ALPtr->Enable ) {
   \   00000038   E200D2E5           LDRB     R0,[R2, #+226]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   1700001A           BNE      ??GetWarnings_3
    496                      DisabeledAlarmMsgStr += ALPtr->Get_Message() + CrStr;
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   A42092E5           LDR      R2,[R2, #+164]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   682092E5           LDR      R2,[R2, #+104]
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   12FF2FE1           BX       R2
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   1C008DE2           ADD      R0,SP,#+28
   \   00000068   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000006C   ........           LDR      R0,??DataTable25  ;; ??npos
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   003090E5           LDR      R3,[R0, #+0]
   \   00000078   1C108DE2           ADD      R1,SP,#+28
   \   0000007C   54008DE2           ADD      R0,SP,#+84
   \   00000080   ........           _BLF     ??append,??append??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   1C008DE2           ADD      R0,SP,#+28
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    497                  }
    498              }
   \                     ??GetWarnings_3:
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000AC   0070A0E1           MOV      R7,R0
   \                     ??GetWarnings_1:
   \   000000B0   E40084E2           ADD      R0,R4,#+228
   \   000000B4   000057E1           CMP      R7,R0
   \   000000B8   DDFFFF1A           BNE      ??GetWarnings_2
    499              for ( unsigned i = 0; i < AnalogInList.size(); i++ ) {
   \   000000BC   0070A0E3           MOV      R7,#+0
   \   000000C0   4B8FA0E3           MOV      R8,#+300
   \   000000C4   130000EA           B        ??GetWarnings_4
    500                  AnalogInput *AIPtr = AnalogInList[i];
   \                     ??GetWarnings_5:
   \   000000C8   040098E7           LDR      R0,[R8, +R4]
   \   000000CC   070190E7           LDR      R0,[R0, +R7, LSL #+2]
    501                  if ( !AIPtr->Enable ) {
   \   000000D0   3411D0E5           LDRB     R1,[R0, #+308]
   \   000000D4   000051E3           CMP      R1,#+0
   \   000000D8   0D00001A           BNE      ??GetWarnings_6
    502                      DisabeledSensorsMsgStr += AIPtr->Name + CrStr;
   \   000000DC   0620A0E1           MOV      R2,R6
   \   000000E0   441080E2           ADD      R1,R0,#+68
   \   000000E4   0D00A0E1           MOV      R0,SP
   \   000000E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000EC   ........           LDR      R0,??DataTable25  ;; ??npos
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   003090E5           LDR      R3,[R0, #+0]
   \   000000F8   0D10A0E1           MOV      R1,SP
   \   000000FC   70008DE2           ADD      R0,SP,#+112
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   0D00A0E1           MOV      R0,SP
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
    503                  }
    504              }
   \                     ??GetWarnings_6:
   \   00000114   017087E2           ADD      R7,R7,#+1
   \                     ??GetWarnings_4:
   \   00000118   040088E0           ADD      R0,R8,R4
   \   0000011C   041090E5           LDR      R1,[R0, #+4]
   \   00000120   000090E5           LDR      R0,[R0, #+0]
   \   00000124   000041E0           SUB      R0,R1,R0
   \   00000128   200157E1           CMP      R7,R0, LSR #+2
   \   0000012C   E5FFFF3A           BCC      ??GetWarnings_5
    505              if ( !DisabeledAlarmMsgStr.IsEmpty() ) {
   \   00000130   ........           LDR      R0,??DataTable25  ;; ??npos
   \   00000134   30719FE5           LDR      R7,??GetWarnings_7  ;; `?<Constant "The following Alarm(s...">`
   \   00000138   004090E5           LDR      R4,[R0, #+0]
   \   0000013C   54008DE2           ADD      R0,SP,#+84
   \   00000140   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   1B00001A           BNE      ??GetWarnings_8
    506                  MsgStr = "The following Alarm(s) are disabled:" + CrStr + DisabeledAlarmMsgStr;
   \   0000014C   0620A0E1           MOV      R2,R6
   \   00000150   0710A0E1           MOV      R1,R7
   \   00000154   38008DE2           ADD      R0,SP,#+56
   \   00000158   ........           _BLF     `??operator+_1`,`??operator+??rA_2`
   \   0000015C   54208DE2           ADD      R2,SP,#+84
   \   00000160   38108DE2           ADD      R1,SP,#+56
   \   00000164   1C008DE2           ADD      R0,SP,#+28
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   1C108DE2           ADD      R1,SP,#+28
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000178   0430A0E1           MOV      R3,R4
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0010A0E1           MOV      R1,R0
   \   00000184   0500A0E1           MOV      R0,R5
   \   00000188   ........           _BLF     ??assign,??assign??rA
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0110A0E3           MOV      R1,#+1
   \   00000194   0D00A0E1           MOV      R0,SP
   \   00000198   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   0110A0E3           MOV      R1,#+1
   \   000001A4   1C008DE2           ADD      R0,SP,#+28
   \   000001A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   38008DE2           ADD      R0,SP,#+56
   \   000001B8   ........           _BLF     ??_Tidy,??_Tidy??rA
    507              }
    508              if ( !DisabeledSensorsMsgStr.IsEmpty() ) {
   \                     ??GetWarnings_8:
   \   000001BC   70008DE2           ADD      R0,SP,#+112
   \   000001C0   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   1D00001A           BNE      ??GetWarnings_9
    509                  if ( !MsgStr.IsEmpty() ) {
   \   000001CC   0500A0E1           MOV      R0,R5
   \   000001D0   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   0400001A           BNE      ??GetWarnings_10
    510                      MsgStr += CrStr;
   \   000001DC   0430A0E1           MOV      R3,R4
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   0610A0E1           MOV      R1,R6
   \   000001E8   0500A0E1           MOV      R0,R5
   \   000001EC   ........           _BLF     ??append,??append??rA
    511                  }
    512                  MsgStr += "The following sensor(s) are disabled:" + CrStr + DisabeledSensorsMsgStr;
   \                     ??GetWarnings_10:
   \   000001F0   0620A0E1           MOV      R2,R6
   \   000001F4   281087E2           ADD      R1,R7,#+40
   \   000001F8   1C008DE2           ADD      R0,SP,#+28
   \   000001FC   ........           _BLF     `??operator+_1`,`??operator+??rA_2`
   \   00000200   70208DE2           ADD      R2,SP,#+112
   \   00000204   1C108DE2           ADD      R1,SP,#+28
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0430A0E1           MOV      R3,R4
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   0D10A0E1           MOV      R1,SP
   \   0000021C   0500A0E1           MOV      R0,R5
   \   00000220   ........           _BLF     ??append,??append??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   0D00A0E1           MOV      R0,SP
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   1C008DE2           ADD      R0,SP,#+28
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
    513              }
    514              return MsgStr;
   \                     ??GetWarnings_9:
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   70008DE2           ADD      R0,SP,#+112
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   54008DE2           ADD      R0,SP,#+84
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000264   8CD08DE2           ADD      SP,SP,#+140
   \   00000268   ........           B        ??Subroutine46_0
   \                     ??GetWarnings_7:
   \   0000026C   ........           DC32     `?<Constant "The following Alarm(s...">`
    515          }
    516          
    517          

   \                                 In segment CODE, align 4, keep-with-next
    518          int PRogramObject::GetNumberOfHWAlarms(void) {
   \                     ??GetNumberOfHWAlarms:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    519              int Count = 0;
    520          
    521              set<AlarmBasic *>::iterator ObjIt;
    522              for ( ObjIt = CompleteAlarmInfoList.begin(); ObjIt != CompleteAlarmInfoList.end(); ObjIt++ ) {
   \   00000008   FC0094E5           LDR      R0,[R4, #+252]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   080000EA           B        ??GetNumberOfHWAlarms_1
    523                  AlarmBasic *ALPtr = *ObjIt;
   \                     ??GetNumberOfHWAlarms_2:
   \   00000014   101090E5           LDR      R1,[R0, #+16]
    524          
    525                  if (ALPtr->IsHWAlarm) {
   \   00000018   CE20D1E5           LDRB     R2,[R1, #+206]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0300000A           BEQ      ??GetNumberOfHWAlarms_3
    526                      switch ( ALPtr->State ) {
   \   00000024   E010D1E5           LDRB     R1,[R1, #+224]
   \   00000028   011041E2           SUB      R1,R1,#+1
   \   0000002C   010051E3           CMP      R1,#+1
    527                      case AlarmBasic::AlAknowledged  :
    528                      case AlarmBasic::AlActive       :
    529                          Count++;
   \   00000030   01508592           ADDLS    R5,R5,#+1
    530                          break;
    531                      case AlarmBasic::AlIdle         :
    532                      case AlarmBasic::AlBlocked    	:
    533                          break;
    534          
    535                      }
    536                  }
    537              }
   \                     ??GetNumberOfHWAlarms_3:
   \   00000034   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??GetNumberOfHWAlarms_1:
   \   00000038   FC1084E2           ADD      R1,R4,#+252
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   F3FFFF1A           BNE      ??GetNumberOfHWAlarms_2
    538              return Count;
   \   00000044   ........           B        ?Subroutine49
    539          }

   \                                 In segment CODE, align 4, keep-with-next
    540          int PRogramObject::GetNumberOfAlarms(void) {
   \                     ??GetNumberOfAlarms:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    541              int Count = 0;
    542              set<AlarmBasic *>::iterator ObjIt;
    543              for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   00000008   E40094E5           LDR      R0,[R4, #+228]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   050000EA           B        ??GetNumberOfAlarms_1
    544                  AlarmBasic *ALPtr = *ObjIt;
    545                  switch ( ALPtr->State ) {
   \                     ??GetNumberOfAlarms_2:
   \   00000014   101090E5           LDR      R1,[R0, #+16]
   \   00000018   E010D1E5           LDRB     R1,[R1, #+224]
   \   0000001C   011041E2           SUB      R1,R1,#+1
   \   00000020   010051E3           CMP      R1,#+1
    546                  case AlarmBasic::AlAknowledged  :
    547                  case AlarmBasic::AlActive       :
    548                      Count++;
   \   00000024   01508592           ADDLS    R5,R5,#+1
    549                      break;
    550                  case AlarmBasic::AlIdle         :
    551                  case AlarmBasic::AlBlocked    :
    552                      break;
    553          
    554                  }
    555              }
   \   00000028   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??GetNumberOfAlarms_1:
   \   0000002C   E41084E2           ADD      R1,R4,#+228
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   F6FFFF1A           BNE      ??GetNumberOfAlarms_2
    556              return Count;
   \   00000038                      REQUIRE ?Subroutine49
   \   00000038                      ;; // Fall through to label ?Subroutine49
    557          }

   \                                 In segment CODE, align 4, keep-with-next
    558          int PRogramObject::GetNumberOfWarnings(void) {
   \                     ??GetNumberOfWarnings:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    559              int Count = 0;
    560              set<AlarmBasic *>::iterator ObjIt;
    561              for ( ObjIt = AlarmSet.begin(); ObjIt != AlarmSet.end(); ObjIt++ ) {
   \   00000008   E40094E5           LDR      R0,[R4, #+228]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   040000EA           B        ??GetNumberOfWarnings_1
    562                  AlarmBasic *ALPtr = *ObjIt;
    563                  if ( !ALPtr->Enable ) {
   \                     ??GetNumberOfWarnings_2:
   \   00000014   101090E5           LDR      R1,[R0, #+16]
   \   00000018   E210D1E5           LDRB     R1,[R1, #+226]
   \   0000001C   000051E3           CMP      R1,#+0
    564                      Count++;
   \   00000020   01508502           ADDEQ    R5,R5,#+1
    565                  }
    566              }
   \   00000024   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??GetNumberOfWarnings_1:
   \   00000028   E41084E2           ADD      R1,R4,#+228
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   F7FFFF1A           BNE      ??GetNumberOfWarnings_2
    567              for ( unsigned i = 0; i < AnalogInList.size(); i++ ) {
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   4B1FA0E3           MOV      R1,#+300
   \   0000003C   050000EA           B        ??GetNumberOfWarnings_3
    568                  AnalogInput *AIPtr = AnalogInList[i];
    569                  if ( !AIPtr->Enable ) {
   \                     ??GetNumberOfWarnings_4:
   \   00000040   042091E7           LDR      R2,[R1, +R4]
   \   00000044   002192E7           LDR      R2,[R2, +R0, LSL #+2]
    570                      Count++;
    571                  }
    572              }
   \   00000048   010080E2           ADD      R0,R0,#+1
   \   0000004C   3421D2E5           LDRB     R2,[R2, #+308]
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   01508502           ADDEQ    R5,R5,#+1
   \                     ??GetNumberOfWarnings_3:
   \   00000058   042081E0           ADD      R2,R1,R4
   \   0000005C   043092E5           LDR      R3,[R2, #+4]
   \   00000060   002092E5           LDR      R2,[R2, #+0]
   \   00000064   022043E0           SUB      R2,R3,R2
   \   00000068   220150E1           CMP      R0,R2, LSR #+2
   \   0000006C   F3FFFF3A           BCC      ??GetNumberOfWarnings_4
    573              return Count;
   \   00000070   ........           B        ?Subroutine49
    574          }

   \                                 In segment CODE, align 4, keep-with-next
    575          void PRogramObject::RefreshData(int ValueKey) {
   \                     ??RefreshData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    576              if ( !IsStaticValue(ValueKey) ) {
   \   00000008   A42094E5           LDR      R2,[R4, #+164]
   \   0000000C   782092E5           LDR      R2,[R2, #+120]
   \   00000010   0FE0A0E1           MOV      LR,PC
   \   00000014   12FF2FE1           BX       R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2800001A           BNE      ??RefreshData_1
    577                  if ( IsAvailableNewData() ) {
   \   00000020   A41094E5           LDR      R1,[R4, #+164]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   581091E5           LDR      R1,[R1, #+88]
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   11FF2FE1           BX       R1
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   1800000A           BEQ      ??RefreshData_2
    578                      if ( DataFromOther ) {
   \   0000003C   4401D4E5           LDRB     R0,[R4, #+324]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0500000A           BEQ      ??RefreshData_3
    579                          HWFailure = CheckAlarms(ExternalAlarmList);
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   450F84E2           ADD      R0,R4,#+276
   \   00000050   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0100A013           MOVNE    R0,#+1
   \   0000005C   3C00C4E5           STRB     R0,[R4, #+60]
    580                      }
    581                      if ( !DataFromOther || !HWFailure ) {
   \                     ??RefreshData_3:
   \   00000060   4401D4E5           LDRB     R0,[R4, #+324]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   3C00D415           LDRBNE   R0,[R4, #+60]
   \   0000006C   00005013           CMPNE    R0,#+0
   \   00000070   1300001A           BNE      ??RefreshData_1
    582                          Calculate();
   \   00000074   A41094E5           LDR      R1,[R4, #+164]
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   641091E5           LDR      R1,[R1, #+100]
   \   00000080   0FE0A0E1           MOV      LR,PC
   \   00000084   11FF2FE1           BX       R1
    583                          IsNewData = true;
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   E000C4E5           STRB     R0,[R4, #+224]
    584                          // HWFailure set elsewhere when our IO-system
    585                          CheckAlarms(AlarmSet);
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   E40084E2           ADD      R0,R4,#+228
   \   00000098   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   0000009C   080000EA           B        ??RefreshData_1
    586                      }
    587                  } else {
    588                      IsNewData = false;
   \                     ??RefreshData_2:
   \   000000A0   E000C4E5           STRB     R0,[R4, #+224]
    589                      SetAlarmsToNormal(AlarmSet);
   \   000000A4   E40084E2           ADD      R0,R4,#+228
   \   000000A8   ........           _BLF     ??SetAlarmsToNormal,??SetAlarmsToNormal??rA
    590                      SendData();
   \   000000AC   A42094E5           LDR      R2,[R4, #+164]
   \   000000B0   6510A0E3           MOV      R1,#+101
   \   000000B4   402092E5           LDR      R2,[R2, #+64]
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   0FE0A0E1           MOV      LR,PC
   \   000000C0   12FF2FE1           BX       R2
    591                  }
    592              }
    593          }
   \                     ??RefreshData_1:
   \   000000C4   ........           B        ??Subroutine49_0
    594          

   \                                 In segment CODE, align 4, keep-with-next
    595          void PRogramObject::SetOffline(int ValueKey) {
   \                     ??SetOffline:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    596              if ( !IsStaticValue(ValueKey) ) {
   \   00000008   A42094E5           LDR      R2,[R4, #+164]
   \   0000000C   782092E5           LDR      R2,[R2, #+120]
   \   00000010   0FE0A0E1           MOV      LR,PC
   \   00000014   12FF2FE1           BX       R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0A00001A           BNE      ??SetOffline_1
    597                  IsNewData = false;
   \   00000020   E000C4E5           STRB     R0,[R4, #+224]
    598                  HWFailure = true;
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   3C00C4E5           STRB     R0,[R4, #+60]
    599                  SetAlarmsToNormal(AlarmSet);
   \   0000002C   E40084E2           ADD      R0,R4,#+228
   \   00000030   ........           _BLF     ??SetAlarmsToNormal,??SetAlarmsToNormal??rA
    600                  SendData();
   \   00000034   A42094E5           LDR      R2,[R4, #+164]
   \   00000038   6510A0E3           MOV      R1,#+101
   \   0000003C   402092E5           LDR      R2,[R2, #+64]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
    601              }
    602          }
   \                     ??SetOffline_1:
   \   0000004C   ........           B        ?Subroutine50
    603          
    604          
    605          

   \                                 In segment CODE, align 4, keep-with-next
    606          set<AnalogInput *>PRogramObject::GetModBusSensorList(void) {
   \                     ??GetModBusSensorList:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    607              return ModbusSensorSet;
   \   00000004   AC5080E2           ADD      R5,R0,#+172
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1460C4E5           STRB     R6,[R4, #+20]
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Copy_1,??_Copy??rA_3
   \   00000028   ........           B        ?Subroutine54
    608          }
    609          

   \                                 In segment CODE, align 4, keep-with-next
    610          bool PRogramObject::IsStaticValue(int ValueKey) {
    611              return false;
   \                     ??IsStaticValue:
   \   00000000   ........           B        ?Subroutine55
    612          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PRogram object ">`:
   \   00000000   50526F677261       DC8 "PRogram object "
   \              6D206F626A65
   \              63742000    

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3000               DC8 "0"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank ">`:
   \   00000000   54616E6B2000       DC8 "Tank "
   \   00000006   0000               DC8 0, 0
   \   00000008   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   0000003B   00                 DC8 0
   \   0000003C   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000059   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "The following Alarm(s...">`:
   \   00000000   54686520666F       DC8 "The following Alarm(s) are disabled:"
   \              6C6C6F77696E
   \              6720416C6172
   \              6D2873292061
   \              726520646973
   \              61626C65643A
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   54686520666F       DC8 "The following sensor(s) are disabled:"
   \              6C6C6F77696E
   \              672073656E73
   \              6F7228732920
   \              617265206469
   \              7361626C6564
   \              3A00        
   \   0000004E   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObject &PRogramObject::new PRogramObject(bool)
   \                     `??new PRogramObject`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   520FA0E3           MOV      R0,#+328
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new PRogramObject_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??PRogramObject
   \                     `??new PRogramObject_1`:
   \   00000020   ........           B        ?Subroutine50

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable4  ;; ??ObjectSet
   \   00000008   48509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0C0085E2           ADD      R0,R5,#+12
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   1400C4E5           STRB     R0,[R4, #+20]
   \   00000048   180085E2           ADD      R0,R5,#+24
   \   0000004C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000050   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000058   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     CrStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     ??npos
    613          
    614          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PRogramObject::AddAlarms(set<AlarmBasic *> &)
                                       24
     PRogramObject::AddAnalogIn(AnalogInput *)
                                       12
     PRogramObject::AddCompleteList(set<AlarmBasic *> &)
                                       24
     PRogramObject::AddSensorAlarms()
                                       16
     PRogramObject::AddToExternalAlarms(set<AlarmBasic *> &)
                                       24
     PRogramObject::AddToIOObjectList()
                                        8
     PRogramObject::AddToScratchPageVector()
                                        8
     PRogramObject::Calculate()         0
     PRogramObject::CopyAnalogList()
                                        4
     PRogramObject::CreateAlarms()      0
     PRogramObject::FindAIFromIDNumber(unsigned int)
                                        8
     PRogramObject::FindAllAnalogInput(int, int)
                                       28
     PRogramObject::FindAnalogInput(int)
                                        8
     PRogramObject::FindAnalogInput(int, int)
                                       28
     PRogramObject::FindTypeNumberOfAllSensors(int)
                                       24
     PRogramObject::FindTypeNumberOfSensors(int)
                                       24
     PRogramObject::GetAlarms()        72
     PRogramObject::GetHWAlarms()     104
     PRogramObject::GetModBusSensorList()
                                       16
     PRogramObject::GetNumberOfAlarms()
                                       12
     PRogramObject::GetNumberOfHWAlarms()
                                       12
     PRogramObject::GetNumberOfWarnings()
                                       12
     PRogramObject::GetStringValue(int, int, AnsiString &)
                                        8
     PRogramObject::GetValue(int, int, float &, int &, int &)
                                       16
     PRogramObject::GetWarnings()     164
     PRogramObject::IsStaticValue(int)
                                        0
     PRogramObject::LCWriteXML(char *)
                                        0
     PRogramObject::LoadConfigString(TSNConfigString &)
                                      288
     PRogramObject::MakeConfigString(int)
                                      332
     PRogramObject::MergeChildUserRights(PRogramObject *)
                                      212
     PRogramObject::PRogramObject(bool)
                                       24
     PRogramObject::PutFloatValue(int, float)
                                        4
     PRogramObject::PutValue(int, int, AnsiString, bool, int *)
                                       60
     PRogramObject::RefreshData(int)
                                       12
     PRogramObject::RemoveAnalogInI(int, bool)
                                        4
     PRogramObject::RemoveAnalogInP(AnalogInput *, bool)
                                       24
     PRogramObject::RestoreSettings(TSNConfigString *)
                                      516
     PRogramObject::SaveSettings(TSNConfigString *)
                                      276
     PRogramObject::SetChildUserRights()
                                       16
     PRogramObject::SetChildUserRights(PRogramObject *)
                                       12
     PRogramObject::SetOffline(int)     8
     PRogramObject::SortAnalogInputs()
                                       40
     PRogramObject::WriteXML(char *, bool)
                                        0
     PRogramObject::new PRogramObject(bool)
                                        8
     PRogramObject::~PRogramObject()
                                       20
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
                                       12
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Erase(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
                                        0
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
                                        0
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
                                       28
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::clear()
                                        8
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
                                       20
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
                                       20
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
                                        4
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Insert(PRogramObject **, PRogramObject * const &)
                                       16
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Make_room(PRogramObject **, unsigned int)
                                       32
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Push_back0(PRogramObject *)
                                        8
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Tidy0()
                                        4
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<AlarmBasic *>::set()          12
     set<AlarmBasic *>::~set()          8
     set<PRogramObject *>::~set()       4
     set<unsigned int>::operator=(set<unsigned int> const &)
                                       12
     set<unsigned int>::set(set<unsigned int> const &)
                                       16
     string::string(string const &)    12
     unique(PRogramObject **, PRogramObject **)
                                        0
     unique(PRogramObjectBase **, PRogramObjectBase **)
                                        0
     vector<AnalogInput *>::erase(AnalogInput **)
                                       12
     vector<PRogramObject *>::~vector()
                                        8
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     unique(PRogramObject **, PRogramObject **)
                                      92
     unique(PRogramObjectBase **, PRogramObjectBase **)
                                      92
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     120
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::erase(PRogramObject *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::equal_range(PRogramObject *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                     112
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
                                     112
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Erase(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Lbound(PRogramObject *) const
                                      40
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Ubound(PRogramObject *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<AlarmBasic *>::~set()        32
     set<unsigned int>::set(set<unsigned int> const &)
                                      48
     set<PRogramObject *>::~set()     16
     set<unsigned int>::operator=(set<unsigned int> const &)
                                      56
     set<AlarmBasic *>::set()         48
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Tidy0()
                                      36
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
                                     224
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Insert(PRogramObject **, PRogramObject * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     232
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Make_room(PRogramObject **, unsigned int)
                                     232
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     _Vector_impl<PRogramObject *, allocator<PRogramObject *>>::_Push_back0(PRogramObject *)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      28
     vector<PRogramObject *>::~vector()
                                      28
     vector<AnalogInput *>::erase(AnalogInput **)
                                      52
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     ?_0                              36
     PRogramObject::ObjectSet         48
     PRogramObject::PRogramObject(bool)
                                     148
     PRogramObject::~PRogramObject()
                                     420
     ?Subroutine51                     8
     PRogramObject::MakeConfigString(int)
                                     648
     ?Subroutine46                    64
     PRogramObject::LoadConfigString(TSNConfigString &)
                                     648
     ?Subroutine48                    12
     PRogramObject::SortAnalogInputs()
                                     172
     PRogramObject::CopyAnalogList()
                                      20
     ?Subroutine52                     8
     PRogramObject::AddToIOObjectList()
                                      60
     ?Subroutine50                     8
     PRogramObject::AddToScratchPageVector()
                                      64
     PRogramObject::SaveSettings(TSNConfigString *)
                                     832
     PRogramObject::RestoreSettings(TSNConfigString *)
                                     972
     PRogramObject::FindAIFromIDNumber(unsigned int)
                                     116
     ?Subroutine47                    12
     PRogramObject::FindAnalogInput(int)
                                      76
     PRogramObject::FindAnalogInput(int, int)
                                     112
     PRogramObject::FindAllAnalogInput(int, int)
                                     108
     PRogramObject::FindTypeNumberOfSensors(int)
                                      28
     PRogramObject::FindTypeNumberOfAllSensors(int)
                                      24
     PRogramObject::GetValue(int, int, float &, int &, int &)
                                      32
     PRogramObject::GetStringValue(int, int, AnsiString &)
                                      72
     PRogramObject::PutValue(int, int, AnsiString, bool, int *)
                                     100
     PRogramObject::PutFloatValue(int, float)
                                       8
     PRogramObject::Calculate()        4
     PRogramObject::AddAlarms(set<AlarmBasic *> &)
                                      64
     ?Subroutine53                     8
     PRogramObject::AddToExternalAlarms(set<AlarmBasic *> &)
                                      56
     PRogramObject::AddCompleteList(set<AlarmBasic *> &)
                                      68
     PRogramObject::AddSensorAlarms()
                                      84
     ?Subroutine54                     8
     PRogramObject::CreateAlarms()     4
     PRogramObject::WriteXML(char *, bool)
                                       4
     ?Subroutine55                     8
     PRogramObject::LCWriteXML(char *)
                                       0
     PRogramObject::RemoveAnalogInI(int, bool)
                                      52
     PRogramObject::RemoveAnalogInP(AnalogInput *, bool)
                                     180
     PRogramObject::AddAnalogIn(AnalogInput *)
                                      36
     ?Subroutine49                    12
     PRogramObject::SetChildUserRights()
                                     152
     PRogramObject::SetChildUserRights(PRogramObject *)
                                      52
     PRogramObject::MergeChildUserRights(PRogramObject *)
                                     432
     PRogramObject::GetHWAlarms()    240
     PRogramObject::GetAlarms()      180
     PRogramObject::GetWarnings()    624
     PRogramObject::GetNumberOfHWAlarms()
                                      72
     PRogramObject::GetNumberOfAlarms()
                                      56
     PRogramObject::GetNumberOfWarnings()
                                     116
     PRogramObject::RefreshData(int)
                                     200
     PRogramObject::SetOffline(int)   80
     PRogramObject::GetModBusSensorList()
                                      44
     PRogramObject::IsStaticValue(int)
                                       4
     ?<Constant "PRogram object ">    16
     ?<Constant "0">                   2
     ?<Constant "0x%0x">               8
     ?<Constant "Tank ">              92
     ?<Constant "The following Alarm(s...">
                                      80
     PRogramObject::new PRogramObject(bool)
                                      36
     __sti__routine()                 92
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable16                     4
     ??DataTable22                     4
     ??DataTable25                     4
      Others                        1560

 
 15 400 bytes in segment CODE
    358 bytes in segment DATA_C
     60 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 7 772 bytes of CODE  memory (+ 7 644 bytes shared)
   358 bytes of CONST memory
    60 bytes of DATA  memory

Errors: none
Warnings: none
