##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIPressSensor.cpp               #
#    Command line    =  D:\S2Prog\Shared\Src\AIPressSensor.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIPressSensor.lst           #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIPressSensor.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIPressSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Pairib _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::insert(AIPressSensor *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(AIPressSensor *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::find(AIPressSensor *)
   \                     ??find:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_1
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A021           MOVCS    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_1:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Pairii _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::equal_range(AIPressSensor *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr, AIPressSensor *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Lbound(AIPressSensor *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Ubound(AIPressSensor *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AIPressSensor *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AIPressSensor *>::set()
   \                     ??set:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   1240BDE8           POP      {R1,R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_13:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_13
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool vector<float>::empty() const
   \                     ??empty:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000041E0           SUB      R0,R1,R0
   \   0000000C   2001B0E1           LSRS     R0,R0,#+2
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void vector<float>::clear()
   \                     ??clear_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_5  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_5:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          

   \                                 In segment DATA_I, align 4, align-sorted
      8          float AIPressSensor::AtmPressure = NORMAL_ATM;
   \                     ??AtmPressure:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for AtmPressure>`

   \                                 In segment CODE, align 4, keep-with-next
      9          set<AIPressSensor *>AIPressSensor::ObjectSet;
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   ........           LDR      R0,??DataTable6  ;; ??ObjectSet
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   ........           _BLF     ??set,??set??rA
   \   0000000C   04009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000010   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000014   ........           B        ?Subroutine27
   \                     ??__sti__routine_1:
   \   00000018   ........           DC32     ?_0

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ObjectSet:
   \   00000000                      DS8 24
     10          
     11          
     12          //---------------------------------------------------------------------------
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          AIPressSensor::AIPressSensor(bool IsAtmRef) {
   \                     ??AIPressSensor:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000010   ........           LDR      R0,??DataTable5  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   640F84E2           ADD      R0,R4,#+400
   \   0000001C   ........           _BLF     ??set,??set??rA
   \   00000020   6A0F84E2           ADD      R0,R4,#+424
   \   00000024   ........           _BLF     ??set,??set??rA
     15              Initialize();
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??Initialize
     16              BasicSensorType     = AI_SENSOR_PRESS;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   100184E5           STR      R0,[R4, #+272]
     17              BasicSensorTypeWord = L_WORD339; //Pres
   \   00000038   5300A0E3           MOV      R0,#+83
   \   0000003C   400F80E3           ORR      R0,R0,#0x100
   \   00000040   140184E5           STR      R0,[R4, #+276]
     18              RefPressDiff        = 0.0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   8C0184E5           STR      R0,[R4, #+396]
     19              if ( !IsAtmRef ) {
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   0300001A           BNE      ??AIPressSensor_2
     20                  ObjectSet.insert(this);
   \   00000054   ........           LDR      R1,??DataTable6  ;; ??ObjectSet
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     ??insert,??insert??rA
     21              }
     22          }
   \                     ??AIPressSensor_2:
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     23          //---------------------------------------------------------------------------
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          AIPressSensor::AIPressSensor(int SnsType, bool IsAtmRef) {
   \                     ??AIPressSensor_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   ........           LDR      R0,??DataTable5  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   640F84E2           ADD      R0,R4,#+400
   \   00000020   ........           _BLF     ??set,??set??rA
   \   00000024   6A0F84E2           ADD      R0,R4,#+424
   \   00000028   ........           _BLF     ??set,??set??rA
     26              Initialize();
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       ??Initialize
     27              Type      = SnsType;
   \   00000034   A05084E5           STR      R5,[R4, #+160]
     28              BasicSensorTypeWord = L_WORD339; //Pres
   \   00000038   5300A0E3           MOV      R0,#+83
   \   0000003C   400F80E3           ORR      R0,R0,#0x100
   \   00000040   140184E5           STR      R0,[R4, #+276]
     29              RefPressDiff        = 0.0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   8C0184E5           STR      R0,[R4, #+396]
     30              if ( !IsAtmRef ) {
   \   0000004C   000056E3           CMP      R6,#+0
   \   00000050   0300001A           BNE      ??AIPressSensor_3
     31                  ObjectSet.insert(this);
   \   00000054   ........           LDR      R1,??DataTable6  ;; ??ObjectSet
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     ??insert,??insert??rA
     32              }
     33          }
   \                     ??AIPressSensor_3:
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
     34          //---------------------------------------------------------------------------
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          AIPressSensor::~AIPressSensor(void) {
   \                     `?~AIPressSensor`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1500000A           BEQ      `?~AIPressSensor_1`
   \   00000014   ........           LDR      R0,??DataTable5  ;; ??__vtbl
     37              set<AIPressSensor *>::iterator it = ObjectSet.find(this);
   \   00000018   ........           LDR      R6,??DataTable6  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??find,??find??rA
     38          
     39              if ( it != ObjectSet.end() ) {
   \   0000002C   060050E1           CMP      R0,R6
   \   00000030   0200000A           BEQ      `?~AIPressSensor_2`
     40                  ObjectSet.erase(this);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   ........           _BLF     ??erase_1,??erase??rA_1
     41              }
     42          }
   \                     `?~AIPressSensor_2`:
   \   00000040   6A0F84E2           ADD      R0,R4,#+424
   \   00000044   ........           _BLF     ??clear,??clear??rA
   \   00000048   640F84E2           ADD      R0,R4,#+400
   \   0000004C   ........           _BLF     ??clear,??clear??rA
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000005C   010015E3           TST      R5,#0x1
   \   00000060   0100000A           BEQ      `?~AIPressSensor_1`
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIPressSensor_1`:
   \   0000006C   ........           B        ?Subroutine29

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     43          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     44          void AIPressSensor::Initialize(void) {
     45              CableLengthShip          = 0.0;
     46              CableLengthSensor        = 0.0;
     47              CableResistanceShip      = PROProjectInfo::CableResistanceShip;
   \                     ??Initialize:
   \   00000000   34209FE5           LDR      R2,??Initialize_1  ;; ??CableResistanceShip
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   701180E5           STR      R1,[R0, #+368]
   \   0000000C   741180E5           STR      R1,[R0, #+372]
   \   00000010   002092E5           LDR      R2,[R2, #+0]
   \   00000014   782180E5           STR      R2,[R0, #+376]
     48              CableResistanceSensor    = PROProjectInfo::CableResistanceSensor;
   \   00000018   20209FE5           LDR      R2,??Initialize_1+0x4  ;; ??CableResistanceSensor
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   7C2180E5           STR      R2,[R0, #+380]
     49              CableMsrdResistance      = 0.0;
   \   00000024   801180E5           STR      R1,[R0, #+384]
     50              hasCableLengthSensor     = false;
   \   00000028   8A11C0E5           STRB     R1,[R0, #+394]
     51              hasCableResistanceShip   = false;
   \   0000002C   8811C0E5           STRB     R1,[R0, #+392]
     52              hasCableResistanceSensor = false;
   \   00000030   8911C0E5           STRB     R1,[R0, #+393]
     53              NoShortCircuitAlarm      = false;
   \   00000034   6C11C0E5           STRB     R1,[R0, #+364]
     54          
     55          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??Initialize_1:
   \   0000003C   ........           DC32     ??CableResistanceShip
   \   00000040   ........           DC32     ??CableResistanceSensor
     56          ///////////////////////////////////////////////////////////////
     57          //
     58          // Routines for the Configuration
     59          //
     60          ///////////////////////////////////////////////////////////////
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          AnsiString AIPressSensor::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     63              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
     64              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
     65              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
     66              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
     67              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
     68              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
     69              AnsiString LocalString;
     70              LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   00000004   5C6E9FE5           LDR      R6,??MakeConfigString_3  ;; CrLfStr
   \   00000008   FCDF4DE2           SUB      SP,SP,#+1008
   \   0000000C   0090A0E1           MOV      R9,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   012085E2           ADD      R2,R5,#+1
   \   0000001C   0910A0E3           MOV      R1,#+9
   \   00000020   9A0F8DE2           ADD      R0,SP,#+616
   \   00000024   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000028   022085E2           ADD      R2,R5,#+2
   \   0000002C   0910A0E3           MOV      R1,#+9
   \   00000030   8C008DE2           ADD      R0,SP,#+140
   \   00000034   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000038   032085E2           ADD      R2,R5,#+3
   \   0000003C   0910A0E3           MOV      R1,#+9
   \   00000040   D20F8DE2           ADD      R0,SP,#+840
   \   00000044   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000048   042085E2           ADD      R2,R5,#+4
   \   0000004C   0910A0E3           MOV      R1,#+9
   \   00000050   E70F8DE2           ADD      R0,SP,#+924
   \   00000054   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000058   052085E2           ADD      R2,R5,#+5
   \   0000005C   0910A0E3           MOV      R1,#+9
   \   00000060   EE0F8DE2           ADD      R0,SP,#+952
   \   00000064   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000068   062085E2           ADD      R2,R5,#+6
   \   0000006C   0910A0E3           MOV      R1,#+9
   \   00000070   F50F8DE2           ADD      R0,SP,#+980
   \   00000074   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000080   A07089E2           ADD      R7,R9,#+160
   \   00000084   001097E5           LDR      R1,[R7, #+0]
   \   00000088   AF0F8DE2           ADD      R0,SP,#+700
   \   0000008C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000090   AF2F8DE2           ADD      R2,SP,#+700
   \   00000094   9A1F8DE2           ADD      R1,SP,#+616
   \   00000098   A80F8DE2           ADD      R0,SP,#+672
   \   0000009C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A0   0620A0E1           MOV      R2,R6
   \   000000A4   A81F8DE2           ADD      R1,SP,#+672
   \   000000A8   A10F8DE2           ADD      R0,SP,#+644
   \   000000AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B0   B40D9FE5           LDR      R0,??MakeConfigString_3+0x4  ;; ??npos
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   005090E5           LDR      R5,[R0, #+0]
   \   000000BC   A11F8DE2           ADD      R1,SP,#+644
   \   000000C0   0530A0E1           MOV      R3,R5
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   ........           _BLF     ??append,??append??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   A10F8DE2           ADD      R0,SP,#+644
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   A80F8DE2           ADD      R0,SP,#+672
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   AF0F8DE2           ADD      R0,SP,#+700
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
     71              LocalString += AnalogInput::MakeConfigString();     //common
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   B61F8DE2           ADD      R1,SP,#+728
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   ........           _BLF     ??MakeConfigString_2,??MakeConfigString??rA
   \   0000010C   0530A0E1           MOV      R3,R5
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   B61F8DE2           ADD      R1,SP,#+728
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           _BLF     ??append,??append??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   B60F8DE2           ADD      R0,SP,#+728
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
     72          
     73              if ( IsPressureSns                      ) LocalString += TabStr2 + KeyWord(C_AI_TANK_PRESS        ) + CrLfStr;
   \   00000130   8000D7E5           LDRB     R0,[R7, #+128]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   1C00000A           BEQ      ??MakeConfigString_4
   \   0000013C   AE10A0E3           MOV      R1,#+174
   \   00000140   801E81E3           ORR      R1,R1,#0x800
   \   00000144   38008DE2           ADD      R0,SP,#+56
   \   00000148   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000014C   38208DE2           ADD      R2,SP,#+56
   \   00000150   8C108DE2           ADD      R1,SP,#+140
   \   00000154   1C008DE2           ADD      R0,SP,#+28
   \   00000158   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   1C108DE2           ADD      R1,SP,#+28
   \   00000164   0D00A0E1           MOV      R0,SP
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   0530A0E1           MOV      R3,R5
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0D10A0E1           MOV      R1,SP
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   ........           _BLF     ??append,??append??rA
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   0D00A0E1           MOV      R0,SP
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   1C008DE2           ADD      R0,SP,#+28
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   38008DE2           ADD      R0,SP,#+56
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     74              if ( Location == C_AI_LOC_TANK_CLEAN    ) LocalString += TabStr2 + KeyWord(C_AI_LOC_TANK_CLEAN    ) + CrLfStr;
   \                     ??MakeConfigString_4:
   \   000001B0   880097E5           LDR      R0,[R7, #+136]
   \   000001B4   F310A0E3           MOV      R1,#+243
   \   000001B8   801E81E3           ORR      R1,R1,#0x800
   \   000001BC   010050E1           CMP      R0,R1
   \   000001C0   1A00001A           BNE      ??MakeConfigString_5
   \   000001C4   0D00A0E1           MOV      R0,SP
   \   000001C8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001CC   0D20A0E1           MOV      R2,SP
   \   000001D0   8C108DE2           ADD      R1,SP,#+140
   \   000001D4   1C008DE2           ADD      R0,SP,#+28
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   1C108DE2           ADD      R1,SP,#+28
   \   000001E4   38008DE2           ADD      R0,SP,#+56
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0530A0E1           MOV      R3,R5
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   38108DE2           ADD      R1,SP,#+56
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   38008DE2           ADD      R0,SP,#+56
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   1C008DE2           ADD      R0,SP,#+28
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   0D00A0E1           MOV      R0,SP
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
     75              if (NoShortCircuitAlarm) LocalString += TabStr2 + KeyWord( C_AI_NO_SHORT_CIRC_AL ) + CrLfStr;
   \                     ??MakeConfigString_5:
   \   00000230   CC00D7E5           LDRB     R0,[R7, #+204]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   1C00000A           BEQ      ??MakeConfigString_6
   \   0000023C   AC10A0E3           MOV      R1,#+172
   \   00000240   801E81E3           ORR      R1,R1,#0x800
   \   00000244   38008DE2           ADD      R0,SP,#+56
   \   00000248   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000024C   38208DE2           ADD      R2,SP,#+56
   \   00000250   8C108DE2           ADD      R1,SP,#+140
   \   00000254   1C008DE2           ADD      R0,SP,#+28
   \   00000258   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000025C   0620A0E1           MOV      R2,R6
   \   00000260   1C108DE2           ADD      R1,SP,#+28
   \   00000264   0D00A0E1           MOV      R0,SP
   \   00000268   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000026C   0530A0E1           MOV      R3,R5
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0D10A0E1           MOV      R1,SP
   \   00000278   0400A0E1           MOV      R0,R4
   \   0000027C   ........           _BLF     ??append,??append??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   0D00A0E1           MOV      R0,SP
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   1C008DE2           ADD      R0,SP,#+28
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   38008DE2           ADD      R0,SP,#+56
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??MakeConfigString_6:
   \   000002B0   000097E5           LDR      R0,[R7, #+0]
   \   000002B4   7BAF89E2           ADD      R10,R9,#+492
   \   000002B8   3F0040E2           SUB      R0,R0,#+63
   \   000002BC   800E40E2           SUB      R0,R0,#+2048
   \   000002C0   450050E3           CMP      R0,#+69
   \   000002C4   B503008A           BHI      ??MakeConfigString_7
   \   000002C8   021F8FE2           ADR      R1,??MakeConfigString_1
   \   000002CC   8000A0E1           MOV      R0,R0, LSL #+1
   \   000002D0   B01091E1           LDRH     R1,[R1, R0]
   \   000002D4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??MakeConfigString_1:
   \   000002D8   2200B103B103       DC16     +34,+945,+945,+945
   \              B103        
   \   000002E0   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   000002E8   B103C402C402       DC16     +945,+708,+708,+708
   \              C402        
   \   000002F0   C402C402C402       DC16     +708,+708,+708,+945
   \              B103        
   \   000002F8   B103B103B103       DC16     +945,+945,+945,+708
   \              C402        
   \   00000300   C4022200B103       DC16     +708,+34,+945,+945
   \              B103        
   \   00000308   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000310   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000318   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000320   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000328   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000330   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000338   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000340   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000348   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000350   B103B103B103       DC16     +945,+945,+945,+945
   \              B103        
   \   00000358   B103B103C402       DC16     +945,+945,+708,+708
   \              C402        
   \   00000360   C402C402           DC16     +708,+708
     76          
     77              switch ( Type ) {
     78              case C_AI_1728      :
     79              case C_AI_P906_0111 :
     80                  {
     81                      AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
     82                      if (CableLengthShip) {
   \                     ??MakeConfigString_8:
   \   00000364   D08097E5           LDR      R8,[R7, #+208]
   \   00000368   0000A0E3           MOV      R0,#+0
   \   0000036C   0810A0E1           MOV      R1,R8
   \   00000370   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000374   000050E3           CMP      R0,#+0
   \   00000378   2D00000A           BEQ      ??MakeConfigString_9
     83                          LocalString += TabStr2 + KeyWord(C_AI_CABLE_LENGTH_SHIP) + FloatToAnsiString(CableLengthShip) + CrLfStr;
   \   0000037C   0330A0E3           MOV      R3,#+3
   \   00000380   0720A0E3           MOV      R2,#+7
   \   00000384   0810A0E1           MOV      R1,R8
   \   00000388   54008DE2           ADD      R0,SP,#+84
   \   0000038C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000390   A610A0E3           MOV      R1,#+166
   \   00000394   801E81E3           ORR      R1,R1,#0x800
   \   00000398   70008DE2           ADD      R0,SP,#+112
   \   0000039C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003A0   70208DE2           ADD      R2,SP,#+112
   \   000003A4   8C108DE2           ADD      R1,SP,#+140
   \   000003A8   0D00A0E1           MOV      R0,SP
   \   000003AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003B0   54208DE2           ADD      R2,SP,#+84
   \   000003B4   0D10A0E1           MOV      R1,SP
   \   000003B8   1C008DE2           ADD      R0,SP,#+28
   \   000003BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C0   0620A0E1           MOV      R2,R6
   \   000003C4   1C108DE2           ADD      R1,SP,#+28
   \   000003C8   38008DE2           ADD      R0,SP,#+56
   \   000003CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D0   0530A0E1           MOV      R3,R5
   \   000003D4   0020A0E3           MOV      R2,#+0
   \   000003D8   38108DE2           ADD      R1,SP,#+56
   \   000003DC   0400A0E1           MOV      R0,R4
   \   000003E0   ........           _BLF     ??append,??append??rA
   \   000003E4   0020A0E3           MOV      R2,#+0
   \   000003E8   0110A0E3           MOV      R1,#+1
   \   000003EC   38008DE2           ADD      R0,SP,#+56
   \   000003F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F4   0020A0E3           MOV      R2,#+0
   \   000003F8   0110A0E3           MOV      R1,#+1
   \   000003FC   1C008DE2           ADD      R0,SP,#+28
   \   00000400   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000404   0020A0E3           MOV      R2,#+0
   \   00000408   0110A0E3           MOV      R1,#+1
   \   0000040C   54008DE2           ADD      R0,SP,#+84
   \   00000410   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   0110A0E3           MOV      R1,#+1
   \   0000041C   0D00A0E1           MOV      R0,SP
   \   00000420   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0110A0E3           MOV      R1,#+1
   \   0000042C   70008DE2           ADD      R0,SP,#+112
   \   00000430   ........           _BLF     ??_Tidy,??_Tidy??rA
     84                      }
     85                      if (hasCableLengthSensor) {
   \                     ??MakeConfigString_9:
   \   00000434   EA00D7E5           LDRB     R0,[R7, #+234]
   \   00000438   000050E3           CMP      R0,#+0
   \   0000043C   2D00000A           BEQ      ??MakeConfigString_10
     86                          LocalString += TabStr2 + KeyWord(C_AI_CABLE_LENGTH_SENS) + FloatToAnsiString(CableLengthSensor) + CrLfStr;
   \   00000440   D41097E5           LDR      R1,[R7, #+212]
   \   00000444   0330A0E3           MOV      R3,#+3
   \   00000448   0720A0E3           MOV      R2,#+7
   \   0000044C   70008DE2           ADD      R0,SP,#+112
   \   00000450   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000454   A810A0E3           MOV      R1,#+168
   \   00000458   801E81E3           ORR      R1,R1,#0x800
   \   0000045C   54008DE2           ADD      R0,SP,#+84
   \   00000460   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000464   54208DE2           ADD      R2,SP,#+84
   \   00000468   8C108DE2           ADD      R1,SP,#+140
   \   0000046C   38008DE2           ADD      R0,SP,#+56
   \   00000470   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000474   70208DE2           ADD      R2,SP,#+112
   \   00000478   38108DE2           ADD      R1,SP,#+56
   \   0000047C   1C008DE2           ADD      R0,SP,#+28
   \   00000480   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000484   0620A0E1           MOV      R2,R6
   \   00000488   1C108DE2           ADD      R1,SP,#+28
   \   0000048C   0D00A0E1           MOV      R0,SP
   \   00000490   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000494   0530A0E1           MOV      R3,R5
   \   00000498   0020A0E3           MOV      R2,#+0
   \   0000049C   0D10A0E1           MOV      R1,SP
   \   000004A0   0400A0E1           MOV      R0,R4
   \   000004A4   ........           _BLF     ??append,??append??rA
   \   000004A8   0020A0E3           MOV      R2,#+0
   \   000004AC   0110A0E3           MOV      R1,#+1
   \   000004B0   0D00A0E1           MOV      R0,SP
   \   000004B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004B8   0020A0E3           MOV      R2,#+0
   \   000004BC   0110A0E3           MOV      R1,#+1
   \   000004C0   1C008DE2           ADD      R0,SP,#+28
   \   000004C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C8   0020A0E3           MOV      R2,#+0
   \   000004CC   0110A0E3           MOV      R1,#+1
   \   000004D0   70008DE2           ADD      R0,SP,#+112
   \   000004D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0110A0E3           MOV      R1,#+1
   \   000004E0   38008DE2           ADD      R0,SP,#+56
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0110A0E3           MOV      R1,#+1
   \   000004F0   54008DE2           ADD      R0,SP,#+84
   \   000004F4   ........           _BLF     ??_Tidy,??_Tidy??rA
     87                      }
     88                      if (CableResistanceShip != SHIP_BOARD_CABLE_RES) {
   \                     ??MakeConfigString_10:
   \   000004F8   D88097E5           LDR      R8,[R7, #+216]
   \   000004FC   0800A0E1           MOV      R0,R8
   \   00000500   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000504   0020A0E1           MOV      R2,R0
   \   00000508   800D9FE5           LDR      R0,??MakeConfigString_11  ;; 0x76c8b439
   \   0000050C   0130A0E1           MOV      R3,R1
   \   00000510   7C1D9FE5           LDR      R1,??MakeConfigString_11+0x4  ;; 0x3faa9fbe
   \   00000514   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   00000518   000050E3           CMP      R0,#+0
   \   0000051C   2D00000A           BEQ      ??MakeConfigString_12
     89                          LocalString += TabStr2 + KeyWord(C_AI_CABLE_RES_SHIP) + FloatToAnsiString(CableResistanceShip) + CrLfStr;
   \   00000520   0330A0E3           MOV      R3,#+3
   \   00000524   0720A0E3           MOV      R2,#+7
   \   00000528   0810A0E1           MOV      R1,R8
   \   0000052C   54008DE2           ADD      R0,SP,#+84
   \   00000530   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000534   A910A0E3           MOV      R1,#+169
   \   00000538   801E81E3           ORR      R1,R1,#0x800
   \   0000053C   70008DE2           ADD      R0,SP,#+112
   \   00000540   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000544   70208DE2           ADD      R2,SP,#+112
   \   00000548   8C108DE2           ADD      R1,SP,#+140
   \   0000054C   0D00A0E1           MOV      R0,SP
   \   00000550   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000554   54208DE2           ADD      R2,SP,#+84
   \   00000558   0D10A0E1           MOV      R1,SP
   \   0000055C   1C008DE2           ADD      R0,SP,#+28
   \   00000560   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000564   0620A0E1           MOV      R2,R6
   \   00000568   1C108DE2           ADD      R1,SP,#+28
   \   0000056C   38008DE2           ADD      R0,SP,#+56
   \   00000570   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000574   0530A0E1           MOV      R3,R5
   \   00000578   0020A0E3           MOV      R2,#+0
   \   0000057C   38108DE2           ADD      R1,SP,#+56
   \   00000580   0400A0E1           MOV      R0,R4
   \   00000584   ........           _BLF     ??append,??append??rA
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   0110A0E3           MOV      R1,#+1
   \   00000590   38008DE2           ADD      R0,SP,#+56
   \   00000594   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000598   0020A0E3           MOV      R2,#+0
   \   0000059C   0110A0E3           MOV      R1,#+1
   \   000005A0   1C008DE2           ADD      R0,SP,#+28
   \   000005A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A8   0020A0E3           MOV      R2,#+0
   \   000005AC   0110A0E3           MOV      R1,#+1
   \   000005B0   54008DE2           ADD      R0,SP,#+84
   \   000005B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005B8   0020A0E3           MOV      R2,#+0
   \   000005BC   0110A0E3           MOV      R1,#+1
   \   000005C0   0D00A0E1           MOV      R0,SP
   \   000005C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005C8   0020A0E3           MOV      R2,#+0
   \   000005CC   0110A0E3           MOV      R1,#+1
   \   000005D0   70008DE2           ADD      R0,SP,#+112
   \   000005D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     90                      }
     91                      if (CableResistanceSensor != TEMP_SENS_CABLE_RES) {
   \                     ??MakeConfigString_12:
   \   000005D8   DC8097E5           LDR      R8,[R7, #+220]
   \   000005DC   0800A0E1           MOV      R0,R8
   \   000005E0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000005E4   0020A0E1           MOV      R2,R0
   \   000005E8   0130A0E1           MOV      R3,R1
   \   000005EC   0000A0E3           MOV      R0,#+0
   \   000005F0   C015A0E3           MOV      R1,#+805306368
   \   000005F4   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000005F8   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   000005FC   000050E3           CMP      R0,#+0
   \   00000600   2D00000A           BEQ      ??MakeConfigString_13
     92                          LocalString += TabStr2 + KeyWord(C_AI_CABLE_RES_SENS) + FloatToAnsiString(CableResistanceSensor) + CrLfStr;
   \   00000604   0330A0E3           MOV      R3,#+3
   \   00000608   0720A0E3           MOV      R2,#+7
   \   0000060C   0810A0E1           MOV      R1,R8
   \   00000610   70008DE2           ADD      R0,SP,#+112
   \   00000614   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000618   AA10A0E3           MOV      R1,#+170
   \   0000061C   801E81E3           ORR      R1,R1,#0x800
   \   00000620   54008DE2           ADD      R0,SP,#+84
   \   00000624   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000628   54208DE2           ADD      R2,SP,#+84
   \   0000062C   8C108DE2           ADD      R1,SP,#+140
   \   00000630   38008DE2           ADD      R0,SP,#+56
   \   00000634   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000638   70208DE2           ADD      R2,SP,#+112
   \   0000063C   38108DE2           ADD      R1,SP,#+56
   \   00000640   1C008DE2           ADD      R0,SP,#+28
   \   00000644   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000648   0620A0E1           MOV      R2,R6
   \   0000064C   1C108DE2           ADD      R1,SP,#+28
   \   00000650   0D00A0E1           MOV      R0,SP
   \   00000654   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000658   0530A0E1           MOV      R3,R5
   \   0000065C   0020A0E3           MOV      R2,#+0
   \   00000660   0D10A0E1           MOV      R1,SP
   \   00000664   0400A0E1           MOV      R0,R4
   \   00000668   ........           _BLF     ??append,??append??rA
   \   0000066C   0020A0E3           MOV      R2,#+0
   \   00000670   0110A0E3           MOV      R1,#+1
   \   00000674   0D00A0E1           MOV      R0,SP
   \   00000678   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000067C   0020A0E3           MOV      R2,#+0
   \   00000680   0110A0E3           MOV      R1,#+1
   \   00000684   1C008DE2           ADD      R0,SP,#+28
   \   00000688   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000068C   0020A0E3           MOV      R2,#+0
   \   00000690   0110A0E3           MOV      R1,#+1
   \   00000694   70008DE2           ADD      R0,SP,#+112
   \   00000698   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000069C   0020A0E3           MOV      R2,#+0
   \   000006A0   0110A0E3           MOV      R1,#+1
   \   000006A4   38008DE2           ADD      R0,SP,#+56
   \   000006A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006AC   0020A0E3           MOV      R2,#+0
   \   000006B0   0110A0E3           MOV      R1,#+1
   \   000006B4   54008DE2           ADD      R0,SP,#+84
   \   000006B8   ........           _BLF     ??_Tidy,??_Tidy??rA
     93                      }
     94                      if (CableMsrdResistance) {
   \                     ??MakeConfigString_13:
   \   000006BC   E07097E5           LDR      R7,[R7, #+224]
   \   000006C0   0000A0E3           MOV      R0,#+0
   \   000006C4   0710A0E1           MOV      R1,R7
   \   000006C8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000006CC   000050E3           CMP      R0,#+0
   \   000006D0   2D00000A           BEQ      ??MakeConfigString_14
     95                          LocalString += TabStr2 + KeyWord(C_AI_CABLE_RES_MSRD) + FloatToAnsiString(CableMsrdResistance) + CrLfStr;
   \   000006D4   0330A0E3           MOV      R3,#+3
   \   000006D8   0720A0E3           MOV      R2,#+7
   \   000006DC   0710A0E1           MOV      R1,R7
   \   000006E0   54008DE2           ADD      R0,SP,#+84
   \   000006E4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000006E8   AB10A0E3           MOV      R1,#+171
   \   000006EC   801E81E3           ORR      R1,R1,#0x800
   \   000006F0   70008DE2           ADD      R0,SP,#+112
   \   000006F4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000006F8   70208DE2           ADD      R2,SP,#+112
   \   000006FC   8C108DE2           ADD      R1,SP,#+140
   \   00000700   0D00A0E1           MOV      R0,SP
   \   00000704   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000708   54208DE2           ADD      R2,SP,#+84
   \   0000070C   0D10A0E1           MOV      R1,SP
   \   00000710   1C008DE2           ADD      R0,SP,#+28
   \   00000714   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000718   0620A0E1           MOV      R2,R6
   \   0000071C   1C108DE2           ADD      R1,SP,#+28
   \   00000720   38008DE2           ADD      R0,SP,#+56
   \   00000724   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000728   0530A0E1           MOV      R3,R5
   \   0000072C   0020A0E3           MOV      R2,#+0
   \   00000730   38108DE2           ADD      R1,SP,#+56
   \   00000734   0400A0E1           MOV      R0,R4
   \   00000738   ........           _BLF     ??append,??append??rA
   \   0000073C   0020A0E3           MOV      R2,#+0
   \   00000740   0110A0E3           MOV      R1,#+1
   \   00000744   38008DE2           ADD      R0,SP,#+56
   \   00000748   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000074C   0020A0E3           MOV      R2,#+0
   \   00000750   0110A0E3           MOV      R1,#+1
   \   00000754   1C008DE2           ADD      R0,SP,#+28
   \   00000758   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000075C   0020A0E3           MOV      R2,#+0
   \   00000760   0110A0E3           MOV      R1,#+1
   \   00000764   54008DE2           ADD      R0,SP,#+84
   \   00000768   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000076C   0020A0E3           MOV      R2,#+0
   \   00000770   0110A0E3           MOV      R1,#+1
   \   00000774   0D00A0E1           MOV      R0,SP
   \   00000778   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000077C   0020A0E3           MOV      R2,#+0
   \   00000780   0110A0E3           MOV      R1,#+1
   \   00000784   70008DE2           ADD      R0,SP,#+112
   \   00000788   ........           _BLF     ??_Tidy,??_Tidy??rA
     96                      }
     97                      LocalString += TabStr2 + KeyWord(C_AI_FRO);
   \                     ??MakeConfigString_14:
   \   0000078C   B610A0E3           MOV      R1,#+182
   \   00000790   801E81E3           ORR      R1,R1,#0x800
   \   00000794   8C0F8DE2           ADD      R0,SP,#+560
   \   00000798   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000079C   8C2F8DE2           ADD      R2,SP,#+560
   \   000007A0   8C108DE2           ADD      R1,SP,#+140
   \   000007A4   930F8DE2           ADD      R0,SP,#+588
   \   000007A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000007AC   0530A0E1           MOV      R3,R5
   \   000007B0   0020A0E3           MOV      R2,#+0
   \   000007B4   931F8DE2           ADD      R1,SP,#+588
   \   000007B8   0400A0E1           MOV      R0,R4
   \   000007BC   ........           _BLF     ??append,??append??rA
   \   000007C0   0020A0E3           MOV      R2,#+0
   \   000007C4   0110A0E3           MOV      R1,#+1
   \   000007C8   930F8DE2           ADD      R0,SP,#+588
   \   000007CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007D0   0020A0E3           MOV      R2,#+0
   \   000007D4   0110A0E3           MOV      R1,#+1
   \   000007D8   8C0F8DE2           ADD      R0,SP,#+560
   \   000007DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     98                      for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \   000007E0   0070A0E3           MOV      R7,#+0
     99                          LocalString += TabStr1 + (AnsiString)temSensor->FRO[ind];
   \                     ??MakeConfigString_15:
   \   000007E4   870089E0           ADD      R0,R9,R7, LSL #+1
   \   000007E8   730F80E2           ADD      R0,R0,#+460
   \   000007EC   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000007F0   1C008DE2           ADD      R0,SP,#+28
    100                      }
   \   000007F4   017087E2           ADD      R7,R7,#+1
   \   000007F8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000007FC   0020A0E1           MOV      R2,R0
   \   00000800   9A1F8DE2           ADD      R1,SP,#+616
   \   00000804   0D00A0E1           MOV      R0,SP
   \   00000808   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000080C   0530A0E1           MOV      R3,R5
   \   00000810   0020A0E3           MOV      R2,#+0
   \   00000814   0D10A0E1           MOV      R1,SP
   \   00000818   0400A0E1           MOV      R0,R4
   \   0000081C   ........           _BLF     ??append,??append??rA
   \   00000820   0020A0E3           MOV      R2,#+0
   \   00000824   0110A0E3           MOV      R1,#+1
   \   00000828   0D00A0E1           MOV      R0,SP
   \   0000082C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000830   0020A0E3           MOV      R2,#+0
   \   00000834   0110A0E3           MOV      R1,#+1
   \   00000838   1C008DE2           ADD      R0,SP,#+28
   \   0000083C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000840   040057E3           CMP      R7,#+4
   \   00000844   E6FFFFBA           BLT      ??MakeConfigString_15
    101                      LocalString += CrLfStr;
   \   00000848   0530A0E1           MOV      R3,R5
   \   0000084C   0020A0E3           MOV      R2,#+0
   \   00000850   0610A0E1           MOV      R1,R6
   \   00000854   0400A0E1           MOV      R0,R4
   \   00000858   ........           _BLF     ??append,??append??rA
    102          
    103                      LocalString += TabStr2 + KeyWord(C_AI_G1);
   \   0000085C   B710A0E3           MOV      R1,#+183
   \   00000860   801E81E3           ORR      R1,R1,#0x800
   \   00000864   7E0F8DE2           ADD      R0,SP,#+504
   \   00000868   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000086C   7E2F8DE2           ADD      R2,SP,#+504
   \   00000870   8C108DE2           ADD      R1,SP,#+140
   \   00000874   850F8DE2           ADD      R0,SP,#+532
   \   00000878   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000087C   0530A0E1           MOV      R3,R5
   \   00000880   0020A0E3           MOV      R2,#+0
   \   00000884   851F8DE2           ADD      R1,SP,#+532
   \   00000888   0400A0E1           MOV      R0,R4
   \   0000088C   ........           _BLF     ??append,??append??rA
   \   00000890   0020A0E3           MOV      R2,#+0
   \   00000894   0110A0E3           MOV      R1,#+1
   \   00000898   850F8DE2           ADD      R0,SP,#+532
   \   0000089C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008A0   0020A0E3           MOV      R2,#+0
   \   000008A4   0110A0E3           MOV      R1,#+1
   \   000008A8   7E0F8DE2           ADD      R0,SP,#+504
   \   000008AC   ........           _BLF     ??_Tidy,??_Tidy??rA
    104                      for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \   000008B0   0070A0E3           MOV      R7,#+0
    105                          LocalString += TabStr1 + (AnsiString)temSensor->G1[ind];
   \                     ??MakeConfigString_16:
   \   000008B4   870089E0           ADD      R0,R9,R7, LSL #+1
   \   000008B8   750F80E2           ADD      R0,R0,#+468
   \   000008BC   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000008C0   0D00A0E1           MOV      R0,SP
    106                      }
   \   000008C4   017087E2           ADD      R7,R7,#+1
   \   000008C8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000008CC   0020A0E1           MOV      R2,R0
   \   000008D0   9A1F8DE2           ADD      R1,SP,#+616
   \   000008D4   1C008DE2           ADD      R0,SP,#+28
   \   000008D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000008DC   0530A0E1           MOV      R3,R5
   \   000008E0   0020A0E3           MOV      R2,#+0
   \   000008E4   1C108DE2           ADD      R1,SP,#+28
   \   000008E8   0400A0E1           MOV      R0,R4
   \   000008EC   ........           _BLF     ??append,??append??rA
   \   000008F0   0020A0E3           MOV      R2,#+0
   \   000008F4   0110A0E3           MOV      R1,#+1
   \   000008F8   1C008DE2           ADD      R0,SP,#+28
   \   000008FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000900   0020A0E3           MOV      R2,#+0
   \   00000904   0110A0E3           MOV      R1,#+1
   \   00000908   0D00A0E1           MOV      R0,SP
   \   0000090C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000910   040057E3           CMP      R7,#+4
   \   00000914   E6FFFFBA           BLT      ??MakeConfigString_16
    107                      LocalString += CrLfStr;
   \   00000918   0530A0E1           MOV      R3,R5
   \   0000091C   0020A0E3           MOV      R2,#+0
   \   00000920   0610A0E1           MOV      R1,R6
   \   00000924   0400A0E1           MOV      R0,R4
   \   00000928   ........           _BLF     ??append,??append??rA
    108          
    109                      LocalString += TabStr2 + KeyWord(C_AI_G2);
   \   0000092C   B810A0E3           MOV      R1,#+184
   \   00000930   801E81E3           ORR      R1,R1,#0x800
   \   00000934   700F8DE2           ADD      R0,SP,#+448
   \   00000938   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000093C   702F8DE2           ADD      R2,SP,#+448
   \   00000940   8C108DE2           ADD      R1,SP,#+140
   \   00000944   770F8DE2           ADD      R0,SP,#+476
   \   00000948   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000094C   0530A0E1           MOV      R3,R5
   \   00000950   0020A0E3           MOV      R2,#+0
   \   00000954   771F8DE2           ADD      R1,SP,#+476
   \   00000958   0400A0E1           MOV      R0,R4
   \   0000095C   ........           _BLF     ??append,??append??rA
   \   00000960   0020A0E3           MOV      R2,#+0
   \   00000964   0110A0E3           MOV      R1,#+1
   \   00000968   770F8DE2           ADD      R0,SP,#+476
   \   0000096C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000970   0020A0E3           MOV      R2,#+0
   \   00000974   0110A0E3           MOV      R1,#+1
   \   00000978   700F8DE2           ADD      R0,SP,#+448
   \   0000097C   ........           _BLF     ??_Tidy,??_Tidy??rA
    110                      for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \   00000980   0070A0E3           MOV      R7,#+0
    111                          LocalString += TabStr1 + (AnsiString)temSensor->G2[ind];
   \                     ??MakeConfigString_17:
   \   00000984   870089E0           ADD      R0,R9,R7, LSL #+1
   \   00000988   770F80E2           ADD      R0,R0,#+476
   \   0000098C   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000990   1C008DE2           ADD      R0,SP,#+28
    112                      }
   \   00000994   017087E2           ADD      R7,R7,#+1
   \   00000998   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   0000099C   0020A0E1           MOV      R2,R0
   \   000009A0   9A1F8DE2           ADD      R1,SP,#+616
   \   000009A4   0D00A0E1           MOV      R0,SP
   \   000009A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000009AC   0530A0E1           MOV      R3,R5
   \   000009B0   0020A0E3           MOV      R2,#+0
   \   000009B4   0D10A0E1           MOV      R1,SP
   \   000009B8   0400A0E1           MOV      R0,R4
   \   000009BC   ........           _BLF     ??append,??append??rA
   \   000009C0   0020A0E3           MOV      R2,#+0
   \   000009C4   0110A0E3           MOV      R1,#+1
   \   000009C8   0D00A0E1           MOV      R0,SP
   \   000009CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009D0   0020A0E3           MOV      R2,#+0
   \   000009D4   0110A0E3           MOV      R1,#+1
   \   000009D8   1C008DE2           ADD      R0,SP,#+28
   \   000009DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009E0   040057E3           CMP      R7,#+4
   \   000009E4   E6FFFFBA           BLT      ??MakeConfigString_17
    113                      LocalString += CrLfStr;
   \   000009E8   0530A0E1           MOV      R3,R5
   \   000009EC   0020A0E3           MOV      R2,#+0
   \   000009F0   0610A0E1           MOV      R1,R6
   \   000009F4   0400A0E1           MOV      R0,R4
   \   000009F8   ........           _BLF     ??append,??append??rA
    114          
    115                      LocalString += TabStr2 + KeyWord(C_AI_G3);
   \   000009FC   B910A0E3           MOV      R1,#+185
   \   00000A00   801E81E3           ORR      R1,R1,#0x800
   \   00000A04   620F8DE2           ADD      R0,SP,#+392
   \   00000A08   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000A0C   622F8DE2           ADD      R2,SP,#+392
   \   00000A10   8C108DE2           ADD      R1,SP,#+140
   \   00000A14   690F8DE2           ADD      R0,SP,#+420
   \   00000A18   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A1C   0530A0E1           MOV      R3,R5
   \   00000A20   0020A0E3           MOV      R2,#+0
   \   00000A24   691F8DE2           ADD      R1,SP,#+420
   \   00000A28   0400A0E1           MOV      R0,R4
   \   00000A2C   ........           _BLF     ??append,??append??rA
   \   00000A30   0020A0E3           MOV      R2,#+0
   \   00000A34   0110A0E3           MOV      R1,#+1
   \   00000A38   690F8DE2           ADD      R0,SP,#+420
   \   00000A3C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A40   0020A0E3           MOV      R2,#+0
   \   00000A44   0110A0E3           MOV      R1,#+1
   \   00000A48   620F8DE2           ADD      R0,SP,#+392
   \   00000A4C   ........           _BLF     ??_Tidy,??_Tidy??rA
    116                      for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \   00000A50   0070A0E3           MOV      R7,#+0
    117                          LocalString += TabStr1 + (AnsiString)temSensor->G3[ind];
   \                     ??MakeConfigString_18:
   \   00000A54   870089E0           ADD      R0,R9,R7, LSL #+1
   \   00000A58   790F80E2           ADD      R0,R0,#+484
   \   00000A5C   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000A60   0D00A0E1           MOV      R0,SP
    118                      }
   \   00000A64   017087E2           ADD      R7,R7,#+1
   \   00000A68   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000A6C   0020A0E1           MOV      R2,R0
   \   00000A70   9A1F8DE2           ADD      R1,SP,#+616
   \   00000A74   1C008DE2           ADD      R0,SP,#+28
   \   00000A78   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A7C   0530A0E1           MOV      R3,R5
   \   00000A80   0020A0E3           MOV      R2,#+0
   \   00000A84   1C108DE2           ADD      R1,SP,#+28
   \   00000A88   0400A0E1           MOV      R0,R4
   \   00000A8C   ........           _BLF     ??append,??append??rA
   \   00000A90   0020A0E3           MOV      R2,#+0
   \   00000A94   0110A0E3           MOV      R1,#+1
   \   00000A98   1C008DE2           ADD      R0,SP,#+28
   \   00000A9C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AA0   0020A0E3           MOV      R2,#+0
   \   00000AA4   0110A0E3           MOV      R1,#+1
   \   00000AA8   0D00A0E1           MOV      R0,SP
   \   00000AAC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AB0   040057E3           CMP      R7,#+4
   \   00000AB4   E6FFFFBA           BLT      ??MakeConfigString_18
    119                      LocalString += CrLfStr;
   \   00000AB8   0530A0E1           MOV      R3,R5
   \   00000ABC   0020A0E3           MOV      R2,#+0
   \   00000AC0   0610A0E1           MOV      R1,R6
   \   00000AC4   0400A0E1           MOV      R0,R4
   \   00000AC8   ........           _BLF     ??append,??append??rA
    120          
    121                      LocalString += TabStr2 + KeyWord(C_AI_NL1) + (AnsiString)temSensor->NL1 + CrLfStr;
   \   00000ACC   F010DAE1           LDRSH    R1,[R10, #+0]
   \   00000AD0   D90F8DE2           ADD      R0,SP,#+868
   \   00000AD4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000AD8   0070A0E1           MOV      R7,R0
   \   00000ADC   AF10A0E3           MOV      R1,#+175
   \   00000AE0   801E81E3           ORR      R1,R1,#0x800
   \   00000AE4   460F8DE2           ADD      R0,SP,#+280
   \   00000AE8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000AEC   462F8DE2           ADD      R2,SP,#+280
   \   00000AF0   8C108DE2           ADD      R1,SP,#+140
   \   00000AF4   4D0F8DE2           ADD      R0,SP,#+308
   \   00000AF8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000AFC   0720A0E1           MOV      R2,R7
   \   00000B00   4D1F8DE2           ADD      R1,SP,#+308
   \   00000B04   540F8DE2           ADD      R0,SP,#+336
   \   00000B08   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B0C   0620A0E1           MOV      R2,R6
   \   00000B10   541F8DE2           ADD      R1,SP,#+336
   \   00000B14   5B0F8DE2           ADD      R0,SP,#+364
   \   00000B18   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B1C   0530A0E1           MOV      R3,R5
   \   00000B20   0020A0E3           MOV      R2,#+0
   \   00000B24   5B1F8DE2           ADD      R1,SP,#+364
   \   00000B28   0400A0E1           MOV      R0,R4
   \   00000B2C   ........           _BLF     ??append,??append??rA
   \   00000B30   0020A0E3           MOV      R2,#+0
   \   00000B34   0110A0E3           MOV      R1,#+1
   \   00000B38   5B0F8DE2           ADD      R0,SP,#+364
   \   00000B3C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B40   0020A0E3           MOV      R2,#+0
   \   00000B44   0110A0E3           MOV      R1,#+1
   \   00000B48   540F8DE2           ADD      R0,SP,#+336
   \   00000B4C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B50   0020A0E3           MOV      R2,#+0
   \   00000B54   0110A0E3           MOV      R1,#+1
   \   00000B58   D90F8DE2           ADD      R0,SP,#+868
   \   00000B5C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B60   0020A0E3           MOV      R2,#+0
   \   00000B64   0110A0E3           MOV      R1,#+1
   \   00000B68   4D0F8DE2           ADD      R0,SP,#+308
   \   00000B6C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B70   0020A0E3           MOV      R2,#+0
   \   00000B74   0110A0E3           MOV      R1,#+1
   \   00000B78   460F8DE2           ADD      R0,SP,#+280
   \   00000B7C   ........           _BLF     ??_Tidy,??_Tidy??rA
    122                      LocalString += TabStr2 + KeyWord(C_AI_NL2) + (AnsiString)temSensor->NL2 + CrLfStr;
   \   00000B80   F210DAE1           LDRSH    R1,[R10, #+2]
   \   00000B84   E00F8DE2           ADD      R0,SP,#+896
   \   00000B88   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000B8C   0070A0E1           MOV      R7,R0
   \   00000B90   8B1EA0E3           MOV      R1,#+2224
   \   00000B94   A8008DE2           ADD      R0,SP,#+168
   \   00000B98   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000B9C   A8208DE2           ADD      R2,SP,#+168
   \   00000BA0   8C108DE2           ADD      R1,SP,#+140
   \   00000BA4   C4008DE2           ADD      R0,SP,#+196
   \   00000BA8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BAC   0720A0E1           MOV      R2,R7
   \   00000BB0   C4108DE2           ADD      R1,SP,#+196
   \   00000BB4   E0008DE2           ADD      R0,SP,#+224
   \   00000BB8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BBC   0620A0E1           MOV      R2,R6
   \   00000BC0   E0108DE2           ADD      R1,SP,#+224
   \   00000BC4   FC008DE2           ADD      R0,SP,#+252
   \   00000BC8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000BCC   0530A0E1           MOV      R3,R5
   \   00000BD0   0020A0E3           MOV      R2,#+0
   \   00000BD4   FC108DE2           ADD      R1,SP,#+252
   \   00000BD8   0400A0E1           MOV      R0,R4
   \   00000BDC   ........           _BLF     ??append,??append??rA
   \   00000BE0   0020A0E3           MOV      R2,#+0
   \   00000BE4   0110A0E3           MOV      R1,#+1
   \   00000BE8   FC008DE2           ADD      R0,SP,#+252
   \   00000BEC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BF0   0020A0E3           MOV      R2,#+0
   \   00000BF4   0110A0E3           MOV      R1,#+1
   \   00000BF8   E0008DE2           ADD      R0,SP,#+224
   \   00000BFC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C00   0020A0E3           MOV      R2,#+0
   \   00000C04   0110A0E3           MOV      R1,#+1
   \   00000C08   E00F8DE2           ADD      R0,SP,#+896
   \   00000C0C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C10   0020A0E3           MOV      R2,#+0
   \   00000C14   0110A0E3           MOV      R1,#+1
   \   00000C18   C4008DE2           ADD      R0,SP,#+196
   \   00000C1C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000C20   0020A0E3           MOV      R2,#+0
   \   00000C24   0110A0E3           MOV      R1,#+1
   \   00000C28   A8008DE2           ADD      R0,SP,#+168
   \   00000C2C   ........           _BLF     ??_Tidy,??_Tidy??rA
    123                      if ( temSensor->EEPromGain != 1.0 ) {
   \   00000C30   04009AE5           LDR      R0,[R10, #+4]
   \   00000C34   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000C38   0020A0E3           MOV      R2,#+0
   \   00000C3C   C035A0E3           MOV      R3,#+805306368
   \   00000C40   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000C44   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   00000C48   000050E3           CMP      R0,#+0
   \   00000C4C   2F00000A           BEQ      ??MakeConfigString_19
    124                          LocalString += TabStr2 + KeyWord(C_AI_EEPROM_GAIN) + (AnsiString)temSensor->EEPromGain + CrLfStr;
   \   00000C50   04009AE5           LDR      R0,[R10, #+4]
   \   00000C54   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000C58   0120A0E1           MOV      R2,R1
   \   00000C5C   0010A0E1           MOV      R1,R0
   \   00000C60   70008DE2           ADD      R0,SP,#+112
   \   00000C64   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   00000C68   0070A0E1           MOV      R7,R0
   \   00000C6C   BE10A0E3           MOV      R1,#+190
   \   00000C70   801E81E3           ORR      R1,R1,#0x800
   \   00000C74   54008DE2           ADD      R0,SP,#+84
   \   00000C78   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000C7C   54208DE2           ADD      R2,SP,#+84
   \   00000C80   8C108DE2           ADD      R1,SP,#+140
   \   00000C84   38008DE2           ADD      R0,SP,#+56
   \   00000C88   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C8C   0720A0E1           MOV      R2,R7
   \   00000C90   38108DE2           ADD      R1,SP,#+56
   \   00000C94   1C008DE2           ADD      R0,SP,#+28
   \   00000C98   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C9C   0620A0E1           MOV      R2,R6
   \   00000CA0   1C108DE2           ADD      R1,SP,#+28
   \   00000CA4   0D00A0E1           MOV      R0,SP
   \   00000CA8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000CAC   0530A0E1           MOV      R3,R5
   \   00000CB0   0020A0E3           MOV      R2,#+0
   \   00000CB4   0D10A0E1           MOV      R1,SP
   \   00000CB8   0400A0E1           MOV      R0,R4
   \   00000CBC   ........           _BLF     ??append,??append??rA
   \   00000CC0   0020A0E3           MOV      R2,#+0
   \   00000CC4   0110A0E3           MOV      R1,#+1
   \   00000CC8   0D00A0E1           MOV      R0,SP
   \   00000CCC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CD0   0020A0E3           MOV      R2,#+0
   \   00000CD4   0110A0E3           MOV      R1,#+1
   \   00000CD8   1C008DE2           ADD      R0,SP,#+28
   \   00000CDC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CE0   0020A0E3           MOV      R2,#+0
   \   00000CE4   0110A0E3           MOV      R1,#+1
   \   00000CE8   70008DE2           ADD      R0,SP,#+112
   \   00000CEC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CF0   0020A0E3           MOV      R2,#+0
   \   00000CF4   0110A0E3           MOV      R1,#+1
   \   00000CF8   38008DE2           ADD      R0,SP,#+56
   \   00000CFC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D00   0020A0E3           MOV      R2,#+0
   \   00000D04   0110A0E3           MOV      R1,#+1
   \   00000D08   54008DE2           ADD      R0,SP,#+84
   \   00000D0C   ........           _BLF     ??_Tidy,??_Tidy??rA
    125                      }
    126                      if ( temSensor->EEPromOffset != 0.0 ) {
   \                     ??MakeConfigString_19:
   \   00000D10   08009AE5           LDR      R0,[R10, #+8]
   \   00000D14   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000D18   0020A0E3           MOV      R2,#+0
   \   00000D1C   0030A0E3           MOV      R3,#+0
   \   00000D20   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   00000D24   000050E3           CMP      R0,#+0
   \   00000D28   1C01000A           BEQ      ??MakeConfigString_7
    127                          LocalString += TabStr2 + KeyWord(C_AI_EEPROM_OFFSET) + (AnsiString)temSensor->EEPromOffset + CrLfStr;
   \   00000D2C   08009AE5           LDR      R0,[R10, #+8]
   \   00000D30   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000D34   0120A0E1           MOV      R2,R1
   \   00000D38   0010A0E1           MOV      R1,R0
   \   00000D3C   54008DE2           ADD      R0,SP,#+84
   \   00000D40   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   00000D44   0070A0E1           MOV      R7,R0
   \   00000D48   BF10A0E3           MOV      R1,#+191
   \   00000D4C   801E81E3           ORR      R1,R1,#0x800
   \   00000D50   70008DE2           ADD      R0,SP,#+112
   \   00000D54   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000D58   70208DE2           ADD      R2,SP,#+112
   \   00000D5C   8C108DE2           ADD      R1,SP,#+140
   \   00000D60   38008DE2           ADD      R0,SP,#+56
   \   00000D64   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D68   0720A0E1           MOV      R2,R7
   \   00000D6C   38108DE2           ADD      R1,SP,#+56
   \   00000D70   0D00A0E1           MOV      R0,SP
   \   00000D74   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D78   0620A0E1           MOV      R2,R6
   \   00000D7C   0D10A0E1           MOV      R1,SP
   \   00000D80   1C008DE2           ADD      R0,SP,#+28
   \   00000D84   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D88   0530A0E1           MOV      R3,R5
   \   00000D8C   0020A0E3           MOV      R2,#+0
   \   00000D90   1C108DE2           ADD      R1,SP,#+28
   \   00000D94   0400A0E1           MOV      R0,R4
   \   00000D98   ........           _BLF     ??append,??append??rA
   \   00000D9C   0020A0E3           MOV      R2,#+0
   \   00000DA0   0110A0E3           MOV      R1,#+1
   \   00000DA4   1C008DE2           ADD      R0,SP,#+28
   \   00000DA8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DAC   0020A0E3           MOV      R2,#+0
   \   00000DB0   0110A0E3           MOV      R1,#+1
   \   00000DB4   0D00A0E1           MOV      R0,SP
   \   00000DB8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DBC   0020A0E3           MOV      R2,#+0
   \   00000DC0   0110A0E3           MOV      R1,#+1
   \   00000DC4   54008DE2           ADD      R0,SP,#+84
   \   00000DC8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DCC   0020A0E3           MOV      R2,#+0
   \   00000DD0   0110A0E3           MOV      R1,#+1
   \   00000DD4   38008DE2           ADD      R0,SP,#+56
   \   00000DD8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DDC   0020A0E3           MOV      R2,#+0
   \   00000DE0   0110A0E3           MOV      R1,#+1
   \   00000DE4   70008DE2           ADD      R0,SP,#+112
   \   00000DE8   EB0000EA           B        ??MakeConfigString_20
    128                      }
    129                  }
    130                  break;
    131              case C_AI_ATM_N_Ex          :
    132              case C_AI_ATM_Ex            :
    133              case C_AI_ATM_Ex_H          :
    134              case C_AI_ATM_N_Ex_0_1      :
    135              case C_AI_Gen_4_20mA        :
    136          	case C_AI_DIFF_PRESSURE_mA  :
    137          	case C_AI_APT500		    :
    138          	case C_AI_SPT900		    :
    139              case C_AI_MB_Press_0_20mA   :
    140              case C_AI_MB_Press_4_20mA   :
    141              case C_AI_MB_DiffPre_0_20mA :
    142              case C_AI_MB_DiffPre_4_20mA :
    143          
    144                  {
    145                      AIPressSensor_mA *temSensor = (AIPressSensor_mA *)this;
    146                      LocalString += TabStr2 + KeyWord(C_AI_CAL_DATA) + CrLfStr;
   \                     ??MakeConfigString_21:
   \   00000DEC   B510A0E3           MOV      R1,#+181
   \   00000DF0   801E81E3           ORR      R1,R1,#0x800
   \   00000DF4   E0008DE2           ADD      R0,SP,#+224
   \   00000DF8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000DFC   E0208DE2           ADD      R2,SP,#+224
   \   00000E00   8C108DE2           ADD      R1,SP,#+140
   \   00000E04   C4008DE2           ADD      R0,SP,#+196
   \   00000E08   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E0C   0620A0E1           MOV      R2,R6
   \   00000E10   C4108DE2           ADD      R1,SP,#+196
   \   00000E14   A8008DE2           ADD      R0,SP,#+168
   \   00000E18   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E1C   0530A0E1           MOV      R3,R5
   \   00000E20   0020A0E3           MOV      R2,#+0
   \   00000E24   A8108DE2           ADD      R1,SP,#+168
   \   00000E28   0400A0E1           MOV      R0,R4
   \   00000E2C   ........           _BLF     ??append,??append??rA
   \   00000E30   0020A0E3           MOV      R2,#+0
   \   00000E34   0110A0E3           MOV      R1,#+1
   \   00000E38   A8008DE2           ADD      R0,SP,#+168
   \   00000E3C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E40   0020A0E3           MOV      R2,#+0
   \   00000E44   0110A0E3           MOV      R1,#+1
   \   00000E48   C4008DE2           ADD      R0,SP,#+196
   \   00000E4C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E50   0020A0E3           MOV      R2,#+0
   \   00000E54   0110A0E3           MOV      R1,#+1
   \   00000E58   E0008DE2           ADD      R0,SP,#+224
   \   00000E5C   ........           _BLF     ??_Tidy,??_Tidy??rA
    147                      for ( unsigned ind = 0; ind < temSensor->mAPcnt.size(); ind++ ) {
   \   00000E60   0080A0E3           MOV      R8,#+0
   \   00000E64   4E0000EA           B        ??MakeConfigString_22
   \                     ??MakeConfigString_3:
   \   00000E68   ........           DC32     CrLfStr
   \   00000E6C   ........           DC32     ??npos
    148                          float Percent = temSensor->mAPcnt[ind] * 100.0;
    149                          float CalVal  = temSensor->mACal[ind] * 1000.0;
    150          
    151                          //LocalString +=TabStr3+FloatToAnsiString(Percent,5,1);
    152                          //LocalString +=TabStr1+FloatToAnsiString(CalVal ,5,1)+CrLfStr;
    153                          LocalString += TabStr3 + FloatToAnsiString(temSensor->mAPcnt[ind] * 100.0, 5, 1);
   \                     ??MakeConfigString_23:
   \   00000E70   0520A0E3           MOV      R2,#+5
   \   00000E74   04002DE9           PUSH     {R2}
   \   00000E78   04009AE5           LDR      R0,[R10, #+4]
   \   00000E7C   01B0A0E3           MOV      R11,#+1
   \   00000E80   080190E7           LDR      R0,[R0, +R8, LSL #+2]
   \   00000E84   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000E88   0020A0E1           MOV      R2,R0
   \   00000E8C   0130A0E1           MOV      R3,R1
   \   00000E90   0000A0E3           MOV      R0,#+0
   \   00000E94   4014A0E3           MOV      R1,#+1073741824
   \   00000E98   591881E3           ORR      R1,R1,#0x590000
   \   00000E9C   ........           _BLF     __dMul,??__dMul??rA
   \   00000EA0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000EA4   0400BDE8           POP      {R2}
   \   00000EA8   0010A0E1           MOV      R1,R0
   \   00000EAC   0130A0E3           MOV      R3,#+1
   \   00000EB0   1C008DE2           ADD      R0,SP,#+28
   \   00000EB4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000EB8   1C208DE2           ADD      R2,SP,#+28
   \   00000EBC   D21F8DE2           ADD      R1,SP,#+840
   \   00000EC0   0D00A0E1           MOV      R0,SP
   \   00000EC4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000EC8   0530A0E1           MOV      R3,R5
   \   00000ECC   0020A0E3           MOV      R2,#+0
   \   00000ED0   0D10A0E1           MOV      R1,SP
   \   00000ED4   0400A0E1           MOV      R0,R4
   \   00000ED8   ........           _BLF     ??append,??append??rA
   \   00000EDC   0020A0E3           MOV      R2,#+0
   \   00000EE0   0B10A0E1           MOV      R1,R11
   \   00000EE4   0D00A0E1           MOV      R0,SP
   \   00000EE8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000EEC   0020A0E3           MOV      R2,#+0
   \   00000EF0   0B10A0E1           MOV      R1,R11
   \   00000EF4   1C008DE2           ADD      R0,SP,#+28
   \   00000EF8   ........           _BLF     ??_Tidy,??_Tidy??rA
    154                          LocalString += TabStr1 + FloatToAnsiString(temSensor->mACal[ind] * 1000.0, 5, 1) + CrLfStr;
   \   00000EFC   0520A0E3           MOV      R2,#+5
   \   00000F00   04002DE9           PUSH     {R2}
   \   00000F04   440197E5           LDR      R0,[R7, #+324]
   \   00000F08   080190E7           LDR      R0,[R0, +R8, LSL #+2]
    155                      }
   \   00000F0C   018088E2           ADD      R8,R8,#+1
   \   00000F10   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000F14   0130A0E1           MOV      R3,R1
   \   00000F18   ........           LDR      R1,??DataTable12  ;; 0x408f4000
   \   00000F1C   0020A0E1           MOV      R2,R0
   \   00000F20   0000A0E3           MOV      R0,#+0
   \   00000F24   ........           _BLF     __dMul,??__dMul??rA
   \   00000F28   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000F2C   0400BDE8           POP      {R2}
   \   00000F30   0010A0E1           MOV      R1,R0
   \   00000F34   0B30A0E1           MOV      R3,R11
   \   00000F38   70008DE2           ADD      R0,SP,#+112
   \   00000F3C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000F40   70208DE2           ADD      R2,SP,#+112
   \   00000F44   9A1F8DE2           ADD      R1,SP,#+616
   \   00000F48   54008DE2           ADD      R0,SP,#+84
   \   00000F4C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F50   0620A0E1           MOV      R2,R6
   \   00000F54   54108DE2           ADD      R1,SP,#+84
   \   00000F58   38008DE2           ADD      R0,SP,#+56
   \   00000F5C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F60   0530A0E1           MOV      R3,R5
   \   00000F64   0020A0E3           MOV      R2,#+0
   \   00000F68   38108DE2           ADD      R1,SP,#+56
   \   00000F6C   0400A0E1           MOV      R0,R4
   \   00000F70   ........           _BLF     ??append,??append??rA
   \   00000F74   0020A0E3           MOV      R2,#+0
   \   00000F78   0B10A0E1           MOV      R1,R11
   \   00000F7C   38008DE2           ADD      R0,SP,#+56
   \   00000F80   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F84   0020A0E3           MOV      R2,#+0
   \   00000F88   0B10A0E1           MOV      R1,R11
   \   00000F8C   54008DE2           ADD      R0,SP,#+84
   \   00000F90   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F94   0020A0E3           MOV      R2,#+0
   \   00000F98   0B10A0E1           MOV      R1,R11
   \   00000F9C   70008DE2           ADD      R0,SP,#+112
   \   00000FA0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??MakeConfigString_22:
   \   00000FA4   7C0F89E2           ADD      R0,R9,#+496
   \   00000FA8   041090E5           LDR      R1,[R0, #+4]
   \   00000FAC   000090E5           LDR      R0,[R0, #+0]
   \   00000FB0   000041E0           SUB      R0,R1,R0
   \   00000FB4   200158E1           CMP      R8,R0, LSR #+2
   \   00000FB8   ACFFFF3A           BCC      ??MakeConfigString_23
    156                      LocalString += TabStr2 + KeyWord(C_T_TABLE_END) + CrLfStr;;
   \   00000FBC   9E10A0E3           MOV      R1,#+158
   \   00000FC0   501E81E3           ORR      R1,R1,#0x500
   \   00000FC4   4D0F8DE2           ADD      R0,SP,#+308
   \   00000FC8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000FCC   4D2F8DE2           ADD      R2,SP,#+308
   \   00000FD0   8C108DE2           ADD      R1,SP,#+140
   \   00000FD4   460F8DE2           ADD      R0,SP,#+280
   \   00000FD8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FDC   0620A0E1           MOV      R2,R6
   \   00000FE0   461F8DE2           ADD      R1,SP,#+280
   \   00000FE4   FC008DE2           ADD      R0,SP,#+252
   \   00000FE8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FEC   0530A0E1           MOV      R3,R5
   \   00000FF0   0020A0E3           MOV      R2,#+0
   \   00000FF4   FC108DE2           ADD      R1,SP,#+252
   \   00000FF8   0400A0E1           MOV      R0,R4
   \   00000FFC   ........           _BLF     ??append,??append??rA
   \   00001000   0020A0E3           MOV      R2,#+0
   \   00001004   0110A0E3           MOV      R1,#+1
   \   00001008   FC008DE2           ADD      R0,SP,#+252
   \   0000100C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001010   0020A0E3           MOV      R2,#+0
   \   00001014   0110A0E3           MOV      R1,#+1
   \   00001018   460F8DE2           ADD      R0,SP,#+280
   \   0000101C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001020   0020A0E3           MOV      R2,#+0
   \   00001024   0110A0E3           MOV      R1,#+1
   \   00001028   4D0F8DE2           ADD      R0,SP,#+308
   \   0000102C   ........           _BLF     ??_Tidy,??_Tidy??rA
    157                      LocalString += TabStr2 + KeyWord(C_AI_TZS) + FloatToAnsiString(temSensor->TZS, 5, 3) + CrLfStr;
   \   00001030   3C1197E5           LDR      R1,[R7, #+316]
   \   00001034   0330A0E3           MOV      R3,#+3
   \   00001038   0520A0E3           MOV      R2,#+5
   \   0000103C   700F8DE2           ADD      R0,SP,#+448
   \   00001040   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00001044   B110A0E3           MOV      R1,#+177
   \   00001048   801E81E3           ORR      R1,R1,#0x800
   \   0000104C   690F8DE2           ADD      R0,SP,#+420
   \   00001050   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001054   692F8DE2           ADD      R2,SP,#+420
   \   00001058   8C108DE2           ADD      R1,SP,#+140
   \   0000105C   620F8DE2           ADD      R0,SP,#+392
   \   00001060   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001064   702F8DE2           ADD      R2,SP,#+448
   \   00001068   621F8DE2           ADD      R1,SP,#+392
   \   0000106C   5B0F8DE2           ADD      R0,SP,#+364
   \   00001070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001074   0620A0E1           MOV      R2,R6
   \   00001078   5B1F8DE2           ADD      R1,SP,#+364
   \   0000107C   540F8DE2           ADD      R0,SP,#+336
   \   00001080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001084   0530A0E1           MOV      R3,R5
   \   00001088   0020A0E3           MOV      R2,#+0
   \   0000108C   541F8DE2           ADD      R1,SP,#+336
   \   00001090   0400A0E1           MOV      R0,R4
   \   00001094   ........           _BLF     ??append,??append??rA
   \   00001098   0020A0E3           MOV      R2,#+0
   \   0000109C   0110A0E3           MOV      R1,#+1
   \   000010A0   540F8DE2           ADD      R0,SP,#+336
   \   000010A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000010A8   0020A0E3           MOV      R2,#+0
   \   000010AC   0110A0E3           MOV      R1,#+1
   \   000010B0   5B0F8DE2           ADD      R0,SP,#+364
   \   000010B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000010B8   0020A0E3           MOV      R2,#+0
   \   000010BC   0110A0E3           MOV      R1,#+1
   \   000010C0   700F8DE2           ADD      R0,SP,#+448
   \   000010C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000010C8   0020A0E3           MOV      R2,#+0
   \   000010CC   0110A0E3           MOV      R1,#+1
   \   000010D0   620F8DE2           ADD      R0,SP,#+392
   \   000010D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000010D8   0020A0E3           MOV      R2,#+0
   \   000010DC   0110A0E3           MOV      R1,#+1
   \   000010E0   690F8DE2           ADD      R0,SP,#+420
   \   000010E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    158                      LocalString += TabStr2 + KeyWord(C_AI_TSS) + FloatToAnsiString(temSensor->TSS, 5, 3) + CrLfStr;
   \   000010E8   401197E5           LDR      R1,[R7, #+320]
   \   000010EC   0330A0E3           MOV      R3,#+3
   \   000010F0   0520A0E3           MOV      R2,#+5
   \   000010F4   930F8DE2           ADD      R0,SP,#+588
   \   000010F8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000010FC   B210A0E3           MOV      R1,#+178
   \   00001100   801E81E3           ORR      R1,R1,#0x800
   \   00001104   8C0F8DE2           ADD      R0,SP,#+560
   \   00001108   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000110C   8C2F8DE2           ADD      R2,SP,#+560
   \   00001110   8C108DE2           ADD      R1,SP,#+140
   \   00001114   850F8DE2           ADD      R0,SP,#+532
   \   00001118   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000111C   932F8DE2           ADD      R2,SP,#+588
   \   00001120   851F8DE2           ADD      R1,SP,#+532
   \   00001124   7E0F8DE2           ADD      R0,SP,#+504
   \   00001128   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000112C   0620A0E1           MOV      R2,R6
   \   00001130   7E1F8DE2           ADD      R1,SP,#+504
   \   00001134   770F8DE2           ADD      R0,SP,#+476
   \   00001138   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000113C   0530A0E1           MOV      R3,R5
   \   00001140   0020A0E3           MOV      R2,#+0
   \   00001144   771F8DE2           ADD      R1,SP,#+476
   \   00001148   0400A0E1           MOV      R0,R4
   \   0000114C   ........           _BLF     ??append,??append??rA
   \   00001150   0020A0E3           MOV      R2,#+0
   \   00001154   0110A0E3           MOV      R1,#+1
   \   00001158   770F8DE2           ADD      R0,SP,#+476
   \   0000115C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001160   0020A0E3           MOV      R2,#+0
   \   00001164   0110A0E3           MOV      R1,#+1
   \   00001168   7E0F8DE2           ADD      R0,SP,#+504
   \   0000116C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001170   0020A0E3           MOV      R2,#+0
   \   00001174   0110A0E3           MOV      R1,#+1
   \   00001178   930F8DE2           ADD      R0,SP,#+588
   \   0000117C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001180   0020A0E3           MOV      R2,#+0
   \   00001184   0110A0E3           MOV      R1,#+1
   \   00001188   850F8DE2           ADD      R0,SP,#+532
   \   0000118C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001190   0020A0E3           MOV      R2,#+0
   \   00001194   0110A0E3           MOV      R1,#+1
   \   00001198   8C0F8DE2           ADD      R0,SP,#+560
   \                     ??MakeConfigString_20:
   \   0000119C   ........           _BLF     ??_Tidy,??_Tidy??rA
    159                  }
    160                  break;
    161              }
    162              LocalString += TabStr1 + KeyWord(C_AI_END) + CrLfStr;
   \                     ??MakeConfigString_7:
   \   000011A0   9810A0E3           MOV      R1,#+152
   \   000011A4   801E81E3           ORR      R1,R1,#0x800
   \   000011A8   CB0F8DE2           ADD      R0,SP,#+812
   \   000011AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000011B0   CB2F8DE2           ADD      R2,SP,#+812
   \   000011B4   9A1F8DE2           ADD      R1,SP,#+616
   \   000011B8   C40F8DE2           ADD      R0,SP,#+784
   \   000011BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011C0   0620A0E1           MOV      R2,R6
   \   000011C4   C41F8DE2           ADD      R1,SP,#+784
   \   000011C8   BD0F8DE2           ADD      R0,SP,#+756
   \   000011CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011D0   0530A0E1           MOV      R3,R5
   \   000011D4   0020A0E3           MOV      R2,#+0
   \   000011D8   BD1F8DE2           ADD      R1,SP,#+756
   \   000011DC   0400A0E1           MOV      R0,R4
   \   000011E0   ........           _BLF     ??append,??append??rA
   \   000011E4   0020A0E3           MOV      R2,#+0
   \   000011E8   0110A0E3           MOV      R1,#+1
   \   000011EC   BD0F8DE2           ADD      R0,SP,#+756
   \   000011F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011F4   0020A0E3           MOV      R2,#+0
   \   000011F8   0110A0E3           MOV      R1,#+1
   \   000011FC   C40F8DE2           ADD      R0,SP,#+784
   \   00001200   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001204   0020A0E3           MOV      R2,#+0
   \   00001208   0110A0E3           MOV      R1,#+1
   \   0000120C   CB0F8DE2           ADD      R0,SP,#+812
   \   00001210   ........           _BLF     ??_Tidy,??_Tidy??rA
    163              LocalString += CrLfStr;
   \   00001214   0530A0E1           MOV      R3,R5
   \   00001218   0020A0E3           MOV      R2,#+0
   \   0000121C   0610A0E1           MOV      R1,R6
   \   00001220   0400A0E1           MOV      R0,R4
   \   00001224   ........           _BLF     ??append,??append??rA
    164          
    165              return (LocalString);
   \   00001228   0020A0E3           MOV      R2,#+0
   \   0000122C   0110A0E3           MOV      R1,#+1
   \   00001230   F50F8DE2           ADD      R0,SP,#+980
   \   00001234   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001238   0020A0E3           MOV      R2,#+0
   \   0000123C   0110A0E3           MOV      R1,#+1
   \   00001240   EE0F8DE2           ADD      R0,SP,#+952
   \   00001244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001248   0020A0E3           MOV      R2,#+0
   \   0000124C   0110A0E3           MOV      R1,#+1
   \   00001250   E70F8DE2           ADD      R0,SP,#+924
   \   00001254   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001258   0020A0E3           MOV      R2,#+0
   \   0000125C   0110A0E3           MOV      R1,#+1
   \   00001260   D20F8DE2           ADD      R0,SP,#+840
   \   00001264   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001268   0020A0E3           MOV      R2,#+0
   \   0000126C   0110A0E3           MOV      R1,#+1
   \   00001270   8C008DE2           ADD      R0,SP,#+140
   \   00001274   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001278   0020A0E3           MOV      R2,#+0
   \   0000127C   0110A0E3           MOV      R1,#+1
   \   00001280   9A0F8DE2           ADD      R0,SP,#+616
   \   00001284   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001288   FCDF8DE2           ADD      SP,SP,#+1008
   \   0000128C   ........           B        ?Subroutine30
   \                     ??MakeConfigString_11:
   \   00001290   39B4C876           DC32     0x76c8b439
   \   00001294   BE9FAA3F           DC32     0x3faa9fbe
    166          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine30_0:
   \   00000008   ........           DC32     `?<Constant {(0.0F), (100.0F)}>` + 8
   \   0000000C   ........           DC32     `?<Constant {(0.0F), (100.0F)}>` + 24
   \   00000010   ........           DC32     `?<Constant {(0.0F), (100.0F)}>`
   \   00000014   ........           DC32     `?<Constant {(4.0F), (20.0F)}>`
   \   00000018   ........           DC32     `?<Constant {(0.0F), (100.0F)}>_1`
   \   0000001C   ........           DC32     `?<Constant {(4.0F), (20.0F)}>_1`
   \   00000020   ........           DC32     `?<Constant {(0.0F), (100.0F)}>_2`
   \   00000024   ........           DC32     `?<Constant {(0.0F), (20.0F)}>`
    167          //---------------------------------------------------------------------------
    168          

   \                                 In segment CODE, align 4, keep-with-next
    169          bool AIPressSensor::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   A4D04DE2           SUB      SP,SP,#+164
   \   00000008   0180A0E1           MOV      R8,R1
    170              bool NoError = true;
    171              int ErrorLine = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
   \   00000014   ........           LDR      R1,??Subroutine30_0  ;; `?<Constant {(0.0F), (100.0F)}>` + 8
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   50008DE2           ADD      R0,SP,#+80
    172              int Key;
    173              AnsiString PROName = "Pressure sensor";
   \   00000020   ........           _BLF     ??AnsiString_4,??AnsiString??rA_3
    174              if ( PROPtr )	PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000024   A09084E2           ADD      R9,R4,#+160
   \   00000028   840099E5           LDR      R0,[R9, #+132]
   \   0000002C   0150A0E3           MOV      R5,#+1
   \   00000030   0160A0E3           MOV      R6,#+1
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   1500000A           BEQ      ??LoadConfigString_4
   \   0000003C   ........           LDR      R1,??Subroutine30_0+0x4  ;; `?<Constant {(0.0F), (100.0F)}>` + 24
   \   00000040   34008DE2           ADD      R0,SP,#+52
   \   00000044   ........           _BLF     ??AnsiString_4,??AnsiString??rA_3
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   840099E5           LDR      R0,[R9, #+132]
   \   00000050   442080E2           ADD      R2,R0,#+68
   \   00000054   18008DE2           ADD      R0,SP,#+24
   \   00000058   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000005C   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   18108DE2           ADD      R1,SP,#+24
   \   0000006C   50008DE2           ADD      R0,SP,#+80
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   18008DE2           ADD      R0,SP,#+24
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   34008DE2           ADD      R0,SP,#+52
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
    175              PROName += ":\n";
   \                     ??LoadConfigString_4:
   \   00000094   AD7F8FE2           ADR      R7,??LoadConfigString_5  ;; ":\n"
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           _BLF     strlen,??strlen??rA
   \   000000A0   0020A0E1           MOV      R2,R0
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   50008DE2           ADD      R0,SP,#+80
   \   000000AC   ........           _BLF     ??append_1,??append??rA_1
   \   000000B0   79AFA0E3           MOV      R10,#+484
    176              do {
    177                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_6:
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0D20A0E1           MOV      R2,SP
   \   000000BC   34108DE2           ADD      R1,SP,#+52
   \   000000C0   0800A0E1           MOV      R0,R8
   \   000000C4   ........           _BLF     ??NextWord,??NextWord??rA
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0B00000A           BEQ      ??LoadConfigString_7
    178                  if ( ErrorLine ) {
    179                      if ( ErrorLine != EOF ) {
   \   000000D4   010070E3           CMN      R0,#+1
   \   000000D8   8B01000A           BEQ      ??LoadConfigString_8
    180                          GiveConfigWarning(PROName, ErrorLine);
   \   000000DC   50108DE2           ADD      R1,SP,#+80
   \   000000E0   18008DE2           ADD      R0,SP,#+24
   \   000000E4   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   000000E8   00109DE5           LDR      R1,[SP, #+0]
   \   000000EC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   18008DE2           ADD      R0,SP,#+24
   \                     ??LoadConfigString_9:
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   810100EA           B        ??LoadConfigString_8
    181                      }
    182                  } else {
    183                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_7:
   \   00000104   34108DE2           ADD      R1,SP,#+52
   \   00000108   18008DE2           ADD      R0,SP,#+24
   \   0000010C   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   00000110   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000114   0C008DE5           STR      R0,[SP, #+12]
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   18008DE2           ADD      R0,SP,#+24
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000128   0C009DE5           LDR      R0,[SP, #+12]
   \   0000012C   7BBF84E2           ADD      R11,R4,#+492
   \   00000130   980040E2           SUB      R0,R0,#+152
   \   00000134   800E40E2           SUB      R0,R0,#+2048
   \   00000138   5B0050E3           CMP      R0,#+91
   \   0000013C   3100008A           BHI      ??LoadConfigString_10
   \   00000140   021F8FE2           ADR      R1,??LoadConfigString_1
   \   00000144   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000148   B01091E1           LDRH     R1,[R1, R0]
   \   0000014C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000150   6E013F002D00       DC16     +366,+63,+45,+45
   \              2D00        
   \   00000158   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   00000160   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   00000168   2D002D004A00       DC16     +45,+45,+74,+87
   \              5700        
   \   00000170   570062006D00       DC16     +87,+98,+109,+117
   \              7500        
   \   00000178   6D012D004300       DC16     +365,+45,+67,+297
   \              2901        
   \   00000180   2F0135013C01       DC16     +303,+309,+316,+45
   \              2D00        
   \   00000188   2D008000E600       DC16     +45,+128,+230,+247
   \              F700        
   \   00000190   080119012D00       DC16     +264,+281,+45,+45
   \              2D00        
   \   00000198   2D002D004601       DC16     +45,+45,+326,+358
   \              6601        
   \   000001A0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001A8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001B0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001B8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001C0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001C8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001D0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001D8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001E0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001E8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001F0   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   000001F8   2D002D002D00       DC16     +45,+45,+45,+45
   \              2D00        
   \   00000200   2D002D002D00       DC16     +45,+45,+45,+69
   \              4500        
    184                      switch ( Key ) {
    185                      default:
    186                          GiveConfigWarning(PROName, InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_10:
   \   00000208   34108DE2           ADD      R1,SP,#+52
   \   0000020C   6C008DE2           ADD      R0,SP,#+108
   \   00000210   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   00000214   0070A0E1           MOV      R7,R0
   \   00000218   50108DE2           ADD      R1,SP,#+80
   \   0000021C   88008DE2           ADD      R0,SP,#+136
   \   00000220   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   00000224   1C2098E5           LDR      R2,[R8, #+28]
   \   00000228   0710A0E1           MOV      R1,R7
   \   0000022C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   6C008DE2           ADD      R0,SP,#+108
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0510A0E1           MOV      R1,R5
   \   00000248   88008DE2           ADD      R0,SP,#+136
   \   0000024C   AAFFFFEA           B        ??LoadConfigString_9
    187                          break;
    188                      case C_AI_START_COMMON:
    189                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_11:
   \   00000250   0810A0E1           MOV      R1,R8
   \   00000254   0400A0E1           MOV      R0,R4
   \   00000258   ........           _BLF     ??LoadConfigString_3,??LoadConfigString??rA
   \   0000025C   2A0100EA           B        ??LoadConfigString_8
    190                          break;
    191                      case C_AI_TANK_PRESS:
    192                          IsPressureSns = true;
   \                     ??LoadConfigString_12:
   \   00000260   8050C9E5           STRB     R5,[R9, #+128]
   \   00000264   280100EA           B        ??LoadConfigString_8
    193                          break;
    194                      case C_AI_LOC_TANK_CLEAN:
    195                          IsPressureSns = true;
   \                     ??LoadConfigString_13:
   \   00000268   8050C9E5           STRB     R5,[R9, #+128]
    196                          Location = C_AI_LOC_TANK_CLEAN;
   \   0000026C   F300A0E3           MOV      R0,#+243
   \   00000270   800E80E3           ORR      R0,R0,#0x800
   \   00000274   880089E5           STR      R0,[R9, #+136]
   \   00000278   230100EA           B        ??LoadConfigString_8
    197                          break;
    198                      case C_AI_CABLE_LENGTH_SHIP:
    199                          CableLengthShip     = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_14:
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0D10A0E1           MOV      R1,SP
   \   00000284   0800A0E1           MOV      R0,R8
   \   00000288   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000028C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000290   D00089E5           STR      R0,[R9, #+208]
    200                          NoError = !ErrorLine;
   \   00000294   00009DE5           LDR      R0,[SP, #+0]
   \   00000298   000050E3           CMP      R0,#+0
   \   0000029C   0100001A           BNE      ??LoadConfigString_15
   \                     ??LoadConfigString_16:
   \   000002A0   0160A0E3           MOV      R6,#+1
   \   000002A4   180100EA           B        ??LoadConfigString_8
   \                     ??LoadConfigString_15:
   \   000002A8   0060A0E3           MOV      R6,#+0
   \   000002AC   160100EA           B        ??LoadConfigString_8
    201                          break;
    202                      case C_AI_CABLE_LENGTH_SENS2:
    203                      case C_AI_CABLE_LENGTH_SENS:
    204                          hasCableLengthSensor = true;
   \                     ??LoadConfigString_17:
   \   000002B0   EA50C9E5           STRB     R5,[R9, #+234]
    205                          CableLengthSensor    = ConfigString.ReadDouble(ErrorLine);
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0D10A0E1           MOV      R1,SP
   \   000002BC   0800A0E1           MOV      R0,R8
   \   000002C0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002C4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002C8   D40089E5           STR      R0,[R9, #+212]
    206                          NoError = !ErrorLine;
   \                     ??LoadConfigString_18:
   \   000002CC   00009DE5           LDR      R0,[SP, #+0]
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   F3FFFF1A           BNE      ??LoadConfigString_15
   \   000002D8   F0FFFFEA           B        ??LoadConfigString_16
    207                          break;
    208                      case C_AI_CABLE_RES_SHIP   :
    209                          hasCableResistanceShip = true;
   \                     ??LoadConfigString_19:
   \   000002DC   E850C9E5           STRB     R5,[R9, #+232]
    210                          CableResistanceShip    = ConfigString.ReadDouble(ErrorLine);
   \   000002E0   0020A0E3           MOV      R2,#+0
   \   000002E4   0D10A0E1           MOV      R1,SP
   \   000002E8   0800A0E1           MOV      R0,R8
   \   000002EC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002F0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002F4   D80089E5           STR      R0,[R9, #+216]
    211                          NoError = !ErrorLine;
   \   000002F8   00009DE5           LDR      R0,[SP, #+0]
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   E6FFFF0A           BEQ      ??LoadConfigString_16
   \   00000304   E7FFFFEA           B        ??LoadConfigString_15
    212                          break;
    213                      case C_AI_CABLE_RES_SENS   :
    214                          hasCableResistanceSensor = true;
   \                     ??LoadConfigString_20:
   \   00000308   E950C9E5           STRB     R5,[R9, #+233]
    215                          CableResistanceSensor    = ConfigString.ReadDouble(ErrorLine);
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0D10A0E1           MOV      R1,SP
   \   00000314   0800A0E1           MOV      R0,R8
   \   00000318   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000031C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000320   DC0089E5           STR      R0,[R9, #+220]
    216                          NoError = !ErrorLine;
   \   00000324   E8FFFFEA           B        ??LoadConfigString_18
    217                          break;
    218                      case C_AI_CABLE_RES_MSRD   :
    219                          CableMsrdResistance = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_21:
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0D10A0E1           MOV      R1,SP
   \   00000330   0800A0E1           MOV      R0,R8
   \   00000334   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000338   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000033C   E00089E5           STR      R0,[R9, #+224]
    220                          NoError = !ErrorLine;
   \                     ??LoadConfigString_22:
   \   00000340   00009DE5           LDR      R0,[SP, #+0]
   \   00000344   000050E3           CMP      R0,#+0
   \   00000348   D6FFFF1A           BNE      ??LoadConfigString_15
   \   0000034C   D3FFFFEA           B        ??LoadConfigString_16
   \                     ??LoadConfigString_5:
   \   00000350   3A0A0000           DC8      ":\n",+0
    221                          break;
    222                      case C_AI_CAL_DATA:
    223                          {
    224                              AIPressSensor_mA *tmpSensor = (AIPressSensor_mA *)this;
    225                              do {
    226                                  float Percent = ConfigString.ReadDouble(ErrorLine, C_T_TABLE_END);
   \                     ??LoadConfigString_23:
   \   00000354   9E20A0E3           MOV      R2,#+158
   \   00000358   502E82E3           ORR      R2,R2,#0x500
   \   0000035C   0D10A0E1           MOV      R1,SP
   \   00000360   0800A0E1           MOV      R0,R8
   \   00000364   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000368   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000036C   0070A0E1           MOV      R7,R0
    227                                  float mAmp;
    228                                  if ( !ErrorLine ) {
   \   00000370   00009DE5           LDR      R0,[SP, #+0]
   \   00000374   000050E3           CMP      R0,#+0
   \   00000378   0600001A           BNE      ??LoadConfigString_24
    229                                      mAmp = ConfigString.ReadDouble(ErrorLine, C_T_TABLE_END);
   \   0000037C   9E20A0E3           MOV      R2,#+158
   \   00000380   502E82E3           ORR      R2,R2,#0x500
   \   00000384   0D10A0E1           MOV      R1,SP
   \   00000388   0800A0E1           MOV      R0,R8
   \   0000038C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000390   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000394   00B0A0E1           MOV      R11,R0
    230                                  }
    231                                  if ( !ErrorLine ) {
   \                     ??LoadConfigString_24:
   \   00000398   00009DE5           LDR      R0,[SP, #+0]
   \   0000039C   000050E3           CMP      R0,#+0
   \   000003A0   1600001A           BNE      ??LoadConfigString_25
    232                                      tmpSensor->mAPcnt.push_back(Percent / 100.0);
   \   000003A4   0700A0E1           MOV      R0,R7
   \   000003A8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003AC   0020A0E3           MOV      R2,#+0
   \   000003B0   4034A0E3           MOV      R3,#+1073741824
   \   000003B4   593883E3           ORR      R3,R3,#0x590000
   \   000003B8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000003BC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003C0   0010A0E1           MOV      R1,R0
   \   000003C4   7C0F84E2           ADD      R0,R4,#+496
   \   000003C8   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    233                                      tmpSensor->mACal.push_back(mAmp / 1000.0);
   \   000003CC   0B00A0E1           MOV      R0,R11
   \   000003D0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003D4   ........           LDR      R3,??DataTable12  ;; 0x408f4000
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000003E0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000003E4   0070A0E1           MOV      R7,R0
   \   000003E8   0710A0E1           MOV      R1,R7
   \   000003EC   04008AE0           ADD      R0,R10,R4
   \   000003F0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    234                                      tmpSensor->mACor.push_back(mAmp / 1000.0);
   \   000003F4   0710A0E1           MOV      R1,R7
   \   000003F8   7F0F84E2           ADD      R0,R4,#+508
   \   000003FC   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    235                                  }
    236                              } while ( !ErrorLine );
   \                     ??LoadConfigString_25:
   \   00000400   00009DE5           LDR      R0,[SP, #+0]
   \   00000404   000050E3           CMP      R0,#+0
   \   00000408   D1FFFF0A           BEQ      ??LoadConfigString_23
    237                              if ( ErrorLine == END_FOUND ) {
   \   0000040C   020070E3           CMN      R0,#+2
   \   00000410   BD00001A           BNE      ??LoadConfigString_8
    238                                  // End found, Permitted in this case, so ErrorStatus set to 0
    239                                  ErrorLine = 0;
   \   00000414   0010A0E3           MOV      R1,#+0
   \   00000418   00108DE5           STR      R1,[SP, #+0]
    240                                  if ( tmpSensor->mAPcnt.empty() || tmpSensor->mACal.empty() ) {
   \   0000041C   7C0F84E2           ADD      R0,R4,#+496
   \   00000420   ........           _BLF     ??empty,??empty??rA
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   0300001A           BNE      ??LoadConfigString_26
   \   0000042C   04008AE0           ADD      R0,R10,R4
   \   00000430   ........           _BLF     ??empty,??empty??rA
   \   00000434   000050E3           CMP      R0,#+0
   \   00000438   B300000A           BEQ      ??LoadConfigString_8
    241                                      float Percent[2] = { 0.0, 100.0 };
   \                     ??LoadConfigString_26:
   \   0000043C   ........           LDR      R1,??Subroutine30_0+0x8  ;; `?<Constant {(0.0F), (100.0F)}>`
   \   00000440   10008DE2           ADD      R0,SP,#+16
   \   00000444   0C0091E8           LDM      R1,{R2,R3}
    242                                      float mAmp[2] = { 4.0, 20.0 };
   \   00000448   ........           LDR      R1,??Subroutine30_0+0xC  ;; `?<Constant {(4.0F), (20.0F)}>`
    243                                      tmpSensor->mAPcnt.clear();
    244                                      tmpSensor->mACal.clear();
    245                                      tmpSensor->mACor.clear();
    246                                      for ( int i = 0; i < 2; i++ ) {
   \   0000044C   0070A0E3           MOV      R7,#+0
   \   00000450   0C0080E8           STM      R0,{R2,R3}
   \   00000454   0C0091E8           LDM      R1,{R2,R3}
   \   00000458   04008DE2           ADD      R0,SP,#+4
   \   0000045C   0C0080E8           STM      R0,{R2,R3}
   \   00000460   7C0F84E2           ADD      R0,R4,#+496
   \   00000464   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000468   04008AE0           ADD      R0,R10,R4
   \   0000046C   ........           _BLF     ??clear_1,??clear??rA_1
   \   00000470   7F0F84E2           ADD      R0,R4,#+508
   \   00000474   ........           _BLF     ??clear_1,??clear??rA_1
    247                                          tmpSensor->mAPcnt.push_back(Percent[i] / 100.0);
   \                     ??LoadConfigString_27:
   \   00000478   10008DE2           ADD      R0,SP,#+16
   \   0000047C   070190E7           LDR      R0,[R0, +R7, LSL #+2]
   \   00000480   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000484   0020A0E3           MOV      R2,#+0
   \   00000488   4034A0E3           MOV      R3,#+1073741824
   \   0000048C   593883E3           ORR      R3,R3,#0x590000
   \   00000490   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000494   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000498   0010A0E1           MOV      R1,R0
   \   0000049C   7C0F84E2           ADD      R0,R4,#+496
   \   000004A0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    248                                          tmpSensor->mACal.push_back(mAmp[i] / 1000.0);
   \   000004A4   04008DE2           ADD      R0,SP,#+4
   \   000004A8   070190E7           LDR      R0,[R0, +R7, LSL #+2]
    249                                          tmpSensor->mACor.push_back(mAmp[i] / 1000.0);
    250                                      }
   \   000004AC   017087E2           ADD      R7,R7,#+1
   \   000004B0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000004B4   ........           LDR      R3,??DataTable12  ;; 0x408f4000
   \   000004B8   0020A0E3           MOV      R2,#+0
   \   000004BC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000004C0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004C4   00B0A0E1           MOV      R11,R0
   \   000004C8   0B10A0E1           MOV      R1,R11
   \   000004CC   04008AE0           ADD      R0,R10,R4
   \   000004D0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   000004D4   0B10A0E1           MOV      R1,R11
   \   000004D8   7F0F84E2           ADD      R0,R4,#+508
   \   000004DC   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   000004E0   020057E3           CMP      R7,#+2
   \   000004E4   880000AA           BGE      ??LoadConfigString_8
   \   000004E8   E2FFFFEA           B        ??LoadConfigString_27
    251                                  }
    252                              }
    253                          }
    254                          break;
    255                      case C_AI_FRO:
    256                          {
    257                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    258                              for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \                     ??LoadConfigString_28:
   \   000004EC   00B0A0E3           MOV      R11,#+0
   \   000004F0   020000EA           B        ??LoadConfigString_29
   \                     ??LoadConfigString_30:
   \   000004F4   01B08BE2           ADD      R11,R11,#+1
   \   000004F8   04005BE3           CMP      R11,#+4
   \   000004FC   820000AA           BGE      ??LoadConfigString_8
    259                                  temSensor->FRO[ind] = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_29:
   \   00000500   0020A0E3           MOV      R2,#+0
   \   00000504   0D10A0E1           MOV      R1,SP
   \   00000508   0800A0E1           MOV      R0,R8
   \   0000050C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000510   8B1084E0           ADD      R1,R4,R11, LSL #+1
   \   00000514   731F81E2           ADD      R1,R1,#+460
   \   00000518   B000C1E1           STRH     R0,[R1, #+0]
    260                                  NoError = !ErrorLine;
   \   0000051C   00009DE5           LDR      R0,[SP, #+0]
   \   00000520   000050E3           CMP      R0,#+0
   \   00000524   0060A013           MOVNE    R6,#+0
   \   00000528   0160A003           MOVEQ    R6,#+1
   \   0000052C   F0FFFFEA           B        ??LoadConfigString_30
    261                              }
    262                          }
    263                          break;
    264                      case C_AI_G1:
    265                          {
    266                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    267                              for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \                     ??LoadConfigString_31:
   \   00000530   00B0A0E3           MOV      R11,#+0
   \   00000534   020000EA           B        ??LoadConfigString_32
   \                     ??LoadConfigString_33:
   \   00000538   01B08BE2           ADD      R11,R11,#+1
   \   0000053C   04005BE3           CMP      R11,#+4
   \   00000540   710000AA           BGE      ??LoadConfigString_8
    268                                  temSensor->G1[ind] = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_32:
   \   00000544   0020A0E3           MOV      R2,#+0
   \   00000548   0D10A0E1           MOV      R1,SP
   \   0000054C   0800A0E1           MOV      R0,R8
   \   00000550   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000554   8B1084E0           ADD      R1,R4,R11, LSL #+1
   \   00000558   751F81E2           ADD      R1,R1,#+468
   \   0000055C   B000C1E1           STRH     R0,[R1, #+0]
    269                                  NoError = !ErrorLine;
   \   00000560   00009DE5           LDR      R0,[SP, #+0]
   \   00000564   000050E3           CMP      R0,#+0
   \   00000568   0060A013           MOVNE    R6,#+0
   \   0000056C   0160A003           MOVEQ    R6,#+1
   \   00000570   F0FFFFEA           B        ??LoadConfigString_33
    270                              }
    271                          }
    272                          break;
    273                      case C_AI_G2:
    274                          {
    275                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    276                              for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \                     ??LoadConfigString_34:
   \   00000574   00B0A0E3           MOV      R11,#+0
   \   00000578   020000EA           B        ??LoadConfigString_35
   \                     ??LoadConfigString_36:
   \   0000057C   01B08BE2           ADD      R11,R11,#+1
   \   00000580   04005BE3           CMP      R11,#+4
   \   00000584   600000AA           BGE      ??LoadConfigString_8
    277                                  temSensor->G2[ind] = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_35:
   \   00000588   0020A0E3           MOV      R2,#+0
   \   0000058C   0D10A0E1           MOV      R1,SP
   \   00000590   0800A0E1           MOV      R0,R8
   \   00000594   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000598   8B1084E0           ADD      R1,R4,R11, LSL #+1
   \   0000059C   771F81E2           ADD      R1,R1,#+476
   \   000005A0   B000C1E1           STRH     R0,[R1, #+0]
    278                                  NoError = !ErrorLine;
   \   000005A4   00009DE5           LDR      R0,[SP, #+0]
   \   000005A8   000050E3           CMP      R0,#+0
   \   000005AC   0060A013           MOVNE    R6,#+0
   \   000005B0   0160A003           MOVEQ    R6,#+1
   \   000005B4   F0FFFFEA           B        ??LoadConfigString_36
    279                              }
    280                          }
    281                          break;
    282                      case C_AI_G3:
    283                          {
    284                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    285                              for ( int ind = 0; ind < MAX_MV_CALDATA; ind++ ) {
   \                     ??LoadConfigString_37:
   \   000005B8   00B0A0E3           MOV      R11,#+0
   \   000005BC   020000EA           B        ??LoadConfigString_38
   \                     ??LoadConfigString_39:
   \   000005C0   01B08BE2           ADD      R11,R11,#+1
   \   000005C4   04005BE3           CMP      R11,#+4
   \   000005C8   4F0000AA           BGE      ??LoadConfigString_8
    286                                  temSensor->G3[ind] = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_38:
   \   000005CC   0020A0E3           MOV      R2,#+0
   \   000005D0   0D10A0E1           MOV      R1,SP
   \   000005D4   0800A0E1           MOV      R0,R8
   \   000005D8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000005DC   8B1084E0           ADD      R1,R4,R11, LSL #+1
   \   000005E0   B1008AE1           STRH     R0,[R10, +R1]
    287                                  NoError = !ErrorLine;
   \   000005E4   00009DE5           LDR      R0,[SP, #+0]
   \   000005E8   000050E3           CMP      R0,#+0
   \   000005EC   0060A013           MOVNE    R6,#+0
   \   000005F0   0160A003           MOVEQ    R6,#+1
   \   000005F4   F1FFFFEA           B        ??LoadConfigString_39
    288                              }
    289                          }
    290                          break;
    291                      case C_AI_NL1:
    292                          {
    293                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    294                              temSensor->NL1 = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_40:
   \   000005F8   0020A0E3           MOV      R2,#+0
   \   000005FC   0D10A0E1           MOV      R1,SP
   \   00000600   0800A0E1           MOV      R0,R8
   \   00000604   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000608   B000CBE1           STRH     R0,[R11, #+0]
    295                              NoError = !ErrorLine;
   \   0000060C   2EFFFFEA           B        ??LoadConfigString_18
    296                          }
    297                          break;
    298                      case C_AI_NL2:
    299                          {
    300                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    301                              temSensor->NL2 = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_41:
   \   00000610   0020A0E3           MOV      R2,#+0
   \   00000614   0D10A0E1           MOV      R1,SP
   \   00000618   0800A0E1           MOV      R0,R8
   \   0000061C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000620   B200CBE1           STRH     R0,[R11, #+2]
    302                              NoError = !ErrorLine;
   \   00000624   45FFFFEA           B        ??LoadConfigString_22
    303                          }
    304                          break;
    305                      case C_AI_TZS:
    306                          {
    307                              AIPressSensor_mA *temSensor = (AIPressSensor_mA *)this;
    308                              temSensor->TZS = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_42:
   \   00000628   0020A0E3           MOV      R2,#+0
   \   0000062C   0D10A0E1           MOV      R1,SP
   \   00000630   0800A0E1           MOV      R0,R8
   \   00000634   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000638   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000063C   3C0189E5           STR      R0,[R9, #+316]
    309                              NoError = !ErrorLine;
   \   00000640   21FFFFEA           B        ??LoadConfigString_18
    310                          }
    311                          break;
    312                      case C_AI_TSS:
    313                          {
    314                              AIPressSensor_mA *temSensor = (AIPressSensor_mA *)this;
    315                              temSensor->TSS = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_43:
   \   00000644   0020A0E3           MOV      R2,#+0
   \   00000648   0D10A0E1           MOV      R1,SP
   \   0000064C   0800A0E1           MOV      R0,R8
   \   00000650   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000654   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000658   400189E5           STR      R0,[R9, #+320]
    316                              NoError = !ErrorLine;
   \   0000065C   00009DE5           LDR      R0,[SP, #+0]
   \   00000660   000050E3           CMP      R0,#+0
   \   00000664   0DFFFF0A           BEQ      ??LoadConfigString_16
   \   00000668   0EFFFFEA           B        ??LoadConfigString_15
    317                          }
    318                          break;
    319                      case C_AI_EEPROM_GAIN:
    320                          {
    321                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    322                              float tmpGain = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_44:
   \   0000066C   0020A0E3           MOV      R2,#+0
   \   00000670   0D10A0E1           MOV      R1,SP
   \   00000674   0800A0E1           MOV      R0,R8
   \   00000678   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000067C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000680   0060A0E1           MOV      R6,R0
    323                              if ( tmpGain > MIN_GAIN && tmpGain > MAX_GAIN ) {
   \   00000684   04008DE2           ADD      R0,SP,#+4
   \   00000688   01002DE9           PUSH     {R0}
   \   0000068C   0600A0E1           MOV      R0,R6
   \   00000690   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000694   0400BDE8           POP      {R2}
   \   00000698   C035A0E3           MOV      R3,#+805306368
   \   0000069C   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000006A0   030082E8           STM      R2,{R0,R1}
   \   000006A4   04008DE2           ADD      R0,SP,#+4
   \   000006A8   030090E8           LDM      R0,{R0,R1}
   \   000006AC   0120A0E3           MOV      R2,#+1
   \   000006B0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000006B4   000050E3           CMP      R0,#+0
   \   000006B8   0800000A           BEQ      ??LoadConfigString_45
   \   000006BC   04008DE2           ADD      R0,SP,#+4
   \   000006C0   030090E8           LDM      R0,{R0,R1}
   \   000006C4   0120A0E3           MOV      R2,#+1
   \   000006C8   F035A0E3           MOV      R3,#+1006632960
   \   000006CC   FE3783E3           ORR      R3,R3,#0x3F80000
   \   000006D0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000006D4   000050E3           CMP      R0,#+0
    324                                  temSensor->EEPromGain = tmpGain;
   \   000006D8   04608B15           STRNE    R6,[R11, #+4]
   \   000006DC   FAFEFF1A           BNE      ??LoadConfigString_18
    325                              } else {
    326                                  temSensor->EEPromGain = 1.000;
   \                     ??LoadConfigString_45:
   \   000006E0   FE05A0E3           MOV      R0,#+1065353216
   \   000006E4   04008BE5           STR      R0,[R11, #+4]
    327                              }
    328                              NoError = !ErrorLine;
   \   000006E8   F7FEFFEA           B        ??LoadConfigString_18
    329                          }
    330                          break;
    331                      case C_AI_EEPROM_OFFSET:
    332                          {
    333                              AIPressSensor_mV *temSensor = (AIPressSensor_mV *)this;
    334                              temSensor->EEPromOffset = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_46:
   \   000006EC   0020A0E3           MOV      R2,#+0
   \   000006F0   0D10A0E1           MOV      R1,SP
   \   000006F4   0800A0E1           MOV      R0,R8
   \   000006F8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000006FC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000700   08008BE5           STR      R0,[R11, #+8]
    335                              NoError = !ErrorLine;
   \   00000704   0DFFFFEA           B        ??LoadConfigString_22
    336                          }
    337                          break;
    338                      case C_AI_NO_SHORT_CIRC_AL:
    339                          NoShortCircuitAlarm = true;
   \                     ??LoadConfigString_47:
   \   00000708   CC50C9E5           STRB     R5,[R9, #+204]
    340                          break;
    341                      case C_AI_END:
    342                          break;
    343                      }
    344                  }
    345              }while ( NoError && (ErrorLine != EOF) && (Key != C_AI_END) );
   \                     ??LoadConfigString_8:
   \   0000070C   0020A0E3           MOV      R2,#+0
   \   00000710   0110A0E3           MOV      R1,#+1
   \   00000714   34008DE2           ADD      R0,SP,#+52
   \   00000718   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000071C   000056E3           CMP      R6,#+0
   \   00000720   00009D15           LDRNE    R0,[SP, #+0]
   \   00000724   01007013           CMNNE    R0,#+1
   \   00000728   0C009D15           LDRNE    R0,[SP, #+12]
   \   0000072C   9810A013           MOVNE    R1,#+152
   \   00000730   801E8113           ORRNE    R1,R1,#0x800
   \   00000734   01005011           CMPNE    R0,R1
   \   00000738   5DFEFF1A           BNE      ??LoadConfigString_6
    346              switch ( Type  ) {
   \   0000073C   000099E5           LDR      R0,[R9, #+0]
   \   00000740   480040E2           SUB      R0,R0,#+72
   \   00000744   800E40E2           SUB      R0,R0,#+2048
   \   00000748   3C0050E3           CMP      R0,#+60
   \   0000074C   8100008A           BHI      ??LoadConfigString_48
   \   00000750   011F8FE2           ADR      R1,??LoadConfigString_2
   \   00000754   0010D1E7           LDRB     R1,[R1, R0]
   \   00000758   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_2:
   \   0000075C   0F0F0F0F           DC8      +15,+15,+15,+15
   \   00000760   0F0F7E7E           DC8      +15,+15,+126,+126
   \   00000764   7E7E0F0F           DC8      +126,+126,+15,+15
   \   00000768   7E7E7E0F           DC8      +126,+126,+126,+15
   \   0000076C   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000770   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000774   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000778   7E7E7E7E           DC8      +126,+126,+126,+126
   \   0000077C   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000780   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000784   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000788   7E7E7E7E           DC8      +126,+126,+126,+126
   \   0000078C   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000790   7E7E7E7E           DC8      +126,+126,+126,+126
   \   00000794   7E43430F           DC8      +126,+67,+67,+15
   \   00000798   0F000000           DC8      +15,+0,+0,+0
    347              case C_AI_ATM_N_Ex          :
    348              case C_AI_ATM_Ex            :
    349              case C_AI_ATM_Ex_H          :
    350              case C_AI_ATM_N_Ex_0_1      :
    351          	case C_AI_APT500		    :
    352          	case C_AI_SPT900		    :
    353              case C_AI_Gen_4_20mA        :
    354              case C_AI_DIFF_PRESSURE_mA  :
    355              case C_AI_Radar_4_20mA      :
    356              case C_AI_MB_Press_4_20mA   :
    357              case C_AI_MB_DiffPre_4_20mA :
    358                  {
    359                      AIPressSensor_mA *tmpSensor = (AIPressSensor_mA *)this;
    360                      if ( tmpSensor->mAPcnt.empty() || tmpSensor->mACal.empty() ) {
   \                     ??LoadConfigString_49:
   \   0000079C   7C0F84E2           ADD      R0,R4,#+496
   \   000007A0   ........           _BLF     ??empty,??empty??rA
   \   000007A4   000050E3           CMP      R0,#+0
   \   000007A8   0300001A           BNE      ??LoadConfigString_50
   \   000007AC   04008AE0           ADD      R0,R10,R4
   \   000007B0   ........           _BLF     ??empty,??empty??rA
   \   000007B4   000050E3           CMP      R0,#+0
   \   000007B8   6600000A           BEQ      ??LoadConfigString_48
    361                          float Percent[2]    = { 0.0, 100.0 };
   \                     ??LoadConfigString_50:
   \   000007BC   ........           LDR      R1,??Subroutine30_0+0x10  ;; `?<Constant {(0.0F), (100.0F)}>_1`
   \   000007C0   04008DE2           ADD      R0,SP,#+4
   \   000007C4   0C0091E8           LDM      R1,{R2,R3}
    362                          float mAmp[2]       = { 4.0, 20.0 };
   \   000007C8   ........           LDR      R1,??Subroutine30_0+0x14  ;; `?<Constant {(4.0F), (20.0F)}>_1`
    363                          tmpSensor->mAPcnt.clear();
    364                          tmpSensor->mACal.clear();
    365                          tmpSensor->mACor.clear();
    366                          for ( int i = 0; i < 2; i++ ) {
   \   000007CC   0050A0E3           MOV      R5,#+0
   \   000007D0   0C0080E8           STM      R0,{R2,R3}
   \   000007D4   0C0091E8           LDM      R1,{R2,R3}
   \   000007D8   10008DE2           ADD      R0,SP,#+16
   \   000007DC   0C0080E8           STM      R0,{R2,R3}
   \   000007E0   7C0F84E2           ADD      R0,R4,#+496
   \   000007E4   ........           _BLF     ??clear_1,??clear??rA_1
   \   000007E8   04008AE0           ADD      R0,R10,R4
   \   000007EC   ........           _BLF     ??clear_1,??clear??rA_1
   \   000007F0   7F0F84E2           ADD      R0,R4,#+508
   \   000007F4   ........           _BLF     ??clear_1,??clear??rA_1
    367                              tmpSensor->mAPcnt.push_back(Percent[i] / 100.0);
   \                     ??LoadConfigString_51:
   \   000007F8   04008DE2           ADD      R0,SP,#+4
   \   000007FC   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000800   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000804   0020A0E3           MOV      R2,#+0
   \   00000808   4034A0E3           MOV      R3,#+1073741824
   \   0000080C   593883E3           ORR      R3,R3,#0x590000
   \   00000810   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000814   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000818   0010A0E1           MOV      R1,R0
   \   0000081C   7C0F84E2           ADD      R0,R4,#+496
   \   00000820   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    368                              tmpSensor->mACal.push_back(mAmp[i] / 1000.0);
   \   00000824   10008DE2           ADD      R0,SP,#+16
   \   00000828   050190E7           LDR      R0,[R0, +R5, LSL #+2]
    369                              tmpSensor->mACor.push_back(mAmp[i] / 1000.0);
    370                          }
   \   0000082C   015085E2           ADD      R5,R5,#+1
   \   00000830   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000834   ........           LDR      R3,??DataTable12  ;; 0x408f4000
   \   00000838   0020A0E3           MOV      R2,#+0
   \   0000083C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000840   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000844   0070A0E1           MOV      R7,R0
   \   00000848   0710A0E1           MOV      R1,R7
   \   0000084C   04008AE0           ADD      R0,R10,R4
   \   00000850   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000854   0710A0E1           MOV      R1,R7
   \   00000858   7F0F84E2           ADD      R0,R4,#+508
   \   0000085C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000860   020055E3           CMP      R5,#+2
   \   00000864   3B0000AA           BGE      ??LoadConfigString_48
   \   00000868   E2FFFFEA           B        ??LoadConfigString_51
    371                      }
    372                  }
    373                  break;
    374              case C_AI_MB_Press_0_20mA   :
    375              case C_AI_MB_DiffPre_0_20mA :
    376                  {
    377                      AIPressSensor_mA *tmpSensor = (AIPressSensor_mA *)this;
    378                      if ( tmpSensor->mAPcnt.empty() || tmpSensor->mACal.empty() ) {
   \                     ??LoadConfigString_52:
   \   0000086C   7C0F84E2           ADD      R0,R4,#+496
   \   00000870   ........           _BLF     ??empty,??empty??rA
   \   00000874   000050E3           CMP      R0,#+0
   \   00000878   0300001A           BNE      ??LoadConfigString_53
   \   0000087C   04008AE0           ADD      R0,R10,R4
   \   00000880   ........           _BLF     ??empty,??empty??rA
   \   00000884   000050E3           CMP      R0,#+0
   \   00000888   2A00000A           BEQ      ??LoadConfigString_54
    379                          float Percent[2]    = { 0.0, 100.0 };
   \                     ??LoadConfigString_53:
   \   0000088C   ........           LDR      R1,??Subroutine30_0+0x18  ;; `?<Constant {(0.0F), (100.0F)}>_2`
   \   00000890   04008DE2           ADD      R0,SP,#+4
   \   00000894   0C0091E8           LDM      R1,{R2,R3}
    380                          float mAmp[2]       = { 0.0, 20.0 };
   \   00000898   ........           LDR      R1,??Subroutine30_0+0x1C  ;; `?<Constant {(0.0F), (20.0F)}>`
    381                          tmpSensor->mAPcnt.clear();
    382                          tmpSensor->mACal.clear();
    383                          tmpSensor->mACor.clear();
    384                          for ( int i = 0; i < 2; i++ ) {
   \   0000089C   0050A0E3           MOV      R5,#+0
   \   000008A0   0C0080E8           STM      R0,{R2,R3}
   \   000008A4   0C0091E8           LDM      R1,{R2,R3}
   \   000008A8   10008DE2           ADD      R0,SP,#+16
   \   000008AC   0C0080E8           STM      R0,{R2,R3}
   \   000008B0   7C0F84E2           ADD      R0,R4,#+496
   \   000008B4   ........           _BLF     ??clear_1,??clear??rA_1
   \   000008B8   04008AE0           ADD      R0,R10,R4
   \   000008BC   ........           _BLF     ??clear_1,??clear??rA_1
   \   000008C0   7F0F84E2           ADD      R0,R4,#+508
   \   000008C4   ........           _BLF     ??clear_1,??clear??rA_1
    385                              tmpSensor->mAPcnt.push_back(Percent[i] / 100.0);
   \                     ??LoadConfigString_55:
   \   000008C8   04008DE2           ADD      R0,SP,#+4
   \   000008CC   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   000008D0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000008D4   0020A0E3           MOV      R2,#+0
   \   000008D8   4034A0E3           MOV      R3,#+1073741824
   \   000008DC   593883E3           ORR      R3,R3,#0x590000
   \   000008E0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000008E4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000008E8   0010A0E1           MOV      R1,R0
   \   000008EC   7C0F84E2           ADD      R0,R4,#+496
   \   000008F0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    386                              tmpSensor->mACal.push_back(mAmp[i] / 1000.0);
   \   000008F4   10008DE2           ADD      R0,SP,#+16
   \   000008F8   050190E7           LDR      R0,[R0, +R5, LSL #+2]
    387                              tmpSensor->mACor.push_back(mAmp[i] / 1000.0);
    388                          }
   \   000008FC   015085E2           ADD      R5,R5,#+1
   \   00000900   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000904   ........           LDR      R3,??DataTable12  ;; 0x408f4000
   \   00000908   0020A0E3           MOV      R2,#+0
   \   0000090C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000910   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000914   0070A0E1           MOV      R7,R0
   \   00000918   0710A0E1           MOV      R1,R7
   \   0000091C   04008AE0           ADD      R0,R10,R4
   \   00000920   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000924   0710A0E1           MOV      R1,R7
   \   00000928   7F0F84E2           ADD      R0,R4,#+508
   \   0000092C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000930   020055E3           CMP      R5,#+2
   \   00000934   E3FFFFBA           BLT      ??LoadConfigString_55
    389                      }
    390                  }
    391                  if (!NoShortCircuitAlarm) {
   \                     ??LoadConfigString_54:
   \   00000938   CC00D9E5           LDRB     R0,[R9, #+204]
   \   0000093C   000050E3           CMP      R0,#+0
   \   00000940   0400001A           BNE      ??LoadConfigString_48
    392                      AddShortCircuitAlarm();
   \   00000944   041099E5           LDR      R1,[R9, #+4]
   \   00000948   0400A0E1           MOV      R0,R4
   \   0000094C   941091E5           LDR      R1,[R1, #+148]
   \   00000950   0FE0A0E1           MOV      LR,PC
   \   00000954   11FF2FE1           BX       R1
    393                  }
    394                  break;
    395              default:
    396                  break;
    397              }
    398              return (NoError);
   \                     ??LoadConfigString_48:
   \   00000958   0020A0E3           MOV      R2,#+0
   \   0000095C   0110A0E3           MOV      R1,#+1
   \   00000960   50008DE2           ADD      R0,SP,#+80
   \   00000964   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000968   0600A0E1           MOV      R0,R6
   \   0000096C   A4D08DE2           ADD      SP,SP,#+164
   \   00000970                      REQUIRE ?Subroutine30
   \   00000970                      ;; // Fall through to label ?Subroutine30
    399          }
    400          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    401          void AIPressSensor::SetRefSnsPtr(AIPressSensor *SnsPtr) {
   \                     ??SetRefSnsPtr:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    402              if ( SnsPtr && (SnsPtr->Distance == Distance) || IsPressureSns || SnsPtr->IsPressureSns ) {
   \   0000000C   0500000A           BEQ      ??SetRefSnsPtr_1
   \   00000010   4B0FA0E3           MOV      R0,#+300
   \   00000014   051090E7           LDR      R1,[R0, +R5]
   \   00000018   040090E7           LDR      R0,[R0, +R4]
   \   0000001C   ........           _BLF     __fEqual,??__fEqual??rA
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500001A           BNE      ??SetRefSnsPtr_2
   \                     ??SetRefSnsPtr_1:
   \   00000028   480FA0E3           MOV      R0,#+288
   \   0000002C   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500D007           LDRBEQ   R0,[R0, +R5]
   \   00000038   00005003           CMPEQ    R0,#+0
   \   0000003C   0300000A           BEQ      ??SetRefSnsPtr_3
    403                  RefPressSensorSet.insert(SnsPtr);
   \                     ??SetRefSnsPtr_2:
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   641F84E2           ADD      R1,R4,#+400
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??insert,??insert??rA
    404              }
    405          }
   \                     ??SetRefSnsPtr_3:
   \   00000050   3340BDE8           POP      {R0,R1,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
    406          ///////////////////////////////////////////////////////////////
    407          //
    408          // Routines for Calculation of values
    409          //
    410          ///////////////////////////////////////////////////////////////
    411          

   \                                 In segment CODE, align 4, keep-with-next
    412          float AIPressSensor::Calculate(void) {
   \                     ??Calculate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    413          
    414              if ( CanCalculate() ) {
   \   00000008   525FA0E3           MOV      R5,#+328
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1B00000A           BEQ      ??Calculate_1
    415                  float NewCalcValue = Gain * FilteredValue - Offset;
   \   00000018   3C1194E5           LDR      R1,[R4, #+316]
   \   0000001C   440194E5           LDR      R0,[R4, #+324]
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   401194E5           LDR      R1,[R4, #+320]
   \   00000028   ........           _BLF     __fSub,??__fSub??rA
   \   0000002C   0060A0E1           MOV      R6,R0
    416                  ResultOK = true;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   3601C4E5           STRB     R0,[R4, #+310]
    417                  switch ( Location ) {
   \   00000038   280194E5           LDR      R0,[R4, #+296]
   \   0000003C   DF10A0E3           MOV      R1,#+223
   \   00000040   801E81E3           ORR      R1,R1,#0x800
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   8E0E5013           CMPNE    R0,#+2272
   \   0000004C   02108112           ADDNE    R1,R1,#+2
   \   00000050   01005011           CMPNE    R0,R1
   \   00000054   4E108112           ADDNE    R1,R1,#+78
   \   00000058   01005011           CMPNE    R0,R1
   \   0000005C   930E5013           CMPNE    R0,#+2352
   \   00000060   02108112           ADDNE    R1,R1,#+2
   \   00000064   01005011           CMPNE    R0,R1
   \   00000068   0500001A           BNE      ??Calculate_2
    418                  case C_AI_LOC_REDUNDANCY1   :
    419                  case C_AI_LOC_REDUNDANCY2   :
    420                  case C_AI_LOC_REDUNDANCY3   :
    421                  case C_AI_LOC_BOTTOM        :
    422                  case C_AI_LOC_MIDDLE        :
    423                  case C_AI_LOC_UPPER         :
    424                      NewCalcValue -= CalcRefPressure();
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       ??CalcRefPressure
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           _BLF     __fSub,??__fSub??rA
   \   00000080   0060A0E1           MOV      R6,R0
    425                      break;
    426                  default:
    427                      break;
    428          
    429                  }
    430                  CalcValue = NewCalcValue;
   \                     ??Calculate_2:
   \   00000084   046085E7           STR      R6,[R5, +R4]
    431              }
    432              return (CalcValue);
   \                     ??Calculate_1:
   \   00000088   040095E7           LDR      R0,[R5, +R4]
   \   0000008C                      REQUIRE ?Subroutine29
   \   0000008C                      ;; // Fall through to label ?Subroutine29
    433          }
    434          
    435          ///////////////////////////////////////////////////////////////
    436          //
    437          // Routines for the librarian for input
    438          //
    439          ///////////////////////////////////////////////////////////////
    440          

   \                                 In segment CODE, align 4, keep-with-next
    441          int  AIPressSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20809DE5           LDR      R8,[SP, #+32]
   \   00000008   24909DE5           LDR      R9,[SP, #+36]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
    442              int Status = GETVAL_NO_ERR;
   \   0000001C   00A0A0E3           MOV      R10,#+0
    443              Unit = GetUnitId(&DecPnt);
   \   00000020   0810A0E1           MOV      R1,R8
   \   00000024   ........           BL       ??GetUnitId
   \   00000028   000089E5           STR      R0,[R9, #+0]
    444          
    445              switch ( ValueId ) {
   \   0000002C   B50045E2           SUB      R0,R5,#+181
   \   00000030   400E40E2           SUB      R0,R0,#+1024
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   1100008A           BHI      ??GetValue_3
   \   0000003C   011F8FE2           ADR      R1,??GetValue_1
   \   00000040   0010D1E7           LDRB     R1,[R1, R0]
   \   00000044   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000048   000E0E03           DC8      +0,+14,+14,+3
    446              case SVT_AI_OFFSET   :
    447                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   0000004C   400194E5           LDR      R0,[R4, #+320]
   \                     ??GetValue_5:
   \   00000050   000087E5           STR      R0,[R7, #+0]
   \   00000054   130000EA           B        ??GetValue_6
    448                  break;
    449              case SVT_AI_CALC_VAL :
    450                  if ( !CanCalculate() ) {
   \                     ??GetValue_7:
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000060   000050E3           CMP      R0,#+0
    451                      Status = GETVAL_FLOAT_NOT_LEGAL;
   \   00000064   05A0A003           MOVEQ    R10,#+5
   \   00000068   0E00000A           BEQ      ??GetValue_6
    452                  } else {
    453                      MyRetValue = Calculate();
   \   0000006C   A41094E5           LDR      R1,[R4, #+164]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   601091E5           LDR      R1,[R1, #+96]
   \   00000078   0FE0A0E1           MOV      LR,PC
   \   0000007C   11FF2FE1           BX       R1
   \   00000080   F2FFFFEA           B        ??GetValue_5
    454                  }
    455                  break;
    456              default:
    457                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000084   00022DE9           PUSH     {R9}
   \   00000088   00012DE9           PUSH     {R8}
   \   0000008C   0730A0E1           MOV      R3,R7
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   08D08DE2           ADD      SP,SP,#+8
    458                  break;
    459              }
    460              return (Status);
   \                     ??GetValue_6:
   \   000000A8   0A00A0E1           MOV      R0,R10
   \   000000AC   F047BDE8           POP      {R4-R10,LR}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
    461          }
    462          

   \                                 In segment CODE, align 4, keep-with-next
    463          int AIPressSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    464              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    465              switch ( ValueId ) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0F00001A           BNE      ??GetStringValue_2
    466              case SVT_AI_UNIT:
    467                  {
    468                      int Unit = GetUnitId();
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           BL       ??GetUnitId
    469                      MyString = GetUnitName(Unit);
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   0000002C   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000030   0520A0E1           MOV      R2,R5
   \   00000034   003090E5           LDR      R3,[R0, #+0]
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??assign,??assign??rA
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   010000EA           B        ??GetStringValue_3
    470                  }
    471                  break;
    472              default:
    473                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000058   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   0000005C   0050A0E1           MOV      R5,R0
    474          
    475              }
    476              return (Status);
   \                     ??GetStringValue_3:
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   1CD08DE2           ADD      SP,SP,#+28
   \   00000068                      REQUIRE ?Subroutine28
   \   00000068                      ;; // Fall through to label ?Subroutine28
    477          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine28:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    478          

   \                                 In segment CODE, align 4, keep-with-next
    479          int AIPressSensor::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   8060DDE5           LDRB     R6,[SP, #+128]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   02A0A0E1           MOV      R10,R2
   \   00000018   03B0A0E1           MOV      R11,R3
    480              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   04108DE5           STR      R1,[SP, #+4]
    481              int Unit = GetUnitId();
   \   00000028   ........           BL       ??GetUnitId
   \   0000002C   0050A0E1           MOV      R5,R0
    482              switch ( ValueId ) {
   \   00000030   579FA0E3           MOV      R9,#+348
   \   00000034   588FA0E3           MOV      R8,#+352
   \   00000038   B50047E2           SUB      R0,R7,#+181
   \   0000003C   400E40E2           SUB      R0,R0,#+1024
   \   00000040   030050E3           CMP      R0,#+3
   \   00000044   5B00008A           BHI      ??PutValue_3
   \   00000048   011F8FE2           ADR      R1,??PutValue_1
   \   0000004C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000050   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000054   00585824           DC8      +0,+88,+88,+36
    483              case SVT_AI_OFFSET   :
    484          		Offset = ConvertToSi(NewValue, ValUnitId = Unit, Status, MinRange/MH2O_TO_BAR-NORMAL_ATM, MaxRange/MH2O_TO_BAR, Offset);
   \                     ??PutValue_4:
   \   00000058   04508DE5           STR      R5,[SP, #+4]
   \   0000005C   0B10A0E1           MOV      R1,R11
   \   00000060   24008DE2           ADD      R0,SP,#+36
   \   00000064   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   00000068   0060A0E1           MOV      R6,R0
   \   0000006C   507FA0E3           MOV      R7,#+320
   \   00000070   040097E7           LDR      R0,[R7, +R4]
   \   00000074   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000078   03002DE9           PUSH     {R0,R1}
   \   0000007C   040098E7           LDR      R0,[R8, +R4]
   \   00000080   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000084   AC219FE5           LDR      R2,??PutValue_5  ;; 0xffffffffda554b8c
   \   00000088   AC319FE5           LDR      R3,??PutValue_5+0x4  ;; 0x3fb91ae2
   \   0000008C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000090   03002DE9           PUSH     {R0,R1}
   \   00000094   040099E7           LDR      R0,[R9, +R4]
   \   00000098   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000009C   94219FE5           LDR      R2,??PutValue_5  ;; 0xffffffffda554b8c
   \   000000A0   94319FE5           LDR      R3,??PutValue_5+0x4  ;; 0x3fb91ae2
   \   000000A4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000A8   90219FE5           LDR      R2,??PutValue_5+0x8  ;; 0xffffffffbf0f2b0c
   \   000000AC   90319FE5           LDR      R3,??PutValue_5+0xC  ;; 0xffffffffc024a8d1
   \   000000B0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000B4   03002DE9           PUSH     {R0,R1}
   \   000000B8   18208DE2           ADD      R2,SP,#+24
   \   000000BC   0800BDE8           POP      {R3}
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000CC   040087E7           STR      R0,[R7, +R4]
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   38008DE2           ADD      R0,SP,#+56
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E0   14D08DE2           ADD      SP,SP,#+20
   \   000000E4   440000EA           B        ??PutValue_6
    485                  break;
    486              case SVT_AI_CALC_VAL :
    487          		{
    488          			float NewVal = ConvertToSi(NewValue, ValUnitId = Unit, Status, MinRange/MH2O_TO_BAR-NORMAL_ATM, MaxRange/MH2O_TO_BAR);
   \                     ??PutValue_7:
   \   000000E8   04508DE5           STR      R5,[SP, #+4]
   \   000000EC   0B10A0E1           MOV      R1,R11
   \   000000F0   08008DE2           ADD      R0,SP,#+8
   \   000000F4   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   000000F8   0070A0E1           MOV      R7,R0
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   03002DE9           PUSH     {R0,R1}
   \   00000108   040098E7           LDR      R0,[R8, +R4]
   \   0000010C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000110   20219FE5           LDR      R2,??PutValue_5  ;; 0xffffffffda554b8c
   \   00000114   20319FE5           LDR      R3,??PutValue_5+0x4  ;; 0x3fb91ae2
   \   00000118   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000011C   03002DE9           PUSH     {R0,R1}
   \   00000120   040099E7           LDR      R0,[R9, +R4]
   \   00000124   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000128   08219FE5           LDR      R2,??PutValue_5  ;; 0xffffffffda554b8c
   \   0000012C   08319FE5           LDR      R3,??PutValue_5+0x4  ;; 0x3fb91ae2
   \   00000130   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000134   04219FE5           LDR      R2,??PutValue_5+0x8  ;; 0xffffffffbf0f2b0c
   \   00000138   04319FE5           LDR      R3,??PutValue_5+0xC  ;; 0xffffffffc024a8d1
   \   0000013C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000140   03002DE9           PUSH     {R0,R1}
   \   00000144   18208DE2           ADD      R2,SP,#+24
   \   00000148   0800BDE8           POP      {R3}
   \   0000014C   0510A0E1           MOV      R1,R5
   \   00000150   0700A0E1           MOV      R0,R7
   \   00000154   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000158   0050A0E1           MOV      R5,R0
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   1C008DE2           ADD      R0,SP,#+28
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
    489                      if ( IsPressureSns ) {
   \   0000016C   2001D4E5           LDRB     R0,[R4, #+288]
   \   00000170   D61F88E2           ADD      R1,R8,#+856
   \   00000174   14D08DE2           ADD      SP,SP,#+20
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   0500000A           BEQ      ??PutValue_8
    490          				Status = InputToLinkedRefSensors(SVT_AI_CALC_VAL, NewVal, Local);
   \   00000180   0630A0E1           MOV      R3,R6
   \   00000184   0520A0E1           MOV      R2,R5
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   ........           BL       ??InputToLinkedRefSensors
   \                     ??PutValue_9:
   \   00000190   00008DE5           STR      R0,[SP, #+0]
   \   00000194   180000EA           B        ??PutValue_6
    491                      } else {
    492                          if ( Status == E_NO_ERR ) {
   \                     ??PutValue_8:
   \   00000198   00009DE5           LDR      R0,[SP, #+0]
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   1500001A           BNE      ??PutValue_6
    493                              Status = InputToLinkedLevelSensors(SVT_AI_CALC_VAL, NewVal, Local);
   \   000001A4   0630A0E1           MOV      R3,R6
   \   000001A8   0520A0E1           MOV      R2,R5
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   ........           BL       ??InputToLinkedLevelSensors
   \   000001B4   F5FFFFEA           B        ??PutValue_9
    494                          }
    495                      }
    496                  }
    497                  break;
    498              default:
    499                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   000001B8   0B10A0E1           MOV      R1,R11
   \   000001BC   40008DE2           ADD      R0,SP,#+64
   \   000001C0   ........           _BLF     ??AnsiString,??AnsiString??rA_4
   \   000001C4   04108DE2           ADD      R1,SP,#+4
   \   000001C8   02002DE9           PUSH     {R1}
   \   000001CC   40002DE9           PUSH     {R6}
   \   000001D0   0030A0E1           MOV      R3,R0
   \   000001D4   0A20A0E1           MOV      R2,R10
   \   000001D8   0710A0E1           MOV      R1,R7
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   000001E4   08008DE5           STR      R0,[SP, #+8]
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   48008DE2           ADD      R0,SP,#+72
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   08D08DE2           ADD      SP,SP,#+8
    500                  break;
    501              }
    502              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_6:
   \   000001FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000200   000050E3           CMP      R0,#+0
   \   00000204   0400001A           BNE      ??PutValue_10
    503                  SetModifiedFlag();
   \   00000208   A41094E5           LDR      R1,[R4, #+164]
   \   0000020C   0400A0E1           MOV      R0,R4
   \   00000210   541091E5           LDR      R1,[R1, #+84]
   \   00000214   0FE0A0E1           MOV      LR,PC
   \   00000218   11FF2FE1           BX       R1
    504              }
    505              if ( UnitId ) {
   \                     ??PutValue_10:
   \   0000021C   84009DE5           LDR      R0,[SP, #+132]
   \   00000220   000050E3           CMP      R0,#+0
    506                  *UnitId = ValUnitId;
   \   00000224   04109D15           LDRNE    R1,[SP, #+4]
   \   00000228   00108015           STRNE    R1,[R0, #+0]
    507              }
    508              return (Status);
   \   0000022C   00009DE5           LDR      R0,[SP, #+0]
   \   00000230   5CD08DE2           ADD      SP,SP,#+92
   \   00000234   ........           B        ?Subroutine30
   \                     ??PutValue_5:
   \   00000238   8C4B55DA           DC32     0xffffffffda554b8c
   \   0000023C   E21AB93F           DC32     0x3fb91ae2
   \   00000240   0C2B0FBF           DC32     0xffffffffbf0f2b0c
   \   00000244   D1A824C0           DC32     0xffffffffc024a8d1
    509          }
    510          

   \                                 In segment CODE, align 4, keep-with-next
    511          int AIPressSensor::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    512              return (AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine27
   \   00000008                      ;; // Fall through to label ?Subroutine27
    513          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    514          

   \                                 In segment CODE, align 4, keep-with-next
    515          void AIPressSensor::AdjustOffsets(float OffsetChange, bool Local) {
   \                     ??AdjustOffsets:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    516              if ( Master || !Local ) {
   \   00000008   4C009FE5           LDR      R0,??AdjustOffsets_1  ;; Master
   \   0000000C   011021E2           EOR      R1,R1,#0x1
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   000091E1           ORRS     R0,R1,R0
   \   00000018   0E00000A           BEQ      ??AdjustOffsets_2
    517                  set<AIPressSensor *>::iterator pBIt;
    518                  for ( pBIt = ObjectSet.begin(); pBIt != ObjectSet.end(); pBIt++ ) {
   \   0000001C   ........           LDR      R5,??DataTable14  ;; ??ObjectSet
   \   00000020   006095E5           LDR      R6,[R5, #+0]
   \   00000024   090000EA           B        ??AdjustOffsets_3
    519                      (*pBIt)->AdjustOffset(OffsetChange);
   \                     ??AdjustOffsets_4:
   \   00000028   102096E5           LDR      R2,[R6, #+16]
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0200A0E1           MOV      R0,R2
   \   00000034   A42092E5           LDR      R2,[R2, #+164]
   \   00000038   902092E5           LDR      R2,[R2, #+144]
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   12FF2FE1           BX       R2
    520                  }
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000004C   0060A0E1           MOV      R6,R0
   \                     ??AdjustOffsets_3:
   \   00000050   050056E1           CMP      R6,R5
   \   00000054   F3FFFF1A           BNE      ??AdjustOffsets_4
    521              }
    522          }
   \                     ??AdjustOffsets_2:
   \   00000058   ........           B        ?Subroutine29
   \                     ??AdjustOffsets_1:
   \   0000005C   ........           DC32     Master
    523          
    524          ///////////////////////////////////////////////////////////////////
    525          //
    526          // Sensor check methode her, because here we know the application
    527          //
    528          ///////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    529          int AIPressSensor::CheckInput(float Operator_Val, int &Action) {
   \                     ??CheckInput:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0170A0E1           MOV      R7,R1
    530              int InpStat   = E_NO_ERR;
    531              if ( Enable ) {
   \   00000008   3411D0E5           LDRB     R1,[R0, #+308]
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   7400000A           BEQ      ??CheckInput_1
    532          #ifndef WIN32
    533                  if ( RunningTime < ALARM_SYSTEM_DELAY ) {
   \   00000020   DC119FE5           LDR      R1,??CheckInput_2  ;; RunningTime
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   780051E3           CMP      R1,#+120
    534                      InpStat = E_PLEASE_WAIT;
   \   0000002C   3150A0B3           MOVLT    R5,#+49
    535                      Action  = SNS_ADJUST_ABORT;
   \   00000030   700000BA           BLT      ??CheckInput_3
    536                  } else
    537          #endif
    538                  if ( ActiveAlarms ) {
   \   00000034   381090E5           LDR      R1,[R0, #+56]
   \   00000038   000051E3           CMP      R1,#+0
    539                      InpStat = E_SENSOR_ERROR;
   \   0000003C   1F50A013           MOVNE    R5,#+31
    540                      Action  = SNS_ADJUST_ABORT;
   \   00000040   6C00001A           BNE      ??CheckInput_3
   \   00000044   249190E5           LDR      R9,[R0, #+292]
   \   00000048   000059E3           CMP      R9,#+0
   \   0000004C   6600000A           BEQ      ??CheckInput_4
   \   00000050   486190E5           LDR      R6,[R0, #+328]
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000005C   A02099E5           LDR      R2,[R9, #+160]
   \   00000060   FF0F52E3           CMP      R2,#+1020
   \   00000064   410E5213           CMPNE    R2,#+1040
   \   00000068   1130A013           MOVNE    R3,#+17
   \   0000006C   403E8313           ORRNE    R3,R3,#0x400
   \   00000070   03005211           CMPNE    R2,R3
   \   00000074   09308312           ADDNE    R3,R3,#+9
   \   00000078   03005211           CMPNE    R2,R3
   \   0000007C   01308313           ORRNE    R3,R3,#0x1
   \   00000080   03005211           CMPNE    R2,R3
   \   00000084   01308312           ADDNE    R3,R3,#+1
   \   00000088   03005211           CMPNE    R2,R3
   \   0000008C   01308313           ORRNE    R3,R3,#0x1
   \   00000090   03005211           CMPNE    R2,R3
   \   00000094   01308312           ADDNE    R3,R3,#+1
   \   00000098   03005211           CMPNE    R2,R3
   \   0000009C   01308313           ORRNE    R3,R3,#0x1
   \   000000A0   03005211           CMPNE    R2,R3
   \   000000A4   420E5213           CMPNE    R2,#+1056
   \   000000A8   02308312           ADDNE    R3,R3,#+2
   \   000000AC   03005211           CMPNE    R2,R3
   \   000000B0   03308312           ADDNE    R3,R3,#+3
   \   000000B4   03005211           CMPNE    R2,R3
   \   000000B8   0D308312           ADDNE    R3,R3,#+13
   \   000000BC   03005211           CMPNE    R2,R3
   \   000000C0   1200000A           BEQ      ??CheckInput_5
   \   000000C4   460E52E3           CMP      R2,#+1120
   \   000000C8   2F00000A           BEQ      ??CheckInput_6
   \   000000CC   4B30A0E3           MOV      R3,#+75
   \   000000D0   603E83E3           ORR      R3,R3,#0x600
   \   000000D4   030052E1           CMP      R2,R3
   \   000000D8   01308312           ADDNE    R3,R3,#+1
   \   000000DC   03005211           CMPNE    R2,R3
   \   000000E0   01308313           ORRNE    R3,R3,#0x1
   \   000000E4   03005211           CMPNE    R2,R3
   \   000000E8   01308312           ADDNE    R3,R3,#+1
   \   000000EC   03005211           CMPNE    R2,R3
   \   000000F0   01308313           ORRNE    R3,R3,#0x1
   \   000000F4   03005211           CMPNE    R2,R3
   \   000000F8   650E5213           CMPNE    R2,#+1616
   \   000000FC   02308312           ADDNE    R3,R3,#+2
   \   00000100   03005211           CMPNE    R2,R3
   \   00000104   01308312           ADDNE    R3,R3,#+1
   \   00000108   03005211           CMPNE    R2,R3
   \   0000010C   3A00001A           BNE      ??CheckInput_7
    541                  } else {
    542                      if ( PROPtr ) {
    543                          switch ( PROPtr->Type ) {
    544                          case C_PRO_DRAFT_SYSTEM   :
    545                          case C_PRO_DRAFT          :
    546                          case C_DRAFT_DF     :
    547                          case C_DRAFT_DP     :
    548                          case C_DRAFT_DS     :
    549                          case C_DRAFT_DA     :
    550                          case C_DRAFT_DAP    :
    551                          case C_DRAFT_DAS    :
    552                          case C_DRAFT_DFP    :
    553                          case C_DRAFT_DFS    :
    554                              //Action = SNS_ADJUST_OFFSET;
    555                              //break;
    556                          case C_PRO_ATMREFSENS     :
    557                          case C_PRO_TANKPRESS      :
    558                          case C_PRO_TANK           :
    559                          case C_PRO_CARGO          :
    560                          case C_PRO_BALLAST        :
    561                          case C_PRO_HFO            :
    562                          case C_PRO_DO             :
    563                          case C_PRO_LUB            :
    564                          case C_PRO_FW             :
    565                          case C_PRO_MISC           :
    566                          case C_PRO_VOIDSPACE      :
    567                              if ( CalcValue > SNS_ADJUST_GAIN_THRESHOLD ) {
   \                     ??CheckInput_5:
   \   00000110   0120A0E3           MOV      R2,#+1
   \   00000114   4034A0E3           MOV      R3,#+1073741824
   \   00000118   403A83E3           ORR      R3,R3,#0x40000
   \   0000011C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   1600000A           BEQ      ??CheckInput_8
    568                                  // Adjust gain
    569                                  float GainCorrection = Operator_Val / CalcValue;
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   0610A0E1           MOV      R1,R6
   \   00000130   ........           _BLF     __fDiv,??__fDiv??rA
    570                                  if ( (GainCorrection > SNS_ADJUST_MAX_GAIN) ||
    571                                       (GainCorrection < SNS_ADJUST_MIN_GAIN) ) {
   \   00000134   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000138   C8209FE5           LDR      R2,??CheckInput_2+0x4  ;; 0xffffffffc28f5c2a
   \   0000013C   C8309FE5           LDR      R3,??CheckInput_2+0x8  ;; 0x3ff028f5
   \   00000140   0060A0E1           MOV      R6,R0
   \   00000144   0170A0E1           MOV      R7,R1
   \   00000148   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0600001A           BNE      ??CheckInput_9
   \   00000154   B4209FE5           LDR      R2,??CheckInput_2+0xC  ;; 0x7ae147ae
   \   00000158   B4309FE5           LDR      R3,??CheckInput_2+0x10  ;; 0x3fefae14
   \   0000015C   0600A0E1           MOV      R0,R6
   \   00000160   0710A0E1           MOV      R1,R7
   \   00000164   ........           _BLF     __dLess,??__dLess??rA
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   0100000A           BEQ      ??CheckInput_10
    572                                      InpStat = E_GAIN_OUT_OF_RANGE;
   \                     ??CheckInput_9:
   \   00000170   2050A0E3           MOV      R5,#+32
    573                                      Action  = SNS_ADJUST_ABORT;
   \   00000174   1F0000EA           B        ??CheckInput_3
    574                                  } else {
    575                                      Action  = SNS_ADJUST_GAIN;
   \                     ??CheckInput_10:
   \   00000178   0200A0E3           MOV      R0,#+2
   \                     ??CheckInput_11:
   \   0000017C   000084E5           STR      R0,[R4, #+0]
   \   00000180   1D0000EA           B        ??CheckInput_7
    576                                  }
    577                              } else {
    578                                  Action = SNS_ADJUST_OFFSET;
   \                     ??CheckInput_8:
   \   00000184   0300A0E3           MOV      R0,#+3
   \   00000188   FBFFFFEA           B        ??CheckInput_11
    579                              }
    580                              break;
    581                          case C_PRO_LINEPRESS      :
    582                              if ( CalcValue > SNS_ADJUST_LP_GAIN_THRESHOLD ) {
   \                     ??CheckInput_6:
   \   0000018C   84309FE5           LDR      R3,??CheckInput_2+0x14  ;; 0x4052c000
   \   00000190   0120A0E3           MOV      R2,#+1
   \   00000194   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   F8FFFF0A           BEQ      ??CheckInput_8
    583                                  // Adjust gain
    584                                  float GainCorrection = Operator_Val / CalcValue;
   \   000001A0   0700A0E1           MOV      R0,R7
   \   000001A4   0610A0E1           MOV      R1,R6
   \   000001A8   ........           _BLF     __fDiv,??__fDiv??rA
    585                                  if ( (GainCorrection > SNS_ADJUST_LP_MAX_GAIN) ||
    586                                       (GainCorrection < SNS_ADJUST_LP_MIN_GAIN) ) {
   \   000001AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001B0   64209FE5           LDR      R2,??CheckInput_2+0x18  ;; 0xffffffffccccccce
   \   000001B4   64309FE5           LDR      R3,??CheckInput_2+0x1C  ;; 0x3ff0cccc
   \   000001B8   0060A0E1           MOV      R6,R0
   \   000001BC   0170A0E1           MOV      R7,R1
   \   000001C0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   E8FFFF1A           BNE      ??CheckInput_9
   \   000001CC   50209FE5           LDR      R2,??CheckInput_2+0x20  ;; 0x66666666
   \   000001D0   50309FE5           LDR      R3,??CheckInput_2+0x24  ;; 0x3fee6666
   \   000001D4   0600A0E1           MOV      R0,R6
   \   000001D8   0710A0E1           MOV      R1,R7
   \   000001DC   ........           _BLF     __dLess,??__dLess??rA
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0400000A           BEQ      ??CheckInput_7
   \   000001E8   E0FFFFEA           B        ??CheckInput_9
    587                                      InpStat = E_GAIN_OUT_OF_RANGE;
    588                                      Action  = SNS_ADJUST_ABORT;
    589                                  }
    590                              } else {
    591                                  Action = SNS_ADJUST_OFFSET;
    592                              }
    593                              break;
    594                          }
    595          
    596                      } else {
    597                          InpStat = E_INVALID_POINTER;
   \                     ??CheckInput_4:
   \   000001EC   0B50A0E3           MOV      R5,#+11
    598                          Action  = SNS_ADJUST_ABORT;
   \   000001F0   000000EA           B        ??CheckInput_3
    599                      }
    600                  }
    601              } else {
    602                  InpStat = E_SENSOR_IS_DISABELED;
   \                     ??CheckInput_1:
   \   000001F4   2B50A0E3           MOV      R5,#+43
    603                  Action  = SNS_ADJUST_ABORT;
   \                     ??CheckInput_3:
   \   000001F8   008084E5           STR      R8,[R4, #+0]
    604              }
    605          
    606              return (InpStat);
   \                     ??CheckInput_7:
   \   000001FC   0500A0E1           MOV      R0,R5
   \   00000200   ........           B        ?Subroutine31
   \                     ??CheckInput_2:
   \   00000204   ........           DC32     RunningTime
   \   00000208   2A5C8FC2           DC32     0xffffffffc28f5c2a
   \   0000020C   F528F03F           DC32     0x3ff028f5
   \   00000210   AE47E17A           DC32     0x7ae147ae
   \   00000214   14AEEF3F           DC32     0x3fefae14
   \   00000218   00C05240           DC32     0x4052c000
   \   0000021C   CECCCCCC           DC32     0xffffffffccccccce
   \   00000220   CCCCF03F           DC32     0x3ff0cccc
   \   00000224   66666666           DC32     0x66666666
   \   00000228   6666EE3F           DC32     0x3fee6666
    607          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    608          

   \                                 In segment CODE, align 4, keep-with-next
    609          int AIPressSensor::GetUnitId(int *DecPntPtr) {
    610              int Unit;
    611              int DecPnt = 0;
    612              switch ( Location ) {
   \                     ??GetUnitId:
   \   00000000   280190E5           LDR      R0,[R0, #+296]
   \   00000004   DF20A0E3           MOV      R2,#+223
   \   00000008   802E82E3           ORR      R2,R2,#0x800
   \   0000000C   020050E1           CMP      R0,R2
   \   00000010   8E0E5013           CMPNE    R0,#+2272
   \   00000014   02208212           ADDNE    R2,R2,#+2
   \   00000018   02005011           CMPNE    R0,R2
   \   0000001C   02208213           ORRNE    R2,R2,#0x2
   \   00000020   02005011           CMPNE    R0,R2
   \   00000024   01208212           ADDNE    R2,R2,#+1
   \   00000028   02005011           CMPNE    R0,R2
   \   0000002C   0900000A           BEQ      ??GetUnitId_1
   \   00000030   072082E2           ADD      R2,R2,#+7
   \   00000034   020050E1           CMP      R0,R2
   \   00000038   0900000A           BEQ      ??GetUnitId_2
   \   0000003C   442082E2           ADD      R2,R2,#+68
   \   00000040   020050E1           CMP      R0,R2
   \   00000044   930E5013           CMPNE    R0,#+2352
   \   00000048   02208212           ADDNE    R2,R2,#+2
   \   0000004C   02005011           CMPNE    R0,R2
    613              default:
    614                  Unit       = PRESSURE_UNIT1;
   \   00000050   0600A013           MOVNE    R0,#+6
    615                  DecPnt     = 1;
   \   00000054   0300001A           BNE      ??GetUnitId_3
    616                  break;
    617              case C_AI_LOC_BOTTOM:
    618              case C_AI_LOC_MIDDLE:
    619              case C_AI_LOC_UPPER  :
    620              case C_AI_LOC_PUMP_ROOM:
    621              case C_AI_LOC_ENGINE_ROOM:
    622              case C_AI_LOC_REDUNDANCY1:
    623              case C_AI_LOC_REDUNDANCY2:
    624              case C_AI_LOC_REDUNDANCY3:
    625                  Unit       = PRESSURE_UNIT2;
   \                     ??GetUnitId_1:
   \   00000058   0700A0E3           MOV      R0,#+7
    626                  DecPnt     = 3;
   \   0000005C   0320A0E3           MOV      R2,#+3
   \   00000060   010000EA           B        ??GetUnitId_4
    627                  break;
    628              case C_AI_LOC_NOT_DEFINED:
    629              case C_AI_LOC_SYSTEM  :
    630              case C_AI_LOC_VAPOUR  :
    631                  Unit       = PRESSURE_UNIT1;
    632                  DecPnt     = 1;
    633                  break;
    634              case C_AI_LOC_LINE:
    635                  Unit       = PRESSURE_UNIT3;
   \                     ??GetUnitId_2:
   \   00000064   0800A0E3           MOV      R0,#+8
    636                  DecPnt     = 1;
   \                     ??GetUnitId_3:
   \   00000068   0120A0E3           MOV      R2,#+1
    637                  break;
    638              }
    639              if ( DecPntPtr ) {
   \                     ??GetUnitId_4:
   \   0000006C   000051E3           CMP      R1,#+0
    640                  *DecPntPtr = DecPnt;
   \   00000070   00208115           STRNE    R2,[R1, #+0]
    641              }
    642              return (Unit);
   \   00000074   1EFF2FE1           BX       LR               ;; return
    643          }
    644          
    645          //---------------------------------------------------------------------------
    646          //

   \                                 In segment CODE, align 4, keep-with-next
    647          void AIPressSensor::AddTempRefSensor(float *TmpPtr) {
    648              TempPtr = TmpPtr;
   \                     ??AddTempRefSensor:
   \   00000000   641180E5           STR      R1,[R0, #+356]
    649          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
    650          

   \                                 In segment CODE, align 4, keep-with-next
    651          float AIPressSensor::CalcRefPressure(void) {
   \                     ??CalcRefPressure:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    652              float AvgPressure = 0.0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
    653              if ( !RefPressSensorSet.empty() ) {
   \   00000010   A00194E5           LDR      R0,[R4, #+416]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3200000A           BEQ      ??CalcRefPressure_1
    654                  float PressureSum = 0.0;
    655                  int Count         = 0;
    656                  float MaxPress    = -MAXFLOAT;
   \   0000001C   D0609FE5           LDR      R6,??CalcRefPressure_2  ;; 0xffffffffff7d87d7
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   0190A0E1           MOV      R9,R1
    657                  float MinPress    = MAXFLOAT;
   \   00000028   8074C6E3           BIC      R7,R6,#0x80000000
    658                  set<AIPressSensor *>::iterator pBIt;
    659                  for ( pBIt = RefPressSensorSet.begin(); pBIt != RefPressSensorSet.end(); pBIt++ ) {
   \   0000002C   648FA0E3           MOV      R8,#+400
   \   00000030   04A098E7           LDR      R10,[R8, +R4]
   \   00000034   200000EA           B        ??CalcRefPressure_3
    660                      AIPressSensor *SnsPtr = *pBIt;
   \                     ??CalcRefPressure_4:
   \   00000038   10B09AE5           LDR      R11,[R10, #+16]
    661                      if ( SnsPtr->CanCalculate() ) {
   \   0000003C   0B00A0E1           MOV      R0,R11
   \   00000040   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1800000A           BEQ      ??CalcRefPressure_5
    662                          Count++;
    663                          float Pessure = SnsPtr->Calculate();
   \   0000004C   A4109BE5           LDR      R1,[R11, #+164]
   \   00000050   019089E2           ADD      R9,R9,#+1
   \   00000054   601091E5           LDR      R1,[R1, #+96]
   \   00000058   0B00A0E1           MOV      R0,R11
   \   0000005C   0FE0A0E1           MOV      LR,PC
   \   00000060   11FF2FE1           BX       R1
   \   00000064   00B0A0E1           MOV      R11,R0
    664                          PressureSum  += Pessure;
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   0B10A0E1           MOV      R1,R11
   \   00000070   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000074   0050A0E1           MOV      R5,R0
    665                          MaxPress      = max(MaxPress, Pessure);
   \   00000078   0B00A0E1           MOV      R0,R11
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   ........           _BLF     __fLess,??__fLess??rA
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0B60A001           MOVEQ    R6,R11
    666                          MinPress      = min(MinPress, Pessure);
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   0B10A0E1           MOV      R1,R11
   \   00000094   ........           _BLF     __fLess,??__fLess??rA
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0B70A001           MOVEQ    R7,R11
    667                          RefPressDiff  = MaxPress - MinPress;
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   ........           _BLF     __fSub,??__fSub??rA
   \   000000AC   8C0184E5           STR      R0,[R4, #+396]
    668                      }
    669                  }
   \                     ??CalcRefPressure_5:
   \   000000B0   0A00A0E1           MOV      R0,R10
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000B8   00A0A0E1           MOV      R10,R0
   \                     ??CalcRefPressure_3:
   \   000000BC   040088E0           ADD      R0,R8,R4
   \   000000C0   00005AE1           CMP      R10,R0
   \   000000C4   DBFFFF1A           BNE      ??CalcRefPressure_4
    670                  if ( Count ) {
   \   000000C8   000059E3           CMP      R9,#+0
   \   000000CC   0500000A           BEQ      ??CalcRefPressure_1
    671                      AvgPressure = PressureSum / Count;
   \   000000D0   0900A0E1           MOV      R0,R9
   \   000000D4   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000D8   0010A0E1           MOV      R1,R0
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           _BLF     __fDiv,??__fDiv??rA
   \   000000E4   00008DE5           STR      R0,[SP, #+0]
    672                  }
    673              }
    674              return AvgPressure;
   \                     ??CalcRefPressure_1:
   \   000000E8   00009DE5           LDR      R0,[SP, #+0]
   \   000000EC   F24FBDE8           POP      {R1,R4-R11,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return
   \                     ??CalcRefPressure_2:
   \   000000F4   D7877DFF           DC32     0xffffffffff7d87d7
    675          }
    676          

   \                                 In segment CODE, align 4, keep-with-next
    677          int AIPressSensor::InputToLinkedRefSensors(int ValueId, float NewValue, bool Local) {
   \                     ??InputToLinkedRefSensors:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    678              int   ErrStatus      = E_NO_ERR;
    679              float OrgOffsetSum   = 0.0;
    680              float NewOffsetSum   = 0.0;
    681              int   Count          = 0;
    682              if ( !RefPressSensorSet.empty() ) {
   \   00000008   A00195E5           LDR      R0,[R5, #+416]
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   0080A0E3           MOV      R8,#+0
   \   00000014   0690A0E1           MOV      R9,R6
   \   00000018   06A0A0E1           MOV      R10,R6
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   3700000A           BEQ      ??InputToLinkedRefSensors_1
   \   00000024   904195E5           LDR      R4,[R5, #+400]
    683                  set<AIPressSensor *>::iterator pBIt;
    684                  for ( pBIt = RefPressSensorSet.begin(); pBIt != RefPressSensorSet.end(); pBIt++ ) {
   \   00000028   507FA0E3           MOV      R7,#+320
   \   0000002C   150000EA           B        ??InputToLinkedRefSensors_2
    685                      AIPressSensor *SnsPtr = *pBIt;
   \                     ??InputToLinkedRefSensors_3:
   \   00000030   10B094E5           LDR      R11,[R4, #+16]
    686                      if ( SnsPtr->CanCalculate() ) {
   \   00000034   0B00A0E1           MOV      R0,R11
   \   00000038   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0D00000A           BEQ      ??InputToLinkedRefSensors_4
    687                          Count++;
    688                          OrgOffsetSum += SnsPtr->Offset;
   \   00000044   0B0097E7           LDR      R0,[R7, +R11]
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   ........           _BLF     __fAdd,??__fAdd??rA
    689                          ErrStatus     = SnsPtr->AdjustSensorF(NewValue, Local);
   \   00000050   0420DDE5           LDRB     R2,[SP, #+4]
   \   00000054   00109DE5           LDR      R1,[SP, #+0]
   \   00000058   0080A0E1           MOV      R8,R0
   \   0000005C   0B00A0E1           MOV      R0,R11
   \   00000060   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   00000064   0060A0E1           MOV      R6,R0
    690                          NewOffsetSum += SnsPtr->Offset;
   \   00000068   0B0097E7           LDR      R0,[R7, +R11]
   \   0000006C   01A08AE2           ADD      R10,R10,#+1
   \   00000070   0910A0E1           MOV      R1,R9
   \   00000074   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000078   0090A0E1           MOV      R9,R0
    691                      }
    692                  }
   \                     ??InputToLinkedRefSensors_4:
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000084   0040A0E1           MOV      R4,R0
   \                     ??InputToLinkedRefSensors_2:
   \   00000088   640F85E2           ADD      R0,R5,#+400
   \   0000008C   000054E1           CMP      R4,R0
   \   00000090   E6FFFF1A           BNE      ??InputToLinkedRefSensors_3
    693                  if ( Count ) {
   \   00000094   00005AE3           CMP      R10,#+0
   \   00000098   1700000A           BEQ      ??InputToLinkedRefSensors_5
    694                      float AvgOffsetChange = (OrgOffsetSum - NewOffsetSum) / Count;
   \   0000009C   0800A0E1           MOV      R0,R8
   \   000000A0   0910A0E1           MOV      R1,R9
   \   000000A4   ........           _BLF     __fSub,??__fSub??rA
   \   000000A8   0040A0E1           MOV      R4,R0
   \   000000AC   0A00A0E1           MOV      R0,R10
   \   000000B0   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000B4   0010A0E1           MOV      R1,R0
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           _BLF     __fDiv,??__fDiv??rA
   \   000000C0   0080A0E1           MOV      R8,R0
    695                      for ( pBIt = SensorSet.begin(); pBIt != SensorSet.end(); pBIt++ ) {
   \   000000C4   6A9FA0E3           MOV      R9,#+424
   \   000000C8   054099E7           LDR      R4,[R9, +R5]
   \   000000CC   070000EA           B        ??InputToLinkedRefSensors_6
    696                          AIPressSensor *SnsPtr = *pBIt;
   \                     ??InputToLinkedRefSensors_7:
   \   000000D0   10A094E5           LDR      R10,[R4, #+16]
    697                          SnsPtr->Offset  -= AvgOffsetChange;
   \   000000D4   0810A0E1           MOV      R1,R8
   \   000000D8   0A0097E7           LDR      R0,[R7, +R10]
   \   000000DC   ........           _BLF     __fSub,??__fSub??rA
   \   000000E0   0A0087E7           STR      R0,[R7, +R10]
    698                      }
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000EC   0040A0E1           MOV      R4,R0
   \                     ??InputToLinkedRefSensors_6:
   \   000000F0   050089E0           ADD      R0,R9,R5
   \   000000F4   000054E1           CMP      R4,R0
   \   000000F8   F4FFFF1A           BNE      ??InputToLinkedRefSensors_7
    699                  }
    700              }
    701              if ( ErrStatus != E_NO_ERR ) {
   \                     ??InputToLinkedRefSensors_5:
   \   000000FC   000056E3           CMP      R6,#+0
    702                  ErrStatus = E_INPUT_ERR;
   \   00000100   0160A013           MOVNE    R6,#+1
    703              }
    704              return ErrStatus;
   \                     ??InputToLinkedRefSensors_1:
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   F64FBDE8           POP      {R1,R2,R4-R11,LR}
   \   0000010C   1EFF2FE1           BX       LR               ;; return
    705          }
    706          

   \                                 In segment CODE, align 4, keep-with-next
    707          int AIPressSensor::InputToLinkedLevelSensors(int ValueId, float NewValue, bool Local) {
   \                     ??InputToLinkedLevelSensors:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    708              int   ErrStatus      = E_NO_ERR;
    709              if ( !SensorSet.empty() ) {
   \   00000008   B80194E5           LDR      R0,[R4, #+440]
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0F00000A           BEQ      ??InputToLinkedLevelSensors_1
    710                  set<AIPressSensor *>::iterator pBIt;
    711                  for ( pBIt = SensorSet.begin(); pBIt != SensorSet.end(); pBIt++ ) {
   \   00000020   6A8FA0E3           MOV      R8,#+424
   \   00000024   049098E7           LDR      R9,[R8, +R4]
   \   00000028   070000EA           B        ??InputToLinkedLevelSensors_2
    712                      AIPressSensor *SnsPtr = *pBIt;
    713                      ErrStatus = SnsPtr->AdjustSensorF(NewValue, Local);
   \                     ??InputToLinkedLevelSensors_3:
   \   0000002C   100099E5           LDR      R0,[R9, #+16]
   \   00000030   0620A0E1           MOV      R2,R6
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   0000003C   0070A0E1           MOV      R7,R0
    714                  }
   \   00000040   0900A0E1           MOV      R0,R9
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0090A0E1           MOV      R9,R0
   \                     ??InputToLinkedLevelSensors_2:
   \   0000004C   040088E0           ADD      R0,R8,R4
   \   00000050   000059E1           CMP      R9,R0
   \   00000054   F4FFFF1A           BNE      ??InputToLinkedLevelSensors_3
    715              }
    716              if ( ErrStatus != E_NO_ERR ) {
   \   00000058   000057E3           CMP      R7,#+0
    717                  ErrStatus = E_INPUT_ERR;
   \   0000005C   0170A013           MOVNE    R7,#+1
    718              }
    719              return ErrStatus;
   \                     ??InputToLinkedLevelSensors_1:
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064                      REQUIRE ?Subroutine31
   \   00000064                      ;; // Fall through to label ?Subroutine31
    720          }
    721          

   \                                 In segment CODE, align 4, keep-with-next
    722          void AIPressSensor::AddLevelPressSensor(AIPressSensor *SnsPtr) {
   \                     ??AddLevelPressSensor:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    723              if ( SnsPtr ) {
   \   0000000C   2000000A           BEQ      ??AddLevelPressSensor_3
    724                  if ( IsPressureSns ) {
   \   00000010   2001D4E5           LDRB     R0,[R4, #+288]
   \   00000014   6A6FA0E3           MOV      R6,#+424
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1800001A           BNE      ??AddLevelPressSensor_4
    725                      SensorSet.insert(SnsPtr);
    726                  } else {
    727                      switch ( Location ) {
   \   00000020   4A0FA0E3           MOV      R0,#+296
   \   00000024   041090E7           LDR      R1,[R0, +R4]
   \   00000028   2F1041E2           SUB      R1,R1,#+47
   \   0000002C   901E41E2           SUB      R1,R1,#+2304
   \   00000030   020051E3           CMP      R1,#+2
   \   00000034   0C00008A           BHI      ??AddLevelPressSensor_5
   \   00000038   012F8FE2           ADR      R2,??AddLevelPressSensor_1
   \   0000003C   0120D2E7           LDRB     R2,[R2, R1]
   \   00000040   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??AddLevelPressSensor_1:
   \   00000044   00000000           DC8      +0,+0,+0,+0
    728                      case C_AI_LOC_REDUNDANCY1   :
    729                      case C_AI_LOC_REDUNDANCY2   :
    730                      case C_AI_LOC_REDUNDANCY3   :
    731                          switch ( SnsPtr->Location ) {
   \                     ??AddLevelPressSensor_6:
   \   00000048   050090E7           LDR      R0,[R0, +R5]
   \   0000004C   2F0040E2           SUB      R0,R0,#+47
   \   00000050   900E40E2           SUB      R0,R0,#+2304
   \   00000054   020050E3           CMP      R0,#+2
   \   00000058   0D00008A           BHI      ??AddLevelPressSensor_3
   \   0000005C   011F8FE2           ADR      R1,??AddLevelPressSensor_2
   \   00000060   0010D1E7           LDRB     R1,[R1, R0]
   \   00000064   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??AddLevelPressSensor_2:
   \   00000068   06060600           DC8      +6,+6,+6,+0
    732                          case C_AI_LOC_REDUNDANCY1   :
    733                          case C_AI_LOC_REDUNDANCY2   :
    734                          case C_AI_LOC_REDUNDANCY3   :
    735                              SensorSet.insert(SnsPtr);
    736                              break;
    737                          default:
    738                              break;
    739                          }
    740                          break;
    741                      default:
    742                          if ( Distance == SnsPtr->Distance ) {
   \                     ??AddLevelPressSensor_5:
   \   0000006C   4B0FA0E3           MOV      R0,#+300
   \   00000070   041090E7           LDR      R1,[R0, +R4]
   \   00000074   050090E7           LDR      R0,[R0, +R5]
   \   00000078   ........           _BLF     __fEqual,??__fEqual??rA
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0300000A           BEQ      ??AddLevelPressSensor_3
    743                              SensorSet.insert(SnsPtr);
   \                     ??AddLevelPressSensor_4:
   \   00000084   0520A0E1           MOV      R2,R5
   \   00000088   041086E0           ADD      R1,R6,R4
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??insert,??insert??rA
    744                          }
    745                          break;
    746                      }
    747                  }
    748              }
    749          }
   \                     ??AddLevelPressSensor_3:
   \   00000094   7340BDE8           POP      {R0,R1,R4-R6,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
    750          

   \                                 In segment CODE, align 4, keep-with-next
    751          void AIPressSensor::SetTmpSnsPtr(AITempSensor *SnsPtr) {
    752          }
   \                     ??SetTmpSnsPtr:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    753          

   \                                 In segment CODE, align 4, keep-with-next
    754          AITempSensor* AIPressSensor::GetTmpSnsPtr(void) {
    755              return NULL;
   \                     ??GetTmpSnsPtr:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    756          }
    757          

   \                                 In segment CODE, align 4, keep-with-next
    758          void AIPressSensor::AdjustOffset(float OffsetAdjust) {
   \                     ??AdjustOffset:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
    759              Offset += OffsetAdjust;
   \   0000000C   505FA0E3           MOV      R5,#+320
   \   00000010   041095E7           LDR      R1,[R5, +R4]
   \   00000014   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000018   040085E7           STR      R0,[R5, +R4]
    760          }
   \   0000001C   ........           B        ?Subroutine28
    761          

   \                                 In segment CODE, align 4, keep-with-next
    762          void AIPressSensor::AddShortCircuitAlarm(void)
    763          {
    764          }
   \                     ??AddShortCircuitAlarm:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for AtmPressure>`:
   \   00000000   8E462541           DC32 4125468EH

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (100.0F)}>`:
   \   00000000   000000000000       DC32 0H, 42C80000H
   \              C842        
   \   00000008   507265737375       DC8 "Pressure sensor"
   \              72652073656E
   \              736F7200    
   \   00000018   2C20666F7220       DC8 ", for "
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(4.0F), (20.0F)}>`:
   \   00000000   000080400000       DC32 40800000H, 41A00000H
   \              A041        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (100.0F)}>_1`:
   \   00000000   000000000000       DC32 0H, 42C80000H
   \              C842        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(4.0F), (20.0F)}>_1`:
   \   00000000   000080400000       DC32 40800000H, 41A00000H
   \              A041        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (100.0F)}>_2`:
   \   00000000   000000000000       DC32 0H, 42C80000H
   \              C842        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (20.0F)}>`:
   \   00000000   000000000000       DC32 0H, 41A00000H
   \              A041        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor &AIPressSensor::new AIPressSensor(bool)
   \                     `??new AIPressSensor`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   700FA0E3           MOV      R0,#+448
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AIPressSensor_2`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AIPressSensor
   \                     `??new AIPressSensor_2`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor &AIPressSensor::new AIPressSensor(int, bool)
   \                     `??new AIPressSensor_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   700FA0E3           MOV      R0,#+448
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AIPressSensor_3`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AIPressSensor_1
   \                     `??new AIPressSensor_3`:
   \   00000028   ........           B        ?Subroutine28

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   00408F40           DC32     0x408f4000

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??ObjectSet
    765          
    766          #ifdef ANWIN
    767          
    768          void AIPressSensor::PrepareDatabase(TLiteQuery *LiteQuery)
    769          {
    770          	//LogSema.Acquire();
    771          	//TLiteQuery *LiteQuery = new TLiteQuery(NULL);
    772              try {
    773                  // LiteConnection is either TLiteConnection already set up
    774                  //LiteQuery->Connection = MainForm->SensorLogLiteConnection;
    775          		// retrieve data
    776                  LiteQuery->Close();
    777          		LiteQuery->SQL->Text = "SELECT * FROM Sensors";
    778          		LiteQuery->Execute();
    779          		set<AIPressSensor *>::iterator pBIt;
    780          		for (pBIt = ObjectSet.begin(); pBIt != ObjectSet.end(); pBIt++) {
    781          			(*pBIt)->AddSensorRecord(LiteQuery);
    782          		}
    783              }
    784              __finally{
    785                  //LiteQuery->Free();
    786          
    787              }
    788          	//LogSema.Release();
    789          }
    790          
    791          void AIPressSensor::AddSensorRecord(TLiteQuery *LiteQuery)
    792          {
    793          	if ( !IsallreadyAdded(LiteQuery)){
    794          		try {
    795          
    796          			// append record
    797          			LiteQuery->Append();
    798          			LiteQuery->FieldByName("Id")->AsInteger          = IDNumber;
    799          			LiteQuery->FieldByName("SerialNumber")->AsString = SerialNumber;
    800          			LiteQuery->Post();
    801          		}
    802          		__finally{
    803          
    804          		}
    805          	}
    806          }
    807          
    808          bool AIPressSensor::IsallreadyAdded(TLiteQuery *LiteQuery){
    809          	bool AlreadyAdded = true;
    810          	//LogSema.Acquire();
    811          
    812          	//TLiteQuery *LiteQuery = new TLiteQuery(NULL);
    813              try {
    814          		//LiteQuery->Connection = MainForm->SensorLogLiteConnection;
    815          		LiteQuery->SQL->Text = "SELECT * FROM Sensors";
    816          		LiteQuery->Execute();
    817          		TField *tmpFiledPtr1 = LiteQuery->FindField("Id");
    818          
    819          		//LiteQuerySensorLog->SQL->Clear();
    820          		if (tmpFiledPtr1 ) {
    821          			AnsiString SQLText = "SELECT * FROM Sensors";
    822          			SQLText += " WHERE Id=" + AnsiString(IDNumber);
    823          			// retrieve data
    824          			LiteQuery->SQL->Text = SQLText;
    825          
    826          			LiteQuery->Execute();
    827          			// retrieve data
    828          			//	ShowMessage("Records of this alarm= "+IntToStr(LiteQuery->FetchRows));
    829          
    830          			AlreadyAdded =  bool(LiteQuery->RecordCount);
    831          		}
    832          	}
    833          	__finally{
    834          		//LiteQuery->Free();
    835          	}
    836          	//LogSema.Release();
    837          
    838          	return AlreadyAdded;
    839          }
    840          
    841          void AIPressSensor::LogData(TLiteQuery *LiteQuery,const volatile bool &Terminated, int Delay)
    842          {
    843          	//LogSema.Acquire();
    844          
    845          	//TLiteQuery *LiteQuery1 = new TLiteQuery(NULL);
    846          	try {
    847          		//LiteQuery1->CachedUpdates = true;
    848          		// LiteConnection is either TLiteConnection already set up
    849          		//LiteQuery1->Connection = MainForm->SensorLogLiteConnection;
    850          
    851          		// retrieve data
    852          		LiteQuery->SQL->Text = "SELECT * FROM SensorDataLog";
    853          		LiteQuery->Execute();
    854          
    855                  set<AIPressSensor *>::iterator pBIt;
    856          		for (pBIt = ObjectSet.begin(); !Terminated && pBIt != ObjectSet.end(); pBIt++) {
    857          			(*pBIt)->LogDataFromSensor(LiteQuery);
    858                      Sleep(Delay);
    859                  }
    860          	}
    861          	__finally{
    862          		//LiteQuery1->Free();
    863          	}
    864          	//LogSema.Release();
    865          
    866          }
    867          void AIPressSensor::LogDataFromSensor(TLiteQuery *LiteQuery) {
    868          
    869          	time_t rawtime = GetGMT();
    870          	try {
    871          
    872          		// append record
    873          		LiteQuery->Append();
    874          
    875          		LiteQuery->FieldByName("SensorId")->AsInteger   = IDNumber;
    876          		LiteQuery->FieldByName("LogTimeGMT")->AsInteger = rawtime;
    877          		LiteQuery->FieldByName("Pressure")->AsFloat     = CalcValue / MH2O_TO_MBAR;
    878          		LiteQuery->FieldByName("RawValue")->AsFloat  	= FilteredValue;
    879          
    880          		LiteQuery->Post();
    881          	}
    882          	__finally{
    883          
    884          	}
    885          
    886          }
    887          void AIPressSensor::CleanLogDataFromSensor(TLiteQuery *LiteQuery, int MaxAge) {
    888          
    889          	try {
    890          		if (MaxAge < 2) {
    891          			MaxAge = 2;
    892          		}
    893          		AnsiString MaxAgeStr = MaxAge;
    894          		LiteQuery->SQL->Text = "DELETE FROM SensorDataLog WHERE LogTimeGMT < strftime('%s', datetime('now', '-"+MaxAgeStr+" days'))";
    895          		LiteQuery->Execute();
    896          		LiteQuery->SQL->Clear();
    897          	}
    898          	__finally{
    899          
    900          	}
    901          
    902          }
    903          
    904          #endif
    905          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIPressSensor::AIPressSensor(bool)
                                       20
     AIPressSensor::AIPressSensor(int, bool)
                                       24
     AIPressSensor::AddLevelPressSensor(AIPressSensor *)
                                       24
     AIPressSensor::AddShortCircuitAlarm()
                                        0
     AIPressSensor::AddTempRefSensor(float *)
                                        0
     AIPressSensor::AdjustOffset(float)
                                       12
     AIPressSensor::AdjustOffsets(float, bool)
                                       16
     AIPressSensor::CalcRefPressure()
                                       40
     AIPressSensor::Calculate()        16
     AIPressSensor::CheckInput(float, int &)
                                       28
     AIPressSensor::GetStringValue(int, int, AnsiString &)
                                       40
     AIPressSensor::GetTmpSnsPtr()      0
     AIPressSensor::GetUnitId(int *)
                                        0
     AIPressSensor::GetValue(int, int, float &, int &, int &)
                                       40
     AIPressSensor::Initialize()        0
     AIPressSensor::InputToLinkedLevelSensors(int, float, bool)
                                       28
     AIPressSensor::InputToLinkedRefSensors(int, float, bool)
                                       44
     AIPressSensor::LoadConfigString(TSNConfigString &)
                                      204
     AIPressSensor::MakeConfigString(int)
                                     1048
     AIPressSensor::PutFloatValue(int, float)
                                        4
     AIPressSensor::PutValue(int, int, AnsiString, bool, int *)
                                      152
     AIPressSensor::SetRefSnsPtr(AIPressSensor *)
                                       20
     AIPressSensor::SetTmpSnsPtr(AITempSensor *)
                                        0
     AIPressSensor::new AIPressSensor(bool)
                                        8
     AIPressSensor::new AIPressSensor(int, bool)
                                       12
     AIPressSensor::~AIPressSensor()
                                       16
     AnsiString::AnsiString(AnsiString const &)
                                       12
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr, AIPressSensor *)
                                       24
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Lbound(AIPressSensor *) const
                                        0
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Ubound(AIPressSensor *) const
                                        0
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::equal_range(AIPressSensor *)
                                       28
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(AIPressSensor *)
                                       24
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::find(AIPressSensor *)
                                       12
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::insert(AIPressSensor *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       32
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                        4
     __sti__routine()                   4
     operator+(string const &, string const &)
                                       48
     set<AIPressSensor *>::set()       12
     set<AIPressSensor *>::~set()       4
     vector<float>::clear()             8
     vector<float>::empty() const       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::insert(AIPressSensor *)
                                     200
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::erase(AIPressSensor *)
                                      84
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::find(AIPressSensor *)
                                      48
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::equal_range(AIPressSensor *)
                                      76
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Nodeptr, AIPressSensor *)
                                      96
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Lbound(AIPressSensor *) const
                                      40
     _Tree<_Tset_traits<AIPressSensor *, less<AIPressSensor *>, allocator<AIPressSensor *>, false>>::_Ubound(AIPressSensor *) const
                                      40
     set<AIPressSensor *>::~set()     16
     set<AIPressSensor *>::set()      48
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                      36
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      72
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     232
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      72
     vector<float>::empty() const     32
     vector<float>::clear()           36
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AIPressSensor::AtmPressure        4
     __sti__routine()                 28
     AIPressSensor::ObjectSet         24
     AIPressSensor::AIPressSensor(bool)
                                     112
     AIPressSensor::AIPressSensor(int, bool)
                                     112
     AIPressSensor::~AIPressSensor()
                                     112
     ?Subroutine29                     8
     AIPressSensor::Initialize()      68
     AIPressSensor::MakeConfigString(int)
                                    4760
     ?Subroutine30                    40
     AIPressSensor::LoadConfigString(TSNConfigString &)
                                    2416
     AIPressSensor::SetRefSnsPtr(AIPressSensor *)
                                      88
     AIPressSensor::Calculate()      140
     AIPressSensor::GetValue(int, int, float &, int &, int &)
                                     180
     AIPressSensor::GetStringValue(int, int, AnsiString &)
                                     104
     ?Subroutine28                     8
     AIPressSensor::PutValue(int, int, AnsiString, bool, int *)
                                     584
     AIPressSensor::PutFloatValue(int, float)
                                       8
     ?Subroutine27                     8
     AIPressSensor::AdjustOffsets(float, bool)
                                      96
     AIPressSensor::CheckInput(float, int &)
                                     556
     ?Subroutine31                     8
     AIPressSensor::GetUnitId(int *)
                                     120
     AIPressSensor::AddTempRefSensor(float *)
                                       8
     AIPressSensor::CalcRefPressure()
                                     248
     AIPressSensor::InputToLinkedRefSensors(int, float, bool)
                                     272
     AIPressSensor::InputToLinkedLevelSensors(int, float, bool)
                                     100
     AIPressSensor::AddLevelPressSensor(AIPressSensor *)
                                     156
     AIPressSensor::SetTmpSnsPtr(AITempSensor *)
                                       4
     AIPressSensor::GetTmpSnsPtr()     8
     AIPressSensor::AdjustOffset(float)
                                      32
     AIPressSensor::AddShortCircuitAlarm()
                                       4
     ?<Initializer for AtmPressure>    4
     ?<Constant {(0.0F), (100.0F)}>   32
     ?<Constant ":\n">                 3
     ?<Constant {(4.0F), (20.0F)}>     8
     ?<Constant {(0.0F), (100.0F)}>_1
                                       8
     ?<Constant {(4.0F), (20.0F)}>_1
                                       8
     ?<Constant {(0.0F), (100.0F)}>_2
                                       8
     ?<Constant {(0.0F), (20.0F)}>     8
     AIPressSensor::new AIPressSensor(bool)
                                      40
     AIPressSensor::new AIPressSensor(int, bool)
                                      44
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
      Others                        1240

 
 14 648 bytes in segment CODE
    239 bytes in segment DATA_C
      4 bytes in segment DATA_I
      4 bytes in segment DATA_ID
     28 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 10 496 bytes of CODE  memory (+ 4 180 bytes shared)
    243 bytes of CONST memory
     32 bytes of DATA  memory

Errors: none
Warnings: none
