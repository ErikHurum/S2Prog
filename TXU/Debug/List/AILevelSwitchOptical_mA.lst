##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AILevelSwitchOptical_mA.cpp     #
#    Command line    =  D:\S2Prog\Shared\Src\AILevelSwitchOptical_mA.cpp     #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AILevelSwitchOptical_mA.lst #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AILevelSwitchOptical_mA.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AILevelSwitchOptical_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float fabs(float)
   \                     ??fabs:
   \   00000000   0010B0E1           MOVS     R1,R0
   \   00000004   8004D1E3           BICS     R0,R1,#0x80000000
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
   \                     ??Ref:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
   \                     `??operator less<AlarmBasic *> &`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??Ref,??Ref??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
   \                     ??_AllocHolder:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_2,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_2,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
   \                     ??pair:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??iterator,??iterator??rA
   \   0000001C   0460C4E5           STRB     R6,[R4, #+4]
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_1,??append??rA_1
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copier<float, true>::_Copy(float const *, float const *, float *)
   \                     ??_Copy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_opt(float const *, float const *, float *)
   \                     ??_Copy_opt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy,??_Copy??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_opt(float *, float *, float *)
   \                     ??_Copy_opt_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_opt,??_Copy_opt??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *copy(float *, float *, float *)
   \                     ??copy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_opt_1,??_Copy_opt??rA_1
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Backward_copier<float, true>::_Copy(float const *, float const *, float *)
   \                     ??_Copy_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_backward_opt(float const *, float const *, float *)
   \                     ??_Copy_backward_opt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_1,??_Copy??rA_1
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Copy_backward_opt(float *, float *, float *)
   \                     ??_Copy_backward_opt_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_backward_opt,??_Copy_backward_opt??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *copy_backward(float *, float *, float *)
   \                     ??copy_backward:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_backward_opt_1,??_Copy_backward_opt??rA_1
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *operator new(unsigned int, void *)
   \                     `??operator new`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Allocator<void>::deallocate(void *)
   \                     ??deallocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<float>::allocator(allocator<void> const &)
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void allocator<float>::deallocate(float *, unsigned int)
   \                     ??deallocate_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0500B0E1           MOVS     R0,R5
   \   00000014   ........           _BLF     ??deallocate,??deallocate??rA
   \   00000018   7040BDE8           POP      {R4-R6,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node * allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * allocator<float>::allocate(unsigned int)
   \                     ??allocate_2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0410A0E3           MOV      R1,#+4
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
   \                     ??max_size:
   \   00000000   14209FE5           LDR      R2,??max_size_3  ;; 0xccccccc
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_4
   \                     ??max_size_5:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_4:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??max_size_3:
   \   0000001C   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<float>::max_size() const
   \                     ??max_size_1:
   \   00000000   C024E0E3           MVN      R2,#-1073741824
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_6
   \                     ??max_size_7:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_6:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_2:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
   \                     ??_Copy_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copy(float const *, float const *, float *)
   \                     ??_Uninit_copy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Copy_2,??_Copy??rA_2
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninit_copy(float const *, float const *, float *, allocator<float> &)
   \                     ??_Uninit_copy_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0620B0E1           MOVS     R2,R6
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Uninit_copy,??_Uninit_copy??rA
   \   00000024   F040BDE8           POP      {R4-R7,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float *_Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
   \                     ??_Uninitialized_copy:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0730B0E1           MOVS     R3,R7
   \   00000018   0620B0E1           MOVS     R2,R6
   \   0000001C   0510B0E1           MOVS     R1,R5
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Uninit_copy_1,??_Uninit_copy??rA_1
   \   00000028   F040BDE8           POP      {R4-R7,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
   \                     ??_Uninitialized_fill_n:
   \                     ??_Uninitialized_fill_n_1:
   \   00000000   000051E3           CMP      R1,#+0
   \   00000004   0400000A           BEQ      ??_Uninitialized_fill_n_2
   \   00000008   00C092E5           LDR      R12,[R2, #+0]
   \   0000000C   00C080E5           STR      R12,[R0, #+0]
   \   00000010   011051E2           SUBS     R1,R1,#+1
   \   00000014   040090E2           ADDS     R0,R0,#+4
   \   00000018   F8FFFFEA           B        ??_Uninitialized_fill_n_1
   \                     ??_Uninitialized_fill_n_2:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
   \                     `??operator()`:
   \   00000000   020051E1           CMP      R1,R2
   \   00000004   0100002A           BCS      `??operator()_1`
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   000000EA           B        `??operator()_2`
   \                     `??operator()_1`:
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     `??operator()_2`:
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
   \                     ??_GenNode:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   04C0DDE5           LDRB     R12,[SP, #+4]
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   042080E5           STR      R2,[R0, #+4]
   \   00000010   083080E5           STR      R3,[R0, #+8]
   \   00000014   0CC0C0E5           STRB     R12,[R0, #+12]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0D40C0E5           STRB     R4,[R0, #+13]
   \   00000020   1000BDE8           POP      {R4}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Color:
   \   00000000   0C0090E2           ADDS     R0,R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil:
   \   00000000   0D0090E2           ADDS     R0,R0,#+13
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \                     ??_Max_1:
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0400001A           BNE      ??_Max_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0040B0E1           MOVS     R4,R0
   \   00000038   F2FFFFEA           B        ??_Max_1
   \                     ??_Max_2:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_DecP_1
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Right,??_Right??rA
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   240000EA           B        ??_DecP_2
   \                     ??_DecP_1:
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Left,??_Left??rA
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400001A           BNE      ??_DecP_3
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Left,??_Left??rA
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     ??_Max,??_Max??rA
   \   00000060   170000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \                     ??_DecP_4:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0050B0E1           MOVS     R5,R0
   \   00000074   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0600001A           BNE      ??_DecP_5
   \   00000088   0500B0E1           MOVS     R0,R5
   \   0000008C   ........           _BLF     ??_Left,??_Left??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0100001A           BNE      ??_DecP_5
   \   0000009C   0540B0E1           MOVS     R4,R5
   \   000000A0   EFFFFFEA           B        ??_DecP_4
   \                     ??_DecP_5:
   \   000000A4   0500B0E1           MOVS     R0,R5
   \   000000A8   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   000000AC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0000001A           BNE      ??_DecP_6
   \   000000BC   0540B0E1           MOVS     R4,R5
   \                     ??_DecP_6:
   \   000000C0   0400B0E1           MOVS     R0,R4
   \                     ??_DecP_2:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_GenIter:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
   \                     `??operator==`:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0100001A           BNE      `??operator==_2`
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   000000EA           B        `??operator==_3`
   \                     `??operator==_2`:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     `??operator==_3`:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     ??_DecP,??_DecP??rA
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
   \                     ??_Mynode:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Root()
   \                     ??_Root:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Lmost()
   \                     ??_Lmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Left,??_Left??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Rmost()
   \                     ??_Rmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Left,??_Left??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Left,??_Left??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Right,??_Right??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Rrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Right,??_Right??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Rrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Rrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Right,??_Right??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Rrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Right,??_Right??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Left,??_Left??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Rrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Right,??_Right??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Right,??_Right??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Right,??_Right??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Left,??_Left??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Left,??_Left??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Lrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Lrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Lrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Left,??_Left??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Lrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Left,??_Left??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Right,??_Right??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Lrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Left,??_Left??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   100094E5           LDR      R0,[R4, #+16]
   \   00000018   010090E2           ADDS     R0,R0,#+1
   \   0000001C   100084E5           STR      R0,[R4, #+16]
   \   00000020   040056E1           CMP      R6,R4
   \   00000024   0900001A           BNE      ??_Insert_3
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Root,??_Root??rA
   \   00000030   007080E5           STR      R7,[R0, #+0]
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000003C   007080E5           STR      R7,[R0, #+0]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   00000048   007080E5           STR      R7,[R0, #+0]
   \   0000004C   180000EA           B        ??_Insert_4
   \                     ??_Insert_3:
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0B00000A           BEQ      ??_Insert_5
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   007080E5           STR      R7,[R0, #+0]
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000056E1           CMP      R6,R0
   \   00000074   0E00001A           BNE      ??_Insert_4
   \   00000078   0400B0E1           MOVS     R0,R4
   \   0000007C   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   00000080   007080E5           STR      R7,[R0, #+0]
   \   00000084   0A0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     ??_Right,??_Right??rA
   \   00000090   007080E5           STR      R7,[R0, #+0]
   \   00000094   0400B0E1           MOVS     R0,R4
   \   00000098   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000056E1           CMP      R6,R0
   \   000000A4   0200001A           BNE      ??_Insert_4
   \   000000A8   0400B0E1           MOVS     R0,R4
   \   000000AC   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   000000B0   007080E5           STR      R7,[R0, #+0]
   \                     ??_Insert_4:
   \   000000B4   0780B0E1           MOVS     R8,R7
   \                     ??_Insert_6:
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     ??_Color,??_Color??rA
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   A200001A           BNE      ??_Insert_7
   \   000000D8   0800B0E1           MOVS     R0,R8
   \   000000DC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E0   0090B0E1           MOVS     R9,R0
   \   000000E4   0800B0E1           MOVS     R0,R8
   \   000000E8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000F4   009099E5           LDR      R9,[R9, #+0]
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   ........           _BLF     ??_Left,??_Left??rA
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   4A00001A           BNE      ??_Insert_8
   \   0000010C   0800B0E1           MOVS     R0,R8
   \   00000110   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   ........           _BLF     ??_Right,??_Right??rA
   \   00000124   000090E5           LDR      R0,[R0, #+0]
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   0600B0E1           MOVS     R0,R6
   \   00000130   ........           _BLF     ??_Color,??_Color??rA
   \   00000134   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000138   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   1800001A           BNE      ??_Insert_9
   \   00000144   0800B0E1           MOVS     R0,R8
   \   00000148   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     ??_Color,??_Color??rA
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   0010C0E5           STRB     R1,[R0, #+0]
   \   0000015C   0600B0E1           MOVS     R0,R6
   \   00000160   ........           _BLF     ??_Color,??_Color??rA
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   0010C0E5           STRB     R1,[R0, #+0]
   \   0000016C   0800B0E1           MOVS     R0,R8
   \   00000170   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     ??_Color,??_Color??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0010C0E5           STRB     R1,[R0, #+0]
   \   0000018C   0800B0E1           MOVS     R0,R8
   \   00000190   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   0080B0E1           MOVS     R8,R0
   \   000001A4   C3FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   000001A8   0800B0E1           MOVS     R0,R8
   \   000001AC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   ........           _BLF     ??_Right,??_Right??rA
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000058E1           CMP      R8,R0
   \   000001C0   0600001A           BNE      ??_Insert_10
   \   000001C4   0800B0E1           MOVS     R0,R8
   \   000001C8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0080B0E1           MOVS     R8,R0
   \   000001D4   0810B0E1           MOVS     R1,R8
   \   000001D8   0400B0E1           MOVS     R0,R4
   \   000001DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000001E0   0800B0E1           MOVS     R0,R8
   \   000001E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   ........           _BLF     ??_Color,??_Color??rA
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001F8   0800B0E1           MOVS     R0,R8
   \   000001FC   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   ........           _BLF     ??_Color,??_Color??rA
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0010C0E5           STRB     R1,[R0, #+0]
   \   00000218   0800B0E1           MOVS     R0,R8
   \   0000021C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000228   001090E5           LDR      R1,[R0, #+0]
   \   0000022C   0400B0E1           MOVS     R0,R4
   \   00000230   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000234   9FFFFFEA           B        ??_Insert_6
   \                     ??_Insert_8:
   \   00000238   0800B0E1           MOVS     R0,R8
   \   0000023C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   ........           _BLF     ??_Left,??_Left??rA
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   0060B0E1           MOVS     R6,R0
   \   00000258   0600B0E1           MOVS     R0,R6
   \   0000025C   ........           _BLF     ??_Color,??_Color??rA
   \   00000260   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000264   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   1800001A           BNE      ??_Insert_11
   \   00000270   0800B0E1           MOVS     R0,R8
   \   00000274   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           _BLF     ??_Color,??_Color??rA
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   0010C0E5           STRB     R1,[R0, #+0]
   \   00000288   0600B0E1           MOVS     R0,R6
   \   0000028C   ........           _BLF     ??_Color,??_Color??rA
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   0010C0E5           STRB     R1,[R0, #+0]
   \   00000298   0800B0E1           MOVS     R0,R8
   \   0000029C   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A0   000090E5           LDR      R0,[R0, #+0]
   \   000002A4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A8   000090E5           LDR      R0,[R0, #+0]
   \   000002AC   ........           _BLF     ??_Color,??_Color??rA
   \   000002B0   0010A0E3           MOV      R1,#+0
   \   000002B4   0010C0E5           STRB     R1,[R0, #+0]
   \   000002B8   0800B0E1           MOVS     R0,R8
   \   000002BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   0080B0E1           MOVS     R8,R0
   \   000002D0   78FFFFEA           B        ??_Insert_6
   \                     ??_Insert_11:
   \   000002D4   0800B0E1           MOVS     R0,R8
   \   000002D8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002DC   000090E5           LDR      R0,[R0, #+0]
   \   000002E0   ........           _BLF     ??_Left,??_Left??rA
   \   000002E4   000090E5           LDR      R0,[R0, #+0]
   \   000002E8   000058E1           CMP      R8,R0
   \   000002EC   0600001A           BNE      ??_Insert_12
   \   000002F0   0800B0E1           MOVS     R0,R8
   \   000002F4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   0080B0E1           MOVS     R8,R0
   \   00000300   0810B0E1           MOVS     R1,R8
   \   00000304   0400B0E1           MOVS     R0,R4
   \   00000308   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_12:
   \   0000030C   0800B0E1           MOVS     R0,R8
   \   00000310   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000314   000090E5           LDR      R0,[R0, #+0]
   \   00000318   ........           _BLF     ??_Color,??_Color??rA
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   0010C0E5           STRB     R1,[R0, #+0]
   \   00000324   0800B0E1           MOVS     R0,R8
   \   00000328   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000032C   000090E5           LDR      R0,[R0, #+0]
   \   00000330   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           _BLF     ??_Color,??_Color??rA
   \   0000033C   0010A0E3           MOV      R1,#+0
   \   00000340   0010C0E5           STRB     R1,[R0, #+0]
   \   00000344   0800B0E1           MOVS     R0,R8
   \   00000348   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000354   001090E5           LDR      R1,[R0, #+0]
   \   00000358   0400B0E1           MOVS     R0,R4
   \   0000035C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000360   54FFFFEA           B        ??_Insert_6
   \                     ??_Insert_7:
   \   00000364   0400B0E1           MOVS     R0,R4
   \   00000368   ........           _BLF     ??_Root,??_Root??rA
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   ........           _BLF     ??_Color,??_Color??rA
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0010C0E5           STRB     R1,[R0, #+0]
   \   0000037C   F043BDE8           POP      {R4-R9,LR}
   \   00000380   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
   \                     ??comp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   140094E2           ADDS     R0,R4,#+20
   \   0000000C   ........           _BLF     `??operator less<AlarmBasic *> &`,`??operator less<AlarmBasic *> &??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
   \                     ??_Node:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   2090DDE5           LDRB     R9,[SP, #+32]
   \   0000001C   0900B0E1           MOVS     R0,R9
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0730B0E1           MOVS     R3,R7
   \   00000028   0620B0E1           MOVS     R2,R6
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_GenNode,??_GenNode??rA
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   108084E5           STR      R8,[R4, #+16]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F043BDE8           POP      {R4-R9,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
   \                     ??_Kfn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Kfn_1,??_Kfn??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
   \                     ??_Alnod:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval_1,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Myval,??_Myval??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent_1:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right_1:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic *& _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Myval:
   \   00000000   100090E2           ADDS     R0,R0,#+16
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??const_iterator:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_GenIter,??_GenIter??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
   \                     `??operator==_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
   \                     ??_Mynode_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mynode,??_Mynode??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
   \                     ??iterator:
   \   00000000   001091E5           LDR      R1,[R1, #+0]
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??iterator_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??const_iterator,??const_iterator??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator &_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
   \                     `??operator--`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Dec,??_Dec??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
   \                     ??begin:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Lmost_1,??_Lmost??rA_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
   \                     ??max_size_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??max_size,??max_size??rA
   \   00000020   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0080B0E1           MOVS     R8,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   \   00000010   0290B0E1           MOVS     R9,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Root_1,??_Root??rA_1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0070B0E1           MOVS     R7,R0
   \                     ??insert_1:
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Isnil_1,??_Isnil??rA_1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1800001A           BNE      ??insert_2
   \   00000050   0560B0E1           MOVS     R6,R5
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??_Key,??_Key??rA
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   0900B0E1           MOVS     R0,R9
   \   00000064   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000068   00B0B0E1           MOVS     R11,R0
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   ........           _BLF     ??comp,??comp??rA
   \   00000074   0A20B0E1           MOVS     R2,R10
   \   00000078   0B10B0E1           MOVS     R1,R11
   \   0000007C   ........           _BLF     `??operator()`,`??operator()??rA`
   \   00000080   0070B0E1           MOVS     R7,R0
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0400000A           BEQ      ??insert_3
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   0050B0E1           MOVS     R5,R0
   \   0000009C   E5FFFFEA           B        ??insert_1
   \                     ??insert_3:
   \   000000A0   0500B0E1           MOVS     R0,R5
   \   000000A4   ........           _BLF     ??_Right_1,??_Right??rA_1
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0050B0E1           MOVS     R5,R0
   \   000000B0   E0FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   000000B4   0610B0E1           MOVS     R1,R6
   \   000000B8   0D00B0E1           MOVS     R0,SP
   \   000000BC   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   1800000A           BEQ      ??insert_4
   \   000000C8   0400B0E1           MOVS     R0,R4
   \   000000CC   ........           _BLF     ??begin,??begin??rA
   \   000000D0   0C008DE5           STR      R0,[SP, #+12]
   \   000000D4   0C108DE2           ADD      R1,SP,#+12
   \   000000D8   0D00B0E1           MOVS     R0,SP
   \   000000DC   ........           _BLF     `??operator==_1`,`??operator==??rA_1`
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0E00000A           BEQ      ??insert_5
   \   000000E8   0930B0E1           MOVS     R3,R9
   \   000000EC   0620B0E1           MOVS     R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   000000FC   08008DE5           STR      R0,[SP, #+8]
   \   00000100   0120A0E3           MOV      R2,#+1
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   20008DE2           ADD      R0,SP,#+32
   \   0000010C   ........           _BLF     ??pair,??pair??rA
   \   00000110   20008DE2           ADD      R0,SP,#+32
   \   00000114   030090E8           LDM      R0,{R0,R1}
   \   00000118   030088E8           STM      R8,{R0,R1}
   \   0000011C   0800B0E1           MOVS     R0,R8
   \   00000120   260000EA           B        ??insert_6
   \                     ??insert_5:
   \   00000124   0D00B0E1           MOVS     R0,SP
   \   00000128   ........           _BLF     `??operator--`,`??operator--??rA`
   \                     ??insert_4:
   \   0000012C   0900B0E1           MOVS     R0,R9
   \   00000130   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000134   00A0B0E1           MOVS     R10,R0
   \   00000138   0D00B0E1           MOVS     R0,SP
   \   0000013C   ........           _BLF     ??_Mynode_1,??_Mynode??rA_1
   \   00000140   ........           _BLF     ??_Key,??_Key??rA
   \   00000144   00B0B0E1           MOVS     R11,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??comp,??comp??rA
   \   00000150   0A20B0E1           MOVS     R2,R10
   \   00000154   0B10B0E1           MOVS     R1,R11
   \   00000158   ........           _BLF     `??operator()`,`??operator()??rA`
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0E00000A           BEQ      ??insert_7
   \   00000164   0930B0E1           MOVS     R3,R9
   \   00000168   0620B0E1           MOVS     R2,R6
   \   0000016C   0710B0E1           MOVS     R1,R7
   \   00000170   0400B0E1           MOVS     R0,R4
   \   00000174   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0120A0E3           MOV      R2,#+1
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   18008DE2           ADD      R0,SP,#+24
   \   00000188   ........           _BLF     ??pair,??pair??rA
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   030090E8           LDM      R0,{R0,R1}
   \   00000194   030088E8           STM      R8,{R0,R1}
   \   00000198   0800B0E1           MOVS     R0,R8
   \   0000019C   070000EA           B        ??insert_6
   \                     ??insert_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10B0E1           MOVS     R1,SP
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??pair,??pair??rA
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   030090E8           LDM      R0,{R0,R1}
   \   000001B8   030088E8           STM      R8,{R0,R1}
   \   000001BC   0800B0E1           MOVS     R0,R8
   \                     ??insert_6:
   \   000001C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C4   F04FBDE8           POP      {R4-R11,LR}
   \   000001C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??max_size_2,??max_size??rA_1
   \   00000020   0090B0E1           MOVS     R9,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   00A0B0E1           MOVS     R10,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Head,??_Head??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0710B0E1           MOVS     R1,R7
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0A30B0E1           MOVS     R3,R10
   \   0000004C   0620B0E1           MOVS     R2,R6
   \   00000050   0010B0E1           MOVS     R1,R0
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??_Buynode,??_Buynode??rA
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   0830B0E1           MOVS     R3,R8
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000078   0810B0E1           MOVS     R1,R8
   \   0000007C   0D00B0E1           MOVS     R0,SP
   \   00000080   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
   \                     ??_Lmost_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
   \                     ??_Root_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Parent_1,??_Parent??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
   \                     ??_Head:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
   \                     ??_Buynode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C90DDE5           LDRB     R9,[SP, #+44]
   \   00000020   0D10B0E1           MOVS     R1,SP
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   00000038   00A0B0E1           MOVS     R10,R0
   \   0000003C   0A10B0E1           MOVS     R1,R10
   \   00000040   1400A0E3           MOV      R0,#+20
   \   00000044   ........           _BLF     `??operator new`,`??operator new??rA_1`
   \   00000048   00B0B0E1           MOVS     R11,R0
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0A00000A           BEQ      ??_Buynode_1
   \   00000054   0900B0E1           MOVS     R0,R9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800B0E1           MOVS     R0,R8
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0730B0E1           MOVS     R3,R7
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0B00B0E1           MOVS     R0,R11
   \   00000074   ........           _BLF     ??_Node,??_Node??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   000000EA           B        ??_Buynode_2
   \                     ??_Buynode_1:
   \   00000080   00B0A0E3           MOV      R11,#+0
   \                     ??_Buynode_2:
   \   00000084   0A00B0E1           MOVS     R0,R10
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F04FBDE8           POP      {R4-R11,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
   \                     ??_Kfn_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Vector_value<allocator<void>>::_Vector_value()
   \                     ??_Vector_value:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_AllocHolder,??_AllocHolder??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   041080E5           STR      R1,[R0, #+4]
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   081080E5           STR      R1,[R0, #+8]
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_ToBptr(void *)
   \                     ??_ToBptr:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Bfirst() const
   \                     ??_Bfirst:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Blast() const
   \                     ??_Blast:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned char * _Vector_value<allocator<void>>::_Bend() const
   \                     ??_Bend:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Bsize() const
   \                     ??_Bsize:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Blast,??_Blast??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   0000001C   000055E0           SUBS     R0,R5,R0
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Bcapacity() const
   \                     ??_Bcapacity:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bend,??_Bend??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   0000001C   000055E0           SUBS     R0,R5,R0
   \   00000020   3040BDE8           POP      {R4,R5,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Capacity<4U>() const
   \                     ??_Capacity:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bcapacity,??_Bcapacity??rA
   \   00000010   2001B0E1           LSRS     R0,R0,#+2
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_value<allocator<void>>::_Size<4U>() const
   \                     ??_Size:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Bsize,??_Bsize??rA
   \   00000010   2001B0E1           LSRS     R0,R0,#+2
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Xlen() const
   \                     ??_Xlen:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Vector_impl<float, allocator<float>>::_Vector_impl()
   \                     ??_Vector_impl:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Vector_value,??_Vector_value??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Altyval() const
   \                     ??_Altyval:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval_1,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator_1,??allocator??rA_2
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_EraseAll()
   \                     ??_EraseAll:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   0000001C   0520B0E1           MOVS     R2,R5
   \   00000020   0010B0E1           MOVS     R1,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Destroy,??_Destroy??rA
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   040084E5           STR      R0,[R4, #+4]
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1200000A           BEQ      ??_Tidy0_1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_EraseAll,??_EraseAll??rA
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Mytyend,??_Mytyend??rA
   \   00000028   0050B0E1           MOVS     R5,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   00000034   0060B0E1           MOVS     R6,R0
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   00000040   0070B0E1           MOVS     R7,R0
   \   00000044   0D10B0E1           MOVS     R1,SP
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   ........           _BLF     ??_Altyval,??_Altyval??rA
   \   00000050   2501B0E1           LSRS     R0,R5,#+2
   \   00000054   262150E0           SUBS     R2,R0,R6, LSR #+2
   \   00000058   0710B0E1           MOVS     R1,R7
   \   0000005C   0D00B0E1           MOVS     R0,SP
   \   00000060   ........           _BLF     ??deallocate_1,??deallocate??rA_1
   \                     ??_Tidy0_1:
   \   00000064   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000068   F040BDE8           POP      {R4-R7,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
   \                     ??_Destroy:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   002096E5           LDR      R2,[R6, #+0]
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Insert0,??_Insert0??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
   \                     ??_Insert_n:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   000097E5           LDR      R0,[R7, #+0]
   \   00000018   0080B0E1           MOVS     R8,R0
   \   0000001C   0830B0E1           MOVS     R3,R8
   \   00000020   0620B0E1           MOVS     R2,R6
   \   00000024   0510B0E1           MOVS     R1,R5
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Insert_n0,??_Insert_n0??rA
   \   00000030   F041BDE8           POP      {R4-R8,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Erase(float *)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000014   0520B0E1           MOVS     R2,R5
   \   00000018   0010B0E1           MOVS     R1,R0
   \   0000001C   040095E2           ADDS     R0,R5,#+4
   \   00000020   ........           _BLF     ??copy,??copy??rA
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000038   0620B0E1           MOVS     R2,R6
   \   0000003C   041050E2           SUBS     R1,R0,#+4
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Destroy,??_Destroy??rA
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000050   040050E2           SUBS     R0,R0,#+4
   \   00000054   040084E5           STR      R0,[R4, #+4]
   \   00000058   0500B0E1           MOVS     R0,R5
   \   0000005C   7040BDE8           POP      {R4-R6,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back(float const &)
   \                     ??_Push_back:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   001095E5           LDR      R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytyfirst() const
   \                     ??_Mytyfirst:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytylast() const
   \                     ??_Mytylast:
   \   00000000   040090E5           LDR      R0,[R0, #+4]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Mytyend() const
   \                     ??_Mytyend:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0280B0E1           MOVS     R8,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??capacity,??capacity??rA
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   0000002C   01108DE2           ADD      R1,SP,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocator_1,??allocator??rA_2
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??size,??size??rA
   \   00000040   0060B0E1           MOVS     R6,R0
   \   00000044   000058E3           CMP      R8,#+0
   \   00000048   4A00000A           BEQ      ??_Make_room_1
   \   0000004C   0D00B0E1           MOVS     R0,SP
   \   00000050   ........           _BLF     ??max_size_1,??max_size??rA_2
   \   00000054   060050E0           SUBS     R0,R0,R6
   \   00000058   080050E1           CMP      R0,R8
   \   0000005C   0200002A           BCS      ??_Make_room_2
   \   00000060   0400B0E1           MOVS     R0,R4
   \   00000064   ........           _BLF     ??_Xlen,??_Xlen??rA
   \   00000068   420000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   0000006C   060098E0           ADDS     R0,R8,R6
   \   00000070   000057E1           CMP      R7,R0
   \   00000074   3000002A           BCS      ??_Make_room_3
   \   00000078   0D00B0E1           MOVS     R0,SP
   \   0000007C   ........           _BLF     ??max_size_1,??max_size??rA_2
   \   00000080   A70050E0           SUBS     R0,R0,R7, LSR #+1
   \   00000084   070050E1           CMP      R0,R7
   \   00000088   0100002A           BCS      ??_Make_room_4
   \   0000008C   0070A0E3           MOV      R7,#+0
   \   00000090   000000EA           B        ??_Make_room_5
   \                     ??_Make_room_4:
   \   00000094   A77097E0           ADDS     R7,R7,R7, LSR #+1
   \                     ??_Make_room_5:
   \   00000098   060098E0           ADDS     R0,R8,R6
   \   0000009C   000057E1           CMP      R7,R0
   \   000000A0   0100002A           BCS      ??_Make_room_6
   \   000000A4   060098E0           ADDS     R0,R8,R6
   \   000000A8   0070B0E1           MOVS     R7,R0
   \                     ??_Make_room_6:
   \   000000AC   0710B0E1           MOVS     R1,R7
   \   000000B0   0D00B0E1           MOVS     R0,SP
   \   000000B4   ........           _BLF     ??allocate_2,??allocate??rA_2
   \   000000B8   0090B0E1           MOVS     R9,R0
   \   000000BC   04908DE5           STR      R9,[SP, #+4]
   \   000000C0   0400B0E1           MOVS     R0,R4
   \   000000C4   ........           _BLF     ??_Mytyfirst,??_Mytyfirst??rA
   \   000000C8   0930B0E1           MOVS     R3,R9
   \   000000CC   0520B0E1           MOVS     R2,R5
   \   000000D0   0010B0E1           MOVS     R1,R0
   \   000000D4   0400B0E1           MOVS     R0,R4
   \   000000D8   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   000000DC   00A0B0E1           MOVS     R10,R0
   \   000000E0   0400A0E3           MOV      R0,#+4
   \   000000E4   90A821E0           MLA      R1,R0,R8,R10
   \   000000E8   01B0B0E1           MOVS     R11,R1
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   000000F4   0020B0E1           MOVS     R2,R0
   \   000000F8   0B30B0E1           MOVS     R3,R11
   \   000000FC   0510B0E1           MOVS     R1,R5
   \   00000100   0400B0E1           MOVS     R0,R4
   \   00000104   ........           _BLF     ??_Ucopy,??_Ucopy??rA
   \   00000108   04008DE5           STR      R0,[SP, #+4]
   \   0000010C   088096E0           ADDS     R8,R6,R8
   \   00000110   0400B0E1           MOVS     R0,R4
   \   00000114   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000118   0400A0E3           MOV      R0,#+4
   \   0000011C   909721E0           MLA      R1,R0,R7,R9
   \   00000120   081084E5           STR      R1,[R4, #+8]
   \   00000124   0400A0E3           MOV      R0,#+4
   \   00000128   909821E0           MLA      R1,R0,R8,R9
   \   0000012C   041084E5           STR      R1,[R4, #+4]
   \   00000130   009084E5           STR      R9,[R4, #+0]
   \   00000134   0A50B0E1           MOVS     R5,R10
   \   00000138   0E0000EA           B        ??_Make_room_1
   \                     ??_Make_room_3:
   \   0000013C   0400B0E1           MOVS     R0,R4
   \   00000140   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000144   0090B0E1           MOVS     R9,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000150   0010B0E1           MOVS     R1,R0
   \   00000154   0400A0E3           MOV      R0,#+4
   \   00000158   909822E0           MLA      R2,R0,R8,R9
   \   0000015C   0500B0E1           MOVS     R0,R5
   \   00000160   ........           _BLF     ??copy_backward,??copy_backward??rA
   \   00000164   0490A0E3           MOV      R9,#+4
   \   00000168   0400B0E1           MOVS     R0,R4
   \   0000016C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000170   990820E0           MLA      R0,R9,R8,R0
   \   00000174   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   00000178   0500B0E1           MOVS     R0,R5
   \   0000017C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000180   F04FBDE8           POP      {R4-R11,LR}
   \   00000184   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_impl<float, allocator<float>>::size() const
   \                     ??size:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Size,??_Size??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Vector_impl<float, allocator<float>>::capacity() const
   \                     ??capacity:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Capacity,??_Capacity??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
   \                     ??_Insert0:
   \   00000000   F4402DE9           PUSH     {R2,R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100001A           BNE      ??_Insert0_1
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   050000EA           B        ??_Insert0_2
   \                     ??_Insert0_1:
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??_ToBptr,??_ToBptr??rA
   \   00000028   0070B0E1           MOVS     R7,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   00000034   000057E0           SUBS     R0,R7,R0
   \                     ??_Insert0_2:
   \   00000038   0060B0E1           MOVS     R6,R0
   \   0000003C   0D30B0E1           MOVS     R3,SP
   \   00000040   0120A0E3           MOV      R2,#+1
   \   00000044   0510B0E1           MOVS     R1,R5
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   ........           _BLF     ??_Insert_n,??_Insert_n??rA
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Bfirst,??_Bfirst??rA
   \   00000058   000096E0           ADDS     R0,R6,R0
   \   0000005C   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000060   F040BDE8           POP      {R4-R7,LR}
   \   00000064   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
   \                     ??_Insert_n0:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   0620B0E1           MOVS     R2,R6
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000024   0050B0E1           MOVS     R5,R0
   \   00000028   0730B0E1           MOVS     R3,R7
   \   0000002C   0620B0E1           MOVS     R2,R6
   \   00000030   0510B0E1           MOVS     R1,R5
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Ufill,??_Ufill??rA
   \   0000003C   F040BDE8           POP      {R4-R7,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0800002A           BCS      ??_Push_back0_1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000020   00309DE5           LDR      R3,[SP, #+0]
   \   00000024   0120A0E3           MOV      R2,#+1
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??_Ufill,??_Ufill??rA
   \   00000034   040084E5           STR      R0,[R4, #+4]
   \   00000038   050000EA           B        ??_Push_back0_2
   \                     ??_Push_back0_1:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   ........           _BLF     ??_Mytylast,??_Mytylast??rA
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   0D20B0E1           MOVS     R2,SP
   \   0000004C   0400B0E1           MOVS     R0,R4
   \   00000050   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_2:
   \   00000054   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000058   1040BDE8           POP      {R4,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void * _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
   \                     ??_Ufill:
   \   00000000   78402DE9           PUSH     {R3-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   01108DE2           ADD      R1,SP,#+1
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   00000020   01108DE2           ADD      R1,SP,#+1
   \   00000024   0D00B0E1           MOVS     R0,SP
   \   00000028   ........           _BLF     ??allocator_1,??allocator??rA_2
   \   0000002C   0D30B0E1           MOVS     R3,SP
   \   00000030   04208DE2           ADD      R2,SP,#+4
   \   00000034   0610B0E1           MOVS     R1,R6
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Uninitialized_fill_n,??_Uninitialized_fill_n??rA
   \   00000040   0410A0E3           MOV      R1,#+4
   \   00000044   915620E0           MLA      R0,R1,R6,R5
   \   00000048   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000004C   7040BDE8           POP      {R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
   \                     ??_Ucopy:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   01108DE2           ADD      R1,SP,#+1
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Alval,??_Alval??rA_1
   \   00000024   01108DE2           ADD      R1,SP,#+1
   \   00000028   0D00B0E1           MOVS     R0,SP
   \   0000002C   ........           _BLF     ??allocator_1,??allocator??rA_2
   \   00000030   0D30B0E1           MOVS     R3,SP
   \   00000034   0720B0E1           MOVS     R2,R7
   \   00000038   0610B0E1           MOVS     R1,R6
   \   0000003C   0500B0E1           MOVS     R0,R5
   \   00000040   ........           _BLF     ??_Uninitialized_copy,??_Uninitialized_copy??rA
   \   00000044   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000048   F040BDE8           POP      {R4-R7,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<float>::vector()
   \                     ??vector:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Vector_impl,??_Vector_impl??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<float>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * vector<float>::begin()
   \                     ??begin_1:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int vector<float>::size() const
   \                     ??size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Size,??_Size??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float & vector<float>::operator[](unsigned int)
   \                     `??operator[]`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0460A0E3           MOV      R6,#+4
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??begin_1,??begin??rA_1
   \   00000018   960520E0           MLA      R0,R6,R5,R0
   \   0000001C   7040BDE8           POP      {R4-R6,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void vector<float>::push_back(float)
   \                     ??push_back:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Push_back,??_Push_back??rA
   \   00000014   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * vector<float>::erase(float *)
   \                     ??erase:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_P,??_P??rA
   \   00000018   0010B0E1           MOVS     R1,R0
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000024   0010B0E1           MOVS     R1,R0
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_I,??_I??rA
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * vector<float>::_P(float *)
   \                     ??_P:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * vector<float>::_I(float *)
   \                     ??_I:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AILevelSwitchOptical_mA::AILevelSwitchOptical_mA(int SnsType, float mA_On, float mA_Off, float mA_Win, float mA_Test, float mA_Light)
   \                     ??AILevelSwitchOptical_mA:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0050B0E1           MOVS     R5,R0
     10          {
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000018   A40085E5           STR      R0,[R5, #+164]
   \   0000001C   5E0F95E2           ADDS     R0,R5,#+376
   \   00000020   ........           _BLF     ??vector,??vector??rA
     11          	Type                = SnsType;
   \   00000024   30009DE5           LDR      R0,[SP, #+48]
   \   00000028   A00085E5           STR      R0,[R5, #+160]
     12          	BasicSensorTypeWord = L_WORD599;//LSw
   \   0000002C   5700A0E3           MOV      R0,#+87
   \   00000030   800F80E3           ORR      R0,R0,#0x200
   \   00000034   140185E5           STR      R0,[R5, #+276]
     13          	Location            = C_AI_LOC_DECK;
   \   00000038   EA00A0E3           MOV      R0,#+234
   \   0000003C   800E80E3           ORR      R0,R0,#0x800
   \   00000040   280185E5           STR      R0,[R5, #+296]
     14          	SwitchOn_mA         = mA_On;
   \   00000044   34009DE5           LDR      R0,[SP, #+52]
   \   00000048   640185E5           STR      R0,[R5, #+356]
     15          	SwitchOff_mA        = mA_Off;
   \   0000004C   38009DE5           LDR      R0,[SP, #+56]
   \   00000050   680185E5           STR      R0,[R5, #+360]
     16          	SwitchWindow        = mA_Win;
   \   00000054   60009DE5           LDR      R0,[SP, #+96]
   \   00000058   6C0185E5           STR      R0,[R5, #+364]
     17          	SwitchTest          = mA_Test;
   \   0000005C   64009DE5           LDR      R0,[SP, #+100]
   \   00000060   700185E5           STR      R0,[R5, #+368]
     18          	SwitchLight         = mA_Light;
   \   00000064   68009DE5           LDR      R0,[SP, #+104]
   \   00000068   740185E5           STR      R0,[R5, #+372]
     19          	AlarmmAmpShortCircuit *ShortCircuitPtr      = new AlarmmAmpShortCircuit( this);
   \   0000006C   EC00A0E3           MOV      R0,#+236
   \   00000070   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000074   0040B0E1           MOVS     R4,R0
   \   00000078   000054E3           CMP      R4,#+0
   \   0000007C   0400000A           BEQ      ??AILevelSwitchOptical_mA_1
   \   00000080   0510B0E1           MOVS     R1,R5
   \   00000084   0400B0E1           MOVS     R0,R4
   \   00000088   ........           _BLF     ??AlarmmAmpShortCircuit,??AlarmmAmpShortCircuit??rA
   \   0000008C   0460B0E1           MOVS     R6,R4
   \   00000090   000000EA           B        ??AILevelSwitchOptical_mA_2
   \                     ??AILevelSwitchOptical_mA_1:
   \   00000094   0060A0E3           MOV      R6,#+0
     20          	AlarmmAmpOpenLoop     *OpenLoopPtr          = new AlarmmAmpOpenLoop( this);
   \                     ??AILevelSwitchOptical_mA_2:
   \   00000098   EC00A0E3           MOV      R0,#+236
   \   0000009C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   000000A0   0040B0E1           MOVS     R4,R0
   \   000000A4   000054E3           CMP      R4,#+0
   \   000000A8   0500000A           BEQ      ??AILevelSwitchOptical_mA_3
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0510B0E1           MOVS     R1,R5
   \   000000B4   0400B0E1           MOVS     R0,R4
   \   000000B8   ........           _BLF     ??AlarmmAmpOpenLoop,??AlarmmAmpOpenLoop??rA
   \   000000BC   0470B0E1           MOVS     R7,R4
   \   000000C0   000000EA           B        ??AILevelSwitchOptical_mA_4
   \                     ??AILevelSwitchOptical_mA_3:
   \   000000C4   0070A0E3           MOV      R7,#+0
     21          	AlarmLevelSwitchTest  *LevelSwitchTest      = new AlarmLevelSwitchTest( this,LEVELSWITCH_HS_MA_TEST,LEVELSWITCH_HS_MA_WIN);
   \                     ??AILevelSwitchOptical_mA_4:
   \   000000C8   EC00A0E3           MOV      R0,#+236
   \   000000CC   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   000000D0   0040B0E1           MOVS     R4,R0
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0600000A           BEQ      ??AILevelSwitchOptical_mA_5
   \   000000DC   0C319FE5           LDR      R3,??AILevelSwitchOptical_mA_6  ;; 0x3b102de0
   \   000000E0   0C219FE5           LDR      R2,??AILevelSwitchOptical_mA_6+0x4  ;; 0x3bb43958
   \   000000E4   0510B0E1           MOVS     R1,R5
   \   000000E8   0400B0E1           MOVS     R0,R4
   \   000000EC   ........           _BLF     ??AlarmLevelSwitchTest,??AlarmLevelSwitchTest??rA
   \   000000F0   0480B0E1           MOVS     R8,R4
   \   000000F4   000000EA           B        ??AILevelSwitchOptical_mA_7
   \                     ??AILevelSwitchOptical_mA_5:
   \   000000F8   0080A0E3           MOV      R8,#+0
     22          	AlarmLevelSwitchLight *LevelSwitchLightPtr  = new AlarmLevelSwitchLight( this);
   \                     ??AILevelSwitchOptical_mA_7:
   \   000000FC   EC00A0E3           MOV      R0,#+236
   \   00000100   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000104   0040B0E1           MOVS     R4,R0
   \   00000108   000054E3           CMP      R4,#+0
   \   0000010C   0400000A           BEQ      ??AILevelSwitchOptical_mA_8
   \   00000110   0510B0E1           MOVS     R1,R5
   \   00000114   0400B0E1           MOVS     R0,R4
   \   00000118   ........           _BLF     ??AlarmLevelSwitchLight,??AlarmLevelSwitchLight??rA
   \   0000011C   0490B0E1           MOVS     R9,R4
   \   00000120   000000EA           B        ??AILevelSwitchOptical_mA_9
   \                     ??AILevelSwitchOptical_mA_8:
   \   00000124   0090A0E3           MOV      R9,#+0
     23          	AlarmLevelSwitchDead  *LevelSwitchDeadPtr   = new AlarmLevelSwitchDead( this);
   \                     ??AILevelSwitchOptical_mA_9:
   \   00000128   F800A0E3           MOV      R0,#+248
   \   0000012C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000130   0040B0E1           MOVS     R4,R0
   \   00000134   000054E3           CMP      R4,#+0
   \   00000138   0400000A           BEQ      ??AILevelSwitchOptical_mA_10
   \   0000013C   0510B0E1           MOVS     R1,R5
   \   00000140   0400B0E1           MOVS     R0,R4
   \   00000144   ........           _BLF     ??AlarmLevelSwitchDead,??AlarmLevelSwitchDead??rA
   \   00000148   04A0B0E1           MOVS     R10,R4
   \   0000014C   000000EA           B        ??AILevelSwitchOptical_mA_11
   \                     ??AILevelSwitchOptical_mA_10:
   \   00000150   00A0A0E3           MOV      R10,#+0
     24          	AlarmLSwitchFailure   *LSwitchFailurePtr    = new AlarmLSwitchFailure( this);
   \                     ??AILevelSwitchOptical_mA_11:
   \   00000154   F000A0E3           MOV      R0,#+240
   \   00000158   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   0000015C   0040B0E1           MOVS     R4,R0
   \   00000160   000054E3           CMP      R4,#+0
   \   00000164   0400000A           BEQ      ??AILevelSwitchOptical_mA_12
   \   00000168   0510B0E1           MOVS     R1,R5
   \   0000016C   0400B0E1           MOVS     R0,R4
   \   00000170   ........           _BLF     ??AlarmLSwitchFailure,??AlarmLSwitchFailure??rA
   \   00000174   04B0B0E1           MOVS     R11,R4
   \   00000178   000000EA           B        ??AILevelSwitchOptical_mA_13
   \                     ??AILevelSwitchOptical_mA_12:
   \   0000017C   00B0A0E3           MOV      R11,#+0
     25          	AlarmSet.insert(ShortCircuitPtr);
   \                     ??AILevelSwitchOptical_mA_13:
   \   00000180   0620B0E1           MOVS     R2,R6
   \   00000184   C01095E2           ADDS     R1,R5,#+192
   \   00000188   0D00B0E1           MOVS     R0,SP
   \   0000018C   ........           _BLF     ??insert,??insert??rA
     26          	AlarmSet.insert(OpenLoopPtr);
   \   00000190   0720B0E1           MOVS     R2,R7
   \   00000194   C01095E2           ADDS     R1,R5,#+192
   \   00000198   08008DE2           ADD      R0,SP,#+8
   \   0000019C   ........           _BLF     ??insert,??insert??rA
     27          	AlarmSet.insert(LevelSwitchTest);
   \   000001A0   0820B0E1           MOVS     R2,R8
   \   000001A4   C01095E2           ADDS     R1,R5,#+192
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??insert,??insert??rA
     28          	AlarmSet.insert(LevelSwitchLightPtr);
   \   000001B0   0920B0E1           MOVS     R2,R9
   \   000001B4   C01095E2           ADDS     R1,R5,#+192
   \   000001B8   18008DE2           ADD      R0,SP,#+24
   \   000001BC   ........           _BLF     ??insert,??insert??rA
     29          	AlarmSet.insert(LevelSwitchDeadPtr);
   \   000001C0   0A20B0E1           MOVS     R2,R10
   \   000001C4   C01095E2           ADDS     R1,R5,#+192
   \   000001C8   20008DE2           ADD      R0,SP,#+32
   \   000001CC   ........           _BLF     ??insert,??insert??rA
     30          	AlarmSet.insert(LSwitchFailurePtr);
   \   000001D0   0B20B0E1           MOVS     R2,R11
   \   000001D4   C01095E2           ADDS     R1,R5,#+192
   \   000001D8   28008DE2           ADD      R0,SP,#+40
   \   000001DC   ........           _BLF     ??insert,??insert??rA
     31          }
   \   000001E0   0500B0E1           MOVS     R0,R5
   \   000001E4   3CD08DE2           ADD      SP,SP,#+60       ;; stack cleaning
   \   000001E8   F04FBDE8           POP      {R4-R11,LR}
   \   000001EC   1EFF2FE1           BX       LR               ;; return
   \                     ??AILevelSwitchOptical_mA_6:
   \   000001F0   E02D103B           DC32     0x3b102de0
   \   000001F4   5839B43B           DC32     0x3bb43958
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          AILevelSwitchOptical_mA::~AILevelSwitchOptical_mA(void)
     34          {
   \                     `?~AILevelSwitchOptical_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0A00000A           BEQ      `?~AILevelSwitchOptical_mA_1`
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     35          }
   \   0000001C   5E0F94E2           ADDS     R0,R4,#+376
   \   00000020   ........           _BLF     `?~vector`,`?~vector??rA`
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000030   010015E3           TST      R5,#0x1
   \   00000034   0100000A           BEQ      `?~AILevelSwitchOptical_mA_1`
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AILevelSwitchOptical_mA_1`:
   \   00000040   3040BDE8           POP      {R4,R5,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
     36          
     37          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     38          U8 AILevelSwitchOptical_mA::GetFilter(void)
     39          {
   \                     ??GetFilter:
   \   00000000   0010B0E1           MOVS     R1,R0
     40          	return(FILTER_LEVEL_SWITCH);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   1EFF2FE1           BX       LR               ;; return
     41          }
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          AnsiString AILevelSwitchOptical_mA::MakeConfigString(int ExtraTabs)
     44          {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   FCD04DE2           SUB      SP,SP,#+252
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     45          	AnsiString TabStr1= AnsiString::StringOfChar('\t',1+ExtraTabs);
   \   00000014   012096E2           ADDS     R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     46          	AnsiString LocalString;
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     47          	LocalString +=TabStr1+KeyWord(Type)+CrLfStr;
   \   0000002C   A01094E5           LDR      R1,[R4, #+160]
   \   00000030   8C008DE2           ADD      R0,SP,#+140
   \   00000034   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000038   8C208DE2           ADD      R2,SP,#+140
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   A8008DE2           ADD      R0,SP,#+168
   \   00000044   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000048   C4209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   0000004C   A8108DE2           ADD      R1,SP,#+168
   \   00000050   C4008DE2           ADD      R0,SP,#+196
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   C4108DE2           ADD      R1,SP,#+196
   \   0000005C   0500B0E1           MOVS     R0,R5
   \   00000060   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000064   C4008DE2           ADD      R0,SP,#+196
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   A8008DE2           ADD      R0,SP,#+168
   \   00000070   ........           _BLF     `?~string`,`?~string??rA`
   \   00000074   8C008DE2           ADD      R0,SP,#+140
   \   00000078   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     48          	LocalString += AnalogInput::MakeConfigString();	  //common
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   70108DE2           ADD      R1,SP,#+112
   \   00000084   0400B0E1           MOVS     R0,R4
   \   00000088   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   0500B0E1           MOVS     R0,R5
   \   00000094   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000098   70008DE2           ADD      R0,SP,#+112
   \   0000009C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     49          
     50          	LocalString +=TabStr1+KeyWord(C_AI_END)+CrLfStr;
   \   000000A0   9810A0E3           MOV      R1,#+152
   \   000000A4   801E81E3           ORR      R1,R1,#0x800
   \   000000A8   1C008DE2           ADD      R0,SP,#+28
   \   000000AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B0   1C208DE2           ADD      R2,SP,#+28
   \   000000B4   0D10B0E1           MOVS     R1,SP
   \   000000B8   38008DE2           ADD      R0,SP,#+56
   \   000000BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C0   4C209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   000000C4   38108DE2           ADD      R1,SP,#+56
   \   000000C8   54008DE2           ADD      R0,SP,#+84
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   54108DE2           ADD      R1,SP,#+84
   \   000000D4   0500B0E1           MOVS     R0,R5
   \   000000D8   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000DC   54008DE2           ADD      R0,SP,#+84
   \   000000E0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000E4   38008DE2           ADD      R0,SP,#+56
   \   000000E8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000EC   1C008DE2           ADD      R0,SP,#+28
   \   000000F0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     51          	LocalString += CrLfStr;
   \   000000F4   18109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   000000F8   0500B0E1           MOVS     R0,R5
   \   000000FC   ........           _BLF     `??operator+=`,`??operator+=??rA`
     52          
     53          	return(LocalString);
   \   00000100   0D00B0E1           MOVS     R0,SP
   \   00000104   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000108   FCD08DE2           ADD      SP,SP,#+252      ;; stack cleaning
   \   0000010C   7040BDE8           POP      {R4-R6,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000114   ........           DC32     CrLfStr
     54          	//ConfigString.AddString(LocalString);
     55          }
     56          //---------------------------------------------------------------------------
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          bool AILevelSwitchOptical_mA::LoadConfigString(TSNConfigString &ConfigString)
     59          {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     60          	bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0060B0E1           MOVS     R6,R0
     61          	int ErrorLine=0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     62          	int Key;
     63          	do {
     64          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20B0E1           MOVS     R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0500B0E1           MOVS     R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     65          		if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A00000A           BEQ      ??LoadConfigString_4
     66          			if ( ErrorLine != EOF ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   2900000A           BEQ      ??LoadConfigString_5
     67          				GiveConfigWarning("Level switch sensor",ErrorLine);
   \   0000004C   DC109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Level switch sensor">`
   \   00000050   74008DE2           ADD      R0,SP,#+116
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   74008DE2           ADD      R0,SP,#+116
   \   00000064   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000068   210000EA           B        ??LoadConfigString_5
     68          			}
     69          		} else {
     70          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   58008DE2           ADD      R0,SP,#+88
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   58008DE2           ADD      R0,SP,#+88
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     71          			switch ( Key ) {
   \   00000088   0700B0E1           MOVS     R0,R7
   \   0000008C   980040E2           SUB      R0,R0,#+152
   \   00000090   800E40E2           SUB      R0,R0,#+2048
   \   00000094   010050E3           CMP      R0,#+1
   \   00000098   0300008A           BHI      ??LoadConfigString_7
   \   0000009C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000000A0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000000A8   120F0000           DC8      +18,+15,+0,+0
     72          			default:
     73          				GiveConfigWarning("Level switch sensor",InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_7:
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   3C008DE2           ADD      R0,SP,#+60
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   0080B0E1           MOVS     R8,R0
   \   000000BC   6C109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Level switch sensor">`
   \   000000C0   20008DE2           ADD      R0,SP,#+32
   \   000000C4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000C8   1C2095E5           LDR      R2,[R5, #+28]
   \   000000CC   0810B0E1           MOVS     R1,R8
   \   000000D0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000000D4   3C008DE2           ADD      R0,SP,#+60
   \   000000D8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000E4   020000EA           B        ??LoadConfigString_5
     74          				break;
     75          			case C_AI_START_COMMON:
     76          				AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_8:
   \   000000E8   0510B0E1           MOVS     R1,R5
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     77          				break;
     78          			case C_AI_END:
     79          				break;
     80          			}
     81          		}
     82          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_5:
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000FC   000056E3           CMP      R6,#+0
   \   00000100   0600000A           BEQ      ??LoadConfigString_9
   \   00000104   00009DE5           LDR      R0,[SP, #+0]
   \   00000108   010070E3           CMN      R0,#+1
   \   0000010C   0300000A           BEQ      ??LoadConfigString_9
   \   00000110   9800A0E3           MOV      R0,#+152
   \   00000114   800E80E3           ORR      R0,R0,#0x800
   \   00000118   000057E1           CMP      R7,R0
   \   0000011C   BFFFFF1A           BNE      ??LoadConfigString_3
     83          	return(NoError);
   \                     ??LoadConfigString_9:
   \   00000120   0600B0E1           MOVS     R0,R6
   \   00000124   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   00000128   F041BDE8           POP      {R4-R8,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_6:
   \   00000130   ........           DC32     `?<Constant "Level switch sensor">`
     84          }
     85          ///////////////////////////////////////////////////////////////
     86          //
     87          // Routines for Calculation of values
     88          //
     89          ///////////////////////////////////////////////////////////////
     90          
     91          
     92          
     93          #define LEVEL_SWITCH_HISTORY_SIZE	20

   \                                 In segment CODE, align 4, keep-with-next
     94          float AILevelSwitchOptical_mA::Calculate(void)
     95          {
   \                     ??Calculate:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     96          	if ( TSNElapsedTicks(TimeChecked)>CLOCKS_PER_SEC/10 ) {
   \   00000008   540194E5           LDR      R0,[R4, #+340]
   \   0000000C   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   930000BA           BLT      ??Calculate_1
     97          		TimeChecked = clock();
   \   00000018   ........           _BLF     clock,??clock??rA
   \   0000001C   540184E5           STR      R0,[R4, #+340]
     98          		if ( CanCalculate() ) {
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   8200000A           BEQ      ??Calculate_2
     99          			float tmpCalcValue = Gain*FilteredValue-Offset;
   \   00000030   3C1194E5           LDR      R1,[R4, #+316]
   \   00000034   440194E5           LDR      R0,[R4, #+324]
   \   00000038   ........           _BLF     __fMul,??__fMul??rA
   \   0000003C   401194E5           LDR      R1,[R4, #+320]
   \   00000040   ........           _BLF     __fSub,??__fSub??rA
   \   00000044   0050B0E1           MOVS     R5,R0
    100          			float MinVal       = ValueVector[0];
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   5E0F94E2           ADDS     R0,R4,#+376
   \   00000050   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   0060B0E1           MOVS     R6,R0
    101          			float MaxVal       = ValueVector[0];
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   5E0F94E2           ADDS     R0,R4,#+376
   \   00000064   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   0070B0E1           MOVS     R7,R0
    102          			ValueVector.push_back(tmpCalcValue);
   \   00000070   0510B0E1           MOVS     R1,R5
   \   00000074   5E0F94E2           ADDS     R0,R4,#+376
   \   00000078   ........           _BLF     ??push_back,??push_back??rA
    103          			if ( ValueVector.size() > LEVEL_SWITCH_HISTORY_SIZE ) {
   \   0000007C   5E0F94E2           ADDS     R0,R4,#+376
   \   00000080   ........           _BLF     ??size_1,??size??rA_1
   \   00000084   150050E3           CMP      R0,#+21
   \   00000088   0400003A           BCC      ??Calculate_3
    104          				ValueVector.erase(ValueVector.begin());
   \   0000008C   5E0F94E2           ADDS     R0,R4,#+376
   \   00000090   ........           _BLF     ??begin_1,??begin??rA_1
   \   00000094   0010B0E1           MOVS     R1,R0
   \   00000098   5E0F94E2           ADDS     R0,R4,#+376
   \   0000009C   ........           _BLF     ??erase,??erase??rA
    105          			}
    106          			for ( unsigned i=0; i < ValueVector.size(); i++ ) {
   \                     ??Calculate_3:
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   0080B0E1           MOVS     R8,R0
   \                     ??Calculate_4:
   \   000000A8   5E0F94E2           ADDS     R0,R4,#+376
   \   000000AC   ........           _BLF     ??size_1,??size??rA_1
   \   000000B0   000058E1           CMP      R8,R0
   \   000000B4   2000002A           BCS      ??Calculate_5
    107          				MinVal = MIN(MinVal, ValueVector[i]);
   \   000000B8   0600B0E1           MOVS     R0,R6
   \   000000BC   0090B0E1           MOVS     R9,R0
   \   000000C0   0810B0E1           MOVS     R1,R8
   \   000000C4   5E0F94E2           ADDS     R0,R4,#+376
   \   000000C8   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   000000CC   001090E5           LDR      R1,[R0, #+0]
   \   000000D0   0900B0E1           MOVS     R0,R9
   \   000000D4   ........           _BLF     __fLess,??__fLess??rA
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0400001A           BNE      ??Calculate_6
   \                     ??Calculate_7:
   \   000000E0   0810B0E1           MOVS     R1,R8
   \   000000E4   5E0F94E2           ADDS     R0,R4,#+376
   \   000000E8   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   0060B0E1           MOVS     R6,R0
    108          				MaxVal = MAX(MaxVal, ValueVector[i]);
   \                     ??Calculate_6:
   \   000000F4   0700B0E1           MOVS     R0,R7
   \   000000F8   0090B0E1           MOVS     R9,R0
   \   000000FC   0810B0E1           MOVS     R1,R8
   \   00000100   5E0F94E2           ADDS     R0,R4,#+376
   \   00000104   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000108   001090E5           LDR      R1,[R0, #+0]
   \   0000010C   0900B0E1           MOVS     R0,R9
   \   00000110   ........           _BLF     __fLess,??__fLess??rA
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   0500000A           BEQ      ??Calculate_8
   \   0000011C   0810B0E1           MOVS     R1,R8
   \   00000120   5E0F94E2           ADDS     R0,R4,#+376
   \   00000124   ........           _BLF     `??operator[]`,`??operator[]??rA`
   \   00000128   000090E5           LDR      R0,[R0, #+0]
   \   0000012C   0070B0E1           MOVS     R7,R0
   \   00000130   FFFFFFEA           B        ??Calculate_9
    109          			}
   \                     ??Calculate_8:
   \                     ??Calculate_9:
   \   00000134   018098E2           ADDS     R8,R8,#+1
   \   00000138   DAFFFFEA           B        ??Calculate_4
    110          			SwitchVariation = fabs(MaxVal - MinVal);
   \                     ??Calculate_5:
   \   0000013C   0700B0E1           MOVS     R0,R7
   \   00000140   0610B0E1           MOVS     R1,R6
   \   00000144   ........           _BLF     __fSub,??__fSub??rA
   \   00000148   ........           _BLF     ??fabs,??fabs??rA
   \   0000014C   840184E5           STR      R0,[R4, #+388]
    111          			if ( fabs(tmpCalcValue-SwitchOn_mA) < SwitchWindow ) {
   \   00000150   0500B0E1           MOVS     R0,R5
   \   00000154   641194E5           LDR      R1,[R4, #+356]
   \   00000158   ........           _BLF     __fSub,??__fSub??rA
   \   0000015C   ........           _BLF     ??fabs,??fabs??rA
   \   00000160   6C1194E5           LDR      R1,[R4, #+364]
   \   00000164   ........           _BLF     __fLess,??__fLess??rA
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   0400000A           BEQ      ??Calculate_10
    112          				CalcValue = LEVELSWITCH_ON;
   \   00000170   FE05A0E3           MOV      R0,#+1065353216
   \   00000174   480184E5           STR      R0,[R4, #+328]
    113          				Failure = false;
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   3801C4E5           STRB     R0,[R4, #+312]
   \   00000180   380000EA           B        ??Calculate_1
    114          			} else if ( fabs(tmpCalcValue-SwitchOff_mA) < SwitchWindow ) {
   \                     ??Calculate_10:
   \   00000184   0500B0E1           MOVS     R0,R5
   \   00000188   681194E5           LDR      R1,[R4, #+360]
   \   0000018C   ........           _BLF     __fSub,??__fSub??rA
   \   00000190   ........           _BLF     ??fabs,??fabs??rA
   \   00000194   6C1194E5           LDR      R1,[R4, #+364]
   \   00000198   ........           _BLF     __fLess,??__fLess??rA
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   0400000A           BEQ      ??Calculate_11
    115          				CalcValue = LEVELSWITCH_OFF;
   \   000001A4   0000A0E3           MOV      R0,#+0
   \   000001A8   480184E5           STR      R0,[R4, #+328]
    116          				Failure   = false;
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   3801C4E5           STRB     R0,[R4, #+312]
   \   000001B4   2B0000EA           B        ??Calculate_1
    117          			} else if ( fabs(tmpCalcValue-SwitchTest) < SwitchWindow ) {
   \                     ??Calculate_11:
   \   000001B8   0500B0E1           MOVS     R0,R5
   \   000001BC   701194E5           LDR      R1,[R4, #+368]
   \   000001C0   ........           _BLF     __fSub,??__fSub??rA
   \   000001C4   ........           _BLF     ??fabs,??fabs??rA
   \   000001C8   6C1194E5           LDR      R1,[R4, #+364]
   \   000001CC   ........           _BLF     __fLess,??__fLess??rA
   \   000001D0   000050E3           CMP      R0,#+0
   \   000001D4   0500000A           BEQ      ??Calculate_12
    118          				CalcValue = LEVELSWITCH_TEST;
   \   000001D8   4004A0E3           MOV      R0,#+1073741824
   \   000001DC   800880E3           ORR      R0,R0,#0x800000
   \   000001E0   480184E5           STR      R0,[R4, #+328]
    119          				Failure   = false;
   \   000001E4   0000A0E3           MOV      R0,#+0
   \   000001E8   3801C4E5           STRB     R0,[R4, #+312]
   \   000001EC   1D0000EA           B        ??Calculate_1
    120          			} else if ( fabs(tmpCalcValue-SwitchLight) < SwitchWindow ) {
   \                     ??Calculate_12:
   \   000001F0   0500B0E1           MOVS     R0,R5
   \   000001F4   741194E5           LDR      R1,[R4, #+372]
   \   000001F8   ........           _BLF     __fSub,??__fSub??rA
   \   000001FC   ........           _BLF     ??fabs,??fabs??rA
   \   00000200   6C1194E5           LDR      R1,[R4, #+364]
   \   00000204   ........           _BLF     __fLess,??__fLess??rA
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   0500000A           BEQ      ??Calculate_13
    121          				CalcValue = LEVELSWITCH_LIGHT;
   \   00000210   4004A0E3           MOV      R0,#+1073741824
   \   00000214   A00880E3           ORR      R0,R0,#0xA00000
   \   00000218   480184E5           STR      R0,[R4, #+328]
    122          				Failure   = false;
   \   0000021C   0000A0E3           MOV      R0,#+0
   \   00000220   3801C4E5           STRB     R0,[R4, #+312]
   \   00000224   0F0000EA           B        ??Calculate_1
    123          			} else {
    124          				CalcValue = LEVELSWITCH_ERROR;
   \                     ??Calculate_13:
   \   00000228   4004A0E3           MOV      R0,#+1073741824
   \   0000022C   480184E5           STR      R0,[R4, #+328]
    125          				Failure   = true;
   \   00000230   0100A0E3           MOV      R0,#+1
   \   00000234   3801C4E5           STRB     R0,[R4, #+312]
   \   00000238   0A0000EA           B        ??Calculate_1
    126          			}
    127          		} else {
    128          			if ( Enable ) {
   \                     ??Calculate_2:
   \   0000023C   3401D4E5           LDRB     R0,[R4, #+308]
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   0300000A           BEQ      ??Calculate_14
    129          				CalcValue = LEVELSWITCH_HW_ERROR;
   \   00000248   4004A0E3           MOV      R0,#+1073741824
   \   0000024C   400880E3           ORR      R0,R0,#0x400000
   \   00000250   480184E5           STR      R0,[R4, #+328]
   \   00000254   030000EA           B        ??Calculate_1
    130          			} else {
    131          				CalcValue = LEVELSWITCH_OFF;
   \                     ??Calculate_14:
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   480184E5           STR      R0,[R4, #+328]
    132          				Failure   = false;
   \   00000260   0000A0E3           MOV      R0,#+0
   \   00000264   3801C4E5           STRB     R0,[R4, #+312]
    133          			}
    134          		}
    135          	}
    136          	return(CalcValue);
   \                     ??Calculate_1:
   \   00000268   480194E5           LDR      R0,[R4, #+328]
   \   0000026C   F043BDE8           POP      {R4-R9,LR}
   \   00000270   1EFF2FE1           BX       LR               ;; return
    137          }
    138          
    139          ///////////////////////////////////////////////////////////////
    140          //
    141          // Routines for the librarian for input
    142          //
    143          ///////////////////////////////////////////////////////////////
    144          
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          int AILevelSwitchOptical_mA::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
    147          {
   \                     ??PutValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   4080DDE5           LDRB     R8,[SP, #+64]
   \   0000001C   44909DE5           LDR      R9,[SP, #+68]
    148          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00A0B0E1           MOVS     R10,R0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   00108DE5           STR      R1,[SP, #+0]
    149          	switch ( ValueId ) {
    150          	default:
    151          		Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000030   0710B0E1           MOVS     R1,R7
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0810B0E1           MOVS     R1,R8
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   0030B0E1           MOVS     R3,R0
   \   00000050   0620B0E1           MOVS     R2,R6
   \   00000054   0510B0E1           MOVS     R1,R5
   \   00000058   0400B0E1           MOVS     R0,R4
   \   0000005C   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000060   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000064   00A0B0E1           MOVS     R10,R0
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
    152          		break;
    153          	}
    154          	if ( Status==E_NO_ERR ) {
   \   00000070   00005AE3           CMP      R10,#+0
   \   00000074   0500001A           BNE      ??PutValue_2
    155          		SetModifiedFlag();
   \   00000078   A40094E5           LDR      R0,[R4, #+164]
   \   0000007C   541090E2           ADDS     R1,R0,#+84
   \   00000080   0400B0E1           MOVS     R0,R4
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   0FE0A0E1           MOV      LR,PC
   \   0000008C   11FF2FE1           BX       R1
    156          	}
    157          	if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000090   000059E3           CMP      R9,#+0
   \   00000094   0100000A           BEQ      ??PutValue_3
    158          		*UnitId = ValUnitId;
   \   00000098   00009DE5           LDR      R0,[SP, #+0]
   \   0000009C   000089E5           STR      R0,[R9, #+0]
    159          	}
    160          	return(Status);
   \                     ??PutValue_3:
   \   000000A0   0A00B0E1           MOVS     R0,R10
   \   000000A4   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   000000A8   F047BDE8           POP      {R4-R10,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
    161          }
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          int  AILevelSwitchOptical_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
    164          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
    165          	int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
    166          	switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1600008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00131307           DC8      +0,+19,+19,+7
    167          	case SVT_AI_OFFSET   :
    168          		MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
    169          		DecPnt     = 0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   000088E5           STR      R0,[R8, #+0]
    170          		Unit       = NO_UNIT;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   000089E5           STR      R0,[R9, #+0]
   \   00000060   160000EA           B        ??GetValue_5
    171          		break;
    172          	case SVT_AI_CALC_VAL :
    173          		MyRetValue = Calculate();
   \                     ??GetValue_6:
   \   00000064   A40094E5           LDR      R0,[R4, #+164]
   \   00000068   601090E2           ADDS     R1,R0,#+96
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   11FF2FE1           BX       R1
   \   0000007C   000087E5           STR      R0,[R7, #+0]
    174          		DecPnt     = 0;
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   000088E5           STR      R0,[R8, #+0]
    175          		Unit       = NO_UNIT;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   000089E5           STR      R0,[R9, #+0]
   \   00000090   0A0000EA           B        ??GetValue_5
    176          		break;
    177          	default:
    178          		Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000094   0900B0E1           MOVS     R0,R9
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0800B0E1           MOVS     R0,R8
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0730B0E1           MOVS     R3,R7
   \   000000A8   0620B0E1           MOVS     R2,R6
   \   000000AC   0510B0E1           MOVS     R1,R5
   \   000000B0   0400B0E1           MOVS     R0,R4
   \   000000B4   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   00A0B0E1           MOVS     R10,R0
    179          		break;
    180          	}
    181          	return(Status);
   \                     ??GetValue_5:
   \   000000C0   0A00B0E1           MOVS     R0,R10
   \   000000C4   F047BDE8           POP      {R4-R10,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    182          }
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          int AILevelSwitchOptical_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString)
    185          {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    186          	int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
    187          	switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
    188          	case SVT_AI_UNIT:
    189          		MyString = GetUnitName(CURRENT_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   1110A0E3           MOV      R1,#+17
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
    190          		break;
    191          	default:
    192          		Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
    193          		break;
    194          	}
    195          	return(Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    196          }
    197          

   \                                 In segment CODE, align 4, keep-with-next
    198          int AILevelSwitchOptical_mA::PutFloatValue( int ValueId, float NewValue)
    199          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    200          	return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    201          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Level switch sensor">`:
   \   00000000   4C6576656C20       DC8 "Level switch sensor"
   \              737769746368
   \              2073656E736F
   \              7200        

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AILevelSwitchOptical_mA &AILevelSwitchOptical_mA::new AILevelSwitchOptical_mA(int, float, float, float, float, float)
   \                     `??new AILevelSwitchOptical_mA`:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   20909DE5           LDR      R9,[SP, #+32]
   \   0000001C   620FA0E3           MOV      R0,#+392
   \   00000020   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0800000A           BEQ      `??new AILevelSwitchOptical_mA_1`
   \   0000002C   00022DE9           PUSH     {R9}
   \   00000030   00012DE9           PUSH     {R8}
   \   00000034   80002DE9           PUSH     {R7}
   \   00000038   0630B0E1           MOVS     R3,R6
   \   0000003C   0520B0E1           MOVS     R2,R5
   \   00000040   0410B0E1           MOVS     R1,R4
   \   00000044   ........           BL       ??AILevelSwitchOptical_mA
   \   00000048   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000004C   000000EA           B        `??new AILevelSwitchOptical_mA_2`
   \                     `??new AILevelSwitchOptical_mA_1`:
   \   00000050   0000A0E3           MOV      R0,#+0
   \                     `??new AILevelSwitchOptical_mA_2`:
   \   00000054   F043BDE8           POP      {R4-R9,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl
    202          
    203          
    204          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AILevelSwitchOptical_mA::AILevelSwitchOptical_mA(int, float, float, float, float, float)
                                       96
     AILevelSwitchOptical_mA::Calculate()
                                       28
     AILevelSwitchOptical_mA::GetFilter()
                                        0
     AILevelSwitchOptical_mA::GetStringValue(int, int, AnsiString &)
                                       52
     AILevelSwitchOptical_mA::GetValue(int, int, float &, int &, int &)
                                       40
     AILevelSwitchOptical_mA::LoadConfigString(TSNConfigString &)
                                      168
     AILevelSwitchOptical_mA::MakeConfigString(int)
                                      268
     AILevelSwitchOptical_mA::PutFloatValue(int, float)
                                       16
     AILevelSwitchOptical_mA::PutValue(int, int, AnsiString, bool, int *)
                                       72
     AILevelSwitchOptical_mA::new AILevelSwitchOptical_mA(int, float, float, float, float, float)
                                       40
     AILevelSwitchOptical_mA::~AILevelSwitchOptical_mA()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _Allocator<void>::deallocate(void *)
                                        8
     _Backward_copier<float, true>::_Copy(float const *, float const *, float *)
                                       16
     _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
                                        0
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                        0
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                        8
     _Copier<float, true>::_Copy(float const *, float const *, float *)
                                       16
     _Copy_backward_opt(float *, float *, float *)
                                       16
     _Copy_backward_opt(float const *, float const *, float *)
                                       16
     _Copy_opt(float *, float *, float *)
                                       16
     _Copy_opt(float const *, float const *, float *)
                                       16
     _String_val::_String_val(char_allocator)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                       48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       76
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                       12
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        8
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                        0
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Lmost()
                                        8
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rmost()
                                        8
     _Tree_algobase<allocator<void>>::_Root()
                                        8
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                       32
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                        8
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                        8
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                        0
     _Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
                                       16
     _Uninit_copy(float const *, float const *, float *)
                                       16
     _Uninit_copy(float const *, float const *, float *, allocator<float> &)
                                       20
     _Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
                                       20
     _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
                                        0
     _Vector_impl<float, allocator<float>>::_Altyval() const
                                       16
     _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
                                        0
     _Vector_impl<float, allocator<float>>::_Erase(float *)
                                       16
     _Vector_impl<float, allocator<float>>::_EraseAll()
                                       12
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
                                       24
     _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
                                       24
     _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
                                       20
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       44
     _Vector_impl<float, allocator<float>>::_Mytyend() const
                                        0
     _Vector_impl<float, allocator<float>>::_Mytyfirst() const
                                        0
     _Vector_impl<float, allocator<float>>::_Mytylast() const
                                        0
     _Vector_impl<float, allocator<float>>::_Push_back(float const &)
                                       12
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                       12
     _Vector_impl<float, allocator<float>>::_Tidy()
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                       24
     _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
                                       24
     _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
                                       24
     _Vector_impl<float, allocator<float>>::_Vector_impl()
                                        8
     _Vector_impl<float, allocator<float>>::capacity() const
                                        8
     _Vector_impl<float, allocator<float>>::size() const
                                        8
     _Vector_value<allocator<void>>::_Bcapacity() const
                                       12
     _Vector_value<allocator<void>>::_Bend() const
                                        0
     _Vector_value<allocator<void>>::_Bfirst() const
                                        0
     _Vector_value<allocator<void>>::_Blast() const
                                        0
     _Vector_value<allocator<void>>::_Bsize() const
                                       12
     _Vector_value<allocator<void>>::_Capacity<4U>() const
                                        8
     _Vector_value<allocator<void>>::_Size<4U>() const
                                        8
     _Vector_value<allocator<void>>::_ToBptr(void *)
                                        0
     _Vector_value<allocator<void>>::_Vector_value()
                                        8
     _Vector_value<allocator<void>>::_Xlen() const
                                        0
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                       12
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                        0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                        0
     allocator<float>::allocate(unsigned int)
                                       12
     allocator<float>::allocator(allocator<void> const &)
                                        0
     allocator<float>::deallocate(float *, unsigned int)
                                       16
     allocator<float>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     copy(float *, float *, float *)
                                       16
     copy_backward(float *, float *, float *)
                                       16
     fabs(float)                        0
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                        0
     operator new(unsigned int, void *)
                                        0
     operator+(string const &, string const &)
                                       44
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                       16
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8
     vector<float>::_I(float *)         0
     vector<float>::_P(float *)         0
     vector<float>::begin()             0
     vector<float>::erase(float *)     12
     vector<float>::operator[](unsigned int)
                                       16
     vector<float>::push_back(float)
                                       12
     vector<float>::size() const        8
     vector<float>::vector()            8
     vector<float>::~vector()           8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     fabs(float)                      12
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                       4
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_AllocHolder()
                                       4
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                      44
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::append(string const &)   48
     string::assign(string const &)   48
     _Copier<float, true>::_Copy(float const *, float const *, float *)
                                      40
     _Copy_opt(float const *, float const *, float *)
                                      40
     _Copy_opt(float *, float *, float *)
                                      40
     copy(float *, float *, float *)
                                      40
     _Backward_copier<float, true>::_Copy(float const *, float const *, float *)
                                      40
     _Copy_backward_opt(float const *, float const *, float *)
                                      40
     _Copy_backward_opt(float *, float *, float *)
                                      40
     copy_backward(float *, float *, float *)
                                      40
     operator new(unsigned int, void *)
                                      12
     _Allocator<void>::allocate(unsigned int)
                                      24
     _Allocator<void>::deallocate(void *)
                                      24
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                       4
     allocator<float>::allocator(allocator<void> const &)
                                       4
     allocator<float>::deallocate(float *, unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                      32
     allocator<float>::allocate(unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                      32
     allocator<float>::max_size() const
                                      28
     allocator<void>::allocator()      4
     _Uninit_copier<float, true>::_Copy(float const *, float const *, float *)
                                      40
     _Uninit_copy(float const *, float const *, float *)
                                      40
     _Uninit_copy(float const *, float const *, float *, allocator<float> &)
                                      44
     _Uninitialized_copy(float const *, float const *, float *, allocator<float> &)
                                      48
     _Uninitialized_fill_n(float *, unsigned int, float const &, allocator<float> &)
                                      32
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                      24
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                      40
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      72
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     204
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                      32
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                      28
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                       8
     _Tree_algobase<allocator<void>>::_Root()
                                      24
     _Tree_algobase<allocator<void>>::_Lmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     900
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                      24
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                      76
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                      52
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                      12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                      44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     460
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                     148
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                       4
     _Vector_value<allocator<void>>::_Vector_value()
                                      28
     _Vector_value<allocator<void>>::_Zero()
                                      28
     _Vector_value<allocator<void>>::_ToBptr(void *)
                                       4
     _Vector_value<allocator<void>>::_Bfirst() const
                                       8
     _Vector_value<allocator<void>>::_Blast() const
                                       8
     _Vector_value<allocator<void>>::_Bend() const
                                       8
     _Vector_value<allocator<void>>::_Bsize() const
                                      40
     _Vector_value<allocator<void>>::_Bcapacity() const
                                      40
     _Vector_value<allocator<void>>::_Capacity<4U>() const
                                      28
     _Vector_value<allocator<void>>::_Size<4U>() const
                                      28
     _Vector_value<allocator<void>>::_Xlen() const
                                       4
     _Vector_impl<float, allocator<float>>::_Vector_impl()
                                      28
     _Vector_impl<float, allocator<float>>::_Altyval() const
                                      52
     _Vector_impl<float, allocator<float>>::_EraseAll()
                                      60
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                     112
     _Vector_impl<float, allocator<float>>::_Tidy()
                                      32
     _Vector_impl<float, allocator<float>>::_Destroy(float *, float *)
                                       4
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      40
     _Vector_impl<float, allocator<float>>::_Insert_n(float *, unsigned int, float const &)
                                      56
     _Vector_impl<float, allocator<float>>::_Erase(float *)
                                     100
     _Vector_impl<float, allocator<float>>::_Push_back(float const &)
                                      32
     _Vector_impl<float, allocator<float>>::_Mytyfirst() const
                                       8
     _Vector_impl<float, allocator<float>>::_Mytylast() const
                                       8
     _Vector_impl<float, allocator<float>>::_Mytyend() const
                                       8
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     392
     _Vector_impl<float, allocator<float>>::size() const
                                      24
     _Vector_impl<float, allocator<float>>::capacity() const
                                      24
     _Vector_impl<float, allocator<float>>::_Insert0(float *, float)
                                     104
     _Vector_impl<float, allocator<float>>::_Insert_n0(float *, unsigned int, float)
                                      68
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      96
     _Vector_impl<float, allocator<float>>::_Ufill(float *, unsigned int, float)
                                      84
     _Vector_impl<float, allocator<float>>::_Ucopy(float const *, float const *, float *)
                                      80
     vector<float>::vector()          36
     vector<float>::~vector()         24
     vector<float>::begin()            8
     vector<float>::size() const      24
     vector<float>::operator[](unsigned int)
                                      36
     vector<float>::push_back(float)
                                      32
     vector<float>::erase(float *)    56
     vector<float>::_P(float *)       12
     vector<float>::_I(float *)       12
     operator+(string const &, string const &)
                                      72
     AnsiString::operator=(AnsiString const &)
                                      28
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AILevelSwitchOptical_mA::AILevelSwitchOptical_mA(int, float, float, float, float, float)
                                     504
     AILevelSwitchOptical_mA::~AILevelSwitchOptical_mA()
                                      72
     AILevelSwitchOptical_mA::GetFilter()
                                      12
     AILevelSwitchOptical_mA::MakeConfigString(int)
                                     280
     AILevelSwitchOptical_mA::LoadConfigString(TSNConfigString &)
                                     308
     AILevelSwitchOptical_mA::Calculate()
                                     628
     AILevelSwitchOptical_mA::PutValue(int, int, AnsiString, bool, int *)
                                     176
     AILevelSwitchOptical_mA::GetValue(int, int, float &, int &, int &)
                                     204
     AILevelSwitchOptical_mA::GetStringValue(int, int, AnsiString &)
                                     120
     AILevelSwitchOptical_mA::PutFloatValue(int, float)
                                      40
     ?<Constant "Level switch sensor">
                                      20
     __sti__routine()                208
     AILevelSwitchOptical_mA::new AILevelSwitchOptical_mA(int, float, float, float, float, float)
                                      92
     ??DataTable1                      4
      Others                        2168

 
 11 200 bytes in segment CODE
    156 bytes in segment DATA_C
    216 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 2 652 bytes of CODE  memory (+ 8 564 bytes shared)
   156 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
