##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:20:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\anpro_tcp_server.cpp               #
#    Command line    =  D:\S2Prog\TXU\src\anpro_tcp_server.cpp --fpu None    #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\anpro_tcp_server.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\anpro_tcp_server.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\anpro_tcp_server.cpp
      1          ////////////////////////////////////////////////////////////////////////////////
      2          //
      3          // ANPRO10 TCP server
      4          //
      5          // Revision History
      6          // -June/23/2016 - initial release by hkim
      7          //
      8          ////////////////////////////////////////////////////////////////////////////////
      9          #include "lwip/opt.h"
     10          
     11          #if LWIP_SOCKET
     12          
     13          #include <string.h>
     14          #include <stdio.h>
     15          #include <stdlib.h>
     16          
     17          #include "anpro_net.h"
     18          #include "anpro_tcp_server.h"
     19          #include "anpro_udp.h"
     20          
     21          #include "lwip/mem.h"
     22          #include "lwip/debug.h"
     23          #include "lwip/def.h"
     24          #include "lwip/api.h"
     25          #include "lwip/stats.h"
     26          #include "lwip/sockets.h"
     27          
     28          #include "app/circ_buffer.h"
     29          
     30          #include "TSNIncludes.h"
     31          
     32          
     33          ////////////////////////////////////////////////////////////////////////////////
     34          //
     35          // internal typedefs for connection management
     36          //
     37          ////////////////////////////////////////////////////////////////////////////////
     38          #define ANPRO_SERVER_SELECT_TIMEOUT 100000        // 100ms  change it later to infinity or something
     39          
     40          #define ANPRO_TCP_TX_BUFFER_SIZE    (1024*16)     // fix it to 1K for now
     41          #define ANPRO_TCP_RX_BUFFER_SIZE    (1024*16)     // same
     42          
     43          #define ANPRO_TCP_TX_TIMEOUT        15000         // if TX window situation doesn't get batter within this,
     44          // we just kill the connection
     45          
     46          #define ANPRO_UDP_TIMEOUT           1000
     47          
     48          typedef struct __anpro_connection
     49          {
     50              struct  list_head   con_list;     // list head for connection management
     51              s32_t               sd;           // socket descriptor
     52              CircBuffer          tx_buffer;    // circular buffer for async TX
     53              SGTimerElem         tx_timer;     // tx timer
     54              ANPRO_TCP_Server *server;       // tcp server this connection belongs to
     55              u32_t               client_addr;  // client IP Address
     56              u16_t               client_port;  // client TCP port
     57              u8_t                device_id;    // device ID
     58              u8_t                device_addr;  // device address
     59              ANPRO10_Reader      anp10_reader; // ANPRO10 RX handler
     60              u8_t                tx_pending;
     61              u8_t                system_match;
     62              u32_t               start_time;
     63          } ANPRO_Connection;
     64          
     65          ////////////////////////////////////////////////////////////////////////////////
     66          //
     67          // module private prototypes
     68          //
     69          ////////////////////////////////////////////////////////////////////////////////
     70          static void anpro_server_init_new_connection(ANPRO_TCP_Server *server, s32_t newsd, struct sockaddr_in *cli_addr, u8_t from_flash_prog_port);
     71          static void anpro_server_deinit_connection(ANPRO_Connection *con);
     72          static void anpro_server_handle_new_connection(ANPRO_TCP_Server *server, u8_t from_flash_prog_port);
     73          static s32_t anpro_server_handle_rx_event(ANPRO_Connection *con);
     74          static s32_t anpro_server_handle_tx_event(ANPRO_Connection *con);
     75          static void anpro_server_do_pre_select(ANPRO_TCP_Server *server, fd_set *rset, fd_set *wset, s32_t *maxfd);
     76          static void anpro_server_check_rxtx_set(ANPRO_Connection *con, fd_set *rset, fd_set *wset);
     77          static void anpro_server_do_post_select(ANPRO_TCP_Server *server, fd_set *rset, fd_set *wset);
     78          static void anpro_server_thread(void *arg);
     79          static void anpro_init_message_q(ANPRO_TCP_Server *server);
     80          static void anpro_handle_message_q(ANPRO_TCP_Server *server);
     81          static void anpro_init_timer(ANPRO_TCP_Server *server);
     82          static void anpro_tx_timer_callback(SGTimerElem *te);
     83          static void anpro_fill_client_station_info(ANPRO_Connection *con, struct sockaddr_in *cli_addr);
     84          static void anpro_fill_flash_prog_station_info(ANPRO_Connection *con, struct sockaddr_in *cli_addr);
     85          static void anpro_server_tx_to(ANPRO_Connection *con, u8_t *buf, s32_t len);
     86          static void anpro_server_tx_broadcast(ANPRO_TCP_Server *server, u8_t *buf, s32_t len);
     87          static void anpro_server_handle_debug(ANPRO_TCP_Server *server);
     88          
     89          static inline ANPRO_Connection* anpro10_route_message(ANPRO_TCP_Server *server, u8_t rx_addr, u8_t rx_id, u8_t *is_broadcast);
     90          static inline u8_t anpro10_is_broadcast_dest(u8_t rx_addr, u8_t rx_id);
     91          
     92          static void __on_anpro10_tx_req(ANPRO_TCP_Server *server, u8_t *msg, s32_t len, u8_t is_urgent_msg);
     93          static void __on_anpro10_tx_req_normal(ANPRO_TCP_Server *server, u8_t *msg, s32_t len, u8_t is_urgent_msg);
     94          static s32_t __on_rx_anpro10_message(ANPRO10_Reader *con, u8_t *msg, s32_t len);
     95          
     96          static void anpro_server_reinit_udp(SGTimerElem *te);
     97          static void anpro_server_init_udp(ANPRO_TCP_Server *server);
     98          static void anpro_server_put_udp_to_wait_state(ANPRO_TCP_Server *server);
     99          static void anpro_server_clear_connection(ANPRO_TCP_Server *server, u8_t device_addr, u8_t device_id);
    100          
    101          ////////////////////////////////////////////////////////////////////////////////
    102          //
    103          // module globals
    104          //
    105          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    106          TSNUart   fake_uart_port_for_tcp = TSNUart();
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   ........           LDR      R0,??DataTable10  ;; fake_uart_port_for_tcp
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   ........           _BLF     ??TSNUart,??TSNUart??rA
   \   0000000C   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000010   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000014   0040BDE8           POP      {LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   0000001C   ........           DC32     ?_0

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     fake_uart_port_for_tcp:
   \   00000000                      DS8 224
    107          
    108          ////////////////////////////////////////////////////////////////////////////////
    109          //
    110          // utilities
    111          //
    112          ////////////////////////////////////////////////////////////////////////////////
    113          static void
    114          anpro_fill_client_station_info(ANPRO_Connection *con, struct sockaddr_in *cli_addr) {
    115              con->client_addr  = ntohl(cli_addr->sin_addr.s_addr);
    116              con->client_port  = ntohs(cli_addr->sin_port);
    117          
    118              get_anpro_device_id_addr_from_ip_addr(con->client_addr, &con->device_id, &con->device_addr);
    119          }
    120          
    121          static void
    122          anpro_fill_flash_prog_station_info(ANPRO_Connection *con, struct sockaddr_in *cli_addr) {
    123              con->client_addr  = ntohl(cli_addr->sin_addr.s_addr);
    124              con->client_port  = ntohs(cli_addr->sin_port);
    125          
    126              // dirty but clean. what an oxymoron!
    127              con->device_addr = (u8_t)(con->client_addr & 0xff);
    128              con->device_id = DEVICE_PC_FLASH_PROG;
    129          }
    130          
    131          ////////////////////////////////////////////////////////////////////////////////
    132          //
    133          // new connection management
    134          //
    135          ////////////////////////////////////////////////////////////////////////////////
    136          static void
    137          anpro_server_clear_connection(ANPRO_TCP_Server *server, u8_t device_addr, u8_t device_id) {
    138              ANPRO_Connection    * pos,
    139                  *n;
    140              list_for_each_entry_safe(pos, n, &server->anpro_conns, con_list, ANPRO_Connection) {
    141                  if ( pos->device_id == device_id && pos->device_addr == device_addr ) {
    142                      anpro_server_deinit_connection(pos);
    143                  }
    144              }
    145          }
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          static void
    148          anpro_server_init_new_connection(ANPRO_TCP_Server *server, s32_t newsd, struct sockaddr_in *cli_addr, u8_t from_flash_prog_port) {
   \                     ??anpro_server_init_new_connection:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0280A0E1           MOV      R8,R2
   \   00000010   0390A0E1           MOV      R9,R3
    149              ANPRO_Connection *con;
    150          
    151              // alloc client connection for session management
    152              con = (ANPRO_Connection *)malloc(sizeof(ANPRO_Connection));
   \   00000014   5800A0E3           MOV      R0,#+88
   \   00000018   400C80E3           ORR      R0,R0,#0x4000
   \   0000001C   ........           _BLF     __data_malloc,??__data_malloc??rA
   \   00000020   0050B0E1           MOVS     R5,R0
    153              if ( con == NULL ) {
   \   00000024   0200001A           BNE      ??anpro_server_init_new_connection_1
    154                  close(newsd);
   \                     ??anpro_server_init_new_connection_2:
   \   00000028   0700A0E1           MOV      R0,R7
   \   0000002C   ........           _BLF     lwip_close,??lwip_close??rA
    155                  return;
   \   00000030   4C0000EA           B        ??anpro_server_init_new_connection_3
    156              }
   \                     ??anpro_server_init_new_connection_1:
   \   00000034   5000A0E3           MOV      R0,#+80
   \   00000038   400C80E3           ORR      R0,R0,#0x4000
   \   0000003C   056080E0           ADD      R6,R0,R5
   \   00000040   0000A0E3           MOV      R0,#+0
    157          
    158              con->start_time = time(NULL);
   \   00000044   ........           _BLF     time,??time??rA
   \   00000048   040086E5           STR      R0,[R6, #+4]
    159          
    160              con->sd   = newsd;
   \   0000004C   087085E5           STR      R7,[R5, #+8]
    161          
    162              // init tx circular buffer
    163              if ( init_circ_buffer(&con->tx_buffer, ANPRO_TCP_TX_BUFFER_SIZE) != 0 ) {
   \   00000050   401CA0E3           MOV      R1,#+16384
   \   00000054   0C0085E2           ADD      R0,R5,#+12
   \   00000058   ........           _BLF     init_circ_buffer,??init_circ_buffer??rA
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0200000A           BEQ      ??anpro_server_init_new_connection_4
    164                  free(con);
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     __data_free,??__data_free??rA
    165                  close(newsd);
   \   0000006C   EDFFFFEA           B        ??anpro_server_init_new_connection_2
    166                  return;
    167              }
    168          
    169              // initialize tx timer for tx timeout
    170              init_timer_elem(&con->tx_timer);
   \                     ??anpro_server_init_new_connection_4:
   \   00000070   200085E2           ADD      R0,R5,#+32
   \   00000074   ........           _BLF     init_timer_elem,??init_timer_elem??rA
    171              con->tx_timer.cb    = anpro_tx_timer_callback;
   \   00000078   F0009FE5           LDR      R0,??anpro_server_init_new_connection_5  ;; ??anpro_tx_timer_callback
   \   0000007C   280085E5           STR      R0,[R5, #+40]
    172          
    173              // adjust socket options for the newly connected socket
    174              anpro_adjust_client_socket(con->sd);
   \   00000080   080095E5           LDR      R0,[R5, #+8]
   \   00000084   ........           _BLF     ??anpro_adjust_client_socket,??anpro_adjust_client_socket??rA
    175          
    176              con->server = server;
   \   00000088   344085E5           STR      R4,[R5, #+52]
    177          
    178              if ( from_flash_prog_port ) {
   \   0000008C   040098E5           LDR      R0,[R8, #+4]
   \   00000090   000059E3           CMP      R9,#+0
   \   00000094   0900000A           BEQ      ??anpro_server_init_new_connection_6
    179                  anpro_fill_flash_prog_station_info(con, cli_addr);
   \   00000098   ........           _BLF     lwip_ntohl,??lwip_ntohl??rA
   \   0000009C   380085E5           STR      R0,[R5, #+56]
   \   000000A0   B200D8E1           LDRH     R0,[R8, #+2]
   \   000000A4   ........           _BLF     lwip_ntohs,??lwip_ntohs??rA
   \   000000A8   BC03C5E1           STRH     R0,[R5, #+60]
   \   000000AC   380095E5           LDR      R0,[R5, #+56]
   \   000000B0   3F00C5E5           STRB     R0,[R5, #+63]
   \   000000B4   5500A0E3           MOV      R0,#+85
   \   000000B8   3E00C5E5           STRB     R0,[R5, #+62]
   \   000000BC   080000EA           B        ??anpro_server_init_new_connection_7
    180              } else {
    181                  anpro_fill_client_station_info(con, cli_addr);
   \                     ??anpro_server_init_new_connection_6:
   \   000000C0   ........           _BLF     lwip_ntohl,??lwip_ntohl??rA
   \   000000C4   380085E5           STR      R0,[R5, #+56]
   \   000000C8   B200D8E1           LDRH     R0,[R8, #+2]
   \   000000CC   ........           _BLF     lwip_ntohs,??lwip_ntohs??rA
   \   000000D0   BC03C5E1           STRH     R0,[R5, #+60]
   \   000000D4   380095E5           LDR      R0,[R5, #+56]
   \   000000D8   3F2085E2           ADD      R2,R5,#+63
   \   000000DC   3E1085E2           ADD      R1,R5,#+62
   \   000000E0   ........           _BLF     ??get_anpro_device_id_addr_from_ip_addr,??get_anpro_device_id_addr_from_ip_addr??rA
    182              }
    183          
    184              anpro10_reader_init(&con->anp10_reader, __on_rx_anpro10_message);
   \                     ??anpro_server_init_new_connection_7:
   \   000000E4   ........           LDR      R1,??DataTable5  ;; ??__on_rx_anpro10_message
   \   000000E8   400085E2           ADD      R0,R5,#+64
   \   000000EC   ........           _BLF     ??anpro10_reader_init,??anpro10_reader_init??rA
    185          
    186              con->tx_pending = FALSE;
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   0000C6E5           STRB     R0,[R6, #+0]
    187              con->system_match = FALSE;
   \   000000F8   0100C6E5           STRB     R0,[R6, #+1]
    188          
    189              // clear any previous connection that might be dangling
    190              anpro_server_clear_connection(server, con->device_addr, con->device_id);
   \   000000FC   000094E5           LDR      R0,[R4, #+0]
   \   00000100   3E60D5E5           LDRB     R6,[R5, #+62]
   \   00000104   3F70D5E5           LDRB     R7,[R5, #+63]
   \   00000108   008090E5           LDR      R8,[R0, #+0]
   \   0000010C   040050E1           CMP      R0,R4
   \   00000110   0900000A           BEQ      ??anpro_server_init_new_connection_8
   \                     ??anpro_server_init_new_connection_9:
   \   00000114   3E10D0E5           LDRB     R1,[R0, #+62]
   \   00000118   060051E1           CMP      R1,R6
   \   0000011C   3F10D005           LDRBEQ   R1,[R0, #+63]
   \   00000120   07005101           CMPEQ    R1,R7
   \   00000124   0000001A           BNE      ??anpro_server_init_new_connection_10
   \   00000128   ........           BL       ??anpro_server_deinit_connection
   \                     ??anpro_server_init_new_connection_10:
   \   0000012C   0800A0E1           MOV      R0,R8
   \   00000130   008098E5           LDR      R8,[R8, #+0]
   \   00000134   040050E1           CMP      R0,R4
   \   00000138   F5FFFF1A           BNE      ??anpro_server_init_new_connection_9
    191          
    192              // finally add the new connection for internal managemnet
    193              INIT_LIST_HEAD(&con->con_list);
   \                     ??anpro_server_init_new_connection_8:
   \   0000013C   005085E5           STR      R5,[R5, #+0]
   \   00000140   045085E5           STR      R5,[R5, #+4]
    194              list_add_tail(&con->con_list, &server->anpro_conns);
   \   00000144   040094E5           LDR      R0,[R4, #+4]
   \   00000148   045084E5           STR      R5,[R4, #+4]
   \   0000014C   004085E5           STR      R4,[R5, #+0]
   \   00000150   040085E5           STR      R0,[R5, #+4]
   \   00000154   005080E5           STR      R5,[R0, #+0]
    195          
    196              //
    197              // for per connection version control the moment we got a new connection
    198              // we send out TCU version info to the client
    199              //
    200              ANPRO10_SendSysInfo(&fake_uart_port_for_tcp, con->device_addr, con->device_id);
   \   00000158   3E20D5E5           LDRB     R2,[R5, #+62]
   \   0000015C   3F10D5E5           LDRB     R1,[R5, #+63]
   \   00000160   ........           LDR      R0,??DataTable10  ;; fake_uart_port_for_tcp
   \   00000164   ........           _BLF     ??ANPRO10_SendSysInfo,??ANPRO10_SendSysInfo??rA
    201          }
   \                     ??anpro_server_init_new_connection_3:
   \   00000168   F043BDE8           POP      {R4-R9,LR}
   \   0000016C   1EFF2FE1           BX       LR               ;; return
   \                     ??anpro_server_init_new_connection_5:
   \   00000170   ........           DC32     ??anpro_tx_timer_callback
    202          

   \                                 In segment CODE, align 4, keep-with-next
    203          static void
    204          anpro_server_deinit_connection(ANPRO_Connection *con) {
   \                     ??anpro_server_deinit_connection:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    205              list_del_init(&con->con_list);
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   041094E5           LDR      R1,[R4, #+4]
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   000081E5           STR      R0,[R1, #+0]
   \   00000018   004084E5           STR      R4,[R4, #+0]
   \   0000001C   044084E5           STR      R4,[R4, #+4]
    206          
    207              deinit_circ_buffer(&con->tx_buffer);
   \   00000020   0C0084E2           ADD      R0,R4,#+12
   \   00000024   ........           _BLF     deinit_circ_buffer,??deinit_circ_buffer??rA
    208          
    209              if ( is_timer_running(&con->tx_timer) ) {
   \   00000028   201084E2           ADD      R1,R4,#+32
   \   0000002C   002091E5           LDR      R2,[R1, #+0]
   \   00000030   010052E1           CMP      R2,R1
   \   00000034   04209105           LDREQ    R2,[R1, #+4]
   \   00000038   01005201           CMPEQ    R2,R1
   \   0000003C   0400000A           BEQ      ??anpro_server_deinit_connection_1
    210                  del_timer(&con->server->timer_mgr, &con->tx_timer);
   \   00000040   342094E5           LDR      R2,[R4, #+52]
   \   00000044   9C00A0E3           MOV      R0,#+156
   \   00000048   7E0C80E3           ORR      R0,R0,#0x7E00
   \   0000004C   020080E0           ADD      R0,R0,R2
   \   00000050   ........           _BLF     del_timer,??del_timer??rA
    211              }
    212          
    213              close(con->sd);
   \                     ??anpro_server_deinit_connection_1:
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   ........           _BLF     lwip_close,??lwip_close??rA
    214              free(con);
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     __data_free,??__data_free??rA
    215          }
   \   00000064   1040BDE8           POP      {R4,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    216          
    217          static void
    218          anpro_server_handle_new_connection(ANPRO_TCP_Server *server, u8_t from_flash_prog_port) {
    219              s32_t                 newsd;
    220              u32_t                 cli_addr_len;
    221              struct sockaddr_in    cli_addr;
    222          
    223              cli_addr_len = sizeof(cli_addr);
    224          
    225              if ( from_flash_prog_port ) {
    226                  newsd = accept(server->flash_fd,  (struct sockaddr *)&cli_addr, &cli_addr_len);
    227              } else {
    228                  newsd = accept(server->listen_fd,  (struct sockaddr *)&cli_addr, &cli_addr_len);
    229              }
    230          
    231              if ( newsd < 0 ) {
    232                  // just return. wish I could print out some kind of debug message here
    233                  return;
    234              }
    235          
    236              anpro_server_init_new_connection(server, newsd, &cli_addr, from_flash_prog_port);
    237          }
    238          
    239          ////////////////////////////////////////////////////////////////////////////////
    240          //
    241          // socket TX buffer overflow timeout management
    242          //
    243          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    244          static void
    245          anpro_tx_timer_callback(SGTimerElem *te) {
   \                     ??anpro_tx_timer_callback:
   \   00000000   00402DE9           PUSH     {LR}
    246              // TCP tx buffer situation hasn't gotten better within
    247              // the timeout.
    248              // just close the socket.
    249              ANPRO_Connection *con = container_of(te, ANPRO_Connection, tx_timer);
    250          
    251              anpro_server_deinit_connection(con);
   \   00000004   200040E2           SUB      R0,R0,#+32
   \   00000008   ........           BL       ??anpro_server_deinit_connection
    252          }
   \   0000000C   0040BDE8           POP      {LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return
    253          
    254          ////////////////////////////////////////////////////////////////////////////////
    255          //
    256          // socket rx/tx
    257          //
    258          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    259          static s32_t
    260          anpro_server_handle_rx_event(ANPRO_Connection *con) {
   \                     ??anpro_server_handle_rx_event:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   \   00000008   0040A0E1           MOV      R4,R0
    261              u8_t    buffer[128];
    262              s32_t   len;
    263          
    264              len = read(con->sd, (s8_t *)buffer, 128);
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   8020A0E3           MOV      R2,#+128
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   ........           _BLF     lwip_read,??lwip_read??rA
    265              if ( len <= 0 ) {
   \   0000001C   010050E3           CMP      R0,#+1
   \   00000020   050000AA           BGE      ??anpro_server_handle_rx_event_1
    266                  // connection error or close
    267                  anpro_server_deinit_connection(con);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??anpro_server_deinit_connection
    268                  return -1;
   \   0000002C   80D08DE2           ADD      SP,SP,#+128
   \   00000030   1040BDE8           POP      {R4,LR}
   \   00000034   0000E0E3           MVN      R0,#+0
   \   00000038   1EFF2FE1           BX       LR
    269              }
    270          
    271              anpro10_reader_feed(&con->anp10_reader, buffer, len);
   \                     ??anpro_server_handle_rx_event_1:
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   400084E2           ADD      R0,R4,#+64
   \   00000048   ........           _BLF     ??anpro10_reader_feed,??anpro10_reader_feed??rA
    272              return 0;
   \   0000004C   80D08DE2           ADD      SP,SP,#+128
   \   00000050   1040BDE8           POP      {R4,LR}
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   1EFF2FE1           BX       LR               ;; return
    273          }
    274          

   \                                 In segment CODE, align 4, keep-with-next
    275          static s32_t
    276          anpro_server_handle_tx_event(ANPRO_Connection *con) {
   \                     ??anpro_server_handle_tx_event:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   \   00000008   0040A0E1           MOV      R4,R0
    277              u8_t    buf[128];
    278              s32_t   circ_data_size,
    279                  len,
    280                  ret;
    281          
    282              del_timer(&con->server->timer_mgr, &con->tx_timer);
   \   0000000C   085084E2           ADD      R5,R4,#+8
   \   00000010   2C0095E5           LDR      R0,[R5, #+44]
   \   00000014   9C60A0E3           MOV      R6,#+156
   \   00000018   7E6C86E3           ORR      R6,R6,#0x7E00
   \   0000001C   201084E2           ADD      R1,R4,#+32
   \   00000020   000086E0           ADD      R0,R6,R0
   \   00000024   ........           _BLF     del_timer,??del_timer??rA
   \   00000028   5000A0E3           MOV      R0,#+80
   \   0000002C   400C80E3           ORR      R0,R0,#0x4000
   \   00000030   047080E0           ADD      R7,R0,R4
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0000C7E5           STRB     R0,[R7, #+0]
   \   0000003C   020000EA           B        ??anpro_server_handle_tx_event_1
    283              con->tx_pending = FALSE;
    284          
    285              while ( (circ_data_size = get_circ_buffer_data_size(&con->tx_buffer)) != 0 ) {
    286                  len = circ_data_size < 128 ? circ_data_size : 128;
    287                  peek_circ_buffer(&con->tx_buffer, (char *)buf, len);
    288          
    289                  ret = write(con->sd, buf, len);
    290                  if ( ret < 0 ) {
    291                      if ( !is_socket_error_would_block(con->sd) ) {
    292                          anpro_server_deinit_connection(con);
    293                          return -1;
    294                      }
    295          
    296                      con->tx_pending = TRUE;
    297                      add_timer(&con->server->timer_mgr, &con->tx_timer, ANPRO_TCP_TX_TIMEOUT);
    298                      return 0;
    299                  }
    300          
    301                  get_circ_buffer_no_copy(&con->tx_buffer, ret);
   \                     ??anpro_server_handle_tx_event_2:
   \   00000040   0010A0E1           MOV      R1,R0
   \   00000044   0C0084E2           ADD      R0,R4,#+12
   \   00000048   ........           _BLF     get_circ_buffer_no_copy,??get_circ_buffer_no_copy??rA
   \                     ??anpro_server_handle_tx_event_1:
   \   0000004C   0C8095E5           LDR      R8,[R5, #+12]
   \   00000050   000058E3           CMP      R8,#+0
   \   00000054   1D00000A           BEQ      ??anpro_server_handle_tx_event_3
   \   00000058   800058E3           CMP      R8,#+128
   \   0000005C   8080A0A3           MOVGE    R8,#+128
   \   00000060   0820A0E1           MOV      R2,R8
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0C0084E2           ADD      R0,R4,#+12
   \   0000006C   ........           _BLF     peek_circ_buffer,??peek_circ_buffer??rA
   \   00000070   000095E5           LDR      R0,[R5, #+0]
   \   00000074   0820A0E1           MOV      R2,R8
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   ........           _BLF     lwip_write,??lwip_write??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   EDFFFF5A           BPL      ??anpro_server_handle_tx_event_2
   \   00000088   000095E5           LDR      R0,[R5, #+0]
   \   0000008C   ........           _BLF     ??is_socket_error_would_block,??is_socket_error_would_block??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0500001A           BNE      ??anpro_server_handle_tx_event_4
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ??anpro_server_deinit_connection
   \   000000A0   80D08DE2           ADD      SP,SP,#+128
   \   000000A4   F041BDE8           POP      {R4-R8,LR}
   \   000000A8   0000E0E3           MVN      R0,#+0
   \   000000AC   1EFF2FE1           BX       LR
   \                     ??anpro_server_handle_tx_event_4:
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   0000C7E5           STRB     R0,[R7, #+0]
   \   000000B8   2C0095E5           LDR      R0,[R5, #+44]
   \   000000BC   9820A0E3           MOV      R2,#+152
   \   000000C0   E82D82E3           ORR      R2,R2,#0x3A00
   \   000000C4   201084E2           ADD      R1,R4,#+32
   \   000000C8   000086E0           ADD      R0,R6,R0
   \   000000CC   ........           _BLF     add_timer,??add_timer??rA
    302              }
    303              return 0;
   \                     ??anpro_server_handle_tx_event_3:
   \   000000D0   80D08DE2           ADD      SP,SP,#+128
   \   000000D4   F041BDE8           POP      {R4-R8,LR}
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   1EFF2FE1           BX       LR               ;; return
    304          }
    305          
    306          static void
    307          anpro_server_tx_to(ANPRO_Connection *con, u8_t *buf, s32_t len) {
    308              s32_t nwritten = 0,
    309                  ret;
    310          
    311              if ( con->tx_pending )
    312              //if(get_circ_buffer_data_size(&con->tx_buffer) != 0)
    313              {
    314                  // something is already queued up
    315                  if ( put_circ_buffer(&con->tx_buffer, (char *)buf, len) == -1 ) {
    316                      // XXX circular buffer overflow. count the stat for better debugging
    317                  }
    318                  return;
    319              }
    320          
    321              while ( nwritten < len ) {
    322                  ret = write(con->sd, &buf[nwritten], len - nwritten);
    323                  if ( ret < 0 ) {
    324                      if ( !is_socket_error_would_block(con->sd) ) {
    325                          anpro_server_deinit_connection(con);
    326                          return;
    327                      }
    328          
    329                      con->tx_pending = TRUE;
    330          
    331                      put_circ_buffer(&con->tx_buffer, (char *)&buf[nwritten], len - nwritten);
    332                      add_timer(&con->server->timer_mgr, &con->tx_timer, ANPRO_TCP_TX_TIMEOUT);
    333                      return;
    334                  }
    335                  nwritten += ret;
    336              }
    337          }
    338          

   \                                 In segment CODE, align 4, keep-with-next
    339          static void
    340          anpro_server_tx_broadcast(ANPRO_TCP_Server *server, u8_t *buf, s32_t len) {
   \                     ??anpro_server_tx_broadcast:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    341              ANPRO_Connection    * pos,
    342                  *n;
    343              //
    344              // XXX be careful. connection might be deleted during TX.
    345              //
    346              list_for_each_entry_safe(pos, n, &server->anpro_conns, con_list, ANPRO_Connection) {
   \   00000004   006090E5           LDR      R6,[R0, #+0]
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   007096E5           LDR      R7,[R6, #+0]
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   000056E1           CMP      R6,R0
   \   00000018   3000000A           BEQ      ??anpro_server_tx_broadcast_1
    347                  anpro_server_tx_to(pos, buf, len);
   \                     ??anpro_server_tx_broadcast_2:
   \   0000001C   5000A0E3           MOV      R0,#+80
   \   00000020   400C80E3           ORR      R0,R0,#0x4000
   \   00000024   069080E0           ADD      R9,R0,R6
   \   00000028   0000D9E5           LDRB     R0,[R9, #+0]
   \   0000002C   0080A0E3           MOV      R8,#+0
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0500000A           BEQ      ??anpro_server_tx_broadcast_3
   \   00000038   0520A0E1           MOV      R2,R5
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0C0086E2           ADD      R0,R6,#+12
   \   00000044   ........           _BLF     put_circ_buffer,??put_circ_buffer??rA
   \   00000048   1F0000EA           B        ??anpro_server_tx_broadcast_4
   \                     ??anpro_server_tx_broadcast_5:
   \   0000004C   088080E0           ADD      R8,R0,R8
   \                     ??anpro_server_tx_broadcast_3:
   \   00000050   050058E1           CMP      R8,R5
   \   00000054   1C0000AA           BGE      ??anpro_server_tx_broadcast_4
   \   00000058   08A086E2           ADD      R10,R6,#+8
   \   0000005C   00009AE5           LDR      R0,[R10, #+0]
   \   00000060   08B045E0           SUB      R11,R5,R8
   \   00000064   0B20A0E1           MOV      R2,R11
   \   00000068   041088E0           ADD      R1,R8,R4
   \   0000006C   ........           _BLF     lwip_write,??lwip_write??rA
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   F4FFFF5A           BPL      ??anpro_server_tx_broadcast_5
   \   00000078   00009AE5           LDR      R0,[R10, #+0]
   \   0000007C   ........           _BLF     ??is_socket_error_would_block,??is_socket_error_would_block??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0200001A           BNE      ??anpro_server_tx_broadcast_6
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           BL       ??anpro_server_deinit_connection
   \   00000090   0D0000EA           B        ??anpro_server_tx_broadcast_4
   \                     ??anpro_server_tx_broadcast_6:
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   0000C9E5           STRB     R0,[R9, #+0]
   \   0000009C   0B20A0E1           MOV      R2,R11
   \   000000A0   041088E0           ADD      R1,R8,R4
   \   000000A4   0C0086E2           ADD      R0,R6,#+12
   \   000000A8   ........           _BLF     put_circ_buffer,??put_circ_buffer??rA
   \   000000AC   2C309AE5           LDR      R3,[R10, #+44]
   \   000000B0   9820A0E3           MOV      R2,#+152
   \   000000B4   E82D82E3           ORR      R2,R2,#0x3A00
   \   000000B8   201086E2           ADD      R1,R6,#+32
   \   000000BC   9C00A0E3           MOV      R0,#+156
   \   000000C0   7E0C80E3           ORR      R0,R0,#0x7E00
   \   000000C4   030080E0           ADD      R0,R0,R3
   \   000000C8   ........           _BLF     add_timer,??add_timer??rA
    348              }
   \                     ??anpro_server_tx_broadcast_4:
   \   000000CC   00009DE5           LDR      R0,[SP, #+0]
   \   000000D0   0760A0E1           MOV      R6,R7
   \   000000D4   007097E5           LDR      R7,[R7, #+0]
   \   000000D8   000056E1           CMP      R6,R0
   \   000000DC   CEFFFF1A           BNE      ??anpro_server_tx_broadcast_2
    349          }
   \                     ??anpro_server_tx_broadcast_1:
   \   000000E0   F14FBDE8           POP      {R0,R4-R11,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return
    350          
    351          ////////////////////////////////////////////////////////////////////////////////
    352          //
    353          // client session management
    354          //
    355          ////////////////////////////////////////////////////////////////////////////////
    356          static void
    357          anpro_server_do_pre_select(ANPRO_TCP_Server *server, fd_set *rset, fd_set *wset, s32_t *maxfd) {
    358              ANPRO_Connection *con;
    359          
    360              if ( server->use_udp_bcast_for_normal_msg && server->udp_state == ANPRO_TCP_Server::ANPRO_UDP_State_OK ) {
    361                  anpro_select_add_set(server->udp_sock, rset, maxfd);
    362              }
    363          
    364              list_for_each_entry(con, &server->anpro_conns, con_list, ANPRO_Connection) {
    365                  anpro_select_add_set(con->sd, rset, maxfd);
    366          
    367                  if ( con->tx_pending ) {
    368                      anpro_select_add_set(con->sd, wset, maxfd);
    369                  }
    370              }
    371          }
    372          
    373          static void
    374          anpro_server_check_rxtx_set(ANPRO_Connection *con, fd_set *rset, fd_set *wset) {
    375              if ( FD_ISSET(con->sd, rset) && anpro_server_handle_rx_event(con) != 0 ) {
    376                  // connection closed.
    377                  return;
    378              }
    379          
    380              if ( con->tx_pending && FD_ISSET(con->sd, wset) && anpro_server_handle_tx_event(con) != 0 ) {
    381                  // connection closed.
    382                  return;
    383              }
    384          }
    385          

   \                                 In segment CODE, align 4, keep-with-next
    386          static void
    387          anpro_server_do_post_select(ANPRO_TCP_Server *server, fd_set *rset, fd_set *wset) {
   \                     ??anpro_server_do_post_select:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    388              ANPRO_Connection *con;
    389              struct list_head  tmp;
    390          
    391              //
    392              // be careful with the following logic.
    393              // connection can be removed from the list while
    394              // handling rx/tx event.
    395              // -hkim-
    396              INIT_LIST_HEAD(&tmp);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   00108DE5           STR      R1,[SP, #+0]
   \   00000018   04108DE5           STR      R1,[SP, #+4]
    397              list_cut_position(&tmp, &server->anpro_conns, server->anpro_conns.prev);
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   0260A0E1           MOV      R6,R2
   \   00000028   040051E1           CMP      R1,R4
   \   0000002C   04005011           CMPNE    R0,R4
   \   00000030   2F00000A           BEQ      ??anpro_server_do_post_select_1
   \   00000034   002090E5           LDR      R2,[R0, #+0]
   \   00000038   00108DE5           STR      R1,[SP, #+0]
   \   0000003C   0D30A0E1           MOV      R3,SP
   \   00000040   043081E5           STR      R3,[R1, #+4]
   \   00000044   04008DE5           STR      R0,[SP, #+4]
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   002084E5           STR      R2,[R4, #+0]
   \   00000054   044082E5           STR      R4,[R2, #+4]
   \   00000058   250000EA           B        ??anpro_server_do_post_select_1
    398              while ( !list_empty(&tmp) ) {
    399                  con = list_first_entry(&tmp, ANPRO_Connection, con_list);
   \                     ??anpro_server_do_post_select_2:
   \   0000005C   0080A0E1           MOV      R8,R0
    400                  list_del(&con->con_list);
   \   00000060   000098E5           LDR      R0,[R8, #+0]
   \   00000064   041098E5           LDR      R1,[R8, #+4]
   \   00000068   041080E5           STR      R1,[R0, #+4]
   \   0000006C   000081E5           STR      R0,[R1, #+0]
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   000088E5           STR      R0,[R8, #+0]
   \   00000078   040088E5           STR      R0,[R8, #+4]
    401                  list_add_tail(&con->con_list, &server->anpro_conns);
   \   0000007C   040094E5           LDR      R0,[R4, #+4]
   \   00000080   048084E5           STR      R8,[R4, #+4]
   \   00000084   004088E5           STR      R4,[R8, #+0]
   \   00000088   040088E5           STR      R0,[R8, #+4]
   \   0000008C   008080E5           STR      R8,[R0, #+0]
    402          
    403                  anpro_server_check_rxtx_set(con, rset, wset);
   \   00000090   080098E5           LDR      R0,[R8, #+8]
   \   00000094   4011A0E1           ASR      R1,R0,#+2
   \   00000098   A11E80E0           ADD      R1,R0,R1, LSR #+29
   \   0000009C   C111D5E7           LDRB     R1,[R5, +R1, ASR #+3]
   \   000000A0   070000E2           AND      R0,R0,#0x7
   \   000000A4   170011E1           TST      R1,R7, LSL R0
   \   000000A8   0300000A           BEQ      ??anpro_server_do_post_select_3
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   ........           BL       ??anpro_server_handle_rx_event
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0D00001A           BNE      ??anpro_server_do_post_select_1
   \                     ??anpro_server_do_post_select_3:
   \   000000BC   5000A0E3           MOV      R0,#+80
   \   000000C0   400C80E3           ORR      R0,R0,#0x4000
   \   000000C4   0800D0E7           LDRB     R0,[R0, +R8]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0800000A           BEQ      ??anpro_server_do_post_select_1
   \   000000D0   080098E5           LDR      R0,[R8, #+8]
   \   000000D4   4011A0E1           ASR      R1,R0,#+2
   \   000000D8   A11E80E0           ADD      R1,R0,R1, LSR #+29
   \   000000DC   C111D6E7           LDRB     R1,[R6, +R1, ASR #+3]
   \   000000E0   070000E2           AND      R0,R0,#0x7
   \   000000E4   170011E1           TST      R1,R7, LSL R0
   \   000000E8   0100000A           BEQ      ??anpro_server_do_post_select_1
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   ........           BL       ??anpro_server_handle_tx_event
    404              }
   \                     ??anpro_server_do_post_select_1:
   \   000000F4   00009DE5           LDR      R0,[SP, #+0]
   \   000000F8   0170A0E3           MOV      R7,#+1
   \   000000FC   0D10A0E1           MOV      R1,SP
   \   00000100   010050E1           CMP      R0,R1
   \   00000104   D4FFFF1A           BNE      ??anpro_server_do_post_select_2
    405          
    406              if ( server->use_udp_bcast_for_normal_msg && server->udp_state == ANPRO_TCP_Server::ANPRO_UDP_State_OK ) {
   \   00000108   C900A0E3           MOV      R0,#+201
   \   0000010C   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000110   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   1100000A           BEQ      ??anpro_server_do_post_select_4
   \   0000011C   F400A0E3           MOV      R0,#+244
   \   00000120   BE0C80E3           ORR      R0,R0,#0xBE00
   \   00000124   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0C00001A           BNE      ??anpro_server_do_post_select_4
   \   00000130   CC00A0E3           MOV      R0,#+204
   \   00000134   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000138   040090E7           LDR      R0,[R0, +R4]
   \   0000013C   4011A0E1           ASR      R1,R0,#+2
   \   00000140   A11E80E0           ADD      R1,R0,R1, LSR #+29
   \   00000144   C111D5E7           LDRB     R1,[R5, +R1, ASR #+3]
   \   00000148   072000E2           AND      R2,R0,#0x7
   \   0000014C   170211E1           TST      R1,R7, LSL R2
   \   00000150   0300000A           BEQ      ??anpro_server_do_post_select_4
    407                  if ( FD_ISSET(server->udp_sock, rset) ) {
    408                      anpro10_rx_udp_message(server->udp_sock, &server->anp10_udp_reader);
   \   00000154   D010A0E3           MOV      R1,#+208
   \   00000158   7E1C81E3           ORR      R1,R1,#0x7E00
   \   0000015C   041081E0           ADD      R1,R1,R4
   \   00000160   ........           _BLF     ??anpro10_rx_udp_message,??anpro10_rx_udp_message??rA
    409                  }
    410              }
    411          }
   \                     ??anpro_server_do_post_select_4:
   \   00000164   F341BDE8           POP      {R0,R1,R4-R8,LR}
   \   00000168   1EFF2FE1           BX       LR               ;; return
    412          
    413          ////////////////////////////////////////////////////////////////////////////////
    414          //
    415          // anpro udp initialization
    416          //
    417          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    418          static void
    419          anpro_server_reinit_udp(SGTimerElem *te) {
   \                     ??anpro_server_reinit_udp:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    420              ANPRO_TCP_Server *server = container_of(te, ANPRO_TCP_Server, udp_wait_timer);
    421          
    422              anpro_server_init_udp(server);
   \   00000004   DF10E0E3           MVN      R1,#+223
   \   00000008   BE1CC1E3           BIC      R1,R1,#0xBE00
   \   0000000C   004081E0           ADD      R4,R1,R0
   \   00000010   CA00A0E3           MOV      R0,#+202
   \   00000014   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000018   B40090E1           LDRH     R0,[R0, +R4]
   \   0000001C   ........           _BLF     ??init_anpro_udp_socket,??init_anpro_udp_socket??rA
   \   00000020   CC10A0E3           MOV      R1,#+204
   \   00000024   7E1C81E3           ORR      R1,R1,#0x7E00
   \   00000028   040081E7           STR      R0,[R1, +R4]
   \   0000002C   ........           LDR      R1,??DataTable5  ;; ??__on_rx_anpro10_message
   \   00000030   D000A0E3           MOV      R0,#+208
   \   00000034   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000038   040080E0           ADD      R0,R0,R4
   \   0000003C   ........           _BLF     ??anpro10_reader_init,??anpro10_reader_init??rA
   \   00000040   E800A0E3           MOV      R0,#+232
   \   00000044   BE0C80E3           ORR      R0,R0,#0xBE00
   \   00000048   045080E0           ADD      R5,R0,R4
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   0C00C5E5           STRB     R0,[R5, #+12]
   \   00000054   E000A0E3           MOV      R0,#+224
   \   00000058   BE0C80E3           ORR      R0,R0,#0xBE00
   \   0000005C   040080E0           ADD      R0,R0,R4
   \   00000060   ........           _BLF     init_timer_elem,??init_timer_elem??rA
   \   00000064   ........           LDR      R0,??DataTable6  ;; ??anpro_server_reinit_udp
   \   00000068   000085E5           STR      R0,[R5, #+0]
    423          }
   \   0000006C   3040BDE8           POP      {R4,R5,LR}
   \   00000070   1EFF2FE1           BX       LR               ;; return
    424          
    425          static void
    426          anpro_server_init_udp(ANPRO_TCP_Server *server) {
    427              server->udp_sock = init_anpro_udp_socket(server->udp_port_number);
    428              anpro10_reader_init(&server->anp10_udp_reader, __on_rx_anpro10_message);
    429              server->udp_state = ANPRO_TCP_Server::ANPRO_UDP_State_OK;
    430              init_timer_elem(&server->udp_wait_timer);
    431          
    432              server->udp_wait_timer.cb = anpro_server_reinit_udp;
    433          }
    434          
    435          static void
    436          anpro_server_put_udp_to_wait_state(ANPRO_TCP_Server *server) {
    437              close(server->udp_sock);
    438              server->udp_state = ANPRO_TCP_Server::ANPRO_UDP_State_Waiting;
    439              add_timer(&server->timer_mgr, &server->udp_wait_timer, ANPRO_UDP_TIMEOUT);
    440          }
    441          
    442          ////////////////////////////////////////////////////////////////////////////////
    443          //
    444          // anpro tcp main server task
    445          //
    446          ////////////////////////////////////////////////////////////////////////////////
    447          /**
    448           * @brief main TCP server task.
    449           *        It just polls socket/queue/timer event and
    450           *        executes appropriate handlers
    451           *
    452           */

   \                                 In segment CODE, align 4, keep-with-next
    453          static void 
    454          anpro_server_thread(void *arg) {
   \                     ??anpro_server_thread:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   C000A0E3           MOV      R0,#+192
   \   00000010   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000014   045080E0           ADD      R5,R0,R4
   \   00000018   B400D5E1           LDRH     R0,[R5, #+4]
    455              ANPRO_TCP_Server *server;
    456              s32_t             maxfd,
    457                  ret;
    458              fd_set            rset,
    459                  wset;
    460              struct timeval    tv;
    461          
    462              server = (ANPRO_TCP_Server *)arg;
    463              server->listen_fd = init_anpro_server_socket(server->port_number);
    464          
    465              if ( server->flash_port != 0 ) {
   \   0000001C   0060E0E3           MVN      R6,#+0
   \   00000020   ........           _BLF     ??init_anpro_server_socket,??init_anpro_server_socket??rA
   \   00000024   080084E5           STR      R0,[R4, #+8]
   \   00000028   B600D5E1           LDRH     R0,[R5, #+6]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0300000A           BEQ      ??anpro_server_thread_1
    466                  server->flash_fd  = init_anpro_server_socket(server->flash_port);
   \   00000034   B600D5E1           LDRH     R0,[R5, #+6]
   \   00000038   ........           _BLF     ??init_anpro_server_socket,??init_anpro_server_socket??rA
   \   0000003C   0C0084E5           STR      R0,[R4, #+12]
   \   00000040   000000EA           B        ??anpro_server_thread_2
    467              } else {
    468                  server->flash_fd = -1;
   \                     ??anpro_server_thread_1:
   \   00000044   0C6084E5           STR      R6,[R4, #+12]
   \                     ??anpro_server_thread_2:
   \   00000048   E800A0E3           MOV      R0,#+232
   \   0000004C   BE0C80E3           ORR      R0,R0,#0xBE00
   \   00000050   047080E0           ADD      R7,R0,R4
   \   00000054   0900D5E5           LDRB     R0,[R5, #+9]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   7600000A           BEQ      ??anpro_server_thread_3
    469              }
    470          
    471              if ( server->use_udp_bcast_for_normal_msg ) {
    472                  anpro_server_init_udp(server);
   \   00000060   BA00D5E1           LDRH     R0,[R5, #+10]
   \   00000064   ........           _BLF     ??init_anpro_udp_socket,??init_anpro_udp_socket??rA
   \   00000068   ........           LDR      R1,??DataTable5  ;; ??__on_rx_anpro10_message
   \   0000006C   0C0085E5           STR      R0,[R5, #+12]
   \   00000070   D000A0E3           MOV      R0,#+208
   \   00000074   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000078   040080E0           ADD      R0,R0,R4
   \   0000007C   ........           _BLF     ??anpro10_reader_init,??anpro10_reader_init??rA
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   0C00C7E5           STRB     R0,[R7, #+12]
   \   00000088   E000A0E3           MOV      R0,#+224
   \   0000008C   BE0C80E3           ORR      R0,R0,#0xBE00
   \   00000090   040080E0           ADD      R0,R0,R4
   \   00000094   ........           _BLF     init_timer_elem,??init_timer_elem??rA
   \   00000098   ........           LDR      R0,??DataTable6  ;; ??anpro_server_reinit_udp
   \   0000009C   000087E5           STR      R0,[R7, #+0]
   \   000000A0   650000EA           B        ??anpro_server_thread_3
    473              }
    474          
    475              for (;;) {
    476                  maxfd = 0;
    477                  FD_ZERO(&rset);
    478                  FD_ZERO(&wset);
    479          
    480                  tv.tv_sec  = 0;
    481                  tv.tv_usec = ANPRO_SERVER_SELECT_TIMEOUT;
    482          
    483                  anpro_select_add_set(server->listen_fd, &rset, &maxfd);
    484                  if ( server->flash_fd != -1 ) {
    485                      anpro_select_add_set(server->flash_fd, &rset, &maxfd);
    486                  }
    487                  anpro_select_add_set(server->queue_event,  &rset, &maxfd);
    488                  anpro_select_add_set(server->timer_tick_event, &rset, &maxfd);
    489          
    490                  anpro_server_do_pre_select(server, &rset, &wset, &maxfd);
    491          
    492                  ret = select(maxfd + 1, &rset, &wset, 0, &tv);
   \                     ??anpro_server_thread_4:
   \   000000A4   0C008DE2           ADD      R0,SP,#+12
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   08009DE5           LDR      R0,[SP, #+8]
   \   000000B0   0030A0E3           MOV      R3,#+0
   \   000000B4   06208DE2           ADD      R2,SP,#+6
   \   000000B8   04108DE2           ADD      R1,SP,#+4
   \   000000BC   010080E2           ADD      R0,R0,#+1
   \   000000C0   ........           _BLF     lwip_select,??lwip_select??rA
   \   000000C4   0080A0E1           MOV      R8,R0
   \   000000C8   F800A0E3           MOV      R0,#+248
   \   000000CC   BE0C80E3           ORR      R0,R0,#0xBE00
   \   000000D0   049080E0           ADD      R9,R0,R4
   \   000000D4   0900A0E1           MOV      R0,R9
    493          
    494                  anpro_server_handle_debug(server);
   \   000000D8   ........           _BLF     OS_EVENT_Get,??OS_EVENT_Get??rA
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   04D08DE2           ADD      SP,SP,#+4
   \   000000E4   0500000A           BEQ      ??anpro_server_thread_5
   \   000000E8   0900A0E1           MOV      R0,R9
   \   000000EC   ........           _BLF     OS_EVENT_Wait,??OS_EVENT_Wait??rA
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       ??anpro_server_debug_handler
   \   000000F8   BF0C84E2           ADD      R0,R4,#+48896
   \   000000FC   ........           _BLF     OS_EVENT_Set,??OS_EVENT_Set??rA
    495          
    496                  if ( ret <= 0 ) {
   \                     ??anpro_server_thread_5:
   \   00000100   010058E3           CMP      R8,#+1
   \   00000104   4C0000BA           BLT      ??anpro_server_thread_3
    497                      continue;
    498                  }
    499          
    500                  if ( FD_ISSET(server->timer_tick_event, &rset) ) {
   \   00000108   000095E5           LDR      R0,[R5, #+0]
   \   0000010C   002095E5           LDR      R2,[R5, #+0]
   \   00000110   4011A0E1           ASR      R1,R0,#+2
   \   00000114   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   00000118   0D10A0E1           MOV      R1,SP
   \   0000011C   C001D1E7           LDRB     R0,[R1, +R0, ASR #+3]
   \   00000120   0180A0E3           MOV      R8,#+1
   \   00000124   072002E2           AND      R2,R2,#0x7
   \   00000128   180210E1           TST      R0,R8, LSL R2
   \   0000012C   0700000A           BEQ      ??anpro_server_thread_6
    501                      drive_timer(&server->timer_mgr);
   \   00000130   9C00A0E3           MOV      R0,#+156
   \   00000134   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000138   040080E0           ADD      R0,R0,R4
   \   0000013C   ........           _BLF     drive_timer,??drive_timer??rA
    502                      ioctlsocket(server->timer_tick_event, FIONDECRECV, NULL);
   \   00000140   ........           LDR      R1,??DataTable8  ;; 0xffffffff80046679
   \   00000144   000095E5           LDR      R0,[R5, #+0]
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    503                  }
    504          
    505                  if ( FD_ISSET(server->queue_event, &rset) ) {
   \                     ??anpro_server_thread_6:
   \   00000150   100094E5           LDR      R0,[R4, #+16]
   \   00000154   102094E5           LDR      R2,[R4, #+16]
   \   00000158   4011A0E1           ASR      R1,R0,#+2
   \   0000015C   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   00000160   0D10A0E1           MOV      R1,SP
   \   00000164   C001D1E7           LDRB     R0,[R1, +R0, ASR #+3]
   \   00000168   072002E2           AND      R2,R2,#0x7
   \   0000016C   180210E1           TST      R0,R8, LSL R2
   \   00000170   0100000A           BEQ      ??anpro_server_thread_7
    506                      anpro_handle_message_q(server);
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           BL       ??anpro_handle_message_q
    507                  }
    508          
    509                  if ( FD_ISSET(server->listen_fd, &rset) ) {
   \                     ??anpro_server_thread_7:
   \   0000017C   080094E5           LDR      R0,[R4, #+8]
   \   00000180   082094E5           LDR      R2,[R4, #+8]
   \   00000184   4011A0E1           ASR      R1,R0,#+2
   \   00000188   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   0000018C   0D10A0E1           MOV      R1,SP
   \   00000190   C001D1E7           LDRB     R0,[R1, +R0, ASR #+3]
   \   00000194   072002E2           AND      R2,R2,#0x7
   \   00000198   1090A0E3           MOV      R9,#+16
   \   0000019C   180210E1           TST      R0,R8, LSL R2
   \   000001A0   0A00000A           BEQ      ??anpro_server_thread_8
    510                      anpro_server_handle_new_connection(server, 0);
   \   000001A4   08908DE5           STR      R9,[SP, #+8]
   \   000001A8   080094E5           LDR      R0,[R4, #+8]
   \   000001AC   08208DE2           ADD      R2,SP,#+8
   \   000001B0   14108DE2           ADD      R1,SP,#+20
   \   000001B4   ........           _BLF     lwip_accept,??lwip_accept??rA
   \   000001B8   0010B0E1           MOVS     R1,R0
   \   000001BC   0300004A           BMI      ??anpro_server_thread_8
   \   000001C0   0030A0E3           MOV      R3,#+0
   \   000001C4   14208DE2           ADD      R2,SP,#+20
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   ........           BL       ??anpro_server_init_new_connection
    511                  }
    512          
    513                  if ( server->flash_fd != -1 && FD_ISSET(server->flash_fd, &rset) ) {
   \                     ??anpro_server_thread_8:
   \   000001D0   0C0094E5           LDR      R0,[R4, #+12]
   \   000001D4   060050E1           CMP      R0,R6
   \   000001D8   1300000A           BEQ      ??anpro_server_thread_9
   \   000001DC   4011A0E1           ASR      R1,R0,#+2
   \   000001E0   A10E80E0           ADD      R0,R0,R1, LSR #+29
   \   000001E4   0D10A0E1           MOV      R1,SP
   \   000001E8   C001D1E7           LDRB     R0,[R1, +R0, ASR #+3]
   \   000001EC   0C1094E5           LDR      R1,[R4, #+12]
   \   000001F0   071001E2           AND      R1,R1,#0x7
   \   000001F4   180110E1           TST      R0,R8, LSL R1
   \   000001F8   0B00000A           BEQ      ??anpro_server_thread_9
    514                      anpro_server_handle_new_connection(server, 1);
   \   000001FC   08908DE5           STR      R9,[SP, #+8]
   \   00000200   0C0094E5           LDR      R0,[R4, #+12]
   \   00000204   08208DE2           ADD      R2,SP,#+8
   \   00000208   14108DE2           ADD      R1,SP,#+20
   \   0000020C   ........           _BLF     lwip_accept,??lwip_accept??rA
   \   00000210   000050E3           CMP      R0,#+0
   \   00000214   0400004A           BMI      ??anpro_server_thread_9
   \   00000218   0130A0E3           MOV      R3,#+1
   \   0000021C   14208DE2           ADD      R2,SP,#+20
   \   00000220   0010A0E1           MOV      R1,R0
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           BL       ??anpro_server_init_new_connection
    515                  }
    516          
    517                  anpro_server_do_post_select(server, &rset, &wset);
   \                     ??anpro_server_thread_9:
   \   0000022C   02208DE2           ADD      R2,SP,#+2
   \   00000230   0D10A0E1           MOV      R1,SP
   \   00000234   0400A0E1           MOV      R0,R4
   \   00000238   ........           BL       ??anpro_server_do_post_select
   \                     ??anpro_server_thread_3:
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   04108DE5           STR      R1,[SP, #+4]
   \   00000244   0220A0E3           MOV      R2,#+2
   \   00000248   0D00A0E1           MOV      R0,SP
   \   0000024C   ........           _BLF     memset,??memset??rA
   \   00000250   0220A0E3           MOV      R2,#+2
   \   00000254   0010A0E3           MOV      R1,#+0
   \   00000258   02008DE2           ADD      R0,SP,#+2
   \   0000025C   ........           _BLF     memset,??memset??rA
   \   00000260   0010A0E3           MOV      R1,#+0
   \   00000264   0C108DE5           STR      R1,[SP, #+12]
   \   00000268   601BA0E3           MOV      R1,#+98304
   \   0000026C   6A1E81E3           ORR      R1,R1,#0x6A0
   \   00000270   10108DE5           STR      R1,[SP, #+16]
   \   00000274   080094E5           LDR      R0,[R4, #+8]
   \   00000278   04208DE2           ADD      R2,SP,#+4
   \   0000027C   0D10A0E1           MOV      R1,SP
   \   00000280   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \   00000284   0C0094E5           LDR      R0,[R4, #+12]
   \   00000288   060050E1           CMP      R0,R6
   \   0000028C   0200000A           BEQ      ??anpro_server_thread_10
   \   00000290   04208DE2           ADD      R2,SP,#+4
   \   00000294   0D10A0E1           MOV      R1,SP
   \   00000298   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \                     ??anpro_server_thread_10:
   \   0000029C   100094E5           LDR      R0,[R4, #+16]
   \   000002A0   04208DE2           ADD      R2,SP,#+4
   \   000002A4   0D10A0E1           MOV      R1,SP
   \   000002A8   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \   000002AC   000095E5           LDR      R0,[R5, #+0]
   \   000002B0   04208DE2           ADD      R2,SP,#+4
   \   000002B4   0D10A0E1           MOV      R1,SP
   \   000002B8   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \   000002BC   0900D5E5           LDRB     R0,[R5, #+9]
   \   000002C0   000050E3           CMP      R0,#+0
   \   000002C4   0600000A           BEQ      ??anpro_server_thread_11
   \   000002C8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   0300001A           BNE      ??anpro_server_thread_11
   \   000002D4   0C0095E5           LDR      R0,[R5, #+12]
   \   000002D8   04208DE2           ADD      R2,SP,#+4
   \   000002DC   0D10A0E1           MOV      R1,SP
   \   000002E0   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \                     ??anpro_server_thread_11:
   \   000002E4   008094E5           LDR      R8,[R4, #+0]
   \   000002E8   040000EA           B        ??anpro_server_thread_12
   \                     ??anpro_server_thread_13:
   \   000002EC   080098E5           LDR      R0,[R8, #+8]
   \   000002F0   04208DE2           ADD      R2,SP,#+4
   \   000002F4   02108DE2           ADD      R1,SP,#+2
   \   000002F8   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \                     ??anpro_server_thread_14:
   \   000002FC   008098E5           LDR      R8,[R8, #+0]
   \                     ??anpro_server_thread_12:
   \   00000300   040058E1           CMP      R8,R4
   \   00000304   66FFFF0A           BEQ      ??anpro_server_thread_4
   \   00000308   080098E5           LDR      R0,[R8, #+8]
   \   0000030C   04208DE2           ADD      R2,SP,#+4
   \   00000310   0D10A0E1           MOV      R1,SP
   \   00000314   ........           _BLF     ??anpro_select_add_set,??anpro_select_add_set??rA
   \   00000318   5000A0E3           MOV      R0,#+80
   \   0000031C   400C80E3           ORR      R0,R0,#0x4000
   \   00000320   0800D0E7           LDRB     R0,[R0, +R8]
   \   00000324   000050E3           CMP      R0,#+0
   \   00000328   EFFFFF1A           BNE      ??anpro_server_thread_13
   \   0000032C   F2FFFFEA           B        ??anpro_server_thread_14
    518              }
    519          }
    520          
    521          ////////////////////////////////////////////////////////////////////////////////
    522          //
    523          // EmBOS message queue handling
    524          //
    525          ////////////////////////////////////////////////////////////////////////////////
    526          /**
    527           * @brief initialize EMBOS message Q and event sock for I/O multiplexing
    528           *
    529           * @param[in] server ANPRO_TCP_Server structure to initialize with
    530           *
    531           * @return none
    532           */
    533          static void
    534          anpro_init_message_q(ANPRO_TCP_Server *server) {
    535              server->urgent_q = new TSNMessageQ();
    536              server->normal_q = new TSNMessageQ();
    537              server->queue_event    = anpro_net_create_eventfd();
    538          }
    539          
    540          /**
    541           * @brief reads from EMBOS message Q and handles it
    542           *
    543           * @param[in] server ANPRO_TCP_Server structure to read message from
    544           *
    545           * @return none
    546           */

   \                                 In segment CODE, align 4, keep-with-next
    547          static void
    548          anpro_handle_message_q(ANPRO_TCP_Server *server) {
   \                     ??anpro_handle_message_q:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    549              s32_t size;
    550          
    551              //
    552              // XXX : possible source of bug.
    553              // q_msg_buf is only 1K here.
    554              //
    555              if ( server->urgent_q->GetMessageCond(server->q_msg_buf, &size) != 0 ) {
   \   00000008   ........           LDR      R6,??DataTable8  ;; 0xffffffff80046679
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   105084E2           ADD      R5,R4,#+16
   \   00000014   040095E5           LDR      R0,[R5, #+4]
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   1C1084E2           ADD      R1,R4,#+28
   \   00000020   ........           _BLF     ??GetMessageCond,??GetMessageCond??rA
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0900000A           BEQ      ??anpro_handle_message_q_1
    556                  // something to handle
    557                  ioctlsocket(server->queue_event, FIONDECRECV, NULL);
   \   0000002C   000095E5           LDR      R0,[R5, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    558                  __on_anpro10_tx_req(server, server->q_msg_buf, size, 1);
   \   0000003C   00209DE5           LDR      R2,[SP, #+0]
   \   00000040   0130A0E3           MOV      R3,#+1
   \   00000044   1C1084E2           ADD      R1,R4,#+28
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       ??__on_anpro10_tx_req
    559          
    560                  // return here so the next urgent message is handled properly
    561                  // it's less efficient but doesn't make any noticeable difference
    562                  return;
   \   00000050   2D0000EA           B        ??anpro_handle_message_q_2
    563              }
    564          
    565              if ( server->normal_q->GetMessageCond(server->q_msg_buf, &size) != 0 ) {
   \                     ??anpro_handle_message_q_1:
   \   00000054   080095E5           LDR      R0,[R5, #+8]
   \   00000058   0D20A0E1           MOV      R2,SP
   \   0000005C   1C1084E2           ADD      R1,R4,#+28
   \   00000060   ........           _BLF     ??GetMessageCond,??GetMessageCond??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   2700000A           BEQ      ??anpro_handle_message_q_2
    566                  ioctlsocket(server->queue_event, FIONDECRECV, NULL);
   \   0000006C   000095E5           LDR      R0,[R5, #+0]
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    567                  __on_anpro10_tx_req_normal(server, server->q_msg_buf, size, 0);
   \   0000007C   00209DE5           LDR      R2,[SP, #+0]
   \   00000080   C900A0E3           MOV      R0,#+201
   \   00000084   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000088   0400D0E7           LDRB     R0,[R0, +R4]
   \   0000008C   1C1084E2           ADD      R1,R4,#+28
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1E00000A           BEQ      ??anpro_handle_message_q_3
   \   00000098   F400A0E3           MOV      R0,#+244
   \   0000009C   BE0C80E3           ORR      R0,R0,#0xBE00
   \   000000A0   045080E0           ADD      R5,R0,R4
   \   000000A4   0000D5E5           LDRB     R0,[R5, #+0]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   1600001A           BNE      ??anpro_handle_message_q_2
   \   000000B0   CC00A0E3           MOV      R0,#+204
   \   000000B4   7E0C80E3           ORR      R0,R0,#0x7E00
   \   000000B8   046080E0           ADD      R6,R0,R4
   \   000000BC   0230A0E1           MOV      R3,R2
   \   000000C0   0120A0E1           MOV      R2,R1
   \   000000C4   020040E2           SUB      R0,R0,#+2
   \   000000C8   B41090E1           LDRH     R1,[R0, +R4]
   \   000000CC   000096E5           LDR      R0,[R6, #+0]
   \   000000D0   ........           _BLF     ??anpro10_udp_broadcast,??anpro10_udp_broadcast??rA
   \   000000D4   010050E3           CMP      R0,#+1
   \   000000D8   0B0000AA           BGE      ??anpro_handle_message_q_2
   \   000000DC   000096E5           LDR      R0,[R6, #+0]
   \   000000E0   ........           _BLF     lwip_close,??lwip_close??rA
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   0000C5E5           STRB     R0,[R5, #+0]
   \   000000EC   FA2FA0E3           MOV      R2,#+1000
   \   000000F0   E000A0E3           MOV      R0,#+224
   \   000000F4   BE0C80E3           ORR      R0,R0,#0xBE00
   \   000000F8   041080E0           ADD      R1,R0,R4
   \   000000FC   9C00A0E3           MOV      R0,#+156
   \   00000100   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000104   040080E0           ADD      R0,R0,R4
   \   00000108   ........           _BLF     add_timer,??add_timer??rA
   \                     ??anpro_handle_message_q_2:
   \   0000010C   7140BDE8           POP      {R0,R4-R6,LR}
   \   00000110   1EFF2FE1           BX       LR
   \                     ??anpro_handle_message_q_3:
   \   00000114   0030A0E3           MOV      R3,#+0
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   ........           BL       ??__on_anpro10_tx_req
   \                     ??anpro_handle_message_q_4:
   \   00000120   F9FFFFEA           B        ??anpro_handle_message_q_2
    568              }
    569          }
    570          
    571          ////////////////////////////////////////////////////////////////////////////////
    572          //
    573          // timer related
    574          //
    575          ////////////////////////////////////////////////////////////////////////////////
    576          /**
    577           * @brief stimulate an evnet socket to notify a TCP server that it's time to
    578           *        to drive a tick.
    579           *        This is EMBOS timer callback, thus, runs in IRQ or some other
    580           *        contexts other than TCP server thread.
    581           *        At the moment, timer resolution is 100ms.
    582           *
    583           * @return none
    584           */

   \                                 In segment CODE, align 4, keep-with-next
    585          static void
    586          anpro_timer_tick_callback(void) {
    587              OS_TIMER *t = OS_GetpCurrentTimer();
   \                     ??anpro_timer_tick_callback:
   \   00000000   24009FE5           LDR      R0,??anpro_timer_tick_callback_1  ;; OS_pCurrentTimer
    588              ANPRO_TCP_Server *server = container_of(t, ANPRO_TCP_Server, os_timer_tick);
    589          
    590              ioctlsocket(server->timer_tick_event, FIONINCRECV, NULL);
   \   00000004   ........           LDR      R1,??DataTable12  ;; 0xffffffff80046678
   \   00000008   10402DE9           PUSH     {R4,LR}
   \   0000000C   004090E5           LDR      R4,[R0, #+0]
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   140094E5           LDR      R0,[R4, #+20]
   \   00000018   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    591          
    592              OS_RetriggerTimer(t);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     OS_RetriggerTimer,??OS_RetriggerTimer??rA
    593          }
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??anpro_timer_tick_callback_1:
   \   0000002C   ........           DC32     OS_pCurrentTimer
    594          
    595          /**
    596           * @brief initialize a timer manager for a server
    597           *
    598           * @param server instance to initialize timer instance with
    599           *
    600           * @return none
    601           */
    602          static void
    603          anpro_init_timer(ANPRO_TCP_Server *server) {
    604              //
    605              // 100ms tick rate with 8 buckets
    606              // this gotta be enough for this application
    607              //
    608              init_timer(&server->timer_mgr, 100, 8);
    609          
    610              server->timer_tick_event  = anpro_net_create_eventfd();
    611          
    612              OS_CREATETIMER(&server->os_timer_tick, anpro_timer_tick_callback, 100);
    613          }
    614          
    615          ////////////////////////////////////////////////////////////////////////////////
    616          //
    617          // ANPRO10 RX/TX
    618          //
    619          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    620          static s32_t
    621          __on_rx_anpro10_message(ANPRO10_Reader *reader, u8_t *msg, s32_t len) {
   \                     ??__on_rx_anpro10_message:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
    622              ANPRO_Connection *con;
    623          
    624              con = container_of(reader, ANPRO_Connection, anp10_reader);
   \   00000004   401040E2           SUB      R1,R0,#+64
   \   00000008   ........           LDR      R7,??DataTable10  ;; fake_uart_port_for_tcp
   \   0000000C   5120A0E3           MOV      R2,#+81
   \   00000010   402C82E3           ORR      R2,R2,#0x4000
   \   00000014   014082E0           ADD      R4,R2,R1
   \   00000018   0010D4E5           LDRB     R1,[R4, #+0]
    625              //
    626              // dirty hack to deal with system match per connection
    627              //
    628              fake_uart_port_for_tcp.SystemMatch = con->system_match ? true : false;
    629              ANPRO10_UnpackPacket(reader->bounce_buffer, &fake_uart_port_for_tcp);
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0110A013           MOVNE    R1,#+1
   \   0000002C   C210C7E5           STRB     R1,[R7, #+194]
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   ........           _BLF     ??ANPRO10_UnpackPacket,??ANPRO10_UnpackPacket??rA
    630              if ( fake_uart_port_for_tcp.SystemMatch ) {
   \   00000038   C200D7E5           LDRB     R0,[R7, #+194]
   \   0000003C   000050E3           CMP      R0,#+0
    631                  con->system_match = 1;
   \   00000040   0150A013           MOVNE    R5,#+1
    632              } else {
    633                  con->system_match = 0;
   \   00000044   0050C4E5           STRB     R5,[R4, #+0]
    634              }
    635          
    636              return 0;
   \   00000048   B040BDE8           POP      {R4,R5,R7,LR}
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   1EFF2FE1           BX       LR               ;; return
    637          }
    638          
    639          static inline u8_t
    640          anpro10_is_broadcast_dest(u8_t rx_addr, u8_t rx_id) {
    641              if ( rx_id == DEVICE_BROADCAST || rx_addr == DEVICE_BROADCAST_ADDR ) {
    642                  return 1;
    643              }
    644              return 0;
    645          }
    646          
    647          static inline ANPRO_Connection*
    648          anpro10_route_message(ANPRO_TCP_Server *server, u8_t rx_addr, u8_t rx_id, u8_t *is_broadcast) {
    649              ANPRO_Connection *con;
    650          
    651              *is_broadcast = 0;
    652          
    653              if ( anpro10_is_broadcast_dest(rx_addr, rx_id) ) {
    654                  *is_broadcast = 1;
    655                  return NULL;
    656              }
    657          
    658              list_for_each_entry(con, &server->anpro_conns, con_list, ANPRO_Connection) {
    659                  if ( con->device_id == rx_id && con->device_addr == rx_addr ) {
    660                      return con;
    661                  }
    662              }
    663              return NULL;
    664          }
    665          

   \                                 In segment CODE, align 4, keep-with-next
    666          static void
    667          __on_anpro10_tx_req(ANPRO_TCP_Server *server, u8_t *msg, s32_t len, u8_t is_urgent_msg) {
   \                     ??__on_anpro10_tx_req:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0170A0E1           MOV      R7,R1
    668              ANPRO_Connection *dest_route;
    669              u8_t                          *pkt_pos,
    670                  is_broadcast;
    671              QueueANPRO10_CommandHeading *UCmd = (QueueANPRO10_CommandHeading *)msg;
    672              QueueANPRO10_CommandHeading *NCmd = (QueueANPRO10_CommandHeading *)msg;
    673          
    674              dest_route = is_urgent_msg ?
    675                  anpro10_route_message(server, UCmd->TxInfo.rxAddr, UCmd->TxInfo.rxId, &is_broadcast) :
    676                  anpro10_route_message(server, NCmd->TxInfo.rxAddr, NCmd->TxInfo.rxId, &is_broadcast);
   \   0000000C   0510D7E5           LDRB     R1,[R7, #+5]
   \   00000010   0420D7E5           LDRB     R2,[R7, #+4]
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   0D0051E3           CMP      R1,#+13
   \   00000028   FF005213           CMPNE    R2,#+255
   \   0000002C   0200001A           BNE      ??__on_anpro10_tx_req_1
   \   00000030   0160A0E3           MOV      R6,#+1
   \   00000034   0A0000EA           B        ??__on_anpro10_tx_req_2
   \                     ??__on_anpro10_tx_req_3:
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \                     ??__on_anpro10_tx_req_1:
   \   0000003C   050050E1           CMP      R0,R5
   \   00000040   3F00000A           BEQ      ??__on_anpro10_tx_req_4
   \   00000044   3E30D0E5           LDRB     R3,[R0, #+62]
   \   00000048   010053E1           CMP      R3,R1
   \   0000004C   3F30D005           LDRBEQ   R3,[R0, #+63]
   \   00000050   02005301           CMPEQ    R3,R2
   \   00000054   F7FFFF1A           BNE      ??__on_anpro10_tx_req_3
   \   00000058   0040A0E1           MOV      R4,R0
   \   0000005C   000054E3           CMP      R4,#+0
   \   00000060   3700000A           BEQ      ??__on_anpro10_tx_req_4
   \                     ??__on_anpro10_tx_req_2:
   \   00000064   5C00A0E3           MOV      R0,#+92
   \   00000068   FC0D80E3           ORR      R0,R0,#0x3F00
   \   0000006C   059080E0           ADD      R9,R0,R5
    677              // XXX
    678              // at the moment, no broadcast support
    679              //
    680              if ( !is_broadcast && dest_route == NULL ) {
    681                  return;
    682              }
    683          
    684              pkt_pos  = server->tx_bounce_buffer;
    685              pkt_pos += ANPRO10_AddPacketPreAmble(pkt_pos);
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   ........           _BLF     ??ANPRO10_AddPacketPreAmble,??ANPRO10_AddPacketPreAmble??rA
    686          
    687              pkt_pos += is_urgent_msg ? ANPRO10_AddPacketHeading(pkt_pos, UCmd->TxInfo.rxAddr, UCmd->TxInfo.rxId) :
    688                  ANPRO10_AddPacketHeading(pkt_pos, NCmd->TxInfo.rxAddr, NCmd->TxInfo.rxId);
   \   00000078   0520D7E5           LDRB     R2,[R7, #+5]
   \   0000007C   0410D7E5           LDRB     R1,[R7, #+4]
   \   00000080   09A080E0           ADD      R10,R0,R9
   \   00000084   0A00A0E1           MOV      R0,R10
   \   00000088   ........           _BLF     ??ANPRO10_AddPacketHeading,??ANPRO10_AddPacketHeading??rA
   \   0000008C   0AA080E0           ADD      R10,R0,R10
    689          
    690              pkt_pos += is_urgent_msg ? ANPRO10_AddCommand(pkt_pos, (u8_t *)&UCmd->Data) :
    691                  ANPRO10_AddCommand(pkt_pos, (u8_t *)&NCmd->Data);
   \   00000090   061087E2           ADD      R1,R7,#+6
   \   00000094   0A00A0E1           MOV      R0,R10
   \   00000098   ........           _BLF     ??ANPRO10_AddCommand,??ANPRO10_AddCommand??rA
   \   0000009C   0A7080E0           ADD      R7,R0,R10
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   091047E0           SUB      R1,R7,R9
   \   000000A8   0900A0E1           MOV      R0,R9
    692          
    693              pkt_pos += ANPRO10_AddPacketTail(server->tx_bounce_buffer, (pkt_pos - server->tx_bounce_buffer), false);
   \   000000AC   ........           _BLF     ??ANPRO10_AddPacketTail,??ANPRO10_AddPacketTail??rA
   \   000000B0   070080E0           ADD      R0,R0,R7
   \   000000B4   6010A0E3           MOV      R1,#+96
   \   000000B8   FC1D81E3           ORR      R1,R1,#0x3F00
   \   000000BC   051081E0           ADD      R1,R1,R5
   \   000000C0   000056E3           CMP      R6,#+0
   \   000000C4   090040E0           SUB      R0,R0,R9
   \   000000C8   2E00001A           BNE      ??__on_anpro10_tx_req_5
    694          
    695              //
    696              // XXX
    697              // with TCP, there is no ANPRO10 preamble.
    698              //
    699              if ( !is_broadcast ) {
    700                  anpro_server_tx_to(dest_route,
    701                                     &server->tx_bounce_buffer[ANPRO10_PREAMBLE_SIZE],   // XXX hack. we don't send preamble
    702                                     (pkt_pos - server->tx_bounce_buffer) - ANPRO10_PREAMBLE_SIZE);
   \   000000CC   046040E2           SUB      R6,R0,#+4
   \   000000D0   5000A0E3           MOV      R0,#+80
   \   000000D4   400C80E3           ORR      R0,R0,#0x4000
   \   000000D8   048080E0           ADD      R8,R0,R4
   \   000000DC   0000D8E5           LDRB     R0,[R8, #+0]
   \   000000E0   0150A0E1           MOV      R5,R1
   \   000000E4   0070A0E3           MOV      R7,#+0
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0400000A           BEQ      ??__on_anpro10_tx_req_6
   \   000000F0   0620A0E1           MOV      R2,R6
   \   000000F4   0C0084E2           ADD      R0,R4,#+12
   \   000000F8   ........           _BLF     put_circ_buffer,??put_circ_buffer??rA
   \   000000FC   100000EA           B        ??__on_anpro10_tx_req_4
   \                     ??__on_anpro10_tx_req_7:
   \   00000100   077080E0           ADD      R7,R0,R7
   \                     ??__on_anpro10_tx_req_6:
   \   00000104   060057E1           CMP      R7,R6
   \   00000108   0D0000AA           BGE      ??__on_anpro10_tx_req_4
   \   0000010C   089084E2           ADD      R9,R4,#+8
   \   00000110   000099E5           LDR      R0,[R9, #+0]
   \   00000114   07A046E0           SUB      R10,R6,R7
   \   00000118   0A20A0E1           MOV      R2,R10
   \   0000011C   051087E0           ADD      R1,R7,R5
   \   00000120   ........           _BLF     lwip_write,??lwip_write??rA
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   F4FFFF5A           BPL      ??__on_anpro10_tx_req_7
   \   0000012C   000099E5           LDR      R0,[R9, #+0]
   \   00000130   ........           _BLF     ??is_socket_error_would_block,??is_socket_error_would_block??rA
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   0300001A           BNE      ??__on_anpro10_tx_req_8
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       ??anpro_server_deinit_connection
   \                     ??__on_anpro10_tx_req_4:
   \   00000144   F147BDE8           POP      {R0,R4-R10,LR}
   \   00000148   1EFF2FE1           BX       LR
   \                     ??__on_anpro10_tx_req_8:
   \   0000014C   0100A0E3           MOV      R0,#+1
   \   00000150   0000C8E5           STRB     R0,[R8, #+0]
   \   00000154   0A20A0E1           MOV      R2,R10
   \   00000158   051087E0           ADD      R1,R7,R5
   \   0000015C   0C0084E2           ADD      R0,R4,#+12
   \   00000160   ........           _BLF     put_circ_buffer,??put_circ_buffer??rA
   \   00000164   2C3099E5           LDR      R3,[R9, #+44]
   \   00000168   9820A0E3           MOV      R2,#+152
   \   0000016C   E82D82E3           ORR      R2,R2,#0x3A00
   \   00000170   201084E2           ADD      R1,R4,#+32
   \   00000174   9C00A0E3           MOV      R0,#+156
   \   00000178   7E0C80E3           ORR      R0,R0,#0x7E00
   \   0000017C   030080E0           ADD      R0,R0,R3
   \   00000180   ........           _BLF     add_timer,??add_timer??rA
   \   00000184   EEFFFFEA           B        ??__on_anpro10_tx_req_4
    703              } else {
    704                  anpro_server_tx_broadcast(server,
    705                                            &server->tx_bounce_buffer[ANPRO10_PREAMBLE_SIZE],   // XXX hack. we don't send preamble
    706                                            (pkt_pos - server->tx_bounce_buffer) - ANPRO10_PREAMBLE_SIZE);
   \                     ??__on_anpro10_tx_req_5:
   \   00000188   042040E2           SUB      R2,R0,#+4
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           BL       ??anpro_server_tx_broadcast
   \                     ??__on_anpro10_tx_req_9:
   \   00000194   EAFFFFEA           B        ??__on_anpro10_tx_req_4
    707              }
    708          }
    709          
    710          static void
    711          __on_anpro10_tx_req_normal(ANPRO_TCP_Server *server, u8_t *msg, s32_t len, u8_t is_urgent_msg) {
    712              if ( server->use_udp_bcast_for_normal_msg ) {
    713                  if ( server->udp_state != ANPRO_TCP_Server::ANPRO_UDP_State_OK ) {
    714                      return;
    715                  }
    716          
    717                  if ( anpro10_udp_broadcast(server->udp_sock, server->udp_port_number, msg, len) <= 0 ) {
    718                      anpro_server_put_udp_to_wait_state(server);
    719                  }
    720              } else {
    721                  __on_anpro10_tx_req(server, msg, len, is_urgent_msg);
    722              }
    723          }
    724          
    725          ////////////////////////////////////////////////////////////////////////////////
    726          //
    727          // debug interface
    728          //
    729          ////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    730          static void
    731          anpro_server_debug_handler(ANPRO_TCP_Server *server) {
   \                     ??anpro_server_debug_handler:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    732              char *buf_ptr = (char *)server->msg_buf;
    733          
    734              if ( strcmp((char *)server->msg_buf, "list_conn") == 0 ) {
   \   00000004   3C519FE5           LDR      R5,??anpro_server_debug_handler_1  ;; `?<Constant "======== Connected Cl...">`
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1800A0E3           MOV      R0,#+24
   \   00000010   BF0C80E3           ORR      R0,R0,#0xBF00
   \   00000014   048090E7           LDR      R8,[R0, +R4]
   \   00000018   421F85E2           ADD      R1,R5,#+264
   \   0000001C   0800A0E1           MOV      R0,R8
   \   00000020   ........           _BLF     strcmp,??strcmp??rA
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   4100001A           BNE      ??anpro_server_debug_handler_2
    735                  ANPRO_Connection *con;
    736                  int               i = 0;
   \   0000002C   0060A0E3           MOV      R6,#+0
    737          
    738                  buf_ptr += sprintf(buf_ptr, "======== Connected Clients =======\r\n");
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0800A0E1           MOV      R0,R8
   \   00000038   ........           _BLF     sprintf,??sprintf??rA
    739          
    740                  list_for_each_entry(con, &server->anpro_conns, con_list, ANPRO_Connection) {
   \   0000003C   007094E5           LDR      R7,[R4, #+0]
   \   00000040   088080E0           ADD      R8,R0,R8
   \                     ??anpro_server_debug_handler_3:
   \   00000044   040057E1           CMP      R7,R4
   \   00000048   3C00000A           BEQ      ??anpro_server_debug_handler_4
    741                      buf_ptr += sprintf(buf_ptr, "Client %d: IP-Addr %d.%d.%d.%d\r\n", i,
    742                                         ((con->client_addr >> 24) & 0xff),
    743                                         ((con->client_addr >> 16) & 0xff),
    744                                         ((con->client_addr >> 8) & 0xff),
    745                                         ((con->client_addr >> 0) & 0xff));
   \   0000004C   380097E5           LDR      R0,[R7, #+56]
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   FF1000E2           AND      R1,R0,#0xFF
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   FF10A0E3           MOV      R1,#+255
   \   00000060   201401E0           AND      R1,R1,R0, LSR #+8
   \   00000064   02002DE9           PUSH     {R1}
   \   00000068   FF10A0E3           MOV      R1,#+255
   \   0000006C   201801E0           AND      R1,R1,R0, LSR #+16
   \   00000070   02002DE9           PUSH     {R1}
   \   00000074   203CA0E1           LSR      R3,R0,#+24
   \   00000078   281085E2           ADD      R1,R5,#+40
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   ........           _BLF     sprintf,??sprintf??rA
    746                      buf_ptr += sprintf(buf_ptr, "Client %d: Port %d\r\n", i, con->client_port);
   \   00000084   BC33D7E1           LDRH     R3,[R7, #+60]
   \   00000088   088080E0           ADD      R8,R0,R8
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   4C1085E2           ADD      R1,R5,#+76
   \   00000094   0800A0E1           MOV      R0,R8
   \   00000098   ........           _BLF     sprintf,??sprintf??rA
    747                      buf_ptr += sprintf(buf_ptr, "Client %d: Device ID %d\r\n", i, con->device_id);
   \   0000009C   3E30D7E5           LDRB     R3,[R7, #+62]
   \   000000A0   088080E0           ADD      R8,R0,R8
   \   000000A4   0620A0E1           MOV      R2,R6
   \   000000A8   641085E2           ADD      R1,R5,#+100
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   ........           _BLF     sprintf,??sprintf??rA
    748                      buf_ptr += sprintf(buf_ptr, "Client %d: Device Addr %d\r\n", i, con->device_addr);
   \   000000B4   3F30D7E5           LDRB     R3,[R7, #+63]
   \   000000B8   088080E0           ADD      R8,R0,R8
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   801085E2           ADD      R1,R5,#+128
   \   000000C4   0800A0E1           MOV      R0,R8
   \   000000C8   ........           _BLF     sprintf,??sprintf??rA
   \   000000CC   088080E0           ADD      R8,R0,R8
   \   000000D0   5000A0E3           MOV      R0,#+80
   \   000000D4   400C80E3           ORR      R0,R0,#0x4000
   \   000000D8   079080E0           ADD      R9,R0,R7
   \   000000DC   0030D9E5           LDRB     R3,[R9, #+0]
   \   000000E0   0620A0E1           MOV      R2,R6
   \   000000E4   9C1085E2           ADD      R1,R5,#+156
   \   000000E8   0800A0E1           MOV      R0,R8
    749                      buf_ptr += sprintf(buf_ptr, "Client %d: TX Pending %d\r\n", i, con->tx_pending);
   \   000000EC   ........           _BLF     sprintf,??sprintf??rA
    750                      buf_ptr += sprintf(buf_ptr, "Client %d: System Match %d\r\n", i, con->system_match);
   \   000000F0   0130D9E5           LDRB     R3,[R9, #+1]
   \   000000F4   088080E0           ADD      R8,R0,R8
   \   000000F8   0620A0E1           MOV      R2,R6
   \   000000FC   B81085E2           ADD      R1,R5,#+184
   \   00000100   0800A0E1           MOV      R0,R8
   \   00000104   ........           _BLF     sprintf,??sprintf??rA
    751                      buf_ptr += sprintf(buf_ptr, "Client %d: Start Time %d\r\n", i, con->start_time);
   \   00000108   043099E5           LDR      R3,[R9, #+4]
   \   0000010C   088080E0           ADD      R8,R0,R8
   \   00000110   0620A0E1           MOV      R2,R6
   \   00000114   D81085E2           ADD      R1,R5,#+216
   \   00000118   0800A0E1           MOV      R0,R8
   \   0000011C   ........           _BLF     sprintf,??sprintf??rA
    752                      i++;
    753                  }
   \   00000120   007097E5           LDR      R7,[R7, #+0]
   \   00000124   088080E0           ADD      R8,R0,R8
   \   00000128   016086E2           ADD      R6,R6,#+1
   \   0000012C   0CD08DE2           ADD      SP,SP,#+12
   \   00000130   C3FFFFEA           B        ??anpro_server_debug_handler_3
    754              } else {
    755                  sprintf(buf_ptr, "Unknown Command\r\n");
   \                     ??anpro_server_debug_handler_2:
   \   00000134   F41085E2           ADD      R1,R5,#+244
   \   00000138   0800A0E1           MOV      R0,R8
   \   0000013C   ........           _BLF     sprintf,??sprintf??rA
    756              }
    757          }
   \                     ??anpro_server_debug_handler_4:
   \   00000140   F043BDE8           POP      {R4-R9,LR}
   \   00000144   1EFF2FE1           BX       LR               ;; return
   \                     ??anpro_server_debug_handler_1:
   \   00000148   ........           DC32     `?<Constant "======== Connected Cl...">`
    758          
    759          static void
    760          anpro_server_handle_debug(ANPRO_TCP_Server *server) {
    761              if ( OS_EVENT_Get(&server->debug_req_event) == 0 ) {
    762                  return;
    763              }
    764          
    765              OS_EVENT_Wait(&server->debug_req_event);
    766          
    767              anpro_server_debug_handler(server);
    768          
    769              OS_EVENT_Set(&server->debug_rsp_event);
    770          }
    771          
    772          static void
    773          anpro_server_debug_init(ANPRO_TCP_Server *server) {
    774              OS_CREATERSEMA(&server->debug_lock);
    775              OS_EVENT_Create(&server->debug_req_event);
    776              OS_EVENT_Create(&server->debug_rsp_event);
    777              server->msg_buf = NULL;
    778          }
    779          

   \                                 In segment CODE, align 4, keep-with-next
    780          void
    781          anpro_server_debug(ANPRO_TCP_Server *server, char *msg_buf) {
   \                     ??anpro_server_debug:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0800A0E3           MOV      R0,#+8
   \   00000010   BF0C80E3           ORR      R0,R0,#0xBF00
   \   00000014   046080E0           ADD      R6,R0,R4
   \   00000018   0600A0E1           MOV      R0,R6
    782              OS_Use(&server->debug_lock);
   \   0000001C   ........           _BLF     OS_Use,??OS_Use??rA
    783          
    784              server->msg_buf = msg_buf;
   \   00000020   1800A0E3           MOV      R0,#+24
   \   00000024   BF0C80E3           ORR      R0,R0,#0xBF00
   \   00000028   045080E7           STR      R5,[R0, +R4]
    785          
    786              // notify the tasky
    787              OS_EVENT_Set(&server->debug_req_event);
   \   0000002C   200040E2           SUB      R0,R0,#+32
   \   00000030   040080E0           ADD      R0,R0,R4
   \   00000034   ........           _BLF     OS_EVENT_Set,??OS_EVENT_Set??rA
    788          
    789              // wait for the debug complete
    790              OS_EVENT_Wait(&server->debug_rsp_event);
   \   00000038   BF0C84E2           ADD      R0,R4,#+48896
   \   0000003C   ........           _BLF     OS_EVENT_Wait,??OS_EVENT_Wait??rA
    791          
    792              OS_Unuse(&server->debug_lock);
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    793          }
   \   00000048   7040BDE8           POP      {R4-R6,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    794          
    795          ////////////////////////////////////////////////////////////////////////////////
    796          //
    797          // public interface
    798          //
    799          ////////////////////////////////////////////////////////////////////////////////
    800          /**
    801           * @brief initialize a single TCP server instance
    802           *
    803           * @param server TCP server instance to initialize with
    804           * @param port tcp port number for server to bind to
    805           * @param use_udp flash to indicate whether to use udp broadcast or not
    806           * @param udp_port udp port number to use for braodcast message
    807           * 
    808           * @return none
    809           */

   \                                 In segment CODE, align 4, keep-with-next
    810          void
    811          anpro_server_init(ANPRO_TCP_Server *server, u16_t port, u8_t use_udp, u16_t udp_port, u16_t flash_port) {
   \                     ??anpro_server_init:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   B086DDE1           LDRH     R8,[SP, #+96]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
    812              INIT_LIST_HEAD(&server->anpro_conns);
   \   0000001C   004084E5           STR      R4,[R4, #+0]
   \   00000020   044084E5           STR      R4,[R4, #+4]
    813              anpro_init_message_q(server);
   \   00000024   0C00A0E3           MOV      R0,#+12
   \   00000028   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000002C   0090B0E1           MOVS     R9,R0
   \   00000030   0000000A           BEQ      ??anpro_server_init_1
   \   00000034   ........           _BLF     ??TSNMessageQ,??TSNMessageQ??rA
   \                     ??anpro_server_init_1:
   \   00000038   149084E5           STR      R9,[R4, #+20]
   \   0000003C   0C00A0E3           MOV      R0,#+12
   \   00000040   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000044   0090B0E1           MOVS     R9,R0
   \   00000048   0000000A           BEQ      ??anpro_server_init_2
   \   0000004C   ........           _BLF     ??TSNMessageQ,??TSNMessageQ??rA
   \                     ??anpro_server_init_2:
   \   00000050   189084E5           STR      R9,[R4, #+24]
   \   00000054   ........           _BLF     ??anpro_net_create_eventfd,??anpro_net_create_eventfd??rA
   \   00000058   100084E5           STR      R0,[R4, #+16]
    814              anpro_init_timer(server);
   \   0000005C   0820A0E3           MOV      R2,#+8
   \   00000060   6410A0E3           MOV      R1,#+100
   \   00000064   9C00A0E3           MOV      R0,#+156
   \   00000068   7E0C80E3           ORR      R0,R0,#0x7E00
   \   0000006C   040080E0           ADD      R0,R0,R4
   \   00000070   ........           _BLF     init_timer,??init_timer??rA
   \   00000074   C000A0E3           MOV      R0,#+192
   \   00000078   7E0C80E3           ORR      R0,R0,#0x7E00
   \   0000007C   049080E0           ADD      R9,R0,R4
   \   00000080   ........           _BLF     ??anpro_net_create_eventfd,??anpro_net_create_eventfd??rA
   \   00000084   A8109FE5           LDR      R1,??anpro_server_init_3  ;; ??anpro_timer_tick_callback
   \   00000088   000089E5           STR      R0,[R9, #+0]
   \   0000008C   AC00A0E3           MOV      R0,#+172
   \   00000090   7E0C80E3           ORR      R0,R0,#0x7E00
   \   00000094   04A080E0           ADD      R10,R0,R4
   \   00000098   6420A0E3           MOV      R2,#+100
   \   0000009C   0A00A0E1           MOV      R0,R10
   \   000000A0   ........           _BLF     OS_CreateTimer,??OS_CreateTimer??rA
   \   000000A4   0A00A0E1           MOV      R0,R10
   \   000000A8   ........           _BLF     OS_StartTimer,??OS_StartTimer??rA
    815              server->initialized   = 1;
    816              server->port_number   = port;
    817              server->flash_port    = flash_port;
    818          
    819              server->use_udp_bcast_for_normal_msg      = use_udp;
    820              server->udp_port_number                   = udp_port;
    821          
    822              fake_uart_port_for_tcp.SystemMatch = true;
   \   000000AC   84109FE5           LDR      R1,??anpro_server_init_3+0x4  ;; fake_uart_port_for_tcp + 194
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   0800C9E5           STRB     R0,[R9, #+8]
   \   000000B8   B450C9E1           STRH     R5,[R9, #+4]
   \   000000BC   B680C9E1           STRH     R8,[R9, #+6]
   \   000000C0   0960C9E5           STRB     R6,[R9, #+9]
   \   000000C4   BA70C9E1           STRH     R7,[R9, #+10]
   \   000000C8   0000C1E5           STRB     R0,[R1, #+0]
    823          
    824              anpro_server_debug_init(server);
   \   000000CC   0800A0E3           MOV      R0,#+8
   \   000000D0   BF0C80E3           ORR      R0,R0,#0xBF00
   \   000000D4   040080E0           ADD      R0,R0,R4
   \   000000D8   ........           _BLF     OS_CreateRSema,??OS_CreateRSema??rA
   \   000000DC   F800A0E3           MOV      R0,#+248
   \   000000E0   BE0C80E3           ORR      R0,R0,#0xBE00
   \   000000E4   040080E0           ADD      R0,R0,R4
   \   000000E8   ........           _BLF     OS_EVENT_Create,??OS_EVENT_Create??rA
   \   000000EC   BF0C84E2           ADD      R0,R4,#+48896
   \   000000F0   ........           _BLF     OS_EVENT_Create,??OS_EVENT_Create??rA
    825          
    826              sys_thread_new("anpro_server", anpro_server_thread, server, DEFAULT_THREAD_STACKSIZE, DEFAULT_THREAD_PRIO);
   \   000000F4   40209FE5           LDR      R2,??anpro_server_init_3+0x8  ;; ??anpro_server_thread
   \   000000F8   1800A0E3           MOV      R0,#+24
   \   000000FC   BF0C80E3           ORR      R0,R0,#0xBF00
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   041080E7           STR      R1,[R0, +R4]
   \   00000108   30109FE5           LDR      R1,??anpro_server_init_3+0xC  ;; `?<Constant "anpro_server">`
   \   0000010C   B400A0E3           MOV      R0,#+180
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   830DA0E3           MOV      R0,#+8384
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   0430A0E1           MOV      R3,R4
   \   00000120   08008DE2           ADD      R0,SP,#+8
   \   00000124   ........           _BLF     sys_thread_new,??sys_thread_new??rA
    827          }
   \   00000128   48D08DE2           ADD      SP,SP,#+72
   \   0000012C   F047BDE8           POP      {R4-R10,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
   \                     ??anpro_server_init_3:
   \   00000134   ........           DC32     ??anpro_timer_tick_callback
   \   00000138   ........           DC32     fake_uart_port_for_tcp + 194
   \   0000013C   ........           DC32     ??anpro_server_thread
   \   00000140   ........           DC32     `?<Constant "anpro_server">`
    828          
    829          /**
    830           * @brief post a message to send over a TCP connection to this tcp server
    831           *
    832           * @param server TCP server instance to send message to
    833           * @param msg message buffer to send
    834           * @param size message size
    835           *
    836           * @return 0 if message is queued successfully into the embos message Q
    837           *        -1 if enqueue fails
    838           */

   \                                 In segment CODE, align 4, keep-with-next
    839          s8_t
    840          anpro_server_post_message_urgent(ANPRO_TCP_Server *server, void *msg, int size) {
   \                     ??anpro_server_post_message_urgent:
   \   00000000   10402DE9           PUSH     {R4,LR}
    841              if ( !server->initialized ) {
   \   00000004   C830A0E3           MOV      R3,#+200
   \   00000008   7E3C83E3           ORR      R3,R3,#0x7E00
   \   0000000C   0030D3E7           LDRB     R3,[R3, +R0]
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   0200001A           BNE      ??anpro_server_post_message_urgent_1
    842                  return -1;
   \                     ??anpro_server_post_message_urgent_2:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   1EFF2FE1           BX       LR
    843              }
    844          
    845              if ( !server->urgent_q->PostMessage(msg, size) ) {
   \                     ??anpro_server_post_message_urgent_1:
   \   00000024   104080E2           ADD      R4,R0,#+16
   \   00000028   040094E5           LDR      R0,[R4, #+4]
   \   0000002C   ........           _BLF     ??PostMessage,??PostMessage??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F7FFFF0A           BEQ      ??anpro_server_post_message_urgent_2
    846                  //
    847                  // 32k size queue and enqueue fails?
    848                  // this means something is fucked up seriously!!!
    849                  // at the moment, we do nada
    850                  //
    851                  return -1;
    852              }
    853          
    854              // signal the event socket
    855              ioctl(server->queue_event, FIONINCRECV, NULL);
   \   00000038   ........           LDR      R1,??DataTable12  ;; 0xffffffff80046678
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    856              return 0;
   \   00000048   1040BDE8           POP      {R4,LR}
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   1EFF2FE1           BX       LR               ;; return
    857          }
    858          

   \                                 In segment CODE, align 4, keep-with-next
    859          s8_t
    860          anpro_server_post_message_normal(ANPRO_TCP_Server *server, void *msg, int size) {
   \                     ??anpro_server_post_message_normal:
   \   00000000   10402DE9           PUSH     {R4,LR}
    861              if ( !server->initialized ) {
   \   00000004   C830A0E3           MOV      R3,#+200
   \   00000008   7E3C83E3           ORR      R3,R3,#0x7E00
   \   0000000C   0030D3E7           LDRB     R3,[R3, +R0]
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   0200001A           BNE      ??anpro_server_post_message_normal_1
    862                  return -1;
   \                     ??anpro_server_post_message_normal_2:
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   1EFF2FE1           BX       LR
    863              }
    864          
    865              if ( !server->normal_q->PostMessage(msg, size) ) {
   \                     ??anpro_server_post_message_normal_1:
   \   00000024   104080E2           ADD      R4,R0,#+16
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   ........           _BLF     ??PostMessage,??PostMessage??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F7FFFF0A           BEQ      ??anpro_server_post_message_normal_2
    866                  //
    867                  // 32k size queue and enqueue fails?
    868                  // this means something is fucked up seriously!!!
    869                  // at the moment, we do nada
    870                  //
    871                  return -1;
    872              }
    873          
    874              // signal the event socket
    875              ioctl(server->queue_event, FIONINCRECV, NULL);
   \   00000038   ........           LDR      R1,??DataTable12  ;; 0xffffffff80046678
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   ........           _BLF     lwip_ioctl,??lwip_ioctl??rA
    876              return 0;
   \   00000048   1040BDE8           POP      {R4,LR}
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   1EFF2FE1           BX       LR               ;; return
    877          }
    878          

   \                                 In segment CODE, align 4, keep-with-next
    879          u8_t
    880          is_this_port_for_anpro_tcp_server(TSNUart *port) {
    881              if ( port == &fake_uart_port_for_tcp ) {
   \                     ??is_this_port_for_anpro_tcp_server:
   \   00000000   ........           LDR      R1,??DataTable13  ;; fake_uart_port_for_tcp
   \   00000004   010050E1           CMP      R0,R1
    882                  return 1;
   \   00000008   0100A003           MOVEQ    R0,#+1
   \   0000000C   1EFF2F01           BXEQ     LR
    883              }
    884              return 0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
    885          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??__on_rx_anpro10_message

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??anpro_server_reinit_udp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   79660480           DC32     0xffffffff80046679

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     fake_uart_port_for_tcp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   78660480           DC32     0xffffffff80046678

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     fake_uart_port_for_tcp

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "======== Connected Cl...">`:
   \   00000000   3D3D3D3D3D3D       DC8 "======== Connected Clients =======\015\012"
   \              3D3D20436F6E
   \              6E6563746564
   \              20436C69656E
   \              7473203D3D3D
   \              3D3D3D3D0D0A
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   436C69656E74       DC8 "Client %d: IP-Addr %d.%d.%d.%d\015\012"
   \              2025643A2049
   \              502D41646472
   \              2025642E2564
   \              2E25642E2564
   \              0D0A00      
   \   00000049   000000             DC8 0, 0, 0
   \   0000004C   436C69656E74       DC8 "Client %d: Port %d\015\012"
   \              2025643A2050
   \              6F7274202564
   \              0D0A00      
   \   00000061   000000             DC8 0, 0, 0
   \   00000064   436C69656E74       DC8 "Client %d: Device ID %d\015\012"
   \              2025643A2044
   \              657669636520
   \              49442025640D
   \              0A00        
   \   0000007E   0000               DC8 0, 0
   \   00000080   436C69656E74       DC8 "Client %d: Device Addr %d\015\012"
   \              2025643A2044
   \              657669636520
   \              416464722025
   \              640D0A00    
   \   0000009C   436C69656E74       DC8 "Client %d: TX Pending %d\015\012"
   \              2025643A2054
   \              582050656E64
   \              696E67202564
   \              0D0A00      
   \   000000B7   00                 DC8 0
   \   000000B8   436C69656E74       DC8 "Client %d: System Match %d\015\012"
   \              2025643A2053
   \              797374656D20
   \              4D6174636820
   \              25640D0A00  
   \   000000D5   000000             DC8 0, 0, 0
   \   000000D8   436C69656E74       DC8 "Client %d: Start Time %d\015\012"
   \              2025643A2053
   \              746172742054
   \              696D65202564
   \              0D0A00      
   \   000000F3   00                 DC8 0
   \   000000F4   556E6B6E6F77       DC8 "Unknown Command\015\012"
   \              6E20436F6D6D
   \              616E640D0A00
   \   00000106   0000               DC8 0, 0
   \   00000108   6C6973745F63       DC8 "list_conn"
   \              6F6E6E00    
   \   00000112   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "anpro_server">`:
   \   00000000   616E70726F5F       DC8 "anpro_server"
   \              736572766572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
    886          #endif /* LWIP_SOCKET */

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     __on_anpro10_tx_req(ANPRO_TCP_Server *, u8_t *, s32_t, u8_t)
                                       36
     __on_rx_anpro10_message(ANPRO10_Reader *, u8_t *, s32_t)
                                       20
     __sti__routine()                   4
     anpro_handle_message_q(ANPRO_TCP_Server *)
                                       20
     anpro_server_debug(ANPRO_TCP_Server *, char *)
                                       16
     anpro_server_debug_handler(ANPRO_TCP_Server *)
                                       40
     anpro_server_deinit_connection(__anpro_connection *)
                                        8
     anpro_server_do_post_select(ANPRO_TCP_Server *, fd_set *, fd_set *)
                                       32
     anpro_server_handle_rx_event(__anpro_connection *)
                                      136
     anpro_server_handle_tx_event(__anpro_connection *)
                                      152
     anpro_server_init(ANPRO_TCP_Server *, u16_t, u8_t, u16_t, u16_t)
                                      104
     anpro_server_init_new_connection(ANPRO_TCP_Server *, s32_t, sockaddr_in *, u8_t)
                                       28
     anpro_server_post_message_normal(ANPRO_TCP_Server *, void *, int)
                                        8
     anpro_server_post_message_urgent(ANPRO_TCP_Server *, void *, int)
                                        8
     anpro_server_reinit_udp(SGTimerElem *)
                                       12
     anpro_server_thread(void *)       68
     anpro_server_tx_broadcast(ANPRO_TCP_Server *, u8_t *, s32_t)
                                       40
     anpro_timer_tick_callback()        8
     anpro_tx_timer_callback(SGTimerElem *)
                                        4
     is_this_port_for_anpro_tcp_server(TSNUart *)
                                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     __sti__routine()                 32
     fake_uart_port_for_tcp          224
     anpro_server_init_new_connection(ANPRO_TCP_Server *, s32_t, sockaddr_in *, u8_t)
                                     372
     anpro_server_deinit_connection(__anpro_connection *)
                                     108
     anpro_tx_timer_callback(SGTimerElem *)
                                      20
     anpro_server_handle_rx_event(__anpro_connection *)
                                      92
     anpro_server_handle_tx_event(__anpro_connection *)
                                     224
     anpro_server_tx_broadcast(ANPRO_TCP_Server *, u8_t *, s32_t)
                                     232
     anpro_server_do_post_select(ANPRO_TCP_Server *, fd_set *, fd_set *)
                                     364
     anpro_server_reinit_udp(SGTimerElem *)
                                     116
     anpro_server_thread(void *)     816
     anpro_handle_message_q(ANPRO_TCP_Server *)
                                     292
     anpro_timer_tick_callback()      48
     __on_rx_anpro10_message(ANPRO10_Reader *, u8_t *, s32_t)
                                      84
     __on_anpro10_tx_req(ANPRO_TCP_Server *, u8_t *, s32_t, u8_t)
                                     408
     anpro_server_debug_handler(ANPRO_TCP_Server *)
                                     332
     anpro_server_debug(ANPRO_TCP_Server *, char *)
                                      80
     anpro_server_init(ANPRO_TCP_Server *, u16_t, u8_t, u16_t, u16_t)
                                     324
     anpro_server_post_message_urgent(ANPRO_TCP_Server *, void *, int)
                                      84
     anpro_server_post_message_normal(ANPRO_TCP_Server *, void *, int)
                                      84
     is_this_port_for_anpro_tcp_server(TSNUart *)
                                      24
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable10                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ?<Constant "======== Connected Cl...">
                                     276
     ?<Constant "anpro_server">       16
      Others                         808

 
 4 936 bytes in segment CODE
   304 bytes in segment DATA_C
   228 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 4 164 bytes of CODE  memory (+ 788 bytes shared)
   304 bytes of CONST memory
   228 bytes of DATA  memory

Errors: none
Warnings: none
