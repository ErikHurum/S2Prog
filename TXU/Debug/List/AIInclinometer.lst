##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIInclinometer.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\AIInclinometer.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIInclinometer.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIInclinometer.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIInclinometer.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_1,??append??rA_1
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIInclinometer::AIInclinometer(int SnsType) {
   \                     ??AIInclinometer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   38009FE5           LDR      R0,??AIInclinometer_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     10              Type                = SnsType;
   \   0000001C   A05084E5           STR      R5,[R4, #+160]
     11              BasicSensorType     = AI_SENSOR_INCLINOMETER;
   \   00000020   0A00A0E3           MOV      R0,#+10
   \   00000024   100184E5           STR      R0,[R4, #+272]
     12              BasicSensorTypeWord = L_WORD551;    //Inclinometer
   \   00000028   2700A0E3           MOV      R0,#+39
   \   0000002C   800F80E3           ORR      R0,R0,#0x200
   \   00000030   140184E5           STR      R0,[R4, #+276]
     13              Location            = C_AI_LOC_SYSTEM; // Start with this
   \   00000034   E500A0E3           MOV      R0,#+229
   \   00000038   800E80E3           ORR      R0,R0,#0x800
   \   0000003C   280184E5           STR      R0,[R4, #+296]
     14              Sign                = 1.0;
   \   00000040   FE05A0E3           MOV      R0,#+1065353216
   \   00000044   640184E5           STR      R0,[R4, #+356]
     15          
     16          }
   \   00000048   0400B0E1           MOVS     R0,R4
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     ??AIInclinometer_1:
   \   00000054   ........           DC32     ??__vtbl
     17          //---------------------------------------------------------------------------
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          AIInclinometer::~AIInclinometer(void) {
   \                     `?~AIInclinometer`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AIInclinometer_1`
     20          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AIInclinometer_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIInclinometer_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     21          //---------------------------------------------------------------------------
     22          
     23          
     24          ///////////////////////////////////////////////////////////////
     25          //
     26          // Routines for the Configuration
     27          //
     28          ///////////////////////////////////////////////////////////////
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void AIInclinometer::SetSign(float Sgn) {
     31              Sign = Sgn;
   \                     ??SetSign:
   \   00000000   641180E5           STR      R1,[R0, #+356]
     32          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
     33          
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          AnsiString AIInclinometer::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   62DF4DE2           SUB      SP,SP,#+392
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     36              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
   \   00000014   012096E2           ADDS     R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     37              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
   \   00000024   022096E2           ADDS     R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     38              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
   \   00000034   032096E2           ADDS     R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   540F8DE2           ADD      R0,SP,#+336
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     39              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
   \   00000044   042096E2           ADDS     R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   4D0F8DE2           ADD      R0,SP,#+308
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     40              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
   \   00000054   052096E2           ADDS     R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   460F8DE2           ADD      R0,SP,#+280
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     41              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
   \   00000064   062096E2           ADDS     R2,R6,#+6
   \   00000068   0910A0E3           MOV      R1,#+9
   \   0000006C   FC008DE2           ADD      R0,SP,#+252
   \   00000070   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     42              AnsiString LocalString;
   \   00000074   0500B0E1           MOVS     R0,R5
   \   00000078   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     43              LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   0000007C   A01094E5           LDR      R1,[R4, #+160]
   \   00000080   8C008DE2           ADD      R0,SP,#+140
   \   00000084   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000088   8C208DE2           ADD      R2,SP,#+140
   \   0000008C   0D10B0E1           MOVS     R1,SP
   \   00000090   A8008DE2           ADD      R0,SP,#+168
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   EC209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   0000009C   A8108DE2           ADD      R1,SP,#+168
   \   000000A0   C4008DE2           ADD      R0,SP,#+196
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   C4108DE2           ADD      R1,SP,#+196
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000B4   C4008DE2           ADD      R0,SP,#+196
   \   000000B8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000BC   A8008DE2           ADD      R0,SP,#+168
   \   000000C0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000C4   8C008DE2           ADD      R0,SP,#+140
   \   000000C8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     44              LocalString += AnalogInput::MakeConfigString();   //common
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   70108DE2           ADD      R1,SP,#+112
   \   000000D4   0400B0E1           MOVS     R0,R4
   \   000000D8   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000DC   70108DE2           ADD      R1,SP,#+112
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000E8   70008DE2           ADD      R0,SP,#+112
   \   000000EC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     45          
     46              LocalString += TabStr1 + KeyWord(C_AI_END) + CrLfStr;
   \   000000F0   9810A0E3           MOV      R1,#+152
   \   000000F4   801E81E3           ORR      R1,R1,#0x800
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000100   1C208DE2           ADD      R2,SP,#+28
   \   00000104   0D10B0E1           MOVS     R1,SP
   \   00000108   38008DE2           ADD      R0,SP,#+56
   \   0000010C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000110   74209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000114   38108DE2           ADD      R1,SP,#+56
   \   00000118   54008DE2           ADD      R0,SP,#+84
   \   0000011C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000120   54108DE2           ADD      R1,SP,#+84
   \   00000124   0500B0E1           MOVS     R0,R5
   \   00000128   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   0000012C   54008DE2           ADD      R0,SP,#+84
   \   00000130   ........           _BLF     `?~string`,`?~string??rA`
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     `?~string`,`?~string??rA`
   \   0000013C   1C008DE2           ADD      R0,SP,#+28
   \   00000140   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     47              LocalString += CrLfStr;
   \   00000144   40109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   00000148   0500B0E1           MOVS     R0,R5
   \   0000014C   ........           _BLF     `??operator+=`,`??operator+=??rA`
     48          
     49              return (LocalString);
   \   00000150   FC008DE2           ADD      R0,SP,#+252
   \   00000154   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000158   460F8DE2           ADD      R0,SP,#+280
   \   0000015C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000160   4D0F8DE2           ADD      R0,SP,#+308
   \   00000164   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000168   540F8DE2           ADD      R0,SP,#+336
   \   0000016C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000170   5B0F8DE2           ADD      R0,SP,#+364
   \   00000174   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000178   0D00B0E1           MOVS     R0,SP
   \   0000017C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000180   62DF8DE2           ADD      SP,SP,#+392      ;; stack cleaning
   \   00000184   7040BDE8           POP      {R4-R6,LR}
   \   00000188   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   0000018C   ........           DC32     CrLfStr
     50              //ConfigString.AddString(LocalString);
     51          }
     52          //---------------------------------------------------------------------------
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          bool AIInclinometer::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     55              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0060B0E1           MOVS     R6,R0
     56              int ErrorLine = 0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     57              int Key;
     58              do {
     59                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0D20B0E1           MOVS     R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0500B0E1           MOVS     R0,R5
   \   00000030   ........           _BLF     ??NextWord,??NextWord??rA
     60                  if ( ErrorLine ) {
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0A00000A           BEQ      ??LoadConfigString_4
     61                      if ( ErrorLine != EOF ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   2900000A           BEQ      ??LoadConfigString_5
     62                          GiveConfigWarning("Inclinometer sensor", ErrorLine);
   \   0000004C   DC109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Inclinometer sensor">`
   \   00000050   74008DE2           ADD      R0,SP,#+116
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   74008DE2           ADD      R0,SP,#+116
   \   00000064   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000068   210000EA           B        ??LoadConfigString_5
     63                      }
     64                  } else {
     65                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   58008DE2           ADD      R0,SP,#+88
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000078   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   58008DE2           ADD      R0,SP,#+88
   \   00000084   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     66                      switch ( Key ) {
   \   00000088   0700B0E1           MOVS     R0,R7
   \   0000008C   980040E2           SUB      R0,R0,#+152
   \   00000090   800E40E2           SUB      R0,R0,#+2048
   \   00000094   010050E3           CMP      R0,#+1
   \   00000098   0300008A           BHI      ??LoadConfigString_7
   \   0000009C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   000000A0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000000A8   120F0000           DC8      +18,+15,+0,+0
     67                      default:
     68                          GiveConfigWarning("Inclinometer sensor", InputKeyWord, ConfigString.LineCount);
   \                     ??LoadConfigString_7:
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   3C008DE2           ADD      R0,SP,#+60
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   0080B0E1           MOVS     R8,R0
   \   000000BC   6C109FE5           LDR      R1,??LoadConfigString_6  ;; `?<Constant "Inclinometer sensor">`
   \   000000C0   20008DE2           ADD      R0,SP,#+32
   \   000000C4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000000C8   1C2095E5           LDR      R2,[R5, #+28]
   \   000000CC   0810B0E1           MOVS     R1,R8
   \   000000D0   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000000D4   3C008DE2           ADD      R0,SP,#+60
   \   000000D8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000DC   20008DE2           ADD      R0,SP,#+32
   \   000000E0   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000E4   020000EA           B        ??LoadConfigString_5
     69                          break;
     70                      case C_AI_START_COMMON:
     71                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_8:
   \   000000E8   0510B0E1           MOVS     R1,R5
   \   000000EC   0400B0E1           MOVS     R0,R4
   \   000000F0   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     72                          break;
     73                      case C_AI_END:
     74                          break;
     75                      }
     76                  }
     77              }while ( NoError && (ErrorLine != EOF) && (Key != C_AI_END) );
   \                     ??LoadConfigString_5:
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000FC   000056E3           CMP      R6,#+0
   \   00000100   0600000A           BEQ      ??LoadConfigString_9
   \   00000104   00009DE5           LDR      R0,[SP, #+0]
   \   00000108   010070E3           CMN      R0,#+1
   \   0000010C   0300000A           BEQ      ??LoadConfigString_9
   \   00000110   9800A0E3           MOV      R0,#+152
   \   00000114   800E80E3           ORR      R0,R0,#0x800
   \   00000118   000057E1           CMP      R7,R0
   \   0000011C   BFFFFF1A           BNE      ??LoadConfigString_3
     78              return (NoError);
   \                     ??LoadConfigString_9:
   \   00000120   0600B0E1           MOVS     R0,R6
   \   00000124   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   00000128   F041BDE8           POP      {R4-R8,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_6:
   \   00000130   ........           DC32     `?<Constant "Inclinometer sensor">`
     79          }
     80          //---------------------------------------------------------------------------
     81          
     82          ///////////////////////////////////////////////////////////////
     83          //
     84          // Routines for the librarian for input
     85          //
     86          ///////////////////////////////////////////////////////////////
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          int AIInclinometer::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   01A0B0E1           MOVS     R10,R1
   \   00000010   02B0B0E1           MOVS     R11,R2
   \   00000014   0390B0E1           MOVS     R9,R3
   \   00000018   8050DDE5           LDRB     R5,[SP, #+128]
   \   0000001C   84609DE5           LDR      R6,[SP, #+132]
     89              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
     90              switch ( ValueId ) {
   \   00000030   0A00B0E1           MOVS     R0,R10
   \   00000034   B50040E2           SUB      R0,R0,#+181
   \   00000038   400E40E2           SUB      R0,R0,#+1024
   \   0000003C   030050E3           CMP      R0,#+3
   \   00000040   3300008A           BHI      ??PutValue_3
   \   00000044   011F8FE2           ADR      R1,??PutValue_1
   \   00000048   0010D1E7           LDRB     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000050   0030301B           DC8      +0,+48,+48,+27
     91              case SVT_AI_OFFSET   :
     92                  Offset = ConvertToSi(NewValue, ValUnitId = ANGLE_UNIT, Status, -3.0, 3.0, Offset);
   \                     ??PutValue_4:
   \   00000054   0A70A0E3           MOV      R7,#+10
   \   00000058   04708DE5           STR      R7,[SP, #+4]
   \   0000005C   0910B0E1           MOVS     R1,R9
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000068   0080B0E1           MOVS     R8,R0
   \   0000006C   400194E5           LDR      R0,[R4, #+320]
   \   00000070   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   4014A0E3           MOV      R1,#+1073741824
   \   00000080   801A81E3           ORR      R1,R1,#0x80000
   \   00000084   03002DE9           PUSH     {R0,R1}
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   C014A0E3           MOV      R1,#-1073741824
   \   00000090   801A81E3           ORR      R1,R1,#0x80000
   \   00000094   03002DE9           PUSH     {R0,R1}
   \   00000098   18208DE2           ADD      R2,SP,#+24
   \   0000009C   0710B0E1           MOVS     R1,R7
   \   000000A0   0800B0E1           MOVS     R0,R8
   \   000000A4   0800BDE8           POP      {R3}
   \   000000A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000AC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000B0   400184E5           STR      R0,[R4, #+320]
   \   000000B4   40008DE2           ADD      R0,SP,#+64
   \   000000B8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000BC   240000EA           B        ??PutValue_5
     93                  break;
     94              case SVT_AI_CALC_VAL :
     95                  Status = AdjustSensor(NewValue, ValUnitId = ANGLE_UNIT, -3.0, 3.0, Local);
   \                     ??PutValue_6:
   \   000000C0   0A70A0E3           MOV      R7,#+10
   \   000000C4   04708DE5           STR      R7,[SP, #+4]
   \   000000C8   0910B0E1           MOVS     R1,R9
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000D4   0510B0E1           MOVS     R1,R5
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   4014A0E3           MOV      R1,#+1073741824
   \   000000E0   401881E3           ORR      R1,R1,#0x400000
   \   000000E4   02002DE9           PUSH     {R1}
   \   000000E8   C034A0E3           MOV      R3,#-1073741824
   \   000000EC   403883E3           ORR      R3,R3,#0x400000
   \   000000F0   0720B0E1           MOVS     R2,R7
   \   000000F4   0010B0E1           MOVS     R1,R0
   \   000000F8   0400B0E1           MOVS     R0,R4
   \   000000FC   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   00000100   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000104   00008DE5           STR      R0,[SP, #+0]
   \   00000108   24008DE2           ADD      R0,SP,#+36
   \   0000010C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000110   0F0000EA           B        ??PutValue_5
     96                  break;
     97              default:
     98                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   00000114   0910B0E1           MOVS     R1,R9
   \   00000118   08008DE2           ADD      R0,SP,#+8
   \   0000011C   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000120   0030B0E1           MOVS     R3,R0
   \   00000124   04008DE2           ADD      R0,SP,#+4
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   0500B0E1           MOVS     R0,R5
   \   00000130   01002DE9           PUSH     {R0}
   \   00000134   0B20B0E1           MOVS     R2,R11
   \   00000138   0A10B0E1           MOVS     R1,R10
   \   0000013C   0400B0E1           MOVS     R0,R4
   \   00000140   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000144   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000148   00008DE5           STR      R0,[SP, #+0]
   \   0000014C   08008DE2           ADD      R0,SP,#+8
   \   00000150   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     99                  break;
    100              }
    101              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_5:
   \   00000154   00009DE5           LDR      R0,[SP, #+0]
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   0500001A           BNE      ??PutValue_7
    102                  SetModifiedFlag();
   \   00000160   A40094E5           LDR      R0,[R4, #+164]
   \   00000164   541090E2           ADDS     R1,R0,#+84
   \   00000168   0400B0E1           MOVS     R0,R4
   \   0000016C   001091E5           LDR      R1,[R1, #+0]
   \   00000170   0FE0A0E1           MOV      LR,PC
   \   00000174   11FF2FE1           BX       R1
    103              }
    104              if ( UnitId ) {
   \                     ??PutValue_7:
   \   00000178   000056E3           CMP      R6,#+0
   \   0000017C   0100000A           BEQ      ??PutValue_8
    105                  *UnitId = ValUnitId;
   \   00000180   04009DE5           LDR      R0,[SP, #+4]
   \   00000184   000086E5           STR      R0,[R6, #+0]
    106              }
    107              return (Status);
   \                     ??PutValue_8:
   \   00000188   00009DE5           LDR      R0,[SP, #+0]
   \   0000018C   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   00000190   F04FBDE8           POP      {R4-R11,LR}
   \   00000194   1EFF2FE1           BX       LR               ;; return
    108          }
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          int  AIInclinometer::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
    111              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
    112              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1D00008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   001A1A07           DC8      +0,+26,+26,+7
    113              case SVT_AI_OFFSET   :
    114                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
    115                  DecPnt     = 2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   000088E5           STR      R0,[R8, #+0]
    116                  Unit       = ANGLE_UNIT;
   \   00000058   0A00A0E3           MOV      R0,#+10
   \   0000005C   000089E5           STR      R0,[R9, #+0]
   \   00000060   1D0000EA           B        ??GetValue_5
    117                  break;
    118              case SVT_AI_CALC_VAL :
    119                  if ( !CanCalculate() ) {
   \                     ??GetValue_6:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0200001A           BNE      ??GetValue_7
    120                      Status = GETVAL_FLOAT_NOT_LEGAL;
   \   00000074   0500A0E3           MOV      R0,#+5
   \   00000078   00A0B0E1           MOVS     R10,R0
   \   0000007C   060000EA           B        ??GetValue_8
    121                  } else {
    122                      MyRetValue = Calculate();
   \                     ??GetValue_7:
   \   00000080   A40094E5           LDR      R0,[R4, #+164]
   \   00000084   601090E2           ADDS     R1,R0,#+96
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   001091E5           LDR      R1,[R1, #+0]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
   \   00000098   000087E5           STR      R0,[R7, #+0]
    123                  }
    124                  DecPnt     = 2;
   \                     ??GetValue_8:
   \   0000009C   0200A0E3           MOV      R0,#+2
   \   000000A0   000088E5           STR      R0,[R8, #+0]
    125                  Unit       = ANGLE_UNIT;
   \   000000A4   0A00A0E3           MOV      R0,#+10
   \   000000A8   000089E5           STR      R0,[R9, #+0]
   \   000000AC   0A0000EA           B        ??GetValue_5
    126                  break;
    127              default:
    128                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   000000B0   0900B0E1           MOVS     R0,R9
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   0730B0E1           MOVS     R3,R7
   \   000000C4   0620B0E1           MOVS     R2,R6
   \   000000C8   0510B0E1           MOVS     R1,R5
   \   000000CC   0400B0E1           MOVS     R0,R4
   \   000000D0   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000D4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000D8   00A0B0E1           MOVS     R10,R0
    129                  break;
    130              }
    131              return (Status);
   \                     ??GetValue_5:
   \   000000DC   0A00B0E1           MOVS     R0,R10
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return
    132          }
    133          

   \                                 In segment CODE, align 4, keep-with-next
    134          int AIInclinometer::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
    135              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
    136              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
    137              case SVT_AI_UNIT:
    138                  MyString = GetUnitName(ANGLE_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   0A10A0E3           MOV      R1,#+10
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
    139                  break;
    140              default:
    141                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
    142                  break;
    143              }
    144              return (Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    145          }
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          int AIInclinometer::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    148              return (AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    149          }
    150          
    151          ////////////////////////////////////////////////////////// 
    152          /// 
    153          /// Misc routines for calculations
    154          /// 
    155          /// 
    156          ////////////////////////////////////////////////////////// 
    157          // Should support correction of the inclinometer

   \                                 In segment CODE, align 4, keep-with-next
    158          float AIInclinometer::CalculateRaw(void) {
   \                     ??CalculateRaw:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0060B0E1           MOVS     R6,R0
    159              return Gain * FilteredValue * Sign / RAD_FACTOR - Offset;
   \   00000008   3C1196E5           LDR      R1,[R6, #+316]
   \   0000000C   440196E5           LDR      R0,[R6, #+324]
   \   00000010   ........           _BLF     __fMul,??__fMul??rA
   \   00000014   641196E5           LDR      R1,[R6, #+356]
   \   00000018   ........           _BLF     __fMul,??__fMul??rA
   \   0000001C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000020   34209FE5           LDR      R2,??CalculateRaw_1  ;; 0x1a63c1f8
   \   00000024   34309FE5           LDR      R3,??CalculateRaw_1+0x4  ;; 0x404ca5dc
   \   00000028   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   0150A0E1           MOV      R5,R1
   \   00000034   400196E5           LDR      R0,[R6, #+320]
   \   00000038   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0130A0E1           MOV      R3,R1
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   ........           _BLF     __dSub,??__dSub??rA
   \   00000050   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??CalculateRaw_1:
   \   0000005C   F8C1631A           DC32     0x1a63c1f8
   \   00000060   DCA54C40           DC32     0x404ca5dc
    160          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Inclinometer sensor">`:
   \   00000000   496E636C696E       DC8 "Inclinometer sensor"
   \              6F6D65746572
   \              2073656E736F
   \              7200        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIInclinometer &AIInclinometer::new AIInclinometer(int)
   \                     `??new AIInclinometer`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   5C0FA0E3           MOV      R0,#+368
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      `??new AIInclinometer_1`
   \   00000018   0410B0E1           MOVS     R1,R4
   \   0000001C   ........           BL       ??AIInclinometer
   \   00000020   000000EA           B        `??new AIInclinometer_2`
   \                     `??new AIInclinometer_1`:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     `??new AIInclinometer_2`:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1
    161          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIInclinometer::AIInclinometer(int)
                                       12
     AIInclinometer::CalculateRaw()    16
     AIInclinometer::GetStringValue(int, int, AnsiString &)
                                       52
     AIInclinometer::GetValue(int, int, float &, int &, int &)
                                       40
     AIInclinometer::LoadConfigString(TSNConfigString &)
                                      168
     AIInclinometer::MakeConfigString(int)
                                      408
     AIInclinometer::PutFloatValue(int, float)
                                       16
     AIInclinometer::PutValue(int, int, AnsiString, bool, int *)
                                      152
     AIInclinometer::SetSign(float)     0
     AIInclinometer::new AIInclinometer(int)
                                        8
     AIInclinometer::~AIInclinometer()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _String_val::_String_val(char_allocator)
                                       12
     __sti__routine()                   0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     operator+(string const &, string const &)
                                       44
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::append(string const &)   48
     string::assign(string const &)   48
     operator+(string const &, string const &)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIInclinometer::AIInclinometer(int)
                                      88
     AIInclinometer::~AIInclinometer()
                                      56
     AIInclinometer::SetSign(float)    8
     AIInclinometer::MakeConfigString(int)
                                     400
     AIInclinometer::LoadConfigString(TSNConfigString &)
                                     308
     AIInclinometer::PutValue(int, int, AnsiString, bool, int *)
                                     408
     AIInclinometer::GetValue(int, int, float &, int &, int &)
                                     232
     AIInclinometer::GetStringValue(int, int, AnsiString &)
                                     120
     AIInclinometer::PutFloatValue(int, float)
                                      40
     AIInclinometer::CalculateRaw()  100
     ?<Constant "Inclinometer sensor">
                                      20
     AIInclinometer::new AIInclinometer(int)
                                      48
     __sti__routine()                208
      Others                         708

 
 3 024 bytes in segment CODE
   160 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 020 bytes of CODE  memory (+ 1 020 bytes shared)
   160 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
