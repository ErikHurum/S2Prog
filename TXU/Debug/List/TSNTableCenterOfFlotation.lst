##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:48 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNTableCenterOfFlotation.Cpp   #
#    Command line    =  D:\S2Prog\Shared\Src\TSNTableCenterOfFlotation.Cpp   #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNTableCenterOfFlotation.l #
#                       st                                                   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNTableCenterOfFlotation.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNTableCenterOfFlotation.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<CFEntry, allocator<CFEntry>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<CFEntry, allocator<CFEntry>>::_Insert_n(CFEntry *, unsigned int, CFEntry const &)
   \                     ??_Insert_n:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   E05093E8           LDM      R3,{R5-R7,R12,LR}
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   E05082E8           STM      R2,{R5-R7,R12,LR}
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   040000EA           B        ??_Insert_n_1
   \                     ??_Insert_n_2:
   \   00000028   E81092E8           LDM      R2,{R3,R5-R7,R12}
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   014044E2           SUB      R4,R4,#+1
   \   00000034   140080E2           ADD      R0,R0,#+20
   \   00000038   E81081E8           STM      R1,{R3,R5-R7,R12}
   \                     ??_Insert_n_1:
   \   0000003C   000054E3           CMP      R4,#+0
   \   00000040   F8FFFF1A           BNE      ??_Insert_n_2
   \   00000044   14D08DE2           ADD      SP,SP,#+20
   \   00000048   F040BDE8           POP      {R4-R7,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CFEntry * _Vector_impl<CFEntry, allocator<CFEntry>>::_Make_room(CFEntry *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   070040E0           SUB      R0,R0,R7
   \   0000001C   1410A0E3           MOV      R1,#+20
   \   00000020   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000024   0160A0E1           MOV      R6,R1
   \   00000028   070043E0           SUB      R0,R3,R7
   \   0000002C   1410A0E3           MOV      R1,#+20
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   2D00000A           BEQ      ??_Make_room_1
   \   0000003C   BC009FE5           LDR      R0,??_Make_room_2  ;; 0xccccccc
   \   00000040   017040E0           SUB      R7,R0,R1
   \   00000044   020057E1           CMP      R7,R2
   \   00000048   2900003A           BCC      ??_Make_room_1
   \   0000004C   1480A0E3           MOV      R8,#+20
   \   00000050   980207E0           MUL      R7,R8,R2
   \   00000054   018082E0           ADD      R8,R2,R1
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   1D00002A           BCS      ??_Make_room_3
   \   00000060   A610A0E1           LSR      R1,R6,#+1
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   0060A033           MOVCC    R6,#+0
   \   00000070   06608120           ADDCS    R6,R1,R6
   \   00000074   080056E1           CMP      R6,R8
   \   00000078   0860A031           MOVCC    R6,R8
   \   0000007C   1410A0E3           MOV      R1,#+20
   \   00000080   910600E0           MUL      R0,R1,R6
   \   00000084   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000088   0090A0E1           MOV      R9,R0
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   0920A0E1           MOV      R2,R9
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   0A2087E0           ADD      R2,R7,R10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000B8   1400A0E3           MOV      R0,#+20
   \   000000BC   909621E0           MLA      R1,R0,R6,R9
   \   000000C0   081084E5           STR      R1,[R4, #+8]
   \   000000C4   909821E0           MLA      R1,R0,R8,R9
   \   000000C8   041084E5           STR      R1,[R4, #+4]
   \   000000CC   009084E5           STR      R9,[R4, #+0]
   \   000000D0   0A50A0E1           MOV      R5,R10
   \   000000D4   060000EA           B        ??_Make_room_1
   \                     ??_Make_room_3:
   \   000000D8   032087E0           ADD      R2,R7,R3
   \   000000DC   0310A0E1           MOV      R1,R3
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000E8   040094E5           LDR      R0,[R4, #+4]
   \   000000EC   000087E0           ADD      R0,R7,R0
   \   000000F0   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   F047BDE8           POP      {R4-R10,LR}
   \   000000FC   1EFF2FE1           BX       LR               ;; return
   \                     ??_Make_room_2:
   \   00000100   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<CFEntry, allocator<CFEntry>>::_Push_back0(CFEntry const &)
   \                     ??_Push_back0:
   \   00000000   D0472DE9           PUSH     {R4,R6-R10,LR}
   \   00000004   082090E5           LDR      R2,[R0, #+8]
   \   00000008   0130A0E1           MOV      R3,R1
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   020051E1           CMP      R1,R2
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   0A00002A           BCS      ??_Push_back0_1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   C00793E8           LDM      R3,{R6-R10}
   \   00000024   0C40A0E1           MOV      R4,R12
   \   00000028   012042E2           SUB      R2,R2,#+1
   \   0000002C   14C08CE2           ADD      R12,R12,#+20
   \   00000030   C00784E8           STM      R4,{R6-R10}
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   F8FFFF1A           BNE      ??_Push_back0_2
   \   0000003C   141081E2           ADD      R1,R1,#+20
   \   00000040   041080E5           STR      R1,[R0, #+4]
   \   00000044   000000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000048   ........           _BLF     ??_Insert_n,??_Insert_n??rA
   \                     ??_Push_back0_3:
   \   0000004C   D047BDE8           POP      {R4,R6-R10,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          //---------------------------------------------------------------------------
      4          
      5          //////////////////////////////////////////////////////////////////
      6          //
      7          //	Linear table
      8          //
      9          //
     10          /////////////////////////////////////////////////////////////////
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          TSNTableCenterOfFlotation::TSNTableCenterOfFlotation(int TabType):TSNTable(TabType)
   \                     ??TSNTableCenterOfFlotation:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     13          {
   \   0000000C   ........           _BLF     ??TSNTable,??TSNTable??rA
   \   00000010   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0C0084E5           STR      R0,[R4, #+12]
   \   0000001C   140084E2           ADD      R0,R4,#+20
   \   00000020   001080E5           STR      R1,[R0, #+0]
   \   00000024   041080E5           STR      R1,[R0, #+4]
   \   00000028   081080E5           STR      R1,[R0, #+8]
     14          	switch ( TabType ) {
   \   0000002C   9800A0E3           MOV      R0,#+152
   \   00000030   500E80E3           ORR      R0,R0,#0x500
   \   00000034   000055E1           CMP      R5,R0
     15          	case C_T_COF_TABLE:
     16          	default:
     17          		IsCGTable = false;
   \   00000038   0000A013           MOVNE    R0,#+0
     18          		break;
     19          	case C_T_COG_TABLE:
     20          		IsCGTable = true;
   \   0000003C   0100A003           MOVEQ    R0,#+1
   \   00000040   1000C4E5           STRB     R0,[R4, #+16]
     21          		break;
     22          	}
     23          	DualTable = false;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   1100C4E5           STRB     R0,[R4, #+17]
     24          }
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          void TSNTableCenterOfFlotation::ReadTable(TSNConfigString &ConfigInputLines, int &ErrorStatus)
     27          {
   \                     ??ReadTable:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
     28          	if ( IsCGTable ) {
   \   0000000C   1000D4E5           LDRB     R0,[R4, #+16]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   9E70A0E3           MOV      R7,#+158
   \   0000001C   507E87E3           ORR      R7,R7,#0x500
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2100000A           BEQ      ??ReadTable_1
     29          		do {
     30          			CFEntry tmpEntry;
     31          			tmpEntry.Level = ConfigInputLines.ReadDouble(ErrorStatus,C_T_TABLE_END);
   \                     ??ReadTable_2:
   \   00000028   0720A0E1           MOV      R2,R7
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000038   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000003C   00008DE5           STR      R0,[SP, #+0]
     32          			if ( !ErrorStatus ) {
   \   00000040   000096E5           LDR      R0,[R6, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1400001A           BNE      ??ReadTable_3
     33          				tmpEntry.LCG = ConfigInputLines.ReadDouble(ErrorStatus);
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000005C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000060   08008DE5           STR      R0,[SP, #+8]
     34          				if ( !ErrorStatus ) {
   \   00000064   000096E5           LDR      R0,[R6, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0B00001A           BNE      ??ReadTable_3
     35          					tmpEntry.TCG = ConfigInputLines.ReadDouble(ErrorStatus);
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000080   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000084   10008DE5           STR      R0,[SP, #+16]
     36          					if ( !ErrorStatus ) {
   \   00000088   000096E5           LDR      R0,[R6, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0200001A           BNE      ??ReadTable_3
     37          						Table.push_back(tmpEntry);
   \   00000094   0D10A0E1           MOV      R1,SP
   \   00000098   140084E2           ADD      R0,R4,#+20
   \   0000009C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     38          					}
     39          				}
     40          			}
     41          		} while ( !ErrorStatus );
   \                     ??ReadTable_3:
   \   000000A0   000096E5           LDR      R0,[R6, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   2100001A           BNE      ??ReadTable_4
   \   000000AC   DDFFFFEA           B        ??ReadTable_2
     42          	} else {
     43          		do {
     44          			CFEntry tmpEntry;
     45          			tmpEntry.Level = ConfigInputLines.ReadDouble(ErrorStatus,C_T_TABLE_END);
   \                     ??ReadTable_1:
   \   000000B0   0720A0E1           MOV      R2,R7
   \   000000B4   0610A0E1           MOV      R1,R6
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000000C0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000C4   00008DE5           STR      R0,[SP, #+0]
     46          			if ( !ErrorStatus ) {
   \   000000C8   000096E5           LDR      R0,[R6, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   1400001A           BNE      ??ReadTable_5
     47          				tmpEntry.LCF = ConfigInputLines.ReadDouble(ErrorStatus);
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0610A0E1           MOV      R1,R6
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000000E4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000E8   04008DE5           STR      R0,[SP, #+4]
     48          				if ( !ErrorStatus ) {
   \   000000EC   000096E5           LDR      R0,[R6, #+0]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0B00001A           BNE      ??ReadTable_5
     49          					tmpEntry.TCF = ConfigInputLines.ReadDouble(ErrorStatus);
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0610A0E1           MOV      R1,R6
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000108   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000010C   0C008DE5           STR      R0,[SP, #+12]
     50          					if ( !ErrorStatus ) {
   \   00000110   000096E5           LDR      R0,[R6, #+0]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   0200001A           BNE      ??ReadTable_5
     51          						Table.push_back(tmpEntry);
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   140084E2           ADD      R0,R4,#+20
   \   00000124   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     52          					}
     53          				}
     54          			}
     55          		} while ( !ErrorStatus );
   \                     ??ReadTable_5:
   \   00000128   000096E5           LDR      R0,[R6, #+0]
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   DEFFFF0A           BEQ      ??ReadTable_1
     56          	}
     57          	if ( ErrorStatus == END_FOUND ) {
   \                     ??ReadTable_4:
   \   00000134   000096E5           LDR      R0,[R6, #+0]
   \   00000138   020070E3           CMN      R0,#+2
     58          		// End found, Permitted in this case, so ErrorStatus set to 0
     59          		ErrorStatus = 0;
   \   0000013C   0000A003           MOVEQ    R0,#+0
   \   00000140   00008605           STREQ    R0,[R6, #+0]
     60          	}
     61          }
   \   00000144   14D08DE2           ADD      SP,SP,#+20
   \   00000148   F040BDE8           POP      {R4-R7,LR}
   \   0000014C   1EFF2FE1           BX       LR               ;; return
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          TSNTableCenterOfFlotation::~TSNTableCenterOfFlotation(void)
     64          {
   \                     `?~TSNTableCenterOfFlotation`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     65          }
   \   0000000C   145084E2           ADD      R5,R4,#+20
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   000085E5           STR      R0,[R5, #+0]
   \   00000024   040085E5           STR      R0,[R5, #+4]
   \   00000028   080085E5           STR      R0,[R5, #+8]
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     `?~TSNTable`,`?~TSNTable??rA`
   \   00000034                      REQUIRE ?Subroutine13
   \   00000034                      ;; // Fall through to label ?Subroutine13
     66          //---------------------------------------------------------------------------
     67          
     68          ///////////////////////////////////////////////////////////////
     69          //
     70          // Routines for the Configuration
     71          //
     72          ///////////////////////////////////////////////////////////////
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          AnsiString TSNTableCenterOfFlotation::MakeConfigString(int ExtraTabs)
     75          {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     76          	AnsiString LocalString;
     77          	LocalString +=TabStr1+KeyWord(C_T_COF_TABLE)+CrLfStr;
   \   00000004   B4679FE5           LDR      R6,??MakeConfigString_1  ;; TabStr1
   \   00000008   B4779FE5           LDR      R7,??MakeConfigString_1+0x4  ;; CrLfStr
   \   0000000C   C4DF4DE2           SUB      SP,SP,#+784
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000020   9710A0E3           MOV      R1,#+151
   \   00000024   501E81E3           ORR      R1,R1,#0x500
   \   00000028   5B0F8DE2           ADD      R0,SP,#+364
   \   0000002C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000030   5B2F8DE2           ADD      R2,SP,#+364
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   540F8DE2           ADD      R0,SP,#+336
   \   0000003C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000040   0720A0E1           MOV      R2,R7
   \   00000044   541F8DE2           ADD      R1,SP,#+336
   \   00000048   4D0F8DE2           ADD      R0,SP,#+308
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   ........           LDR      R0,??DataTable3  ;; ??npos
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   008090E5           LDR      R8,[R0, #+0]
   \   0000005C   4D1F8DE2           ADD      R1,SP,#+308
   \   00000060   0830A0E1           MOV      R3,R8
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     ??append,??append??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   4D0F8DE2           ADD      R0,SP,#+308
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   540F8DE2           ADD      R0,SP,#+336
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   5B0F8DE2           ADD      R0,SP,#+364
   \   00000098   ........           _BLF     ??_Tidy,??_Tidy??rA
     78          	LocalString +=TabStr2+KeyWord(C_T_TABLEOFFSET)+FloatToAnsiString(TableOffset)+CrLfStr;
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   0330A0E3           MOV      R3,#+3
   \   000000A4   0720A0E3           MOV      R2,#+7
   \   000000A8   7E0F8DE2           ADD      R0,SP,#+504
   \   000000AC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000000B0   9310A0E3           MOV      R1,#+147
   \   000000B4   501E81E3           ORR      R1,R1,#0x500
   \   000000B8   770F8DE2           ADD      R0,SP,#+476
   \   000000BC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000C0   00179FE5           LDR      R1,??MakeConfigString_1+0x8  ;; TabStr2
   \   000000C4   772F8DE2           ADD      R2,SP,#+476
   \   000000C8   700F8DE2           ADD      R0,SP,#+448
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   7E2F8DE2           ADD      R2,SP,#+504
   \   000000D4   701F8DE2           ADD      R1,SP,#+448
   \   000000D8   690F8DE2           ADD      R0,SP,#+420
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   0720A0E1           MOV      R2,R7
   \   000000E4   691F8DE2           ADD      R1,SP,#+420
   \   000000E8   620F8DE2           ADD      R0,SP,#+392
   \   000000EC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F0   0830A0E1           MOV      R3,R8
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   621F8DE2           ADD      R1,SP,#+392
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   620F8DE2           ADD      R0,SP,#+392
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   690F8DE2           ADD      R0,SP,#+420
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   7E0F8DE2           ADD      R0,SP,#+504
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   700F8DE2           ADD      R0,SP,#+448
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   770F8DE2           ADD      R0,SP,#+476
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
     79          	LocalString +=TabStr2+KeyWord(C_LC_TABLE_ORDER);
   \   00000154   4110A0E3           MOV      R1,#+65
   \   00000158   9C1D81E3           ORR      R1,R1,#0x2700
   \   0000015C   8C0F8DE2           ADD      R0,SP,#+560
   \   00000160   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000164   5C169FE5           LDR      R1,??MakeConfigString_1+0x8  ;; TabStr2
   \   00000168   8C2F8DE2           ADD      R2,SP,#+560
   \   0000016C   850F8DE2           ADD      R0,SP,#+532
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   0830A0E1           MOV      R3,R8
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   851F8DE2           ADD      R1,SP,#+532
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   ........           _BLF     ??append,??append??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   850F8DE2           ADD      R0,SP,#+532
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   8C0F8DE2           ADD      R0,SP,#+560
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   1100D4E5           LDRB     R0,[R4, #+17]
   \   000001AC   9E90A0E3           MOV      R9,#+158
   \   000001B0   9C9D89E3           ORR      R9,R9,#0x2700
   \   000001B4   01A089E3           ORR      R10,R9,#0x1
   \   000001B8   0BB049E2           SUB      R11,R9,#+11
   \   000001BC   0A10C9E3           BIC      R1,R9,#0xA
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   8800000A           BEQ      ??MakeConfigString_2
     80          	if ( DualTable ) {
     81          		LocalString +=TabStr1+KeyWord(C_LC_LCG) + TabStr1+KeyWord(C_LC_TCG);
   \   000001C8   A8008DE2           ADD      R0,SP,#+168
   \   000001CC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001D0   0B10A0E1           MOV      R1,R11
   \   000001D4   460F8DE2           ADD      R0,SP,#+280
   \   000001D8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001DC   462F8DE2           ADD      R2,SP,#+280
   \   000001E0   0610A0E1           MOV      R1,R6
   \   000001E4   FC008DE2           ADD      R0,SP,#+252
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0620A0E1           MOV      R2,R6
   \   000001F0   FC108DE2           ADD      R1,SP,#+252
   \   000001F4   E0008DE2           ADD      R0,SP,#+224
   \   000001F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001FC   A8208DE2           ADD      R2,SP,#+168
   \   00000200   E0108DE2           ADD      R1,SP,#+224
   \   00000204   C4008DE2           ADD      R0,SP,#+196
   \   00000208   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000020C   0830A0E1           MOV      R3,R8
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   C4108DE2           ADD      R1,SP,#+196
   \   00000218   0500A0E1           MOV      R0,R5
   \   0000021C   ........           _BLF     ??append,??append??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   C4008DE2           ADD      R0,SP,#+196
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   A8008DE2           ADD      R0,SP,#+168
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   E0008DE2           ADD      R0,SP,#+224
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   FC008DE2           ADD      R0,SP,#+252
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   460F8DE2           ADD      R0,SP,#+280
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
     82          		LocalString +=TabStr1+KeyWord(C_LC_LCF) + TabStr1+KeyWord(C_LC_TCF)+CrLfStr;
   \   00000270   0A10A0E1           MOV      R1,R10
   \   00000274   8C008DE2           ADD      R0,SP,#+140
   \   00000278   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000027C   0910A0E1           MOV      R1,R9
   \   00000280   70008DE2           ADD      R0,SP,#+112
   \   00000284   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000288   70208DE2           ADD      R2,SP,#+112
   \   0000028C   0610A0E1           MOV      R1,R6
   \   00000290   54008DE2           ADD      R0,SP,#+84
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   0620A0E1           MOV      R2,R6
   \   0000029C   54108DE2           ADD      R1,SP,#+84
   \   000002A0   38008DE2           ADD      R0,SP,#+56
   \   000002A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A8   8C208DE2           ADD      R2,SP,#+140
   \   000002AC   38108DE2           ADD      R1,SP,#+56
   \   000002B0   1C008DE2           ADD      R0,SP,#+28
   \   000002B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002B8   0720A0E1           MOV      R2,R7
   \   000002BC   1C108DE2           ADD      R1,SP,#+28
   \   000002C0   0D00A0E1           MOV      R0,SP
   \   000002C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002C8   0830A0E1           MOV      R3,R8
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0D10A0E1           MOV      R1,SP
   \   000002D4   0500A0E1           MOV      R0,R5
   \   000002D8   ........           _BLF     ??append,??append??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   0D00A0E1           MOV      R0,SP
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   1C008DE2           ADD      R0,SP,#+28
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   8C008DE2           ADD      R0,SP,#+140
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   38008DE2           ADD      R0,SP,#+56
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   54008DE2           ADD      R0,SP,#+84
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   70008DE2           ADD      R0,SP,#+112
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
     83          		for ( unsigned i=0; i < Table.size(); i++ ) {
   \   0000033C   0090A0E3           MOV      R9,#+0
   \                     ??MakeConfigString_3:
   \   00000340   140084E2           ADD      R0,R4,#+20
   \   00000344   041090E5           LDR      R1,[R0, #+4]
   \   00000348   000090E5           LDR      R0,[R0, #+0]
   \   0000034C   000041E0           SUB      R0,R1,R0
   \   00000350   1410A0E3           MOV      R1,#+20
   \   00000354   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000358   010059E1           CMP      R9,R1
   \   0000035C   D600002A           BCS      ??MakeConfigString_4
     84          			LocalString +=TabStr3;
   \   00000360   64149FE5           LDR      R1,??MakeConfigString_1+0xC  ;; TabStr3
   \   00000364   0830A0E1           MOV      R3,R8
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   0500A0E1           MOV      R0,R5
   \   00000370   ........           _BLF     ??append,??append??rA
     85          			LocalString.cat_sprintf("%10.3f %10.2f %10.2f %10.2f %10.2f\r\n",Table[i].Level,Table[i].LCG,Table[i].TCG,Table[i].LCF,Table[i].TCF);
   \   00000374   141094E5           LDR      R1,[R4, #+20]
   \   00000378   1400A0E3           MOV      R0,#+20
   \   0000037C   90192AE0           MLA      R10,R0,R9,R1
   \   00000380   0C009AE5           LDR      R0,[R10, #+12]
     86          		}
   \   00000384   019089E2           ADD      R9,R9,#+1
   \   00000388   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000038C   03002DE9           PUSH     {R0,R1}
   \   00000390   04009AE5           LDR      R0,[R10, #+4]
   \   00000394   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000398   03002DE9           PUSH     {R0,R1}
   \   0000039C   10009AE5           LDR      R0,[R10, #+16]
   \   000003A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003A4   03002DE9           PUSH     {R0,R1}
   \   000003A8   08009AE5           LDR      R0,[R10, #+8]
   \   000003AC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003B0   03002DE9           PUSH     {R0,R1}
   \   000003B4   00009AE5           LDR      R0,[R10, #+0]
   \   000003B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003BC   0C249FE5           LDR      R2,??MakeConfigString_1+0x10  ;; `?<Constant "%10.3f %10.2f %10.2f ...">`
   \   000003C0   03002DE9           PUSH     {R0,R1}
   \   000003C4   C71F8DE2           ADD      R1,SP,#+796
   \   000003C8   0800BDE8           POP      {R3}
   \   000003CC   0500A0E1           MOV      R0,R5
   \   000003D0   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000003D4   24D08DE2           ADD      SP,SP,#+36
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   0110A0E3           MOV      R1,#+1
   \   000003E0   BD0F8DE2           ADD      R0,SP,#+756
   \   000003E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E8   D4FFFFEA           B        ??MakeConfigString_3
     87          	} else {
     88          		if ( IsCGTable ) {
   \                     ??MakeConfigString_2:
   \   000003EC   1000D4E5           LDRB     R0,[R4, #+16]
   \   000003F0   000050E3           CMP      R0,#+0
   \   000003F4   5700000A           BEQ      ??MakeConfigString_5
     89          			LocalString +=TabStr1+KeyWord(C_LC_LCG) + TabStr1+KeyWord(C_LC_TCG)+CrLfStr;
   \   000003F8   0D00A0E1           MOV      R0,SP
   \   000003FC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000400   0B10A0E1           MOV      R1,R11
   \   00000404   1C008DE2           ADD      R0,SP,#+28
   \   00000408   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000040C   1C208DE2           ADD      R2,SP,#+28
   \   00000410   0610A0E1           MOV      R1,R6
   \   00000414   38008DE2           ADD      R0,SP,#+56
   \   00000418   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000041C   0620A0E1           MOV      R2,R6
   \   00000420   38108DE2           ADD      R1,SP,#+56
   \   00000424   54008DE2           ADD      R0,SP,#+84
   \   00000428   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000042C   0D20A0E1           MOV      R2,SP
   \   00000430   54108DE2           ADD      R1,SP,#+84
   \   00000434   70008DE2           ADD      R0,SP,#+112
   \   00000438   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000043C   0720A0E1           MOV      R2,R7
   \   00000440   70108DE2           ADD      R1,SP,#+112
   \   00000444   8C008DE2           ADD      R0,SP,#+140
   \   00000448   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000044C   0830A0E1           MOV      R3,R8
   \   00000450   0020A0E3           MOV      R2,#+0
   \   00000454   8C108DE2           ADD      R1,SP,#+140
   \   00000458   0500A0E1           MOV      R0,R5
   \   0000045C   ........           _BLF     ??append,??append??rA
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   0110A0E3           MOV      R1,#+1
   \   00000468   8C008DE2           ADD      R0,SP,#+140
   \   0000046C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000470   0020A0E3           MOV      R2,#+0
   \   00000474   0110A0E3           MOV      R1,#+1
   \   00000478   70008DE2           ADD      R0,SP,#+112
   \   0000047C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   0110A0E3           MOV      R1,#+1
   \   00000488   0D00A0E1           MOV      R0,SP
   \   0000048C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0110A0E3           MOV      R1,#+1
   \   00000498   54008DE2           ADD      R0,SP,#+84
   \   0000049C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   0110A0E3           MOV      R1,#+1
   \   000004A8   38008DE2           ADD      R0,SP,#+56
   \   000004AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0110A0E3           MOV      R1,#+1
   \   000004B8   1C008DE2           ADD      R0,SP,#+28
   \   000004BC   ........           _BLF     ??_Tidy,??_Tidy??rA
     90          			for ( unsigned i=0; i<Table.size(); i++ ) {
   \   000004C0   0090A0E3           MOV      R9,#+0
   \                     ??MakeConfigString_6:
   \   000004C4   140084E2           ADD      R0,R4,#+20
   \   000004C8   041090E5           LDR      R1,[R0, #+4]
   \   000004CC   000090E5           LDR      R0,[R0, #+0]
   \   000004D0   000041E0           SUB      R0,R1,R0
   \   000004D4   1410A0E3           MOV      R1,#+20
   \   000004D8   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   000004DC   010059E1           CMP      R9,R1
   \   000004E0   7500002A           BCS      ??MakeConfigString_4
     91          				LocalString +=TabStr3;
   \   000004E4   E0129FE5           LDR      R1,??MakeConfigString_1+0xC  ;; TabStr3
   \   000004E8   0830A0E1           MOV      R3,R8
   \   000004EC   0020A0E3           MOV      R2,#+0
   \   000004F0   0500A0E1           MOV      R0,R5
   \   000004F4   ........           _BLF     ??append,??append??rA
     92          				LocalString.cat_sprintf("%10.3f %10.2f %10.2f\r\n",Table[i].Level,Table[i].LCG,Table[i].TCG);
   \   000004F8   141094E5           LDR      R1,[R4, #+20]
   \   000004FC   1400A0E3           MOV      R0,#+20
   \   00000500   90192AE0           MLA      R10,R0,R9,R1
   \   00000504   10009AE5           LDR      R0,[R10, #+16]
     93          			}
   \   00000508   019089E2           ADD      R9,R9,#+1
   \   0000050C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000510   03002DE9           PUSH     {R0,R1}
   \   00000514   08009AE5           LDR      R0,[R10, #+8]
   \   00000518   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000051C   03002DE9           PUSH     {R0,R1}
   \   00000520   00009AE5           LDR      R0,[R10, #+0]
   \   00000524   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000528   A4229FE5           LDR      R2,??MakeConfigString_1+0x14  ;; `?<Constant "%10.3f %10.2f %10.2f ...">` + 40
   \   0000052C   03002DE9           PUSH     {R0,R1}
   \   00000530   C0108DE2           ADD      R1,SP,#+192
   \   00000534   0800BDE8           POP      {R3}
   \   00000538   0500A0E1           MOV      R0,R5
   \   0000053C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000540   0020A0E3           MOV      R2,#+0
   \   00000544   0110A0E3           MOV      R1,#+1
   \   00000548   BC008DE2           ADD      R0,SP,#+188
   \   0000054C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000550   14D08DE2           ADD      SP,SP,#+20
   \   00000554   DAFFFFEA           B        ??MakeConfigString_6
     94          		} else {
     95          			LocalString +=TabStr1+KeyWord(C_LC_LCF) + TabStr1+KeyWord(C_LC_TCF)+CrLfStr;
   \                     ??MakeConfigString_5:
   \   00000558   0A10A0E1           MOV      R1,R10
   \   0000055C   8C008DE2           ADD      R0,SP,#+140
   \   00000560   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000564   0910A0E1           MOV      R1,R9
   \   00000568   70008DE2           ADD      R0,SP,#+112
   \   0000056C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000570   70208DE2           ADD      R2,SP,#+112
   \   00000574   0610A0E1           MOV      R1,R6
   \   00000578   54008DE2           ADD      R0,SP,#+84
   \   0000057C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000580   0620A0E1           MOV      R2,R6
   \   00000584   54108DE2           ADD      R1,SP,#+84
   \   00000588   38008DE2           ADD      R0,SP,#+56
   \   0000058C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000590   8C208DE2           ADD      R2,SP,#+140
   \   00000594   38108DE2           ADD      R1,SP,#+56
   \   00000598   1C008DE2           ADD      R0,SP,#+28
   \   0000059C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005A0   0720A0E1           MOV      R2,R7
   \   000005A4   1C108DE2           ADD      R1,SP,#+28
   \   000005A8   0D00A0E1           MOV      R0,SP
   \   000005AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005B0   0830A0E1           MOV      R3,R8
   \   000005B4   0020A0E3           MOV      R2,#+0
   \   000005B8   0D10A0E1           MOV      R1,SP
   \   000005BC   0500A0E1           MOV      R0,R5
   \   000005C0   ........           _BLF     ??append,??append??rA
   \   000005C4   0020A0E3           MOV      R2,#+0
   \   000005C8   0110A0E3           MOV      R1,#+1
   \   000005CC   0D00A0E1           MOV      R0,SP
   \   000005D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005D4   0020A0E3           MOV      R2,#+0
   \   000005D8   0110A0E3           MOV      R1,#+1
   \   000005DC   1C008DE2           ADD      R0,SP,#+28
   \   000005E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005E4   0020A0E3           MOV      R2,#+0
   \   000005E8   0110A0E3           MOV      R1,#+1
   \   000005EC   8C008DE2           ADD      R0,SP,#+140
   \   000005F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005F4   0020A0E3           MOV      R2,#+0
   \   000005F8   0110A0E3           MOV      R1,#+1
   \   000005FC   38008DE2           ADD      R0,SP,#+56
   \   00000600   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000604   0020A0E3           MOV      R2,#+0
   \   00000608   0110A0E3           MOV      R1,#+1
   \   0000060C   54008DE2           ADD      R0,SP,#+84
   \   00000610   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000614   0020A0E3           MOV      R2,#+0
   \   00000618   0110A0E3           MOV      R1,#+1
   \   0000061C   70008DE2           ADD      R0,SP,#+112
   \   00000620   ........           _BLF     ??_Tidy,??_Tidy??rA
     96          			for ( unsigned i=0; i<Table.size(); i++ ) {
   \   00000624   0090A0E3           MOV      R9,#+0
   \   00000628   1B0000EA           B        ??MakeConfigString_7
     97          				LocalString +=TabStr3;
   \                     ??MakeConfigString_8:
   \   0000062C   98119FE5           LDR      R1,??MakeConfigString_1+0xC  ;; TabStr3
   \   00000630   0830A0E1           MOV      R3,R8
   \   00000634   0020A0E3           MOV      R2,#+0
   \   00000638   0500A0E1           MOV      R0,R5
   \   0000063C   ........           _BLF     ??append,??append??rA
     98          				LocalString.cat_sprintf("%10.3f %10.2f %10.2f\r\n",Table[i].Level,Table[i].LCF,Table[i].TCF);
   \   00000640   141094E5           LDR      R1,[R4, #+20]
   \   00000644   1400A0E3           MOV      R0,#+20
   \   00000648   90192AE0           MLA      R10,R0,R9,R1
   \   0000064C   0C009AE5           LDR      R0,[R10, #+12]
     99          			}
   \   00000650   019089E2           ADD      R9,R9,#+1
   \   00000654   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000658   03002DE9           PUSH     {R0,R1}
   \   0000065C   04009AE5           LDR      R0,[R10, #+4]
   \   00000660   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000664   03002DE9           PUSH     {R0,R1}
   \   00000668   00009AE5           LDR      R0,[R10, #+0]
   \   0000066C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000670   5C219FE5           LDR      R2,??MakeConfigString_1+0x14  ;; `?<Constant "%10.3f %10.2f %10.2f ...">` + 40
   \   00000674   03002DE9           PUSH     {R0,R1}
   \   00000678   C0108DE2           ADD      R1,SP,#+192
   \   0000067C   0800BDE8           POP      {R3}
   \   00000680   0500A0E1           MOV      R0,R5
   \   00000684   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000688   0020A0E3           MOV      R2,#+0
   \   0000068C   0110A0E3           MOV      R1,#+1
   \   00000690   BC008DE2           ADD      R0,SP,#+188
   \   00000694   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000698   14D08DE2           ADD      SP,SP,#+20
   \                     ??MakeConfigString_7:
   \   0000069C   140084E2           ADD      R0,R4,#+20
   \   000006A0   041090E5           LDR      R1,[R0, #+4]
   \   000006A4   000090E5           LDR      R0,[R0, #+0]
   \   000006A8   000041E0           SUB      R0,R1,R0
   \   000006AC   1410A0E3           MOV      R1,#+20
   \   000006B0   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   000006B4   010059E1           CMP      R9,R1
   \   000006B8   DBFFFF3A           BCC      ??MakeConfigString_8
    100          		}
    101          	}
    102          	LocalString +=TabStr2+KeyWord(C_T_TABLE_END)+CrLfStr;
   \                     ??MakeConfigString_4:
   \   000006BC   9E10A0E3           MOV      R1,#+158
   \   000006C0   501E81E3           ORR      R1,R1,#0x500
   \   000006C4   A10F8DE2           ADD      R0,SP,#+644
   \   000006C8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000006CC   F4109FE5           LDR      R1,??MakeConfigString_1+0x8  ;; TabStr2
   \   000006D0   A12F8DE2           ADD      R2,SP,#+644
   \   000006D4   9A0F8DE2           ADD      R0,SP,#+616
   \   000006D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006DC   0720A0E1           MOV      R2,R7
   \   000006E0   9A1F8DE2           ADD      R1,SP,#+616
   \   000006E4   930F8DE2           ADD      R0,SP,#+588
   \   000006E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006EC   0830A0E1           MOV      R3,R8
   \   000006F0   0020A0E3           MOV      R2,#+0
   \   000006F4   931F8DE2           ADD      R1,SP,#+588
   \   000006F8   0500A0E1           MOV      R0,R5
   \   000006FC   ........           _BLF     ??append,??append??rA
   \   00000700   0020A0E3           MOV      R2,#+0
   \   00000704   0110A0E3           MOV      R1,#+1
   \   00000708   930F8DE2           ADD      R0,SP,#+588
   \   0000070C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000710   0020A0E3           MOV      R2,#+0
   \   00000714   0110A0E3           MOV      R1,#+1
   \   00000718   9A0F8DE2           ADD      R0,SP,#+616
   \   0000071C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000720   0020A0E3           MOV      R2,#+0
   \   00000724   0110A0E3           MOV      R1,#+1
   \   00000728   A10F8DE2           ADD      R0,SP,#+644
   \   0000072C   ........           _BLF     ??_Tidy,??_Tidy??rA
    103          	LocalString +=TabStr1+KeyWord(C_T_TABLE_OBJ_END)+CrLfStr;
   \   00000730   A110A0E3           MOV      R1,#+161
   \   00000734   501E81E3           ORR      R1,R1,#0x500
   \   00000738   B60F8DE2           ADD      R0,SP,#+728
   \   0000073C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000740   B62F8DE2           ADD      R2,SP,#+728
   \   00000744   0610A0E1           MOV      R1,R6
   \   00000748   AF0F8DE2           ADD      R0,SP,#+700
   \   0000074C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000750   0720A0E1           MOV      R2,R7
   \   00000754   AF1F8DE2           ADD      R1,SP,#+700
   \   00000758   A80F8DE2           ADD      R0,SP,#+672
   \   0000075C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000760   0830A0E1           MOV      R3,R8
   \   00000764   0020A0E3           MOV      R2,#+0
   \   00000768   A81F8DE2           ADD      R1,SP,#+672
   \   0000076C   0500A0E1           MOV      R0,R5
   \   00000770   ........           _BLF     ??append,??append??rA
   \   00000774   0020A0E3           MOV      R2,#+0
   \   00000778   0110A0E3           MOV      R1,#+1
   \   0000077C   A80F8DE2           ADD      R0,SP,#+672
   \   00000780   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000784   0020A0E3           MOV      R2,#+0
   \   00000788   0110A0E3           MOV      R1,#+1
   \   0000078C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000790   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000794   0020A0E3           MOV      R2,#+0
   \   00000798   0110A0E3           MOV      R1,#+1
   \   0000079C   B60F8DE2           ADD      R0,SP,#+728
   \   000007A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    104          	LocalString += CrLfStr;
   \   000007A4   0830A0E1           MOV      R3,R8
   \   000007A8   0020A0E3           MOV      R2,#+0
   \   000007AC   0710A0E1           MOV      R1,R7
   \   000007B0   0500A0E1           MOV      R0,R5
   \   000007B4   ........           _BLF     ??append,??append??rA
    105          	return(LocalString);
   \   000007B8   C4DF8DE2           ADD      SP,SP,#+784
   \   000007BC   ........           B        ?Subroutine14
   \                     ??MakeConfigString_1:
   \   000007C0   ........           DC32     TabStr1
   \   000007C4   ........           DC32     CrLfStr
   \   000007C8   ........           DC32     TabStr2
   \   000007CC   ........           DC32     TabStr3
   \   000007D0   ........           DC32     `?<Constant "%10.3f %10.2f %10.2f ...">`
   \   000007D4   ........           DC32     `?<Constant "%10.3f %10.2f %10.2f ...">` + 40
    106          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine14_0:
   \   00000008   3A0A0000           DC8      ":\n",+0
   \   0000000C   ........           DC32     `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)` + 20
   \   00000010   ........           DC32     `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)` + 48
   \   00000014   ........           DC32     `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)`
    107          //---------------------------------------------------------------------------
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          bool TSNTableCenterOfFlotation::LoadConfigString(TSNConfigString &ConfigString, PRogramObjectBase *PROPtr)
    110          {
   \                     ??LoadConfigString:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   F0D04DE2           SUB      SP,SP,#+240
   \   00000008   0140A0E1           MOV      R4,R1
    111          	bool NoError = true;
    112          	int ErrorLine=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
   \   00000014   ........           LDR      R1,??Subroutine14_0+0x4  ;; `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)` + 20
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   01B0A0E3           MOV      R11,#+1
   \   00000020   40008DE2           ADD      R0,SP,#+64
    113          	int Key;
    114          	AnsiString PROName = "Center of Flotation table";
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
    115          	if ( PROPtr )	PROName +=(AnsiString)", for "+PROPtr->Name;
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   1400000A           BEQ      ??LoadConfigString_2
   \   00000030   ........           LDR      R1,??Subroutine14_0+0x8  ;; `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)` + 48
   \   00000034   24008DE2           ADD      R0,SP,#+36
   \   00000038   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   442085E2           ADD      R2,R5,#+68
   \   00000044   08008DE2           ADD      R0,SP,#+8
   \   00000048   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000004C   ........           LDR      R0,??DataTable3  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   08108DE2           ADD      R1,SP,#+8
   \   0000005C   40008DE2           ADD      R0,SP,#+64
   \   00000060   ........           _BLF     ??append,??append??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   08008DE2           ADD      R0,SP,#+8
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0B10A0E1           MOV      R1,R11
   \   0000007C   24008DE2           ADD      R0,SP,#+36
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
    116          	PROName += ":\n";
   \                     ??LoadConfigString_2:
   \   00000084   ........           ADR      R5,??Subroutine14_0  ;; ":\n"
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           _BLF     strlen,??strlen??rA
   \   00000090   0020A0E1           MOV      R2,R0
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   40008DE2           ADD      R0,SP,#+64
   \   0000009C   ........           _BLF     ??append_1,??append??rA_1
    117          	do {
    118          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   0D20A0E1           MOV      R2,SP
   \   000000A8   80108DE2           ADD      R1,SP,#+128
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??NextWord,??NextWord??rA
   \   000000B4   00009DE5           LDR      R0,[SP, #+0]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0B00000A           BEQ      ??LoadConfigString_4
    119          		if ( ErrorLine ) {
    120          			if ( ErrorLine != EOF ) {
   \   000000C0   010070E3           CMN      R0,#+1
   \   000000C4   B400000A           BEQ      ??LoadConfigString_5
    121          				GiveConfigWarning(PROName,ErrorLine);
   \   000000C8   40108DE2           ADD      R1,SP,#+64
   \   000000CC   08008DE2           ADD      R0,SP,#+8
   \   000000D0   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000D4   00109DE5           LDR      R1,[SP, #+0]
   \   000000D8   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   08008DE2           ADD      R0,SP,#+8
   \                     ??LoadConfigString_6:
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   AA0000EA           B        ??LoadConfigString_5
    122          			}
    123          		} else {
    124          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   000000F0   80108DE2           ADD      R1,SP,#+128
   \   000000F4   9C008DE2           ADD      R0,SP,#+156
   \   000000F8   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000FC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000100   04008DE5           STR      R0,[SP, #+4]
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   9C008DE2           ADD      R0,SP,#+156
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
    125          			switch ( Key ) {
   \   00000114   04009DE5           LDR      R0,[SP, #+4]
   \   00000118   9310A0E3           MOV      R1,#+147
   \   0000011C   501E81E3           ORR      R1,R1,#0x500
   \   00000120   010050E1           CMP      R0,R1
   \   00000124   1D00000A           BEQ      ??LoadConfigString_7
   \   00000128   0A1081E2           ADD      R1,R1,#+10
   \   0000012C   010050E1           CMP      R0,R1
   \   00000130   2600000A           BEQ      ??LoadConfigString_8
   \   00000134   011081E2           ADD      R1,R1,#+1
   \   00000138   010050E1           CMP      R0,R1
   \   0000013C   03108112           ADDNE    R1,R1,#+3
   \   00000140   01005011           CMPNE    R0,R1
   \   00000144   9400000A           BEQ      ??LoadConfigString_5
   \   00000148   4110A0E3           MOV      R1,#+65
   \   0000014C   9C1D81E3           ORR      R1,R1,#0x2700
   \   00000150   010050E1           CMP      R0,R1
   \   00000154   2200000A           BEQ      ??LoadConfigString_9
    126          			default:
    127          				GiveConfigWarning(PROName,InputKeyWord,ConfigString.LineCount);
   \   00000158   80108DE2           ADD      R1,SP,#+128
   \   0000015C   B8008DE2           ADD      R0,SP,#+184
   \   00000160   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000164   0050A0E1           MOV      R5,R0
   \   00000168   40108DE2           ADD      R1,SP,#+64
   \   0000016C   D4008DE2           ADD      R0,SP,#+212
   \   00000170   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000174   1C2094E5           LDR      R2,[R4, #+28]
   \   00000178   0510A0E1           MOV      R1,R5
   \   0000017C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   B8008DE2           ADD      R0,SP,#+184
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   D4008DE2           ADD      R0,SP,#+212
   \   0000019C   D1FFFFEA           B        ??LoadConfigString_6
    128          				break;
    129          			case C_T_TABLE_END    :
    130          			case C_T_TABLE_OBJ_END:
    131          				break;
    132          			case C_T_TABLEOFFSET:
    133          				TableOffset = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10A0E1           MOV      R1,SP
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001B0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000001B4   F0109DE5           LDR      R1,[SP, #+240]
   \   000001B8   040081E5           STR      R0,[R1, #+4]
    134          				NoError = !ErrorLine;
   \   000001BC   00009DE5           LDR      R0,[SP, #+0]
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   00B0A013           MOVNE    R11,#+0
   \   000001C8   01B0A003           MOVEQ    R11,#+1
   \   000001CC   720000EA           B        ??LoadConfigString_5
    135          				break;
    136          			case C_T_TABLE_START:
    137          				ReadTable(ConfigString, ErrorLine);
   \                     ??LoadConfigString_8:
   \   000001D0   F0009DE5           LDR      R0,[SP, #+240]
   \   000001D4   0D20A0E1           MOV      R2,SP
   \   000001D8   0410A0E1           MOV      R1,R4
   \   000001DC   ........           BL       ??ReadTable
   \   000001E0   6D0000EA           B        ??LoadConfigString_5
    138          				break;
    139          			case C_LC_TABLE_ORDER:
    140          				{
    141          					int LCFIndex=-1, TCFIndex=-1, LCGIndex=-1,TCGIndex=-1;
   \                     ??LoadConfigString_9:
   \   000001E4   00A0E0E3           MVN      R10,#+0
   \   000001E8   0A50A0E1           MOV      R5,R10
   \   000001EC   0560A0E1           MOV      R6,R5
    142          					int Key = NOT_FOUND;
   \   000001F0   0580A0E1           MOV      R8,R5
    143          					int Index = 0;
   \   000001F4   0070A0E3           MOV      R7,#+0
    144          					do {
    145          						AnsiString tmpKey = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000001F8   0030A0E3           MOV      R3,#+0
   \   000001FC   0D20A0E1           MOV      R2,SP
   \   00000200   24108DE2           ADD      R1,SP,#+36
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           _BLF     ??NextWord,??NextWord??rA
    146          						if ( !ErrorLine ) {
   \   0000020C   00009DE5           LDR      R0,[SP, #+0]
   \   00000210   000050E3           CMP      R0,#+0
   \   00000214   1A00001A           BNE      ??LoadConfigString_11
    147          							Key = FindConfigKey(tmpKey);
   \   00000218   24108DE2           ADD      R1,SP,#+36
   \   0000021C   08008DE2           ADD      R0,SP,#+8
   \   00000220   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000224   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000228   0080A0E1           MOV      R8,R0
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   08008DE2           ADD      R0,SP,#+8
   \   00000238   ........           _BLF     ??_Tidy,??_Tidy??rA
    148          							switch ( Key ) {
   \   0000023C   010087E2           ADD      R0,R7,#+1
   \   00000240   931048E2           SUB      R1,R8,#+147
   \   00000244   9C1D41E2           SUB      R1,R1,#+9984
   \   00000248   0C0051E3           CMP      R1,#+12
   \   0000024C   0C00008A           BHI      ??LoadConfigString_11
   \   00000250   012F8FE2           ADR      R2,??LoadConfigString_1
   \   00000254   0120D2E7           LDRB     R2,[R2, R1]
   \   00000258   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??LoadConfigString_1:
   \   0000025C   03050909           DC8      +3,+5,+9,+9
   \   00000260   09090909           DC8      +9,+9,+9,+9
   \   00000264   09090907           DC8      +9,+9,+9,+7
   \   00000268   05000000           DC8      +5,+0,+0,+0
    149          							case C_LC_LCG:
    150          								LCGIndex=Index;
   \                     ??LoadConfigString_12:
   \   0000026C   0750A0E1           MOV      R5,R7
    151          								Index++;
   \   00000270   020000EA           B        ??LoadConfigString_13
    152          								break;
    153          							case C_LC_TCG:
    154          								TCGIndex=Index;
   \                     ??LoadConfigString_14:
   \   00000274   0760A0E1           MOV      R6,R7
    155          								Index++;
   \   00000278   000000EA           B        ??LoadConfigString_13
    156          								break;
    157          							case C_LC_LCF:
    158          								LCFIndex=Index;
   \                     ??LoadConfigString_15:
   \   0000027C   07A0A0E1           MOV      R10,R7
    159          								Index++;
   \                     ??LoadConfigString_13:
   \   00000280   0070A0E1           MOV      R7,R0
    160          								break;
    161          							case C_LC_TCF:
    162          								TCGIndex=Index;
    163          								Index++;
    164          								break;
    165          							}
    166          						}
    167          					}while ( !ErrorLine && Key != NOT_FOUND && Index < 4 );
   \                     ??LoadConfigString_11:
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0110A0E3           MOV      R1,#+1
   \   0000028C   24008DE2           ADD      R0,SP,#+36
   \   00000290   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000294   00009DE5           LDR      R0,[SP, #+0]
   \   00000298   000050E3           CMP      R0,#+0
   \   0000029C   0300001A           BNE      ??LoadConfigString_16
   \   000002A0   010078E3           CMN      R8,#+1
   \   000002A4   0100000A           BEQ      ??LoadConfigString_16
   \   000002A8   040057E3           CMP      R7,#+4
   \   000002AC   D1FFFFBA           BLT      ??LoadConfigString_10
    168          					ConfigString.SetToPreviousWord();
   \                     ??LoadConfigString_16:
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           _BLF     ??SetToPreviousWord,??SetToPreviousWord??rA
    169          					if ( Index == 4 ) {
   \   000002B8   040057E3           CMP      R7,#+4
    170          						DualTable = true;
   \   000002BC   F0009D05           LDREQ    R0,[SP, #+240]
   \   000002C0   0110A003           MOVEQ    R1,#+1
   \   000002C4   1110C005           STRBEQ   R1,[R0, #+17]
    171          					}
    172          					float CGravity[4];
    173          					do {
    174          						float Level = ConfigString.ReadDouble(ErrorLine,C_T_TABLE_END);
   \                     ??LoadConfigString_17:
   \   000002C8   9E20A0E3           MOV      R2,#+158
   \   000002CC   502E82E3           ORR      R2,R2,#0x500
   \   000002D0   0D10A0E1           MOV      R1,SP
   \   000002D4   0400A0E1           MOV      R0,R4
   \   000002D8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000002DC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002E0   0080A0E1           MOV      R8,R0
    175          						if ( !ErrorLine ) {
   \   000002E4   00009DE5           LDR      R0,[SP, #+0]
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   2300001A           BNE      ??LoadConfigString_18
    176          							for ( int i=0; !ErrorLine && i < Index; i++ ) {
   \   000002F0   0090A0E3           MOV      R9,#+0
   \   000002F4   0A0000EA           B        ??LoadConfigString_19
    177          								CGravity[i] = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_20:
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0D10A0E1           MOV      R1,SP
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000308   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000030C   70108DE2           ADD      R1,SP,#+112
   \   00000310   090181E7           STR      R0,[R1, +R9, LSL #+2]
    178          							}
   \   00000314   00009DE5           LDR      R0,[SP, #+0]
   \   00000318   019089E2           ADD      R9,R9,#+1
   \   0000031C   000050E3           CMP      R0,#+0
   \   00000320   1900001A           BNE      ??LoadConfigString_21
   \                     ??LoadConfigString_19:
   \   00000324   070059E1           CMP      R9,R7
   \   00000328   F2FFFFBA           BLT      ??LoadConfigString_20
    179          							if ( !ErrorLine ) {
    180                                                                    CFEntry TPtr={-1.0,-1.0,-1.0,-1.0};
   \   0000032C   ........           LDR      R1,??Subroutine14_0+0xC  ;; `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)`
   \   00000330   5C008DE2           ADD      R0,SP,#+92
   \   00000334   0C5291E8           LDM      R1,{R2,R3,R9,R12,LR}
    181          								TPtr.Level     = Level;
    182          								if ( LCGIndex>=0 ) {
   \   00000338   000055E3           CMP      R5,#+0
    183          									TPtr.LCG       = CGravity[LCGIndex];
   \   0000033C   70108D52           ADDPL    R1,SP,#+112
   \   00000340   0C5280E8           STM      R0,{R2,R3,R9,R12,LR}
   \   00000344   5C808DE5           STR      R8,[SP, #+92]
   \   00000348   05119157           LDRPL    R1,[R1, +R5, LSL #+2]
   \   0000034C   64108D55           STRPL    R1,[SP, #+100]
    184          								}
    185          								if ( TCGIndex>=0 ) {
   \   00000350   000056E3           CMP      R6,#+0
    186          									TPtr.TCG       = CGravity[TCGIndex];
   \   00000354   70108D52           ADDPL    R1,SP,#+112
   \   00000358   06119157           LDRPL    R1,[R1, +R6, LSL #+2]
   \   0000035C   6C108D55           STRPL    R1,[SP, #+108]
    187          								}
    188          								if ( LCFIndex>=0 ) {
   \   00000360   00005AE3           CMP      R10,#+0
    189          									TPtr.LCF       = CGravity[LCFIndex];
   \   00000364   70108D52           ADDPL    R1,SP,#+112
   \   00000368   0A119157           LDRPL    R1,[R1, +R10, LSL #+2]
   \   0000036C   60108D55           STRPL    R1,[SP, #+96]
    190          								}
    191          								if ( TCFIndex>=0 ) {
    192          									TPtr.TCF       = CGravity[TCFIndex];
    193          								}
    194          								Table.push_back(TPtr);
   \   00000370   F0009DE5           LDR      R0,[SP, #+240]
   \   00000374   5C108DE2           ADD      R1,SP,#+92
   \   00000378   140080E2           ADD      R0,R0,#+20
   \   0000037C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    195          							}
    196          						}
    197          					} while ( !ErrorLine );
   \                     ??LoadConfigString_18:
   \   00000380   00009DE5           LDR      R0,[SP, #+0]
   \   00000384   000050E3           CMP      R0,#+0
   \   00000388   CEFFFF0A           BEQ      ??LoadConfigString_17
    198          					if ( ErrorLine == END_FOUND ) {
   \                     ??LoadConfigString_21:
   \   0000038C   00009DE5           LDR      R0,[SP, #+0]
   \   00000390   020070E3           CMN      R0,#+2
    199          						// End found, Permitted in this case, so ErrorStatus set to 0
    200          						ErrorLine = 0;
   \   00000394   0010A003           MOVEQ    R1,#+0
   \   00000398   00108D05           STREQ    R1,[SP, #+0]
    201          						Key = C_T_TABLE_END;
    202          					}
    203          				}
    204          				break;
    205          			}
    206          		}
    207          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_T_TABLE_OBJ_END ) );
   \                     ??LoadConfigString_5:
   \   0000039C   0020A0E3           MOV      R2,#+0
   \   000003A0   0110A0E3           MOV      R1,#+1
   \   000003A4   80008DE2           ADD      R0,SP,#+128
   \   000003A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003AC   00005BE3           CMP      R11,#+0
   \   000003B0   00009D15           LDRNE    R0,[SP, #+0]
   \   000003B4   01007013           CMNNE    R0,#+1
   \   000003B8   04009D15           LDRNE    R0,[SP, #+4]
   \   000003BC   A110A013           MOVNE    R1,#+161
   \   000003C0   501E8113           ORRNE    R1,R1,#0x500
   \   000003C4   01005011           CMPNE    R0,R1
   \   000003C8   34FFFF1A           BNE      ??LoadConfigString_3
    208          
    209          	return(NoError);
   \   000003CC   0020A0E3           MOV      R2,#+0
   \   000003D0   0110A0E3           MOV      R1,#+1
   \   000003D4   40008DE2           ADD      R0,SP,#+64
   \   000003D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003DC   0B00A0E1           MOV      R0,R11
   \   000003E0   F4D08DE2           ADD      SP,SP,#+244
   \   000003E4                      REQUIRE ?Subroutine14
   \   000003E4                      ;; // Fall through to label ?Subroutine14
    210          }
    211          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    212          void TSNTableCenterOfFlotation::Calculate(float Level, float *LCF, float *TCF)
    213          {
   \                     ??Calculate:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    214          	int Entries = Table.size();
    215          	if ( Entries == 1 ) {
   \   00000008   148095E5           LDR      R8,[R5, #+20]
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   140085E2           ADD      R0,R5,#+20
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0270A0E1           MOV      R7,R2
   \   00000020   000041E0           SUB      R0,R1,R0
   \   00000024   1410A0E3           MOV      R1,#+20
   \   00000028   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000002C   0190A0E1           MOV      R9,R1
   \   00000030   010059E3           CMP      R9,#+1
    216          		*LCF = Table[0].LCF;
   \   00000034   04009805           LDREQ    R0,[R8, #+4]
   \   00000038   0340A0E1           MOV      R4,R3
   \   0000003C   00008705           STREQ    R0,[R7, #+0]
    217          		*TCF = Table[0].TCF;
   \   00000040   0C009805           LDREQ    R0,[R8, #+12]
   \   00000044   2500000A           BEQ      ??Calculate_1
    218          	} else {
    219          		int i=1;
   \   00000048   01B0A0E3           MOV      R11,#+1
   \   0000004C   01A049E2           SUB      R10,R9,#+1
   \   00000050   000000EA           B        ??Calculate_2
    220          		while ( ( i < Entries-1 ) && ( Table[i].Level < Level ) )	i++;
   \                     ??Calculate_3:
   \   00000054   01B08BE2           ADD      R11,R11,#+1
   \                     ??Calculate_2:
   \   00000058   0A005BE1           CMP      R11,R10
   \   0000005C   060000AA           BGE      ??Calculate_4
   \   00000060   1400A0E3           MOV      R0,#+20
   \   00000064   908B21E0           MLA      R1,R0,R11,R8
   \   00000068   000091E5           LDR      R0,[R1, #+0]
   \   0000006C   0610A0E1           MOV      R1,R6
   \   00000070   ........           _BLF     __fLess,??__fLess??rA
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   F5FFFF1A           BNE      ??Calculate_3
    221          		if ( i >= Entries ) {
   \                     ??Calculate_4:
   \   0000007C   09005BE1           CMP      R11,R9
    222          			i = Entries -1;
   \   00000080   0AB0A0A1           MOVGE    R11,R10
    223          		}
    224          		*LCF =  IntPol1stDeg(Table[i-1].Level,Table[i].Level,Table[i-1].LCF,Table[i].LCF,Level);
   \   00000084   1400A0E3           MOV      R0,#+20
   \   00000088   900B09E0           MUL      R9,R0,R11
   \   0000008C   080089E0           ADD      R0,R9,R8
   \   00000090   1380E0E3           MVN      R8,#+19
   \   00000094   00A088E0           ADD      R10,R8,R0
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   02002DE9           PUSH     {R1}
   \   000000A0   043090E5           LDR      R3,[R0, #+4]
   \   000000A4   04209AE5           LDR      R2,[R10, #+4]
   \   000000A8   001090E5           LDR      R1,[R0, #+0]
   \   000000AC   00009AE5           LDR      R0,[R10, #+0]
   \   000000B0   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000B4   000087E5           STR      R0,[R7, #+0]
    225          		*TCF =  IntPol1stDeg(Table[i-1].Level,Table[i].Level,Table[i-1].TCF,Table[i].TCF,Level);
   \   000000B8   140095E5           LDR      R0,[R5, #+20]
   \   000000BC   40002DE9           PUSH     {R6}
   \   000000C0   000089E0           ADD      R0,R9,R0
   \   000000C4   0C3090E5           LDR      R3,[R0, #+12]
   \   000000C8   001090E5           LDR      R1,[R0, #+0]
   \   000000CC   005088E0           ADD      R5,R8,R0
   \   000000D0   0C2095E5           LDR      R2,[R5, #+12]
   \   000000D4   000095E5           LDR      R0,[R5, #+0]
   \   000000D8   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000DC   08D08DE2           ADD      SP,SP,#+8
   \                     ??Calculate_1:
   \   000000E0   000084E5           STR      R0,[R4, #+0]
    226          	}
    227          
    228          }
   \   000000E4   ........           B        ?Subroutine14
    229          
    230          

   \                                 In segment CODE, align 4, keep-with-next
    231          void TSNTableCenterOfFlotation::CalculateCF(float Level, float *LCF, float *TCF,TSNTable1Degree *VolumeTab)
    232          {
   \                     ??CalculateCF:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   44909DE5           LDR      R9,[SP, #+68]
   \   0000000C   00B0A0E1           MOV      R11,R0
   \   00000010   0180A0E1           MOV      R8,R1
    233          	float Volume1  = VolumeTab->Calc_Y(Level);
   \   00000014   070000EA           B        ??CalculateCF_1
    234          	float Volume2  = VolumeTab->Calc_Y(Level+0.01);
    235          	float dVolume  = Volume2-Volume1;
    236          	while ( Level >0.1 && dVolume < 0.01 ) {
    237          		Level  -= 0.1;
   \                     ??CalculateCF_2:
   \   00000018   A8019FE5           LDR      R0,??CalculateCF_3  ;; 0xffffffff9999999a
   \   0000001C   A8119FE5           LDR      R1,??CalculateCF_3+0x4  ;; 0xffffffffbfb99999
   \   00000020   0420A0E1           MOV      R2,R4
   \   00000024   0530A0E1           MOV      R3,R5
   \   00000028   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000002C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000030   0080A0E1           MOV      R8,R0
    238          		Volume1 = VolumeTab->Calc_Y(Level);
   \   00000034   0810A0E1           MOV      R1,R8
   \                     ??CalculateCF_1:
   \   00000038   0C2099E5           LDR      R2,[R9, #+12]
   \   0000003C   0900A0E1           MOV      R0,R9
   \   00000040   142092E5           LDR      R2,[R2, #+20]
   \   00000044   0FE0A0E1           MOV      LR,PC
   \   00000048   12FF2FE1           BX       R2
   \   0000004C   0060A0E1           MOV      R6,R0
    239          		Volume2 = VolumeTab->Calc_Y(Level+0.01);
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000058   70219FE5           LDR      R2,??CalculateCF_3+0x8  ;; 0x47ae147b
   \   0000005C   70319FE5           LDR      R3,??CalculateCF_3+0xC  ;; 0x3f847ae1
   \   00000060   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000064   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000068   0C2099E5           LDR      R2,[R9, #+12]
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   142092E5           LDR      R2,[R2, #+20]
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   0FE0A0E1           MOV      LR,PC
   \   0000007C   12FF2FE1           BX       R2
   \   00000080   0070A0E1           MOV      R7,R0
    240          		dVolume = Volume2-Volume1;
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   ........           _BLF     __fSub,??__fSub??rA
   \   0000008C   00A0A0E1           MOV      R10,R0
    241          	}
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000098   38219FE5           LDR      R2,??CalculateCF_3+0x10  ;; 0xffffffff9999999b
   \   0000009C   38319FE5           LDR      R3,??CalculateCF_3+0x14  ;; 0x3fb99999
   \   000000A0   0040A0E1           MOV      R4,R0
   \   000000A4   0150A0E1           MOV      R5,R1
   \   000000A8   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0600000A           BEQ      ??CalculateCF_4
   \   000000B4   0A00A0E1           MOV      R0,R10
   \   000000B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000BC   0C219FE5           LDR      R2,??CalculateCF_3+0x8  ;; 0x47ae147b
   \   000000C0   0C319FE5           LDR      R3,??CalculateCF_3+0xC  ;; 0x3f847ae1
   \   000000C4   ........           _BLF     __dLess,??__dLess??rA
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   D1FFFF1A           BNE      ??CalculateCF_2
   \                     ??CalculateCF_4:
   \   000000D0   0A10A0E1           MOV      R1,R10
   \   000000D4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   2C00000A           BEQ      ??CalculateCF_5
    242          	if ( dVolume ) {
    243          		float LCG1,TCG1,LCG2,TCG2;
    244          		CalculateCG(Level,&LCG1,&TCG1);
   \   000000E0   0C308DE2           ADD      R3,SP,#+12
   \   000000E4   08208DE2           ADD      R2,SP,#+8
   \   000000E8   0810A0E1           MOV      R1,R8
   \   000000EC   0B00A0E1           MOV      R0,R11
   \   000000F0   ........           BL       ??CalculateCG
    245          		CalculateCG(Level+0.01,&LCG2,&TCG2);
   \   000000F4   D4009FE5           LDR      R0,??CalculateCF_3+0x8  ;; 0x47ae147b
   \   000000F8   D4109FE5           LDR      R1,??CalculateCF_3+0xC  ;; 0x3f847ae1
   \   000000FC   14808DE2           ADD      R8,SP,#+20
   \   00000100   10908DE2           ADD      R9,SP,#+16
   \   00000104   0420A0E1           MOV      R2,R4
   \   00000108   0530A0E1           MOV      R3,R5
   \   0000010C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000110   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000114   0010A0E1           MOV      R1,R0
   \   00000118   0830A0E1           MOV      R3,R8
   \   0000011C   0920A0E1           MOV      R2,R9
   \   00000120   0B00A0E1           MOV      R0,R11
   \   00000124   ........           BL       ??CalculateCG
    246          		float LMoment1  = LCG1*Volume1;
    247          		float TMoment1  = TCG1*Volume1;
   \   00000128   0C009DE5           LDR      R0,[SP, #+12]
   \   0000012C   0610A0E1           MOV      R1,R6
   \   00000130   ........           _BLF     __fMul,??__fMul??rA
   \   00000134   0080A0E1           MOV      R8,R0
    248          		float LMoment2  = LCG2*Volume2;
    249          		float TMoment2  = TCG2*Volume2;
   \   00000138   14009DE5           LDR      R0,[SP, #+20]
   \   0000013C   0710A0E1           MOV      R1,R7
   \   00000140   ........           _BLF     __fMul,??__fMul??rA
    250          		float dLMoment  = LMoment2-LMoment1;
    251          		float dTMoment  = TMoment2-TMoment1;
    252          		*LCF            = dLMoment/dVolume;
   \   00000144   18B09DE5           LDR      R11,[SP, #+24]
   \   00000148   0090A0E1           MOV      R9,R0
   \   0000014C   08009DE5           LDR      R0,[SP, #+8]
   \   00000150   0610A0E1           MOV      R1,R6
   \   00000154   ........           _BLF     __fMul,??__fMul??rA
   \   00000158   0060A0E1           MOV      R6,R0
   \   0000015C   10009DE5           LDR      R0,[SP, #+16]
   \   00000160   0710A0E1           MOV      R1,R7
   \   00000164   ........           _BLF     __fMul,??__fMul??rA
   \   00000168   0610A0E1           MOV      R1,R6
   \   0000016C   ........           _BLF     __fSub,??__fSub??rA
   \   00000170   0A10A0E1           MOV      R1,R10
   \   00000174   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000178   00008BE5           STR      R0,[R11, #+0]
    253          		*TCF            = dTMoment/dVolume;
   \   0000017C   0900A0E1           MOV      R0,R9
   \   00000180   0810A0E1           MOV      R1,R8
   \   00000184   ........           _BLF     __fSub,??__fSub??rA
   \   00000188   0A10A0E1           MOV      R1,R10
   \   0000018C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000190   080000EA           B        ??CalculateCF_6
    254          	} else {
    255          		float LCG,TCG;
    256          		CalculateCG(Level,&LCG,&TCG);
   \                     ??CalculateCF_5:
   \   00000194   04308DE2           ADD      R3,SP,#+4
   \   00000198   0D20A0E1           MOV      R2,SP
   \   0000019C   0810A0E1           MOV      R1,R8
   \   000001A0   0B00A0E1           MOV      R0,R11
   \   000001A4   ........           BL       ??CalculateCG
    257          		*LCF = LCG;
   \   000001A8   18009DE5           LDR      R0,[SP, #+24]
   \   000001AC   00109DE5           LDR      R1,[SP, #+0]
   \   000001B0   001080E5           STR      R1,[R0, #+0]
    258          		*TCF = TCG;
   \   000001B4   04009DE5           LDR      R0,[SP, #+4]
   \                     ??CalculateCF_6:
   \   000001B8   1C109DE5           LDR      R1,[SP, #+28]
   \   000001BC   000081E5           STR      R0,[R1, #+0]
    259          	}
    260          }
   \   000001C0   20D08DE2           ADD      SP,SP,#+32
   \   000001C4   ........           B        ?Subroutine14
   \                     ??CalculateCF_3:
   \   000001C8   9A999999           DC32     0xffffffff9999999a
   \   000001CC   9999B9BF           DC32     0xffffffffbfb99999
   \   000001D0   7B14AE47           DC32     0x47ae147b
   \   000001D4   E17A843F           DC32     0x3f847ae1
   \   000001D8   9B999999           DC32     0xffffffff9999999b
   \   000001DC   9999B93F           DC32     0x3fb99999
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          void TSNTableCenterOfFlotation::ConvertCGtoCF(TSNTable1Degree *VolumeTab)
    263          {
   \                     ??ConvertCGtoCF:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    264          	if ( IsCGTable ) {
   \   00000008   1000D4E5           LDRB     R0,[R4, #+16]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1B00000A           BEQ      ??ConvertCGtoCF_1
    265          		for ( unsigned i=0; i<Table.size(); i++ ) {
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   110000EA           B        ??ConvertCGtoCF_2
    266          			float LCF,TCF;
    267          			CalculateCF(Table[i].Level,&LCF,&TCF, VolumeTab);
   \                     ??ConvertCGtoCF_3:
   \   00000020   1400A0E3           MOV      R0,#+20
   \   00000024   900607E0           MUL      R7,R0,R6
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   140094E5           LDR      R0,[R4, #+20]
   \   00000034   08308DE2           ADD      R3,SP,#+8
   \   00000038   001097E7           LDR      R1,[R7, +R0]
   \   0000003C   04208DE2           ADD      R2,SP,#+4
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       ??CalculateCF
    268          			Table[i].LCF = LCF;
   \   00000048   140094E5           LDR      R0,[R4, #+20]
   \   0000004C   04109DE5           LDR      R1,[SP, #+4]
   \   00000050   000087E0           ADD      R0,R7,R0
   \   00000054   041080E5           STR      R1,[R0, #+4]
    269          			Table[i].TCF = TCF;
   \   00000058   08109DE5           LDR      R1,[SP, #+8]
    270          		}
   \   0000005C   016086E2           ADD      R6,R6,#+1
   \   00000060   0C1080E5           STR      R1,[R0, #+12]
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \                     ??ConvertCGtoCF_2:
   \   00000068   140084E2           ADD      R0,R4,#+20
   \   0000006C   041090E5           LDR      R1,[R0, #+4]
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   000041E0           SUB      R0,R1,R0
   \   00000078   1410A0E3           MOV      R1,#+20
   \   0000007C   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000080   010056E1           CMP      R6,R1
   \   00000084   E5FFFF3A           BCC      ??ConvertCGtoCF_3
    271          	}
    272          }
   \                     ??ConvertCGtoCF_1:
   \   00000088   F340BDE8           POP      {R0,R1,R4-R7,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
    273          

   \                                 In segment CODE, align 4, keep-with-next
    274          void TSNTableCenterOfFlotation::CalculateCG(float Level, float *LCG, float *TCG)
    275          {
   \                     ??CalculateCG:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    276          	if ( Table.empty() ) {
   \   0000000C   140084E2           ADD      R0,R4,#+20
   \   00000010   041090E5           LDR      R1,[R0, #+4]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   000041E0           SUB      R0,R1,R0
   \   00000020   1410A0E3           MOV      R1,#+20
   \   00000024   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000028   000051E3           CMP      R1,#+0
    277          		*LCG = 0.0;
   \   0000002C   0000A003           MOVEQ    R0,#+0
   \   00000030   00008605           STREQ    R0,[R6, #+0]
    278          		*TCG = 0.0;
   \   00000034   3700000A           BEQ      ??CalculateCG_1
    279          	} else {
    280          		unsigned Size = Table.size();
    281          		if ( Size == 1 ) {
   \   00000038   149094E5           LDR      R9,[R4, #+20]
   \   0000003C   140084E2           ADD      R0,R4,#+20
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000041E0           SUB      R0,R1,R0
   \   0000004C   1410A0E3           MOV      R1,#+20
   \   00000050   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000054   01A0A0E1           MOV      R10,R1
   \   00000058   01005AE3           CMP      R10,#+1
    282          			*LCG = Table[0].LCG;
   \   0000005C   08009905           LDREQ    R0,[R9, #+8]
   \   00000060   00008605           STREQ    R0,[R6, #+0]
    283          			*TCG = Table[0].TCG;
   \   00000064   10009905           LDREQ    R0,[R9, #+16]
   \   00000068   2A00000A           BEQ      ??CalculateCG_1
    284          		} else {
    285          			unsigned i=1;
   \   0000006C   01B0A0E3           MOV      R11,#+1
   \   00000070   000000EA           B        ??CalculateCG_2
    286          			while ( ( i < Size-1 ) && ( Table[i].Level < Level ) )	i++;
   \                     ??CalculateCG_3:
   \   00000074   01B08BE2           ADD      R11,R11,#+1
   \                     ??CalculateCG_2:
   \   00000078   1400A0E3           MOV      R0,#+20
   \   0000007C   900B07E0           MUL      R7,R0,R11
   \   00000080   098087E0           ADD      R8,R7,R9
   \   00000084   01004AE2           SUB      R0,R10,#+1
   \   00000088   00005BE1           CMP      R11,R0
   \   0000008C   0400002A           BCS      ??CalculateCG_4
   \   00000090   000098E5           LDR      R0,[R8, #+0]
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     __fLess,??__fLess??rA
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   F3FFFF1A           BNE      ??CalculateCG_3
    287          			// We do not extrapolate
    288          			if ( i >= Size ) {
   \                     ??CalculateCG_4:
   \   000000A4   0A005BE1           CMP      R11,R10
   \   000000A8   0600003A           BCC      ??CalculateCG_5
    289          				*LCG = Table[Size-1].LCG;
   \   000000AC   1400A0E3           MOV      R0,#+20
   \   000000B0   909A21E0           MLA      R1,R0,R10,R9
   \   000000B4   0C0041E2           SUB      R0,R1,#+12
   \   000000B8   001090E5           LDR      R1,[R0, #+0]
   \   000000BC   001086E5           STR      R1,[R6, #+0]
    290          				*TCG = Table[Size-1].TCG;
   \   000000C0   080090E5           LDR      R0,[R0, #+8]
   \   000000C4   130000EA           B        ??CalculateCG_1
    291          			} else {
    292          				float Level1 = Table[i-1].Level;
    293          				float Level2 = Table[i  ].Level;
   \                     ??CalculateCG_5:
   \   000000C8   00A098E5           LDR      R10,[R8, #+0]
   \   000000CC   140048E2           SUB      R0,R8,#+20
   \   000000D0   009090E5           LDR      R9,[R0, #+0]
    294          				*LCG = IntPol1stDeg(Level1,Level2,Table[i-1].LCG,Table[i].LCG,Level);
   \   000000D4   0510A0E1           MOV      R1,R5
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   083098E5           LDR      R3,[R8, #+8]
   \   000000E0   082090E5           LDR      R2,[R0, #+8]
   \   000000E4   0A10A0E1           MOV      R1,R10
   \   000000E8   0900A0E1           MOV      R0,R9
   \   000000EC   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   000000F0   000086E5           STR      R0,[R6, #+0]
    295          				*TCG = IntPol1stDeg(Level1,Level2,Table[i-1].TCG,Table[i].TCG,Level);
   \   000000F4   140094E5           LDR      R0,[R4, #+20]
   \   000000F8   20002DE9           PUSH     {R5}
   \   000000FC   000087E0           ADD      R0,R7,R0
   \   00000100   103090E5           LDR      R3,[R0, #+16]
   \   00000104   042010E5           LDR      R2,[R0, #-4]
   \   00000108   0A10A0E1           MOV      R1,R10
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000114   08D08DE2           ADD      SP,SP,#+8
   \                     ??CalculateCG_1:
   \   00000118   00109DE5           LDR      R1,[SP, #+0]
   \   0000011C   000081E5           STR      R0,[R1, #+0]
    296          			}
    297          		}
    298          	}
    299          }
   \   00000120   F14FBDE8           POP      {R0,R4-R11,LR}
   \   00000124   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%10.3f %10.2f %10.2f ...">`:
   \   00000000   2531302E3366       DC8 "%10.3f %10.2f %10.2f %10.2f %10.2f\015\012"
   \              202531302E32
   \              66202531302E
   \              326620253130
   \              2E3266202531
   \              302E32660D0A
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   2531302E3366       DC8 "%10.3f %10.2f %10.2f\015\012"
   \              202531302E32
   \              66202531302E
   \              32660D0A00  
   \   0000003F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)`:
   \   00000000   000080BF0000       DC32 0BF800000H, 0BF800000H, 0BF800000H, 0BF800000H
   \              80BF000080BF
   \              000080BF    
   \   00000010   00000000           DC8 0, 0, 0, 0
   \   00000014   43656E746572       DC8 "Center of Flotation table"
   \              206F6620466C
   \              6F746174696F
   \              6E207461626C
   \              6500        
   \   0000002E   0000               DC8 0, 0
   \   00000030   2C20666F7220       DC8 ", for "
   \              00          
   \   00000037   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTableCenterOfFlotation &TSNTableCenterOfFlotation::new TSNTableCenterOfFlotation(int)
   \                     `??new TSNTableCenterOfFlotation`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   2000A0E3           MOV      R0,#+32
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new TSNTableCenterOfFlotation_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??TSNTableCenterOfFlotation
   \                     `??new TSNTableCenterOfFlotation_1`:
   \   00000020   ........           B        ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TSNTableCenterOfFlotation::delete ~TSNTableCenterOfFlotation(TSNTableCenterOfFlotation *)
   \                     `??delete ~TSNTableCenterOfFlotation`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TSNTableCenterOfFlotation_1`
   \   0000000C   ........           BL       `?~TSNTableCenterOfFlotation`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TSNTableCenterOfFlotation_1`:
   \   00000018                      REQUIRE ?Subroutine12
   \   00000018                      ;; // Fall through to label ?Subroutine12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??npos
    300          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     TSNTableCenterOfFlotation::Calculate(float, float *, float *)
                                       44
     TSNTableCenterOfFlotation::CalculateCF(float, float *, float *, TSNTable1Degree *)
                                       68
     TSNTableCenterOfFlotation::CalculateCG(float, float *, float *)
                                       48
     TSNTableCenterOfFlotation::ConvertCGtoCF(TSNTable1Degree *)
                                       32
     TSNTableCenterOfFlotation::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                      280
     TSNTableCenterOfFlotation::MakeConfigString(int)
                                      860
     TSNTableCenterOfFlotation::ReadTable(TSNConfigString &, int &)
                                       40
     TSNTableCenterOfFlotation::TSNTableCenterOfFlotation(int)
                                       12
     TSNTableCenterOfFlotation::delete ~TSNTableCenterOfFlotation(TSNTableCenterOfFlotation *)
                                        8
     TSNTableCenterOfFlotation::new TSNTableCenterOfFlotation(int)
                                        8
     TSNTableCenterOfFlotation::~TSNTableCenterOfFlotation()
                                       12
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Insert_n(CFEntry *, unsigned int, CFEntry const &)
                                       40
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Make_room(CFEntry *, unsigned int)
                                       32
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Push_back0(CFEntry const &)
                                       32
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Tidy0()
                                        4
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Tidy0()
                                      36
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Insert_n(CFEntry *, unsigned int, CFEntry const &)
                                      80
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Make_room(CFEntry *, unsigned int)
                                     260
     _Vector_impl<CFEntry, allocator<CFEntry>>::_Push_back0(CFEntry const &)
                                      84
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     TSNTableCenterOfFlotation::TSNTableCenterOfFlotation(int)
                                      84
     ?Subroutine13                     8
     TSNTableCenterOfFlotation::ReadTable(TSNConfigString &, int &)
                                     336
     TSNTableCenterOfFlotation::~TSNTableCenterOfFlotation()
                                      52
     TSNTableCenterOfFlotation::MakeConfigString(int)
                                    2008
     ?Subroutine14                    24
     TSNTableCenterOfFlotation::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                     996
     TSNTableCenterOfFlotation::Calculate(float, float *, float *)
                                     232
     TSNTableCenterOfFlotation::CalculateCF(float, float *, float *, TSNTable1Degree *)
                                     480
     TSNTableCenterOfFlotation::ConvertCGtoCF(TSNTable1Degree *)
                                     144
     TSNTableCenterOfFlotation::CalculateCG(float, float *, float *)
                                     296
     ?<Constant "%10.3f %10.2f %10.2f ...">
                                      64
     ?<Constant {(-1.0F), (-1.0F), (-1.0F), (-1.0F)
                                      56
     ?<Constant ":\n">                 3
     __sti__routine()                  4
     TSNTableCenterOfFlotation::new TSNTableCenterOfFlotation(int)
                                      36
     TSNTableCenterOfFlotation::delete ~TSNTableCenterOfFlotation(TSNTableCenterOfFlotation *)
                                      24
     ?Subroutine12                     8
     ??DataTable1                      4
     ??DataTable3                      4
      Others                         552

 
 5 948 bytes in segment CODE
   143 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 4 744 bytes of CODE  memory (+ 1 208 bytes shared)
   143 bytes of CONST memory

Errors: none
Warnings: none
