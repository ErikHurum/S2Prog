##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:13:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\CtrlAlarmRelay.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\CtrlAlarmRelay.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\CtrlAlarmRelay.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\CtrlAlarmRelay.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\CtrlAlarmRelay.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          CtrlAlarmRelay::CtrlAlarmRelay(int Number):PROControl(RELAY_1+Number-1)
   \                     ??CtrlAlarmRelay:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     10          {
   \   0000000C   031085E2           ADD      R1,R5,#+3
   \   00000010   ........           _BLF     ??PROControl,??PROControl??rA
   \   00000014   18009FE5           LDR      R0,??CtrlAlarmRelay_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     11          	NumberOnTCU = Number;
   \   0000001C   3C5184E5           STR      R5,[R4, #+316]
     12          	AlarmAlternative = C_CTRL_ALT_ALL;
   \   00000020   7700A0E3           MOV      R0,#+119
   \   00000024   700E80E3           ORR      R0,R0,#0x700
   \   00000028   040184E5           STR      R0,[R4, #+260]
     13          }
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           B        ?Subroutine7
   \                     ??CtrlAlarmRelay_1:
   \   00000034   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine7:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          CtrlAlarmRelay::~CtrlAlarmRelay(void)
     16          {
   \                     `?~CtrlAlarmRelay`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~CtrlAlarmRelay_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PROControl`,`?~PROControl??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~CtrlAlarmRelay_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~CtrlAlarmRelay_1`:
   \   0000002C                      REQUIRE ?Subroutine7
   \   0000002C                      ;; // Fall through to label ?Subroutine7
     18          //---------------------------------------------------------------------------
     19          
     20          ///////////////////////////////////////////////////////////////
     21          
     22          // Routines for the Configuration
     23          
     24          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     25          AnsiString CtrlAlarmRelay::MakeConfigString(int ExtraTabs)
     26          {
   \                     ??MakeConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     27          	AnsiString LocalString;
     28          	LocalString +=TabStr1+KeyWord(C_PRO_CTRL_AL_RELAY)+(AnsiString)NumberOnTCU+CrLfStr;
   \   00000004   9C819FE5           LDR      R8,??MakeConfigString_2  ;; TabStr1
   \   00000008   FCD04DE2           SUB      SP,SP,#+252
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   3C1194E5           LDR      R1,[R4, #+316]
   \   00000024   E0008DE2           ADD      R0,SP,#+224
   \   00000028   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   9310A0E3           MOV      R1,#+147
   \   00000034   401E81E3           ORR      R1,R1,#0x400
   \   00000038   54008DE2           ADD      R0,SP,#+84
   \   0000003C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000040   54208DE2           ADD      R2,SP,#+84
   \   00000044   0810A0E1           MOV      R1,R8
   \   00000048   38008DE2           ADD      R0,SP,#+56
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   0720A0E1           MOV      R2,R7
   \   00000054   50719FE5           LDR      R7,??MakeConfigString_2+0x4  ;; CrLfStr
   \   00000058   38108DE2           ADD      R1,SP,#+56
   \   0000005C   1C008DE2           ADD      R0,SP,#+28
   \   00000060   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000064   0720A0E1           MOV      R2,R7
   \   00000068   1C108DE2           ADD      R1,SP,#+28
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   009090E5           LDR      R9,[R0, #+0]
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0930A0E1           MOV      R3,R9
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           _BLF     ??append,??append??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   1C008DE2           ADD      R0,SP,#+28
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   E0008DE2           ADD      R0,SP,#+224
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   38008DE2           ADD      R0,SP,#+56
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   54008DE2           ADD      R0,SP,#+84
   \   000000DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     29          	LocalString += PROControl::MakeConfigString(ExtraTabs);	 //common
   \   000000E0   0620A0E1           MOV      R2,R6
   \   000000E4   70108DE2           ADD      R1,SP,#+112
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   000000F0   0930A0E1           MOV      R3,R9
   \   000000F4   0020A0E3           MOV      R2,#+0
   \   000000F8   70108DE2           ADD      R1,SP,#+112
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??append,??append??rA
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   70008DE2           ADD      R0,SP,#+112
   \   00000110   ........           _BLF     ??_Tidy,??_Tidy??rA
     30          
     31          	LocalString +=TabStr1+KeyWord(C_CTRL_END)+CrLfStr;
   \   00000114   6C10A0E3           MOV      R1,#+108
   \   00000118   701E81E3           ORR      R1,R1,#0x700
   \   0000011C   C4008DE2           ADD      R0,SP,#+196
   \   00000120   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000124   C4208DE2           ADD      R2,SP,#+196
   \   00000128   0810A0E1           MOV      R1,R8
   \   0000012C   A8008DE2           ADD      R0,SP,#+168
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   0720A0E1           MOV      R2,R7
   \   00000138   A8108DE2           ADD      R1,SP,#+168
   \   0000013C   8C008DE2           ADD      R0,SP,#+140
   \   00000140   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000144   0930A0E1           MOV      R3,R9
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   8C108DE2           ADD      R1,SP,#+140
   \   00000150   0500A0E1           MOV      R0,R5
   \   00000154   ........           _BLF     ??append,??append??rA
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   8C008DE2           ADD      R0,SP,#+140
   \   00000164   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   A8008DE2           ADD      R0,SP,#+168
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   C4008DE2           ADD      R0,SP,#+196
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
     32          	LocalString += CrLfStr;
   \   00000188   0930A0E1           MOV      R3,R9
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   0500A0E1           MOV      R0,R5
   \   00000198   ........           _BLF     ??append,??append??rA
     33          
     34          	return(LocalString);
   \   0000019C   FCD08DE2           ADD      SP,SP,#+252
   \   000001A0   F043BDE8           POP      {R4-R9,LR}
   \   000001A4   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   000001A8   ........           DC32     TabStr1
   \   000001AC   ........           DC32     CrLfStr
     35          }
     36          //---------------------------------------------------------------------------
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          bool CtrlAlarmRelay::LoadConfigString(TSNConfigString &ConfigString)
     39          {
   \                     ??LoadConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     40          	bool NoError = true;
     41          	int ErrorLine=0;
   \   00000004   74919FE5           LDR      R9,??LoadConfigString_2  ;; `?<Constant "Alarm relay">`
   \   00000008   74D04DE2           SUB      SP,SP,#+116
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0170A0E3           MOV      R7,#+1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0180E0E1           MVN      R8,R1
     42          	int Key;
     43          	do {
     44          		AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   20108DE2           ADD      R1,SP,#+32
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??NextWord,??NextWord??rA
     45          		if ( ErrorLine ) {
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0B00000A           BEQ      ??LoadConfigString_4
     46          			if ( ErrorLine != EOF ) {
   \   00000044   080050E1           CMP      R0,R8
   \   00000048   3D00000A           BEQ      ??LoadConfigString_5
     47          				GiveConfigWarning("Alarm relay",ErrorLine);
   \   0000004C   0910A0E1           MOV      R1,R9
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_6:
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   330000EA           B        ??LoadConfigString_5
     48          			}
     49          		} else {
     50          			Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   00A090E5           LDR      R10,[R0, #+0]
   \   00000090   20108DE2           ADD      R1,SP,#+32
   \   00000094   0A30A0E1           MOV      R3,R10
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           _BLF     ??assign,??assign??rA
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A8   0060A0E1           MOV      R6,R0
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   04008DE2           ADD      R0,SP,#+4
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
     51          			switch ( Key ) {
   \   000000BC   FA0F56E2           SUBS     R0,R6,#+1000
   \   000000C0   E10F5012           SUBSNE   R0,R0,#+900
   \   000000C4   1E00000A           BEQ      ??LoadConfigString_5
   \   000000C8   010050E2           SUBS     R0,R0,#+1
   \   000000CC   1800000A           BEQ      ??LoadConfigString_7
   \   000000D0   010050E2           SUBS     R0,R0,#+1
   \   000000D4   1A00000A           BEQ      ??LoadConfigString_5
     52          				default:
     53          					GiveConfigWarning("Alarm relay",InputKeyWord,ConfigString.LineCount);
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   3C008DE2           ADD      R0,SP,#+60
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0A30A0E1           MOV      R3,R10
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   20108DE2           ADD      R1,SP,#+32
   \   000000F4   3C008DE2           ADD      R0,SP,#+60
   \   000000F8   ........           _BLF     ??assign,??assign??rA
   \   000000FC   0910A0E1           MOV      R1,R9
   \   00000100   58008DE2           ADD      R0,SP,#+88
   \   00000104   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000108   1C2095E5           LDR      R2,[R5, #+28]
   \   0000010C   3C108DE2           ADD      R1,SP,#+60
   \   00000110   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   3C008DE2           ADD      R0,SP,#+60
   \   00000120   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   58008DE2           ADD      R0,SP,#+88
   \   00000130   CDFFFFEA           B        ??LoadConfigString_6
     54          					break;
     55          				case C_PRO_END:
     56          				case C_CTRL_END:
     57          				case C_CTRL_END_COMMON:
     58          					break;
     59          				case C_CTRL_START_COMMON:
     60          					NoError = PROControl::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_7:
   \   00000134   0510A0E1           MOV      R1,R5
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000140   0070A0E1           MOV      R7,R0
     61          					break;
     62          			}
     63          		}
     64          	}while ( NoError && ( ErrorLine != EOF )&& ( Key != C_CTRL_END ) );
   \                     ??LoadConfigString_5:
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   20008DE2           ADD      R0,SP,#+32
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   000057E3           CMP      R7,#+0
   \   00000158   00009D15           LDRNE    R0,[SP, #+0]
   \   0000015C   08005011           CMPNE    R0,R8
   \   00000160   6C00A013           MOVNE    R0,#+108
   \   00000164   700E8013           ORRNE    R0,R0,#0x700
   \   00000168   00005611           CMPNE    R6,R0
   \   0000016C   ACFFFF1A           BNE      ??LoadConfigString_3
     65          	return(NoError);
   \   00000170   0700A0E1           MOV      R0,R7
   \   00000174   74D08DE2           ADD      SP,SP,#+116
   \   00000178   F047BDE8           POP      {R4-R10,LR}
   \   0000017C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   00000180   ........           DC32     `?<Constant "Alarm relay">`
     66          }
     67          
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          void CtrlAlarmRelay::Update(char Mode)
     70          {
   \                     ??Update:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     71          #ifdef S2TXU
     72          	OS_Use(&CtrlSema);
   \   00000008   4B5FA0E3           MOV      R5,#+300
   \   0000000C   040085E0           ADD      R0,R5,R4
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
     73          
     74          	//int OrgActiveAl         = ActiveAl       ;
     75          	//int OrgAcknowledgedAl 	= AcknowledgedAl ;
     76          	//int OrgIdleAl			= IdleAl         ;
     77          	//int OrgSuspAl			= SuspAl         ;
     78          	//int OrgOutsideLim       = OutsideLim     ;
     79          	bool IsChange = false;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0010CDE5           STRB     R1,[SP, #+0]
     80          	bool IsActive = GetOutputVal(IsChange);
     81          	if ( IsActive ) {
   \   0000001C   4A6FA0E3           MOV      R6,#+296
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??GetOutputVal,??GetOutputVal??rA
   \   0000002C   A4C094E5           LDR      R12,[R4, #+164]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   040096E7           LDR      R0,[R6, +R4]
   \   00000038   1A00000A           BEQ      ??Update_1
     82          		if ( !(Priority & R_ACTIVATE0) ) {
   \   0000003C   010010E3           TST      R0,#0x1
   \   00000040   0900001A           BNE      ??Update_2
     83          			Activate(R_ACTIVATE0,RELAY_MSG_ON,0,0);
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   60609CE5           LDR      R6,[R12, #+96]
   \   00000050   0030A0E3           MOV      R3,#+0
   \                     ??Update_3:
   \   00000054   0120A0E3           MOV      R2,#+1
   \   00000058   0210A0E1           MOV      R1,R2
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0FE0A0E1           MOV      LR,PC
   \   00000064   16FF2FE1           BX       R6
   \   00000068   280000EA           B        ??Update_4
     84          		} else {
     85          			if ( IsChange ) {
   \                     ??Update_2:
   \   0000006C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   2600000A           BEQ      ??Update_5
     86          				DeActivate();
   \   00000078   64109CE5           LDR      R1,[R12, #+100]
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   0FE0A0E1           MOV      LR,PC
   \   00000084   11FF2FE1           BX       R1
     87          				OS_Delay(1000);
   \   00000088   FA0FA0E3           MOV      R0,#+1000
   \   0000008C   ........           _BLF     OS_Delay,??OS_Delay??rA
     88          				Activate(R_ACTIVATE0,RELAY_MSG_ON,0,0);
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   A46094E5           LDR      R6,[R4, #+164]
   \   0000009C   0030A0E3           MOV      R3,#+0
   \   000000A0   606096E5           LDR      R6,[R6, #+96]
   \   000000A4   EAFFFFEA           B        ??Update_3
     89          			}
     90          		}
     91          	} else if ( !(Priority & R_INACTIVE) ) {
   \                     ??Update_1:
   \   000000A8   100010E3           TST      R0,#0x10
   \   000000AC   0400001A           BNE      ??Update_6
     92          		DeActivate();
   \   000000B0   64109CE5           LDR      R1,[R12, #+100]
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   0FE0A0E1           MOV      LR,PC
   \   000000BC   11FF2FE1           BX       R1
   \   000000C0   130000EA           B        ??Update_5
     93          	}else{
     94          		if ( IsChange ) {
   \                     ??Update_6:
   \   000000C4   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   1000000A           BEQ      ??Update_5
     95          			Activate(R_ACTIVATE0,RELAY_MSG_ON,0,0);
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   60609CE5           LDR      R6,[R12, #+96]
   \   000000DC   0030A0E3           MOV      R3,#+0
   \   000000E0   0120A0E3           MOV      R2,#+1
   \   000000E4   0210A0E1           MOV      R1,R2
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   0FE0A0E1           MOV      LR,PC
   \   000000F0   16FF2FE1           BX       R6
     96          			OS_Delay(1000);
   \   000000F4   FA0FA0E3           MOV      R0,#+1000
   \   000000F8   ........           _BLF     OS_Delay,??OS_Delay??rA
     97          			DeActivate();
   \   000000FC   A41094E5           LDR      R1,[R4, #+164]
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   641091E5           LDR      R1,[R1, #+100]
   \   00000108   0FE0A0E1           MOV      LR,PC
   \   0000010C   11FF2FE1           BX       R1
   \                     ??Update_4:
   \   00000110   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
     98          		}
     99          	}
    100          	OS_Unuse(&CtrlSema);
   \                     ??Update_5:
   \   00000114   040085E0           ADD      R0,R5,R4
   \   00000118   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    101          #endif
    102          }
   \   0000011C   7140BDE8           POP      {R0,R4-R6,LR}
   \   00000120   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Alarm relay">`:
   \   00000000   416C61726D20       DC8 "Alarm relay"
   \              72656C617900

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CtrlAlarmRelay &CtrlAlarmRelay::new CtrlAlarmRelay(int)
   \                     `??new CtrlAlarmRelay`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   500FA0E3           MOV      R0,#+320
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new CtrlAlarmRelay_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??CtrlAlarmRelay
   \                     `??new CtrlAlarmRelay_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??npos
    103          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CtrlAlarmRelay::CtrlAlarmRelay(int)
                                       12
     CtrlAlarmRelay::LoadConfigString(TSNConfigString &)
                                      148
     CtrlAlarmRelay::MakeConfigString(int)
                                      280
     CtrlAlarmRelay::Update(char)      24
     CtrlAlarmRelay::new CtrlAlarmRelay(int)
                                        8
     CtrlAlarmRelay::~CtrlAlarmRelay()
                                       12
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     CtrlAlarmRelay::CtrlAlarmRelay(int)
                                      56
     ?Subroutine7                      8
     CtrlAlarmRelay::~CtrlAlarmRelay()
                                      44
     CtrlAlarmRelay::MakeConfigString(int)
                                     432
     CtrlAlarmRelay::LoadConfigString(TSNConfigString &)
                                     388
     CtrlAlarmRelay::Update(char)    292
     ?<Constant "Alarm relay">        12
     CtrlAlarmRelay::new CtrlAlarmRelay(int)
                                      40
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         400

 
 1 716 bytes in segment CODE
   116 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 272 bytes of CODE  memory (+ 448 bytes shared)
   116 bytes of CONST memory

Errors: none
Warnings: none
