##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIFuseSensor.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\AIFuseSensor.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIFuseSensor.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIFuseSensor.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIFuseSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
   \                     ??Ref:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
   \                     `??operator less<AlarmBasic *> &`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??Ref,??Ref??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
   \                     ??pair:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??iterator,??iterator??rA
   \   0000001C   0460C4E5           STRB     R6,[R4, #+4]
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *operator new(unsigned int, void *)
   \                     `??operator new`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node * allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
   \                     ??max_size:
   \   00000000   14209FE5           LDR      R2,??max_size_2  ;; 0xccccccc
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_3
   \                     ??max_size_4:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_3:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??max_size_2:
   \   0000001C   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
   \                     `??operator()`:
   \   00000000   020051E1           CMP      R1,R2
   \   00000004   0100002A           BCS      `??operator()_1`
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   000000EA           B        `??operator()_2`
   \                     `??operator()_1`:
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     `??operator()_2`:
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
   \                     ??_GenNode:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   04C0DDE5           LDRB     R12,[SP, #+4]
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   042080E5           STR      R2,[R0, #+4]
   \   00000010   083080E5           STR      R3,[R0, #+8]
   \   00000014   0CC0C0E5           STRB     R12,[R0, #+12]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0D40C0E5           STRB     R4,[R0, #+13]
   \   00000020   1000BDE8           POP      {R4}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Color:
   \   00000000   0C0090E2           ADDS     R0,R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil:
   \   00000000   0D0090E2           ADDS     R0,R0,#+13
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \                     ??_Max_1:
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0400001A           BNE      ??_Max_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0040B0E1           MOVS     R4,R0
   \   00000038   F2FFFFEA           B        ??_Max_1
   \                     ??_Max_2:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_DecP_1
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Right,??_Right??rA
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   240000EA           B        ??_DecP_2
   \                     ??_DecP_1:
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Left,??_Left??rA
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400001A           BNE      ??_DecP_3
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Left,??_Left??rA
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     ??_Max,??_Max??rA
   \   00000060   170000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \                     ??_DecP_4:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0050B0E1           MOVS     R5,R0
   \   00000074   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0600001A           BNE      ??_DecP_5
   \   00000088   0500B0E1           MOVS     R0,R5
   \   0000008C   ........           _BLF     ??_Left,??_Left??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0100001A           BNE      ??_DecP_5
   \   0000009C   0540B0E1           MOVS     R4,R5
   \   000000A0   EFFFFFEA           B        ??_DecP_4
   \                     ??_DecP_5:
   \   000000A4   0500B0E1           MOVS     R0,R5
   \   000000A8   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   000000AC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0000001A           BNE      ??_DecP_6
   \   000000BC   0540B0E1           MOVS     R4,R5
   \                     ??_DecP_6:
   \   000000C0   0400B0E1           MOVS     R0,R4
   \                     ??_DecP_2:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_GenIter:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
   \                     `??operator==`:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0100001A           BNE      `??operator==_2`
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   000000EA           B        `??operator==_3`
   \                     `??operator==_2`:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     `??operator==_3`:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     ??_DecP,??_DecP??rA
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
   \                     ??_Mynode:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Root()
   \                     ??_Root:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Lmost()
   \                     ??_Lmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Left,??_Left??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Rmost()
   \                     ??_Rmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Left,??_Left??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Left,??_Left??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Right,??_Right??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Rrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Right,??_Right??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Rrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Rrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Right,??_Right??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Rrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Right,??_Right??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Left,??_Left??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Rrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Right,??_Right??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Right,??_Right??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Right,??_Right??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Left,??_Left??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Left,??_Left??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Lrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Lrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Lrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Left,??_Left??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Lrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Left,??_Left??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Right,??_Right??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Lrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Left,??_Left??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   100094E5           LDR      R0,[R4, #+16]
   \   00000018   010090E2           ADDS     R0,R0,#+1
   \   0000001C   100084E5           STR      R0,[R4, #+16]
   \   00000020   040056E1           CMP      R6,R4
   \   00000024   0900001A           BNE      ??_Insert_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Root,??_Root??rA
   \   00000030   007080E5           STR      R7,[R0, #+0]
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000003C   007080E5           STR      R7,[R0, #+0]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   00000048   007080E5           STR      R7,[R0, #+0]
   \   0000004C   180000EA           B        ??_Insert_3
   \                     ??_Insert_2:
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0B00000A           BEQ      ??_Insert_4
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   007080E5           STR      R7,[R0, #+0]
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000056E1           CMP      R6,R0
   \   00000074   0E00001A           BNE      ??_Insert_3
   \   00000078   0400B0E1           MOVS     R0,R4
   \   0000007C   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   00000080   007080E5           STR      R7,[R0, #+0]
   \   00000084   0A0000EA           B        ??_Insert_3
   \                     ??_Insert_4:
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     ??_Right,??_Right??rA
   \   00000090   007080E5           STR      R7,[R0, #+0]
   \   00000094   0400B0E1           MOVS     R0,R4
   \   00000098   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000056E1           CMP      R6,R0
   \   000000A4   0200001A           BNE      ??_Insert_3
   \   000000A8   0400B0E1           MOVS     R0,R4
   \   000000AC   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   000000B0   007080E5           STR      R7,[R0, #+0]
   \                     ??_Insert_3:
   \   000000B4   0780B0E1           MOVS     R8,R7
   \                     ??_Insert_5:
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     ??_Color,??_Color??rA
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   A200001A           BNE      ??_Insert_6
   \   000000D8   0800B0E1           MOVS     R0,R8
   \   000000DC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E0   0090B0E1           MOVS     R9,R0
   \   000000E4   0800B0E1           MOVS     R0,R8
   \   000000E8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000F4   009099E5           LDR      R9,[R9, #+0]
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   ........           _BLF     ??_Left,??_Left??rA
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   4A00001A           BNE      ??_Insert_7
   \   0000010C   0800B0E1           MOVS     R0,R8
   \   00000110   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   ........           _BLF     ??_Right,??_Right??rA
   \   00000124   000090E5           LDR      R0,[R0, #+0]
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   0600B0E1           MOVS     R0,R6
   \   00000130   ........           _BLF     ??_Color,??_Color??rA
   \   00000134   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000138   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   1800001A           BNE      ??_Insert_8
   \   00000144   0800B0E1           MOVS     R0,R8
   \   00000148   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     ??_Color,??_Color??rA
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   0010C0E5           STRB     R1,[R0, #+0]
   \   0000015C   0600B0E1           MOVS     R0,R6
   \   00000160   ........           _BLF     ??_Color,??_Color??rA
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   0010C0E5           STRB     R1,[R0, #+0]
   \   0000016C   0800B0E1           MOVS     R0,R8
   \   00000170   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     ??_Color,??_Color??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0010C0E5           STRB     R1,[R0, #+0]
   \   0000018C   0800B0E1           MOVS     R0,R8
   \   00000190   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   0080B0E1           MOVS     R8,R0
   \   000001A4   C3FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   000001A8   0800B0E1           MOVS     R0,R8
   \   000001AC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   ........           _BLF     ??_Right,??_Right??rA
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000058E1           CMP      R8,R0
   \   000001C0   0600001A           BNE      ??_Insert_9
   \   000001C4   0800B0E1           MOVS     R0,R8
   \   000001C8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0080B0E1           MOVS     R8,R0
   \   000001D4   0810B0E1           MOVS     R1,R8
   \   000001D8   0400B0E1           MOVS     R0,R4
   \   000001DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000001E0   0800B0E1           MOVS     R0,R8
   \   000001E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   ........           _BLF     ??_Color,??_Color??rA
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001F8   0800B0E1           MOVS     R0,R8
   \   000001FC   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   ........           _BLF     ??_Color,??_Color??rA
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0010C0E5           STRB     R1,[R0, #+0]
   \   00000218   0800B0E1           MOVS     R0,R8
   \   0000021C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000228   001090E5           LDR      R1,[R0, #+0]
   \   0000022C   0400B0E1           MOVS     R0,R4
   \   00000230   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000234   9FFFFFEA           B        ??_Insert_5
   \                     ??_Insert_7:
   \   00000238   0800B0E1           MOVS     R0,R8
   \   0000023C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   ........           _BLF     ??_Left,??_Left??rA
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   0060B0E1           MOVS     R6,R0
   \   00000258   0600B0E1           MOVS     R0,R6
   \   0000025C   ........           _BLF     ??_Color,??_Color??rA
   \   00000260   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000264   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   1800001A           BNE      ??_Insert_10
   \   00000270   0800B0E1           MOVS     R0,R8
   \   00000274   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           _BLF     ??_Color,??_Color??rA
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   0010C0E5           STRB     R1,[R0, #+0]
   \   00000288   0600B0E1           MOVS     R0,R6
   \   0000028C   ........           _BLF     ??_Color,??_Color??rA
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   0010C0E5           STRB     R1,[R0, #+0]
   \   00000298   0800B0E1           MOVS     R0,R8
   \   0000029C   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A0   000090E5           LDR      R0,[R0, #+0]
   \   000002A4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A8   000090E5           LDR      R0,[R0, #+0]
   \   000002AC   ........           _BLF     ??_Color,??_Color??rA
   \   000002B0   0010A0E3           MOV      R1,#+0
   \   000002B4   0010C0E5           STRB     R1,[R0, #+0]
   \   000002B8   0800B0E1           MOVS     R0,R8
   \   000002BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   0080B0E1           MOVS     R8,R0
   \   000002D0   78FFFFEA           B        ??_Insert_5
   \                     ??_Insert_10:
   \   000002D4   0800B0E1           MOVS     R0,R8
   \   000002D8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002DC   000090E5           LDR      R0,[R0, #+0]
   \   000002E0   ........           _BLF     ??_Left,??_Left??rA
   \   000002E4   000090E5           LDR      R0,[R0, #+0]
   \   000002E8   000058E1           CMP      R8,R0
   \   000002EC   0600001A           BNE      ??_Insert_11
   \   000002F0   0800B0E1           MOVS     R0,R8
   \   000002F4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   0080B0E1           MOVS     R8,R0
   \   00000300   0810B0E1           MOVS     R1,R8
   \   00000304   0400B0E1           MOVS     R0,R4
   \   00000308   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000030C   0800B0E1           MOVS     R0,R8
   \   00000310   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000314   000090E5           LDR      R0,[R0, #+0]
   \   00000318   ........           _BLF     ??_Color,??_Color??rA
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   0010C0E5           STRB     R1,[R0, #+0]
   \   00000324   0800B0E1           MOVS     R0,R8
   \   00000328   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000032C   000090E5           LDR      R0,[R0, #+0]
   \   00000330   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           _BLF     ??_Color,??_Color??rA
   \   0000033C   0010A0E3           MOV      R1,#+0
   \   00000340   0010C0E5           STRB     R1,[R0, #+0]
   \   00000344   0800B0E1           MOVS     R0,R8
   \   00000348   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000354   001090E5           LDR      R1,[R0, #+0]
   \   00000358   0400B0E1           MOVS     R0,R4
   \   0000035C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000360   54FFFFEA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000364   0400B0E1           MOVS     R0,R4
   \   00000368   ........           _BLF     ??_Root,??_Root??rA
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   ........           _BLF     ??_Color,??_Color??rA
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0010C0E5           STRB     R1,[R0, #+0]
   \   0000037C   F043BDE8           POP      {R4-R9,LR}
   \   00000380   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
   \                     ??comp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   140094E2           ADDS     R0,R4,#+20
   \   0000000C   ........           _BLF     `??operator less<AlarmBasic *> &`,`??operator less<AlarmBasic *> &??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
   \                     ??_Node:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   2090DDE5           LDRB     R9,[SP, #+32]
   \   0000001C   0900B0E1           MOVS     R0,R9
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0730B0E1           MOVS     R3,R7
   \   00000028   0620B0E1           MOVS     R2,R6
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_GenNode,??_GenNode??rA
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   108084E5           STR      R8,[R4, #+16]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F043BDE8           POP      {R4-R9,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
   \                     ??_Kfn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Kfn_1,??_Kfn??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
   \                     ??_Alnod:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Myval,??_Myval??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent_1:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right_1:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic *& _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Myval:
   \   00000000   100090E2           ADDS     R0,R0,#+16
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??const_iterator:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_GenIter,??_GenIter??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
   \                     `??operator==_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
   \                     ??_Mynode_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mynode,??_Mynode??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
   \                     ??iterator:
   \   00000000   001091E5           LDR      R1,[R1, #+0]
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??iterator_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??const_iterator,??const_iterator??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator &_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
   \                     `??operator--`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Dec,??_Dec??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
   \                     ??begin:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Lmost_1,??_Lmost??rA_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
   \                     ??max_size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??max_size,??max_size??rA
   \   00000020   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0080B0E1           MOVS     R8,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   \   00000010   0290B0E1           MOVS     R9,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Root_1,??_Root??rA_1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0070B0E1           MOVS     R7,R0
   \                     ??insert_1:
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Isnil_1,??_Isnil??rA_1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1800001A           BNE      ??insert_2
   \   00000050   0560B0E1           MOVS     R6,R5
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??_Key,??_Key??rA
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   0900B0E1           MOVS     R0,R9
   \   00000064   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000068   00B0B0E1           MOVS     R11,R0
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   ........           _BLF     ??comp,??comp??rA
   \   00000074   0A20B0E1           MOVS     R2,R10
   \   00000078   0B10B0E1           MOVS     R1,R11
   \   0000007C   ........           _BLF     `??operator()`,`??operator()??rA`
   \   00000080   0070B0E1           MOVS     R7,R0
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0400000A           BEQ      ??insert_3
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   0050B0E1           MOVS     R5,R0
   \   0000009C   E5FFFFEA           B        ??insert_1
   \                     ??insert_3:
   \   000000A0   0500B0E1           MOVS     R0,R5
   \   000000A4   ........           _BLF     ??_Right_1,??_Right??rA_1
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0050B0E1           MOVS     R5,R0
   \   000000B0   E0FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   000000B4   0610B0E1           MOVS     R1,R6
   \   000000B8   0D00B0E1           MOVS     R0,SP
   \   000000BC   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   1800000A           BEQ      ??insert_4
   \   000000C8   0400B0E1           MOVS     R0,R4
   \   000000CC   ........           _BLF     ??begin,??begin??rA
   \   000000D0   0C008DE5           STR      R0,[SP, #+12]
   \   000000D4   0C108DE2           ADD      R1,SP,#+12
   \   000000D8   0D00B0E1           MOVS     R0,SP
   \   000000DC   ........           _BLF     `??operator==_1`,`??operator==??rA_1`
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0E00000A           BEQ      ??insert_5
   \   000000E8   0930B0E1           MOVS     R3,R9
   \   000000EC   0620B0E1           MOVS     R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   000000FC   08008DE5           STR      R0,[SP, #+8]
   \   00000100   0120A0E3           MOV      R2,#+1
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   20008DE2           ADD      R0,SP,#+32
   \   0000010C   ........           _BLF     ??pair,??pair??rA
   \   00000110   20008DE2           ADD      R0,SP,#+32
   \   00000114   030090E8           LDM      R0,{R0,R1}
   \   00000118   030088E8           STM      R8,{R0,R1}
   \   0000011C   0800B0E1           MOVS     R0,R8
   \   00000120   260000EA           B        ??insert_6
   \                     ??insert_5:
   \   00000124   0D00B0E1           MOVS     R0,SP
   \   00000128   ........           _BLF     `??operator--`,`??operator--??rA`
   \                     ??insert_4:
   \   0000012C   0900B0E1           MOVS     R0,R9
   \   00000130   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000134   00A0B0E1           MOVS     R10,R0
   \   00000138   0D00B0E1           MOVS     R0,SP
   \   0000013C   ........           _BLF     ??_Mynode_1,??_Mynode??rA_1
   \   00000140   ........           _BLF     ??_Key,??_Key??rA
   \   00000144   00B0B0E1           MOVS     R11,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??comp,??comp??rA
   \   00000150   0A20B0E1           MOVS     R2,R10
   \   00000154   0B10B0E1           MOVS     R1,R11
   \   00000158   ........           _BLF     `??operator()`,`??operator()??rA`
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0E00000A           BEQ      ??insert_7
   \   00000164   0930B0E1           MOVS     R3,R9
   \   00000168   0620B0E1           MOVS     R2,R6
   \   0000016C   0710B0E1           MOVS     R1,R7
   \   00000170   0400B0E1           MOVS     R0,R4
   \   00000174   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0120A0E3           MOV      R2,#+1
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   18008DE2           ADD      R0,SP,#+24
   \   00000188   ........           _BLF     ??pair,??pair??rA
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   030090E8           LDM      R0,{R0,R1}
   \   00000194   030088E8           STM      R8,{R0,R1}
   \   00000198   0800B0E1           MOVS     R0,R8
   \   0000019C   070000EA           B        ??insert_6
   \                     ??insert_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10B0E1           MOVS     R1,SP
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??pair,??pair??rA
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   030090E8           LDM      R0,{R0,R1}
   \   000001B8   030088E8           STM      R8,{R0,R1}
   \   000001BC   0800B0E1           MOVS     R0,R8
   \                     ??insert_6:
   \   000001C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C4   F04FBDE8           POP      {R4-R11,LR}
   \   000001C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??max_size_1,??max_size??rA_1
   \   00000020   0090B0E1           MOVS     R9,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   00A0B0E1           MOVS     R10,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Head,??_Head??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0710B0E1           MOVS     R1,R7
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0A30B0E1           MOVS     R3,R10
   \   0000004C   0620B0E1           MOVS     R2,R6
   \   00000050   0010B0E1           MOVS     R1,R0
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??_Buynode,??_Buynode??rA
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   0830B0E1           MOVS     R3,R8
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000078   0810B0E1           MOVS     R1,R8
   \   0000007C   0D00B0E1           MOVS     R0,SP
   \   00000080   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
   \                     ??_Lmost_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
   \                     ??_Root_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Parent_1,??_Parent??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
   \                     ??_Head:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
   \                     ??_Buynode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C90DDE5           LDRB     R9,[SP, #+44]
   \   00000020   0D10B0E1           MOVS     R1,SP
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   00000038   00A0B0E1           MOVS     R10,R0
   \   0000003C   0A10B0E1           MOVS     R1,R10
   \   00000040   1400A0E3           MOV      R0,#+20
   \   00000044   ........           _BLF     `??operator new`,`??operator new??rA_1`
   \   00000048   00B0B0E1           MOVS     R11,R0
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0A00000A           BEQ      ??_Buynode_1
   \   00000054   0900B0E1           MOVS     R0,R9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800B0E1           MOVS     R0,R8
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0730B0E1           MOVS     R3,R7
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0B00B0E1           MOVS     R0,R11
   \   00000074   ........           _BLF     ??_Node,??_Node??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   000000EA           B        ??_Buynode_2
   \                     ??_Buynode_1:
   \   00000080   00B0A0E3           MOV      R11,#+0
   \                     ??_Buynode_2:
   \   00000084   0A00B0E1           MOVS     R0,R10
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F04FBDE8           POP      {R4-R11,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
   \                     ??_Kfn_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          
      8          //---------------------------------------------------------------------------
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          AIFuseSensor::AIFuseSensor(void)
   \                     ??AIFuseSensor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
     11          {
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   7C009FE5           LDR      R0,??AIFuseSensor_1  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     12              Type                    = C_AI_FUSE;
   \   0000001C   8F00A0E3           MOV      R0,#+143
   \   00000020   800E80E3           ORR      R0,R0,#0x800
   \   00000024   A00084E5           STR      R0,[R4, #+160]
     13              BasicSensorType         = AI_SENSOR_FUSE;
   \   00000028   0700A0E3           MOV      R0,#+7
   \   0000002C   100184E5           STR      R0,[R4, #+272]
     14              BasicSensorTypeWord     = L_WORD551;    //Inclinometer
   \   00000030   2700A0E3           MOV      R0,#+39
   \   00000034   800F80E3           ORR      R0,R0,#0x200
   \   00000038   140184E5           STR      R0,[R4, #+276]
     15              Location                = C_AI_LOC_FUSES;
   \   0000003C   8F0EA0E3           MOV      R0,#+2288
   \   00000040   280184E5           STR      R0,[R4, #+296]
     16              AlarmFuse   *FuseAlPtr  = new AlarmFuse( this);
   \   00000044   EC00A0E3           MOV      R0,#+236
   \   00000048   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   0000004C   0060B0E1           MOVS     R6,R0
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   0400000A           BEQ      ??AIFuseSensor_2
   \   00000058   0410B0E1           MOVS     R1,R4
   \   0000005C   0600B0E1           MOVS     R0,R6
   \   00000060   ........           _BLF     ??AlarmFuse,??AlarmFuse??rA
   \   00000064   0650B0E1           MOVS     R5,R6
   \   00000068   000000EA           B        ??AIFuseSensor_3
   \                     ??AIFuseSensor_2:
   \   0000006C   0050A0E3           MOV      R5,#+0
     17              HasVoltage              = true;
   \                     ??AIFuseSensor_3:
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   6401C4E5           STRB     R0,[R4, #+356]
     18              AlarmSet.insert(FuseAlPtr);
   \   00000078   0520B0E1           MOVS     R2,R5
   \   0000007C   C01094E2           ADDS     R1,R4,#+192
   \   00000080   0D00B0E1           MOVS     R0,SP
   \   00000084   ........           _BLF     ??insert,??insert??rA
     19          }
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000090   7040BDE8           POP      {R4-R6,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     ??AIFuseSensor_1:
   \   00000098   ........           DC32     ??__vtbl
     20          //---------------------------------------------------------------------------
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          AIFuseSensor::~AIFuseSensor(void)
     23          {
   \                     `?~AIFuseSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AIFuseSensor_1`
     24          
     25          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AIFuseSensor_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIFuseSensor_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     26          //---------------------------------------------------------------------------
     27          
     28          ///////////////////////////////////////////////////////////////
     29          //
     30          // Routines for the librarian for input
     31          //
     32          ///////////////////////////////////////////////////////////////
     33          
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          int AIFuseSensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     36          {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   4080DDE5           LDRB     R8,[SP, #+64]
   \   0000001C   44909DE5           LDR      R9,[SP, #+68]
     37              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   00A0B0E1           MOVS     R10,R0
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   00B0B0E1           MOVS     R11,R0
     38              switch ( ValueId ) {
     39              case SVT_AI_OFFSET   :
     40              case SVT_AI_CALC_VAL :
     41              default:
     42                  ValUnitId = NO_UNIT;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   00B0B0E1           MOVS     R11,R0
     43                  Status = AnalogInput::PutValue(ValueId, Index,NewValue,Local);
   \   00000038   0710B0E1           MOVS     R1,R7
   \   0000003C   0D00B0E1           MOVS     R0,SP
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   0810B0E1           MOVS     R1,R8
   \   00000050   02002DE9           PUSH     {R1}
   \   00000054   0030B0E1           MOVS     R3,R0
   \   00000058   0620B0E1           MOVS     R2,R6
   \   0000005C   0510B0E1           MOVS     R1,R5
   \   00000060   0400B0E1           MOVS     R0,R4
   \   00000064   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000068   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000006C   00A0B0E1           MOVS     R10,R0
   \   00000070   0D00B0E1           MOVS     R0,SP
   \   00000074   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     44                  break;
     45              }
     46              if ( Status==E_NO_ERR ) {
   \   00000078   00005AE3           CMP      R10,#+0
   \   0000007C   0500001A           BNE      ??PutValue_2
     47                  SetModifiedFlag();
   \   00000080   A40094E5           LDR      R0,[R4, #+164]
   \   00000084   541090E2           ADDS     R1,R0,#+84
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   001091E5           LDR      R1,[R1, #+0]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
     48              }
     49              if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000098   000059E3           CMP      R9,#+0
   \   0000009C   0000000A           BEQ      ??PutValue_3
     50                  *UnitId = ValUnitId;
   \   000000A0   00B089E5           STR      R11,[R9, #+0]
     51              }
     52              return(Status);
   \                     ??PutValue_3:
   \   000000A4   0A00B0E1           MOVS     R0,R10
   \   000000A8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000AC   F04FBDE8           POP      {R4-R11,LR}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          int  AIFuseSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     56          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
     57              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
     58              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1600008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00131307           DC8      +0,+19,+19,+7
     59              case SVT_AI_OFFSET   :
     60                  Unit       = NO_UNIT;
   \                     ??GetValue_4:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   000089E5           STR      R0,[R9, #+0]
     61                  DecPnt     = 0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   000088E5           STR      R0,[R8, #+0]
     62                  MyRetValue = Offset;
   \   00000058   400194E5           LDR      R0,[R4, #+320]
   \   0000005C   000087E5           STR      R0,[R7, #+0]
   \   00000060   160000EA           B        ??GetValue_5
     63                  break;
     64              case SVT_AI_CALC_VAL :
     65                  Unit       = NO_UNIT;
   \                     ??GetValue_6:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   000089E5           STR      R0,[R9, #+0]
     66                  DecPnt     = 0;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   000088E5           STR      R0,[R8, #+0]
     67                  MyRetValue = Calculate();
   \   00000074   A40094E5           LDR      R0,[R4, #+164]
   \   00000078   601090E2           ADDS     R1,R0,#+96
   \   0000007C   0400B0E1           MOVS     R0,R4
   \   00000080   001091E5           LDR      R1,[R1, #+0]
   \   00000084   0FE0A0E1           MOV      LR,PC
   \   00000088   11FF2FE1           BX       R1
   \   0000008C   000087E5           STR      R0,[R7, #+0]
   \   00000090   0A0000EA           B        ??GetValue_5
     68                  break;
     69              default:
     70                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000094   0900B0E1           MOVS     R0,R9
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0800B0E1           MOVS     R0,R8
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0730B0E1           MOVS     R3,R7
   \   000000A8   0620B0E1           MOVS     R2,R6
   \   000000AC   0510B0E1           MOVS     R1,R5
   \   000000B0   0400B0E1           MOVS     R0,R4
   \   000000B4   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000BC   00A0B0E1           MOVS     R10,R0
     71                  break;
     72              }
     73              return(Status);
   \                     ??GetValue_5:
   \   000000C0   0A00B0E1           MOVS     R0,R10
   \   000000C4   F047BDE8           POP      {R4-R10,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          int AIFuseSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     77          {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
     78              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
     79              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
     80              case SVT_AI_UNIT:
     81                  MyString = GetUnitName(NO_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
     82                  break;
     83              default:
     84                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
     85                  break;
     86              }
     87              return(Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
     88          }
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int AIFuseSensor::PutFloatValue( int ValueId, float NewValue)
     91          {
   \                     ??PutFloatValue:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
     92              return(AnalogInput::PutFloatValue(ValueId, NewValue));
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000020   7040BDE8           POP      {R4-R6,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
     93          }
     94          
     95          

   \                                 In segment CODE, align 4, keep-with-next
     96          void AIFuseSensor::NewValue(float NewValue)
     97          {
   \                     ??NewValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     98          #ifndef ANCONF
     99              FilteredValue = NewValue;
   \   0000000C   445184E5           STR      R5,[R4, #+324]
    100              CalcValue     = NewValue;
   \   00000010   485184E5           STR      R5,[R4, #+328]
    101              HWFailure     = false;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0C01C4E5           STRB     R0,[R4, #+268]
    102              ResultOK      = true;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   3601C4E5           STRB     R0,[R4, #+310]
    103          
    104              if ( CurrentDeviceId == DEVICE_TCU ) {
   \   00000024   38009FE5           LDR      R0,??NewValue_1  ;; CurrentDeviceId
   \   00000028   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000002C   200050E3           CMP      R0,#+32
   \   00000030   0900001A           BNE      ??NewValue_2
    105                  CheckAlarms(AlarmSet);
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   C00094E2           ADDS     R0,R4,#+192
   \   0000003C   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    106                  SendData();
   \   00000040   A40094E5           LDR      R0,[R4, #+164]
   \   00000044   402090E2           ADDS     R2,R0,#+64
   \   00000048   6510A0E3           MOV      R1,#+101
   \   0000004C   0400B0E1           MOVS     R0,R4
   \   00000050   002092E5           LDR      R2,[R2, #+0]
   \   00000054   0FE0A0E1           MOV      LR,PC
   \   00000058   12FF2FE1           BX       R2
    107              }
    108          #endif
    109          }
   \                     ??NewValue_2:
   \   0000005C   3040BDE8           POP      {R4,R5,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return
   \                     ??NewValue_1:
   \   00000064   ........           DC32     CurrentDeviceId
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          float AIFuseSensor::Calculate(void)
    112          {
    113              ResultOK  = true;
   \                     ??Calculate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   3611C0E5           STRB     R1,[R0, #+310]
    114              CalcValue = FilteredValue;
   \   00000008   441190E5           LDR      R1,[R0, #+324]
   \   0000000C   481180E5           STR      R1,[R0, #+328]
    115              return(CalcValue);
   \   00000010   480190E5           LDR      R0,[R0, #+328]
   \   00000014   1EFF2FE1           BX       LR               ;; return
    116          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIFuseSensor &AIFuseSensor::new AIFuseSensor()
   \                     `??new AIFuseSensor`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5A0FA0E3           MOV      R0,#+360
   \   00000008   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      `??new AIFuseSensor_1`
   \   00000014   ........           BL       ??AIFuseSensor
   \   00000018   000000EA           B        `??new AIFuseSensor_2`
   \                     `??new AIFuseSensor_1`:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     `??new AIFuseSensor_2`:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1
    117          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIFuseSensor::AIFuseSensor()      24
     AIFuseSensor::Calculate()          0
     AIFuseSensor::GetStringValue(int, int, AnsiString &)
                                       52
     AIFuseSensor::GetValue(int, int, float &, int &, int &)
                                       40
     AIFuseSensor::NewValue(float)     12
     AIFuseSensor::PutFloatValue(int, float)
                                       16
     AIFuseSensor::PutValue(int, int, AnsiString, bool, int *)
                                       72
     AIFuseSensor::new AIFuseSensor()
                                        4
     AIFuseSensor::~AIFuseSensor()     12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                        0
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                        8
     _String_val::_String_val(char_allocator)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                       48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       76
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                       12
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        8
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                        0
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Lmost()
                                        8
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rmost()
                                        8
     _Tree_algobase<allocator<void>>::_Root()
                                        8
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                       32
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                        8
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                        8
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                        0
     __sti__routine()                   0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                       12
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                        0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                        0
     operator new(unsigned int, void *)
                                        0
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                       16
     string::assign(string const &)    12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                       4
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                      44
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::assign(string const &)   48
     operator new(unsigned int, void *)
                                      12
     _Allocator<void>::allocate(unsigned int)
                                      24
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                       4
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                      32
     allocator<void>::allocator()      4
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                      24
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                      40
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      72
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     204
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                      32
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                      28
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                       8
     _Tree_algobase<allocator<void>>::_Root()
                                      24
     _Tree_algobase<allocator<void>>::_Lmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     900
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                      24
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                      76
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                      52
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                      12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                      44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     460
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                     148
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                       4
     AnsiString::operator=(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::AnsiString(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIFuseSensor::AIFuseSensor()    156
     AIFuseSensor::~AIFuseSensor()    56
     AIFuseSensor::PutValue(int, int, AnsiString, bool, int *)
                                     180
     AIFuseSensor::GetValue(int, int, float &, int &, int &)
                                     204
     AIFuseSensor::GetStringValue(int, int, AnsiString &)
                                     120
     AIFuseSensor::PutFloatValue(int, float)
                                      40
     AIFuseSensor::NewValue(float)   104
     AIFuseSensor::Calculate()        24
     AIFuseSensor::new AIFuseSensor()
                                      40
     __sti__routine()                208
      Others                        1104

 
 5 908 bytes in segment CODE
   136 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 136 bytes of CODE  memory (+ 4 788 bytes shared)
   136 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
