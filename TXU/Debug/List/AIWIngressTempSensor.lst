##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIWIngressTempSensor.cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AIWIngressTempSensor.cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIWIngressTempSensor.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIWIngressTempSensor.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIWIngressTempSensor.cpp
      1          #include "TSNIncludes.h"
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          	#pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIWIngressTempSensor::AIWIngressTempSensor(PROIOComponent *IOCompPtr)
   \                     ??AIWIngressTempSensor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     10          {
   \   0000000C   ........           _BLF     ??AITempSensor,??AITempSensor??rA
   \   00000010   E4009FE5           LDR      R0,??AIWIngressTempSensor_2  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     11          	switch ( IOCompPtr->Type ) {
   \   00000018   A01095E5           LDR      R1,[R5, #+160]
   \   0000001C   4B0FA0E3           MOV      R0,#+300
   \   00000020   861041E2           SUB      R1,R1,#+134
   \   00000024   801E41E2           SUB      R1,R1,#+2048
   \   00000028   010051E3           CMP      R1,#+1
   \   0000002C   0300008A           BHI      ??AIWIngressTempSensor_3
   \   00000030   012F8FE2           ADR      R2,??AIWIngressTempSensor_1
   \   00000034   0120D2E7           LDRB     R2,[R2, R1]
   \   00000038   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??AIWIngressTempSensor_1:
   \   0000003C   03080000           DC8      +3,+8,+0,+0
     12          	default:
     13          	case C_AI_WATERINGRESS:
     14          		Type = C_AI_WATERINGR_TEMP;
   \                     ??AIWIngressTempSensor_3:
   \   00000040   8810A0E3           MOV      R1,#+136
   \   00000044   801E81E3           ORR      R1,R1,#0x800
   \   00000048   080000EA           B        ??AIWIngressTempSensor_4
     15          		break;
     16          	case C_AI_WATERINGR_MAIN:
     17          		Type = C_AI_WATERINGR_TEMP_M;
   \                     ??AIWIngressTempSensor_5:
   \   0000004C   8910A0E3           MOV      R1,#+137
   \   00000050   801E81E3           ORR      R1,R1,#0x800
     18                  Distance = 3.0;
   \   00000054   4024A0E3           MOV      R2,#+1073741824
   \   00000058   402882E3           ORR      R2,R2,#0x400000
   \   0000005C   020000EA           B        ??AIWIngressTempSensor_6
     19          		break;
     20          	case C_AI_WATERINGR_PRE:
     21          		Type = C_AI_WATERINGR_TEMP_P;
   \                     ??AIWIngressTempSensor_7:
   \   00000060   8A10A0E3           MOV      R1,#+138
   \   00000064   801E81E3           ORR      R1,R1,#0x800
     22                  Distance = 1.0;
   \   00000068   FE25A0E3           MOV      R2,#+1065353216
   \                     ??AIWIngressTempSensor_6:
   \   0000006C   042080E7           STR      R2,[R0, +R4]
   \                     ??AIWIngressTempSensor_4:
   \   00000070   A01084E5           STR      R1,[R4, #+160]
     23          		break;
     24          	}
     25              AdjustedDistance = Distance;
   \   00000074   040090E7           LDR      R0,[R0, +R4]
     26          	Location =((AnalogInput*)IOCompPtr)->Location;
     27          //	Name = IOCompPtr->Name;
     28          	SerialNumber = IOCompPtr->SerialNumber;
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   300184E5           STR      R0,[R4, #+304]
   \   00000080   280195E5           LDR      R0,[R5, #+296]
   \   00000084   D81085E2           ADD      R1,R5,#+216
   \   00000088   280184E5           STR      R0,[R4, #+296]
   \   0000008C   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000090   006090E5           LDR      R6,[R0, #+0]
   \   00000094   D80084E2           ADD      R0,R4,#+216
   \   00000098   0630A0E1           MOV      R3,R6
   \   0000009C   ........           _BLF     ??assign,??assign??rA
     29          	SortNo          = IOCompPtr->SortNo;
   \   000000A0   980095E5           LDR      R0,[R5, #+152]
     30          	TagName         = IOCompPtr->TagName;
   \   000000A4   0630A0E1           MOV      R3,R6
   \   000000A8   980084E5           STR      R0,[R4, #+152]
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   601085E2           ADD      R1,R5,#+96
   \   000000B4   600084E2           ADD      R0,R4,#+96
   \   000000B8   ........           _BLF     ??assign,??assign??rA
     31          
     32          	TCUAddress      = IOCompPtr->TCUAddress;
   \   000000BC   F40095E5           LDR      R0,[R5, #+244]
   \   000000C0   F40084E5           STR      R0,[R4, #+244]
     33          	TCUPortNo       = IOCompPtr->TCUPortNo;
   \   000000C4   F80095E5           LDR      R0,[R5, #+248]
   \   000000C8   F80084E5           STR      R0,[R4, #+248]
     34          	IOType          = IOCompPtr->IOType;
   \   000000CC   FC0095E5           LDR      R0,[R5, #+252]
   \   000000D0   FC0084E5           STR      R0,[R4, #+252]
     35          	IOAddress       = IOCompPtr->IOAddress;
   \   000000D4   000195E5           LDR      R0,[R5, #+256]
   \   000000D8   000184E5           STR      R0,[R4, #+256]
     36          	IOChannel       = IOCompPtr->IOChannel;
   \   000000DC   040195E5           LDR      R0,[R5, #+260]
   \   000000E0   040184E5           STR      R0,[R4, #+260]
     37          	ADCardChannel   = IOCompPtr->ADCardChannel+1;
   \   000000E4   080195E5           LDR      R0,[R5, #+264]
   \   000000E8   010080E2           ADD      R0,R0,#+1
   \   000000EC   080184E5           STR      R0,[R4, #+264]
     38          
     39          }
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   7040BDE8           POP      {R4-R6,LR}
   \   000000F8   1EFF2FE1           BX       LR               ;; return
   \                     ??AIWIngressTempSensor_2:
   \   000000FC   ........           DC32     ??__vtbl
     40          //---------------------------------------------------------------------------
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          AIWIngressTempSensor::~AIWIngressTempSensor(void)
     43          {
   \                     `?~AIWIngressTempSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIWIngressTempSensor_1`
     44          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AITempSensor`,`?~AITempSensor??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIWIngressTempSensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIWIngressTempSensor_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     45          //---------------------------------------------------------------------------
     46          
     47          
     48          
     49          
     50          ///////////////////////////////////////////////////////////////
     51          //
     52          // Routines for the librarian for input
     53          //
     54          ///////////////////////////////////////////////////////////////
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          int AIWIngressTempSensor::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     58          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     59          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     60          	switch ( ValueId ) {
     61          	case SVT_AI_OFFSET   :
     62          	case SVT_AI_CALC_VAL :
     63          	default:
     64          		Status = AITempSensor::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000034   ........           LDR      R0,??DataTable1  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   00012DE9           PUSH     {R8}
   \   00000058   0C308DE2           ADD      R3,SP,#+12
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000006C   0050A0E1           MOV      R5,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     65          		break;
     66          	}
     67          	if ( Status==E_NO_ERR ) {
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   0400001A           BNE      ??PutValue_2
     68          		SetModifiedFlag();
   \   0000008C   A41094E5           LDR      R1,[R4, #+164]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   541091E5           LDR      R1,[R1, #+84]
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   11FF2FE1           BX       R1
     69          	}
     70          	if ( UnitId ) {
   \                     ??PutValue_2:
   \   000000A0   000059E3           CMP      R9,#+0
     71          		*UnitId = ValUnitId;
   \   000000A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A8   00008915           STRNE    R0,[R9, #+0]
     72          	}
     73          	return(Status);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   20D08DE2           ADD      SP,SP,#+32
   \   000000B4   F043BDE8           POP      {R4-R9,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          int  AIWIngressTempSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     77          {
   \                     ??GetValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
     78          	int Status = GETVAL_NO_ERR;
     79          	switch ( ValueId ) {
     80          	case SVT_AI_OFFSET   :
     81          	case SVT_AI_CALC_VAL :
     82          	default:
     83          		Status = AITempSensor::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
     84          		break;
     85          	}
     86          	return(Status);
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   00102DE9           PUSH     {R12}
   \   00000014   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   00000018   1640BDE8           POP      {R1,R2,R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     87          }
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          int AIWIngressTempSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     90          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     91          	return(AITempSensor::GetStringValue(ValueId,Index, MyString));
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine8
     92          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          int AIWIngressTempSensor::PutFloatValue( int ValueId, float NewValue)
     95          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
     96          	return(AITempSensor::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine8
   \   00000008                      ;; // Fall through to label ?Subroutine8
     97          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIWIngressTempSensor &AIWIngressTempSensor::new AIWIngressTempSensor(PROIOComponent *)
   \                     `??new AIWIngressTempSensor`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   640FA0E3           MOV      R0,#+400
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AIWIngressTempSensor_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AIWIngressTempSensor
   \                     `??new AIWIngressTempSensor_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??npos
     98          
     99          
    100          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIWIngressTempSensor::AIWIngressTempSensor(PROIOComponent *)
                                       16
     AIWIngressTempSensor::GetStringValue(int, int, AnsiString &)
                                        4
     AIWIngressTempSensor::GetValue(int, int, float &, int &, int &)
                                       16
     AIWIngressTempSensor::PutFloatValue(int, float)
                                        4
     AIWIngressTempSensor::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AIWIngressTempSensor::new AIWIngressTempSensor(PROIOComponent *)
                                        8
     AIWIngressTempSensor::~AIWIngressTempSensor()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AIWIngressTempSensor::AIWIngressTempSensor(PROIOComponent *)
                                     256
     AIWIngressTempSensor::~AIWIngressTempSensor()
                                      52
     AIWIngressTempSensor::PutValue(int, int, AnsiString, bool, int *)
                                     188
     AIWIngressTempSensor::GetValue(int, int, float &, int &, int &)
                                      32
     AIWIngressTempSensor::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine8                      8
     AIWIngressTempSensor::PutFloatValue(int, float)
                                       8
     AIWIngressTempSensor::new AIWIngressTempSensor(PROIOComponent *)
                                      40
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         296

 
 756 bytes in segment CODE
 140 bytes in segment DATA_C
   4 bytes in segment DIFUNCT
 
 608 bytes of CODE  memory (+ 152 bytes shared)
 140 bytes of CONST memory

Errors: none
Warnings: none
