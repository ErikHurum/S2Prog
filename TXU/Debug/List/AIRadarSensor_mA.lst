##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIRadarSensor_mA.cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AIRadarSensor_mA.cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIRadarSensor_mA.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIRadarSensor_mA.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIRadarSensor_mA.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_13:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_13
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<float>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIRadarSensor_mA::AIRadarSensor_mA(void) : AIRadarSensor(C_AI_Radar_4_20mA) {
   \                     ??AIRadarSensor_mA:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   24719FE5           LDR      R7,??AIRadarSensor_mA_1  ;; `?<Constant {(0.0F), (100.0F)}>`
   \   00000008   20D04DE2           SUB      SP,SP,#+32
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   5710A0E3           MOV      R1,#+87
   \   00000014   801E81E3           ORR      R1,R1,#0x800
   \   00000018   ........           _BLF     ??AIRadarSensor,??AIRadarSensor??rA
   \   0000001C   080087E2           ADD      R0,R7,#+8
   \   00000020   A40085E5           STR      R0,[R5, #+164]
   \   00000024   5B6F85E2           ADD      R6,R5,#+364
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   000086E5           STR      R0,[R6, #+0]
   \   00000030   040086E5           STR      R0,[R6, #+4]
   \   00000034   080086E5           STR      R0,[R6, #+8]
   \   00000038   5E4F85E2           ADD      R4,R5,#+376
   \   0000003C   000084E5           STR      R0,[R4, #+0]
   \   00000040   040084E5           STR      R0,[R4, #+4]
   \   00000044   080084E5           STR      R0,[R4, #+8]
     10          
     11              AlarmmAmpShortCircuit *ShortCircuitPtr  = new AlarmmAmpShortCircuit(this);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     `??new AlarmmAmpShortCircuit`,`??new AlarmmAmpShortCircuit??rA`
   \   00000050   0080A0E1           MOV      R8,R0
     12              AlarmmAmpOpenLoop     *OpenLoopPtr      = new AlarmmAmpOpenLoop(this);
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           _BLF     `??new AlarmmAmpOpenLoop`,`??new AlarmmAmpOpenLoop??rA`
   \   00000060   0090A0E1           MOV      R9,R0
     13              AlarmSet.insert(ShortCircuitPtr);
   \   00000064   0820A0E1           MOV      R2,R8
   \   00000068   C01085E2           ADD      R1,R5,#+192
   \   0000006C   10008DE2           ADD      R0,SP,#+16
   \   00000070   ........           _BLF     ??insert,??insert??rA
     14              AlarmSet.insert(OpenLoopPtr);
   \   00000074   0920A0E1           MOV      R2,R9
   \   00000078   C01085E2           ADD      R1,R5,#+192
   \   0000007C   18008DE2           ADD      R0,SP,#+24
   \   00000080   ........           _BLF     ??insert,??insert??rA
     15              // Always assume that the radar is mounted on deck
     16              // or top of the tank
     17          
     18              // Init the other variables
     19              MaxRange    = 100.0;
   \   00000084   4004A0E3           MOV      R0,#+1073741824
   \   00000088   B20780E3           ORR      R0,R0,#0x2C80000
   \   0000008C   600185E5           STR      R0,[R5, #+352]
     20              MinRange    = 0.0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   5C0185E5           STR      R0,[R5, #+348]
     21              float Percent[2] = { 0.0, 100.0 };
   \   00000098   060097E8           LDM      R7,{R1,R2}
   \   0000009C   0D00A0E1           MOV      R0,SP
     22              float mAmp[2] = { 4.0, 20.0 };
     23              for (int i = 0; i < 2; i++) {
   \   000000A0   0070A0E3           MOV      R7,#+0
   \   000000A4   060080E8           STM      R0,{R1,R2}
   \   000000A8   84109FE5           LDR      R1,??AIRadarSensor_mA_1+0x4  ;; `?<Constant {(4.0F), (20.0F)}>`
   \   000000AC   08008DE2           ADD      R0,SP,#+8
   \   000000B0   0C0091E8           LDM      R1,{R2,R3}
   \   000000B4   0C0080E8           STM      R0,{R2,R3}
     24                  mAPcnt.push_back(Percent[i] / 100.0);
   \                     ??AIRadarSensor_mA_2:
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   070190E7           LDR      R0,[R0, +R7, LSL #+2]
   \   000000C0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   4034A0E3           MOV      R3,#+1073741824
   \   000000CC   593883E3           ORR      R3,R3,#0x590000
   \   000000D0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000D4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000D8   0010A0E1           MOV      R1,R0
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     25                  mACal.push_back(mAmp[i] / 1000.0);
   \   000000E4   08008DE2           ADD      R0,SP,#+8
   \   000000E8   070190E7           LDR      R0,[R0, +R7, LSL #+2]
     26              }
   \   000000EC   017087E2           ADD      R7,R7,#+1
   \   000000F0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000F4   3C309FE5           LDR      R3,??AIRadarSensor_mA_1+0x8  ;; 0x408f4000
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000100   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000104   0010A0E1           MOV      R1,R0
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000110   020057E3           CMP      R7,#+2
   \   00000114   E7FFFFBA           BLT      ??AIRadarSensor_mA_2
     27          
     28              MakeConstants();
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   ........           BL       ??MakeConstants
     29          }
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   20D08DE2           ADD      SP,SP,#+32
   \   00000128   F043BDE8           POP      {R4-R9,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??AIRadarSensor_mA_1:
   \   00000130   ........           DC32     `?<Constant {(0.0F), (100.0F)}>`
   \   00000134   ........           DC32     `?<Constant {(4.0F), (20.0F)}>`
   \   00000138   00408F40           DC32     0x408f4000
     30          //---------------------------------------------------------------------------
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          AIRadarSensor_mA::~AIRadarSensor_mA(void) {
   \                     `?~AIRadarSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0C00000A           BEQ      `?~AIRadarSensor_mA_1`
   \   00000014   30009FE5           LDR      R0,`?~AIRadarSensor_mA_2`  ;; `?<Constant {(0.0F), (100.0F)}>` + 8
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     33          }
   \   0000001C   5E0F84E2           ADD      R0,R4,#+376
   \   00000020   ........           _BLF     `?~vector`,`?~vector??rA`
   \   00000024   5B0F84E2           ADD      R0,R4,#+364
   \   00000028   ........           _BLF     `?~vector`,`?~vector??rA`
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     `?~AIRadarSensor`,`?~AIRadarSensor??rA`
   \   00000038   010015E3           TST      R5,#0x1
   \   0000003C   0100000A           BEQ      `?~AIRadarSensor_mA_1`
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIRadarSensor_mA_1`:
   \   00000048   ........           B        ?Subroutine10
   \                     `?~AIRadarSensor_mA_2`:
   \   0000004C   ........           DC32     `?<Constant {(0.0F), (100.0F)}>` + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     34          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     35          U8 AIRadarSensor_mA::GetFilter(void) {
     36              return (FILTER_MA_RADAR);
   \                     ??GetFilter:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     37          }
     38          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     39          bool AIRadarSensor_mA::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     40              bool NoError = AIRadarSensor::LoadConfigString(ConfigString);
   \   00000008   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   0000000C   0050A0E1           MOV      R5,R0
     41              MakeConstants();
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       ??MakeConstants
     42              return (NoError);
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C                      REQUIRE ?Subroutine10
   \   0000001C                      ;; // Fall through to label ?Subroutine10
     43          }
     44          
     45          
     46          ///////////////////////////////////////////////////////////////
     47          //
     48          // Routines for the librarian for input
     49          //
     50          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     51          int  AIRadarSensor_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
     52              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     53              switch (ValueId) {
   \   00000014   0180A0E3           MOV      R8,#+1
   \   00000018   5E3FA0E3           MOV      R3,#+376
   \   0000001C   C4C041E2           SUB      R12,R1,#+196
   \   00000020   40CE4CE2           SUB      R12,R12,#+1024
   \   00000024   09005CE3           CMP      R12,#+9
   \   00000028   2400008A           BHI      ??GetValue_3
   \   0000002C   01EF8FE2           ADR      LR,??GetValue_1
   \   00000030   0CE0DEE7           LDRB     LR,[LR, R12]
   \   00000034   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??GetValue_1:
   \   00000038   02112121           DC8      +2,+17,+33,+33
   \   0000003C   21212121           DC8      +33,+33,+33,+33
   \   00000040   21160000           DC8      +33,+22,+0,+0
     54              case SVT_AI_CAL_DATA_FRO:
     55                  MyRetValue = mAPcnt[Index] * 100.0;
   \                     ??GetValue_4:
   \   00000044   000093E7           LDR      R0,[R3, +R0]
   \   00000048   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   0000004C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000050   0020A0E1           MOV      R2,R0
   \   00000054   0130A0E1           MOV      R3,R1
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   4014A0E3           MOV      R1,#+1073741824
   \   00000060   591881E3           ORR      R1,R1,#0x590000
   \   00000064   ........           _BLF     __dMul,??__dMul??rA
   \   00000068   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000006C   000084E5           STR      R0,[R4, #+0]
     56                  Unit       = PERCENT_UNIT;
   \   00000070   1000A0E3           MOV      R0,#+16
   \                     ??GetValue_5:
   \   00000074   000086E5           STR      R0,[R6, #+0]
     57                  DecPnt     = 1;
   \   00000078   008085E5           STR      R8,[R5, #+0]
   \   0000007C   150000EA           B        ??GetValue_6
     58                  break;
     59              case SVT_AI_CAL_DATA_G1 :
     60                  MyRetValue = mACal[Index];
   \                     ??GetValue_7:
   \   00000080   6C0190E5           LDR      R0,[R0, #+364]
   \   00000084   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   00000088   000084E5           STR      R0,[R4, #+0]
     61                  Unit       = CURRENT_UNIT;
   \   0000008C   1100A0E3           MOV      R0,#+17
   \   00000090   F7FFFFEA           B        ??GetValue_5
     62                  DecPnt     = 1;
     63                  break;
     64              case SVT_AI_CAL_DATA_ENTRIES:
     65                  MyRetValue = mAPcnt.size();
   \                     ??GetValue_8:
   \   00000094   000083E0           ADD      R0,R3,R0
   \   00000098   041090E5           LDR      R1,[R0, #+4]
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000041E0           SUB      R0,R1,R0
   \   000000A4   2001A0E1           LSR      R0,R0,#+2
   \   000000A8   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000000AC   000084E5           STR      R0,[R4, #+0]
     66                  Unit       = NO_UNIT;
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   000086E5           STR      R0,[R6, #+0]
     67                  DecPnt     = 0;
   \   000000B8   000085E5           STR      R0,[R5, #+0]
   \   000000BC   050000EA           B        ??GetValue_6
     68                  break;
     69              case SVT_AI_OFFSET   :
     70              case SVT_AI_CALC_VAL :
     71              default:
     72                  Status = AIRadarSensor::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   000000C0   40002DE9           PUSH     {R6}
   \   000000C4   20002DE9           PUSH     {R5}
   \   000000C8   0430A0E1           MOV      R3,R4
   \   000000CC   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000D0   0070A0E1           MOV      R7,R0
   \   000000D4   08D08DE2           ADD      SP,SP,#+8
     73                  break;
     74              }
     75              return (Status);
   \                     ??GetValue_6:
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   F041BDE8           POP      {R4-R8,LR}
   \   000000E0   1EFF2FE1           BX       LR               ;; return
     76          }
     77          
     78          
     79          //////////////////////////////////////////////////////////////////
     80          //
     81          // Sensor calculations
     82          //
     83          //////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     84          void AIRadarSensor_mA::MakeConstants(void) {
   \                     ??MakeConstants:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   607196E5           LDR      R7,[R6, #+352]
   \   0000000C   5C1196E5           LDR      R1,[R6, #+348]
   \   00000010   0700A0E1           MOV      R0,R7
   \   00000014   ........           _BLF     __fSub,??__fSub??rA
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   48209FE5           LDR      R2,??MakeConstants_1  ;; 0xffffffffd2f1a9fc
   \   00000020   48309FE5           LDR      R3,??MakeConstants_1+0x4  ;; 0x3f90624d
   \   00000024   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000028   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000002C   640186E5           STR      R0,[R6, #+356]
     85              a                       = (MaxRange - MinRange) / (0.02 - 0.004);
     86              b                       = MaxRange - a * 0.02;
   \   00000030   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000034   38209FE5           LDR      R2,??MakeConstants_1+0x8  ;; 0x47ae147b
   \   00000038   38309FE5           LDR      R3,??MakeConstants_1+0xC  ;; 0x3f947ae1
   \   0000003C   ........           _BLF     __dMul,??__dMul??rA
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   0150A0E1           MOV      R5,R1
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000050   0420A0E1           MOV      R2,R4
   \   00000054   0530A0E1           MOV      R3,R5
   \   00000058   ........           _BLF     __dSub,??__dSub??rA
   \   0000005C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000060   680186E5           STR      R0,[R6, #+360]
     87          }
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConstants_1:
   \   0000006C   FCA9F1D2           DC32     0xffffffffd2f1a9fc
   \   00000070   4D62903F           DC32     0x3f90624d
   \   00000074   7B14AE47           DC32     0x47ae147b
   \   00000078   E17A943F           DC32     0x3f947ae1
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          float AIRadarSensor_mA::Get_Distance(float Amp) {
   \                     ??Get_Distance:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
     90              float Temp = a * Amp + b;
     91              return (Temp);
   \   0000000C   641194E5           LDR      R1,[R4, #+356]
   \   00000010   ........           _BLF     __fMul,??__fMul??rA
   \   00000014   681194E5           LDR      R1,[R4, #+360]
   \   00000018   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
     92          }
     93          
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          float AIRadarSensor_mA::Calculate(void) {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     96              if (CanCalculate()) {
   \   00000008   525FA0E3           MOV      R5,#+328
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0900000A           BEQ      ??Calculate_1
     97                  // This value should be checked for alarm
     98                  CalcValue = Gain * Get_Distance(FilteredValue) - Offset;
   \   00000018   441194E5           LDR      R1,[R4, #+324]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Get_Distance
   \   00000024   3C1194E5           LDR      R1,[R4, #+316]
   \   00000028   ........           _BLF     __fMul,??__fMul??rA
   \   0000002C   401194E5           LDR      R1,[R4, #+320]
   \   00000030   ........           _BLF     __fSub,??__fSub??rA
   \   00000034   040085E7           STR      R0,[R5, +R4]
     99                  ResultOK  = true;
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   3601C4E5           STRB     R0,[R4, #+310]
    100          
    101              }
    102              return (CalcValue);
   \                     ??Calculate_1:
   \   00000040   040095E7           LDR      R0,[R5, +R4]
   \   00000044   ........           B        ?Subroutine10
    103          
    104          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(0.0F), (100.0F)}>`:
   \   00000000   000000000000       DC32 0H, 42C80000H
   \              C842        
   \   __vtbl_entry const __data AIRadarSensor_mA::__vtbl[33]
   \                     ??__vtbl:
   \   00000008   ............       DC32 `?~AIRadarSensor_mA`, ??WriteConfigToFile, ??LoadConfigFromFile
   \              ............
   \   00000014   ............       DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
   \              ............
   \   00000020   ............       DC32 ??GetName, ??FindPROStatus, ??GetFloatValue, ??GetValue
   \              ............
   \              ........    
   \   00000030   ............       DC32 ??GetStringValue, ??GetBitValue, ??PutValue, ??PutFloatValue
   \              ............
   \              ........    
   \   00000040   ............       DC32 ??PutBitValue, ??ReceiveData, ??SendData, ??StartTimer
   \              ............
   \              ........    
   \   00000050   ............       DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
   \              ............
   \   0000005C   ............       DC32 ??SetModifiedFlag, ??IsAvailableNewData, ??GetFilter, ??Calculate
   \              ............
   \              ........    
   \   0000006C   ............       DC32 ??SetStatus, ??NewValue, ??SaveAISettings, ??RestoreAISettings
   \              ............
   \              ........    
   \   0000007C   ............       DC32 ??UpdateAllDependingSensorOffsets, ??CheckInput, ??SetNewStatus
   \              ............
   \   00000088   ........           DC32 ??GetErrorStatus

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {(4.0F), (20.0F)}>`:
   \   00000000   000080400000       DC32 40800000H, 41A00000H
   \              A041        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIRadarSensor_mA &AIRadarSensor_mA::new AIRadarSensor_mA()
   \                     `??new AIRadarSensor_mA`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   610FA0E3           MOV      R0,#+388
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AIRadarSensor_mA_1`
   \   00000014   ........           BL       ??AIRadarSensor_mA
   \                     `??new AIRadarSensor_mA_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    105          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIRadarSensor_mA::AIRadarSensor_mA()
                                       60
     AIRadarSensor_mA::Calculate()     12
     AIRadarSensor_mA::GetFilter()      0
     AIRadarSensor_mA::GetValue(int, int, float &, int &, int &)
                                       32
     AIRadarSensor_mA::Get_Distance(float)
                                        8
     AIRadarSensor_mA::LoadConfigString(TSNConfigString &)
                                       12
     AIRadarSensor_mA::MakeConstants()
                                       20
     AIRadarSensor_mA::new AIRadarSensor_mA()
                                        4
     AIRadarSensor_mA::~AIRadarSensor_mA()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       32
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                        4
     __sti__routine()                   0
     vector<float>::~vector()           8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                      36
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      72
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     232
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      72
     vector<float>::~vector()         36
     AIRadarSensor_mA::AIRadarSensor_mA()
                                     316
     AIRadarSensor_mA::~AIRadarSensor_mA()
                                      80
     ?Subroutine10                     8
     AIRadarSensor_mA::GetFilter()     8
     AIRadarSensor_mA::LoadConfigString(TSNConfigString &)
                                      28
     AIRadarSensor_mA::GetValue(int, int, float &, int &, int &)
                                     228
     AIRadarSensor_mA::MakeConstants()
                                     124
     AIRadarSensor_mA::Get_Distance(float)
                                      36
     AIRadarSensor_mA::Calculate()    72
     ?<Constant {(0.0F), (100.0F)}>  140
     ?<Constant {(4.0F), (20.0F)}>     8
     AIRadarSensor_mA::new AIRadarSensor_mA()
                                      32
     __sti__routine()                  4
      Others                         416

 
 2 716 bytes in segment CODE
   148 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 940 bytes of CODE  memory (+ 1 780 bytes shared)
 148 bytes of CONST memory

Errors: none
Warnings: none
