##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusRegisterHistory.cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusRegisterHistory.cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusRegisterHistory.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusRegisterHistory.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusRegisterHistory.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif

   \                                 In segment DATA_Z, align 4, align-sorted
      6          set<PRogramObjectBase*>ModbusRegisterHistory::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          ModbusRegisterHistory::ModbusRegisterHistory(bool pIsCreatedFromMultiple) {
   \                     ??ModbusRegisterHistory:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
      9              ModbusSet.insert(this);
   \   00000004   ........           LDR      R6,??DataTable1  ;; ??ModbusSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   ........           _BLF     ??ModbusRegister,??ModbusRegister??rA
   \   00000014   44009FE5           LDR      R0,??ModbusRegisterHistory_1  ;; ??__vtbl
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     ??insert,??insert??rA
     10              IDNumber = (C_PRO_MODBUS_REG_HIST << 16 )+ModbusSet.size();
   \   0000002C   100096E5           LDR      R0,[R6, #+16]
   \   00000030   A016A0E3           MOV      R1,#+167772160
   \   00000034   F51881E3           ORR      R1,R1,#0xF50000
   \   00000038   000081E0           ADD      R0,R1,R0
   \   0000003C   9C0084E5           STR      R0,[R4, #+156]
     11              Type     = C_PRO_MODBUS_REG_HIST;
   \   00000040   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     12              LogTime  = clock();
   \   00000048   ........           _BLF     clock,??clock??rA
   \   0000004C   AC0184E5           STR      R0,[R4, #+428]
     13              IsCreatedFromMultiple = pIsCreatedFromMultiple;
   \   00000050   7851C4E5           STRB     R5,[R4, #+376]
     14          }
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegisterHistory_1:
   \   00000060   ........           DC32     ??__vtbl
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          ModbusRegisterHistory::~ModbusRegisterHistory() {
   \                     `?~ModbusRegisterHistory`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~ModbusRegisterHistory_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~ModbusRegister`,`?~ModbusRegister??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~ModbusRegisterHistory_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusRegisterHistory_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          void ModbusRegisterHistory::CalculateScale(void) {
   \                     ??CalculateScale:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   7C7196E5           LDR      R7,[R6, #+380]
   \   0000000C   800196E5           LDR      R0,[R6, #+384]
   \   00000010   0710A0E1           MOV      R1,R7
   \   00000014   ........           _BLF     __fSub,??__fSub??rA
   \   00000018   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   A80196E5           LDR      R0,[R6, #+424]
   \   00000024   0150A0E1           MOV      R5,R1
   \   00000028   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000002C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000030   0420A0E1           MOV      R2,R4
   \   00000034   0530A0E1           MOV      R3,R5
   \   00000038   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000003C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000040   880186E5           STR      R0,[R6, #+392]
     20              Scale = (float(RegMax)-0.0)/( MaxRange - MinRange ) ;
     21              Offset = -Scale*MinRange;
   \   00000044   0710A0E1           MOV      R1,R7
   \   00000048   ........           _BLF     __fMul,??__fMul??rA
   \   0000004C   800420E2           EOR      R0,R0,#0x80000000
   \   00000050   8C0186E5           STR      R0,[R6, #+396]
     22          }
   \   00000054   F040BDE8           POP      {R4-R7,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
     23          
     24          //---------------------------------------------------------------------------
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          int ModbusRegisterHistory::GetOutputVal(void) {
   \                     ??GetOutputVal:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   A0C194E5           LDR      R12,[R4, #+416]
   \   0000000C   00005CE3           CMP      R12,#+0
   \   00000010   4F00000A           BEQ      ??GetOutputVal_1
     27              if ( ObjPtr ) {
     28                  float OutVal;
     29                  int DecPnt,Unit; // These variables are not used
     30                  int Status = ObjPtr->GetValue(ValueKey, 0, OutVal,DecPnt,Unit);
   \   00000014   08008DE2           ADD      R0,SP,#+8
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   08008DE2           ADD      R0,SP,#+8
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   A4509CE5           LDR      R5,[R12, #+164]
   \   00000028   A41194E5           LDR      R1,[R4, #+420]
   \   0000002C   245095E5           LDR      R5,[R5, #+36]
   \   00000030   08308DE2           ADD      R3,SP,#+8
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0C00A0E1           MOV      R0,R12
   \   0000003C   0FE0A0E1           MOV      LR,PC
   \   00000040   15FF2FE1           BX       R5
     31                  switch ( Status ) {
   \   00000044   08D08DE2           ADD      SP,SP,#+8
   \   00000048   000050E3           CMP      R0,#+0
     32                  case GETVAL_FLOAT_NOT_LEGAL:
     33                  case GETVAL_NOT_AVAILABLE:
     34                  default:
     35                      OutVal = 0.0;
   \   0000004C   0010A013           MOVNE    R1,#+0
   \   00000050   00108D15           STRNE    R1,[SP, #+0]
   \   00000054   0800001A           BNE      ??GetOutputVal_2
     36                      break;
     37                  case GETVAL_NO_ERR:
     38                      OutVal = ConvertFromSi(NULL,OutVal,0,DecPnt,Unit);
   \   00000058   08009DE5           LDR      R0,[SP, #+8]
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   08309DE5           LDR      R3,[SP, #+8]
   \   00000068   04109DE5           LDR      R1,[SP, #+4]
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   ........           _BLF     ??ConvertFromSi,??ConvertFromSi??rA
   \   00000074   04008DE5           STR      R0,[SP, #+4]
   \   00000078   04D08DE2           ADD      SP,SP,#+4
     39                      break;
     40                  }
     41                  if ( HasRange ) {
   \                     ??GetOutputVal_2:
   \   0000007C   9A01D4E5           LDRB     R0,[R4, #+410]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0C00000A           BEQ      ??GetOutputVal_3
   \   00000088   7C5194E5           LDR      R5,[R4, #+380]
   \   0000008C   00009DE5           LDR      R0,[SP, #+0]
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   ........           _BLF     __fLess,??__fLess??rA
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0500001A           BNE      ??GetOutputVal_4
   \   000000A0   805194E5           LDR      R5,[R4, #+384]
   \   000000A4   00109DE5           LDR      R1,[SP, #+0]
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     __fLess,??__fLess??rA
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0000000A           BEQ      ??GetOutputVal_3
     42                      if ( OutVal < MinRange ) {
     43                          OutVal = MinRange;
     44                      } else if ( OutVal > MaxRange ) {
     45                          OutVal = MaxRange;
   \                     ??GetOutputVal_4:
   \   000000B8   00508DE5           STR      R5,[SP, #+0]
     46                      }
     47                  }
     48                  if ( HasDecimalScaling ) {
   \                     ??GetOutputVal_3:
   \   000000BC   9801D4E5           LDRB     R0,[R4, #+408]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   1C00000A           BEQ      ??GetOutputVal_5
     49                      float rValue = DecimalScaling * OutVal;
   \   000000C8   901194E5           LDR      R1,[R4, #+400]
   \   000000CC   00009DE5           LDR      R0,[SP, #+0]
   \   000000D0   ........           _BLF     __fMul,??__fMul??rA
   \                     ??GetOutputVal_6:
   \   000000D4   0060A0E1           MOV      R6,R0
     50                      return( floor(rValue) + 0.5 ) > rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
   \   000000D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000DC   0040A0E1           MOV      R4,R0
   \   000000E0   0150A0E1           MOV      R5,R1
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   ........           _BLF     floorf,??floorf??rA
   \   000000EC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   C035A0E3           MOV      R3,#+805306368
   \   000000F8   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000000FC   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000100   0020A0E1           MOV      R2,R0
   \   00000104   0130A0E1           MOV      R3,R1
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   0510A0E1           MOV      R1,R5
   \   00000110   ........           _BLF     __dLess,??__dLess??rA
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   0600A0E1           MOV      R0,R6
   \   0000011C   0100000A           BEQ      ??GetOutputVal_7
   \   00000120   ........           _BLF     floorf,??floorf??rA
   \   00000124   000000EA           B        ??GetOutputVal_8
   \                     ??GetOutputVal_7:
   \   00000128   ........           _BLF     ceilf,??ceilf??rA
   \                     ??GetOutputVal_8:
   \   0000012C   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000130   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000134   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000138   060000EA           B        ??GetOutputVal_9
     51                  } else {
     52                      float rValue = Scale * OutVal+ Offset;
   \                     ??GetOutputVal_5:
   \   0000013C   881194E5           LDR      R1,[R4, #+392]
   \   00000140   00009DE5           LDR      R0,[SP, #+0]
   \   00000144   ........           _BLF     __fMul,??__fMul??rA
   \   00000148   8C1194E5           LDR      R1,[R4, #+396]
   \   0000014C   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000150   DFFFFFEA           B        ??GetOutputVal_6
     53                      return( floor(rValue) + 0.5 ) > rValue ? ((U16)floor(rValue) ) : ((U16) ceil(rValue) );
     54                  }
     55              } else {
     56                  return 0;
   \                     ??GetOutputVal_1:
   \   00000154   0000A0E3           MOV      R0,#+0
   \                     ??GetOutputVal_9:
   \   00000158   7E40BDE8           POP      {R1-R6,LR}
   \   0000015C   1EFF2FE1           BX       LR               ;; return
     57              }
     58          
     59          }

   \                                 In segment CODE, align 4, keep-with-next
     60          float ModbusRegisterHistory::GetOutputValFloat(void) {
   \                     ??GetOutputValFloat:
   \   00000000   07402DE9           PUSH     {R0-R2,LR}
   \   00000004   A0C190E5           LDR      R12,[R0, #+416]
   \   00000008   08108DE2           ADD      R1,SP,#+8
   \   0000000C   02002DE9           PUSH     {R1}
   \   00000010   08108DE2           ADD      R1,SP,#+8
   \   00000014   02002DE9           PUSH     {R1}
   \   00000018   A41190E5           LDR      R1,[R0, #+420]
   \   0000001C   0C00A0E1           MOV      R0,R12
   \   00000020   A4C09CE5           LDR      R12,[R12, #+164]
   \   00000024   08308DE2           ADD      R3,SP,#+8
   \   00000028   24C09CE5           LDR      R12,[R12, #+36]
   \   0000002C   0020A0E3           MOV      R2,#+0
     61              float OutVal;
     62              int DecPnt,Unit; // These variables are not used
     63              int Status = ObjPtr->GetValue(ValueKey, 0, OutVal,DecPnt,Unit);
   \   00000030   0FE0A0E1           MOV      LR,PC
   \   00000034   1CFF2FE1           BX       R12
     64              switch ( Status ) {
   \   00000038   08D08DE2           ADD      SP,SP,#+8
   \   0000003C   000050E3           CMP      R0,#+0
     65              case GETVAL_FLOAT_NOT_LEGAL:
     66              case GETVAL_NOT_AVAILABLE:
     67              default:
     68                  OutVal = 0.0;
   \   00000040   0010A013           MOVNE    R1,#+0
   \   00000044   00108D15           STRNE    R1,[SP, #+0]
   \   00000048   0800001A           BNE      ??GetOutputValFloat_1
     69                  break;
     70              case GETVAL_NO_ERR:
     71                  OutVal = ConvertFromSi(NULL,OutVal,0,DecPnt,Unit);
   \   0000004C   08009DE5           LDR      R0,[SP, #+8]
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   08309DE5           LDR      R3,[SP, #+8]
   \   0000005C   04109DE5           LDR      R1,[SP, #+4]
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   ........           _BLF     ??ConvertFromSi,??ConvertFromSi??rA
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
     72                  break;
     73              }
     74              return OutVal;
   \                     ??GetOutputValFloat_1:
   \   00000070   00009DE5           LDR      R0,[SP, #+0]
   \   00000074   0E40BDE8           POP      {R1-R3,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
     75          }
     76          
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          void ModbusRegisterHistory::Update(void) {
   \                     ??Update:
   \   00000000   F1402DE9           PUSH     {R0,R4-R7,LR}
     79              clock_t CurrentTime = clock();
     80              if ( CurrentTime >= LogTime + TSNUart::Channels[TCUPortNo]->LogTime ) {
   \   00000004   F0629FE5           LDR      R6,??Update_2    ;; ??Channels
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     clock,??clock??rA
   \   00000010   AC1194E5           LDR      R1,[R4, #+428]
   \   00000014   5A5FA0E3           MOV      R5,#+360
   \   00000018   042095E7           LDR      R2,[R5, +R4]
   \   0000001C   022196E7           LDR      R2,[R6, +R2, LSL #+2]
   \   00000020   602092E5           LDR      R2,[R2, #+96]
   \   00000024   011082E0           ADD      R1,R2,R1
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   B00000BA           BLT      ??Update_3
     81                  LogTime = clock();
   \   00000030   ........           _BLF     clock,??clock??rA
   \   00000034   AC0184E5           STR      R0,[R4, #+428]
     82                  ModbusUnit *tmpPtr = FindUnit();
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   00000040   0070B0E1           MOVS     R7,R0
     83                  if ( tmpPtr ) {
   \   00000044   AA00000A           BEQ      ??Update_3
   \   00000048   9921D4E5           LDRB     R2,[R4, #+409]
   \   0000004C   040095E7           LDR      R0,[R5, +R4]
   \   00000050   5C5FA0E3           MOV      R5,#+368
   \   00000054   041095E7           LDR      R1,[R5, +R4]
   \   00000058   000186E0           ADD      R0,R6,R0, LSL #+2
   \   0000005C   080052E3           CMP      R2,#+8
   \   00000060   A300008A           BHI      ??Update_3
   \   00000064   013F8FE2           ADR      R3,??Update_1
   \   00000068   0230D3E7           LDRB     R3,[R3, R2]
   \   0000006C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??Update_1:
   \   00000070   90022312           DC8      +144,+2,+35,+18
   \   00000074   33436956           DC8      +51,+67,+105,+86
   \   00000078   7D000000           DC8      +125,+0,+0,+0
     84                      switch ( ModbusDataFormat ) {
     85                      case Float_B_Endian:
     86                          {
     87                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_4:
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   0230A0E3           MOV      R3,#+2
   \   00000084   642090E5           LDR      R2,[R0, #+100]
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
     88                              float OutVal = GetOutputValFloat();
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   ........           BL       ??GetOutputValFloat
   \   00000098   00008DE5           STR      R0,[SP, #+0]
     89                              U16 *OutValPtr = (U16*)&OutVal;
     90                              tmpPtr->SetRegister(Channel+1,OutValPtr[0]);
   \   0000009C   B020DDE1           LDRH     R2,[SP, #+0]
   \   000000A0   040095E7           LDR      R0,[R5, +R4]
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   011080E2           ADD      R1,R0,#+1
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           _BLF     ??SetRegister,??SetRegister??rA
     91                              tmpPtr->SetRegister(Channel  ,OutValPtr[1]);
   \   000000B4   B220DDE1           LDRH     R2,[SP, #+2]
   \   000000B8   890000EA           B        ??Update_5
     92                          }
     93                          break;
     94                      case Float_B_Endian_ByteSwap:
     95                          {
     96                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_6:
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   0230A0E3           MOV      R3,#+2
   \   000000C4   642090E5           LDR      R2,[R0, #+100]
   \   000000C8   0700A0E1           MOV      R0,R7
   \   000000CC   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
     97                              float OutVal = GetOutputValFloat();
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       ??GetOutputValFloat
   \   000000D8   00008DE5           STR      R0,[SP, #+0]
     98                              U16 *OutValPtr = (U16*)&OutVal;
     99                              tmpPtr->SetRegister(Channel+1,OutValPtr[0],true);
   \   000000DC   B020DDE1           LDRH     R2,[SP, #+0]
   \   000000E0   040095E7           LDR      R0,[R5, +R4]
   \   000000E4   0130A0E3           MOV      R3,#+1
   \   000000E8   011080E2           ADD      R1,R0,#+1
   \   000000EC   0700A0E1           MOV      R0,R7
   \   000000F0   ........           _BLF     ??SetRegister,??SetRegister??rA
    100                              tmpPtr->SetRegister(Channel  ,OutValPtr[1],true);
   \   000000F4   B220DDE1           LDRH     R2,[SP, #+2]
   \                     ??Update_7:
   \   000000F8   0130A0E3           MOV      R3,#+1
   \   000000FC   790000EA           B        ??Update_8
    101                          }
    102                          break;
    103                      case Float_L_Endian:
    104                          {
    105                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_9:
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   0230A0E3           MOV      R3,#+2
   \   00000108   642090E5           LDR      R2,[R0, #+100]
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    106                              float OutVal = GetOutputValFloat();
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       ??GetOutputValFloat
   \   0000011C   00008DE5           STR      R0,[SP, #+0]
    107                              U16 *OutValPtr = (U16*)&OutVal;
    108                              tmpPtr->SetRegister(Channel+1,OutValPtr[1], true);
   \   00000120   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000124   040095E7           LDR      R0,[R5, +R4]
   \   00000128   0130A0E3           MOV      R3,#+1
   \   0000012C   011080E2           ADD      R1,R0,#+1
   \   00000130   0700A0E1           MOV      R0,R7
   \   00000134   ........           _BLF     ??SetRegister,??SetRegister??rA
    109                              tmpPtr->SetRegister(Channel  ,OutValPtr[0], true);
   \   00000138   B020DDE1           LDRH     R2,[SP, #+0]
   \   0000013C   EDFFFFEA           B        ??Update_7
    110                          }
    111                          break;
    112                      case Float_L_Endian_ByteSwap:
    113                          {
    114                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_10:
   \   00000140   000090E5           LDR      R0,[R0, #+0]
   \   00000144   0230A0E3           MOV      R3,#+2
   \   00000148   642090E5           LDR      R2,[R0, #+100]
   \   0000014C   0700A0E1           MOV      R0,R7
   \   00000150   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    115                              float OutVal = GetOutputValFloat();
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   ........           BL       ??GetOutputValFloat
   \   0000015C   00008DE5           STR      R0,[SP, #+0]
    116                              U16 *OutValPtr = (U16*)&OutVal;
    117                              tmpPtr->SetRegister(Channel+1,OutValPtr[1]);
   \   00000160   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000164   040095E7           LDR      R0,[R5, +R4]
   \   00000168   0030A0E3           MOV      R3,#+0
   \   0000016C   011080E2           ADD      R1,R0,#+1
   \   00000170   0700A0E1           MOV      R0,R7
   \   00000174   ........           _BLF     ??SetRegister,??SetRegister??rA
    118                              tmpPtr->SetRegister(Channel  ,OutValPtr[0]);
   \   00000178   B020DDE1           LDRH     R2,[SP, #+0]
   \   0000017C   580000EA           B        ??Update_5
    119                          }
    120                          break;
    121                      case Integer_B_Endian:
    122                          {
    123                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_11:
   \   00000180   000090E5           LDR      R0,[R0, #+0]
   \   00000184   0230A0E3           MOV      R3,#+2
   \   00000188   642090E5           LDR      R2,[R0, #+100]
   \   0000018C   0700A0E1           MOV      R0,R7
   \   00000190   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    124                              int OutVal = GetOutputVal();
   \   00000194   A41094E5           LDR      R1,[R4, #+164]
   \   00000198   0400A0E1           MOV      R0,R4
   \   0000019C   A41091E5           LDR      R1,[R1, #+164]
   \   000001A0   0FE0A0E1           MOV      LR,PC
   \   000001A4   11FF2FE1           BX       R1
   \   000001A8   00008DE5           STR      R0,[SP, #+0]
    125                              U16 *OutValPtr = (U16*)&OutVal;
    126                              tmpPtr->SetRegister(Channel+1,OutValPtr[0]);
   \   000001AC   B020DDE1           LDRH     R2,[SP, #+0]
   \   000001B0   040095E7           LDR      R0,[R5, +R4]
   \   000001B4   0030A0E3           MOV      R3,#+0
   \   000001B8   011080E2           ADD      R1,R0,#+1
   \   000001BC   0700A0E1           MOV      R0,R7
   \   000001C0   ........           _BLF     ??SetRegister,??SetRegister??rA
    127                              tmpPtr->SetRegister(Channel  ,OutValPtr[1]);
   \   000001C4   B220DDE1           LDRH     R2,[SP, #+2]
   \   000001C8   450000EA           B        ??Update_5
    128                          }
    129                          break;
    130                      case Integer_B_Endian_ByteSwap:
    131                          {
    132                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_12:
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0230A0E3           MOV      R3,#+2
   \   000001D4   642090E5           LDR      R2,[R0, #+100]
   \   000001D8   0700A0E1           MOV      R0,R7
   \   000001DC   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    133                              int OutVal = GetOutputVal();
   \   000001E0   A41094E5           LDR      R1,[R4, #+164]
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   A41091E5           LDR      R1,[R1, #+164]
   \   000001EC   0FE0A0E1           MOV      LR,PC
   \   000001F0   11FF2FE1           BX       R1
   \   000001F4   00008DE5           STR      R0,[SP, #+0]
    134                              U16 *OutValPtr = (U16*)&OutVal;
    135                              tmpPtr->SetRegister(Channel+1,OutValPtr[0],true);
   \   000001F8   B020DDE1           LDRH     R2,[SP, #+0]
   \   000001FC   040095E7           LDR      R0,[R5, +R4]
   \   00000200   0130A0E3           MOV      R3,#+1
   \   00000204   011080E2           ADD      R1,R0,#+1
   \   00000208   0700A0E1           MOV      R0,R7
   \   0000020C   ........           _BLF     ??SetRegister,??SetRegister??rA
    136                              tmpPtr->SetRegister(Channel  ,OutValPtr[1],true);
   \   00000210   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000214   B7FFFFEA           B        ??Update_7
    137                          }
    138                          break;
    139                      case Integer_L_Endian:
    140                          {
    141                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_13:
   \   00000218   000090E5           LDR      R0,[R0, #+0]
   \   0000021C   0230A0E3           MOV      R3,#+2
   \   00000220   642090E5           LDR      R2,[R0, #+100]
   \   00000224   0700A0E1           MOV      R0,R7
   \   00000228   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    142                              int OutVal = GetOutputVal();
   \   0000022C   A41094E5           LDR      R1,[R4, #+164]
   \   00000230   0400A0E1           MOV      R0,R4
   \   00000234   A41091E5           LDR      R1,[R1, #+164]
   \   00000238   0FE0A0E1           MOV      LR,PC
   \   0000023C   11FF2FE1           BX       R1
   \   00000240   00008DE5           STR      R0,[SP, #+0]
    143                              U16 *OutValPtr = (U16*)&OutVal;
    144                              tmpPtr->SetRegister(Channel+1,OutValPtr[1], true);
   \   00000244   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000248   040095E7           LDR      R0,[R5, +R4]
   \   0000024C   0130A0E3           MOV      R3,#+1
   \   00000250   011080E2           ADD      R1,R0,#+1
   \   00000254   0700A0E1           MOV      R0,R7
   \   00000258   ........           _BLF     ??SetRegister,??SetRegister??rA
    145                              tmpPtr->SetRegister(Channel  ,OutValPtr[0], true);
   \   0000025C   B020DDE1           LDRH     R2,[SP, #+0]
   \   00000260   0130A0E3           MOV      R3,#+1
   \   00000264   1F0000EA           B        ??Update_8
    146                          }
    147                          break;
    148                      case Integer_L_Endian_ByteSwap:
    149                          {
    150                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 2);
   \                     ??Update_14:
   \   00000268   000090E5           LDR      R0,[R0, #+0]
   \   0000026C   0230A0E3           MOV      R3,#+2
   \   00000270   642090E5           LDR      R2,[R0, #+100]
   \   00000274   0700A0E1           MOV      R0,R7
   \   00000278   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    151                              int OutVal = GetOutputVal();
   \   0000027C   A41094E5           LDR      R1,[R4, #+164]
   \   00000280   0400A0E1           MOV      R0,R4
   \   00000284   A41091E5           LDR      R1,[R1, #+164]
   \   00000288   0FE0A0E1           MOV      LR,PC
   \   0000028C   11FF2FE1           BX       R1
   \   00000290   00008DE5           STR      R0,[SP, #+0]
    152                              U16 *OutValPtr = (U16*)&OutVal;
    153                              tmpPtr->SetRegister(Channel+1,OutValPtr[1]);
   \   00000294   B220DDE1           LDRH     R2,[SP, #+2]
   \   00000298   040095E7           LDR      R0,[R5, +R4]
   \   0000029C   0030A0E3           MOV      R3,#+0
   \   000002A0   011080E2           ADD      R1,R0,#+1
   \   000002A4   0700A0E1           MOV      R0,R7
   \   000002A8   ........           _BLF     ??SetRegister,??SetRegister??rA
    154                              tmpPtr->SetRegister(Channel  ,OutValPtr[0]);
   \   000002AC   B020DDE1           LDRH     R2,[SP, #+0]
   \   000002B0   0B0000EA           B        ??Update_5
    155                          }
    156                          break;
    157                      case Float_None:
    158                          {
    159                              tmpPtr->MoveRegisters(Channel, TSNUart::Channels[TCUPortNo]->LogEntries, 1);
   \                     ??Update_15:
   \   000002B4   000090E5           LDR      R0,[R0, #+0]
   \   000002B8   0130A0E3           MOV      R3,#+1
   \   000002BC   642090E5           LDR      R2,[R0, #+100]
   \   000002C0   0700A0E1           MOV      R0,R7
   \   000002C4   ........           _BLF     ??MoveRegisters,??MoveRegisters??rA
    160                              U16 OutVal    = (U16)GetOutputVal();
   \   000002C8   A41094E5           LDR      R1,[R4, #+164]
   \   000002CC   0400A0E1           MOV      R0,R4
   \   000002D0   A41091E5           LDR      R1,[R1, #+164]
   \   000002D4   0FE0A0E1           MOV      LR,PC
   \   000002D8   11FF2FE1           BX       R1
   \   000002DC   0028A0E1           MOV      R2,R0, LSL #+16
   \   000002E0   2228A0E1           MOV      R2,R2, LSR #+16
    161                              tmpPtr->SetRegister(Channel,OutVal);
   \                     ??Update_5:
   \   000002E4   0030A0E3           MOV      R3,#+0
   \                     ??Update_8:
   \   000002E8   041095E7           LDR      R1,[R5, +R4]
   \   000002EC   0700A0E1           MOV      R0,R7
   \   000002F0   ........           _BLF     ??SetRegister,??SetRegister??rA
    162                          }
    163                          break;
    164                      }
    165                  }
    166              }
    167          }
   \                     ??Update_3:
   \   000002F4   F140BDE8           POP      {R0,R4-R7,LR}
   \   000002F8   1EFF2FE1           BX       LR               ;; return
   \                     ??Update_2:
   \   000002FC   ........           DC32     ??Channels

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegisterHistory &ModbusRegisterHistory::new ModbusRegisterHistory(bool)
   \                     `??new ModbusRegisterHistory`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   6C0FA0E3           MOV      R0,#+432
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusRegisterHistory_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusRegisterHistory
   \                     `??new ModbusRegisterHistory_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ModbusSet
    168          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusRegisterHistory::CalculateScale()
                                       20
     ModbusRegisterHistory::GetOutputVal()
                                       36
     ModbusRegisterHistory::GetOutputValFloat()
                                       24
     ModbusRegisterHistory::ModbusRegisterHistory(bool)
                                       24
     ModbusRegisterHistory::Update()
                                       24
     ModbusRegisterHistory::new ModbusRegisterHistory(bool)
                                        8
     ModbusRegisterHistory::~ModbusRegisterHistory()
                                       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  12
     set<PRogramObjectBase *>::~set()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     ModbusRegisterHistory::ModbusSet
                                      24
     ModbusRegisterHistory::ModbusRegisterHistory(bool)
                                     100
     ModbusRegisterHistory::~ModbusRegisterHistory()
                                      52
     ModbusRegisterHistory::CalculateScale()
                                      92
     ModbusRegisterHistory::GetOutputVal()
                                     352
     ModbusRegisterHistory::GetOutputValFloat()
                                     124
     ModbusRegisterHistory::Update()
                                     768
     ModbusRegisterHistory::new ModbusRegisterHistory(bool)
                                      40
     __sti__routine()                 56
     ??DataTable1                      4
      Others                         616

 
 3 060 bytes in segment CODE
   180 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 592 bytes of CODE  memory (+ 1 484 bytes shared)
   180 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
