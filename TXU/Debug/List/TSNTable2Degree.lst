##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\TSNTable2Degree.Cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\TSNTable2Degree.Cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TSNTable2Degree.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TSNTable2Degree.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\TSNTable2Degree.Cpp
      1          //---------------------------------------------------------------------------
      2          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??_Tidy_1
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy_1:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   2E00000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   A231B0E1           LSRS     R3,R2,#+3
   \   00000024   0200001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000030   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   00000034   002094E5           LDR      R2,[R4, #+0]
   \   00000038   046094E5           LDR      R6,[R4, #+4]
   \   0000003C   026046E0           SUB      R6,R6,R2
   \   00000040   A60153E1           CMP      R3,R6, LSR #+3
   \   00000044   0700008A           BHI      ??_Assign_3
   \   00000048   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000004C   040095E5           LDR      R0,[R5, #+4]
   \   00000050   001095E5           LDR      R1,[R5, #+0]
   \   00000054   010040E0           SUB      R0,R0,R1
   \   00000058   001094E5           LDR      R1,[R4, #+0]
   \   0000005C   A001A0E1           LSR      R0,R0,#+3
   \   00000060   800181E0           ADD      R0,R1,R0, LSL #+3
   \   00000064   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000068   086094E5           LDR      R6,[R4, #+8]
   \   0000006C   026046E0           SUB      R6,R6,R2
   \   00000070   A60153E1           CMP      R3,R6, LSR #+3
   \   00000074   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000078   000052E3           CMP      R2,#+0
   \   0000007C   0100000A           BEQ      ??_Assign_7
   \   00000080   0200A0E1           MOV      R0,R2
   \   00000084   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000088   040095E5           LDR      R0,[R5, #+4]
   \   0000008C   001095E5           LDR      R1,[R5, #+0]
   \   00000090   016040E0           SUB      R6,R0,R1
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000009C   000056E3           CMP      R6,#+0
   \   000000A0   0A00000A           BEQ      ??_Assign_1
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000AC   000084E5           STR      R0,[R4, #+0]
   \   000000B0   0020A0E1           MOV      R2,R0
   \   000000B4   042084E5           STR      R2,[R4, #+4]
   \   000000B8   020086E0           ADD      R0,R6,R2
   \   000000BC   080084E5           STR      R0,[R4, #+8]
   \   000000C0   041095E5           LDR      R1,[R5, #+4]
   \   000000C4   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000C8   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000CC   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D0   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000D4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs EntryCoefficients2 * _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Make_room(EntryCoefficients2 *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   070040E0           SUB      R0,R0,R7
   \   0000001C   0C10A0E3           MOV      R1,#+12
   \   00000020   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000024   0160A0E1           MOV      R6,R1
   \   00000028   070043E0           SUB      R0,R3,R7
   \   0000002C   0C10A0E3           MOV      R1,#+12
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   2D00000A           BEQ      ??_Make_room_1
   \   0000003C   BC009FE5           LDR      R0,??_Make_room_2  ;; 0x15555555
   \   00000040   017040E0           SUB      R7,R0,R1
   \   00000044   020057E1           CMP      R7,R2
   \   00000048   2900003A           BCC      ??_Make_room_1
   \   0000004C   0C80A0E3           MOV      R8,#+12
   \   00000050   980207E0           MUL      R7,R8,R2
   \   00000054   018082E0           ADD      R8,R2,R1
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   1D00002A           BCS      ??_Make_room_3
   \   00000060   A610A0E1           LSR      R1,R6,#+1
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   0060A033           MOVCC    R6,#+0
   \   00000070   06608120           ADDCS    R6,R1,R6
   \   00000074   080056E1           CMP      R6,R8
   \   00000078   0860A031           MOVCC    R6,R8
   \   0000007C   0C10A0E3           MOV      R1,#+12
   \   00000080   910600E0           MUL      R0,R1,R6
   \   00000084   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000088   0090A0E1           MOV      R9,R0
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   0920A0E1           MOV      R2,R9
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   0A2087E0           ADD      R2,R7,R10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000B8   0C00A0E3           MOV      R0,#+12
   \   000000BC   909621E0           MLA      R1,R0,R6,R9
   \   000000C0   081084E5           STR      R1,[R4, #+8]
   \   000000C4   909821E0           MLA      R1,R0,R8,R9
   \   000000C8   041084E5           STR      R1,[R4, #+4]
   \   000000CC   009084E5           STR      R9,[R4, #+0]
   \   000000D0   0A50A0E1           MOV      R5,R10
   \   000000D4   060000EA           B        ??_Make_room_1
   \                     ??_Make_room_3:
   \   000000D8   032087E0           ADD      R2,R7,R3
   \   000000DC   0310A0E1           MOV      R1,R3
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000E8   040094E5           LDR      R0,[R4, #+4]
   \   000000EC   000087E0           ADD      R0,R7,R0
   \   000000F0   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   F047BDE8           POP      {R4-R10,LR}
   \   000000FC   1EFF2FE1           BX       LR               ;; return
   \                     ??_Make_room_2:
   \   00000100   55555515           DC32     0x15555555

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs EntryCoefficients2 * _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Insert0(EntryCoefficients2 *, EntryCoefficients2 const &)
   \                     ??_Insert0:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   085092E8           LDM      R2,{R3,R12,LR}
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0050A003           MOVEQ    R5,#+0
   \   0000001C   00504110           SUBNE    R5,R1,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   085080E8           STM      R0,{R3,R12,LR}
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   0D30A0E1           MOV      R3,SP
   \                     ??_Insert0_1:
   \   00000038   405093E8           LDM      R3,{R6,R12,LR}
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   0C0080E2           ADD      R0,R0,#+12
   \   00000048   405082E8           STM      R2,{R6,R12,LR}
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   F8FFFF1A           BNE      ??_Insert0_1
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   000085E0           ADD      R0,R5,R0
   \   0000005C   7E40BDE8           POP      {R1-R6,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Push_back0(EntryCoefficients2 const &)
   \                     ??_Push_back0:
   \   00000000   D0412DE9           PUSH     {R4,R6-R8,LR}
   \   00000004   043090E5           LDR      R3,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020053E1           CMP      R3,R2
   \   00000010   0B00002A           BCS      ??_Push_back0_1
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   03C0A0E1           MOV      R12,R3
   \                     ??_Push_back0_2:
   \   0000001C   C00191E8           LDM      R1,{R6-R8}
   \   00000020   0C40A0E1           MOV      R4,R12
   \   00000024   012042E2           SUB      R2,R2,#+1
   \   00000028   0CC08CE2           ADD      R12,R12,#+12
   \   0000002C   C00184E8           STM      R4,{R6-R8}
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   F8FFFF1A           BNE      ??_Push_back0_2
   \   00000038   0C1083E2           ADD      R1,R3,#+12
   \   0000003C   041080E5           STR      R1,[R0, #+4]
   \   00000040   020000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000044   0120A0E1           MOV      R2,R1
   \   00000048   0310A0E1           MOV      R1,R3
   \   0000004C   ........           _BLF     ??_Insert0,??_Insert0??rA
   \                     ??_Push_back0_3:
   \   00000050   D041BDE8           POP      {R4,R6-R8,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
      3          #pragma hdrstop
      4          //---------------------------------------------------------------------------
      5          
      6          //////////////////////////////////////////////////////////////////
      7          //
      8          //	Linear table
      9          //
     10          //	Other tables like 2 degree tables inherit from this object
     11          //
     12          /////////////////////////////////////////////////////////////////
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          TSNTable2Degree::TSNTable2Degree(int TabType):TSNTable1Degree(TabType)
   \                     ??TSNTable2Degree:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     15          {
   \   00000008   ........           _BLF     ??TSNTable1Degree,??TSNTable1Degree??rA
   \   0000000C   ........           B        ?Subroutine13
     16              FindMinMax();
     17          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000004   0C0084E5           STR      R0,[R4, #+12]
   \   00000008   300084E2           ADD      R0,R4,#+48
   \   0000000C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000010   0C1094E5           LDR      R1,[R4, #+12]
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   0C1091E5           LDR      R1,[R1, #+12]
   \   0000001C   0FE0A0E1           MOV      LR,PC
   \   00000020   11FF2FE1           BX       R1
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??Subroutine13_0:
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          TSNTable2Degree::TSNTable2Degree(int TabType, vector<Entry>SrcTable):TSNTable1Degree(TabType,SrcTable)
   \                     ??TSNTable2Degree_1:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     20          {
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??TSNTable1Degree_1,??TSNTable1Degree??rA_1
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000003C   ........           LDR      R0,??DataTable2  ;; ??__vtbl
   \   00000040   0C0084E5           STR      R0,[R4, #+12]
   \   00000044   300084E2           ADD      R0,R4,#+48
   \   00000048   ........           _BLF     ??_Zero,??_Zero??rA
     21              FindMinMax();
   \   0000004C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   0C1091E5           LDR      R1,[R1, #+12]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   11FF2FE1           BX       R1
     22          }
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   7E40BDE8           POP      {R1-R6,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          TSNTable2Degree::TSNTable2Degree(int TabType,TSNConfigString &ConfigInputLines, int &ErrorStatus):TSNTable1Degree(TabType,ConfigInputLines,ErrorStatus)
   \                     ??TSNTable2Degree_2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     25          {
   \   00000008   ........           _BLF     ??TSNTable1Degree_2,??TSNTable1Degree??rA_2
   \   0000000C                      REQUIRE ?Subroutine13
   \   0000000C                      ;; // Fall through to label ?Subroutine13
     26              FindMinMax();
     27          }
     28          
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          TSNTable2Degree::~TSNTable2Degree(void)
     31          {
   \                     `?~TSNTable2Degree`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable2  ;; ??__vtbl
     32          }
   \   0000000C   305084E2           ADD      R5,R4,#+48
   \   00000010   0C0084E5           STR      R0,[R4, #+12]
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `?~TSNTable1Degree`,`?~TSNTable1Degree??rA`
   \   0000002C                      REQUIRE ?Subroutine14
   \   0000002C                      ;; // Fall through to label ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void TSNTable2Degree::MakeConstants(void)
     35          {
   \                     ??MakeConstants:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     36              CoeffTable.clear();
   \   00000008   305084E2           ADD      R5,R4,#+48
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Zero,??_Zero??rA
     37              if ( Table.size() > 2) {
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   0750E0E3           MVN      R5,#+7
   \   0000002C   000041E0           SUB      R0,R1,R0
   \   00000030   A001A0E1           LSR      R0,R0,#+3
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   2700003A           BCC      ??MakeConstants_1
     38                  EntryCoefficients2 tmpEntry;
     39                  for (unsigned i=1; i < Table.size()-1; i++) {
   \   0000003C   0160A0E3           MOV      R6,#+1
   \   00000040   1C0000EA           B        ??MakeConstants_2
     40                      Calc_2ndDeg_coeffs(Table[i-1].x, Table[i-1].y, Table[i].x, Table[i].y, Table[i+1].x, Table[i+1].y,
     41                                         tmpEntry.a,tmpEntry.b,tmpEntry.c);
   \                     ??MakeConstants_3:
   \   00000044   240094E5           LDR      R0,[R4, #+36]
   \   00000048   08208DE2           ADD      R2,SP,#+8
   \   0000004C   860180E0           ADD      R0,R0,R6, LSL #+3
   \   00000050   041080E2           ADD      R1,R0,#+4
   \   00000054   04002DE9           PUSH     {R2}
   \   00000058   08208DE2           ADD      R2,SP,#+8
   \   0000005C   04002DE9           PUSH     {R2}
   \   00000060   08208DE2           ADD      R2,SP,#+8
   \   00000064   04002DE9           PUSH     {R2}
   \   00000068   082091E5           LDR      R2,[R1, #+8]
   \   0000006C   00C085E0           ADD      R12,R5,R0
   \   00000070   04002DE9           PUSH     {R2}
   \   00000074   042091E5           LDR      R2,[R1, #+4]
   \   00000078   04002DE9           PUSH     {R2}
   \   0000007C   003091E5           LDR      R3,[R1, #+0]
   \   00000080   002090E5           LDR      R2,[R0, #+0]
   \   00000084   04109CE5           LDR      R1,[R12, #+4]
   \   00000088   00009CE5           LDR      R0,[R12, #+0]
   \   0000008C   ........           _BLF     ??Calc_2ndDeg_coeffs,??Calc_2ndDeg_coeffs??rA
     42                      if ( i == 1 ) {
   \   00000090   010056E3           CMP      R6,#+1
   \   00000094   14D08DE2           ADD      SP,SP,#+20
   \   00000098   0200001A           BNE      ??MakeConstants_4
     43                          // One extra push back at the beginning
     44                          CoeffTable.push_back(tmpEntry);
   \   0000009C   0D10A0E1           MOV      R1,SP
   \   000000A0   300084E2           ADD      R0,R4,#+48
   \   000000A4   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     45                      }
     46                      CoeffTable.push_back(tmpEntry);
   \                     ??MakeConstants_4:
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   300084E2           ADD      R0,R4,#+48
   \   000000B0   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     47                  }
   \   000000B4   016086E2           ADD      R6,R6,#+1
   \                     ??MakeConstants_2:
   \   000000B8   240084E2           ADD      R0,R4,#+36
   \   000000BC   041090E5           LDR      R1,[R0, #+4]
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   000041E0           SUB      R0,R1,R0
   \   000000C8   A001A0E1           LSR      R0,R0,#+3
   \   000000CC   010040E2           SUB      R0,R0,#+1
   \   000000D0   000056E1           CMP      R6,R0
   \   000000D4   DAFFFF3A           BCC      ??MakeConstants_3
     48                  // One extra pushback at the end
     49                  CoeffTable.push_back(tmpEntry);
   \   000000D8   2A0000EA           B        ??MakeConstants_5
     50              } else if ( Table.size() == 2 ) {
   \                     ??MakeConstants_1:
   \   000000DC   240084E2           ADD      R0,R4,#+36
   \   000000E0   000090E5           LDR      R0,[R0, #+0]
   \   000000E4   000041E0           SUB      R0,R1,R0
   \   000000E8   A001A0E1           LSR      R0,R0,#+3
   \   000000EC   020050E3           CMP      R0,#+2
   \   000000F0   1800001A           BNE      ??MakeConstants_6
     51                  EntryCoefficients2 tmpEntry = {0.0,0.0,0.0};
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   0010A0E3           MOV      R1,#+0
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0130A0E1           MOV      R3,R1
   \   00000104   0E0080E8           STM      R0,{R1-R3}
     52          		Calc_1stDeg_coeffs(Table.front().x, Table.front().y, Table.back().y, Table.back().x, tmpEntry.b, tmpEntry.c);
   \   00000108   280094E5           LDR      R0,[R4, #+40]
   \   0000010C   08108DE2           ADD      R1,SP,#+8
   \   00000110   000085E0           ADD      R0,R5,R0
   \   00000114   245094E5           LDR      R5,[R4, #+36]
   \   00000118   02002DE9           PUSH     {R1}
   \   0000011C   08108DE2           ADD      R1,SP,#+8
   \   00000120   02002DE9           PUSH     {R1}
   \   00000124   003090E5           LDR      R3,[R0, #+0]
   \   00000128   042090E5           LDR      R2,[R0, #+4]
   \   0000012C   041095E5           LDR      R1,[R5, #+4]
   \   00000130   000095E5           LDR      R0,[R5, #+0]
   \   00000134   ........           _BLF     ??Calc_1stDeg_coeffs,??Calc_1stDeg_coeffs??rA
     53                  CoeffTable.push_back(tmpEntry);
   \   00000138   08108DE2           ADD      R1,SP,#+8
   \   0000013C   300084E2           ADD      R0,R4,#+48
   \   00000140   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     54                  CoeffTable.push_back(tmpEntry);
   \   00000144   08108DE2           ADD      R1,SP,#+8
   \   00000148   300084E2           ADD      R0,R4,#+48
   \   0000014C   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000150   08D08DE2           ADD      SP,SP,#+8
   \   00000154   0E0000EA           B        ??MakeConstants_7
     55              } else if ( !Table.empty()) {
   \                     ??MakeConstants_6:
   \   00000158   240084E2           ADD      R0,R4,#+36
   \   0000015C   000090E5           LDR      R0,[R0, #+0]
   \   00000160   000041E0           SUB      R0,R1,R0
   \   00000164   A001B0E1           LSRS     R0,R0,#+3
   \   00000168   0900000A           BEQ      ??MakeConstants_7
     56                  EntryCoefficients2 tmpEntry = {0.0,0.0,MinY};
   \   0000016C   0D00A0E1           MOV      R0,SP
   \   00000170   0010A0E3           MOV      R1,#+0
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0130A0E1           MOV      R3,R1
   \   0000017C   0E0080E8           STM      R0,{R1-R3}
   \   00000180   201094E5           LDR      R1,[R4, #+32]
   \   00000184   08108DE5           STR      R1,[SP, #+8]
     57                  CoeffTable.push_back(tmpEntry);
   \                     ??MakeConstants_5:
   \   00000188   0D10A0E1           MOV      R1,SP
   \   0000018C   300084E2           ADD      R0,R4,#+48
   \   00000190   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     58              }
     59          }
   \                     ??MakeConstants_7:
   \   00000194   7740BDE8           POP      {R0-R2,R4-R6,LR}
   \   00000198   1EFF2FE1           BX       LR               ;; return
     60          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     61          bool TSNTable2Degree::LoadConfigString(TSNConfigString &ConfigString, PRogramObjectBase *PROPtr )
     62          {
   \                     ??LoadConfigString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63              bool Status = TSNTable1Degree::LoadConfigString(ConfigString, PROPtr );
   \   00000008   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
     64              FindMinMax();
   \   0000000C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   0FE0A0E1           MOV      LR,PC
   \   00000020   11FF2FE1           BX       R1
     65              return Status;
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           B        ?Subroutine14
     66          
     67          }
     68          //---------------------------------------------------------------------------
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          float TSNTable2Degree::DerivedMax(int Index)
     71          {
   \                     ??DerivedMax:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     72          	if( CoeffTable[Index].a ) {
   \   00000008   0C00A0E3           MOV      R0,#+12
   \   0000000C   900105E0           MUL      R5,R0,R1
   \   00000010   300094E5           LDR      R0,[R4, #+48]
   \   00000014   001095E7           LDR      R1,[R5, +R0]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0800000A           BEQ      ??DerivedMax_1
     73          		return(CoeffTable[Index].b/(-2*CoeffTable[Index].a));
   \   00000028   300094E5           LDR      R0,[R4, #+48]
   \   0000002C   001095E7           LDR      R1,[R5, +R0]
   \   00000030   C004A0E3           MOV      R0,#-1073741824
   \   00000034   ........           _BLF     __fMul,??__fMul??rA
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   300094E5           LDR      R0,[R4, #+48]
   \   00000040   000085E0           ADD      R0,R5,R0
   \   00000044   040090E5           LDR      R0,[R0, #+4]
   \   00000048   ........           _BLF     __fDiv,??__fDiv??rA
     74          	} else return(0.0);
   \                     ??DerivedMax_1:
   \   0000004C   ........           B        ?Subroutine14
     75          }
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          float TSNTable2Degree::Calc_Y(float Xin)
     78          {
   \                     ??Calc_Y:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
     79              float Dist;
     80              if ( UseConstants) {
   \   00000008   1000D5E5           LDRB     R0,[R5, #+16]
   \   0000000C   246095E5           LDR      R6,[R5, #+36]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   2100000A           BEQ      ??Calc_Y_1
     81                  bool Found = false;
     82                  unsigned Index = 0;
   \   0000001C   0070A0E3           MOV      R7,#+0
     83                  do {
     84                      Found = (Table[Index].x >= Xin);
   \                     ??Calc_Y_2:
   \   00000020   870196E7           LDR      R0,[R6, +R7, LSL #+3]
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0A00001A           BNE      ??Calc_Y_3
     85                      if (!Found) {
     86                          Index++;
   \   00000034   240085E2           ADD      R0,R5,#+36
     87                      }
     88                  }while ( !Found &&  Index < Table.size() ) ; // look for interval
   \   00000038   041090E5           LDR      R1,[R0, #+4]
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   017087E2           ADD      R7,R7,#+1
   \   00000044   000041E0           SUB      R0,R1,R0
   \   00000048   A00157E1           CMP      R7,R0, LSR #+3
   \   0000004C   F3FFFF3A           BCC      ??Calc_Y_2
     89                  if (!Found ) {
     90                      Index = Table.size();
   \   00000050   240085E2           ADD      R0,R5,#+36
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   000041E0           SUB      R0,R1,R0
   \   0000005C   A071A0E1           LSR      R7,R0,#+3
     91                  }
     92                  Dist = CoeffTable[Index].a*Xin*Xin+CoeffTable[Index].b*Xin+CoeffTable[Index].c;
   \                     ??Calc_Y_3:
   \   00000060   301095E5           LDR      R1,[R5, #+48]
   \   00000064   0C00A0E3           MOV      R0,#+12
   \   00000068   901725E0           MLA      R5,R0,R7,R1
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   0410A0E1           MOV      R1,R4
   \   00000074   ........           _BLF     __fMul,??__fMul??rA
   \   00000078   0060A0E1           MOV      R6,R0
   \   0000007C   000095E5           LDR      R0,[R5, #+0]
   \   00000080   0410A0E1           MOV      R1,R4
   \   00000084   ........           _BLF     __fMul,??__fMul??rA
   \   00000088   0410A0E1           MOV      R1,R4
   \   0000008C   ........           _BLF     __fMul,??__fMul??rA
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000098   081095E5           LDR      R1,[R5, #+8]
   \   0000009C   ........           _BLF     __fAdd,??__fAdd??rA
   \   000000A0   390000EA           B        ??Calc_Y_4
     93              } else {
     94                  unsigned Entries = Table.size();
   \                     ??Calc_Y_1:
   \   000000A4   240085E2           ADD      R0,R5,#+36
   \   000000A8   041090E5           LDR      R1,[R0, #+4]
   \   000000AC   060041E0           SUB      R0,R1,R6
   \   000000B0   A081A0E1           LSR      R8,R0,#+3
     95                  if ( Entries <= 1 ) return(MinY);
   \   000000B4   020058E3           CMP      R8,#+2
   \   000000B8   20009535           LDRCC    R0,[R5, #+32]
   \   000000BC   3200003A           BCC      ??Calc_Y_4
     96          		if ( Xin >= MaxX ) return(Table.back().y);
   \   000000C0   0770E0E3           MVN      R7,#+7
   \   000000C4   019087E0           ADD      R9,R7,R1
   \   000000C8   141095E5           LDR      R1,[R5, #+20]
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   04009915           LDRNE    R0,[R9, #+4]
   \   000000DC   2A00001A           BNE      ??Calc_Y_4
     97          		if ( Xin <= MinX ) return(Table.front().y);
   \   000000E0   1C0095E5           LDR      R0,[R5, #+28]
   \   000000E4   0410A0E1           MOV      R1,R4
   \   000000E8   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   04009615           LDRNE    R0,[R6, #+4]
   \   000000F4   2400001A           BNE      ??Calc_Y_4
     98                  if ( Entries == 2 ) {   // table is linear
   \   000000F8   020058E3           CMP      R8,#+2
   \   000000FC   0700001A           BNE      ??Calc_Y_5
     99          			Dist = IntPol1stDeg(Table.front().x,Table.back().x,Table.front().y,Table.back().y,Xin);
   \   00000100   10002DE9           PUSH     {R4}
   \   00000104   043099E5           LDR      R3,[R9, #+4]
   \   00000108   042096E5           LDR      R2,[R6, #+4]
   \   0000010C   001099E5           LDR      R1,[R9, #+0]
   \   00000110   000096E5           LDR      R0,[R6, #+0]
   \   00000114   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000118   04D08DE2           ADD      SP,SP,#+4
   \   0000011C   1A0000EA           B        ??Calc_Y_4
    100                  } else {
    101                      unsigned i    = 1;    // Second point in table
   \                     ??Calc_Y_5:
   \   00000120   0150A0E3           MOV      R5,#+1
    102                      unsigned Last = Entries-2;
   \   00000124   028048E2           SUB      R8,R8,#+2
   \   00000128   000000EA           B        ??Calc_Y_6
    103                      while ( Table[i].x < Xin &&  i < Last ) i++; // look for interval
   \                     ??Calc_Y_7:
   \   0000012C   015085E2           ADD      R5,R5,#+1
   \                     ??Calc_Y_6:
   \   00000130   850196E7           LDR      R0,[R6, +R5, LSL #+3]
   \   00000134   0410A0E1           MOV      R1,R4
   \   00000138   ........           _BLF     __fLess,??__fLess??rA
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0100000A           BEQ      ??Calc_Y_8
   \   00000144   080055E1           CMP      R5,R8
   \   00000148   F7FFFF3A           BCC      ??Calc_Y_7
    104                      // Are we outside of the table?
    105                      if ( i > Last ) {
   \                     ??Calc_Y_8:
   \   0000014C   050058E1           CMP      R8,R5
    106                          i = Last;
   \   00000150   0850A031           MOVCC    R5,R8
    107                      }
    108                      Dist =IntPol2ndDeg(Table[i-1].x,Table[i].x,Table[i+1].x,Table[i-1].y,Table[i].y,Table[i+1].y,Xin);
   \   00000154   850186E0           ADD      R0,R6,R5, LSL #+3
   \   00000158   041080E2           ADD      R1,R0,#+4
   \   0000015C   10002DE9           PUSH     {R4}
   \   00000160   082091E5           LDR      R2,[R1, #+8]
   \   00000164   005087E0           ADD      R5,R7,R0
   \   00000168   04002DE9           PUSH     {R2}
   \   0000016C   002091E5           LDR      R2,[R1, #+0]
   \   00000170   04002DE9           PUSH     {R2}
   \   00000174   043095E5           LDR      R3,[R5, #+4]
   \   00000178   042091E5           LDR      R2,[R1, #+4]
   \   0000017C   001090E5           LDR      R1,[R0, #+0]
   \   00000180   000095E5           LDR      R0,[R5, #+0]
   \   00000184   ........           _BLF     ??IntPol2ndDeg,??IntPol2ndDeg??rA
   \   00000188   0CD08DE2           ADD      SP,SP,#+12
    109                  }
    110              }
    111              return(Dist);
   \                     ??Calc_Y_4:
   \   0000018C   F043BDE8           POP      {R4-R9,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
    112          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   000000000000       DC32 0H, 0H, 0H
   \              000000000000

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   000000000000       DC32 0H, 0H, 0H
   \              000000000000

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable2Degree &TSNTable2Degree::new TSNTable2Degree(int)
   \                     `??new TSNTable2Degree`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new TSNTable2Degree_3`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??TSNTable2Degree
   \                     `??new TSNTable2Degree_3`:
   \   00000020   ........           B        ??Subroutine13_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable2Degree &TSNTable2Degree::new TSNTable2Degree(int, vector<TSNTable1Degree::Entry>)
   \                     `??new TSNTable2Degree_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   3C00A0E3           MOV      R0,#+60
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new TSNTable2Degree_4`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??TSNTable2Degree_1
   \                     `??new TSNTable2Degree_4`:
   \   00000028   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TSNTable2Degree &TSNTable2Degree::new TSNTable2Degree(int, TSNConfigString &, int &)
   \                     `??new TSNTable2Degree_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   3C00A0E3           MOV      R0,#+60
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new TSNTable2Degree_5`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??TSNTable2Degree_2
   \                     `??new TSNTable2Degree_5`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TSNTable2Degree::delete ~TSNTable2Degree(TSNTable2Degree *)
   \                     `??delete ~TSNTable2Degree`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0200000A           BEQ      `??delete ~TSNTable2Degree_1`
   \   0000000C   ........           BL       `?~TSNTable2Degree`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TSNTable2Degree_1`:
   \   00000018   ........           B        ??Subroutine13_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??__vtbl
    113          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TSNTable2Degree::Calc_Y(float)    40
     TSNTable2Degree::DerivedMax(int)
                                       12
     TSNTable2Degree::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                       12
     TSNTable2Degree::MakeConstants()
                                       48
     TSNTable2Degree::TSNTable2Degree(int)
                                        8
     TSNTable2Degree::TSNTable2Degree(int, TSNConfigString &, int &)
                                        8
     TSNTable2Degree::TSNTable2Degree(int, vector<TSNTable1Degree::Entry>)
                                       28
     TSNTable2Degree::delete ~TSNTable2Degree(TSNTable2Degree *)
                                        8
     TSNTable2Degree::new TSNTable2Degree(int)
                                        8
     TSNTable2Degree::new TSNTable2Degree(int, TSNConfigString &, int &)
                                       16
     TSNTable2Degree::new TSNTable2Degree(int, vector<TSNTable1Degree::Entry>)
                                       12
     TSNTable2Degree::~TSNTable2Degree()
                                       12
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Insert0(EntryCoefficients2 *, EntryCoefficients2 const &)
                                       28
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Make_room(EntryCoefficients2 *, unsigned int)
                                       32
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Push_back0(EntryCoefficients2 const &)
                                       24
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Tidy0()
                                        4
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
                                       20
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy()
                                        8
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Tidy0()
                                      36
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Tidy()
                                      44
     _Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>>::_Assign(_Vector_impl<TSNTable1Degree::Entry, allocator<TSNTable1Degree::Entry>> const &)
                                     216
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Make_room(EntryCoefficients2 *, unsigned int)
                                     260
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Insert0(EntryCoefficients2 *, EntryCoefficients2 const &)
                                     100
     _Vector_impl<EntryCoefficients2, allocator<EntryCoefficients2>>::_Push_back0(EntryCoefficients2 const &)
                                      88
     TSNTable2Degree::TSNTable2Degree(int)
                                      16
     ?Subroutine13                    48
     TSNTable2Degree::TSNTable2Degree(int, vector<TSNTable1Degree::Entry>)
                                     108
     TSNTable2Degree::TSNTable2Degree(int, TSNConfigString &, int &)
                                      12
     TSNTable2Degree::~TSNTable2Degree()
                                      44
     ?Subroutine14                     8
     TSNTable2Degree::MakeConstants()
                                     412
     TSNTable2Degree::LoadConfigString(TSNConfigString &, PRogramObjectBase *)
                                      44
     TSNTable2Degree::DerivedMax(int)
                                      80
     TSNTable2Degree::Calc_Y(float)  404
     ?<Constant {(0.0F), (0.0F), (0.0F)}>
                                      12
     ?<Constant {(0.0F), (0.0F), (0.0F)}>_1
                                      12
     __sti__routine()                  4
     TSNTable2Degree::new TSNTable2Degree(int)
                                      36
     TSNTable2Degree::new TSNTable2Degree(int, vector<TSNTable1Degree::Entry>)
                                      44
     TSNTable2Degree::new TSNTable2Degree(int, TSNConfigString &, int &)
                                      56
     TSNTable2Degree::delete ~TSNTable2Degree(TSNTable2Degree *)
                                      28
     ??DataTable2                      4
      Others                         408

 
 2 488 bytes in segment CODE
    52 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 1 352 bytes of CODE  memory (+ 1 140 bytes shared)
    52 bytes of CONST memory

Errors: none
Warnings: none
