##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:03 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmBasic.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmBasic.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmBasic.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmBasic.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmBasic.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char const *string::c_str() const
   \                     ??c_str:
   \   00000000   181090E5           LDR      R1,[R0, #+24]
   \   00000004   100051E3           CMP      R1,#+16
   \   00000008   04009025           LDRCS    R0,[R0, #+4]
   \   0000000C   1EFF2F21           BXCS     LR
   \   00000010   040080E2           ADD      R0,R0,#+4
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_3
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_4
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_3:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_4:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_5
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_6
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_6:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_7
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_8
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_9
   \                     ??_Erase_10:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_9:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_10
   \                     ??_Erase_8:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_7:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_11
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_12
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_12:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_11
   \                     ??_Erase_5:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_13
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_13:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_14
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_14:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_11:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_15
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_16
   \                     ??_Erase_17:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_18
   \                     ??_Erase_19:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_20:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_16:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_21
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_21
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_22
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_23
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_23:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_20
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_17
   \                     ??_Erase_18:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_24
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_21
   \                     ??_Erase_22:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_25
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_25:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_20
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_19
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_26
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_21:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_15:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_2
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_3:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_4
   \                     ??_Insert_2:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_5
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_4
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_4
   \                     ??_Insert_5:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_4
   \   00000060   F0FFFFEA           B        ??_Insert_3
   \                     ??_Insert_6:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_4:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_7
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_8
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_6
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_9
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_4
   \                     ??_Insert_8:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_6
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_10
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_10:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   1000001A           BNE      ??erase_1
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??_Erase_2,??_Erase??rA
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0C0000EA           B        ??erase_2
   \                     ??erase_3:
   \   0000003C   0570A0E1           MOV      R7,R5
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000054   0710A0E1           MOV      R1,R7
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??_Erase,??_Erase??rA_1
   \   00000060   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_1:
   \   00000064   060055E1           CMP      R5,R6
   \   00000068   F3FFFF1A           BNE      ??erase_3
   \   0000006C   0500A0E1           MOV      R0,R5
   \                     ??erase_2:
   \   00000070   F040BDE8           POP      {R4-R7,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_5
   \                     ??_Copy_2:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_5:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_6
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_7
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_7:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_6:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_27
   \                     ??_Erase_28:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_27:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_28
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Erase_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_29
   \                     ??_Erase_30:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_2
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_29:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_30
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_11
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_11:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<unsigned int> &set<unsigned int>::operator=(set<unsigned int> const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   0500000A           BEQ      `??operator=_2`
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   ........           _BLF     ??erase,??erase??rA
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     ??_Copy,??_Copy??rA_1
   \                     `??operator=_2`:
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AlarmBasic *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_2
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROSafeLinkedList::~PROSafeLinkedList()
   \                     `?~PROSafeLinkedList`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~PROLinkedList`,`?~PROLinkedList??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic::~AlarmBasic()
   \                     `?~AlarmBasic`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AlarmBasic_1`
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AlarmBasic_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmBasic_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
      2          #ifdef ANWIN
      3              #include "LiteCall.hpp"
      4              #include "LiteAccess.hpp"
      5              #pragma hdrstop
      6              #include "MainUnit.h"
      7          #endif
      8          #ifdef BORLAND
      9              #pragma package(smart_init)
     10          #endif
     11          
     12          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
     13          PROSafeLinkedList  AlarmBasic::PROActiveAlarmList;
   \   00000004   ........           LDR      R4,??DataTable0  ;; ??PROActiveAlarmList
   \   00000008   84509FE5           LDR      R5,??__sti__routine_1  ;; `?<Constant "AlarmLog.txt">`
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??PROSafeLinkedList,??PROSafeLinkedList??rA
   \   00000018   100085E2           ADD      R0,R5,#+16
   \   0000001C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     14          PROSafeLinkedList  AlarmBasic::PROAcknowAlarmList;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   1C0084E2           ADD      R0,R4,#+28
   \   00000028   ........           _BLF     ??PROSafeLinkedList,??PROSafeLinkedList??rA
   \   0000002C   1C0085E2           ADD      R0,R5,#+28
   \   00000030   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     15          set<AlarmBasic *>AlarmBasic::AlarmSet;
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000040   380084E2           ADD      R0,R4,#+56
   \   00000044   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000048   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000004C   4C00C4E5           STRB     R0,[R4, #+76]
   \   00000050   280085E2           ADD      R0,R5,#+40
   \   00000054   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     16          ANCriticalSection AlarmBasic::AlarmSema;
   \   00000058   600084E2           ADD      R0,R4,#+96
   \   0000005C   ........           _BLF     ??ANCriticalSection,??ANCriticalSection??rA
   \   00000060   340085E2           ADD      R0,R5,#+52
   \   00000064   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     17          ANCriticalSection AlarmBasic::LogSema;
   \   00000068   700084E2           ADD      R0,R4,#+112
   \   0000006C   ........           _BLF     ??ANCriticalSection,??ANCriticalSection??rA
   \   00000070   400085E2           ADD      R0,R5,#+64
   \   00000074   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     18          
     19          int AlCnt = 0;
     20          AnsiString AlarmBasic::LogFileName = "AlarmLog.txt";
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   800084E2           ADD      R0,R4,#+128
   \   00000080   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000084   4C0085E2           ADD      R0,R5,#+76
   \   00000088   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000008C   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000094   ........           DC32     `?<Constant "AlarmLog.txt">`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AlarmLog.txt">`:
   \   00000000   416C61726D4C       DC8 "AlarmLog.txt"
   \              6F672E747874
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   ............       DC32 ?_1, ??PROActiveAlarmList, `?~PROSafeLinkedList`
   \              ............
   \   0000001C   ............       DC32 ?_3, ??PROAcknowAlarmList, `?~PROSafeLinkedList`
   \              ............
   \   00000028   ............       DC32 ?_5, ??AlarmSet, `?~set`
   \              ............
   \   00000034   ............       DC32 ?_7, ??AlarmSema, `?~ANCriticalSection`
   \              ............
   \   00000040   ............       DC32 ?_9, ??LogSema, `?~ANCriticalSection`
   \              ............
   \   0000004C   ............       DC32 ?_11, ??LogFileName, `?~AnsiString`
   \              ............

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??PROActiveAlarmList:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for PROActiveAlarmList>`
   \                     ??PROAcknowAlarmList:
   \   0000001C                      DS8 28
   \   00000038                      REQUIRE `?<Initializer for PROAcknowAlarmList>`
   \                     ??AlarmSet:
   \   00000038                      DS8 24
   \   00000050                      REQUIRE `?<Initializer for AlarmSet>`
   \                     AlCnt:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for AlCnt>`
     21          
     22          // Array used for a cyclic update of alarms
     23          bool AlarmBasic::AlarmSilence           = true;
     24          int  AlarmBasic::LocalResetCnt          = 0;
   \                     ??LocalResetCnt:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for LocalResetCnt>`
     25          U32  AlarmBasic::CurrentAlarmNo         = 0;
   \                     ??CurrentAlarmNo:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for CurrentAlarmNo>`
   \                     ??AlarmSilence:
   \   0000005C                      DS8 1
   \   0000005D                      REQUIRE `?<Initializer for AlarmSilence>`
   \   0000005D                      DS8 3
   \                     ??AlarmSema:
   \   00000060                      DS8 16
   \   00000070                      REQUIRE `?<Initializer for AlarmSema>`
   \                     ??LogSema:
   \   00000070                      DS8 16
   \   00000080                      REQUIRE `?<Initializer for LogSema>`
   \                     ??LogFileName:
   \   00000080                      DS8 28
   \   0000009C                      REQUIRE `?<Initializer for LogFileName>`

   \                                 In segment DATA_I, align 1, align-sorted
     26          volatile bool AlarmBasic::AlarmSound    = true;
   \                     ??AlarmSound:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for AlarmSound>`
     27          #ifdef S2TXU
     28          extern OS_RSEMA LanguageSema;

   \                                 In segment DATA_Z, align 4, align-sorted
     29          OS_TIMER AlarmSilenceTimer;
   \                     AlarmSilenceTimer:
   \   00000000                      DS8 20
     30          #endif
     31          
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          AlarmBasic::AlarmBasic(void) {
   \                     ??AlarmBasic:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000010   ........           LDR      R0,??DataTable4  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     34          	//Initiate();
     35          }
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C                      REQUIRE ?Subroutine63
   \   0000001C                      ;; // Fall through to label ?Subroutine63

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine63:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          AlarmBasic::AlarmBasic(PRogramObjectBase *PROPtr) {
   \                     ??AlarmBasic_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000014   ........           LDR      R0,??DataTable4  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     38              Initiate();
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Initiate
     39              PROPointer = PROPtr;
   \   00000024   C45084E5           STR      R5,[R4, #+196]
     40          }
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           B        ??Subroutine62_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine62:
   \   00000000   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine62_0:
   \   00000004   3040BDE8           POP      {R4,R5,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine62_1:
   \   0000000C   ........           DC32     `?<Constant "%d %b %H:%M:%S">` + 64
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          AlarmBasic::AlarmBasic(PRogramObjectBase *PROPtr, float Lim) {
   \                     ??AlarmBasic_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000018   ........           LDR      R0,??DataTable4  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     43              Initiate();
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??Initiate
     44              PROPointer = PROPtr;
   \   00000028   C45084E5           STR      R5,[R4, #+196]
     45              Limit      = Lim;
   \   0000002C   E46084E5           STR      R6,[R4, #+228]
     46          }
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           B        ??Subroutine61_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine61:
   \   00000000   1CD08DE2           ADD      SP,SP,#+28
   \                     ??Subroutine61_0:
   \   00000004   7040BDE8           POP      {R4-R6,LR}
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine61_1:
   \   0000000C   ........           DC32     ??PROActiveAlarmList + 28
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          AlarmBasic::AlarmBasic(PRogramObjectBase *PROPtr, float Lim, float Dband, bool AlEnable) {
   \                     ??AlarmBasic_3:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1470DDE5           LDRB     R7,[SP, #+20]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   0000001C   ........           LDR      R0,??DataTable4  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
     49              Initiate();
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??Initiate
     50              Limit      = Lim;
   \   0000002C   E45084E5           STR      R5,[R4, #+228]
     51              Deadband   = Dband;
   \   00000030   BC6084E5           STR      R6,[R4, #+188]
     52              Enable     = AlEnable;
   \   00000034   E270C4E5           STRB     R7,[R4, #+226]
     53          }
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C                      REQUIRE ?Subroutine64
   \   0000003C                      ;; // Fall through to label ?Subroutine64

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine64:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void AlarmBasic::Initiate(void) {
   \                     ??Initiate:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
     56              AlCnt++;
   \   00000004   ........           LDR      R5,??DataTable5  ;; ??PROActiveAlarmList
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   500095E5           LDR      R0,[R5, #+80]
     57              PROPointer           = NULL;
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   500085E5           STR      R0,[R5, #+80]
   \   0000001C   C46084E5           STR      R6,[R4, #+196]
     58              IsHWAlarm            = false;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   CE00C4E5           STRB     R0,[R4, #+206]
     59              MessageKey           = L_WORD485;
   \   00000028   E500A0E3           MOV      R0,#+229
   \   0000002C   400F80E3           ORR      R0,R0,#0x100
   \   00000030   B80084E5           STR      R0,[R4, #+184]
     60              TPCMessageKey        = L_WORD499;
   \   00000034   0E0080E2           ADD      R0,R0,#+14
   \   00000038   B40084E5           STR      R0,[R4, #+180]
     61              IDNumber             = ID_AL_BASIC << 16;
   \   0000003C   B006A0E3           MOV      R0,#+184549376
   \   00000040   C10880E3           ORR      R0,R0,#0xC10000
   \   00000044   9C0084E5           STR      R0,[R4, #+156]
     62              Type                 = ID_AL_BASIC;
   \   00000048   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000004C   A00084E5           STR      R0,[R4, #+160]
     63              Limit                = 0.0;
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   E40084E5           STR      R0,[R4, #+228]
     64              Deadband             = 0.0;
   \   00000058   BC0084E5           STR      R0,[R4, #+188]
     65              IsVisible            = true;
   \   0000005C   0170A0E3           MOV      R7,#+1
   \   00000060   B070C4E5           STRB     R7,[R4, #+176]
     66              IsExtraAlarm         = false;
   \   00000064   CD00C4E5           STRB     R0,[R4, #+205]
     67              LastActiveTime       = clock();
   \   00000068   ........           _BLF     clock,??clock??rA
   \   0000006C   C00084E5           STR      R0,[R4, #+192]
     68              Locked               = true;
   \   00000070   E870C4E5           STRB     R7,[R4, #+232]
     69              CanDisableOnly       = false;
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   EA00C4E5           STRB     R0,[R4, #+234]
     70              Enable               = true;
   \   0000007C   E270C4E5           STRB     R7,[R4, #+226]
     71              PreviousEnable       = true;
   \   00000080   CC70C4E5           STRB     R7,[R4, #+204]
     72              State                = AlIdle;
   \   00000084   E060C4E5           STRB     R6,[R4, #+224]
     73              StateAtLastSend      = AlIdle;
   \   00000088   E160C4E5           STRB     R6,[R4, #+225]
     74              OutsideLimit         = false;
   \   0000008C   E900C4E5           STRB     R0,[R4, #+233]
     75              AlarmNo              = 0;
   \   00000090   C86084E5           STR      R6,[R4, #+200]
     76          
     77              AlarmDelay           = 0;
   \   00000094   A86084E5           STR      R6,[R4, #+168]
     78          
     79              LastInactiveTime     = clock();
   \   00000098   ........           _BLF     clock,??clock??rA
   \   0000009C   AC0084E5           STR      R0,[R4, #+172]
     80              Time_Rised           = time(NULL);
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     time,??time??rA
   \   000000A8   D00084E5           STR      R0,[R4, #+208]
     81              Time_Acknowledged    = time(NULL);
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     time,??time??rA
   \   000000B4   D40084E5           STR      R0,[R4, #+212]
     82              Time_Disappeared     = time(NULL);
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           _BLF     time,??time??rA
   \   000000C0   D80084E5           STR      R0,[R4, #+216]
     83              Time_Changed         = time(NULL);
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           _BLF     time,??time??rA
   \   000000CC   DC0084E5           STR      R0,[R4, #+220]
     84          	AlarmSet.insert(this);
   \   000000D0   0420A0E1           MOV      R2,R4
   \   000000D4   381085E2           ADD      R1,R5,#+56
   \   000000D8   0D00A0E1           MOV      R0,SP
   \   000000DC   ........           _BLF     ??insert,??insert??rA
     85          
     86          }
   \   000000E0   F340BDE8           POP      {R0,R1,R4-R7,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return
     87          
     88          ///////////////////////////////////////////////////////////////
     89          //
     90          // Routines for the Configuration
     91          //
     92          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     93          AnsiString AlarmBasic::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   85DF4DE2           SUB      SP,SP,#+532
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     94              AnsiString TabStr1 = AnsiString::StringOfChar('\t', 1 + ExtraTabs);
   \   00000014   012086E2           ADD      R2,R6,#+1
   \   00000018   0910A0E3           MOV      R1,#+9
   \   0000001C   620F8DE2           ADD      R0,SP,#+392
   \   00000020   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     95              AnsiString TabStr2 = AnsiString::StringOfChar('\t', 2 + ExtraTabs);
   \   00000024   022086E2           ADD      R2,R6,#+2
   \   00000028   0910A0E3           MOV      R1,#+9
   \   0000002C   8C008DE2           ADD      R0,SP,#+140
   \   00000030   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     96              AnsiString TabStr3 = AnsiString::StringOfChar('\t', 3 + ExtraTabs);
   \   00000034   032086E2           ADD      R2,R6,#+3
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   690F8DE2           ADD      R0,SP,#+420
   \   00000040   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     97              AnsiString TabStr4 = AnsiString::StringOfChar('\t', 4 + ExtraTabs);
   \   00000044   042086E2           ADD      R2,R6,#+4
   \   00000048   0910A0E3           MOV      R1,#+9
   \   0000004C   700F8DE2           ADD      R0,SP,#+448
   \   00000050   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     98              AnsiString TabStr5 = AnsiString::StringOfChar('\t', 5 + ExtraTabs);
   \   00000054   052086E2           ADD      R2,R6,#+5
   \   00000058   0910A0E3           MOV      R1,#+9
   \   0000005C   770F8DE2           ADD      R0,SP,#+476
   \   00000060   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     99              AnsiString TabStr6 = AnsiString::StringOfChar('\t', 6 + ExtraTabs);
   \   00000064   062086E2           ADD      R2,R6,#+6
    100              AnsiString LocalString;
    101              LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   00000068   ........           LDR      R6,??DataTable11  ;; CrLfStr
   \   0000006C   0910A0E3           MOV      R1,#+9
   \   00000070   7E0F8DE2           ADD      R0,SP,#+504
   \   00000074   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000080   A01094E5           LDR      R1,[R4, #+160]
   \   00000084   460F8DE2           ADD      R0,SP,#+280
   \   00000088   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000008C   462F8DE2           ADD      R2,SP,#+280
   \   00000090   621F8DE2           ADD      R1,SP,#+392
   \   00000094   FC008DE2           ADD      R0,SP,#+252
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   FC108DE2           ADD      R1,SP,#+252
   \   000000A4   E0008DE2           ADD      R0,SP,#+224
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   ........           LDR      R0,??DataTable12  ;; ??npos
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   007090E5           LDR      R7,[R0, #+0]
   \   000000B8   E0108DE2           ADD      R1,SP,#+224
   \   000000BC   0730A0E1           MOV      R3,R7
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??append,??append??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   E0008DE2           ADD      R0,SP,#+224
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   FC008DE2           ADD      R0,SP,#+252
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   460F8DE2           ADD      R0,SP,#+280
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    102          
    103              if ( IsExtraAlarm ) {
   \   000000F8   CD00D4E5           LDRB     R0,[R4, #+205]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   9200000A           BEQ      ??MakeConfigString_1
    104                  if ( IsVisible ) {
   \   00000104   B000D4E5           LDRB     R0,[R4, #+176]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   1C00000A           BEQ      ??MakeConfigString_2
    105                      LocalString += TabStr2 + KeyWord(C_AL_VISIBLE) + CrLfStr;
   \   00000110   BE10A0E3           MOV      R1,#+190
   \   00000114   B01E81E3           ORR      R1,R1,#0xB00
   \   00000118   38008DE2           ADD      R0,SP,#+56
   \   0000011C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000120   38208DE2           ADD      R2,SP,#+56
   \   00000124   8C108DE2           ADD      R1,SP,#+140
   \   00000128   1C008DE2           ADD      R0,SP,#+28
   \   0000012C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000130   0620A0E1           MOV      R2,R6
   \   00000134   1C108DE2           ADD      R1,SP,#+28
   \   00000138   0D00A0E1           MOV      R0,SP
   \   0000013C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000140   0730A0E1           MOV      R3,R7
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0D10A0E1           MOV      R1,SP
   \   0000014C   0500A0E1           MOV      R0,R5
   \   00000150   ........           _BLF     ??append,??append??rA
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0110A0E3           MOV      R1,#+1
   \   0000015C   0D00A0E1           MOV      R0,SP
   \   00000160   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   1C008DE2           ADD      R0,SP,#+28
   \   00000170   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   38008DE2           ADD      R0,SP,#+56
   \   00000180   ........           _BLF     ??_Tidy,??_Tidy??rA
    106                  }
    107                  if ( !FindDictionaryWord(MessageKey).IsEmpty() ) {
   \                     ??MakeConfigString_2:
   \   00000184   B81094E5           LDR      R1,[R4, #+184]
   \   00000188   A8008DE2           ADD      R0,SP,#+168
   \   0000018C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000190   A8008DE2           ADD      R0,SP,#+168
   \   00000194   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000198   010000E2           AND      R0,R0,#0x1
   \   0000019C   018020E2           EOR      R8,R0,#0x1
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   A8008DE2           ADD      R0,SP,#+168
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   000058E3           CMP      R8,#+0
   \   000001B4   2C00000A           BEQ      ??MakeConfigString_3
    108                      LocalString += TabStr2 + KeyWord(C_AL_DESCRIPTION) + (AnsiString)MessageKey + CrLfStr;
   \   000001B8   B81094E5           LDR      R1,[R4, #+184]
   \   000001BC   70008DE2           ADD      R0,SP,#+112
   \   000001C0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001C4   0080A0E1           MOV      R8,R0
   \   000001C8   BF10A0E3           MOV      R1,#+191
   \   000001CC   B01E81E3           ORR      R1,R1,#0xB00
   \   000001D0   54008DE2           ADD      R0,SP,#+84
   \   000001D4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001D8   54208DE2           ADD      R2,SP,#+84
   \   000001DC   8C108DE2           ADD      R1,SP,#+140
   \   000001E0   0D00A0E1           MOV      R0,SP
   \   000001E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001E8   0820A0E1           MOV      R2,R8
   \   000001EC   0D10A0E1           MOV      R1,SP
   \   000001F0   1C008DE2           ADD      R0,SP,#+28
   \   000001F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F8   0620A0E1           MOV      R2,R6
   \   000001FC   1C108DE2           ADD      R1,SP,#+28
   \   00000200   38008DE2           ADD      R0,SP,#+56
   \   00000204   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000208   0730A0E1           MOV      R3,R7
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   38108DE2           ADD      R1,SP,#+56
   \   00000214   0500A0E1           MOV      R0,R5
   \   00000218   ........           _BLF     ??append,??append??rA
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   38008DE2           ADD      R0,SP,#+56
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   1C008DE2           ADD      R0,SP,#+28
   \   00000238   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   70008DE2           ADD      R0,SP,#+112
   \   00000248   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   0D00A0E1           MOV      R0,SP
   \   00000258   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   54008DE2           ADD      R0,SP,#+84
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
    109                  }
    110                  if ( !FindDictionaryWord(TPCMessageKey).IsEmpty() ) {
   \                     ??MakeConfigString_3:
   \   0000026C   B41094E5           LDR      R1,[R4, #+180]
   \   00000270   C4008DE2           ADD      R0,SP,#+196
   \   00000274   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000278   C4008DE2           ADD      R0,SP,#+196
   \   0000027C   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000280   010000E2           AND      R0,R0,#0x1
   \   00000284   018020E2           EOR      R8,R0,#0x1
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   C4008DE2           ADD      R0,SP,#+196
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   000058E3           CMP      R8,#+0
   \   0000029C   4A00000A           BEQ      ??MakeConfigString_4
    111                      LocalString += TabStr2 + KeyWord(C_AL_TCP_DESCRIPTION) + (AnsiString)TPCMessageKey + CrLfStr;
   \   000002A0   B41094E5           LDR      R1,[R4, #+180]
   \   000002A4   70008DE2           ADD      R0,SP,#+112
   \   000002A8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002AC   0080A0E1           MOV      R8,R0
   \   000002B0   BC1EA0E3           MOV      R1,#+3008
   \   000002B4   54008DE2           ADD      R0,SP,#+84
   \   000002B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002BC   54208DE2           ADD      R2,SP,#+84
   \   000002C0   8C108DE2           ADD      R1,SP,#+140
   \   000002C4   38008DE2           ADD      R0,SP,#+56
   \   000002C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002CC   0820A0E1           MOV      R2,R8
   \   000002D0   38108DE2           ADD      R1,SP,#+56
   \   000002D4   1C008DE2           ADD      R0,SP,#+28
   \   000002D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002DC   0620A0E1           MOV      R2,R6
   \   000002E0   1C108DE2           ADD      R1,SP,#+28
   \   000002E4   0D00A0E1           MOV      R0,SP
   \   000002E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002EC   0730A0E1           MOV      R3,R7
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   0D10A0E1           MOV      R1,SP
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   ........           _BLF     ??append,??append??rA
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0110A0E3           MOV      R1,#+1
   \   00000308   0D00A0E1           MOV      R0,SP
   \   0000030C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   1C008DE2           ADD      R0,SP,#+28
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000320   0020A0E3           MOV      R2,#+0
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   70008DE2           ADD      R0,SP,#+112
   \   0000032C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0110A0E3           MOV      R1,#+1
   \   00000338   38008DE2           ADD      R0,SP,#+56
   \   0000033C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   0110A0E3           MOV      R1,#+1
   \   00000348   54008DE2           ADD      R0,SP,#+84
   \   0000034C   1D0000EA           B        ??MakeConfigString_5
    112                  }
    113              } else {
    114                  if ( !Enable ) LocalString += TabStr2 + KeyWord(C_DISABLE) + CrLfStr;
   \                     ??MakeConfigString_1:
   \   00000350   E200D4E5           LDRB     R0,[R4, #+226]
   \   00000354   000050E3           CMP      R0,#+0
   \   00000358   1B00001A           BNE      ??MakeConfigString_4
   \   0000035C   6510A0E3           MOV      R1,#+101
   \   00000360   0D00A0E1           MOV      R0,SP
   \   00000364   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000368   0D20A0E1           MOV      R2,SP
   \   0000036C   8C108DE2           ADD      R1,SP,#+140
   \   00000370   1C008DE2           ADD      R0,SP,#+28
   \   00000374   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000378   0620A0E1           MOV      R2,R6
   \   0000037C   1C108DE2           ADD      R1,SP,#+28
   \   00000380   38008DE2           ADD      R0,SP,#+56
   \   00000384   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000388   0730A0E1           MOV      R3,R7
   \   0000038C   0020A0E3           MOV      R2,#+0
   \   00000390   38108DE2           ADD      R1,SP,#+56
   \   00000394   0500A0E1           MOV      R0,R5
   \   00000398   ........           _BLF     ??append,??append??rA
   \   0000039C   0020A0E3           MOV      R2,#+0
   \   000003A0   0110A0E3           MOV      R1,#+1
   \   000003A4   38008DE2           ADD      R0,SP,#+56
   \   000003A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003AC   0020A0E3           MOV      R2,#+0
   \   000003B0   0110A0E3           MOV      R1,#+1
   \   000003B4   1C008DE2           ADD      R0,SP,#+28
   \   000003B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003BC   0020A0E3           MOV      R2,#+0
   \   000003C0   0110A0E3           MOV      R1,#+1
   \   000003C4   0D00A0E1           MOV      R0,SP
   \                     ??MakeConfigString_5:
   \   000003C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    115              }
    116              if ( Limit != 0.0 ) LocalString += TabStr2 + KeyWord(C_AL_LIMIT) + FloatToAnsiString(Limit) + CrLfStr;
   \                     ??MakeConfigString_4:
   \   000003CC   E48094E5           LDR      R8,[R4, #+228]
   \   000003D0   0800A0E1           MOV      R0,R8
   \   000003D4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003D8   0020A0E1           MOV      R2,R0
   \   000003DC   0130A0E1           MOV      R3,R1
   \   000003E0   0000A0E3           MOV      R0,#+0
   \   000003E4   0010A0E3           MOV      R1,#+0
   \   000003E8   ........           _BLF     __dNotEqual,??__dNotEqual??rA
   \   000003EC   000050E3           CMP      R0,#+0
   \   000003F0   2D00000A           BEQ      ??MakeConfigString_6
   \   000003F4   0330A0E3           MOV      R3,#+3
   \   000003F8   0720A0E3           MOV      R2,#+7
   \   000003FC   0810A0E1           MOV      R1,R8
   \   00000400   70008DE2           ADD      R0,SP,#+112
   \   00000404   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000408   BA10A0E3           MOV      R1,#+186
   \   0000040C   B01E81E3           ORR      R1,R1,#0xB00
   \   00000410   54008DE2           ADD      R0,SP,#+84
   \   00000414   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000418   54208DE2           ADD      R2,SP,#+84
   \   0000041C   8C108DE2           ADD      R1,SP,#+140
   \   00000420   38008DE2           ADD      R0,SP,#+56
   \   00000424   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000428   70208DE2           ADD      R2,SP,#+112
   \   0000042C   38108DE2           ADD      R1,SP,#+56
   \   00000430   1C008DE2           ADD      R0,SP,#+28
   \   00000434   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000438   0620A0E1           MOV      R2,R6
   \   0000043C   1C108DE2           ADD      R1,SP,#+28
   \   00000440   0D00A0E1           MOV      R0,SP
   \   00000444   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000448   0730A0E1           MOV      R3,R7
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0D10A0E1           MOV      R1,SP
   \   00000454   0500A0E1           MOV      R0,R5
   \   00000458   ........           _BLF     ??append,??append??rA
   \   0000045C   0020A0E3           MOV      R2,#+0
   \   00000460   0110A0E3           MOV      R1,#+1
   \   00000464   0D00A0E1           MOV      R0,SP
   \   00000468   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0110A0E3           MOV      R1,#+1
   \   00000474   1C008DE2           ADD      R0,SP,#+28
   \   00000478   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   70008DE2           ADD      R0,SP,#+112
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0110A0E3           MOV      R1,#+1
   \   00000494   38008DE2           ADD      R0,SP,#+56
   \   00000498   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0110A0E3           MOV      R1,#+1
   \   000004A4   54008DE2           ADD      R0,SP,#+84
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
    117              if ( Locked ) {
   \                     ??MakeConfigString_6:
   \   000004AC   E800D4E5           LDRB     R0,[R4, #+232]
   \   000004B0   000050E3           CMP      R0,#+0
   \   000004B4   1C00000A           BEQ      ??MakeConfigString_7
    118                  LocalString += TabStr2 + KeyWord(C_AL_LOCKED) + CrLfStr;
   \   000004B8   BB10A0E3           MOV      R1,#+187
   \   000004BC   B01E81E3           ORR      R1,R1,#0xB00
   \   000004C0   0D00A0E1           MOV      R0,SP
   \   000004C4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004C8   0D20A0E1           MOV      R2,SP
   \   000004CC   8C108DE2           ADD      R1,SP,#+140
   \   000004D0   1C008DE2           ADD      R0,SP,#+28
   \   000004D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004D8   0620A0E1           MOV      R2,R6
   \   000004DC   1C108DE2           ADD      R1,SP,#+28
   \   000004E0   38008DE2           ADD      R0,SP,#+56
   \   000004E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004E8   0730A0E1           MOV      R3,R7
   \   000004EC   0020A0E3           MOV      R2,#+0
   \   000004F0   38108DE2           ADD      R1,SP,#+56
   \   000004F4   0500A0E1           MOV      R0,R5
   \   000004F8   ........           _BLF     ??append,??append??rA
   \   000004FC   0020A0E3           MOV      R2,#+0
   \   00000500   0110A0E3           MOV      R1,#+1
   \   00000504   38008DE2           ADD      R0,SP,#+56
   \   00000508   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000050C   0020A0E3           MOV      R2,#+0
   \   00000510   0110A0E3           MOV      R1,#+1
   \   00000514   1C008DE2           ADD      R0,SP,#+28
   \   00000518   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000051C   0020A0E3           MOV      R2,#+0
   \   00000520   0110A0E3           MOV      R1,#+1
   \   00000524   0D00A0E1           MOV      R0,SP
   \   00000528   1B0000EA           B        ??MakeConfigString_8
    119              } else {
    120                  LocalString += TabStr2 + KeyWord(C_AL_NOT_LOCKED) + CrLfStr;
   \                     ??MakeConfigString_7:
   \   0000052C   BC10A0E3           MOV      R1,#+188
   \   00000530   B01E81E3           ORR      R1,R1,#0xB00
   \   00000534   38008DE2           ADD      R0,SP,#+56
   \   00000538   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000053C   38208DE2           ADD      R2,SP,#+56
   \   00000540   8C108DE2           ADD      R1,SP,#+140
   \   00000544   1C008DE2           ADD      R0,SP,#+28
   \   00000548   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000054C   0620A0E1           MOV      R2,R6
   \   00000550   1C108DE2           ADD      R1,SP,#+28
   \   00000554   0D00A0E1           MOV      R0,SP
   \   00000558   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000055C   0730A0E1           MOV      R3,R7
   \   00000560   0020A0E3           MOV      R2,#+0
   \   00000564   0D10A0E1           MOV      R1,SP
   \   00000568   0500A0E1           MOV      R0,R5
   \   0000056C   ........           _BLF     ??append,??append??rA
   \   00000570   0020A0E3           MOV      R2,#+0
   \   00000574   0110A0E3           MOV      R1,#+1
   \   00000578   0D00A0E1           MOV      R0,SP
   \   0000057C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000580   0020A0E3           MOV      R2,#+0
   \   00000584   0110A0E3           MOV      R1,#+1
   \   00000588   1C008DE2           ADD      R0,SP,#+28
   \   0000058C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000590   0020A0E3           MOV      R2,#+0
   \   00000594   0110A0E3           MOV      R1,#+1
   \   00000598   38008DE2           ADD      R0,SP,#+56
   \                     ??MakeConfigString_8:
   \   0000059C   ........           _BLF     ??_Tidy,??_Tidy??rA
    121              }
    122              LocalString += TabStr1 + KeyWord(C_AL_END) + CrLfStr;
   \   000005A0   B910A0E3           MOV      R1,#+185
   \   000005A4   B01E81E3           ORR      R1,R1,#0xB00
   \   000005A8   5B0F8DE2           ADD      R0,SP,#+364
   \   000005AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005B0   5B2F8DE2           ADD      R2,SP,#+364
   \   000005B4   621F8DE2           ADD      R1,SP,#+392
   \   000005B8   540F8DE2           ADD      R0,SP,#+336
   \   000005BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005C0   0620A0E1           MOV      R2,R6
   \   000005C4   541F8DE2           ADD      R1,SP,#+336
   \   000005C8   4D0F8DE2           ADD      R0,SP,#+308
   \   000005CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005D0   0730A0E1           MOV      R3,R7
   \   000005D4   0020A0E3           MOV      R2,#+0
   \   000005D8   4D1F8DE2           ADD      R1,SP,#+308
   \   000005DC   0500A0E1           MOV      R0,R5
   \   000005E0   ........           _BLF     ??append,??append??rA
   \   000005E4   0020A0E3           MOV      R2,#+0
   \   000005E8   0110A0E3           MOV      R1,#+1
   \   000005EC   4D0F8DE2           ADD      R0,SP,#+308
   \   000005F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005F4   0020A0E3           MOV      R2,#+0
   \   000005F8   0110A0E3           MOV      R1,#+1
   \   000005FC   540F8DE2           ADD      R0,SP,#+336
   \   00000600   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000604   0020A0E3           MOV      R2,#+0
   \   00000608   0110A0E3           MOV      R1,#+1
   \   0000060C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000610   ........           _BLF     ??_Tidy,??_Tidy??rA
    123              LocalString += CrLfStr;
   \   00000614   0730A0E1           MOV      R3,R7
   \   00000618   0020A0E3           MOV      R2,#+0
   \   0000061C   0610A0E1           MOV      R1,R6
   \   00000620   0500A0E1           MOV      R0,R5
   \   00000624   ........           _BLF     ??append,??append??rA
    124              return (LocalString);
   \   00000628   0020A0E3           MOV      R2,#+0
   \   0000062C   0110A0E3           MOV      R1,#+1
   \   00000630   7E0F8DE2           ADD      R0,SP,#+504
   \   00000634   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000638   0020A0E3           MOV      R2,#+0
   \   0000063C   0110A0E3           MOV      R1,#+1
   \   00000640   770F8DE2           ADD      R0,SP,#+476
   \   00000644   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000648   0020A0E3           MOV      R2,#+0
   \   0000064C   0110A0E3           MOV      R1,#+1
   \   00000650   700F8DE2           ADD      R0,SP,#+448
   \   00000654   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000658   0020A0E3           MOV      R2,#+0
   \   0000065C   0110A0E3           MOV      R1,#+1
   \   00000660   690F8DE2           ADD      R0,SP,#+420
   \   00000664   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000668   0020A0E3           MOV      R2,#+0
   \   0000066C   0110A0E3           MOV      R1,#+1
   \   00000670   8C008DE2           ADD      R0,SP,#+140
   \   00000674   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000678   0020A0E3           MOV      R2,#+0
   \   0000067C   0110A0E3           MOV      R1,#+1
   \   00000680   620F8DE2           ADD      R0,SP,#+392
   \   00000684   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000688   85DF8DE2           ADD      SP,SP,#+532
   \   0000068C                      REQUIRE ?Subroutine65
   \   0000068C                      ;; // Fall through to label ?Subroutine65
    125          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine65:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    126          //---------------------------------------------------------------------------
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          bool AlarmBasic::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    129              bool NoError = true;
    130              int ErrorLine = 0;
    131              int Key;
    132              //Enable  = true;
    133              Limit   = 0.0;
    134              //Locked = true;
    135              AnsiString PROName = "Alarm";
   \   00000004   ........           LDR      R8,??DataTable14  ;; `?<Constant "Alarm">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   E40084E5           STR      R0,[R4, #+228]
   \   00000024   0810A0E1           MOV      R1,R8
   \   00000028   3C008DE2           ADD      R0,SP,#+60
   \   0000002C   ........           _BLF     ??AnsiString,??AnsiString??rA
    136              if ( PROPointer )   PROName += (AnsiString)", for " + PROPointer->Name;
   \   00000030   C40094E5           LDR      R0,[R4, #+196]
   \   00000034   0170A0E3           MOV      R7,#+1
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1500000A           BEQ      ??LoadConfigString_1
   \   00000040   681088E2           ADD      R1,R8,#+104
   \   00000044   20008DE2           ADD      R0,SP,#+32
   \   00000048   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000004C   C41094E5           LDR      R1,[R4, #+196]
   \   00000050   442081E2           ADD      R2,R1,#+68
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000060   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   003090E5           LDR      R3,[R0, #+0]
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   3C008DE2           ADD      R0,SP,#+60
   \   00000074   ........           _BLF     ??append,??append??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0710A0E1           MOV      R1,R7
   \   00000090   20008DE2           ADD      R0,SP,#+32
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
    137              PROName += ":\n";
   \                     ??LoadConfigString_1:
   \   00000098   ........           ADR      R8,??DataTable8  ;; ":\n"
   \   0000009C   0800A0E1           MOV      R0,R8
   \   000000A0   ........           _BLF     strlen,??strlen??rA
   \   000000A4   0020A0E1           MOV      R2,R0
   \   000000A8   0810A0E1           MOV      R1,R8
   \   000000AC   3C008DE2           ADD      R0,SP,#+60
   \   000000B0   ........           _BLF     ??append_1,??append??rA_1
   \   000000B4   008067E2           RSB      R8,R7,#+0
    138              do {
    139                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   0D20A0E1           MOV      R2,SP
   \   000000C0   20108DE2           ADD      R1,SP,#+32
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     ??NextWord,??NextWord??rA
    140                  if ( ErrorLine ) {
   \   000000CC   00009DE5           LDR      R0,[SP, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0C00000A           BEQ      ??LoadConfigString_3
    141                      if ( ErrorLine != EOF ) {
   \   000000D8   080050E1           CMP      R0,R8
   \   000000DC   6900000A           BEQ      ??LoadConfigString_4
    142                          GiveConfigWarning(PROName, ErrorLine);
   \   000000E0   3C108DE2           ADD      R1,SP,#+60
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     ??string,??string??rA
   \   000000EC   00109DE5           LDR      R1,[SP, #+0]
   \   000000F0   04008DE2           ADD      R0,SP,#+4
   \   000000F4   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_5:
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000108   5E0000EA           B        ??LoadConfigString_4
    143                      }
    144                  } else {
    145                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   0000010C   20108DE2           ADD      R1,SP,#+32
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   ........           _BLF     ??string,??string??rA
   \   00000118   04008DE2           ADD      R0,SP,#+4
   \   0000011C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000120   0060A0E1           MOV      R6,R0
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
    146                      switch ( Key ) {
   \   00000134   0100A0E3           MOV      R0,#+1
   \   00000138   640056E3           CMP      R6,#+100
   \   0000013C   4B00000A           BEQ      ??LoadConfigString_6
   \   00000140   650056E3           CMP      R6,#+101
   \   00000144   4B00000A           BEQ      ??LoadConfigString_7
   \   00000148   B920A0E3           MOV      R2,#+185
   \   0000014C   B02E82E3           ORR      R2,R2,#0xB00
   \   00000150   020056E1           CMP      R6,R2
   \   00000154   4B00000A           BEQ      ??LoadConfigString_4
   \   00000158   012082E2           ADD      R2,R2,#+1
   \   0000015C   020056E1           CMP      R6,R2
   \   00000160   2100000A           BEQ      ??LoadConfigString_8
   \   00000164   012082E3           ORR      R2,R2,#0x1
   \   00000168   020056E1           CMP      R6,R2
   \   0000016C   4400000A           BEQ      ??LoadConfigString_9
   \   00000170   012082E2           ADD      R2,R2,#+1
   \   00000174   020056E1           CMP      R6,R2
   \   00000178   01208213           ORRNE    R2,R2,#0x1
   \   0000017C   02005611           CMPNE    R6,R2
   \   00000180   3E00000A           BEQ      ??LoadConfigString_10
   \   00000184   012082E2           ADD      R2,R2,#+1
   \   00000188   020056E1           CMP      R6,R2
   \   0000018C   2300000A           BEQ      ??LoadConfigString_11
   \   00000190   012082E3           ORR      R2,R2,#0x1
   \   00000194   020056E1           CMP      R6,R2
   \   00000198   2200000A           BEQ      ??LoadConfigString_12
   \   0000019C   BC0E56E3           CMP      R6,#+3008
   \   000001A0   2900000A           BEQ      ??LoadConfigString_13
    147                      default:
    148                          GiveConfigWarning(PROName, InputKeyWord, ConfigString.LineCount);
   \   000001A4   20108DE2           ADD      R1,SP,#+32
   \   000001A8   58008DE2           ADD      R0,SP,#+88
   \   000001AC   ........           _BLF     ??string,??string??rA
   \   000001B0   3C108DE2           ADD      R1,SP,#+60
   \   000001B4   74008DE2           ADD      R0,SP,#+116
   \   000001B8   ........           _BLF     ??string,??string??rA
   \   000001BC   1C2095E5           LDR      R2,[R5, #+28]
   \   000001C0   58108DE2           ADD      R1,SP,#+88
   \   000001C4   74008DE2           ADD      R0,SP,#+116
   \   000001C8   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   58008DE2           ADD      R0,SP,#+88
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   74008DE2           ADD      R0,SP,#+116
   \   000001E8   C5FFFFEA           B        ??LoadConfigString_5
    149                          break;
    150                      case C_AL_LIMIT:
    151                          Limit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigString_8:
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0D10A0E1           MOV      R1,SP
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000001FC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000200   E40084E5           STR      R0,[R4, #+228]
    152                          NoError = !ErrorLine;
   \   00000204   00009DE5           LDR      R0,[SP, #+0]
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   0100001A           BNE      ??LoadConfigString_14
   \                     ??LoadConfigString_15:
   \   00000210   0170A0E3           MOV      R7,#+1
   \   00000214   1B0000EA           B        ??LoadConfigString_4
   \                     ??LoadConfigString_14:
   \   00000218   0070A0E3           MOV      R7,#+0
   \   0000021C   190000EA           B        ??LoadConfigString_4
    153                          break;
    154                      case C_AL_VISIBLE:
    155                          IsVisible = true;
   \                     ??LoadConfigString_11:
   \   00000220   B000C4E5           STRB     R0,[R4, #+176]
   \   00000224   170000EA           B        ??LoadConfigString_4
    156                          break;
    157                      case C_AL_DESCRIPTION:
    158                          MessageKey = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0D10A0E1           MOV      R1,SP
   \   00000230   0500A0E1           MOV      R0,R5
   \   00000234   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000238   B80084E5           STR      R0,[R4, #+184]
    159                          NoError = !ErrorLine;
   \   0000023C   00009DE5           LDR      R0,[SP, #+0]
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   F3FFFF1A           BNE      ??LoadConfigString_14
   \   00000248   F0FFFFEA           B        ??LoadConfigString_15
    160                          break;
    161                      case C_AL_TCP_DESCRIPTION:
    162                          TPCMessageKey = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_13:
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   0D10A0E1           MOV      R1,SP
   \   00000254   0500A0E1           MOV      R0,R5
   \   00000258   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000025C   B40084E5           STR      R0,[R4, #+180]
    163                          NoError = !ErrorLine;
   \   00000260   00009DE5           LDR      R0,[SP, #+0]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   E8FFFF0A           BEQ      ??LoadConfigString_15
   \   0000026C   E9FFFFEA           B        ??LoadConfigString_14
    164                          break;
    165                      case C_ENABLE:
    166                          Enable = true;
   \                     ??LoadConfigString_6:
   \   00000270   E200C4E5           STRB     R0,[R4, #+226]
   \   00000274   030000EA           B        ??LoadConfigString_4
    167                          break;
    168                      case C_DISABLE:
    169                          Enable = false;
   \                     ??LoadConfigString_7:
   \   00000278   0000A0E3           MOV      R0,#+0
   \   0000027C   FBFFFFEA           B        ??LoadConfigString_6
    170                          break;
    171                      case C_AL_LOCKED:
    172                          Locked = true;
    173                          break;
    174                      case C_AL_NOT_LOCKED :
    175                      case C_AL_NOT_LOCKED2:
    176                          Locked = false;
   \                     ??LoadConfigString_10:
   \   00000280   0000A0E3           MOV      R0,#+0
   \                     ??LoadConfigString_9:
   \   00000284   E800C4E5           STRB     R0,[R4, #+232]
    177                          break;
    178                      case C_AL_END:
    179                          break;
    180                      }
    181                  }
    182              }while ( NoError && (ErrorLine != EOF) && (Key != C_AL_END) );
   \                     ??LoadConfigString_4:
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   20008DE2           ADD      R0,SP,#+32
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   000057E3           CMP      R7,#+0
   \   0000029C   00009D15           LDRNE    R0,[SP, #+0]
   \   000002A0   08005011           CMPNE    R0,R8
   \   000002A4   B900A013           MOVNE    R0,#+185
   \   000002A8   B00E8013           ORRNE    R0,R0,#0xB00
   \   000002AC   00005611           CMPNE    R6,R0
   \   000002B0   80FFFF1A           BNE      ??LoadConfigString_2
    183              return (NoError);
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   3C008DE2           ADD      R0,SP,#+60
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   0700A0E1           MOV      R0,R7
   \   000002C8   90D08DE2           ADD      SP,SP,#+144
   \   000002CC   ........           B        ?Subroutine66
    184          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine66:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine66_0:
   \   00000008   ........           DC32     ??WriteAll
   \   0000000C   ........           DC32     TabStr1
   \   00000010   ........           DC32     TabStr2
    185          //---------------------------------------------------------------------------
    186          
    187          ///////////////////////////////////////////////////////////////
    188          //
    189          // Routines for Saving of Settings
    190          //
    191          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    192          AnsiString AlarmBasic::SaveSettings(void) {
   \                     ??SaveSettings:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   77DF4DE2           SUB      SP,SP,#+476
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    193              AnsiString LocalString;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    194              if ( IsModified || WriteAll ) {
   \   00000018   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   ........           LDREQ    R0,??Subroutine66_0  ;; ??WriteAll
   \   00000024   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000028   00005003           CMPEQ    R0,#+0
   \   0000002C   B300000A           BEQ      ??SaveSettings_1
    195                  IsModified = false;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0000C4E5           STRB     R0,[R4, #+0]
    196                  if ( !Locked && !CanDisableOnly ) {
   \   00000038   E800D4E5           LDRB     R0,[R4, #+232]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   EA00D405           LDRBEQ   R0,[R4, #+234]
   \   00000044   00005003           CMPEQ    R0,#+0
   \   00000048   AC00001A           BNE      ??SaveSettings_1
    197                      LocalString += TabStr1 + KeyWord(Type) + CrLfStr;
   \   0000004C   A01094E5           LDR      R1,[R4, #+160]
   \   00000050   ........           LDR      R6,??Subroutine66_0+0x4  ;; TabStr1
   \   00000054   ........           LDR      R7,??DataTable11  ;; CrLfStr
    198                      LocalString += TabStr2 + KWrdEnableDisable(Enable, C_ENABLE, C_DISABLE) + CrLfStr;
   \   00000058   ........           LDR      R9,??Subroutine66_0+0x8  ;; TabStr2
   \   0000005C   38008DE2           ADD      R0,SP,#+56
   \   00000060   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000064   38208DE2           ADD      R2,SP,#+56
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   1C108DE2           ADD      R1,SP,#+28
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   ........           LDR      R0,??DataTable12  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   008090E5           LDR      R8,[R0, #+0]
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   0830A0E1           MOV      R3,R8
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     ??append,??append??rA
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0110A0E3           MOV      R1,#+1
   \   000000A8   0D00A0E1           MOV      R0,SP
   \   000000AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   1C008DE2           ADD      R0,SP,#+28
   \   000000BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   0110A0E3           MOV      R1,#+1
   \   000000C8   38008DE2           ADD      R0,SP,#+56
   \   000000CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D0   E210D4E5           LDRB     R1,[R4, #+226]
   \   000000D4   6530A0E3           MOV      R3,#+101
   \   000000D8   6420A0E3           MOV      R2,#+100
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     ??KWrdEnableDisable,??KWrdEnableDisable??rA
   \   000000E4   8C208DE2           ADD      R2,SP,#+140
   \   000000E8   0910A0E1           MOV      R1,R9
   \   000000EC   70008DE2           ADD      R0,SP,#+112
   \   000000F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F4   0720A0E1           MOV      R2,R7
   \   000000F8   70108DE2           ADD      R1,SP,#+112
   \   000000FC   54008DE2           ADD      R0,SP,#+84
   \   00000100   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000104   0830A0E1           MOV      R3,R8
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   54108DE2           ADD      R1,SP,#+84
   \   00000110   0500A0E1           MOV      R0,R5
   \   00000114   ........           _BLF     ??append,??append??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   54008DE2           ADD      R0,SP,#+84
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000128   0020A0E3           MOV      R2,#+0
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   70008DE2           ADD      R0,SP,#+112
   \   00000134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   8C008DE2           ADD      R0,SP,#+140
   \   00000144   ........           _BLF     ??_Tidy,??_Tidy??rA
    199                      LocalString += TabStr2 + KWrdEnableDisable(PreviousEnable, C_PREVIOUS_ENABLE, C_PREVIOUS_DISABLE) + CrLfStr;
   \   00000148   CC10D4E5           LDRB     R1,[R4, #+204]
   \   0000014C   6E30A0E3           MOV      R3,#+110
   \   00000150   6D20A0E3           MOV      R2,#+109
   \   00000154   E0008DE2           ADD      R0,SP,#+224
   \   00000158   ........           _BLF     ??KWrdEnableDisable,??KWrdEnableDisable??rA
   \   0000015C   E0208DE2           ADD      R2,SP,#+224
   \   00000160   0910A0E1           MOV      R1,R9
   \   00000164   C4008DE2           ADD      R0,SP,#+196
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   0720A0E1           MOV      R2,R7
   \   00000170   C4108DE2           ADD      R1,SP,#+196
   \   00000174   A8008DE2           ADD      R0,SP,#+168
   \   00000178   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000017C   0830A0E1           MOV      R3,R8
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   A8108DE2           ADD      R1,SP,#+168
   \   00000188   0500A0E1           MOV      R0,R5
   \   0000018C   ........           _BLF     ??append,??append??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   A8008DE2           ADD      R0,SP,#+168
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   C4008DE2           ADD      R0,SP,#+196
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   E0008DE2           ADD      R0,SP,#+224
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    200          
    201                      LocalString += TabStr2 + KeyWord(C_AL_LIMIT) + FloatToAnsiString(Limit) + CrLfStr;
   \   000001C0   E41094E5           LDR      R1,[R4, #+228]
   \   000001C4   0330A0E3           MOV      R3,#+3
   \   000001C8   0720A0E3           MOV      R2,#+7
   \   000001CC   5B0F8DE2           ADD      R0,SP,#+364
   \   000001D0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001D4   BA10A0E3           MOV      R1,#+186
   \   000001D8   B01E81E3           ORR      R1,R1,#0xB00
   \   000001DC   540F8DE2           ADD      R0,SP,#+336
   \   000001E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001E4   542F8DE2           ADD      R2,SP,#+336
   \   000001E8   0910A0E1           MOV      R1,R9
   \   000001EC   4D0F8DE2           ADD      R0,SP,#+308
   \   000001F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F4   5B2F8DE2           ADD      R2,SP,#+364
   \   000001F8   4D1F8DE2           ADD      R1,SP,#+308
   \   000001FC   460F8DE2           ADD      R0,SP,#+280
   \   00000200   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000204   0720A0E1           MOV      R2,R7
   \   00000208   461F8DE2           ADD      R1,SP,#+280
   \   0000020C   FC008DE2           ADD      R0,SP,#+252
   \   00000210   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000214   0830A0E1           MOV      R3,R8
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   FC108DE2           ADD      R1,SP,#+252
   \   00000220   0500A0E1           MOV      R0,R5
   \   00000224   ........           _BLF     ??append,??append??rA
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   FC008DE2           ADD      R0,SP,#+252
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   460F8DE2           ADD      R0,SP,#+280
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   5B0F8DE2           ADD      R0,SP,#+364
   \   00000254   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   4D0F8DE2           ADD      R0,SP,#+308
   \   00000264   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   0110A0E3           MOV      R1,#+1
   \   00000270   540F8DE2           ADD      R0,SP,#+336
   \   00000274   ........           _BLF     ??_Tidy,??_Tidy??rA
    202                      LocalString += TabStr1 + KeyWord(C_AL_END) + CrLfStr;
   \   00000278   B910A0E3           MOV      R1,#+185
   \   0000027C   B01E81E3           ORR      R1,R1,#0xB00
   \   00000280   700F8DE2           ADD      R0,SP,#+448
   \   00000284   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000288   702F8DE2           ADD      R2,SP,#+448
   \   0000028C   0610A0E1           MOV      R1,R6
   \   00000290   690F8DE2           ADD      R0,SP,#+420
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   0720A0E1           MOV      R2,R7
   \   0000029C   691F8DE2           ADD      R1,SP,#+420
   \   000002A0   620F8DE2           ADD      R0,SP,#+392
   \   000002A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A8   0830A0E1           MOV      R3,R8
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   621F8DE2           ADD      R1,SP,#+392
   \   000002B4   0500A0E1           MOV      R0,R5
   \   000002B8   ........           _BLF     ??append,??append??rA
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   620F8DE2           ADD      R0,SP,#+392
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0020A0E3           MOV      R2,#+0
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   690F8DE2           ADD      R0,SP,#+420
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0020A0E3           MOV      R2,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   700F8DE2           ADD      R0,SP,#+448
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
    203          
    204                      LocalString += CrLfStr;
   \   000002EC   0830A0E1           MOV      R3,R8
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   0710A0E1           MOV      R1,R7
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   ........           _BLF     ??append,??append??rA
    205                  }
    206              }
    207              return (LocalString);
   \                     ??SaveSettings_1:
   \   00000300   77DF8DE2           ADD      SP,SP,#+476
   \   00000304                      REQUIRE ?Subroutine66
   \   00000304                      ;; // Fall through to label ?Subroutine66
    208          }
    209          

   \                                 In segment CODE, align 4, keep-with-next
    210          bool AlarmBasic::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    211              bool NoError = true;
    212              int ErrorLine   = 0;
    213              int Key         = C_UNDEFINED;
    214              AnsiString PROName = "Alarm setting";
   \   00000004   ........           LDR      R5,??DataTable14  ;; `?<Constant "Alarm">`
   \   00000008   71DF4DE2           SUB      SP,SP,#+452
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0190A0E1           MOV      R9,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   081085E2           ADD      R1,R5,#+8
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
    215              if ( PROPointer )   PROName += (AnsiString)", for " + PROPointer->Name;
   \   00000028   C40094E5           LDR      R0,[R4, #+196]
   \   0000002C   01A0A0E3           MOV      R10,#+1
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   1500000A           BEQ      ??RestoreSettings_1
   \   0000003C   681085E2           ADD      R1,R5,#+104
   \   00000040   04008DE2           ADD      R0,SP,#+4
   \   00000044   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   C40094E5           LDR      R0,[R4, #+196]
   \   00000050   442080E2           ADD      R2,R0,#+68
   \   00000054   20008DE2           ADD      R0,SP,#+32
   \   00000058   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000005C   ........           LDR      R0,??DataTable42  ;; ??npos
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   003090E5           LDR      R3,[R0, #+0]
   \   00000068   20108DE2           ADD      R1,SP,#+32
   \   0000006C   3C008DE2           ADD      R0,SP,#+60
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   0A10A0E1           MOV      R1,R10
   \   0000007C   20008DE2           ADD      R0,SP,#+32
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0720A0E1           MOV      R2,R7
   \   00000088   0A10A0E1           MOV      R1,R10
   \   0000008C   04008DE2           ADD      R0,SP,#+4
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
    216              PROName += ":\n";
   \                     ??RestoreSettings_1:
   \   00000094   60B39FE5           LDR      R11,??RestoreSettings_2  ;; NewLineStr
   \   00000098   ........           ADR      R6,??DataTable13  ;; ":\n"
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   ........           _BLF     strlen,??strlen??rA
   \   000000A4   0020A0E1           MOV      R2,R0
   \   000000A8   0610A0E1           MOV      R1,R6
   \   000000AC   3C008DE2           ADD      R0,SP,#+60
   \   000000B0   ........           _BLF     ??append_1,??append??rA_1
   \   000000B4   0760E0E1           MVN      R6,R7
    217              do {
    218                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_3:
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   0D20A0E1           MOV      R2,SP
   \   000000C0   90108DE2           ADD      R1,SP,#+144
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   ........           _BLF     ??NextWord,??NextWord??rA
    219                  if ( ErrorLine ) {
   \   000000CC   00009DE5           LDR      R0,[SP, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   3100000A           BEQ      ??RestoreSettings_4
    220                      if ( ErrorLine != EOF ) {
   \   000000D8   060050E1           CMP      R0,R6
   \   000000DC   B300000A           BEQ      ??RestoreSettings_5
    221                          RestoreSettingsWarning(PROName + (AnsiString)"Unknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   C8008DE2           ADD      R0,SP,#+200
   \   000000E8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000EC   0080A0E1           MOV      R8,R0
   \   000000F0   181085E2           ADD      R1,R5,#+24
   \   000000F4   AC008DE2           ADD      R0,SP,#+172
   \   000000F8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000FC   0020A0E1           MOV      R2,R0
   \   00000100   3C108DE2           ADD      R1,SP,#+60
   \   00000104   74008DE2           ADD      R0,SP,#+116
   \   00000108   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000010C   0820A0E1           MOV      R2,R8
   \   00000110   74108DE2           ADD      R1,SP,#+116
   \   00000114   58008DE2           ADD      R0,SP,#+88
   \   00000118   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000011C   0B20A0E1           MOV      R2,R11
   \   00000120   58108DE2           ADD      R1,SP,#+88
   \   00000124   04008DE2           ADD      R0,SP,#+4
   \   00000128   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000012C   04108DE2           ADD      R1,SP,#+4
   \   00000130   20008DE2           ADD      R0,SP,#+32
   \   00000134   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000138   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   20008DE2           ADD      R0,SP,#+32
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   0110A0E3           MOV      R1,#+1
   \   00000154   04008DE2           ADD      R0,SP,#+4
   \   00000158   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   58008DE2           ADD      R0,SP,#+88
   \   00000168   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   C8008DE2           ADD      R0,SP,#+200
   \   00000178   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   0110A0E3           MOV      R1,#+1
   \   00000184   74008DE2           ADD      R0,SP,#+116
   \   00000188   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0110A0E3           MOV      R1,#+1
   \   00000194   AC008DE2           ADD      R0,SP,#+172
   \                     ??RestoreSettings_6:
   \   00000198   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000019C   830000EA           B        ??RestoreSettings_5
    222                      }
    223                  } else {
    224                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_4:
   \   000001A0   90108DE2           ADD      R1,SP,#+144
   \   000001A4   04008DE2           ADD      R0,SP,#+4
   \   000001A8   ........           _BLF     ??string,??string??rA
   \   000001AC   04008DE2           ADD      R0,SP,#+4
   \   000001B0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000001B4   0070A0E1           MOV      R7,R0
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   04008DE2           ADD      R0,SP,#+4
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    225                      switch ( Key ) {
   \   000001C8   0100A0E3           MOV      R0,#+1
   \   000001CC   640057E3           CMP      R7,#+100
   \   000001D0   5C00000A           BEQ      ??RestoreSettings_7
   \   000001D4   650057E3           CMP      R7,#+101
   \   000001D8   6200000A           BEQ      ??RestoreSettings_8
   \   000001DC   6D0057E3           CMP      R7,#+109
   \   000001E0   6600000A           BEQ      ??RestoreSettings_9
   \   000001E4   6E0057E3           CMP      R7,#+110
   \   000001E8   6A00000A           BEQ      ??RestoreSettings_10
   \   000001EC   B920A0E3           MOV      R2,#+185
   \   000001F0   B02E82E3           ORR      R2,R2,#0xB00
   \   000001F4   020057E1           CMP      R7,R2
   \   000001F8   6C00000A           BEQ      ??RestoreSettings_5
   \   000001FC   012082E2           ADD      R2,R2,#+1
   \   00000200   020057E1           CMP      R7,R2
   \   00000204   3F00000A           BEQ      ??RestoreSettings_11
    226                      default:
    227                          NoError = false;
    228                          RestoreSettingsWarning(PROName + (AnsiString)"The keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   00000208   1C1099E5           LDR      R1,[R9, #+28]
   \   0000020C   00A0A0E3           MOV      R10,#+0
   \   00000210   6A0F8DE2           ADD      R0,SP,#+424
   \   00000214   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000218   0080A0E1           MOV      R8,R0
   \   0000021C   381085E2           ADD      R1,R5,#+56
   \   00000220   630F8DE2           ADD      R0,SP,#+396
   \   00000224   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000228   0020A0E1           MOV      R2,R0
   \   0000022C   3C108DE2           ADD      R1,SP,#+60
   \   00000230   5C0F8DE2           ADD      R0,SP,#+368
   \   00000234   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000238   90208DE2           ADD      R2,SP,#+144
   \   0000023C   5C1F8DE2           ADD      R1,SP,#+368
   \   00000240   550F8DE2           ADD      R0,SP,#+340
   \   00000244   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000248   482085E2           ADD      R2,R5,#+72
   \   0000024C   551F8DE2           ADD      R1,SP,#+340
   \   00000250   4E0F8DE2           ADD      R0,SP,#+312
   \   00000254   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000258   0820A0E1           MOV      R2,R8
   \   0000025C   4E1F8DE2           ADD      R1,SP,#+312
   \   00000260   470F8DE2           ADD      R0,SP,#+284
   \   00000264   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000268   0B20A0E1           MOV      R2,R11
   \   0000026C   471F8DE2           ADD      R1,SP,#+284
   \   00000270   400F8DE2           ADD      R0,SP,#+256
   \   00000274   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000278   401F8DE2           ADD      R1,SP,#+256
   \   0000027C   E4008DE2           ADD      R0,SP,#+228
   \   00000280   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000284   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   E4008DE2           ADD      R0,SP,#+228
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000298   0A20A0E1           MOV      R2,R10
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   400F8DE2           ADD      R0,SP,#+256
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0A20A0E1           MOV      R2,R10
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   470F8DE2           ADD      R0,SP,#+284
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B8   0A20A0E1           MOV      R2,R10
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   6A0F8DE2           ADD      R0,SP,#+424
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0A20A0E1           MOV      R2,R10
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   4E0F8DE2           ADD      R0,SP,#+312
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0A20A0E1           MOV      R2,R10
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   550F8DE2           ADD      R0,SP,#+340
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0A20A0E1           MOV      R2,R10
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   5C0F8DE2           ADD      R0,SP,#+368
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0A20A0E1           MOV      R2,R10
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   630F8DE2           ADD      R0,SP,#+396
   \   00000304   A3FFFFEA           B        ??RestoreSettings_6
    229                          break;
    230                      case C_AL_LIMIT:
    231                          {
    232                              double tmpLimit = SettingsString->ReadDouble(ErrorLine);
   \                     ??RestoreSettings_11:
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0D10A0E1           MOV      R1,SP
   \   00000310   0900A0E1           MOV      R0,R9
   \   00000314   ........           _BLF     ??ReadDouble,??ReadDouble??rA
    233                              if ( !Locked  && !CanDisableOnly ) {
   \   00000318   E820D4E5           LDRB     R2,[R4, #+232]
   \   0000031C   000052E3           CMP      R2,#+0
   \   00000320   EA20D405           LDRBEQ   R2,[R4, #+234]
   \   00000324   00005203           CMPEQ    R2,#+0
   \   00000328   0100001A           BNE      ??RestoreSettings_12
    234                                  Limit = tmpLimit;
   \   0000032C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000330   E40084E5           STR      R0,[R4, #+228]
    235                              }
    236                          }
    237                          NoError = !ErrorLine;
   \                     ??RestoreSettings_12:
   \   00000334   00009DE5           LDR      R0,[SP, #+0]
   \   00000338   000050E3           CMP      R0,#+0
   \   0000033C   00A0A013           MOVNE    R10,#+0
   \   00000340   01A0A003           MOVEQ    R10,#+1
   \   00000344   190000EA           B        ??RestoreSettings_5
    238                          break;
    239                      case C_ENABLE:
    240                          if ( !Locked && !CanDisableOnly ) {
   \                     ??RestoreSettings_7:
   \   00000348   E810D4E5           LDRB     R1,[R4, #+232]
   \   0000034C   000051E3           CMP      R1,#+0
   \   00000350   1600001A           BNE      ??RestoreSettings_5
   \   00000354   EA10D4E5           LDRB     R1,[R4, #+234]
   \   00000358   000051E3           CMP      R1,#+0
   \                     ??RestoreSettings_13:
   \   0000035C   1300001A           BNE      ??RestoreSettings_5
    241                              Enable = true;
   \   00000360   E200C4E5           STRB     R0,[R4, #+226]
   \   00000364   110000EA           B        ??RestoreSettings_5
    242                          }
    243                          break;
    244                      case C_DISABLE:
    245                          if ( !Locked && !CanDisableOnly ) {
   \                     ??RestoreSettings_8:
   \   00000368   E800D4E5           LDRB     R0,[R4, #+232]
   \   0000036C   000050E3           CMP      R0,#+0
   \   00000370   0E00001A           BNE      ??RestoreSettings_5
   \   00000374   EA00D4E5           LDRB     R0,[R4, #+234]
   \   00000378   000050E3           CMP      R0,#+0
   \   0000037C   F6FFFFEA           B        ??RestoreSettings_13
    246                              Enable = false;
    247                          }
    248                          break;
    249                      case C_PREVIOUS_ENABLE:
    250                          if ( !Locked && !CanDisableOnly ) {
   \                     ??RestoreSettings_9:
   \   00000380   E810D4E5           LDRB     R1,[R4, #+232]
   \   00000384   000051E3           CMP      R1,#+0
   \   00000388   0800001A           BNE      ??RestoreSettings_5
   \   0000038C   EA10D4E5           LDRB     R1,[R4, #+234]
   \   00000390   000051E3           CMP      R1,#+0
   \   00000394   040000EA           B        ??RestoreSettings_14
    251                              PreviousEnable = true;
    252                          }
    253                          break;
    254                      case C_PREVIOUS_DISABLE:
    255                          if ( !Locked && !CanDisableOnly ) {
   \                     ??RestoreSettings_10:
   \   00000398   E800D4E5           LDRB     R0,[R4, #+232]
   \   0000039C   000050E3           CMP      R0,#+0
   \   000003A0   0200001A           BNE      ??RestoreSettings_5
   \   000003A4   EA00D4E5           LDRB     R0,[R4, #+234]
   \   000003A8   000050E3           CMP      R0,#+0
    256                              PreviousEnable = false;
   \                     ??RestoreSettings_14:
   \   000003AC   CC00C405           STRBEQ   R0,[R4, #+204]
    257                          }
    258                          break;
    259                      case C_AL_END:
    260                          break;
    261                      }
    262                  }
    263              }while ( NoError && (ErrorLine != EOF) && (Key != C_AL_END) );
   \                     ??RestoreSettings_5:
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   90008DE2           ADD      R0,SP,#+144
   \   000003BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003C0   00005AE3           CMP      R10,#+0
   \   000003C4   00009D15           LDRNE    R0,[SP, #+0]
   \   000003C8   06005011           CMPNE    R0,R6
   \   000003CC   B900A013           MOVNE    R0,#+185
   \   000003D0   B00E8013           ORRNE    R0,R0,#0xB00
   \   000003D4   00005711           CMPNE    R7,R0
   \   000003D8   36FFFF1A           BNE      ??RestoreSettings_3
    264              return (NoError);
   \   000003DC   0020A0E3           MOV      R2,#+0
   \   000003E0   0110A0E3           MOV      R1,#+1
   \   000003E4   3C008DE2           ADD      R0,SP,#+60
   \   000003E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003EC   0A00A0E1           MOV      R0,R10
   \   000003F0   71DF8DE2           ADD      SP,SP,#+452
   \   000003F4   F04FBDE8           POP      {R4-R11,LR}
   \   000003F8   1EFF2FE1           BX       LR               ;; return
   \                     ??RestoreSettings_2:
   \   000003FC   ........           DC32     NewLineStr
    265          }
    266          

   \                                 In segment CODE, align 4, keep-with-next
    267          void AlarmBasic::Check(void) {
    268              //SendData(CMD_PRO_ALARM_STATUS); // To update all the nodes
    269          }
   \                     ??Check:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    270          
    271          // This function can ONLY be called from Check() This to ensure only ONE alarm master!!

   \                                 In segment CODE, align 4, keep-with-next
    272          void AlarmBasic::UpdateAlarm(int ValueStatus) {
   \                     ??UpdateAlarm:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    273          #ifndef WIN32
    274              if ( RunningTime > PROProjectInfo::AlarmSystemStartUpDelay )
   \   00000008   14019FE5           LDR      R0,??UpdateAlarm_4  ;; ??AlarmSystemStartUpDelay
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   10119FE5           LDR      R1,??UpdateAlarm_4+0x4  ;; RunningTime
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   3E0000AA           BGE      ??UpdateAlarm_5
    275          #endif
    276              {
    277                  AlarmSema.Acquire();
   \   00000024   ........           LDR      R6,??DataTable16  ;; ??PROActiveAlarmList
   \   00000028   600086E2           ADD      R0,R6,#+96
   \   0000002C   ........           _BLF     ??Acquire,??Acquire??rA
    278                  if ( IsVisible ) {
   \   00000030   B000D4E5           LDRB     R0,[R4, #+176]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   2C00000A           BEQ      ??UpdateAlarm_6
    279                      switch ( State ) {
   \   0000003C   A41094E5           LDR      R1,[R4, #+164]
   \   00000040   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000044   020050E3           CMP      R0,#+2
   \   00000048   2800008A           BHI      ??UpdateAlarm_6
   \   0000004C   012F8FE2           ADR      R2,??UpdateAlarm_1
   \   00000050   0020D2E7           LDRB     R2,[R2, R0]
   \   00000054   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??UpdateAlarm_1:
   \   00000058   16000300           DC8      +22,+0,+3,+0
    280                      case AlActive       :
    281                          LastActiveTime = clock();
   \                     ??UpdateAlarm_7:
   \   0000005C   ........           _BLF     clock,??clock??rA
   \   00000060   C00084E5           STR      R0,[R4, #+192]
   \   00000064   210000EA           B        ??UpdateAlarm_6
    282                          break;
    283                      case AlAknowledged  :
    284                          switch ( ValueStatus ) {
   \                     ??UpdateAlarm_8:
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   020050E3           CMP      R0,#+2
   \   00000070   1E00008A           BHI      ??UpdateAlarm_6
   \   00000074   012F8FE2           ADR      R2,??UpdateAlarm_2
   \   00000078   0020D2E7           LDRB     R2,[R2, R0]
   \   0000007C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??UpdateAlarm_2:
   \   00000080   00050700           DC8      +0,+5,+7,+0
    285                          case AL_STAT_IN_NORMAL  :
    286                              RemoveAlarm();
   \                     ??UpdateAlarm_9:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   701091E5           LDR      R1,[R1, #+112]
   \   0000008C   0FE0A0E1           MOV      LR,PC
   \   00000090   11FF2FE1           BX       R1
   \   00000094   150000EA           B        ??UpdateAlarm_6
    287                              break;
    288                          case AL_STAT_IN_ALARM   :
    289                              LastActiveTime = clock();
   \                     ??UpdateAlarm_10:
   \   00000098   ........           _BLF     clock,??clock??rA
   \   0000009C   C00084E5           STR      R0,[R4, #+192]
    290                          case AL_STAT_IN_DEADBAND:
    291                              if ( !Enable ) {
   \                     ??UpdateAlarm_11:
   \   000000A0   E200D4E5           LDRB     R0,[R4, #+226]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   1000001A           BNE      ??UpdateAlarm_6
    292                                  RemoveAlarm();
   \   000000AC   A41094E5           LDR      R1,[R4, #+164]
   \   000000B0   F3FFFFEA           B        ??UpdateAlarm_9
    293                              }
    294                              break;
    295                          }
    296                          break;
    297                      case AlIdle         :
    298                          switch ( ValueStatus ) {
   \                     ??UpdateAlarm_12:
   \   000000B4   010055E3           CMP      R5,#+1
   \   000000B8   0C00001A           BNE      ??UpdateAlarm_6
    299                          case AL_STAT_IN_NORMAL  :
    300                          case AL_STAT_IN_DEADBAND:
    301                              break;
    302                          case AL_STAT_IN_ALARM   :
    303                              if ( Enable ) {
   \   000000BC   E200D4E5           LDRB     R0,[R4, #+226]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0900000A           BEQ      ??UpdateAlarm_6
    304                                  AddAlarm();
   \   000000C8   6C1091E5           LDR      R1,[R1, #+108]
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   0FE0A0E1           MOV      LR,PC
   \   000000D4   11FF2FE1           BX       R1
    305                                  if ( PROProjectInfo::AutoAcknowledge ) {
   \   000000D8   4C009FE5           LDR      R0,??UpdateAlarm_4+0x8  ;; ??AutoAcknowledge
   \   000000DC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0100000A           BEQ      ??UpdateAlarm_6
    306                                      MoveAlarmToAknowledge();
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       ??MoveAlarmToAknowledge
    307                                  }
    308                              }
    309                              break;
    310                          }
    311                          break;
    312                      }
    313                  }
    314                  switch ( ValueStatus ) {
   \                     ??UpdateAlarm_6:
   \   000000F0   020055E3           CMP      R5,#+2
   \   000000F4   0700008A           BHI      ??UpdateAlarm_13
   \   000000F8   010F8FE2           ADR      R0,??UpdateAlarm_3
   \   000000FC   0500D0E7           LDRB     R0,[R0, R5]
   \   00000100   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??UpdateAlarm_3:
   \   00000104   02000200           DC8      +2,+0,+2,+0
    315                  case AL_STAT_IN_ALARM   :
    316                      OutsideLimit = true;
   \                     ??UpdateAlarm_14:
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   000000EA           B        ??UpdateAlarm_15
    317                      break;
    318                  case AL_STAT_IN_DEADBAND:
    319                      OutsideLimit = false;
   \                     ??UpdateAlarm_16:
   \   00000110   0000A0E3           MOV      R0,#+0
   \                     ??UpdateAlarm_15:
   \   00000114   E900C4E5           STRB     R0,[R4, #+233]
    320                      break;
    321                  case AL_STAT_IN_NORMAL  :
    322                      OutsideLimit = false;
    323                      break;
    324                  }
    325                  AlarmSema.Release();
   \                     ??UpdateAlarm_13:
   \   00000118   600086E2           ADD      R0,R6,#+96
   \   0000011C   ........           _BLF     ??Release,??Release??rA
    326              }
    327          }
   \                     ??UpdateAlarm_5:
   \   00000120   ........           B        ??Subroutine61_0
   \                     ??UpdateAlarm_4:
   \   00000124   ........           DC32     ??AlarmSystemStartUpDelay
   \   00000128   ........           DC32     RunningTime
   \   0000012C   ........           DC32     ??AutoAcknowledge
    328          // This function can ONLY be called from Check() This to ensure only ONE alarm master!!

   \                                 In segment CODE, align 4, keep-with-next
    329          void AlarmBasic::AddAlarm(void) {
   \                     ??AddAlarm:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    330              // Should use a semaphore??
    331              AlarmNo    = ++CurrentAlarmNo;
   \   00000004   ........           LDR      R5,??DataTable28  ;; ??PROActiveAlarmList
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   580095E5           LDR      R0,[R5, #+88]
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   580085E5           STR      R0,[R5, #+88]
   \   0000001C   C80084E5           STR      R0,[R4, #+200]
    332              Time_Rised = time(NULL);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   ........           _BLF     time,??time??rA
   \   00000028   D00084E5           STR      R0,[R4, #+208]
    333              AlarmSilence = false;   // For Buzzer, Flash, Siren, ....
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   5C00C5E5           STRB     R0,[R5, #+92]
    334              LogAlarm(AlActive);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   E000C4E5           STRB     R0,[R4, #+224]
    335              PROActiveAlarmList.insertInOrder(this);
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     ??insertInOrder,??insertInOrder??rA
    336              SendData(CMD_PRO_ALARM_STATUS);
   \   00000048   A42094E5           LDR      R2,[R4, #+164]
   \   0000004C   B810A0E3           MOV      R1,#+184
   \   00000050   402092E5           LDR      R2,[R2, #+64]
   \   00000054   B01E81E3           ORR      R1,R1,#0xB00
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   0FE0A0E1           MOV      LR,PC
   \   00000060   12FF2FE1           BX       R2
    337              //RBMARK program error log
    338              if ( PROSystemData::LogAlarms && Master ) {
   \   00000064   ........           LDR      R0,??DataTable29  ;; ??LogAlarms
   \   00000068   ........           LDR      R1,??DataTable30  ;; Master
   \   0000006C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000070   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000074   000011E1           TST      R1,R0
   \   00000078   1700000A           BEQ      ??AddAlarm_2
    339          #ifdef S2TXU
    340                  OS_Use(&LanguageSema);
   \   0000007C   ........           LDR      R5,??DataTable31  ;; LanguageSema
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           _BLF     OS_Use,??OS_Use??rA
    341          #endif
    342                  int CLanguage = PROSystemData::CurrentLanguage;
   \   00000088   ........           LDR      R0,??DataTable32  ;; ??CurrentLanguage
   \   0000008C   006090E5           LDR      R6,[R0, #+0]
    343                  SetCurrentLanguage(L_ENGLISH);
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    344                  AnsiString tmpStr = Get_LogMessage();
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       ??Get_LogMessage
    345                  PROPrinter::Print(PROPrinter::LogPrinterId, (char *)tmpStr.c_str());
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   ........           _BLF     ??c_str,??c_str??rA
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   ........           LDR      R0,??DataTable33  ;; ??LogPrinterId
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??Print,??Print??rA
    346                  SetCurrentLanguage(CLanguage);
   \   000000BC   0600A0E1           MOV      R0,R6
   \   000000C0   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    347          #ifdef S2TXU
    348                  OS_Unuse(&LanguageSema);
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    349          #endif
    350              }
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
    351              AnPro3object::AddAlarm(this);
   \                     ??AddAlarm_2:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ??AddAlarm_1,??AddAlarm??rA
    352          }
   \   000000E4   ........           B        ?Subroutine61
    353          
    354          // This function can ONLY be called from Check() This to ensure only ONE alarm master!!

   \                                 In segment CODE, align 4, keep-with-next
    355          void AlarmBasic::RemoveAlarm(void) {
   \                     ??RemoveAlarm:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    356              Time_Disappeared = time(NULL);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           _BLF     time,??time??rA
   \   00000014   D80084E5           STR      R0,[R4, #+216]
    357              LogAlarm(AlIdle);
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   E000C4E5           STRB     R0,[R4, #+224]
    358              PROAcknowAlarmList.removeNode(this);
   \   00000020   ........           LDR      R0,??Subroutine61_1  ;; ??PROActiveAlarmList + 28
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   ........           _BLF     ??removeNode,??removeNode??rA
    359              if ( PROSystemData::LogAlarms && Master ) {
   \   0000002C   ........           LDR      R0,??DataTable29  ;; ??LogAlarms
   \   00000030   ........           LDR      R1,??DataTable30  ;; Master
   \   00000034   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000038   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000003C   000011E1           TST      R1,R0
   \   00000040   1700000A           BEQ      ??RemoveAlarm_1
    360          #ifdef S2TXU
    361                  OS_Use(&LanguageSema);
   \   00000044   ........           LDR      R5,??DataTable31  ;; LanguageSema
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     OS_Use,??OS_Use??rA
    362          #endif
    363                  int CLanguage = PROSystemData::CurrentLanguage;
   \   00000050   ........           LDR      R0,??DataTable32  ;; ??CurrentLanguage
   \   00000054   006090E5           LDR      R6,[R0, #+0]
    364                  SetCurrentLanguage(L_ENGLISH);
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    365                  AnsiString tmpStr = Get_LogMessage();
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       ??Get_LogMessage
    366                  PROPrinter::Print(PROPrinter::LogPrinterId, (char *)tmpStr.c_str());
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     ??c_str,??c_str??rA
   \   00000074   0010A0E1           MOV      R1,R0
   \   00000078   ........           LDR      R0,??DataTable33  ;; ??LogPrinterId
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   ........           _BLF     ??Print,??Print??rA
    367                  SetCurrentLanguage(CLanguage);
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    368          #ifdef S2TXU
    369                  OS_Unuse(&LanguageSema);
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    370          #endif
    371              }
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    372              SendData(CMD_PRO_ALARM_STATUS);
   \                     ??RemoveAlarm_1:
   \   000000A4   A42094E5           LDR      R2,[R4, #+164]
   \   000000A8   B810A0E3           MOV      R1,#+184
   \   000000AC   402092E5           LDR      R2,[R2, #+64]
   \   000000B0   B01E81E3           ORR      R1,R1,#0xB00
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   0FE0A0E1           MOV      LR,PC
   \   000000BC   12FF2FE1           BX       R2
    373              //RBMARK program error log
    374          }
   \   000000C0                      REQUIRE ?Subroutine61
   \   000000C0                      ;; // Fall through to label ?Subroutine61
    375          
    376          // This function can ONLY be called from Check() This to ensure only ONE alarm master!!

   \                                 In segment CODE, align 4, keep-with-next
    377          void AlarmBasic::MoveAlarmToAknowledge(void) {
   \                     ??MoveAlarmToAknowledge:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    378              AlarmSema.Acquire();
   \   00000004   ........           LDR      R5,??DataTable28  ;; ??PROActiveAlarmList
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   600085E2           ADD      R0,R5,#+96
   \   00000014   ........           _BLF     ??Acquire,??Acquire??rA
    379              if ( State != AlAknowledged ) {
   \   00000018   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   3A00000A           BEQ      ??MoveAlarmToAknowledge_1
    380                  Time_Acknowledged = time(NULL);
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   ........           _BLF     time,??time??rA
   \   0000002C   D40084E5           STR      R0,[R4, #+212]
    381                  LogAlarm(AlAknowledged);
   \   00000030   0200A0E3           MOV      R0,#+2
   \   00000034   E000C4E5           STRB     R0,[R4, #+224]
    382          
    383          
    384                  PROActiveAlarmList.removeNode(this);
   \   00000038   0410A0E1           MOV      R1,R4
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           _BLF     ??removeNode,??removeNode??rA
    385          #ifdef S2TXU
    386                  switch ( CurrentDeviceId ) {
   \   00000044   F0009FE5           LDR      R0,??MoveAlarmToAknowledge_2  ;; CurrentDeviceId
   \   00000048   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000004C   300050E3           CMP      R0,#+48
   \   00000050   0700001A           BNE      ??MoveAlarmToAknowledge_3
    387                  case DEVICE_TCU:    // TCU
    388                      break;
    389                  case DEVICE_TDU:    // TDU
    390                      if ( OS_IsTask(&aTCB[4]) ) {
   \   00000054   E4709FE5           LDR      R7,??MoveAlarmToAknowledge_2+0x4  ;; aTCB
   \   00000058   406FA0E3           MOV      R6,#+256
   \   0000005C   070086E0           ADD      R0,R6,R7
   \   00000060   ........           _BLF     OS_IsTask,??OS_IsTask??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??MoveAlarmToAknowledge_3
    391                          OS_WakeTask(&aTCB[4]);
   \   0000006C   070086E0           ADD      R0,R6,R7
   \   00000070   ........           _BLF     OS_WakeTask,??OS_WakeTask??rA
    392                      }
    393                      break;
    394                  }
    395          #endif
    396                  bool NewAlarmAck = PROAcknowAlarmList.insertInOrderIfUnique(this);
   \                     ??MoveAlarmToAknowledge_3:
   \   00000074   0410A0E1           MOV      R1,R4
   \   00000078   1C0085E2           ADD      R0,R5,#+28
   \   0000007C   ........           _BLF     ??insertInOrderIfUnique,??insertInOrderIfUnique??rA
    397                  if ( NewAlarmAck ) {
    398                      if ( PROSystemData::LogAlarms && Master ) {
   \   00000080   ........           LDR      R1,??DataTable29  ;; ??LogAlarms
   \   00000084   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000088   000001E0           AND      R0,R1,R0
   \   0000008C   ........           LDR      R1,??DataTable30  ;; Master
   \   00000090   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000094   000011E1           TST      R1,R0
   \   00000098   1700000A           BEQ      ??MoveAlarmToAknowledge_4
    399          #ifdef S2TXU
    400                          OS_Use(&LanguageSema);
   \   0000009C   ........           LDR      R6,??DataTable31  ;; LanguageSema
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     OS_Use,??OS_Use??rA
    401          #endif
    402                          int CLanguage = PROSystemData::CurrentLanguage;
   \   000000A8   ........           LDR      R0,??DataTable32  ;; ??CurrentLanguage
   \   000000AC   007090E5           LDR      R7,[R0, #+0]
    403                          SetCurrentLanguage(L_ENGLISH);
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    404                          AnsiString tmpStr = Get_LogMessage();
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       ??Get_LogMessage
    405                          PROPrinter::Print(PROPrinter::LogPrinterId, (char *)tmpStr.c_str());
   \   000000C4   0D00A0E1           MOV      R0,SP
   \   000000C8   ........           _BLF     ??c_str,??c_str??rA
   \   000000CC   0010A0E1           MOV      R1,R0
   \   000000D0   ........           LDR      R0,??DataTable33  ;; ??LogPrinterId
   \   000000D4   000090E5           LDR      R0,[R0, #+0]
   \   000000D8   ........           _BLF     ??Print,??Print??rA
    406                          SetCurrentLanguage(CLanguage);
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   ........           _BLF     ??SetCurrentLanguage,??SetCurrentLanguage??rA
    407          #ifdef S2TXU
    408                          OS_Unuse(&LanguageSema);
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    409          #endif
    410                      }
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
    411                  }
    412                  if ( PROActiveAlarmList.isEmpty() )    AlarmSilence = true; // For Buzzer, Flash, Siren, ....
   \                     ??MoveAlarmToAknowledge_4:
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0100A013           MOVNE    R0,#+1
   \   0000010C   5C00C515           STRBNE   R0,[R5, #+92]
    413                                                                              //RBMARK program error log
    414          
    415              }
    416              // Originally sent only if alarm state was active. Changed to Send regardless.
    417              // This is so that if an alarm message was not received on a TDU or ANWin, the
    418              // user can re-aknowledge and get proper update of the alarm
    419              SendData(CMD_PRO_ALARM_STATUS);
   \                     ??MoveAlarmToAknowledge_1:
   \   00000110   A42094E5           LDR      R2,[R4, #+164]
   \   00000114   B810A0E3           MOV      R1,#+184
   \   00000118   402092E5           LDR      R2,[R2, #+64]
   \   0000011C   B01E81E3           ORR      R1,R1,#0xB00
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   0FE0A0E1           MOV      LR,PC
   \   00000128   12FF2FE1           BX       R2
    420              AlarmSema.Release();
   \   0000012C   600085E2           ADD      R0,R5,#+96
   \   00000130   ........           _BLF     ??Release,??Release??rA
    421          }
   \   00000134   1CD08DE2           ADD      SP,SP,#+28
   \   00000138   ........           B        ?Subroutine64
   \                     ??MoveAlarmToAknowledge_2:
   \   0000013C   ........           DC32     CurrentDeviceId
   \   00000140   ........           DC32     aTCB
    422          

   \                                 In segment CODE, align 4, keep-with-next
    423          AnsiString AlarmBasic::Get_Message(void) {
   \                     ??Get_Message:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    424              return (FindDictionaryWord(MessageKey));
   \   00000008   B81090E5           LDR      R1,[R0, #+184]
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000014   ........           B        ??Subroutine59_0
    425          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine59:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0130A0E1           MOV      R3,R1
   \   00000008   D01090E5           LDR      R1,[R0, #+208]
   \   0000000C   0300A0E1           MOV      R0,R3
   \   00000010   ........           _BLF     ??TSNTime,??TSNTime??rA
   \                     ??Subroutine59_0:
   \   00000014   0040BDE8           POP      {LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
    426          

   \                                 In segment CODE, align 4, keep-with-next
    427          AnsiString AlarmBasic::Get_TPCMessage(void) {
   \                     ??Get_TPCMessage:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    428              return (FindDictionaryWord(TPCMessageKey));
   \   00000008   B41090E5           LDR      R1,[R0, #+180]
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000014   ........           B        ??Subroutine59_0
    429          }
    430          

   \                                 In segment CODE, align 4, keep-with-next
    431          AnsiString AlarmBasic::Get_CompleteMessage(void) {
   \                     ??Get_CompleteMessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   54D04DE2           SUB      SP,SP,#+84
   \   00000008   0040A0E1           MOV      R4,R0
    432              if ( PROPointer )   return (PROPointer->Name + " " + Get_Message());
   \   0000000C   C40094E5           LDR      R0,[R4, #+196]
   \   00000010   A42094E5           LDR      R2,[R4, #+164]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1D00000A           BEQ      ??Get_CompleteMessage_1
   \   00000020   682092E5           LDR      R2,[R2, #+104]
   \   00000024   38108DE2           ADD      R1,SP,#+56
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   0FE0A0E1           MOV      LR,PC
   \   00000030   12FF2FE1           BX       R2
   \   00000034   C40094E5           LDR      R0,[R4, #+196]
   \   00000038   1C2F8FE2           ADR      R2,??Get_CompleteMessage_2  ;; " "
   \   0000003C   441080E2           ADD      R1,R0,#+68
   \   00000040   1C008DE2           ADD      R0,SP,#+28
   \   00000044   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000048   38208DE2           ADD      R2,SP,#+56
   \   0000004C   1C108DE2           ADD      R1,SP,#+28
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   38008DE2           ADD      R0,SP,#+56
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   1C008DE2           ADD      R0,SP,#+28
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   030000EA           B        ??Get_CompleteMessage_3
    433              else return (Get_Message());
   \                     ??Get_CompleteMessage_1:
   \   00000098   682092E5           LDR      R2,[R2, #+104]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   0FE0A0E1           MOV      LR,PC
   \   000000A4   12FF2FE1           BX       R2
   \                     ??Get_CompleteMessage_3:
   \   000000A8   54D08DE2           ADD      SP,SP,#+84
   \   000000AC   ........           B        ??Subroutine62_0
   \                     ??Get_CompleteMessage_2:
   \   000000B0   20000000           DC8      " ",+0,+0
    434          }
    435          

   \                                 In segment CODE, align 4, keep-with-next
    436          AnsiString AlarmBasic::Get_LogMessage(void) {
   \                     ??Get_LogMessage:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   B6DF4DE2           SUB      SP,SP,#+728
   \   00000008   0050A0E1           MOV      R5,R0
    437              AnsiString AlarmNoStr(AlarmNo);
    438              AnsiString UnitStr;
    439              AnsiString Location  = Get_Location();
    440              AnsiString Type      = Get_Message();
    441              AnsiString Val       = LibGetValue(SVT_AL_VALUE, this, &UnitStr) + SpaceStr + UnitStr;
   \   0000000C   ........           LDR      R6,??DataTable46  ;; SpaceStr
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   C81095E5           LDR      R1,[R5, #+200]
   \   00000018   8C0F8DE2           ADD      R0,SP,#+560
   \   0000001C   ........           _BLF     ??AnsiString_4,??AnsiString??rA_4
   \   00000020   930F8DE2           ADD      R0,SP,#+588
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000028   A42095E5           LDR      R2,[R5, #+164]
   \   0000002C   9A1F8DE2           ADD      R1,SP,#+616
   \   00000030   602092E5           LDR      R2,[R2, #+96]
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   0FE0A0E1           MOV      LR,PC
   \   0000003C   12FF2FE1           BX       R2
   \   00000040   A42095E5           LDR      R2,[R5, #+164]
   \   00000044   A11F8DE2           ADD      R1,SP,#+644
   \   00000048   682092E5           LDR      R2,[R2, #+104]
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   12FF2FE1           BX       R2
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   943F8DE2           ADD      R3,SP,#+592
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   3310A0E3           MOV      R1,#+51
   \   0000006C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000070   400F8DE2           ADD      R0,SP,#+256
   \   00000074   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000078   0620A0E1           MOV      R2,R6
   \   0000007C   401F8DE2           ADD      R1,SP,#+256
   \   00000080   E4008DE2           ADD      R0,SP,#+228
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   942F8DE2           ADD      R2,SP,#+592
   \   0000008C   E4108DE2           ADD      R1,SP,#+228
   \   00000090   C8008DE2           ADD      R0,SP,#+200
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   C8108DE2           ADD      R1,SP,#+200
   \   0000009C   A90F8DE2           ADD      R0,SP,#+676
   \   000000A0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   C8008DE2           ADD      R0,SP,#+200
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   E4008DE2           ADD      R0,SP,#+228
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   400F8DE2           ADD      R0,SP,#+256
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    442              AnsiString MsgStr    = Location + SpaceStr + Type + SpaceStr;
   \   000000D4   0620A0E1           MOV      R2,R6
   \   000000D8   9B1F8DE2           ADD      R1,SP,#+620
   \   000000DC   550F8DE2           ADD      R0,SP,#+340
   \   000000E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E4   A22F8DE2           ADD      R2,SP,#+648
   \   000000E8   551F8DE2           ADD      R1,SP,#+340
   \   000000EC   4E0F8DE2           ADD      R0,SP,#+312
   \   000000F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F4   0620A0E1           MOV      R2,R6
   \   000000F8   4E1F8DE2           ADD      R1,SP,#+312
   \   000000FC   470F8DE2           ADD      R0,SP,#+284
   \   00000100   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000104   471F8DE2           ADD      R1,SP,#+284
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   470F8DE2           ADD      R0,SP,#+284
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   4E0F8DE2           ADD      R0,SP,#+312
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   550F8DE2           ADD      R0,SP,#+340
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
    443              switch ( State ) {
   \   00000140   E000D5E5           LDRB     R0,[R5, #+224]
   \   00000144   ........           LDR      R2,??DataTable47  ;; `?<Constant "%d %b %y %T">`
   \   00000148   ........           ADR      R7,??DataTable34  ;; "]:"
   \   0000014C   04D08DE2           ADD      SP,SP,#+4
   \   00000150   020050E3           CMP      R0,#+2
   \   00000154   8400008A           BHI      ??Get_LogMessage_2
   \   00000158   011F8FE2           ADR      R1,??Get_LogMessage_1
   \   0000015C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000160   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??Get_LogMessage_1:
   \   00000164   00094500           DC8      +0,+9,+69,+0
    444              case AlIdle       :
    445                  {
    446                      AnsiString DisApp    = GetDisappearedTime("%d %b %y %T");
   \                     ??Get_LogMessage_3:
   \   00000168   8C108DE2           ADD      R1,SP,#+140
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   ........           BL       ??GetDisappearedTime_1
    447                      MsgStr  = FindDictionaryWord(L_WORD493) + "  [" + DisApp + "]:" + MsgStr;
   \   00000174   ED10A0E3           MOV      R1,#+237
   \   00000178   401F81E3           ORR      R1,R1,#0x100
   \   0000017C   70008DE2           ADD      R0,SP,#+112
   \   00000180   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000184   D32F8FE2           ADR      R2,??Get_LogMessage_4  ;; "  ["
   \   00000188   430000EA           B        ??Get_LogMessage_5
    448                  }
    449                  break;
    450              case AlActive     :
    451                  {
    452                      AnsiString Rised     = GetRisedTime("%d %b %y %T");
   \                     ??Get_LogMessage_6:
   \   0000018C   A8108DE2           ADD      R1,SP,#+168
   \   00000190   0500A0E1           MOV      R0,R5
   \   00000194   ........           BL       ??GetRisedTime_1
    453                      MsgStr = FindDictionaryWord(L_WORD494) + "[" + Rised + "]:" + MsgStr;
   \   00000198   EE10A0E3           MOV      R1,#+238
   \   0000019C   401F81E3           ORR      R1,R1,#0x100
   \   000001A0   0D00A0E1           MOV      R0,SP
   \   000001A4   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000001A8   ........           ADR      R2,??DataTable35  ;; "["
   \   000001AC   0D10A0E1           MOV      R1,SP
   \   000001B0   1C008DE2           ADD      R0,SP,#+28
   \   000001B4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000001B8   A8208DE2           ADD      R2,SP,#+168
   \   000001BC   1C108DE2           ADD      R1,SP,#+28
   \   000001C0   38008DE2           ADD      R0,SP,#+56
   \   000001C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001C8   0720A0E1           MOV      R2,R7
   \   000001CC   38108DE2           ADD      R1,SP,#+56
   \   000001D0   54008DE2           ADD      R0,SP,#+84
   \   000001D4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000001D8   0420A0E1           MOV      R2,R4
   \   000001DC   54108DE2           ADD      R1,SP,#+84
   \   000001E0   70008DE2           ADD      R0,SP,#+112
   \   000001E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001E8   70108DE2           ADD      R1,SP,#+112
   \   000001EC   8C008DE2           ADD      R0,SP,#+140
   \   000001F0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000001F4   0010A0E1           MOV      R1,R0
   \   000001F8   ........           LDR      R0,??DataTable42  ;; ??npos
   \   000001FC   0020A0E3           MOV      R2,#+0
   \   00000200   003090E5           LDR      R3,[R0, #+0]
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           _BLF     ??assign,??assign??rA
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   0110A0E3           MOV      R1,#+1
   \   00000214   8C008DE2           ADD      R0,SP,#+140
   \   00000218   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0110A0E3           MOV      R1,#+1
   \   00000224   70008DE2           ADD      R0,SP,#+112
   \   00000228   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   0110A0E3           MOV      R1,#+1
   \   00000234   54008DE2           ADD      R0,SP,#+84
   \   00000238   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   38008DE2           ADD      R0,SP,#+56
   \   00000248   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   1C008DE2           ADD      R0,SP,#+28
   \   00000258   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   0D00A0E1           MOV      R0,SP
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
    454                  }
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   A8008DE2           ADD      R0,SP,#+168
   \   00000278   3A0000EA           B        ??Get_LogMessage_7
    455                  break;
    456              case AlAknowledged:
    457                  {
    458                      AnsiString Reset     = GetResetTime("%d %b %y %T");
   \                     ??Get_LogMessage_8:
   \   0000027C   8C108DE2           ADD      R1,SP,#+140
   \   00000280   0500A0E1           MOV      R0,R5
   \   00000284   ........           BL       ??GetResetTime_1
    459                      MsgStr = FindDictionaryWord(L_WORD495) + " [" + Reset + "]:" + MsgStr;
   \   00000288   EF10A0E3           MOV      R1,#+239
   \   0000028C   401F81E3           ORR      R1,R1,#0x100
   \   00000290   70008DE2           ADD      R0,SP,#+112
   \   00000294   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000298   8F2F8FE2           ADR      R2,??Get_LogMessage_4+0x4  ;; " ["
   \                     ??Get_LogMessage_5:
   \   0000029C   70108DE2           ADD      R1,SP,#+112
   \   000002A0   54008DE2           ADD      R0,SP,#+84
   \   000002A4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002A8   8C208DE2           ADD      R2,SP,#+140
   \   000002AC   54108DE2           ADD      R1,SP,#+84
   \   000002B0   38008DE2           ADD      R0,SP,#+56
   \   000002B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002B8   0720A0E1           MOV      R2,R7
   \   000002BC   38108DE2           ADD      R1,SP,#+56
   \   000002C0   1C008DE2           ADD      R0,SP,#+28
   \   000002C4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002C8   0420A0E1           MOV      R2,R4
   \   000002CC   1C108DE2           ADD      R1,SP,#+28
   \   000002D0   0D00A0E1           MOV      R0,SP
   \   000002D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002D8   0D10A0E1           MOV      R1,SP
   \   000002DC   A8008DE2           ADD      R0,SP,#+168
   \   000002E0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000002E4   ........           LDR      R1,??DataTable42  ;; ??npos
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   003091E5           LDR      R3,[R1, #+0]
   \   000002F0   0010A0E1           MOV      R1,R0
   \   000002F4   0400A0E1           MOV      R0,R4
   \   000002F8   ........           _BLF     ??assign,??assign??rA
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   A8008DE2           ADD      R0,SP,#+168
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   0D00A0E1           MOV      R0,SP
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   1C008DE2           ADD      R0,SP,#+28
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   38008DE2           ADD      R0,SP,#+56
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   54008DE2           ADD      R0,SP,#+84
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   70008DE2           ADD      R0,SP,#+112
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
    460                  }
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   8C008DE2           ADD      R0,SP,#+140
   \                     ??Get_LogMessage_7:
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
    461                  break;
    462              case AlBlocked  :
    463                  break;
    464              }
    465              MsgStr = AlarmNoStr + ":" + MsgStr + SpaceStr + FindDictionaryWord(L_WORD497) + Val + CrLfStr;  //Lim: Val:
   \                     ??Get_LogMessage_2:
   \   0000036C   F110A0E3           MOV      R1,#+241
   \   00000370   401F81E3           ORR      R1,R1,#0x100
   \   00000374   850F8DE2           ADD      R0,SP,#+532
   \   00000378   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000037C   ........           ADR      R2,??DataTable36  ;; ":"
   \   00000380   8C1F8DE2           ADD      R1,SP,#+560
   \   00000384   7E0F8DE2           ADD      R0,SP,#+504
   \   00000388   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000038C   0420A0E1           MOV      R2,R4
   \   00000390   7E1F8DE2           ADD      R1,SP,#+504
   \   00000394   770F8DE2           ADD      R0,SP,#+476
   \   00000398   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000039C   0620A0E1           MOV      R2,R6
   \   000003A0   771F8DE2           ADD      R1,SP,#+476
   \   000003A4   700F8DE2           ADD      R0,SP,#+448
   \   000003A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003AC   852F8DE2           ADD      R2,SP,#+532
   \   000003B0   701F8DE2           ADD      R1,SP,#+448
   \   000003B4   690F8DE2           ADD      R0,SP,#+420
   \   000003B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003BC   A82F8DE2           ADD      R2,SP,#+672
   \   000003C0   691F8DE2           ADD      R1,SP,#+420
   \   000003C4   620F8DE2           ADD      R0,SP,#+392
   \   000003C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003CC   ........           LDR      R2,??DataTable49  ;; CrLfStr
   \   000003D0   621F8DE2           ADD      R1,SP,#+392
   \   000003D4   5B0F8DE2           ADD      R0,SP,#+364
   \   000003D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003DC   5B1F8DE2           ADD      R1,SP,#+364
   \   000003E0   AF0F8DE2           ADD      R0,SP,#+700
   \   000003E4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000003E8   ........           LDR      R1,??DataTable42  ;; ??npos
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   003091E5           LDR      R3,[R1, #+0]
   \   000003F4   0010A0E1           MOV      R1,R0
   \   000003F8   0400A0E1           MOV      R0,R4
   \   000003FC   ........           _BLF     ??assign,??assign??rA
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0110A0E3           MOV      R1,#+1
   \   00000408   AF0F8DE2           ADD      R0,SP,#+700
   \   0000040C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000410   0020A0E3           MOV      R2,#+0
   \   00000414   0110A0E3           MOV      R1,#+1
   \   00000418   5B0F8DE2           ADD      R0,SP,#+364
   \   0000041C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000420   0020A0E3           MOV      R2,#+0
   \   00000424   0110A0E3           MOV      R1,#+1
   \   00000428   620F8DE2           ADD      R0,SP,#+392
   \   0000042C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000430   0020A0E3           MOV      R2,#+0
   \   00000434   0110A0E3           MOV      R1,#+1
   \   00000438   690F8DE2           ADD      R0,SP,#+420
   \   0000043C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   0110A0E3           MOV      R1,#+1
   \   00000448   850F8DE2           ADD      R0,SP,#+532
   \   0000044C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000450   0020A0E3           MOV      R2,#+0
   \   00000454   0110A0E3           MOV      R1,#+1
   \   00000458   700F8DE2           ADD      R0,SP,#+448
   \   0000045C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   0110A0E3           MOV      R1,#+1
   \   00000468   770F8DE2           ADD      R0,SP,#+476
   \   0000046C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000470   0020A0E3           MOV      R2,#+0
   \   00000474   0110A0E3           MOV      R1,#+1
   \   00000478   7E0F8DE2           ADD      R0,SP,#+504
   \   0000047C   ........           _BLF     ??_Tidy,??_Tidy??rA
    466              return (MsgStr);
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   0110A0E3           MOV      R1,#+1
   \   00000488   A80F8DE2           ADD      R0,SP,#+672
   \   0000048C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0110A0E3           MOV      R1,#+1
   \   00000498   A10F8DE2           ADD      R0,SP,#+644
   \   0000049C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   0110A0E3           MOV      R1,#+1
   \   000004A8   9A0F8DE2           ADD      R0,SP,#+616
   \   000004AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0110A0E3           MOV      R1,#+1
   \   000004B8   930F8DE2           ADD      R0,SP,#+588
   \   000004BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C0   0020A0E3           MOV      R2,#+0
   \   000004C4   0110A0E3           MOV      R1,#+1
   \   000004C8   8C0F8DE2           ADD      R0,SP,#+560
   \   000004CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D0   B6DF8DE2           ADD      SP,SP,#+728
   \   000004D4   ........           B        ?Subroutine64
   \                     ??Get_LogMessage_4:
   \   000004D8   20205B00           DC8      "  ["
   \   000004DC   205B0000           DC8      " [",+0
    467          }
    468          

   \                                 In segment CODE, align 4, keep-with-next
    469          AnsiString AlarmBasic::Get_ANPro3Message(void) {
   \                     ??Get_ANPro3Message:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   B6DF4DE2           SUB      SP,SP,#+728
   \   00000008   0050A0E1           MOV      R5,R0
    470              AnsiString AlarmNoStr(AlarmNo);
    471              AnsiString UnitStr;
    472              AnsiString Location  = Get_Location();
    473              AnsiString Type      = Get_Message();
    474              AnsiString Val       = LibGetValue(SVT_AL_VALUE, this, &UnitStr) + SpaceStr + UnitStr;
   \   0000000C   ........           LDR      R6,??DataTable46  ;; SpaceStr
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   C81095E5           LDR      R1,[R5, #+200]
   \   00000018   7E0F8DE2           ADD      R0,SP,#+504
   \   0000001C   ........           _BLF     ??AnsiString_4,??AnsiString??rA_4
   \   00000020   850F8DE2           ADD      R0,SP,#+532
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000028   A42095E5           LDR      R2,[R5, #+164]
   \   0000002C   8C1F8DE2           ADD      R1,SP,#+560
   \   00000030   602092E5           LDR      R2,[R2, #+96]
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   0FE0A0E1           MOV      LR,PC
   \   0000003C   12FF2FE1           BX       R2
   \   00000040   A42095E5           LDR      R2,[R5, #+164]
   \   00000044   931F8DE2           ADD      R1,SP,#+588
   \   00000048   682092E5           LDR      R2,[R2, #+104]
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   12FF2FE1           BX       R2
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   863F8DE2           ADD      R3,SP,#+536
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   3310A0E3           MOV      R1,#+51
   \   0000006C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000070   3C008DE2           ADD      R0,SP,#+60
   \   00000074   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000078   0620A0E1           MOV      R2,R6
   \   0000007C   3C108DE2           ADD      R1,SP,#+60
   \   00000080   20008DE2           ADD      R0,SP,#+32
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   862F8DE2           ADD      R2,SP,#+536
   \   0000008C   20108DE2           ADD      R1,SP,#+32
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   04108DE2           ADD      R1,SP,#+4
   \   0000009C   9B0F8DE2           ADD      R0,SP,#+620
   \   000000A0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   20008DE2           ADD      R0,SP,#+32
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   3C008DE2           ADD      R0,SP,#+60
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    475              AnsiString MsgStr    = Location + SpaceStr + Type + SpaceStr;
   \   000000D4   0620A0E1           MOV      R2,R6
   \   000000D8   8D1F8DE2           ADD      R1,SP,#+564
   \   000000DC   90008DE2           ADD      R0,SP,#+144
   \   000000E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E4   942F8DE2           ADD      R2,SP,#+592
   \   000000E8   90108DE2           ADD      R1,SP,#+144
   \   000000EC   74008DE2           ADD      R0,SP,#+116
   \   000000F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000F4   0620A0E1           MOV      R2,R6
   \   000000F8   74108DE2           ADD      R1,SP,#+116
   \   000000FC   58008DE2           ADD      R0,SP,#+88
   \   00000100   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000104   58108DE2           ADD      R1,SP,#+88
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   58008DE2           ADD      R0,SP,#+88
   \   0000011C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   74008DE2           ADD      R0,SP,#+116
   \   0000012C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   0110A0E3           MOV      R1,#+1
   \   00000138   90008DE2           ADD      R0,SP,#+144
   \   0000013C   ........           _BLF     ??_Tidy,??_Tidy??rA
    476              AnsiString Rised     = GetRisedTime("%d %b %y %T");
   \   00000140   ........           LDR      R2,??DataTable47  ;; `?<Constant "%d %b %y %T">`
   \   00000144   A21F8DE2           ADD      R1,SP,#+648
   \   00000148   0500A0E1           MOV      R0,R5
   \   0000014C   ........           BL       ??GetRisedTime_1
    477              MsgStr = FindDictionaryWord(L_WORD494) + "[" + Rised + "]:" + MsgStr;
   \   00000150   EE10A0E3           MOV      R1,#+238
   \   00000154   401F81E3           ORR      R1,R1,#0x100
   \   00000158   470F8DE2           ADD      R0,SP,#+284
   \   0000015C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000160   ........           ADR      R2,??DataTable43  ;; "["
   \   00000164   471F8DE2           ADD      R1,SP,#+284
   \   00000168   400F8DE2           ADD      R0,SP,#+256
   \   0000016C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000170   A22F8DE2           ADD      R2,SP,#+648
   \   00000174   401F8DE2           ADD      R1,SP,#+256
   \   00000178   E4008DE2           ADD      R0,SP,#+228
   \   0000017C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000180   ........           ADR      R2,??DataTable44  ;; "]:"
   \   00000184   E4108DE2           ADD      R1,SP,#+228
   \   00000188   C8008DE2           ADD      R0,SP,#+200
   \   0000018C   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000190   0420A0E1           MOV      R2,R4
   \   00000194   C8108DE2           ADD      R1,SP,#+200
   \   00000198   AC008DE2           ADD      R0,SP,#+172
   \   0000019C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001A0   AC108DE2           ADD      R1,SP,#+172
   \   000001A4   A90F8DE2           ADD      R0,SP,#+676
   \   000001A8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000001AC   ........           LDR      R1,??DataTable73  ;; ??npos
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   005091E5           LDR      R5,[R1, #+0]
   \   000001B8   0010A0E1           MOV      R1,R0
   \   000001BC   0530A0E1           MOV      R3,R5
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   ........           _BLF     ??assign,??assign??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   A90F8DE2           ADD      R0,SP,#+676
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   AC008DE2           ADD      R0,SP,#+172
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   C8008DE2           ADD      R0,SP,#+200
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   E4008DE2           ADD      R0,SP,#+228
   \   00000204   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000208   0020A0E3           MOV      R2,#+0
   \   0000020C   0110A0E3           MOV      R1,#+1
   \   00000210   400F8DE2           ADD      R0,SP,#+256
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   470F8DE2           ADD      R0,SP,#+284
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
    478              MsgStr = AlarmNoStr + ":" + MsgStr + SpaceStr + FindDictionaryWord(L_WORD497) + Val + CrLfStr;  //Lim: Val:
   \   00000228   F110A0E3           MOV      R1,#+241
   \   0000022C   401F81E3           ORR      R1,R1,#0x100
   \   00000230   780F8DE2           ADD      R0,SP,#+480
   \   00000234   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000238   ........           ADR      R2,??DataTable45  ;; ":"
   \   0000023C   7F1F8DE2           ADD      R1,SP,#+508
   \   00000240   710F8DE2           ADD      R0,SP,#+452
   \   00000244   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000248   0420A0E1           MOV      R2,R4
   \   0000024C   711F8DE2           ADD      R1,SP,#+452
   \   00000250   6A0F8DE2           ADD      R0,SP,#+424
   \   00000254   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000258   0620A0E1           MOV      R2,R6
   \   0000025C   6A1F8DE2           ADD      R1,SP,#+424
   \   00000260   630F8DE2           ADD      R0,SP,#+396
   \   00000264   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000268   782F8DE2           ADD      R2,SP,#+480
   \   0000026C   631F8DE2           ADD      R1,SP,#+396
   \   00000270   5C0F8DE2           ADD      R0,SP,#+368
   \   00000274   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000278   9B2F8DE2           ADD      R2,SP,#+620
   \   0000027C   5C1F8DE2           ADD      R1,SP,#+368
   \   00000280   550F8DE2           ADD      R0,SP,#+340
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   ........           LDR      R2,??DataTable49  ;; CrLfStr
   \   0000028C   551F8DE2           ADD      R1,SP,#+340
   \   00000290   4E0F8DE2           ADD      R0,SP,#+312
   \   00000294   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000298   4E1F8DE2           ADD      R1,SP,#+312
   \   0000029C   B00F8DE2           ADD      R0,SP,#+704
   \   000002A0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000002A4   0010A0E1           MOV      R1,R0
   \   000002A8   0530A0E1           MOV      R3,R5
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   ........           _BLF     ??assign,??assign??rA
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   B00F8DE2           ADD      R0,SP,#+704
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   4E0F8DE2           ADD      R0,SP,#+312
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D8   0020A0E3           MOV      R2,#+0
   \   000002DC   0110A0E3           MOV      R1,#+1
   \   000002E0   550F8DE2           ADD      R0,SP,#+340
   \   000002E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   5C0F8DE2           ADD      R0,SP,#+368
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   780F8DE2           ADD      R0,SP,#+480
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0110A0E3           MOV      R1,#+1
   \   00000310   630F8DE2           ADD      R0,SP,#+396
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   6A0F8DE2           ADD      R0,SP,#+424
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   710F8DE2           ADD      R0,SP,#+452
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
    479              return (MsgStr);
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   A20F8DE2           ADD      R0,SP,#+648
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   0020A0E3           MOV      R2,#+0
   \   0000034C   0110A0E3           MOV      R1,#+1
   \   00000350   9B0F8DE2           ADD      R0,SP,#+620
   \   00000354   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000358   0020A0E3           MOV      R2,#+0
   \   0000035C   0110A0E3           MOV      R1,#+1
   \   00000360   940F8DE2           ADD      R0,SP,#+592
   \   00000364   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   0110A0E3           MOV      R1,#+1
   \   00000370   8D0F8DE2           ADD      R0,SP,#+564
   \   00000374   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000378   0020A0E3           MOV      R2,#+0
   \   0000037C   0110A0E3           MOV      R1,#+1
   \   00000380   860F8DE2           ADD      R0,SP,#+536
   \   00000384   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000388   0020A0E3           MOV      R2,#+0
   \   0000038C   0110A0E3           MOV      R1,#+1
   \   00000390   7F0F8DE2           ADD      R0,SP,#+508
   \   00000394   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000398   B7DF8DE2           ADD      SP,SP,#+732
   \   0000039C   ........           B        ??Subroutine61_0
    480          }
    481          
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          AnsiString AlarmBasic::Get_Location(void) {
   \                     ??Get_Location:
   \   00000000   00402DE9           PUSH     {LR}
    484              if ( PROPointer )   return (PROPointer->GetName());
   \   00000004   C43090E5           LDR      R3,[R0, #+196]
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   000053E3           CMP      R3,#+0
   \   00000010   0500000A           BEQ      ??Get_Location_1
   \   00000014   A42093E5           LDR      R2,[R3, #+164]
   \   00000018   0300A0E1           MOV      R0,R3
   \   0000001C   182092E5           LDR      R2,[R2, #+24]
   \   00000020   0FE0A0E1           MOV      LR,PC
   \   00000024   12FF2FE1           BX       R2
   \   00000028   030000EA           B        ??Get_Location_2
    485              else return (FindDictionaryWord(L_WORD498)); //Ptr Error
   \                     ??Get_Location_1:
   \   0000002C   F210A0E3           MOV      R1,#+242
   \   00000030   401F81E3           ORR      R1,R1,#0x100
   \   00000034   0200A0E1           MOV      R0,R2
   \   00000038   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \                     ??Get_Location_2:
   \   0000003C   ........           B        ??Subroutine59_0
    486          }
    487          

   \                                 In segment CODE, align 4, keep-with-next
    488          AnsiString AlarmBasic::GetRisedTime(void) {
    489              return (TSNTime(Time_Rised, "%H:%M"));
   \                     ??GetRisedTime:
   \   00000000   ........           LDR      R2,??DataTable51  ;; `?<Constant "%H:%M">`
   \   00000004   ........           B        ?Subroutine59
    490          }
    491          

   \                                 In segment CODE, align 4, keep-with-next
    492          AnsiString AlarmBasic::GetRisedTime(char *FormatStr) {
   \                     ??GetRisedTime_1:
   \   00000000                      REQUIRE ?Subroutine59
   \   00000000                      ;; // Fall through to label ?Subroutine59
    493              return (TSNTime(Time_Rised, (const char *)FormatStr));
    494          }
    495          

   \                                 In segment CODE, align 4, keep-with-next
    496          AnsiString AlarmBasic::GetResetTime(void) {
   \                     ??GetResetTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    497              AnsiString tmpStr;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    498              if ( State == AlAknowledged ) {
   \   00000018   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   0D00001A           BNE      ??GetResetTime_2
    499                  tmpStr = TSNTime(Time_Acknowledged, "%H:%M");
   \   00000024   ........           LDR      R2,??DataTable51  ;; `?<Constant "%H:%M">`
   \   00000028   D41094E5           LDR      R1,[R4, #+212]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     ??TSNTime,??TSNTime??rA
   \   00000034   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??_Tidy,??_Tidy??rA
    500              }
    501              return (tmpStr);
   \                     ??GetResetTime_2:
   \   0000005C   ........           B        ?Subroutine62
    502          }
    503          

   \                                 In segment CODE, align 4, keep-with-next
    504          AnsiString AlarmBasic::GetResetTime(char *FormatStr) {
   \                     ??GetResetTime_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    505              AnsiString tmpStr;
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    506              if ( State == AlAknowledged ) {
   \   0000001C   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000020   020050E3           CMP      R0,#+2
   \   00000024   0D00001A           BNE      ??GetResetTime_3
    507                  tmpStr = TSNTime(Time_Acknowledged, (const char *)FormatStr);
   \   00000028   D41094E5           LDR      R1,[R4, #+212]
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??TSNTime,??TSNTime??rA
   \   00000038   ........           LDR      R0,??DataTable73  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
    508              }
    509              return (tmpStr);
   \                     ??GetResetTime_3:
   \   00000060   ........           B        ?Subroutine61
    510          }
    511          

   \                                 In segment CODE, align 4, keep-with-next
    512          AnsiString AlarmBasic::GetDisappearedTime(void) {
   \                     ??GetDisappearedTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    513              AnsiString tmpStr;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    514              if ( State == AlIdle ) {
   \   00000018   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0D00001A           BNE      ??GetDisappearedTime_2
    515                  tmpStr = TSNTime(Time_Disappeared, "%H:%M:%S");
   \   00000024   ........           LDR      R2,??Subroutine62_1  ;; `?<Constant "%d %b %H:%M:%S">` + 64
   \   00000028   D81094E5           LDR      R1,[R4, #+216]
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     ??TSNTime,??TSNTime??rA
   \   00000034   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??_Tidy,??_Tidy??rA
    516              }
    517              return (tmpStr);
   \                     ??GetDisappearedTime_2:
   \   0000005C                      REQUIRE ?Subroutine62
   \   0000005C                      ;; // Fall through to label ?Subroutine62
    518          }
    519          

   \                                 In segment CODE, align 4, keep-with-next
    520          AnsiString AlarmBasic::GetDisappearedTime(char *FormatStr) {
   \                     ??GetDisappearedTime_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    521              AnsiString tmpStr;
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
    522              if ( State == AlIdle ) {
   \   0000001C   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0D00001A           BNE      ??GetDisappearedTime_3
    523                  tmpStr = TSNTime(Time_Disappeared, FormatStr);
   \   00000028   D81094E5           LDR      R1,[R4, #+216]
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     ??TSNTime,??TSNTime??rA
   \   00000038   ........           LDR      R0,??DataTable73  ;; ??npos
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   003090E5           LDR      R3,[R0, #+0]
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??assign,??assign??rA
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
    524              }
    525              return (tmpStr);
   \                     ??GetDisappearedTime_3:
   \   00000060   ........           B        ?Subroutine61
    526          }
    527          
    528          
    529          ///////////////////////////////////////////////////////////////
    530          //
    531          // Routines for the librarian
    532          //
    533          ///////////////////////////////////////////////////////////////
    534          

   \                                 In segment CODE, align 4, keep-with-next
    535          int AlarmBasic::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   20609DE5           LDR      R6,[SP, #+32]
   \   0000000C   0340A0E1           MOV      R4,R3
    536              int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
    537              switch ( ValueId ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   3E1041E2           SUB      R1,R1,#+62
   \   0000001C   8C1D41E2           SUB      R1,R1,#+8960
   \   00000020   050051E3           CMP      R1,#+5
   \   00000024   1400008A           BHI      ??GetValue_2
   \   00000028   012F8FE2           ADR      R2,??GetValue_1
   \   0000002C   0120D2E7           LDRB     R2,[R2, R1]
   \   00000030   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??GetValue_1:
   \   00000034   01111111           DC8      +1,+17,+17,+17
   \   00000038   110B0000           DC8      +17,+11,+0,+0
    538              case SVT_AL_ENABLE:
    539                  MyRetValue = (float)Enable;
   \                     ??GetValue_3:
   \   0000003C   E290D0E5           LDRB     R9,[R0, #+226]
   \   00000040   0900A0E1           MOV      R0,R9
   \   00000044   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000048   000084E5           STR      R0,[R4, #+0]
    540                  DecPnt     = 0;
   \   0000004C   008085E5           STR      R8,[R5, #+0]
    541                  Unit       = NO_UNIT;
   \   00000050   008086E5           STR      R8,[R6, #+0]
    542                  if ( !Enable ) {
   \   00000054   000059E3           CMP      R9,#+0
   \   00000058   0800001A           BNE      ??GetValue_4
    543                      Status     = GETVAL_DISABLED;
   \   0000005C   0970A0E3           MOV      R7,#+9
   \   00000060   060000EA           B        ??GetValue_4
    544                  }
    545                  break;
    546              case SVT_AL_STATE     :
    547                  DecPnt     = 0;
   \                     ??GetValue_5:
   \   00000064   008085E5           STR      R8,[R5, #+0]
    548                  Unit       = NO_UNIT;
   \   00000068   008086E5           STR      R8,[R6, #+0]
    549                  MyRetValue = (float)State;
   \   0000006C   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000070   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000074   000084E5           STR      R0,[R4, #+0]
   \   00000078   000000EA           B        ??GetValue_4
    550                  break;
    551              default:
    552                  Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_2:
   \   0000007C   0170A0E3           MOV      R7,#+1
    553                  break;
    554              }
    555              return (Status);
   \                     ??GetValue_4:
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           B        ?Subroutine66
    556          }
    557          

   \                                 In segment CODE, align 4, keep-with-next
    558          int AlarmBasic::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
    559              int Status = E_NO_ERR;
    560              switch ( ValueId ) {
   \                     ??GetStringValue:
   \   00000000   70249FE5           LDR      R2,??GetStringValue_3+0x4  ;; `?<Constant "%d %b %H:%M:%S">`
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   73DF4DE2           SUB      SP,SP,#+460
   \   0000000C   A4C090E5           LDR      R12,[R0, #+164]
   \   00000010   0340A0E1           MOV      R4,R3
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   341041E2           SUB      R1,R1,#+52
   \   0000001C   8C1D41E2           SUB      R1,R1,#+8960
   \   00000020   0F0051E3           CMP      R1,#+15
   \   00000024   0101008A           BHI      ??GetStringValue_4
   \   00000028   023F8FE2           ADR      R3,??GetStringValue_1
   \   0000002C   8110A0E1           MOV      R1,R1, LSL #+1
   \   00000030   B13093E1           LDRH     R3,[R3, R1]
   \   00000034   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetStringValue_1:
   \   00000038   070014002100       DC16     +7,+20,+33,+45
   \              2D00        
   \   00000040   3A0046005300       DC16     +58,+70,+83,+98
   \              6200        
   \   00000048   7000FD00FD00       DC16     +112,+253,+253,+126
   \              7E00        
   \   00000050   FD009B00FD00       DC16     +253,+155,+253,+181
   \              B500        
    561              case SVT_AL_AKN_DATE_TIME:
    562                  MyString = GetResetTime("%d %b %H:%M:%S");
   \                     ??GetStringValue_5:
   \   00000058   B4108DE2           ADD      R1,SP,#+180
   \   0000005C   ........           BL       ??GetResetTime_1
   \   00000060   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   003090E5           LDR      R3,[R0, #+0]
   \   0000006C   B4108DE2           ADD      R1,SP,#+180
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     ??assign,??assign??rA
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   B4008DE2           ADD      R0,SP,#+180
   \                     ??GetStringValue_6:
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   F60000EA           B        ??GetStringValue_7
    563                  break;
    564              case SVT_AL_AKN_TIME    :
    565                  MyString = GetResetTime("%H:%M:%S");
   \                     ??GetStringValue_8:
   \   0000008C   402082E2           ADD      R2,R2,#+64
   \   00000090   D0108DE2           ADD      R1,SP,#+208
   \   00000094   ........           BL       ??GetResetTime_1
   \   00000098   ........           LDR      R0,??DataTable73  ;; ??npos
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   003090E5           LDR      R3,[R0, #+0]
   \   000000A4   D0108DE2           ADD      R1,SP,#+208
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??assign,??assign??rA
   \   000000B0   0520A0E1           MOV      R2,R5
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   D0008DE2           ADD      R0,SP,#+208
   \   000000BC   F0FFFFEA           B        ??GetStringValue_6
    566                  break;
    567              case SVT_AL_ACT_DATE_TIME :
    568                  MyString = GetRisedTime("%d %b %H:%M:%S");
   \                     ??GetStringValue_9:
   \   000000C0   EC108DE2           ADD      R1,SP,#+236
   \   000000C4   ........           BL       ??GetRisedTime_1
   \   000000C8   ........           LDR      R0,??DataTable73  ;; ??npos
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   003090E5           LDR      R3,[R0, #+0]
   \   000000D4   EC108DE2           ADD      R1,SP,#+236
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     ??assign,??assign??rA
   \   000000E0   0520A0E1           MOV      R2,R5
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   EC008DE2           ADD      R0,SP,#+236
   \   000000EC   E4FFFFEA           B        ??GetStringValue_6
    569                  break;
    570              case SVT_AL_ACT_TIME      :
    571                  MyString = GetRisedTime("%H:%M:%S");
   \                     ??GetStringValue_10:
   \   000000F0   402082E2           ADD      R2,R2,#+64
   \   000000F4   421F8DE2           ADD      R1,SP,#+264
   \   000000F8   ........           BL       ??GetRisedTime_1
   \   000000FC   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   003090E5           LDR      R3,[R0, #+0]
   \   00000108   421F8DE2           ADD      R1,SP,#+264
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           _BLF     ??assign,??assign??rA
   \   00000114   0520A0E1           MOV      R2,R5
   \   00000118   0110A0E3           MOV      R1,#+1
   \   0000011C   420F8DE2           ADD      R0,SP,#+264
   \   00000120   D7FFFFEA           B        ??GetStringValue_6
    572                  break;
    573              case SVT_AL_DIS_DATE_TIME:
    574                  MyString = GetDisappearedTime("%d %b %H:%M:%S");
   \                     ??GetStringValue_11:
   \   00000124   491F8DE2           ADD      R1,SP,#+292
   \   00000128   ........           BL       ??GetDisappearedTime_1
   \   0000012C   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   003090E5           LDR      R3,[R0, #+0]
   \   00000138   491F8DE2           ADD      R1,SP,#+292
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           _BLF     ??assign,??assign??rA
   \   00000144   0520A0E1           MOV      R2,R5
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   490F8DE2           ADD      R0,SP,#+292
   \   00000150   CBFFFFEA           B        ??GetStringValue_6
    575                  break;
    576              case SVT_AL_DIS_TIME    :
    577                  MyString = GetDisappearedTime("%H:%M:%S");
   \                     ??GetStringValue_12:
   \   00000154   402082E2           ADD      R2,R2,#+64
   \   00000158   501F8DE2           ADD      R1,SP,#+320
   \   0000015C   ........           BL       ??GetDisappearedTime_1
   \   00000160   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   003090E5           LDR      R3,[R0, #+0]
   \   0000016C   501F8DE2           ADD      R1,SP,#+320
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   ........           _BLF     ??assign,??assign??rA
   \   00000178   0520A0E1           MOV      R2,R5
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   500F8DE2           ADD      R0,SP,#+320
   \   00000184   BEFFFFEA           B        ??GetStringValue_6
    578                  break;
    579              case SVT_AL_LOCATION      :
    580                  MyString = Get_Location();
   \                     ??GetStringValue_13:
   \   00000188   60209CE5           LDR      R2,[R12, #+96]
   \   0000018C   571F8DE2           ADD      R1,SP,#+348
   \   00000190   0FE0A0E1           MOV      LR,PC
   \   00000194   12FF2FE1           BX       R2
   \   00000198   ........           LDR      R0,??DataTable73  ;; ??npos
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   003090E5           LDR      R3,[R0, #+0]
   \   000001A4   571F8DE2           ADD      R1,SP,#+348
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   ........           _BLF     ??assign,??assign??rA
   \   000001B0   0520A0E1           MOV      R2,R5
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   570F8DE2           ADD      R0,SP,#+348
   \                     ??GetStringValue_14:
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   A80000EA           B        ??GetStringValue_7
    581                  break;
    582              case SVT_AL_DESCRIPTION :
    583                  MyString = Get_Message();
   \                     ??GetStringValue_15:
   \   000001C4   68209CE5           LDR      R2,[R12, #+104]
   \   000001C8   5E1F8DE2           ADD      R1,SP,#+376
   \   000001CC   0FE0A0E1           MOV      LR,PC
   \   000001D0   12FF2FE1           BX       R2
   \   000001D4   ........           LDR      R0,??DataTable73  ;; ??npos
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   003090E5           LDR      R3,[R0, #+0]
   \   000001E0   5E1F8DE2           ADD      R1,SP,#+376
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ........           _BLF     ??assign,??assign??rA
   \   000001EC   0520A0E1           MOV      R2,R5
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   5E0F8DE2           ADD      R0,SP,#+376
   \   000001F8   A1FFFFEA           B        ??GetStringValue_6
    584                  break;
    585              case SVT_AL_MESSAGE     :
    586                  MyString = Get_CompleteMessage();
   \                     ??GetStringValue_16:
   \   000001FC   5C209CE5           LDR      R2,[R12, #+92]
   \   00000200   651F8DE2           ADD      R1,SP,#+404
   \   00000204   0FE0A0E1           MOV      LR,PC
   \   00000208   12FF2FE1           BX       R2
   \   0000020C   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   003090E5           LDR      R3,[R0, #+0]
   \   00000218   651F8DE2           ADD      R1,SP,#+404
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   ........           _BLF     ??assign,??assign??rA
   \   00000224   0520A0E1           MOV      R2,R5
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   650F8DE2           ADD      R0,SP,#+404
   \   00000230   93FFFFEA           B        ??GetStringValue_6
    587                  break;
    588              case SVT_AL_ENABLE_TXT:
    589                  if ( Enable ) {
   \                     ??GetStringValue_17:
   \   00000234   E200D0E5           LDRB     R0,[R0, #+226]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   0C00000A           BEQ      ??GetStringValue_18
    590                      MyString = FindDictionaryWord(L_WORD1);     // Enable
   \   00000240   0110A0E3           MOV      R1,#+1
   \   00000244   0C008DE2           ADD      R0,SP,#+12
   \   00000248   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000024C   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   003090E5           LDR      R3,[R0, #+0]
   \   00000258   0C108DE2           ADD      R1,SP,#+12
   \   0000025C   0400A0E1           MOV      R0,R4
   \   00000260   ........           _BLF     ??assign,??assign??rA
   \   00000264   0520A0E1           MOV      R2,R5
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   0C008DE2           ADD      R0,SP,#+12
   \   00000270   83FFFFEA           B        ??GetStringValue_6
    591                  } else {
    592                      MyString = FindDictionaryWord(L_WORD2);     // Disable
   \                     ??GetStringValue_18:
   \   00000274   0210A0E3           MOV      R1,#+2
   \   00000278   0C008DE2           ADD      R0,SP,#+12
   \   0000027C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000280   ........           LDR      R0,??DataTable73  ;; ??npos
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   003090E5           LDR      R3,[R0, #+0]
   \   0000028C   0C108DE2           ADD      R1,SP,#+12
   \   00000290   0400A0E1           MOV      R0,R4
   \   00000294   ........           _BLF     ??assign,??assign??rA
   \   00000298   0520A0E1           MOV      R2,R5
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   0C008DE2           ADD      R0,SP,#+12
   \   000002A4   C4FFFFEA           B        ??GetStringValue_14
    593                  }
    594                  break;
    595              case SVT_AL_UNIT:
    596                  {
    597                      float MyRetValue;
    598                      int DecPnt;
    599                      int Unit;
    600                      GetValue(SVT_AL_VALUE, 0, MyRetValue,  DecPnt, Unit);
   \                     ??GetStringValue_19:
   \   000002A8   0D10A0E1           MOV      R1,SP
   \   000002AC   02002DE9           PUSH     {R1}
   \   000002B0   0C108DE2           ADD      R1,SP,#+12
   \   000002B4   02002DE9           PUSH     {R1}
   \   000002B8   24C09CE5           LDR      R12,[R12, #+36]
   \   000002BC   0C308DE2           ADD      R3,SP,#+12
   \   000002C0   0020A0E3           MOV      R2,#+0
   \   000002C4   3310A0E3           MOV      R1,#+51
   \   000002C8   8C1D81E3           ORR      R1,R1,#0x2300
   \   000002CC   0FE0A0E1           MOV      LR,PC
   \   000002D0   1CFF2FE1           BX       R12
    601                      MyString = GetUnitName(Unit);
   \   000002D4   08109DE5           LDR      R1,[SP, #+8]
   \   000002D8   14008DE2           ADD      R0,SP,#+20
   \   000002DC   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   000002E0   ........           LDR      R0,??DataTable73  ;; ??npos
   \   000002E4   0520A0E1           MOV      R2,R5
   \   000002E8   003090E5           LDR      R3,[R0, #+0]
   \   000002EC   14108DE2           ADD      R1,SP,#+20
   \   000002F0   0400A0E1           MOV      R0,R4
   \   000002F4   ........           _BLF     ??assign,??assign??rA
   \   000002F8   0520A0E1           MOV      R2,R5
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   14008DE2           ADD      R0,SP,#+20
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   08D08DE2           ADD      SP,SP,#+8
   \   0000030C   550000EA           B        ??GetStringValue_7
    602                  }
    603                  break;
    604              case SVT_AL_STATE     :
    605                  switch ( State ) {
   \                     ??GetStringValue_20:
   \   00000310   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000314   030050E3           CMP      R0,#+3
   \   00000318   3700008A           BHI      ??GetStringValue_21
   \   0000031C   011F8FE2           ADR      R1,??GetStringValue_2
   \   00000320   0010D1E7           LDRB     R1,[R1, R0]
   \   00000324   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetStringValue_2:
   \   00000328   000D1A27           DC8      +0,+13,+26,+39
    606                  case AlIdle:
    607                      MyString = "Idle";
   \                     ??GetStringValue_22:
   \   0000032C   101082E2           ADD      R1,R2,#+16
   \   00000330   28008DE2           ADD      R0,SP,#+40
   \   00000334   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000338   ........           LDR      R1,??DataTable73  ;; ??npos
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   003091E5           LDR      R3,[R1, #+0]
   \   00000344   0010A0E1           MOV      R1,R0
   \   00000348   0400A0E1           MOV      R0,R4
   \   0000034C   ........           _BLF     ??assign,??assign??rA
   \   00000350   0520A0E1           MOV      R2,R5
   \   00000354   0110A0E3           MOV      R1,#+1
   \   00000358   28008DE2           ADD      R0,SP,#+40
   \   0000035C   48FFFFEA           B        ??GetStringValue_6
    608                      break;
    609                  case AlActive:
    610                      MyString = "Active";
   \                     ??GetStringValue_23:
   \   00000360   181082E2           ADD      R1,R2,#+24
   \   00000364   44008DE2           ADD      R0,SP,#+68
   \   00000368   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000036C   ........           LDR      R1,??DataTable73  ;; ??npos
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   003091E5           LDR      R3,[R1, #+0]
   \   00000378   0010A0E1           MOV      R1,R0
   \   0000037C   0400A0E1           MOV      R0,R4
   \   00000380   ........           _BLF     ??assign,??assign??rA
   \   00000384   0520A0E1           MOV      R2,R5
   \   00000388   0110A0E3           MOV      R1,#+1
   \   0000038C   44008DE2           ADD      R0,SP,#+68
   \   00000390   3BFFFFEA           B        ??GetStringValue_6
    611                      break;
    612                  case AlAknowledged:
    613                      MyString = "Aknowledged";
   \                     ??GetStringValue_24:
   \   00000394   201082E2           ADD      R1,R2,#+32
   \   00000398   60008DE2           ADD      R0,SP,#+96
   \   0000039C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000003A0   ........           LDR      R1,??DataTable73  ;; ??npos
   \   000003A4   0020A0E3           MOV      R2,#+0
   \   000003A8   003091E5           LDR      R3,[R1, #+0]
   \   000003AC   0010A0E1           MOV      R1,R0
   \   000003B0   0400A0E1           MOV      R0,R4
   \   000003B4   ........           _BLF     ??assign,??assign??rA
   \   000003B8   0520A0E1           MOV      R2,R5
   \   000003BC   0110A0E3           MOV      R1,#+1
   \   000003C0   60008DE2           ADD      R0,SP,#+96
   \   000003C4   2EFFFFEA           B        ??GetStringValue_6
    614                      break;
    615                  case AlBlocked:
    616                      MyString = "Suspended";
   \                     ??GetStringValue_25:
   \   000003C8   2C1082E2           ADD      R1,R2,#+44
   \   000003CC   7C008DE2           ADD      R0,SP,#+124
   \   000003D0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000003D4   ........           LDR      R1,??DataTable73  ;; ??npos
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   003091E5           LDR      R3,[R1, #+0]
   \   000003E0   0010A0E1           MOV      R1,R0
   \   000003E4   0400A0E1           MOV      R0,R4
   \   000003E8   ........           _BLF     ??assign,??assign??rA
   \   000003EC   0520A0E1           MOV      R2,R5
   \   000003F0   0110A0E3           MOV      R1,#+1
   \   000003F4   7C008DE2           ADD      R0,SP,#+124
   \   000003F8   6FFFFFEA           B        ??GetStringValue_14
    617                      break;
    618                  default:
    619                      MyString = "Unknown";
   \                     ??GetStringValue_21:
   \   000003FC   381082E2           ADD      R1,R2,#+56
   \   00000400   98008DE2           ADD      R0,SP,#+152
   \   00000404   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000408   ........           LDR      R1,??DataTable73  ;; ??npos
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   003091E5           LDR      R3,[R1, #+0]
   \   00000414   0010A0E1           MOV      R1,R0
   \   00000418   0400A0E1           MOV      R0,R4
   \   0000041C   ........           _BLF     ??assign,??assign??rA
   \   00000420   0520A0E1           MOV      R2,R5
   \   00000424   0110A0E3           MOV      R1,#+1
   \   00000428   98008DE2           ADD      R0,SP,#+152
   \   0000042C   14FFFFEA           B        ??GetStringValue_6
    620                  }
    621                  break;
    622              default:
    623                  MyString = "";
   \                     ??GetStringValue_4:
   \   00000430   0F1F8FE2           ADR      R1,??GetStringValue_3  ;; ""
   \   00000434   6C0F8DE2           ADD      R0,SP,#+432
   \   00000438   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000043C   ........           LDR      R1,??DataTable73  ;; ??npos
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   003091E5           LDR      R3,[R1, #+0]
   \   00000448   0010A0E1           MOV      R1,R0
   \   0000044C   0400A0E1           MOV      R0,R4
   \   00000450   ........           _BLF     ??assign,??assign??rA
   \   00000454   0520A0E1           MOV      R2,R5
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   6C0F8DE2           ADD      R0,SP,#+432
   \   00000460   ........           _BLF     ??_Tidy,??_Tidy??rA
    624                  Status = GETVAL_NOT_AVAILABLE;
   \   00000464   0150A0E3           MOV      R5,#+1
    625                  break;
    626              }
    627              return (Status);
   \                     ??GetStringValue_7:
   \   00000468   0500A0E1           MOV      R0,R5
   \   0000046C   73DF8DE2           ADD      SP,SP,#+460
   \   00000470   ........           B        ??Subroutine62_0
   \                     ??GetStringValue_3:
   \   00000474   00000000           DC8      "",+0,+0,+0
   \   00000478   ........           DC32     `?<Constant "%d %b %H:%M:%S">`
    628          }
    629          

   \                                 In segment CODE, align 4, keep-with-next
    630          int AlarmBasic::GetBitValue(int ValueId, int Index, bool &MyBit) {
   \                     ??GetBitValue:
   \   00000000   20402DE9           PUSH     {R5,LR}
    631              int Status = GETVAL_NO_ERR;
    632              switch ( ValueId ) {
   \   00000004   3E50A0E3           MOV      R5,#+62
   \   00000008   8C5D85E3           ORR      R5,R5,#0x2300
   \   0000000C   050051E1           CMP      R1,R5
    633              case SVT_AL_ENABLE:
    634                  MyBit = Enable;
   \   00000010   E200D005           LDRBEQ   R0,[R0, #+226]
   \   00000014   00C0A0E3           MOV      R12,#+0
   \   00000018   0000C305           STRBEQ   R0,[R3, #+0]
   \   0000001C   0100000A           BEQ      ??GetBitValue_2
    635                  break;
    636              default:
    637                  Status = PRogramObjectBase::GetBitValue(ValueId, Index, MyBit);
   \   00000020   ........           _BLF     ??GetBitValue_1,??GetBitValue??rA
   \   00000024   00C0A0E1           MOV      R12,R0
    638                  break;
    639              }
    640              return (Status);
   \                     ??GetBitValue_2:
   \   00000028   2040BDE8           POP      {R5,LR}
   \   0000002C   0C00A0E1           MOV      R0,R12
   \   00000030   1EFF2FE1           BX       LR               ;; return
    641          }
    642          
    643          

   \                                 In segment CODE, align 4, keep-with-next
    644          int AlarmBasic::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   58609DE5           LDR      R6,[SP, #+88]
    645              int Status      = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    646              float OrgLimit  = Limit;
    647              float OrgEnable = Enable;
    648              // Ancestors will normally only check for Locked
    649              if ( Locked && !CanDisableOnly ) {
   \   00000018   E800D4E5           LDRB     R0,[R4, #+232]
   \   0000001C   E47094E5           LDR      R7,[R4, #+228]
   \   00000020   0350A0E1           MOV      R5,R3
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??PutValue_2
   \   0000002C   EA00D4E5           LDRB     R0,[R4, #+234]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0200001A           BNE      ??PutValue_2
    650                  Status = E_NO_INPUT_PERMISSION;
   \   00000038   2A10A0E3           MOV      R1,#+42
   \                     ??PutValue_3:
   \   0000003C   00108DE5           STR      R1,[SP, #+0]
   \   00000040   300000EA           B        ??PutValue_4
    651              } else {
    652                  switch ( ValueId ) {
   \                     ??PutValue_2:
   \   00000044   3E1041E2           SUB      R1,R1,#+62
   \   00000048   8C1D41E2           SUB      R1,R1,#+8960
   \   0000004C   010051E3           CMP      R1,#+1
   \   00000050   4600008A           BHI      ??PutValue_5
   \   00000054   010F8FE2           ADR      R0,??PutValue_1
   \   00000058   0100D0E7           LDRB     R0,[R0, R1]
   \   0000005C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000060   00000000           DC8      +0,+0,+0,+0
    653                  case SVT_AL_ENABLE:
    654                  case SVT_AL_ENABLE_TXT:
    655                      {
    656                          int NewStatus = FindConfigKey(NewValue);
   \                     ??PutValue_6:
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   20008DE2           ADD      R0,SP,#+32
   \   0000006C   ........           _BLF     ??string,??string??rA
   \   00000070   20008DE2           ADD      R0,SP,#+32
   \   00000074   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000078   0080A0E1           MOV      R8,R0
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   20008DE2           ADD      R0,SP,#+32
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
    657                          switch ( NewStatus ) {
   \   0000008C   648058E2           SUBS     R8,R8,#+100
   \   00000090   0200000A           BEQ      ??PutValue_7
   \   00000094   018058E2           SUBS     R8,R8,#+1
   \   00000098   2000000A           BEQ      ??PutValue_8
   \   0000009C   210000EA           B        ??PutValue_9
    658                          case C_ENABLE:
    659                              SetEnable(EnableTrue);
   \                     ??PutValue_7:
   \   000000A0   0110A0E3           MOV      R1,#+1
   \                     ??PutValue_10:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       ??SetEnable
    660                              break;
    661                          case C_DISABLE:
    662                              SetEnable(EnableFalse);
    663                              break;
    664                          default:
    665                              {
    666                                  EnableCmd Value = (EnableCmd)GetUnsigned(NewValue, Status);
    667                                  if ( Status == E_NO_ERR ) {
    668                                      if ( Value ) {
    669                                          SetEnable(EnableTrue);
    670                                      } else {
    671                                          SetEnable(EnableFalse);
    672                                      }
    673                                  }
    674                              }
    675                              break;
    676                          }
    677                      }
    678                      break;
    679                  default:
    680                      Status = E_INPUT_ERR;
    681                      break;
    682                  }
    683              }
    684              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_11:
   \   000000AC   00009DE5           LDR      R0,[SP, #+0]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   1300001A           BNE      ??PutValue_4
    685                  SetModifiedFlag();
   \   000000B8   A41094E5           LDR      R1,[R4, #+164]
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   541091E5           LDR      R1,[R1, #+84]
   \   000000C4   0FE0A0E1           MOV      LR,PC
   \   000000C8   11FF2FE1           BX       R1
    686                  if ( Limit != OrgLimit ) {
   \   000000CC   E40094E5           LDR      R0,[R4, #+228]
   \   000000D0   0710A0E1           MOV      R1,R7
   \   000000D4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0900000A           BEQ      ??PutValue_4
    687                      LogEvent("New limit");
   \   000000E0   90109FE5           LDR      R1,??PutValue_12  ;; `?<Constant "New limit">`
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000EC   0010A0E1           MOV      R1,R0
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       ??LogEvent
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   04008DE2           ADD      R0,SP,#+4
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
    688                  }
    689              }
    690              if ( UnitId ) {
   \                     ??PutValue_4:
   \   00000108   000056E3           CMP      R6,#+0
    691                  *UnitId = ValUnitId;
   \   0000010C   0000A013           MOVNE    R0,#+0
   \   00000110   00008615           STRNE    R0,[R6, #+0]
    692              }
    693              return (Status);
   \   00000114   00009DE5           LDR      R0,[SP, #+0]
   \   00000118   3CD08DE2           ADD      SP,SP,#+60
   \   0000011C   ........           B        ?Subroutine65
   \                     ??PutValue_8:
   \   00000120   0010A0E3           MOV      R1,#+0
   \   00000124   DEFFFFEA           B        ??PutValue_10
   \                     ??PutValue_9:
   \   00000128   0510A0E1           MOV      R1,R5
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   ........           _BLF     ??string,??string??rA
   \   00000134   0D10A0E1           MOV      R1,SP
   \   00000138   04008DE2           ADD      R0,SP,#+4
   \   0000013C   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   00000140   FF5000E2           AND      R5,R0,#0xFF
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   04008DE2           ADD      R0,SP,#+4
   \   00000150   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000154   00009DE5           LDR      R0,[SP, #+0]
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   D2FFFF1A           BNE      ??PutValue_11
   \   00000160   000055E3           CMP      R5,#+0
   \   00000164   0010A003           MOVEQ    R1,#+0
   \   00000168   0110A013           MOVNE    R1,#+1
   \   0000016C   CCFFFFEA           B        ??PutValue_10
   \                     ??PutValue_5:
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   B0FFFFEA           B        ??PutValue_3
   \                     ??PutValue_12:
   \   00000178   ........           DC32     `?<Constant "New limit">`
    694          }
    695          

   \                                 In segment CODE, align 4, keep-with-next
    696          int AlarmBasic::PutFloatValue(int ValueId, float NewValue) {
    697              int Status = E_NO_ERR;
   \                     ??PutFloatValue:
   \   00000000   0030A0E3           MOV      R3,#+0
    698              switch ( ValueId ) {
   \   00000004   32C0A0E3           MOV      R12,#+50
   \   00000008   8CCD8CE3           ORR      R12,R12,#0x2300
   \   0000000C   0C0051E1           CMP      R1,R12
    699              case SVT_AL_LIMIT:
    700                  Limit = NewValue;
   \   00000010   E4208005           STREQ    R2,[R0, #+228]
    701                  break;
    702              default:
    703                  Status = E_INPUT_ERR;
   \   00000014   0130A013           MOVNE    R3,#+1
    704                  break;
    705              }
    706              return (Status);
   \   00000018   0300A0E1           MOV      R0,R3
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    707          }
    708          

   \                                 In segment CODE, align 4, keep-with-next
    709          int AlarmBasic::PutBitValue(int ValueId, int Index, bool NewValue) {
   \                     ??PutBitValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    710              int Status = E_NO_ERR;
   \   00000008   0050A0E3           MOV      R5,#+0
    711              switch ( ValueId ) {
   \   0000000C   3E00A0E3           MOV      R0,#+62
   \   00000010   8C0D80E3           ORR      R0,R0,#0x2300
   \   00000014   000051E1           CMP      R1,R0
   \   00000018   0200000A           BEQ      ??PutBitValue_1
   \   0000001C   8D0D51E3           CMP      R1,#+9024
   \   00000020   1000000A           BEQ      ??PutBitValue_2
   \   00000024   140000EA           B        ??PutBitValue_3
    712              case SVT_AL_ENABLE:
    713                  if ( NewValue ) {
   \                     ??PutBitValue_1:
   \   00000028   000053E3           CMP      R3,#+0
    714                      SetEnable(EnableTrue);
   \   0000002C   0110A013           MOVNE    R1,#+1
    715                  } else {
    716                      SetEnable(EnableFalse);
   \   00000030   0010A003           MOVEQ    R1,#+0
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       ??SetEnable
    717                  }
    718                  if ( Master ) {
   \   0000003C   ........           LDR      R0,??DataTable80  ;; Master
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0C00000A           BEQ      ??PutBitValue_4
    719                      SendData(CMD_GENERIC_STATIC_DATA);
   \   0000004C   A42094E5           LDR      R2,[R4, #+164]
   \   00000050   6610A0E3           MOV      R1,#+102
   \   00000054   402092E5           LDR      R2,[R2, #+64]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   0FE0A0E1           MOV      LR,PC
   \   00000060   12FF2FE1           BX       R2
   \   00000064   050000EA           B        ??PutBitValue_4
    720                  }
    721                  break;
    722              case SVT_AL_ACKNOWLEDGE:
    723                  if ( NewValue ) {
   \                     ??PutBitValue_2:
   \   00000068   000053E3           CMP      R3,#+0
   \   0000006C   0300000A           BEQ      ??PutBitValue_4
    724                      MoveAlarmToAknowledge();
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       ??MoveAlarmToAknowledge
   \   00000078   000000EA           B        ??PutBitValue_4
    725                  }
    726                  break;
    727              default:
    728                  Status = E_INPUT_ERR;
   \                     ??PutBitValue_3:
   \   0000007C   0150A0E3           MOV      R5,#+1
    729                  break;
    730              }
    731              return (Status);
   \                     ??PutBitValue_4:
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           B        ??Subroutine62_0
    732          }
    733          
    734          

   \                                 In segment CODE, align 4, keep-with-next
    735          void AlarmBasic::AckAll(void) {
   \                     ??AckAll:
   \   00000000   17402DE9           PUSH     {R0-R2,R4,LR}
    736              if ( !PROActiveAlarmList.isEmpty() ) {
   \   00000004   ........           LDR      R4,??DataTable82  ;; ??PROActiveAlarmList
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1E00001A           BNE      ??AckAll_1
    737                  if ( Master ) {
   \   00000018   ........           LDR      R0,??DataTable80  ;; Master
   \   0000001C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0D00000A           BEQ      ??AckAll_2
    738                      PROActiveAlarmList.Protect();
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??Protect,??Protect??rA
   \   00000030   030000EA           B        ??AckAll_3
    739                      while ( !PROActiveAlarmList.isEmpty() ) {
    740                          PRONode *TNode = PROActiveAlarmList.getHead();
   \                     ??AckAll_4:
   \   00000034   ........           _BLF     ??getHead,??getHead??rA
    741                          TNode = TNode->getNext();
   \   00000038   ........           _BLF     ??getNext,??getNext??rA
    742                          AlarmBasic *TempElement = (AlarmBasic *)TNode->getElement();
   \   0000003C   ........           _BLF     ??getElement,??getElement??rA
    743                          TempElement->MoveAlarmToAknowledge();
   \   00000040   ........           BL       ??MoveAlarmToAknowledge
    744                      }
   \                     ??AckAll_3:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   F6FFFF0A           BEQ      ??AckAll_4
    745                      PROActiveAlarmList.UnProtect();
   \   00000058   ........           _BLF     ??UnProtect,??UnProtect??rA
   \   0000005C   0C0000EA           B        ??AckAll_1
    746                  } else { // not master
    747                      QueueANPRO10_CommandHeading Command;
    748                      Command.TxInfo.Port    = NULL;
   \                     ??AckAll_2:
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   00108DE5           STR      R1,[SP, #+0]
    749                      Command.TxInfo.rxAddr  = DEVICE_MASTER;
   \   00000068   FE10A0E3           MOV      R1,#+254
   \   0000006C   0410CDE5           STRB     R1,[SP, #+4]
    750                      Command.TxInfo.rxId    = DEVICE_TCU;
   \   00000070   2010A0E3           MOV      R1,#+32
   \   00000074   0510CDE5           STRB     R1,[SP, #+5]
    751                      Command.Data.CommandNo = CMD_PRO_ALARM_ACK_ALL;
   \   00000078   BA10A0E3           MOV      R1,#+186
   \   0000007C   B01E81E3           ORR      R1,R1,#0xB00
   \   00000080   B610CDE1           STRH     R1,[SP, #+6]
    752                      Command.Data.ndb       = 0;
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   B810CDE1           STRH     R1,[SP, #+8]
    753                      ANPRO10SendUrgent(&Command);
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           _BLF     ??ANPRO10SendUrgent,??ANPRO10SendUrgent??rA
    754                  }
    755              }
    756          }
   \                     ??AckAll_1:
   \   00000094   1740BDE8           POP      {R0-R2,R4,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
    757          

   \                                 In segment CODE, align 4, keep-with-next
    758          void AlarmBasic::SetAllToIdle(void) {
   \                     ??SetAllToIdle:
   \   00000000   10402DE9           PUSH     {R4,LR}
    759              set<AlarmBasic *>::iterator APtrIt;
    760              for ( APtrIt = AlarmSet.begin(); APtrIt != AlarmSet.end(); APtrIt++ ) {
   \   00000004   ........           LDR      R4,??DataTable82  ;; ??PROActiveAlarmList
   \   00000008   380094E5           LDR      R0,[R4, #+56]
   \   0000000C   030000EA           B        ??SetAllToIdle_1
    761                  int ret = (*APtrIt)->State = AlIdle;
   \                     ??SetAllToIdle_2:
   \   00000010   101090E5           LDR      R1,[R0, #+16]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   E020C1E5           STRB     R2,[R1, #+224]
    762              }
   \   0000001C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??SetAllToIdle_1:
   \   00000020   381084E2           ADD      R1,R4,#+56
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   F8FFFF1A           BNE      ??SetAllToIdle_2
    763              PROActiveAlarmList.RemoveAllNodes();
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??RemoveAllNodes,??RemoveAllNodes??rA
    764              PROAcknowAlarmList.RemoveAllNodes();
   \   00000034   1C0084E2           ADD      R0,R4,#+28
   \   00000038   ........           _BLF     ??RemoveAllNodes,??RemoveAllNodes??rA
    765              AlarmSilence = true;
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   5C00C4E5           STRB     R0,[R4, #+92]
    766          }
   \   00000044   ........           B        ?Subroutine63
    767          
    768          

   \                                 In segment CODE, align 4, keep-with-next
    769          int AlarmBasic::CompareOnTimeRised(PRogramObjectBase *obj1, PRogramObjectBase *obj2) {
    770              // sorts descending
    771              int temp;
    772              if ( ((AlarmBasic *)obj1)->Time_Rised < ((AlarmBasic *)obj2)->Time_Rised ) {
   \                     ??CompareOnTimeRised:
   \   00000000   D02090E5           LDR      R2,[R0, #+208]
   \   00000004   D03091E5           LDR      R3,[R1, #+208]
   \   00000008   ........           B        ?Subroutine60
    773                  temp = 1;
    774              } else if ( ((AlarmBasic *)obj1)->Time_Rised == ((AlarmBasic *)obj2)->Time_Rised ) {
    775                  temp = 0;
    776              } else {
    777                  temp = -1;
    778              }
    779              return (temp);
    780          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine60:
   \   00000000   030052E1           CMP      R2,R3
   \   00000004   0100A0B3           MOVLT    R0,#+1
   \   00000008   1EFF2FB1           BXLT     LR
   \                     ??Subroutine60_0:
   \   0000000C   0000A003           MOVEQ    R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   0000E0E3           MVN      R0,#+0
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    781          int AlarmBasic::CompareOnTimeAcknowledged(PRogramObjectBase *obj1, PRogramObjectBase *obj2) {
    782              // sorts descending
    783              int temp;
    784              if ( ((AlarmBasic *)obj1)->Time_Acknowledged < ((AlarmBasic *)obj2)->Time_Acknowledged ) {
   \                     ??CompareOnTimeAcknowledged:
   \   00000000   D42090E5           LDR      R2,[R0, #+212]
   \   00000004   D43091E5           LDR      R3,[R1, #+212]
   \   00000008                      REQUIRE ?Subroutine60
   \   00000008                      ;; // Fall through to label ?Subroutine60
    785                  temp = 1;
    786              } else if ( ((AlarmBasic *)obj1)->Time_Acknowledged == ((AlarmBasic *)obj2)->Time_Acknowledged ) {
    787                  temp = 0;
    788              } else {
    789                  temp = -1;
    790              }
    791              return (temp);
    792          }

   \                                 In segment CODE, align 4, keep-with-next
    793          int AlarmBasic::CompareOnAlarmNo(PRogramObjectBase *obj1, PRogramObjectBase *obj2) {
    794              // sorts descending
    795              int temp = ((AlarmBasic *)obj1)->AlarmNo - ((AlarmBasic *)obj2)->AlarmNo;
   \                     ??CompareOnAlarmNo:
   \   00000000   C80090E5           LDR      R0,[R0, #+200]
   \   00000004   C81091E5           LDR      R1,[R1, #+200]
   \   00000008   010050E0           SUBS     R0,R0,R1
    796              if ( temp < 0 ) {
    797                  return (1);
   \   0000000C   0100A043           MOVMI    R0,#+1
   \   00000010   1EFF2F41           BXMI     LR
    798              } else if ( temp == 0 ) {   // should be impossible
    799                  return (0);
   \   00000014   ........           B        ??Subroutine60_0
    800              } else {
    801                  return (-1);
    802              }
    803          }
    804          

   \                                 In segment CODE, align 4, keep-with-next
    805          int AlarmBasic::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   F3412DE9           PUSH     {R0,R1,R4-R8,LR}
    806          /*******************************************************************************
    807          // Since a slave node shall not call calculate we cannot call the functions
    808          // AddAlarm(), RemoveAlarm() & MoveAlarm...().
    809          // These functions set time and state and Should ONLY be called by the master.
    810          // This function is only intended to update data based on the incomming cmd and
    811          // keep track of the lists.
    812          *******************************************************************************/
    813              AlarmSema.Acquire();
   \   00000004   ........           LDR      R6,??DataTable82  ;; ??PROActiveAlarmList
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   600086E2           ADD      R0,R6,#+96
   \   00000014   ........           _BLF     ??Acquire,??Acquire??rA
    814              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    815              switch ( pCH->CommandNo ) {
   \   00000018   0100D5E5           LDRB     R0,[R5, #+1]
   \   0000001C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000020   0070A0E3           MOV      R7,#+0
   \   00000024   0180A0E3           MOV      R8,#+1
   \   00000028   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000002C   B80040E2           SUB      R0,R0,#+184
   \   00000030   B00E40E2           SUB      R0,R0,#+2816
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   9D00008A           BHI      ??ReceiveData_3
   \   0000003C   011F8FE2           ADR      R1,??ReceiveData_1
   \   00000040   0010D1E7           LDRB     R1,[R1, R0]
   \   00000044   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ReceiveData_1:
   \   00000048   00900000           DC8      +0,+144,+0,+0
    816              case  CMD_PRO_ALARM_STATUS:     // 3000
    817                  if ( !Master ) {
   \                     ??ReceiveData_4:
   \   0000004C   ........           LDR      R0,??DataTable80  ;; Master
   \   00000050   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   8B00001A           BNE      ??ReceiveData_5
    818          #ifdef ANWIN
    819                      float OrgLimit    = Limit;
    820                      float OrgEnable   = Enable;
    821          #endif
    822                      ANPRO10_COMMAND_3000  *pData = (ANPRO10_COMMAND_3000 *)data;
    823                      Limit             = pData->Limit;
   \   0000005C   0D10A0E1           MOV      R1,SP
   \                     ??ReceiveData_6:
   \   00000060   082085E2           ADD      R2,R5,#+8
   \   00000064   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000068   0120C0E7           STRB     R2,[R0, +R1]
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   040050E3           CMP      R0,#+4
   \   00000074   F9FFFFBA           BLT      ??ReceiveData_6
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
    824                      Deadband          = pData->Deadband;
   \   0000007C   04108DE2           ADD      R1,SP,#+4
   \   00000080   E40084E5           STR      R0,[R4, #+228]
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_7:
   \   00000088   0C2085E2           ADD      R2,R5,#+12
   \   0000008C   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000090   0120C0E7           STRB     R2,[R0, +R1]
   \   00000094   010080E2           ADD      R0,R0,#+1
   \   00000098   040050E3           CMP      R0,#+4
   \   0000009C   F9FFFFBA           BLT      ??ReceiveData_7
   \   000000A0   04009DE5           LDR      R0,[SP, #+4]
   \   000000A4   BC0084E5           STR      R0,[R4, #+188]
    825                      //State
    826                      AlarmNo           = pData->AlarmNo;
   \   000000A8   1700D5E5           LDRB     R0,[R5, #+23]
   \   000000AC   1610D5E5           LDRB     R1,[R5, #+22]
   \   000000B0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000B4   1510D5E5           LDRB     R1,[R5, #+21]
   \   000000B8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000BC   1410D5E5           LDRB     R1,[R5, #+20]
   \   000000C0   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000C4   C80084E5           STR      R0,[R4, #+200]
    827                      CurrentAlarmNo    = max(AlarmNo, CurrentAlarmNo);
   \   000000C8   581096E5           LDR      R1,[R6, #+88]
   \   000000CC   000051E1           CMP      R1,R0
   \   000000D0   58008635           STRCC    R0,[R6, #+88]
    828                      Time_Rised        = pData->Time_Rised;
   \   000000D4   1B00D5E5           LDRB     R0,[R5, #+27]
   \   000000D8   1A10D5E5           LDRB     R1,[R5, #+26]
   \   000000DC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000E0   1910D5E5           LDRB     R1,[R5, #+25]
   \   000000E4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000E8   1810D5E5           LDRB     R1,[R5, #+24]
   \   000000EC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000F0   D00084E5           STR      R0,[R4, #+208]
    829                      Time_Acknowledged = pData->Time_Acknowledged;
   \   000000F4   1F00D5E5           LDRB     R0,[R5, #+31]
   \   000000F8   1E10D5E5           LDRB     R1,[R5, #+30]
   \   000000FC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000100   1D10D5E5           LDRB     R1,[R5, #+29]
   \   00000104   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000108   1C10D5E5           LDRB     R1,[R5, #+28]
   \   0000010C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000110   D40084E5           STR      R0,[R4, #+212]
    830                      Time_Disappeared  = pData->Time_Disappeared;
   \   00000114   2300D5E5           LDRB     R0,[R5, #+35]
   \   00000118   2210D5E5           LDRB     R1,[R5, #+34]
   \   0000011C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000120   2110D5E5           LDRB     R1,[R5, #+33]
   \   00000124   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000128   2010D5E5           LDRB     R1,[R5, #+32]
   \   0000012C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000130   D80084E5           STR      R0,[R4, #+216]
    831                      Time_Changed      = pData->Time_Changed;
   \   00000134   2700D5E5           LDRB     R0,[R5, #+39]
   \   00000138   2610D5E5           LDRB     R1,[R5, #+38]
   \   0000013C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000140   2510D5E5           LDRB     R1,[R5, #+37]
   \   00000144   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000148   2410D5E5           LDRB     R1,[R5, #+36]
   \   0000014C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000150   DC0084E5           STR      R0,[R4, #+220]
    832                      Enable            = pData->Enable;
   \   00000154   2800D5E5           LDRB     R0,[R5, #+40]
    833                      PreviousEnable    = pData->PreviousEnable;
    834                      OutsideLimit      = pData->OutsideLimit;
    835                      AlarmSilence      = pData->AlarmSilence;
    836          
    837                      LocalResetCnt     = 0;
    838                      if ( ReadPermission() ) {
   \   00000158   0010A0E3           MOV      R1,#+0
   \   0000015C   E200C4E5           STRB     R0,[R4, #+226]
   \   00000160   2B00D5E5           LDRB     R0,[R5, #+43]
   \   00000164   CC00C4E5           STRB     R0,[R4, #+204]
   \   00000168   2900D5E5           LDRB     R0,[R5, #+41]
   \   0000016C   E900C4E5           STRB     R0,[R4, #+233]
   \   00000170   2A00D5E5           LDRB     R0,[R5, #+42]
   \   00000174   547086E5           STR      R7,[R6, #+84]
   \   00000178   5C00C6E5           STRB     R0,[R6, #+92]
   \   0000017C   0400A0E1           MOV      R0,R4
   \   00000180   ........           _BLF     ??ReadPermission,??ReadPermission??rA
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   3A00000A           BEQ      ??ReceiveData_8
    839                          switch ( pData->State ) {
   \   0000018C   1300D5E5           LDRB     R0,[R5, #+19]
   \   00000190   1210D5E5           LDRB     R1,[R5, #+18]
   \   00000194   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000198   1110D5E5           LDRB     R1,[R5, #+17]
   \   0000019C   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000001A0   1010D5E5           LDRB     R1,[R5, #+16]
   \   000001A4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000001A8   020050E3           CMP      R0,#+2
   \   000001AC   3200008A           BHI      ??ReceiveData_9
   \   000001B0   011F8FE2           ADR      R1,??ReceiveData_2
   \   000001B4   0010D1E7           LDRB     R1,[R1, R0]
   \   000001B8   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ReceiveData_2:
   \   000001BC   20001200           DC8      +32,+0,+18,+0
    840                          case AlActive:   // this data handling is done on slave nodes
    841                              {    // Update state and lists
    842                                  switch ( State ) {
   \                     ??ReceiveData_10:
   \   000001C0   E000D4E5           LDRB     R0,[R4, #+224]
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   0A00000A           BEQ      ??ReceiveData_11
   \   000001CC   020050E2           SUBS     R0,R0,#+2
   \   000001D0   2900001A           BNE      ??ReceiveData_9
    843                                  case AlActive: // We have the right state OK
    844                                      break;
    845                                  case AlAknowledged:
    846                                      PROActiveAlarmList.insertInOrder(this);
   \   000001D4   0410A0E1           MOV      R1,R4
   \   000001D8   0600A0E1           MOV      R0,R6
   \   000001DC   ........           _BLF     ??insertInOrder,??insertInOrder??rA
    847                                      PROAcknowAlarmList.removeNode(this);
   \   000001E0   0410A0E1           MOV      R1,R4
   \   000001E4   1C0086E2           ADD      R0,R6,#+28
   \   000001E8   ........           _BLF     ??removeNode,??removeNode??rA
    848                                      ScreenSaverOff();
   \                     ??ReceiveData_12:
   \   000001EC   ........           _BLF     ??ScreenSaverOff,??ScreenSaverOff??rA
    849                                      LogAlarm(AlActive);
   \   000001F0   E080C4E5           STRB     R8,[R4, #+224]
   \   000001F4   200000EA           B        ??ReceiveData_9
    850                                      break;
    851                                  case AlIdle:
    852                                      //AlarmSilence = false;
    853                                      PROActiveAlarmList.insertInOrder(this);
   \                     ??ReceiveData_11:
   \   000001F8   0410A0E1           MOV      R1,R4
   \   000001FC   0600A0E1           MOV      R0,R6
   \   00000200   ........           _BLF     ??insertInOrder,??insertInOrder??rA
    854                                      ScreenSaverOff();
   \   00000204   F8FFFFEA           B        ??ReceiveData_12
    855                                      LogAlarm(AlActive);
    856                                      break;
    857                                  }   // end inner switch
    858                                  break;
    859                              }
    860                          case AlAknowledged:
    861                              {   // Update State and lists
    862                                  switch ( State ) {
   \                     ??ReceiveData_13:
   \   00000208   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   0400000A           BEQ      ??ReceiveData_14
   \   00000214   010050E2           SUBS     R0,R0,#+1
   \   00000218   1700001A           BNE      ??ReceiveData_9
    863                                  case AlActive:
    864                                      PROActiveAlarmList.removeNode(this);
   \   0000021C   0410A0E1           MOV      R1,R4
   \   00000220   0600A0E1           MOV      R0,R6
   \   00000224   ........           _BLF     ??removeNode,??removeNode??rA
    865                                      PROAcknowAlarmList.insertInOrder(this);
    866                                      LogAlarm(AlAknowledged);
    867                                      break;
    868                                  case AlAknowledged: // We have the right state OK
    869                                      break;
    870                                  case AlIdle:
    871                                      PROAcknowAlarmList.insertInOrder(this);
   \                     ??ReceiveData_14:
   \   00000228   0410A0E1           MOV      R1,R4
   \   0000022C   1C0086E2           ADD      R0,R6,#+28
   \   00000230   ........           _BLF     ??insertInOrder,??insertInOrder??rA
    872                                      LogAlarm(AlAknowledged);
   \   00000234   0200A0E3           MOV      R0,#+2
   \   00000238   E000C4E5           STRB     R0,[R4, #+224]
   \   0000023C   0E0000EA           B        ??ReceiveData_9
    873                                      break;
    874                                  } // End inner switch
    875                                  break;
    876                              }
    877                          case AlIdle:
    878                              {   // Update State and lists
    879                                  switch ( State ) {
   \                     ??ReceiveData_15:
   \   00000240   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000244   010050E2           SUBS     R0,R0,#+1
   \   00000248   0200000A           BEQ      ??ReceiveData_16
   \   0000024C   010050E2           SUBS     R0,R0,#+1
   \   00000250   0500000A           BEQ      ??ReceiveData_17
   \   00000254   080000EA           B        ??ReceiveData_9
    880                                  case AlActive:
    881                                      PROActiveAlarmList.removeNode(this);
   \                     ??ReceiveData_16:
   \   00000258   0410A0E1           MOV      R1,R4
   \   0000025C   0600A0E1           MOV      R0,R6
   \                     ??ReceiveData_18:
   \   00000260   ........           _BLF     ??removeNode,??removeNode??rA
    882                                      LogAlarm(AlIdle);
   \   00000264   E070C4E5           STRB     R7,[R4, #+224]
   \   00000268   030000EA           B        ??ReceiveData_9
    883                                      break;
    884                                  case AlAknowledged:
    885                                      PROAcknowAlarmList.removeNode(this);
   \                     ??ReceiveData_17:
   \   0000026C   0410A0E1           MOV      R1,R4
   \   00000270   1C0086E2           ADD      R0,R6,#+28
   \   00000274   F9FFFFEA           B        ??ReceiveData_18
    886                                      LogAlarm(AlIdle);
    887                                      break;
    888                                  case AlIdle:    // We have the right state OK
    889                                      break;
    890                                  } // End inner switch
    891                              }
    892                              break;
    893                          }
    894          #ifdef ANWIN
    895                          if ( Limit != OrgLimit ) {
    896                              LogEvent("New limit");
    897                          } else if ( OrgEnable != Enable ) {
    898                              if ( Enable ) {
    899                                  LogEvent("Enabled");
    900                              } else {
    901                                  LogEvent("Disabled");
    902                              }
    903                          }
    904          #endif
    905                      } else {
    906                          TSN_Delay(0);
   \                     ??ReceiveData_8:
   \   00000278   ........           _BLF     OS_Delay,??OS_Delay??rA
    907                      }
    908                      AlarmSema.Release();
   \                     ??ReceiveData_9:
   \   0000027C   600086E2           ADD      R0,R6,#+96
   \   00000280   ........           _BLF     ??Release,??Release??rA
    909                      return (E_OK);
   \   00000284   0000A0E3           MOV      R0,#+0
   \   00000288   0C0000EA           B        ??ReceiveData_19
    910                  }
    911          
    912              case  CMD_PRO_ALARM_ACK:     // 3001
    913                  if ( ReadPermission() ) {
   \                     ??ReceiveData_5:
   \   0000028C   0010A0E3           MOV      R1,#+0
   \   00000290   0400A0E1           MOV      R0,R4
   \   00000294   ........           _BLF     ??ReadPermission,??ReadPermission??rA
   \   00000298   000050E3           CMP      R0,#+0
   \   0000029C   F6FFFF0A           BEQ      ??ReceiveData_9
    914                      //ANPRO10_COMMAND_3001  *pData = (ANPRO10_COMMAND_3001*) data;
    915                      AlarmSilence  = true;
   \   000002A0   5C80C6E5           STRB     R8,[R6, #+92]
    916                      LocalResetCnt = 0;
   \   000002A4   547086E5           STR      R7,[R6, #+84]
    917                      MoveAlarmToAknowledge();
   \   000002A8   0400A0E1           MOV      R0,R4
   \   000002AC   ........           BL       ??MoveAlarmToAknowledge
   \   000002B0   F1FFFFEA           B        ??ReceiveData_9
    918                      AlarmSema.Release();
    919                      return (E_OK);
    920                      // TODO or  flag on sys page
    921                  } else {
    922                      AlarmSema.Release();
    923                      return (E_OK);
    924                  }
    925              default:
    926                  AlarmSema.Release();
   \                     ??ReceiveData_3:
   \   000002B4   600086E2           ADD      R0,R6,#+96
   \   000002B8   ........           _BLF     ??Release,??Release??rA
    927                  return (E_UNKNOWN_COMMAND);
   \   000002BC   0100A0E3           MOV      R0,#+1
   \                     ??ReceiveData_19:
   \   000002C0   F641BDE8           POP      {R1,R2,R4-R8,LR}
   \   000002C4   1EFF2FE1           BX       LR               ;; return
    928              }
    929          }
    930          
    931          // This function is typically called from AddAlarm, RemoveAlarm and MoveAlarmToAcknovledge (on Master)
    932          // every time alarmstate changes. In addition it is also called from cyclic alarmupdate routine.
    933          #ifdef BORLAND
    934              #pragma diag_suppress=Pa082
    935          #endif

   \                                 In segment CODE, align 4, keep-with-next
    936          int AlarmBasic::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   44D04DE2           SUB      SP,SP,#+68
   \   00000008   0040A0E1           MOV      R4,R0
    937              bool SendAlarmUpdate = false;
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   0000A0E3           MOV      R0,#+0
    938              switch ( cmd ) {
   \   00000014   0E60A0E3           MOV      R6,#+14
   \   00000018   FF70A0E3           MOV      R7,#+255
   \   0000001C   650051E3           CMP      R1,#+101
   \   00000020   1000000A           BEQ      ??SendData_1
   \   00000024   660051E3           CMP      R1,#+102
   \   00000028   0D00000A           BEQ      ??SendData_2
   \   0000002C   B830A0E3           MOV      R3,#+184
   \   00000030   B03E83E3           ORR      R3,R3,#0xB00
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   0300000A           BEQ      ??SendData_3
   \   0000003C   013083E3           ORR      R3,R3,#0x1
   \   00000040   030051E1           CMP      R1,R3
   \   00000044   8500000A           BEQ      ??SendData_4
   \   00000048   9E0000EA           B        ??SendData_5
    939              case  CMD_PRO_ALARM_STATUS:     // 3000
    940                  if ( !Master ) {
   \                     ??SendData_3:
   \   0000004C   ........           LDR      R0,??DataTable80  ;; Master
   \   00000050   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0100001A           BNE      ??SendData_2
    941                      return (E_OK);
   \                     ??SendData_6:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   990000EA           B        ??SendData_7
    942                  }
    943              case  CMD_GENERIC_STATIC_DATA:
    944                  SendAlarmUpdate = true;
   \                     ??SendData_2:
   \   00000064   0100A0E3           MOV      R0,#+1
    945              case  CMD_GENERIC_REALTIME_DATA:
    946                  if ( (StateAtLastSend != State) || SendAlarmUpdate ) {
   \                     ??SendData_1:
   \   00000068   E120D4E5           LDRB     R2,[R4, #+225]
   \   0000006C   E030D4E5           LDRB     R3,[R4, #+224]
   \   00000070   030052E1           CMP      R2,R3
   \   00000074   00005003           CMPEQ    R0,#+0
   \   00000078   7600000A           BEQ      ??SendData_8
    947                      QueueANPRO10_COMMAND_3000 Cmd;
    948                      Cmd.TxInfo.Port            = NULL;
   \   0000007C   00508DE5           STR      R5,[SP, #+0]
    949                      Cmd.TxInfo.rxAddr          = DEVICE_BROADCAST_ADDR;
   \   00000080   0470CDE5           STRB     R7,[SP, #+4]
    950                      Cmd.TxInfo.rxId            = DEVICE_BROADCAST_TXU;
   \   00000084   0560CDE5           STRB     R6,[SP, #+5]
    951          
    952                      Cmd.Data.ObjectId          = IDNumber;
   \   00000088   9C0094E5           LDR      R0,[R4, #+156]
    953                      Cmd.Data.ndb               = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000008C   2820A0E3           MOV      R2,#+40
   \   00000090   0A00CDE5           STRB     R0,[SP, #+10]
   \   00000094   2004A0E1           LSR      R0,R0,#+8
   \   00000098   0B00CDE5           STRB     R0,[SP, #+11]
   \   0000009C   2004A0E1           LSR      R0,R0,#+8
   \   000000A0   0C00CDE5           STRB     R0,[SP, #+12]
   \   000000A4   2004A0E1           LSR      R0,R0,#+8
   \   000000A8   0D00CDE5           STRB     R0,[SP, #+13]
   \   000000AC   B820CDE1           STRH     R2,[SP, #+8]
    954                      Cmd.Data.CommandNo         = CMD_PRO_ALARM_STATUS;
   \   000000B0   B92E82E3           ORR      R2,R2,#0xB90
   \   000000B4   B620CDE1           STRH     R2,[SP, #+6]
    955          
    956                      Cmd.Data.Limit             = Limit;
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   0E208DE2           ADD      R2,SP,#+14
   \                     ??SendData_9:
   \   000000C0   E43084E2           ADD      R3,R4,#+228
   \   000000C4   0330D0E7           LDRB     R3,[R0, +R3]
   \   000000C8   0230C0E7           STRB     R3,[R0, +R2]
   \   000000CC   010080E2           ADD      R0,R0,#+1
   \   000000D0   040050E3           CMP      R0,#+4
   \   000000D4   F9FFFFBA           BLT      ??SendData_9
    957                      Cmd.Data.Deadband          = Deadband;
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   12208DE2           ADD      R2,SP,#+18
   \                     ??SendData_10:
   \   000000E0   BC3084E2           ADD      R3,R4,#+188
   \   000000E4   0330D0E7           LDRB     R3,[R0, +R3]
   \   000000E8   0230C0E7           STRB     R3,[R0, +R2]
   \   000000EC   010080E2           ADD      R0,R0,#+1
   \   000000F0   040050E3           CMP      R0,#+4
   \   000000F4   F9FFFFBA           BLT      ??SendData_10
    958                      Cmd.Data.State             = State;
   \   000000F8   E000D4E5           LDRB     R0,[R4, #+224]
    959                      Cmd.Data.AlarmNo           = AlarmNo;
    960          
    961                      Cmd.Data.Time_Rised        = Time_Rised;
    962                      Cmd.Data.Time_Acknowledged = Time_Acknowledged;
    963                      Cmd.Data.Time_Disappeared  = Time_Disappeared;
    964                      Cmd.Data.Time_Changed      = Time_Changed;
    965                      Cmd.Data.Enable            = Enable;
    966                      Cmd.Data.PreviousEnable    = PreviousEnable;
    967                      Cmd.Data.OutsideLimit      = OutsideLimit;
    968                      Cmd.Data.AlarmSilence      = AlarmSilence;
   \   000000FC   ........           LDR      R5,??DataTable82  ;; ??PROActiveAlarmList
    969          
    970                      switch ( cmd ) {
   \   00000100   650051E3           CMP      R1,#+101
   \   00000104   1600CDE5           STRB     R0,[SP, #+22]
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   1700CDE5           STRB     R0,[SP, #+23]
   \   00000110   B801CDE1           STRH     R0,[SP, #+24]
   \   00000114   C80094E5           LDR      R0,[R4, #+200]
   \   00000118   1A00CDE5           STRB     R0,[SP, #+26]
   \   0000011C   2004A0E1           LSR      R0,R0,#+8
   \   00000120   1B00CDE5           STRB     R0,[SP, #+27]
   \   00000124   2004A0E1           LSR      R0,R0,#+8
   \   00000128   1C00CDE5           STRB     R0,[SP, #+28]
   \   0000012C   2004A0E1           LSR      R0,R0,#+8
   \   00000130   1D00CDE5           STRB     R0,[SP, #+29]
   \   00000134   D00094E5           LDR      R0,[R4, #+208]
   \   00000138   1E00CDE5           STRB     R0,[SP, #+30]
   \   0000013C   2004A0E1           LSR      R0,R0,#+8
   \   00000140   1F00CDE5           STRB     R0,[SP, #+31]
   \   00000144   2004A0E1           LSR      R0,R0,#+8
   \   00000148   2000CDE5           STRB     R0,[SP, #+32]
   \   0000014C   2004A0E1           LSR      R0,R0,#+8
   \   00000150   2100CDE5           STRB     R0,[SP, #+33]
   \   00000154   D40094E5           LDR      R0,[R4, #+212]
   \   00000158   2200CDE5           STRB     R0,[SP, #+34]
   \   0000015C   2004A0E1           LSR      R0,R0,#+8
   \   00000160   2300CDE5           STRB     R0,[SP, #+35]
   \   00000164   2004A0E1           LSR      R0,R0,#+8
   \   00000168   2400CDE5           STRB     R0,[SP, #+36]
   \   0000016C   2004A0E1           LSR      R0,R0,#+8
   \   00000170   2500CDE5           STRB     R0,[SP, #+37]
   \   00000174   D80094E5           LDR      R0,[R4, #+216]
   \   00000178   2600CDE5           STRB     R0,[SP, #+38]
   \   0000017C   2004A0E1           LSR      R0,R0,#+8
   \   00000180   2700CDE5           STRB     R0,[SP, #+39]
   \   00000184   2004A0E1           LSR      R0,R0,#+8
   \   00000188   2800CDE5           STRB     R0,[SP, #+40]
   \   0000018C   2004A0E1           LSR      R0,R0,#+8
   \   00000190   2900CDE5           STRB     R0,[SP, #+41]
   \   00000194   DC0094E5           LDR      R0,[R4, #+220]
   \   00000198   2A00CDE5           STRB     R0,[SP, #+42]
   \   0000019C   2004A0E1           LSR      R0,R0,#+8
   \   000001A0   2B00CDE5           STRB     R0,[SP, #+43]
   \   000001A4   2004A0E1           LSR      R0,R0,#+8
   \   000001A8   2C00CDE5           STRB     R0,[SP, #+44]
   \   000001AC   2004A0E1           LSR      R0,R0,#+8
   \   000001B0   2D00CDE5           STRB     R0,[SP, #+45]
   \   000001B4   E220D4E5           LDRB     R2,[R4, #+226]
   \   000001B8   2E20CDE5           STRB     R2,[SP, #+46]
   \   000001BC   CC20D4E5           LDRB     R2,[R4, #+204]
   \   000001C0   3120CDE5           STRB     R2,[SP, #+49]
   \   000001C4   E920D4E5           LDRB     R2,[R4, #+233]
   \   000001C8   2F20CDE5           STRB     R2,[SP, #+47]
   \   000001CC   5C20D5E5           LDRB     R2,[R5, #+92]
   \   000001D0   3020CDE5           STRB     R2,[SP, #+48]
   \   000001D4   0500000A           BEQ      ??SendData_11
   \   000001D8   660051E3           CMP      R1,#+102
   \   000001DC   0E00000A           BEQ      ??SendData_12
   \   000001E0   B800A0E3           MOV      R0,#+184
   \   000001E4   B00E80E3           ORR      R0,R0,#0xB00
   \   000001E8   000051E1           CMP      R1,R0
   \   000001EC   0E00001A           BNE      ??SendData_13
    971                      case  CMD_PRO_ALARM_STATUS:     // 3000
    972                      case  CMD_GENERIC_REALTIME_DATA:
    973                          if ( StateAtLastSend != State ) {
   \                     ??SendData_11:
   \   000001F0   E100D4E5           LDRB     R0,[R4, #+225]
   \   000001F4   E010D4E5           LDRB     R1,[R4, #+224]
   \   000001F8   010050E1           CMP      R0,R1
   \   000001FC   0D00A0E1           MOV      R0,SP
   \   00000200   0300000A           BEQ      ??SendData_14
    974                              if ( ANPRO10SendUrgent(&Cmd) ) return (E_OK);
   \   00000204   ........           _BLF     ??ANPRO10SendUrgent,??ANPRO10SendUrgent??rA
   \                     ??SendData_15:
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   92FFFF1A           BNE      ??SendData_6
   \   00000210   050000EA           B        ??SendData_13
    975                          } else if ( ANPRO10SendNormal(&Cmd) ) return (E_OK);
   \                     ??SendData_14:
   \   00000214   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000218   FAFFFFEA           B        ??SendData_15
    976                          break;
    977                      case  CMD_GENERIC_STATIC_DATA:
    978                          if ( ANPRO10SendNormal(&Cmd) ) return (E_OK);
   \                     ??SendData_12:
   \   0000021C   0D00A0E1           MOV      R0,SP
   \   00000220   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   8BFFFF1A           BNE      ??SendData_6
    979                          break;
    980                      }
    981                      StateAtLastSend = State;
   \                     ??SendData_13:
   \   0000022C   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000230   E100C4E5           STRB     R0,[R4, #+225]
    982                      switch ( State ) {
   \   00000234   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   0500001A           BNE      ??SendData_8
    983                      case AlIdle:
    984                          PROActiveAlarmList.removeNode(this);
   \   00000240   0410A0E1           MOV      R1,R4
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   ........           _BLF     ??removeNode,??removeNode??rA
    985                          PROAcknowAlarmList.removeNode(this);
   \   0000024C   0410A0E1           MOV      R1,R4
   \   00000250   1C0085E2           ADD      R0,R5,#+28
   \   00000254   ........           _BLF     ??removeNode,??removeNode??rA
    986                          break;
    987                      case AlActive:
    988                      case AlAknowledged:
    989                      case AlBlocked:
    990                      default:
    991                          break;
    992                      }
    993          
    994                  }
    995                  return (E_QUEUE_FULL);
   \                     ??SendData_8:
   \   00000258   0300A0E3           MOV      R0,#+3
   \   0000025C   1A0000EA           B        ??SendData_7
    996              case  CMD_PRO_ALARM_ACK:
    997                  if ( WritePermission() ) {
   \                     ??SendData_4:
   \   00000260   0010A0E3           MOV      R1,#+0
   \   00000264   0400A0E1           MOV      R0,R4
   \   00000268   ........           _BLF     ??WritePermission,??WritePermission??rA
   \   0000026C   000050E3           CMP      R0,#+0
   \   00000270   F8FFFF0A           BEQ      ??SendData_8
    998                      QueueANPRO10_COMMAND_3001 Cmd;
    999                      Cmd.TxInfo.Port            = NULL;
   \   00000274   34508DE5           STR      R5,[SP, #+52]
   1000                      Cmd.TxInfo.rxAddr          = DEVICE_BROADCAST_ADDR;
   \   00000278   3870CDE5           STRB     R7,[SP, #+56]
   1001                      Cmd.TxInfo.rxId            = DEVICE_BROADCAST_TXU;
   \   0000027C   3960CDE5           STRB     R6,[SP, #+57]
   1002          
   1003                      Cmd.Data.CommandNo = CMD_PRO_ALARM_ACK;
   \   00000280   B910A0E3           MOV      R1,#+185
   \   00000284   B01E81E3           ORR      R1,R1,#0xB00
   \   00000288   BA13CDE1           STRH     R1,[SP, #+58]
   1004                      Cmd.Data.ndb       = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   0000028C   0410A0E3           MOV      R1,#+4
   \   00000290   BC13CDE1           STRH     R1,[SP, #+60]
   1005                      Cmd.Data.ObjectId  = IDNumber;
   \   00000294   9C0094E5           LDR      R0,[R4, #+156]
   \   00000298   3E00CDE5           STRB     R0,[SP, #+62]
   \   0000029C   2004A0E1           LSR      R0,R0,#+8
   \   000002A0   3F00CDE5           STRB     R0,[SP, #+63]
   \   000002A4   2004A0E1           LSR      R0,R0,#+8
   \   000002A8   4000CDE5           STRB     R0,[SP, #+64]
   \   000002AC   2004A0E1           LSR      R0,R0,#+8
   \   000002B0   4100CDE5           STRB     R0,[SP, #+65]
   1006                      if ( ANPRO10SendUrgent(&Cmd) ) return (E_OK);
   \   000002B4   34008DE2           ADD      R0,SP,#+52
   \   000002B8   ........           _BLF     ??ANPRO10SendUrgent,??ANPRO10SendUrgent??rA
   \   000002BC   000050E3           CMP      R0,#+0
   \   000002C0   65FFFF1A           BNE      ??SendData_6
   \   000002C4   E3FFFFEA           B        ??SendData_8
   1007                  }
   1008                  return (E_QUEUE_FULL);
   1009          
   1010              default:
   1011                  return (E_UNKNOWN_COMMAND);
   \                     ??SendData_5:
   \   000002C8   0100A0E3           MOV      R0,#+1
   \                     ??SendData_7:
   \   000002CC   44D08DE2           ADD      SP,SP,#+68
   \   000002D0   ........           B        ?Subroutine64
   1012              }
   1013          }
   1014          
   1015          
   1016          

   \                                 In segment CODE, align 4, keep-with-next
   1017          void AlarmBasic::SetModifiedFlag(void) {
   \                     ??SetModifiedFlag:
   \   00000000   00402DE9           PUSH     {LR}
   1018              IsModified = true;
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0010C0E5           STRB     R1,[R0, #+0]
   1019              if ( PROPointer ) {
   \   0000000C   C41090E5           LDR      R1,[R0, #+196]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0500000A           BEQ      ??SetModifiedFlag_1
   1020                  PROPointer->SetModifiedFlag();
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   A41091E5           LDR      R1,[R1, #+164]
   \   00000020   541091E5           LDR      R1,[R1, #+84]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   11FF2FE1           BX       R1
   \   0000002C   010000EA           B        ??SetModifiedFlag_2
   1021              } else {
   1022                  SignalSaveSettings(FLASH_SAVE_SETTINGS);
   \                     ??SetModifiedFlag_1:
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   ........           _BLF     ??SignalSaveSettings,??SignalSaveSettings??rA
   1023              }
   1024          }
   \                     ??SetModifiedFlag_2:
   \   00000038   ........           B        ??Subroutine59_0

   \                                 In segment CODE, align 4, keep-with-next
   1025          void AlarmBasic::LogAlarm(AlarmState NewState) {
   1026              State = NewState;
   \                     ??LogAlarm:
   \   00000000   E010C0E5           STRB     R1,[R0, #+224]
   1027          #ifdef ANWIN
   1028              if ( PROSystemData::LogToFile ) {
   1029          
   1030                  short SeqTable[] = { SVT_AL_LOCATION, SVT_AL_DESCRIPTION, SVT_AL_LIMIT, SVT_AL_UNIT,
   1031                      SVT_AL_VALUE, SVT_AL_UNIT, };
   1032                  static short Width[] = { 24, 16, 12, 4, 12, 4 };
   1033                  FILE *OutFile = fopen(LogFileName.c_str(), "a+t");
   1034                  if ( OutFile ) {
   1035                      AnsiString StateStr;
   1036                      AnsiString ActTimeInfo;
   1037                      AnsiString OtherTimeInfo;
   1038                      GetStringValue(SVT_AL_STATE, 0, StateStr);
   1039                      GetStringValue(SVT_AL_ACT_DATE_TIME, 0, ActTimeInfo);
   1040                      switch ( State ) {
   1041                      case AlIdle:
   1042                          GetStringValue(SVT_AL_DIS_DATE_TIME, 0, OtherTimeInfo);
   1043                          break;
   1044                      case AlActive:
   1045                          break;
   1046                      case AlAknowledged:
   1047                          GetStringValue(SVT_AL_AKN_DATE_TIME, 0, OtherTimeInfo);
   1048                          break;
   1049                      case AlBlocked:
   1050                          break;
   1051                      }
   1052                      fprintf(OutFile, "%-18s%-18s%-12s", ActTimeInfo.c_str(), OtherTimeInfo.c_str(), StateStr.c_str());
   1053                      for ( unsigned Column = 0; Column < NELEMENTS(SeqTable); Column++ ) {
   1054                          AnsiString tmpStr = LibGetValue(SeqTable[Column], this);
   1055                          switch ( SeqTable[Column] ) {
   1056                          default:
   1057                              fprintf(OutFile, "%-*s ", Width[Column], tmpStr.c_str());
   1058                              break;
   1059                          case SVT_AL_LIMIT:
   1060                          case SVT_AL_VALUE:
   1061                              fprintf(OutFile, "%*s ", Width[Column], tmpStr.c_str());
   1062                              break;
   1063                          }
   1064          
   1065                      }
   1066                      fprintf(OutFile, "\n");
   1067                      fclose(OutFile);
   1068          
   1069                  }
   1070              }
   1071              if ( !IsalreadyLogged() )	{
   1072                  TLiteQuery *LiteQuery = new TLiteQuery(NULL);
   1073                  //LogSema.Acquire();
   1074                  try {
   1075                      // LiteConnection is either TLiteConnection already set up
   1076                      LiteQuery->Connection = MainForm->AlarmLogLiteConnection;
   1077          
   1078                      // retrieve data
   1079                      LiteQuery->SQL->Text = "SELECT * FROM AlarmLog";
   1080                      LiteQuery->Open();
   1081          
   1082                      // append record
   1083                      LiteQuery->Append();
   1084                      LiteQuery->FieldByName("AlarmId")->AsInteger = IDNumber;
   1085                      AnsiString Fields[4] = { "Location", "Description", "AlarmLimit", "AlarmValue" };
   1086                      short SeqTable2[] = { SVT_AL_LOCATION, SVT_AL_DESCRIPTION, SVT_AL_LIMIT,
   1087                          SVT_AL_VALUE, };
   1088                      AnsiString UnitStr = LibGetValue(SVT_AL_UNIT, this);
   1089          
   1090                      for ( unsigned Column = 0; Column < NELEMENTS(SeqTable2); Column++ ) {
   1091                          AnsiString tmpStr = LibGetValue(SeqTable2[Column], this);
   1092                          switch ( SeqTable2[Column] ) {
   1093                          default:
   1094                              break;
   1095                          case SVT_AL_LIMIT:
   1096                          case SVT_AL_VALUE:
   1097                              tmpStr += " " + UnitStr;
   1098                              break;
   1099                          }
   1100                          LiteQuery->FieldByName(Fields[Column])->AsString = tmpStr;
   1101                      }
   1102                      AnsiString StateStr;
   1103                      GetStringValue(SVT_AL_STATE, 0, StateStr);
   1104                      LiteQuery->FieldByName("Event")->AsString       = StateStr;
   1105                      LiteQuery->FieldByName("Enabled")->AsInteger    = Enable;
   1106                      LiteQuery->FieldByName("AlarmState")->AsString  = StateStr;
   1107                      LiteQuery->FieldByName("EventTimeGMT")->AsInteger  = GetEventTime();
   1108                      LiteQuery->Post();
   1109                  }
   1110                  __finally{
   1111                      LiteQuery->Free();
   1112          
   1113                  }
   1114                  //LogSema.Release();
   1115              }
   1116          #endif
   1117          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1118          

   \                                 In segment CODE, align 4, keep-with-next
   1119          PRogramObjectBase* AlarmBasic::GetPROPointer(void) {
   1120              return PROPointer;
   \                     ??GetPROPointer:
   \   00000000   C40090E5           LDR      R0,[R0, #+196]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1121          }
   1122          

   \                                 In segment CODE, align 4, keep-with-next
   1123          void AlarmBasic::operator=(const AlarmBasic &Alarm2) {
   1124              Enable = Alarm2.Enable;
   \                     `??operator=_1`:
   \   00000000   E220D1E5           LDRB     R2,[R1, #+226]
   \   00000004   E220C0E5           STRB     R2,[R0, #+226]
   1125              Limit  = Alarm2.Limit;
   \   00000008   E41091E5           LDR      R1,[R1, #+228]
   \   0000000C   ........           B        ?Subroutine67
   1126          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine67:
   \   00000000   E41080E5           STR      R1,[R0, #+228]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1127          

   \                                 In segment CODE, align 4, keep-with-next
   1128          void AlarmBasic::SetEnable(EnableCmd Cmd) {
   \                     ??SetEnable:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   1129              switch ( Cmd ) {
   \   0000000C   E220D4E5           LDRB     R2,[R4, #+226]
   \   00000010   B8009FE5           LDR      R0,??SetEnable_2  ;; `?<Constant "Enabled">`
   \   00000014   0130A0E3           MOV      R3,#+1
   \   00000018   050051E3           CMP      R1,#+5
   \   0000001C   1B00008A           BHI      ??SetEnable_3
   \   00000020   01EF8FE2           ADR      LR,??SetEnable_1
   \   00000024   01E0DEE7           LDRB     LR,[LR, R1]
   \   00000028   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??SetEnable_1:
   \   0000002C   12180B26           DC8      +18,+24,+11,+38
   \   00000030   05010000           DC8      +5,+1,+0,+0
   1130              case EnableNoChange     :
   1131                  // Don't do anything
   1132                  break;
   1133              case EnableNoMemTrue :
   1134                  if ( !Enable ) {
   \                     ??SetEnable_4:
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   2200001A           BNE      ??SetEnable_5
   1135                      Enable          = true;
   \   0000003C   E230C4E5           STRB     R3,[R4, #+226]
   1136                      LogEvent("Enabled");
   \   00000040   160000EA           B        ??SetEnable_6
   1137                  }
   1138                  break;
   1139              case EnableNoMemFalse:
   1140                  if ( Enable ) {
   \                     ??SetEnable_7:
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   1E00000A           BEQ      ??SetEnable_5
   1141                      Enable          = false;
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   E210C4E5           STRB     R1,[R4, #+226]
   1142                      LogEvent("Disabled");
   \                     ??SetEnable_8:
   \   00000054   081080E2           ADD      R1,R0,#+8
   \   00000058   110000EA           B        ??SetEnable_9
   1143                  }
   1144                  break;
   1145              case EnableUsePrevious  :
   1146                  if ( PreviousEnable ) {
   \                     ??SetEnable_10:
   \   0000005C   CC10D4E5           LDRB     R1,[R4, #+204]
   \   00000060   000051E3           CMP      R1,#+0
   \   00000064   E210C405           STRBEQ   R1,[R4, #+226]
   \   00000068   08108002           ADDEQ    R1,R0,#+8
   1147                      Enable = true;
   \   0000006C   E230C415           STRBNE   R3,[R4, #+226]
   1148                      LogEvent("Enabled");
   \   00000070   0010A011           MOVNE    R1,R0
   \   00000074   0A0000EA           B        ??SetEnable_9
   1149                  } else  {
   1150                      Enable = false;
   1151                      LogEvent("Disabled");
   1152                  }
   1153                  break;
   1154              case EnableFalse             :
   1155                  if ( Enable ) {
   \                     ??SetEnable_11:
   \   00000078   000052E3           CMP      R2,#+0
   \   0000007C   1100000A           BEQ      ??SetEnable_5
   1156                      Enable          = false;
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   E210C4E5           STRB     R1,[R4, #+226]
   1157                      PreviousEnable 	= false;
   \   00000088   CC10C4E5           STRB     R1,[R4, #+204]
   1158                      LogEvent("Disabled");
   \   0000008C   F0FFFFEA           B        ??SetEnable_8
   1159                  }
   1160                  break;
   1161              case EnableTrue              :
   1162              default                      :
   1163                  if ( !Enable ) {
   \                     ??SetEnable_3:
   \   00000090   000052E3           CMP      R2,#+0
   \   00000094   0B00001A           BNE      ??SetEnable_5
   1164                      Enable          = true;
   \   00000098   E230C4E5           STRB     R3,[R4, #+226]
   1165                      PreviousEnable  = true;
   \   0000009C   CC30C4E5           STRB     R3,[R4, #+204]
   1166                      LogEvent("Enabled");
   \                     ??SetEnable_6:
   \   000000A0   0010A0E1           MOV      R1,R0
   \                     ??SetEnable_9:
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           BL       ??LogEvent
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   1167                  }
   1168                  break;
   1169              }
   1170          }
   \                     ??SetEnable_5:
   \   000000C8   1CD08DE2           ADD      SP,SP,#+28
   \   000000CC   ........           B        ?Subroutine63
   \                     ??SetEnable_2:
   \   000000D0   ........           DC32     `?<Constant "Enabled">`
   1171          

   \                                 In segment CODE, align 4, keep-with-next
   1172          void AlarmBasic::SetAlarmToNormal(void) {
   \                     ??SetAlarmToNormal:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1173          //  MoveAlarmToAknowledge();
   1174              switch ( State ) {
   \   00000008   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   0100001A           BNE      ??SetAlarmToNormal_1
   1175              case AlActive       :
   1176                  MoveAlarmToAknowledge();
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       ??MoveAlarmToAknowledge
   1177                  break;
   1178              case AlAknowledged  :
   1179                  break;
   1180              case AlIdle         :
   1181                  break;
   1182              }
   1183              UpdateAlarm(AL_STAT_IN_NORMAL);
   \                     ??SetAlarmToNormal_1:
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??UpdateAlarm
   1184          }
   \   00000028   ........           B        ?Subroutine63
   1185          

   \                                 In segment CODE, align 4, keep-with-next
   1186          void AlarmBasic::InitAlarmSystem(void) {
   1187              PROActiveAlarmList.Compare = CompareOnTimeRised;
   \                     ??InitAlarmSystem:
   \   00000000   ........           LDR      R0,??DataTable82  ;; ??PROActiveAlarmList
   \   00000004   0C109FE5           LDR      R1,??InitAlarmSystem_1  ;; ??CompareOnTimeRised
   \   00000008   181080E5           STR      R1,[R0, #+24]
   1188              PROAcknowAlarmList.Compare = CompareOnTimeAcknowledged;
   \   0000000C   08109FE5           LDR      R1,??InitAlarmSystem_1+0x4  ;; ??CompareOnTimeAcknowledged
   \   00000010   341080E5           STR      R1,[R0, #+52]
   1189          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
   \                     ??InitAlarmSystem_1:
   \   00000018   ........           DC32     ??CompareOnTimeRised
   \   0000001C   ........           DC32     ??CompareOnTimeAcknowledged
   1190          

   \                                 In segment CODE, align 4, keep-with-next
   1191          void AlarmBasic::SetAlarmDelay(int Dly) {
   1192              AlarmDelay = Dly;
   \                     ??SetAlarmDelay:
   \   00000000   A81080E5           STR      R1,[R0, #+168]
   1193          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1194          
   1195          

   \                                 In segment CODE, align 4, keep-with-next
   1196          void AlarmBasic::SetAlarmLimit(float NewLim) {
   1197              Limit = NewLim;
   \                     ??SetAlarmLimit:
   \   00000000                      REQUIRE ?Subroutine67
   \   00000000                      ;; // Fall through to label ?Subroutine67
   1198          }
   1199          

   \                                 In segment CODE, align 4, keep-with-next
   1200          void AlarmBasic::SetRWPermissions(void) {
   \                     ??SetRWPermissions:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1201              set<AlarmBasic *>::iterator APtrIt;
   1202              for ( APtrIt = AlarmSet.begin(); APtrIt != AlarmSet.end(); APtrIt++ ) {
   \   00000004   ........           LDR      R4,??DataTable83  ;; ??PROActiveAlarmList
   \   00000008   385094E5           LDR      R5,[R4, #+56]
   \   0000000C   120000EA           B        ??SetRWPermissions_1
   1203                  if ( (*APtrIt)->PROPointer ) {
   \                     ??SetRWPermissions_2:
   \   00000010   100095E5           LDR      R0,[R5, #+16]
   \   00000014   C40090E5           LDR      R0,[R0, #+196]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0B00000A           BEQ      ??SetRWPermissions_3
   1204                      (*APtrIt)->ReadPermissionSet   = (*APtrIt)->PROPointer->ReadPermissionSet;
   \   00000020   100095E5           LDR      R0,[R5, #+16]
   \   00000024   C40090E5           LDR      R0,[R0, #+196]
   \   00000028   081080E2           ADD      R1,R0,#+8
   \   0000002C   100095E5           LDR      R0,[R5, #+16]
   \   00000030   080080E2           ADD      R0,R0,#+8
   \   00000034   ........           _BLF     `??operator=`,`??operator=??rA`
   1205                      (*APtrIt)->WritePermissionSet  = (*APtrIt)->PROPointer->WritePermissionSet;
   \   00000038   100095E5           LDR      R0,[R5, #+16]
   \   0000003C   C40090E5           LDR      R0,[R0, #+196]
   \   00000040   201080E2           ADD      R1,R0,#+32
   \   00000044   100095E5           LDR      R0,[R5, #+16]
   \   00000048   200080E2           ADD      R0,R0,#+32
   \   0000004C   ........           _BLF     `??operator=`,`??operator=??rA`
   1206                  }
   1207              }
   \                     ??SetRWPermissions_3:
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000058   0050A0E1           MOV      R5,R0
   \                     ??SetRWPermissions_1:
   \   0000005C   380084E2           ADD      R0,R4,#+56
   \   00000060   000055E1           CMP      R5,R0
   \   00000064   E9FFFF1A           BNE      ??SetRWPermissions_2
   1208          }
   \   00000068   ........           B        ??Subroutine62_0
   1209          

   \                                 In segment CODE, align 4, keep-with-next
   1210          void AlarmBasic::LogEvent(AnsiString NewState) {
   \                     ??LogEvent:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1211          #ifdef S2TXU
   1212          	Time_Changed = time(NULL);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   ........           _BLF     time,??time??rA
   \   00000010   DC0084E5           STR      R0,[R4, #+220]
   1213          #elif defined(ANWIN)
   1214          	if ( !IsalreadyLogged(true) )	{
   1215                  Time_Changed = time(NULL);
   1216          		//LogSema.Acquire();
   1217                  TLiteQuery *LiteQuery = new TLiteQuery(NULL);
   1218                  try {
   1219                      // LiteConnection is either TLiteConnection already set up
   1220                      LiteQuery->Connection = MainForm->AlarmLogLiteConnection;
   1221          
   1222                      // retrieve data
   1223                      LiteQuery->SQL->Text = "SELECT * FROM AlarmLog";
   1224                      LiteQuery->Open();
   1225          
   1226                      // append record
   1227                      LiteQuery->Append();
   1228                      TField *tmpFiledPtr1 = LiteQuery->FindField("AlarmId");
   1229                      TField *tmpFiledPtr2 = LiteQuery->FindField("EventTimeGMT");
   1230                      if ( tmpFiledPtr1 && tmpFiledPtr2 ) {
   1231                          LiteQuery->FieldByName("AlarmId")->AsInteger = IDNumber;
   1232                          AnsiString Fields[4] = { "Location", "Description", "AlarmLimit", "AlarmValue" };
   1233                          short SeqTable2[] = { SVT_AL_LOCATION, SVT_AL_DESCRIPTION, SVT_AL_LIMIT,
   1234                              SVT_AL_VALUE, };
   1235                          AnsiString UnitStr = LibGetValue(SVT_AL_UNIT, this);
   1236          
   1237                          for ( unsigned Column = 0; Column < NELEMENTS(SeqTable2); Column++ ) {
   1238                              AnsiString tmpStr = LibGetValue(SeqTable2[Column], this);
   1239                              switch ( SeqTable2[Column] ) {
   1240          					default:
   1241                                  break;
   1242                              case SVT_AL_LIMIT:
   1243                              case SVT_AL_VALUE:
   1244                                  tmpStr += " " + UnitStr;
   1245                                  break;
   1246                              }
   1247                              LiteQuery->FieldByName(Fields[Column])->AsString = tmpStr;
   1248                          }
   1249                          AnsiString StateStr;
   1250                          GetStringValue(SVT_AL_STATE, 0, StateStr);
   1251                          LiteQuery->FieldByName("Enabled")->AsInteger        = Enable;
   1252                          LiteQuery->FieldByName("Event")->AsString           = NewState;
   1253                          LiteQuery->FieldByName("AlarmState")->AsString      = StateStr;
   1254                          LiteQuery->FieldByName("EventTimeGMT")->AsInteger      = GetEventTime(true);
   1255                          LiteQuery->Post();
   1256                      } else {
   1257                          InitDatabase();
   1258                      }
   1259                  }
   1260                  __finally{
   1261          			LiteQuery->Free();
   1262          
   1263          		}
   1264          
   1265          		//LogSema.Release();
   1266              }
   1267          #endif
   1268          }
   \   00000014   ........           B        ?Subroutine63
   1269          

   \                                 In segment CODE, align 4, keep-with-next
   1270          bool AlarmBasic::IsalreadyLogged(bool isEvent){
   1271              bool AlreadyLogged = false;
   1272          #ifdef ANWIN
   1273              //LogSema.Acquire();
   1274              TLiteQuery *LiteQuery = new TLiteQuery(NULL);
   1275              try {
   1276                  LiteQuery->Connection = MainForm->AlarmLogLiteConnection;
   1277                  LiteQuery->SQL->Text = "SELECT * FROM AlarmLog";
   1278                  LiteQuery->Open();
   1279                  TField *tmpFiledPtr1 = LiteQuery->FindField("AlarmId");
   1280                  TField *tmpFiledPtr2 = LiteQuery->FindField("EventTimeGMT");
   1281          
   1282                  LiteQuery->Close();
   1283                  if ( tmpFiledPtr1 && tmpFiledPtr2 ) {
   1284                      AnsiString StateStr;
   1285                      GetStringValue(SVT_AL_STATE, 0, StateStr);
   1286                      // LiteConnection is either TLiteConnection already set up
   1287                      AnsiString SQLText = "SELECT * FROM AlarmLog";
   1288                      SQLText += " WHERE AlarmId=" + AnsiString(IDNumber);
   1289                      SQLText += " AND AlarmState='" + StateStr + "'";
   1290                      SQLText += " AND EventTimeGMT=" + AnsiString(GetEventTime(isEvent));
   1291                      SQLText += " AND Enabled=" + AnsiString(int(Enable));
   1292                      // retrieve data
   1293                      LiteQuery->SQL->Text = SQLText;
   1294          
   1295                      LiteQuery->Open();
   1296                      // retrieve data
   1297                      //	ShowMessage("Records of this alarm= "+IntToStr(LiteQuery->FetchRows));
   1298          
   1299                      AlreadyLogged =  bool(LiteQuery->RecordCount);
   1300                  } else {
   1301                      InitDatabase();
   1302                  }
   1303              }
   1304              __finally{
   1305                  LiteQuery->Free();
   1306              }
   1307              //LogSema.Release();
   1308          #endif
   1309              return AlreadyLogged;
   \                     ??IsalreadyLogged:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1310          }
   1311          
   1312          
   1313          //---------------------------------------------------------------------------
   1314          #ifdef ANWIN
   1315          void __fastcall AlarmBasic::PrepareDatabase(void) {
   1316              //LogSema.Acquire();
   1317              TLiteQuery *LiteQuery = new TLiteQuery(NULL);
   1318              try {
   1319                  MainForm->AlarmLogLiteConnection->Connected = true;
   1320                  LiteQuery->Connection = MainForm->AlarmLogLiteConnection;
   1321                  LiteQuery->SQL->Text = "SELECT * FROM AlarmLog";
   1322                  LiteQuery->Open();
   1323                  TField *tmpFiledPtr1 = LiteQuery->FindField("AlarmId");
   1324                  TField *tmpFiledPtr2 = LiteQuery->FindField("EventTimeGMT");
   1325          
   1326          		LiteQuery->Close();
   1327          		if ( !tmpFiledPtr1 || !tmpFiledPtr2 ) {
   1328                      InitDatabase();
   1329                  }
   1330              }
   1331              __finally{
   1332                  LiteQuery->Free();
   1333                  MainForm->AlarmLogLiteConnection->Connected = false;
   1334              }
   1335              //LogSema.Release();
   1336          }
   1337          //---------------------------------------------------------------------------
   1338          void __fastcall AlarmBasic::InitDatabase(void) {
   1339              //LogSema.Acquire();
   1340              MainForm->AlarmLogLiteConnection->Connected = true;
   1341          
   1342              TLiteSQL *LiteSQL = new TLiteSQL(NULL);
   1343              try {
   1344                  // LiteConnection is either TLiteConnection already set up
   1345                  LiteSQL->Connection = MainForm->AlarmLogLiteConnection;
   1346                  LiteSQL->SQL->Clear();
   1347                  LiteSQL->SQL->Add("PRAGMA foreign_keys = OFF;");
   1348                  LiteSQL->SQL->Add("DROP TABLE IF EXISTS AlarmLog");
   1349                  LiteSQL->SQL->Add("PRAGMA foreign_keys = ON;");
   1350                  LiteSQL->Execute();
   1351                  // set SQL script for creating tables
   1352                  // We create the whole table instead of just alter by e.g. adding a missing coloumn
   1353                  LiteSQL->SQL->Clear();
   1354                  LiteSQL->SQL->Add("CREATE TABLE if not exists AlarmLog (");
   1355                  LiteSQL->SQL->Add("  Id integer PRIMARY KEY AUTOINCREMENT,");
   1356                  LiteSQL->SQL->Add("  AlarmId integer,");
   1357                  //LiteSQL->SQL->Add("  AlarmNo integer,");
   1358                  LiteSQL->SQL->Add("  Event text,");
   1359                  LiteSQL->SQL->Add("  Location	text,");
   1360                  LiteSQL->SQL->Add("  Description text,");
   1361                  LiteSQL->SQL->Add("  AlarmLimit text,");
   1362                  LiteSQL->SQL->Add("  AlarmValue text,");
   1363                  LiteSQL->SQL->Add("  AlarmState text,");
   1364                  LiteSQL->SQL->Add("  Enabled integer default 0,");
   1365                  LiteSQL->SQL->Add("  EventTimeGMT integer);");
   1366          		//LiteSQL->SQL->Add("  FOREIGN KEY(AlarmId) REFERENCES AlarmTable(Id)	);");
   1367          		LiteSQL->Execute();
   1368          
   1369              }
   1370              __finally{
   1371                  LiteSQL->Free();
   1372          	}
   1373          	//LiteTable1->Active         = false;
   1374          	MainForm->AlarmLogLiteConnection->Connected = false;
   1375          	//LogSema.Release();
   1376          }
   1377          
   1378          void __fastcall AlarmBasic::CleanAlarmLogData(TLiteQuery *LiteQuery, int MaxAge) {
   1379          
   1380          	try {
   1381          		if (MaxAge < 2) {
   1382          			MaxAge = 2;
   1383          		}
   1384          		AnsiString MaxAgeStr = MaxAge;
   1385          		LiteQuery->SQL->Text = "DELETE FROM AlarmLog WHERE EventTimeGMT < strftime('%s', datetime('now', '-"+MaxAgeStr+" days'))";
   1386          		LiteQuery->Execute();
   1387          		LiteQuery->SQL->Clear();
   1388          	}
   1389          	__finally{
   1390          
   1391          	}
   1392          
   1393          }
   1394          
   1395          
   1396          
   1397          #endif 	// ANWIN
   1398          

   \                                 In segment CODE, align 4, keep-with-next
   1399          time_t AlarmBasic::GetEventTime(bool NewEvent) {
   1400          	time_t EventTime = 0;
   \                     ??GetEventTime:
   \   00000000   0020A0E3           MOV      R2,#+0
   1401          	if ( NewEvent ) {
   \   00000004   000051E3           CMP      R1,#+0
   1402          		EventTime = Time_Changed;
   \   00000008   DC209015           LDRNE    R2,[R0, #+220]
   \   0000000C   0B00001A           BNE      ??GetEventTime_2
   1403          	} else {
   1404          		switch ( State ) {
   \   00000010   E010D0E5           LDRB     R1,[R0, #+224]
   \   00000014   020051E3           CMP      R1,#+2
   \   00000018   0800008A           BHI      ??GetEventTime_2
   \   0000001C   013F8FE2           ADR      R3,??GetEventTime_1
   \   00000020   0130D3E7           LDRB     R3,[R3, R1]
   \   00000024   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??GetEventTime_1:
   \   00000028   04000200           DC8      +4,+0,+2,+0
   1405          		case AlActive       :
   1406          			EventTime = Time_Rised;
   \                     ??GetEventTime_3:
   \   0000002C   D02090E5           LDR      R2,[R0, #+208]
   \   00000030   020000EA           B        ??GetEventTime_2
   1407          			break;
   1408          		case AlAknowledged  :
   1409          			EventTime = Time_Acknowledged;
   \                     ??GetEventTime_4:
   \   00000034   D42090E5           LDR      R2,[R0, #+212]
   \   00000038   000000EA           B        ??GetEventTime_2
   1410          			break;
   1411          		case AlIdle         :
   1412          			EventTime = Time_Disappeared;
   \                     ??GetEventTime_5:
   \   0000003C   D82090E5           LDR      R2,[R0, #+216]
   1413          			break;
   1414          		case AlBlocked    :
   1415          			break;
   1416          		default:
   1417          			break;
   1418          		}
   1419          	}
   1420          	return EventTime;
   \                     ??GetEventTime_2:
   \   00000040   0200A0E1           MOV      R0,R2
   \   00000044   1EFF2FE1           BX       LR               ;; return
   1421          }
   1422          
   1423          
   1424          
   1425          ////////////////////////////////////////////////////////////////////////
   1426          ///
   1427          /// Function to enable/disable sound
   1428          ///
   1429          ///////////////////////////////////////////////////////////////////////
   1430          ///

   \                                 In segment CODE, align 4, keep-with-next
   1431          void SetAlarmSoundOff(void) {
   1432          	AlarmBasic::AlarmSound = false;
   \                     ??SetAlarmSoundOff:
   \   00000000   ........           LDR      R0,??DataTable85  ;; ??AlarmSound
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   ........           B        ?Subroutine68
   1433          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine68:
   \   00000000   0010C0E5           STRB     R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1434          

   \                                 In segment CODE, align 4, keep-with-next
   1435          void SetAlarmSoundOn(void) {
   1436          	AlarmBasic::AlarmSound = true;
   \                     ??SetAlarmSoundOn:
   \   00000000   ........           LDR      R0,??DataTable85  ;; ??AlarmSound
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008                      REQUIRE ?Subroutine68
   \   00000008                      ;; // Fall through to label ?Subroutine68
   1437          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PROActiveAlarmList>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for PROAcknowAlarmList>`:
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for AlarmSet>`:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for AlCnt>`:
   \   00000050   00000000           DC32 0
   \                     `?<Initializer for LocalResetCnt>`:
   \   00000054   00000000           DC32 0
   \                     `?<Initializer for CurrentAlarmNo>`:
   \   00000058   00000000           DC32 0
   \                     `?<Initializer for AlarmSilence>`:
   \   0000005C   01                 DC8 1
   \   0000005D   000000             DC8 0, 0, 0
   \                     `?<Initializer for AlarmSema>`:
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for LogSema>`:
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for LogFileName>`:
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for AlarmSound>`:
   \   00000000   01                 DC8 1

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Alarm">`:
   \   00000000   416C61726D00       DC8 "Alarm"
   \   00000006   0000               DC8 0, 0
   \   00000008   416C61726D20       DC8 "Alarm setting"
   \              73657474696E
   \              6700        
   \   00000016   0000               DC8 0, 0
   \   00000018   556E6B6E6F77       DC8 "Unknown error started at line:"
   \              6E206572726F
   \              722073746172
   \              746564206174
   \              206C696E653A
   \              00          
   \   00000037   00                 DC8 0
   \   00000038   546865206B65       DC8 "The keyword "
   \              79776F726420
   \              00          
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000065   000000             DC8 0, 0, 0
   \   00000068   2C20666F7220       DC8 ", for "
   \              00          
   \   0000006F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d %b %H:%M:%S">`:
   \   00000000   256420256220       DC8 "%d %b %H:%M:%S"
   \              25483A254D3A
   \              255300      
   \   0000000F   00                 DC8 0
   \   00000010   49646C6500         DC8 "Idle"
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   416374697665       DC8 "Active"
   \              00          
   \   0000001F   00                 DC8 0
   \   00000020   416B6E6F776C       DC8 "Aknowledged"
   \              656467656400
   \   0000002C   53757370656E       DC8 "Suspended"
   \              64656400    
   \   00000036   0000               DC8 0, 0
   \   00000038   556E6B6E6F77       DC8 "Unknown"
   \              6E00        
   \   00000040   25483A254D3A       DC8 "%H:%M:%S"
   \              255300      
   \   00000049   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "New limit">`:
   \   00000000   4E6577206C69       DC8 "New limit"
   \              6D697400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Enabled">`:
   \   00000000   456E61626C65       DC8 "Enabled"
   \              6400        
   \   00000008   44697361626C       DC8 "Disabled"
   \              656400      
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d %b %y %T">`:
   \   00000000   256420256220       DC8 "%d %b %y %T"
   \              257920255400

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   20205B00           DC8 "  ["

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5D3A00             DC8 "]:"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5B00               DC8 "["

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   205B00             DC8 " ["

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A00               DC8 ":"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%H:%M">`:
   \   00000000   25483A254D00       DC8 "%H:%M"
   \   00000006   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic &AlarmBasic::new AlarmBasic()
   \                     `??new AlarmBasic`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   EC00A0E3           MOV      R0,#+236
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new AlarmBasic_4`
   \   00000014   ........           BL       ??AlarmBasic
   \                     `??new AlarmBasic_4`:
   \   00000018   ........           B        ??Subroutine59_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic &AlarmBasic::new AlarmBasic(PRogramObjectBase *)
   \                     `??new AlarmBasic_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   EC00A0E3           MOV      R0,#+236
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmBasic_5`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmBasic_1
   \                     `??new AlarmBasic_5`:
   \   00000020   ........           B        ?Subroutine63

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic &AlarmBasic::new AlarmBasic(PRogramObjectBase *, float)
   \                     `??new AlarmBasic_2`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   EC00A0E3           MOV      R0,#+236
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AlarmBasic_6`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AlarmBasic_2
   \                     `??new AlarmBasic_6`:
   \   00000028   ........           B        ??Subroutine62_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic &AlarmBasic::new AlarmBasic(PRogramObjectBase *, float, float, bool)
   \                     `??new AlarmBasic_3`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   EC00A0E3           MOV      R0,#+236
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500000A           BEQ      `??new AlarmBasic_7`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??AlarmBasic_3
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \                     `??new AlarmBasic_7`:
   \   0000003C   ........           B        ?Subroutine64

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   3A0A0000           DC8      ":\n",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   3A0A0000           DC8      ":\n",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     `?<Constant "Alarm">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     ??LogAlarms

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     Master

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     LanguageSema

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     ??CurrentLanguage

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     ??LogPrinterId

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   5D3A0000           DC8      "]:",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   5B000000           DC8      "[",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   3A000000           DC8      ":",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   5B000000           DC8      "[",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   5D3A0000           DC8      "]:",+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   3A000000           DC8      ":",+0,+0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     SpaceStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     `?<Constant "%d %b %y %T">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     `?<Constant "%H:%M">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     Master

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   ........           DC32     ??PROActiveAlarmList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   ........           DC32     ??AlarmSound
   1438          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmBasic::AckAll()              20
     AlarmBasic::AddAlarm()            44
     AlarmBasic::AlarmBasic()           8
     AlarmBasic::AlarmBasic(PRogramObjectBase *)
                                       12
     AlarmBasic::AlarmBasic(PRogramObjectBase *, float)
                                       16
     AlarmBasic::AlarmBasic(PRogramObjectBase *, float, float, bool)
                                       20
     AlarmBasic::Check()                0
     AlarmBasic::CompareOnAlarmNo(PRogramObjectBase *, PRogramObjectBase *)
                                        0
     AlarmBasic::CompareOnTimeAcknowledged(PRogramObjectBase *, PRogramObjectBase *)
                                        0
     AlarmBasic::CompareOnTimeRised(PRogramObjectBase *, PRogramObjectBase *)
                                        0
     AlarmBasic::GetBitValue(int, int, bool &)
                                       12
     AlarmBasic::GetDisappearedTime()
                                       40
     AlarmBasic::GetDisappearedTime(char *)
                                       44
     AlarmBasic::GetEventTime(bool)     0
     AlarmBasic::GetPROPointer()        0
     AlarmBasic::GetResetTime()        40
     AlarmBasic::GetResetTime(char *)
                                       44
     AlarmBasic::GetRisedTime()         4
     AlarmBasic::GetRisedTime(char *)
                                        4
     AlarmBasic::GetStringValue(int, int, AnsiString &)
                                      480
     AlarmBasic::GetValue(int, int, float &, int &, int &)
                                       28
     AlarmBasic::Get_ANPro3Message()
                                      748
     AlarmBasic::Get_CompleteMessage()
                                       96
     AlarmBasic::Get_Location()         4
     AlarmBasic::Get_LogMessage()     752
     AlarmBasic::Get_Message()          4
     AlarmBasic::Get_TPCMessage()       4
     AlarmBasic::InitAlarmSystem()      0
     AlarmBasic::Initiate()            28
     AlarmBasic::IsalreadyLogged(bool)
                                        0
     AlarmBasic::LoadConfigString(TSNConfigString &)
                                      172
     AlarmBasic::LogAlarm(AlarmBasic::AlarmState)
                                        0
     AlarmBasic::LogEvent(AnsiString)
                                        8
     AlarmBasic::MakeConfigString(int)
                                      556
     AlarmBasic::MoveAlarmToAknowledge()
                                       48
     AlarmBasic::PutBitValue(int, int, bool)
                                       12
     AlarmBasic::PutFloatValue(int, float)
                                        0
     AlarmBasic::PutValue(int, int, AnsiString, bool, int *)
                                       84
     AlarmBasic::ReceiveData(unsigned char *)
                                       32
     AlarmBasic::RemoveAlarm()         44
     AlarmBasic::RestoreSettings(TSNConfigString *)
                                      488
     AlarmBasic::SaveSettings()       504
     AlarmBasic::SendData(unsigned short)
                                       88
     AlarmBasic::SetAlarmDelay(int)     0
     AlarmBasic::SetAlarmLimit(float)
                                        0
     AlarmBasic::SetAlarmToNormal()     8
     AlarmBasic::SetAllToIdle()         8
     AlarmBasic::SetEnable(EnableCmd)
                                       36
     AlarmBasic::SetModifiedFlag()      4
     AlarmBasic::SetRWPermissions()    12
     AlarmBasic::UpdateAlarm(int)      16
     AlarmBasic::new AlarmBasic()       4
     AlarmBasic::new AlarmBasic(PRogramObjectBase *)
                                        8
     AlarmBasic::new AlarmBasic(PRogramObjectBase *, float)
                                       12
     AlarmBasic::new AlarmBasic(PRogramObjectBase *, float, float, bool)
                                       24
     AlarmBasic::operator=(AlarmBasic const &)
                                        0
     AlarmBasic::~AlarmBasic()         12
     AnsiString::~AnsiString()          4
     PROSafeLinkedList::~PROSafeLinkedList()
                                        4
     SetAlarmSoundOff()                 0
     SetAlarmSoundOn()                  0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
                                       20
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     __sti__routine()                  16
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<AlarmBasic *>::~set()          8
     set<unsigned int>::operator=(set<unsigned int> const &)
                                       12
     string::c_str() const              0
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     string::c_str() const            24
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator)
                                     120
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                     112
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<unsigned int>::operator=(set<unsigned int> const &)
                                      56
     set<AlarmBasic *>::~set()        32
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     AnsiString::~AnsiString()        24
     PROSafeLinkedList::~PROSafeLinkedList()
                                      16
     AlarmBasic::~AlarmBasic()        52
     __sti__routine()                152
     ?<Constant "AlarmLog.txt">       88
     AlarmBasic::PROActiveAlarmList  156
     AlarmBasic::AlarmSound            1
     AlarmSilenceTimer                20
     AlarmBasic::AlarmBasic()         28
     ?Subroutine63                     8
     AlarmBasic::AlarmBasic(PRogramObjectBase *)
                                      48
     ?Subroutine62                    16
     AlarmBasic::AlarmBasic(PRogramObjectBase *, float)
                                      56
     ?Subroutine61                    16
     AlarmBasic::AlarmBasic(PRogramObjectBase *, float, float, bool)
                                      60
     ?Subroutine64                     8
     AlarmBasic::Initiate()          232
     AlarmBasic::MakeConfigString(int)
                                    1676
     ?Subroutine65                     8
     AlarmBasic::LoadConfigString(TSNConfigString &)
                                     720
     ?Subroutine66                    20
     AlarmBasic::SaveSettings()      772
     AlarmBasic::RestoreSettings(TSNConfigString *)
                                    1024
     AlarmBasic::Check()               4
     AlarmBasic::UpdateAlarm(int)    304
     AlarmBasic::AddAlarm()          232
     AlarmBasic::RemoveAlarm()       192
     AlarmBasic::MoveAlarmToAknowledge()
                                     324
     AlarmBasic::Get_Message()        24
     ?Subroutine59                    28
     AlarmBasic::Get_TPCMessage()     24
     AlarmBasic::Get_CompleteMessage()
                                     180
     AlarmBasic::Get_LogMessage()   1248
     AlarmBasic::Get_ANPro3Message()
                                     928
     AlarmBasic::Get_Location()       64
     AlarmBasic::GetRisedTime()        8
     AlarmBasic::GetRisedTime(char *)
                                       0
     AlarmBasic::GetResetTime()       96
     AlarmBasic::GetResetTime(char *)
                                     100
     AlarmBasic::GetDisappearedTime()
                                      92
     AlarmBasic::GetDisappearedTime(char *)
                                     100
     AlarmBasic::GetValue(int, int, float &, int &, int &)
                                     136
     AlarmBasic::GetStringValue(int, int, AnsiString &)
                                    1148
     AlarmBasic::GetBitValue(int, int, bool &)
                                      52
     AlarmBasic::PutValue(int, int, AnsiString, bool, int *)
                                     380
     AlarmBasic::PutFloatValue(int, float)
                                      32
     AlarmBasic::PutBitValue(int, int, bool)
                                     136
     AlarmBasic::AckAll()            156
     AlarmBasic::SetAllToIdle()       72
     AlarmBasic::CompareOnTimeRised(PRogramObjectBase *, PRogramObjectBase *)
                                      12
     ?Subroutine60                    28
     AlarmBasic::CompareOnTimeAcknowledged(PRogramObjectBase *, PRogramObjectBase *)
                                       8
     AlarmBasic::CompareOnAlarmNo(PRogramObjectBase *, PRogramObjectBase *)
                                      24
     AlarmBasic::ReceiveData(unsigned char *)
                                     712
     AlarmBasic::SendData(unsigned short)
                                     724
     AlarmBasic::SetModifiedFlag()    60
     AlarmBasic::LogAlarm(AlarmBasic::AlarmState)
                                       8
     AlarmBasic::GetPROPointer()       8
     AlarmBasic::operator=(AlarmBasic const &)
                                      16
     ?Subroutine67                     8
     AlarmBasic::SetEnable(EnableCmd)
                                     212
     AlarmBasic::SetAlarmToNormal()   44
     AlarmBasic::InitAlarmSystem()    32
     AlarmBasic::SetAlarmDelay(int)    8
     AlarmBasic::SetAlarmLimit(float)
                                       0
     AlarmBasic::SetRWPermissions()  108
     AlarmBasic::LogEvent(AnsiString)
                                      24
     AlarmBasic::IsalreadyLogged(bool)
                                       8
     AlarmBasic::GetEventTime(bool)   72
     SetAlarmSoundOff()               12
     ?Subroutine68                     8
     SetAlarmSoundOn()                 8
     ??DataTable0                      4
     ?<Initializer for PROActiveAlarmList>
                                     156
     ?<Initializer for AlarmSound>     1
     ?<Constant "Alarm">             112
     ?<Constant ":\n">                 3
     ?<Constant "%d %b %H:%M:%S">     76
     ?<Constant "">                    1
     ?<Constant "New limit">          12
     ?<Constant "Enabled">            20
     ?<Constant " ">                   2
     ?<Constant "%d %b %y %T">        12
     ?<Constant "  [">                 4
     ?<Constant "]:">                  3
     ?<Constant "[">                   2
     ?<Constant " [">                  3
     ?<Constant ":">                   2
     ?<Constant "%H:%M">               8
     AlarmBasic::new AlarmBasic()     28
     AlarmBasic::new AlarmBasic(PRogramObjectBase *)
                                      36
     AlarmBasic::new AlarmBasic(PRogramObjectBase *, float)
                                      44
     AlarmBasic::new AlarmBasic(PRogramObjectBase *, float, float, bool)
                                      64
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable8                      4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable16                     4
     ??DataTable28                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable36                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ??DataTable44                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable49                     4
     ??DataTable51                     4
     ??DataTable73                     4
     ??DataTable80                     4
     ??DataTable82                     4
     ??DataTable83                     4
     ??DataTable85                     4
      Others                        1484

 
 17 468 bytes in segment CODE
    464 bytes in segment DATA_C
    157 bytes in segment DATA_I
    157 bytes in segment DATA_ID
     44 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 13 348 bytes of CODE  memory (+ 4 148 bytes shared)
    621 bytes of CONST memory
    201 bytes of DATA  memory

Errors: none
Warnings: 3
