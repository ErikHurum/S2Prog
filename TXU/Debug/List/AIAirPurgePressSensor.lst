##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIAirPurgePressSensor.cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AIAirPurgePressSensor.cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIAirPurgePressSensor.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIAirPurgePressSensor.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIAirPurgePressSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs size_t char_traits::length(char const *)
   \                     ??length:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     strlen,??strlen??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
   \                     ??Ref:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
   \                     `??operator less<AlarmBasic *> &`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??Ref,??Ref??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
   \                     ??_Alval:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0100B0E1           MOVS     R0,R1
   \   0000000C   ........           _BLF     ??allocator_1,??allocator??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
   \                     ??pair:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0510B0E1           MOVS     R1,R5
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??iterator,??iterator??rA
   \   0000001C   0460C4E5           STRB     R6,[R4, #+4]
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(char const *)
   \                     `??operator+=_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append_1,??append??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_4    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_4:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(char const *)
   \                     ??append_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??length,??length??rA
   \   00000014   0020B0E1           MOVS     R2,R0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_3,??append??rA_3
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *operator new(unsigned int, void *)
   \                     `??operator new`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void *_Allocator<void>::allocate(unsigned int)
   \                     ??allocate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
   \                     ??allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node * allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
   \                     ??allocate_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   1410A0E3           MOV      R1,#+20
   \   00000010   910510E0           MULS     R0,R1,R5
   \   00000014   ........           _BLF     ??allocate,??allocate??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
   \                     ??max_size:
   \   00000000   14209FE5           LDR      R2,??max_size_2  ;; 0xccccccc
   \   00000004   0210B0E1           MOVS     R1,R2
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0000001A           BNE      ??max_size_3
   \                     ??max_size_4:
   \   00000010   0110A0E3           MOV      R1,#+1
   \                     ??max_size_3:
   \   00000014   0100B0E1           MOVS     R0,R1
   \   00000018   1EFF2FE1           BX       LR               ;; return
   \                     ??max_size_2:
   \   0000001C   CCCCCC0C           DC32     0xccccccc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs allocator<void>::allocator()
   \                     ??allocator_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
   \                     `??operator()`:
   \   00000000   020051E1           CMP      R1,R2
   \   00000004   0100002A           BCS      `??operator()_1`
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   000000EA           B        `??operator()_2`
   \                     `??operator()_1`:
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     `??operator()_2`:
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
   \                     ??_GenNode:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   04C0DDE5           LDRB     R12,[SP, #+4]
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   042080E5           STR      R2,[R0, #+4]
   \   00000010   083080E5           STR      R3,[R0, #+8]
   \   00000014   0CC0C0E5           STRB     R12,[R0, #+12]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0D40C0E5           STRB     R4,[R0, #+13]
   \   00000020   1000BDE8           POP      {R4}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Color:
   \   00000000   0C0090E2           ADDS     R0,R0,#+12
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil:
   \   00000000   0D0090E2           ADDS     R0,R0,#+13
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \                     ??_Max_1:
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0400001A           BNE      ??_Max_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   0040B0E1           MOVS     R4,R0
   \   00000038   F2FFFFEA           B        ??_Max_1
   \                     ??_Max_2:
   \   0000003C   0400B0E1           MOVS     R0,R4
   \   00000040   1040BDE8           POP      {R4,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      ??_DecP_1
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Right,??_Right??rA
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   240000EA           B        ??_DecP_2
   \                     ??_DecP_1:
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Left,??_Left??rA
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0400001A           BNE      ??_DecP_3
   \   00000050   0400B0E1           MOVS     R0,R4
   \   00000054   ........           _BLF     ??_Left,??_Left??rA
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     ??_Max,??_Max??rA
   \   00000060   170000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \                     ??_DecP_4:
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0050B0E1           MOVS     R5,R0
   \   00000074   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0600001A           BNE      ??_DecP_5
   \   00000088   0500B0E1           MOVS     R0,R5
   \   0000008C   ........           _BLF     ??_Left,??_Left??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0100001A           BNE      ??_DecP_5
   \   0000009C   0540B0E1           MOVS     R4,R5
   \   000000A0   EFFFFFEA           B        ??_DecP_4
   \                     ??_DecP_5:
   \   000000A4   0500B0E1           MOVS     R0,R5
   \   000000A8   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   000000AC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0000001A           BNE      ??_DecP_6
   \   000000BC   0540B0E1           MOVS     R4,R5
   \                     ??_DecP_6:
   \   000000C0   0400B0E1           MOVS     R0,R4
   \                     ??_DecP_2:
   \   000000C4   3040BDE8           POP      {R4,R5,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_GenIter:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
   \                     `??operator==`:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   0100001A           BNE      `??operator==_2`
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   000000EA           B        `??operator==_3`
   \                     `??operator==_2`:
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     `??operator==_3`:
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_GenIter::_Dec()
   \                     ??_Dec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     ??_DecP,??_DecP??rA
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
   \                     ??_Mynode:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Root()
   \                     ??_Root:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Lmost()
   \                     ??_Lmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Left,??_Left??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genpref _Tree_algobase<allocator<void>>::_Rmost()
   \                     ??_Rmost:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Right,??_Right??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Left,??_Left??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Left,??_Left??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Right,??_Right??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Right,??_Right??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Rrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Right,??_Right??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Rrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Rrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Right,??_Right??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Rrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Right,??_Right??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Rrotate_3
   \                     ??_Rrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Left,??_Left??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Rrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Right,??_Right??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??_Right,??_Right??rA
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   ........           _BLF     ??_Right,??_Right??rA
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   0600B0E1           MOVS     R0,R6
   \   0000002C   ........           _BLF     ??_Left,??_Left??rA
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000087E5           STR      R0,[R7, #+0]
   \   00000038   0600B0E1           MOVS     R0,R6
   \   0000003C   ........           _BLF     ??_Left,??_Left??rA
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0400001A           BNE      ??_Lrotate_1
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000068   005080E5           STR      R5,[R0, #+0]
   \                     ??_Lrotate_1:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000074   0070B0E1           MOVS     R7,R0
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000087E5           STR      R0,[R7, #+0]
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           _BLF     ??_Root,??_Root??rA
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000055E1           CMP      R5,R0
   \   00000098   0300001A           BNE      ??_Lrotate_2
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   ........           _BLF     ??_Root,??_Root??rA
   \   000000A4   006080E5           STR      R6,[R0, #+0]
   \   000000A8   110000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_2:
   \   000000AC   0500B0E1           MOVS     R0,R5
   \   000000B0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   ........           _BLF     ??_Left,??_Left??rA
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000055E1           CMP      R5,R0
   \   000000C4   0500001A           BNE      ??_Lrotate_4
   \   000000C8   0500B0E1           MOVS     R0,R5
   \   000000CC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000D0   000090E5           LDR      R0,[R0, #+0]
   \   000000D4   ........           _BLF     ??_Left,??_Left??rA
   \   000000D8   006080E5           STR      R6,[R0, #+0]
   \   000000DC   040000EA           B        ??_Lrotate_3
   \                     ??_Lrotate_4:
   \   000000E0   0500B0E1           MOVS     R0,R5
   \   000000E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           _BLF     ??_Right,??_Right??rA
   \   000000F0   006080E5           STR      R6,[R0, #+0]
   \                     ??_Lrotate_3:
   \   000000F4   0600B0E1           MOVS     R0,R6
   \   000000F8   ........           _BLF     ??_Left,??_Left??rA
   \   000000FC   005080E5           STR      R5,[R0, #+0]
   \   00000100   0500B0E1           MOVS     R0,R5
   \   00000104   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000108   006080E5           STR      R6,[R0, #+0]
   \   0000010C   F040BDE8           POP      {R4-R7,LR}
   \   00000110   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   100094E5           LDR      R0,[R4, #+16]
   \   00000018   010090E2           ADDS     R0,R0,#+1
   \   0000001C   100084E5           STR      R0,[R4, #+16]
   \   00000020   040056E1           CMP      R6,R4
   \   00000024   0900001A           BNE      ??_Insert_2
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     ??_Root,??_Root??rA
   \   00000030   007080E5           STR      R7,[R0, #+0]
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000003C   007080E5           STR      R7,[R0, #+0]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   00000048   007080E5           STR      R7,[R0, #+0]
   \   0000004C   180000EA           B        ??_Insert_3
   \                     ??_Insert_2:
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   0B00000A           BEQ      ??_Insert_4
   \   00000058   0600B0E1           MOVS     R0,R6
   \   0000005C   ........           _BLF     ??_Left,??_Left??rA
   \   00000060   007080E5           STR      R7,[R0, #+0]
   \   00000064   0400B0E1           MOVS     R0,R4
   \   00000068   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000056E1           CMP      R6,R0
   \   00000074   0E00001A           BNE      ??_Insert_3
   \   00000078   0400B0E1           MOVS     R0,R4
   \   0000007C   ........           _BLF     ??_Lmost,??_Lmost??rA
   \   00000080   007080E5           STR      R7,[R0, #+0]
   \   00000084   0A0000EA           B        ??_Insert_3
   \                     ??_Insert_4:
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     ??_Right,??_Right??rA
   \   00000090   007080E5           STR      R7,[R0, #+0]
   \   00000094   0400B0E1           MOVS     R0,R4
   \   00000098   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000056E1           CMP      R6,R0
   \   000000A4   0200001A           BNE      ??_Insert_3
   \   000000A8   0400B0E1           MOVS     R0,R4
   \   000000AC   ........           _BLF     ??_Rmost,??_Rmost??rA
   \   000000B0   007080E5           STR      R7,[R0, #+0]
   \                     ??_Insert_3:
   \   000000B4   0780B0E1           MOVS     R8,R7
   \                     ??_Insert_5:
   \   000000B8   0800B0E1           MOVS     R0,R8
   \   000000BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   ........           _BLF     ??_Color,??_Color??rA
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   A200001A           BNE      ??_Insert_6
   \   000000D8   0800B0E1           MOVS     R0,R8
   \   000000DC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000E0   0090B0E1           MOVS     R9,R0
   \   000000E4   0800B0E1           MOVS     R0,R8
   \   000000E8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   ........           _BLF     ??_Parent,??_Parent??rA
   \   000000F4   009099E5           LDR      R9,[R9, #+0]
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   ........           _BLF     ??_Left,??_Left??rA
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   000059E1           CMP      R9,R0
   \   00000108   4A00001A           BNE      ??_Insert_7
   \   0000010C   0800B0E1           MOVS     R0,R8
   \   00000110   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000011C   000090E5           LDR      R0,[R0, #+0]
   \   00000120   ........           _BLF     ??_Right,??_Right??rA
   \   00000124   000090E5           LDR      R0,[R0, #+0]
   \   00000128   0060B0E1           MOVS     R6,R0
   \   0000012C   0600B0E1           MOVS     R0,R6
   \   00000130   ........           _BLF     ??_Color,??_Color??rA
   \   00000134   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000138   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   1800001A           BNE      ??_Insert_8
   \   00000144   0800B0E1           MOVS     R0,R8
   \   00000148   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   ........           _BLF     ??_Color,??_Color??rA
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   0010C0E5           STRB     R1,[R0, #+0]
   \   0000015C   0600B0E1           MOVS     R0,R6
   \   00000160   ........           _BLF     ??_Color,??_Color??rA
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   0010C0E5           STRB     R1,[R0, #+0]
   \   0000016C   0800B0E1           MOVS     R0,R8
   \   00000170   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     ??_Color,??_Color??rA
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   0010C0E5           STRB     R1,[R0, #+0]
   \   0000018C   0800B0E1           MOVS     R0,R8
   \   00000190   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   0080B0E1           MOVS     R8,R0
   \   000001A4   C3FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   000001A8   0800B0E1           MOVS     R0,R8
   \   000001AC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001B0   000090E5           LDR      R0,[R0, #+0]
   \   000001B4   ........           _BLF     ??_Right,??_Right??rA
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000058E1           CMP      R8,R0
   \   000001C0   0600001A           BNE      ??_Insert_9
   \   000001C4   0800B0E1           MOVS     R0,R8
   \   000001C8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001CC   000090E5           LDR      R0,[R0, #+0]
   \   000001D0   0080B0E1           MOVS     R8,R0
   \   000001D4   0810B0E1           MOVS     R1,R8
   \   000001D8   0400B0E1           MOVS     R0,R4
   \   000001DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_9:
   \   000001E0   0800B0E1           MOVS     R0,R8
   \   000001E4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   ........           _BLF     ??_Color,??_Color??rA
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001F8   0800B0E1           MOVS     R0,R8
   \   000001FC   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000200   000090E5           LDR      R0,[R0, #+0]
   \   00000204   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   ........           _BLF     ??_Color,??_Color??rA
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   0010C0E5           STRB     R1,[R0, #+0]
   \   00000218   0800B0E1           MOVS     R0,R8
   \   0000021C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000228   001090E5           LDR      R1,[R0, #+0]
   \   0000022C   0400B0E1           MOVS     R0,R4
   \   00000230   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000234   9FFFFFEA           B        ??_Insert_5
   \                     ??_Insert_7:
   \   00000238   0800B0E1           MOVS     R0,R8
   \   0000023C   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000240   000090E5           LDR      R0,[R0, #+0]
   \   00000244   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000248   000090E5           LDR      R0,[R0, #+0]
   \   0000024C   ........           _BLF     ??_Left,??_Left??rA
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   0060B0E1           MOVS     R6,R0
   \   00000258   0600B0E1           MOVS     R0,R6
   \   0000025C   ........           _BLF     ??_Color,??_Color??rA
   \   00000260   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000264   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   1800001A           BNE      ??_Insert_10
   \   00000270   0800B0E1           MOVS     R0,R8
   \   00000274   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           _BLF     ??_Color,??_Color??rA
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   0010C0E5           STRB     R1,[R0, #+0]
   \   00000288   0600B0E1           MOVS     R0,R6
   \   0000028C   ........           _BLF     ??_Color,??_Color??rA
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   0010C0E5           STRB     R1,[R0, #+0]
   \   00000298   0800B0E1           MOVS     R0,R8
   \   0000029C   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A0   000090E5           LDR      R0,[R0, #+0]
   \   000002A4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002A8   000090E5           LDR      R0,[R0, #+0]
   \   000002AC   ........           _BLF     ??_Color,??_Color??rA
   \   000002B0   0010A0E3           MOV      R1,#+0
   \   000002B4   0010C0E5           STRB     R1,[R0, #+0]
   \   000002B8   0800B0E1           MOVS     R0,R8
   \   000002BC   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C0   000090E5           LDR      R0,[R0, #+0]
   \   000002C4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   0080B0E1           MOVS     R8,R0
   \   000002D0   78FFFFEA           B        ??_Insert_5
   \                     ??_Insert_10:
   \   000002D4   0800B0E1           MOVS     R0,R8
   \   000002D8   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002DC   000090E5           LDR      R0,[R0, #+0]
   \   000002E0   ........           _BLF     ??_Left,??_Left??rA
   \   000002E4   000090E5           LDR      R0,[R0, #+0]
   \   000002E8   000058E1           CMP      R8,R0
   \   000002EC   0600001A           BNE      ??_Insert_11
   \   000002F0   0800B0E1           MOVS     R0,R8
   \   000002F4   ........           _BLF     ??_Parent,??_Parent??rA
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   0080B0E1           MOVS     R8,R0
   \   00000300   0810B0E1           MOVS     R1,R8
   \   00000304   0400B0E1           MOVS     R0,R4
   \   00000308   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000030C   0800B0E1           MOVS     R0,R8
   \   00000310   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000314   000090E5           LDR      R0,[R0, #+0]
   \   00000318   ........           _BLF     ??_Color,??_Color??rA
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   0010C0E5           STRB     R1,[R0, #+0]
   \   00000324   0800B0E1           MOVS     R0,R8
   \   00000328   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000032C   000090E5           LDR      R0,[R0, #+0]
   \   00000330   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000334   000090E5           LDR      R0,[R0, #+0]
   \   00000338   ........           _BLF     ??_Color,??_Color??rA
   \   0000033C   0010A0E3           MOV      R1,#+0
   \   00000340   0010C0E5           STRB     R1,[R0, #+0]
   \   00000344   0800B0E1           MOVS     R0,R8
   \   00000348   ........           _BLF     ??_Parent,??_Parent??rA
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   ........           _BLF     ??_Parent,??_Parent??rA
   \   00000354   001090E5           LDR      R1,[R0, #+0]
   \   00000358   0400B0E1           MOVS     R0,R4
   \   0000035C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000360   54FFFFEA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000364   0400B0E1           MOVS     R0,R4
   \   00000368   ........           _BLF     ??_Root,??_Root??rA
   \   0000036C   000090E5           LDR      R0,[R0, #+0]
   \   00000370   ........           _BLF     ??_Color,??_Color??rA
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   0010C0E5           STRB     R1,[R0, #+0]
   \   0000037C   F043BDE8           POP      {R4-R9,LR}
   \   00000380   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs less<AlarmBasic *> &_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
   \                     ??comp:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   140094E2           ADDS     R0,R4,#+20
   \   0000000C   ........           _BLF     `??operator less<AlarmBasic *> &`,`??operator less<AlarmBasic *> &??rA`
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
   \                     ??_Node:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   1C809DE5           LDR      R8,[SP, #+28]
   \   00000018   2090DDE5           LDRB     R9,[SP, #+32]
   \   0000001C   0900B0E1           MOVS     R0,R9
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0730B0E1           MOVS     R3,R7
   \   00000028   0620B0E1           MOVS     R2,R6
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_GenNode,??_GenNode??rA
   \   00000038   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000003C   108084E5           STR      R8,[R4, #+16]
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F043BDE8           POP      {R4-R9,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
   \                     ??_Kfn:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Kfn_1,??_Kfn??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
   \                     ??_Alnod:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0D10B0E1           MOVS     R1,SP
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Alval,??_Alval??rA
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           _BLF     ??allocator,??allocator??rA_1
   \   00000028   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char & _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Isnil_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Isnil,??_Isnil??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Myval,??_Myval??rA
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Left_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Parent_1:
   \   00000000   040090E2           ADDS     R0,R0,#+4
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Right_1:
   \   00000000   080090E2           ADDS     R0,R0,#+8
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic *& _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Myval:
   \   00000000   100090E2           ADDS     R0,R0,#+16
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??const_iterator:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_GenIter,??_GenIter??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
   \                     `??operator==_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     `??operator==`,`??operator==??rA`
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
   \                     ??_Mynode_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Mynode,??_Mynode??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
   \                     ??iterator:
   \   00000000   001091E5           LDR      R1,[R1, #+0]
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??iterator_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??const_iterator,??const_iterator??rA
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   3040BDE8           POP      {R4,R5,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator &_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
   \                     `??operator--`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Dec,??_Dec??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
   \                     ??begin:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??_Lmost_1,??_Lmost??rA_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
   \                     ??max_size_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??max_size,??max_size??rA
   \   00000020   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0080B0E1           MOVS     R8,R0
   \   0000000C   0140B0E1           MOVS     R4,R1
   \   00000010   0290B0E1           MOVS     R9,R2
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   ........           _BLF     ??_Root_1,??_Root??rA_1
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   0060B0E1           MOVS     R6,R0
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0070B0E1           MOVS     R7,R0
   \                     ??insert_1:
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   ........           _BLF     ??_Isnil_1,??_Isnil??rA_1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1800001A           BNE      ??insert_2
   \   00000050   0560B0E1           MOVS     R6,R5
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??_Key,??_Key??rA
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   0900B0E1           MOVS     R0,R9
   \   00000064   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000068   00B0B0E1           MOVS     R11,R0
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   ........           _BLF     ??comp,??comp??rA
   \   00000074   0A20B0E1           MOVS     R2,R10
   \   00000078   0B10B0E1           MOVS     R1,R11
   \   0000007C   ........           _BLF     `??operator()`,`??operator()??rA`
   \   00000080   0070B0E1           MOVS     R7,R0
   \   00000084   000057E3           CMP      R7,#+0
   \   00000088   0400000A           BEQ      ??insert_3
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   0050B0E1           MOVS     R5,R0
   \   0000009C   E5FFFFEA           B        ??insert_1
   \                     ??insert_3:
   \   000000A0   0500B0E1           MOVS     R0,R5
   \   000000A4   ........           _BLF     ??_Right_1,??_Right??rA_1
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   0050B0E1           MOVS     R5,R0
   \   000000B0   E0FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   000000B4   0610B0E1           MOVS     R1,R6
   \   000000B8   0D00B0E1           MOVS     R0,SP
   \   000000BC   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   000000C0   000057E3           CMP      R7,#+0
   \   000000C4   1800000A           BEQ      ??insert_4
   \   000000C8   0400B0E1           MOVS     R0,R4
   \   000000CC   ........           _BLF     ??begin,??begin??rA
   \   000000D0   0C008DE5           STR      R0,[SP, #+12]
   \   000000D4   0C108DE2           ADD      R1,SP,#+12
   \   000000D8   0D00B0E1           MOVS     R0,SP
   \   000000DC   ........           _BLF     `??operator==_1`,`??operator==??rA_1`
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0E00000A           BEQ      ??insert_5
   \   000000E8   0930B0E1           MOVS     R3,R9
   \   000000EC   0620B0E1           MOVS     R2,R6
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   000000FC   08008DE5           STR      R0,[SP, #+8]
   \   00000100   0120A0E3           MOV      R2,#+1
   \   00000104   08108DE2           ADD      R1,SP,#+8
   \   00000108   20008DE2           ADD      R0,SP,#+32
   \   0000010C   ........           _BLF     ??pair,??pair??rA
   \   00000110   20008DE2           ADD      R0,SP,#+32
   \   00000114   030090E8           LDM      R0,{R0,R1}
   \   00000118   030088E8           STM      R8,{R0,R1}
   \   0000011C   0800B0E1           MOVS     R0,R8
   \   00000120   260000EA           B        ??insert_6
   \                     ??insert_5:
   \   00000124   0D00B0E1           MOVS     R0,SP
   \   00000128   ........           _BLF     `??operator--`,`??operator--??rA`
   \                     ??insert_4:
   \   0000012C   0900B0E1           MOVS     R0,R9
   \   00000130   ........           _BLF     ??_Kfn,??_Kfn??rA_1
   \   00000134   00A0B0E1           MOVS     R10,R0
   \   00000138   0D00B0E1           MOVS     R0,SP
   \   0000013C   ........           _BLF     ??_Mynode_1,??_Mynode??rA_1
   \   00000140   ........           _BLF     ??_Key,??_Key??rA
   \   00000144   00B0B0E1           MOVS     R11,R0
   \   00000148   0400B0E1           MOVS     R0,R4
   \   0000014C   ........           _BLF     ??comp,??comp??rA
   \   00000150   0A20B0E1           MOVS     R2,R10
   \   00000154   0B10B0E1           MOVS     R1,R11
   \   00000158   ........           _BLF     `??operator()`,`??operator()??rA`
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   0E00000A           BEQ      ??insert_7
   \   00000164   0930B0E1           MOVS     R3,R9
   \   00000168   0620B0E1           MOVS     R2,R6
   \   0000016C   0710B0E1           MOVS     R1,R7
   \   00000170   0400B0E1           MOVS     R0,R4
   \   00000174   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000178   04008DE5           STR      R0,[SP, #+4]
   \   0000017C   0120A0E3           MOV      R2,#+1
   \   00000180   04108DE2           ADD      R1,SP,#+4
   \   00000184   18008DE2           ADD      R0,SP,#+24
   \   00000188   ........           _BLF     ??pair,??pair??rA
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   030090E8           LDM      R0,{R0,R1}
   \   00000194   030088E8           STM      R8,{R0,R1}
   \   00000198   0800B0E1           MOVS     R0,R8
   \   0000019C   070000EA           B        ??insert_6
   \                     ??insert_7:
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0D10B0E1           MOVS     R1,SP
   \   000001A8   10008DE2           ADD      R0,SP,#+16
   \   000001AC   ........           _BLF     ??pair,??pair??rA
   \   000001B0   10008DE2           ADD      R0,SP,#+16
   \   000001B4   030090E8           LDM      R0,{R0,R1}
   \   000001B8   030088E8           STM      R8,{R0,R1}
   \   000001BC   0800B0E1           MOVS     R0,R8
   \                     ??insert_6:
   \   000001C0   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   000001C4   F04FBDE8           POP      {R4-R11,LR}
   \   000001C8   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     ??max_size_1,??max_size??rA_1
   \   00000020   0090B0E1           MOVS     R9,R0
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Head,??_Head??rA
   \   0000002C   00A0B0E1           MOVS     R10,R0
   \   00000030   0400B0E1           MOVS     R0,R4
   \   00000034   ........           _BLF     ??_Head,??_Head??rA
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0710B0E1           MOVS     R1,R7
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0A30B0E1           MOVS     R3,R10
   \   0000004C   0620B0E1           MOVS     R2,R6
   \   00000050   0010B0E1           MOVS     R1,R0
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??_Buynode,??_Buynode??rA
   \   0000005C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000060   0080B0E1           MOVS     R8,R0
   \   00000064   0830B0E1           MOVS     R3,R8
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0400B0E1           MOVS     R0,R4
   \   00000074   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000078   0810B0E1           MOVS     R1,R8
   \   0000007C   0D00B0E1           MOVS     R0,SP
   \   00000080   ........           _BLF     ??iterator_1,??iterator??rA_1
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
   \                     ??_Lmost_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Left_1,??_Left??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodepref _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
   \                     ??_Root_1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??_Head,??_Head??rA
   \   00000010   ........           _BLF     ??_Parent_1,??_Parent??rA_1
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
   \                     ??_Head:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
   \                     ??_Buynode:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
   \   00000018   28809DE5           LDR      R8,[SP, #+40]
   \   0000001C   2C90DDE5           LDRB     R9,[SP, #+44]
   \   00000020   0D10B0E1           MOVS     R1,SP
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           _BLF     ??_Alnod,??_Alnod??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??allocate_1,??allocate??rA_1
   \   00000038   00A0B0E1           MOVS     R10,R0
   \   0000003C   0A10B0E1           MOVS     R1,R10
   \   00000040   1400A0E3           MOV      R0,#+20
   \   00000044   ........           _BLF     `??operator new`,`??operator new??rA_1`
   \   00000048   00B0B0E1           MOVS     R11,R0
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0A00000A           BEQ      ??_Buynode_1
   \   00000054   0900B0E1           MOVS     R0,R9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800B0E1           MOVS     R0,R8
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0730B0E1           MOVS     R3,R7
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   0B00B0E1           MOVS     R0,R11
   \   00000074   ........           _BLF     ??_Node,??_Node??rA
   \   00000078   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000007C   000000EA           B        ??_Buynode_2
   \                     ??_Buynode_1:
   \   00000080   00B0A0E3           MOV      R11,#+0
   \                     ??_Buynode_2:
   \   00000084   0A00B0E1           MOVS     R0,R10
   \   00000088   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000008C   F04FBDE8           POP      {R4-R11,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic * _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
   \                     ??_Kfn_1:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=_1`,`??operator+=??rA_1`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIAirPurgePressSensor::AIAirPurgePressSensor(void)
   \                     ??AIAirPurgePressSensor:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
     10          {
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??AIPressSensor,??AIPressSensor??rA
   \   00000018   8C009FE5           LDR      R0,??AIAirPurgePressSensor_1  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     11              Type                        = C_AI_AirPurge;
   \   00000020   7D00A0E3           MOV      R0,#+125
   \   00000024   800E80E3           ORR      R0,R0,#0x800
   \   00000028   A00084E5           STR      R0,[R4, #+160]
     12              IOType                      = C_IO_MODBUS;
   \   0000002C   1A00A0E3           MOV      R0,#+26
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   FC0084E5           STR      R0,[R4, #+252]
     13              BasicSensorTypeWord         = L_WORD996;//Air
   \   00000038   F90FA0E3           MOV      R0,#+996
   \   0000003C   140184E5           STR      R0,[R4, #+276]
     14              Location                    = C_AI_LOC_BOTTOM;
   \   00000040   DF00A0E3           MOV      R0,#+223
   \   00000044   800E80E3           ORR      R0,R0,#0x800
   \   00000048   280184E5           STR      R0,[R4, #+296]
     15              MinRange                    = 0.0;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   5C0184E5           STR      R0,[R4, #+348]
     16              MaxRange                    = 100.0;
   \   00000054   4004A0E3           MOV      R0,#+1073741824
   \   00000058   B20780E3           ORR      R0,R0,#0x2C80000
   \   0000005C   600184E5           STR      R0,[R4, #+352]
     17              AlAirPurgeSensorFailurePtr  = new AlarmAirPurgeSensorFailure(this);
   \   00000060   F000A0E3           MOV      R0,#+240
   \   00000064   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   00000068   0050B0E1           MOVS     R5,R0
   \   0000006C   000055E3           CMP      R5,#+0
   \   00000070   0300000A           BEQ      ??AIAirPurgePressSensor_2
   \   00000074   0410B0E1           MOVS     R1,R4
   \   00000078   0500B0E1           MOVS     R0,R5
   \   0000007C   ........           _BLF     ??AlarmAirPurgeSensorFailure,??AlarmAirPurgeSensorFailure??rA
   \   00000080   000000EA           B        ??AIAirPurgePressSensor_3
   \                     ??AIAirPurgePressSensor_2:
   \   00000084   0050A0E3           MOV      R5,#+0
   \                     ??AIAirPurgePressSensor_3:
   \   00000088   C05184E5           STR      R5,[R4, #+448]
     18              AlarmSet.insert(AlAirPurgeSensorFailurePtr);
   \   0000008C   C02194E5           LDR      R2,[R4, #+448]
   \   00000090   C01094E2           ADDS     R1,R4,#+192
   \   00000094   0D00B0E1           MOVS     R0,SP
   \   00000098   ........           _BLF     ??insert,??insert??rA
     19          }
   \   0000009C   0400B0E1           MOVS     R0,R4
   \   000000A0   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000A4   3040BDE8           POP      {R4,R5,LR}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??AIAirPurgePressSensor_1:
   \   000000AC   ........           DC32     ??__vtbl
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          AIAirPurgePressSensor::~AIAirPurgePressSensor(void)
     22          {
   \                     `?~AIAirPurgePressSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AIAirPurgePressSensor_1`
     23          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AIPressSensor`,`?~AIPressSensor??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AIAirPurgePressSensor_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIAirPurgePressSensor_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     24          
     25          ///////////////////////////////////////////////////////////////
     26          //
     27          // Routines for the librarian for input
     28          //
     29          ///////////////////////////////////////////////////////////////
     30          
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          int AIAirPurgePressSensor::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   01A0B0E1           MOVS     R10,R1
   \   00000010   02B0B0E1           MOVS     R11,R2
   \   00000014   0390B0E1           MOVS     R9,R3
   \   00000018   8050DDE5           LDRB     R5,[SP, #+128]
   \   0000001C   84609DE5           LDR      R6,[SP, #+132]
     33              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
     34              switch (ValueId) {
   \   00000030   0A00B0E1           MOVS     R0,R10
   \   00000034   B50040E2           SUB      R0,R0,#+181
   \   00000038   400E40E2           SUB      R0,R0,#+1024
   \   0000003C   030050E3           CMP      R0,#+3
   \   00000040   3200008A           BHI      ??PutValue_3
   \   00000044   011F8FE2           ADR      R1,??PutValue_1
   \   00000048   0010D1E7           LDRB     R1,[R1, R0]
   \   0000004C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   00000050   002F2F1B           DC8      +0,+47,+47,+27
     35              case SVT_AI_OFFSET   :
     36                  Offset = ConvertToSi(NewValue, ValUnitId = PRESSURE_UNIT2, Status, -5.0, 5.0, Offset);
   \                     ??PutValue_4:
   \   00000054   0770A0E3           MOV      R7,#+7
   \   00000058   04708DE5           STR      R7,[SP, #+4]
   \   0000005C   0910B0E1           MOVS     R1,R9
   \   00000060   40008DE2           ADD      R0,SP,#+64
   \   00000064   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000068   0080B0E1           MOVS     R8,R0
   \   0000006C   400194E5           LDR      R0,[R4, #+320]
   \   00000070   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000074   03002DE9           PUSH     {R0,R1}
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   4014A0E3           MOV      R1,#+1073741824
   \   00000080   501981E3           ORR      R1,R1,#0x140000
   \   00000084   03002DE9           PUSH     {R0,R1}
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   C014A0E3           MOV      R1,#-1073741824
   \   00000090   501981E3           ORR      R1,R1,#0x140000
   \   00000094   03002DE9           PUSH     {R0,R1}
   \   00000098   18208DE2           ADD      R2,SP,#+24
   \   0000009C   0710B0E1           MOVS     R1,R7
   \   000000A0   0800B0E1           MOVS     R0,R8
   \   000000A4   0800BDE8           POP      {R3}
   \   000000A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000AC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   000000B0   400184E5           STR      R0,[R4, #+320]
   \   000000B4   40008DE2           ADD      R0,SP,#+64
   \   000000B8   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000BC   230000EA           B        ??PutValue_5
     37                  break;
     38              case SVT_AI_CALC_VAL :
     39                  Status = AdjustSensor(NewValue, ValUnitId = PRESSURE_UNIT2, 0.0, 50.0, Local);
   \                     ??PutValue_6:
   \   000000C0   0770A0E3           MOV      R7,#+7
   \   000000C4   04708DE5           STR      R7,[SP, #+4]
   \   000000C8   0910B0E1           MOVS     R1,R9
   \   000000CC   24008DE2           ADD      R0,SP,#+36
   \   000000D0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000D4   0510B0E1           MOVS     R1,R5
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   4014A0E3           MOV      R1,#+1073741824
   \   000000E0   921781E3           ORR      R1,R1,#0x2480000
   \   000000E4   02002DE9           PUSH     {R1}
   \   000000E8   0030A0E3           MOV      R3,#+0
   \   000000EC   0720B0E1           MOVS     R2,R7
   \   000000F0   0010B0E1           MOVS     R1,R0
   \   000000F4   0400B0E1           MOVS     R0,R4
   \   000000F8   ........           _BLF     ??AdjustSensor,??AdjustSensor??rA
   \   000000FC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000100   00008DE5           STR      R0,[SP, #+0]
   \   00000104   24008DE2           ADD      R0,SP,#+36
   \   00000108   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000010C   0F0000EA           B        ??PutValue_5
     40                  break;
     41              default:
     42                  Status = AnalogInput::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   00000110   0910B0E1           MOVS     R1,R9
   \   00000114   08008DE2           ADD      R0,SP,#+8
   \   00000118   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000011C   0030B0E1           MOVS     R3,R0
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0500B0E1           MOVS     R0,R5
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0B20B0E1           MOVS     R2,R11
   \   00000134   0A10B0E1           MOVS     R1,R10
   \   00000138   0400B0E1           MOVS     R0,R4
   \   0000013C   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000140   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000144   00008DE5           STR      R0,[SP, #+0]
   \   00000148   08008DE2           ADD      R0,SP,#+8
   \   0000014C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     43                  break;
     44              }
     45              if (Status == E_NO_ERR) {
   \                     ??PutValue_5:
   \   00000150   00009DE5           LDR      R0,[SP, #+0]
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   0500001A           BNE      ??PutValue_7
     46                  SetModifiedFlag();
   \   0000015C   A40094E5           LDR      R0,[R4, #+164]
   \   00000160   541090E2           ADDS     R1,R0,#+84
   \   00000164   0400B0E1           MOVS     R0,R4
   \   00000168   001091E5           LDR      R1,[R1, #+0]
   \   0000016C   0FE0A0E1           MOV      LR,PC
   \   00000170   11FF2FE1           BX       R1
     47              }
     48              if (UnitId) {
   \                     ??PutValue_7:
   \   00000174   000056E3           CMP      R6,#+0
   \   00000178   0100000A           BEQ      ??PutValue_8
     49                  *UnitId = ValUnitId;
   \   0000017C   04009DE5           LDR      R0,[SP, #+4]
   \   00000180   000086E5           STR      R0,[R6, #+0]
     50              }
     51              return (Status);
   \                     ??PutValue_8:
   \   00000184   00009DE5           LDR      R0,[SP, #+0]
   \   00000188   5CD08DE2           ADD      SP,SP,#+92       ;; stack cleaning
   \   0000018C   F04FBDE8           POP      {R4-R11,LR}
   \   00000190   1EFF2FE1           BX       LR               ;; return
     52          }
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          int  AIAirPurgePressSensor::GetValue(int ValueId, int Index, float& MyRetValue, int& DecPnt, int& Unit) {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
     55              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
     56              switch (ValueId) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   8210A0E3           MOV      R1,#+130
   \   0000002C   401E81E3           ORR      R1,R1,#0x400
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   1F00000A           BEQ      ??GetValue_2
   \   00000038   8310A0E3           MOV      R1,#+131
   \   0000003C   401E81E3           ORR      R1,R1,#0x400
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   1B00000A           BEQ      ??GetValue_2
   \   00000048   8410A0E3           MOV      R1,#+132
   \   0000004C   401E81E3           ORR      R1,R1,#0x400
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   1700000A           BEQ      ??GetValue_2
   \   00000058   8510A0E3           MOV      R1,#+133
   \   0000005C   401E81E3           ORR      R1,R1,#0x400
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   2B00000A           BEQ      ??GetValue_3
   \   00000068   8710A0E3           MOV      R1,#+135
   \   0000006C   401E81E3           ORR      R1,R1,#0x400
   \   00000070   010050E1           CMP      R0,R1
   \   00000074   2700000A           BEQ      ??GetValue_3
   \   00000078   B510A0E3           MOV      R1,#+181
   \   0000007C   401E81E3           ORR      R1,R1,#0x400
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   0400000A           BEQ      ??GetValue_4
   \   00000088   B810A0E3           MOV      R1,#+184
   \   0000008C   401E81E3           ORR      R1,R1,#0x400
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   1300000A           BEQ      ??GetValue_5
   \   00000098   260000EA           B        ??GetValue_6
     57              case SVT_AI_OFFSET   :
     58                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   0000009C   400194E5           LDR      R0,[R4, #+320]
   \   000000A0   000087E5           STR      R0,[R7, #+0]
     59                  DecPnt     = 3;
   \   000000A4   0300A0E3           MOV      R0,#+3
   \   000000A8   000088E5           STR      R0,[R8, #+0]
     60                  Unit       = PRESSURE_UNIT2;
   \   000000AC   0700A0E3           MOV      R0,#+7
   \   000000B0   000089E5           STR      R0,[R9, #+0]
   \   000000B4   2A0000EA           B        ??GetValue_7
     61                  break;
     62              case SVT_AP_LEVEL_PRESSURE_MH2O:
     63              case SVT_AP_TANK_PRESSURE_MB   :
     64              case SVT_AP_LEVEL_PRESSURE_MB  :
     65                  MyRetValue = Calculate();
   \                     ??GetValue_2:
   \   000000B8   A40094E5           LDR      R0,[R4, #+164]
   \   000000BC   601090E2           ADDS     R1,R0,#+96
   \   000000C0   0400B0E1           MOVS     R0,R4
   \   000000C4   001091E5           LDR      R1,[R1, #+0]
   \   000000C8   0FE0A0E1           MOV      LR,PC
   \   000000CC   11FF2FE1           BX       R1
   \   000000D0   000087E5           STR      R0,[R7, #+0]
     66                  DecPnt     = 3;
   \   000000D4   0300A0E3           MOV      R0,#+3
   \   000000D8   000088E5           STR      R0,[R8, #+0]
     67                  Unit       = PRESSURE_UNIT2;
   \   000000DC   0700A0E3           MOV      R0,#+7
   \   000000E0   000089E5           STR      R0,[R9, #+0]
   \   000000E4   1E0000EA           B        ??GetValue_7
     68                  break;
     69          	case SVT_AI_CALC_VAL :
     70          		MyRetValue = Calculate();
   \                     ??GetValue_5:
   \   000000E8   A40094E5           LDR      R0,[R4, #+164]
   \   000000EC   601090E2           ADDS     R1,R0,#+96
   \   000000F0   0400B0E1           MOVS     R0,R4
   \   000000F4   001091E5           LDR      R1,[R1, #+0]
   \   000000F8   0FE0A0E1           MOV      LR,PC
   \   000000FC   11FF2FE1           BX       R1
   \   00000100   000087E5           STR      R0,[R7, #+0]
     71          		DecPnt     = 3;
   \   00000104   0300A0E3           MOV      R0,#+3
   \   00000108   000088E5           STR      R0,[R8, #+0]
     72          		Unit       = PRESSURE_UNIT2;
   \   0000010C   0700A0E3           MOV      R0,#+7
   \   00000110   000089E5           STR      R0,[R9, #+0]
   \   00000114   120000EA           B        ??GetValue_7
     73          		break;
     74          	case SVT_AP_TPRESS_SNS_FAIL    :
     75          	case SVT_AP_LPRESS_SNS_FAIL    :
     76          		MyRetValue = Failure;
   \                     ??GetValue_3:
   \   00000118   3801D4E5           LDRB     R0,[R4, #+312]
   \   0000011C   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000120   000087E5           STR      R0,[R7, #+0]
     77          		DecPnt     = 0;
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   000088E5           STR      R0,[R8, #+0]
     78          		Unit       = NO_UNIT;
   \   0000012C   0000A0E3           MOV      R0,#+0
   \   00000130   000089E5           STR      R0,[R9, #+0]
   \   00000134   0A0000EA           B        ??GetValue_7
     79          		break;
     80          	default:
     81                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_6:
   \   00000138   0900B0E1           MOVS     R0,R9
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   0800B0E1           MOVS     R0,R8
   \   00000144   01002DE9           PUSH     {R0}
   \   00000148   0730B0E1           MOVS     R3,R7
   \   0000014C   0620B0E1           MOVS     R2,R6
   \   00000150   0510B0E1           MOVS     R1,R5
   \   00000154   0400B0E1           MOVS     R0,R4
   \   00000158   ........           _BLF     ??GetValue_1,??GetValue??rA
   \   0000015C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   00000160   00A0B0E1           MOVS     R10,R0
     82                  break;
     83              }
     84              return (Status);
   \                     ??GetValue_7:
   \   00000164   0A00B0E1           MOVS     R0,R10
   \   00000168   F047BDE8           POP      {R4-R10,LR}
   \   0000016C   1EFF2FE1           BX       LR               ;; return
     85          }
     86          

   \                                 In segment CODE, align 4, keep-with-next
     87          int AIAirPurgePressSensor::GetStringValue(int ValueId, int Index, AnsiString& MyString) {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   A8D04DE2           SUB      SP,SP,#+168
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
     88              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
     89              switch (ValueId) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   8510A0E3           MOV      R1,#+133
   \   00000028   401E81E3           ORR      R1,R1,#0x400
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   0600000A           BEQ      ??GetStringValue_2
   \   00000034   8710A0E3           MOV      R1,#+135
   \   00000038   401E81E3           ORR      R1,R1,#0x400
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   0200000A           BEQ      ??GetStringValue_2
   \   00000044   4C0E50E3           CMP      R0,#+1216
   \   00000048   2B00000A           BEQ      ??GetStringValue_3
   \   0000004C   330000EA           B        ??GetStringValue_4
     90          	case SVT_AP_TPRESS_SNS_FAIL    :
     91              case SVT_AP_LPRESS_SNS_FAIL    :
     92                  {
     93                      AnsiString tmpStr;
   \                     ??GetStringValue_2:
   \   00000050   38008DE2           ADD      R0,SP,#+56
   \   00000054   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
     94          			Status = AlAirPurgeSensorFailurePtr->GetStringValue(ValueId, Index, tmpStr);
   \   00000058   C00194E5           LDR      R0,[R4, #+448]
   \   0000005C   A40090E5           LDR      R0,[R0, #+164]
   \   00000060   28C090E2           ADDS     R12,R0,#+40
   \   00000064   38308DE2           ADD      R3,SP,#+56
   \   00000068   0620B0E1           MOVS     R2,R6
   \   0000006C   0510B0E1           MOVS     R1,R5
   \   00000070   C00194E5           LDR      R0,[R4, #+448]
   \   00000074   00C09CE5           LDR      R12,[R12, #+0]
   \   00000078   0FE0A0E1           MOV      LR,PC
   \   0000007C   1CFF2FE1           BX       R12
   \   00000080   0080B0E1           MOVS     R8,R0
     95                      if ( Status == GETVAL_NO_ERR ) {
   \   00000084   000058E3           CMP      R8,#+0
   \   00000088   1800001A           BNE      ??GetStringValue_5
     96                          MyString = AnsiString(Failure) + ":" + tmpStr;
   \   0000008C   3811D4E5           LDRB     R1,[R4, #+312]
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000098   2A2F8FE2           ADR      R2,??GetStringValue_6  ;; ":"
   \   0000009C   0010B0E1           MOVS     R1,R0
   \   000000A0   0D00B0E1           MOVS     R0,SP
   \   000000A4   ........           _BLF     `??operator+_1`,`??operator+??rA`
   \   000000A8   38208DE2           ADD      R2,SP,#+56
   \   000000AC   0D10B0E1           MOVS     R1,SP
   \   000000B0   1C008DE2           ADD      R0,SP,#+28
   \   000000B4   ........           _BLF     `??operator+`,`??operator+??rA_1`
   \   000000B8   1C108DE2           ADD      R1,SP,#+28
   \   000000BC   70008DE2           ADD      R0,SP,#+112
   \   000000C0   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000000C4   0010B0E1           MOVS     R1,R0
   \   000000C8   0700B0E1           MOVS     R0,R7
   \   000000CC   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   000000D0   70008DE2           ADD      R0,SP,#+112
   \   000000D4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   ........           _BLF     `?~string`,`?~string??rA`
   \   000000E0   0D00B0E1           MOVS     R0,SP
   \   000000E4   ........           _BLF     `?~string`,`?~string??rA`
   \   000000E8   54008DE2           ADD      R0,SP,#+84
   \   000000EC   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     97                      }
     98                  }
   \                     ??GetStringValue_5:
   \   000000F0   38008DE2           ADD      R0,SP,#+56
   \   000000F4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000F8   0E0000EA           B        ??GetStringValue_7
     99                  break;
    100              case SVT_AI_UNIT:
    101                  MyString = GetUnitName(PRESSURE_UNIT2);
   \                     ??GetStringValue_3:
   \   000000FC   0710A0E3           MOV      R1,#+7
   \   00000100   8C008DE2           ADD      R0,SP,#+140
   \   00000104   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000108   8C108DE2           ADD      R1,SP,#+140
   \   0000010C   0700B0E1           MOVS     R0,R7
   \   00000110   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000114   8C008DE2           ADD      R0,SP,#+140
   \   00000118   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000011C   050000EA           B        ??GetStringValue_7
    102                  break;
    103              default:
    104                  Status = AnalogInput::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_4:
   \   00000120   0730B0E1           MOVS     R3,R7
   \   00000124   0620B0E1           MOVS     R2,R6
   \   00000128   0510B0E1           MOVS     R1,R5
   \   0000012C   0400B0E1           MOVS     R0,R4
   \   00000130   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000134   0080B0E1           MOVS     R8,R0
    105                  break;
    106              }
    107              return (Status);
   \                     ??GetStringValue_7:
   \   00000138   0800B0E1           MOVS     R0,R8
   \   0000013C   A8D08DE2           ADD      SP,SP,#+168      ;; stack cleaning
   \   00000140   F041BDE8           POP      {R4-R8,LR}
   \   00000144   1EFF2FE1           BX       LR               ;; return
   \                     ??GetStringValue_6:
   \   00000148   3A000000           DC8      ":",+0,+0
    108          }
    109          
    110          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    111          int AIAirPurgePressSensor::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0270B0E1           MOVS     R7,R2
    112              int Status = E_NO_ERR;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0060B0E1           MOVS     R6,R0
    113              switch (ValueId) {
   \   00000018   0500B0E1           MOVS     R0,R5
   \   0000001C   820040E2           SUB      R0,R0,#+130
   \   00000020   400E40E2           SUB      R0,R0,#+1024
   \   00000024   050050E3           CMP      R0,#+5
   \   00000028   2000008A           BHI      ??PutFloatValue_3
   \   0000002C   011F8FE2           ADR      R1,??PutFloatValue_1
   \   00000030   0010D1E7           LDRB     R1,[R1, R0]
   \   00000034   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutFloatValue_1:
   \   00000038   08010110           DC8      +8,+1,+1,+16
   \   0000003C   1D100000           DC8      +29,+16,+0,+0
    114              case SVT_AP_TANK_PRESSURE_MB:
    115              case SVT_AP_LEVEL_PRESSURE_MB:
    116                  NewValue /= MH2O_TO_MBAR;
   \                     ??PutFloatValue_4:
   \   00000040   0700B0E1           MOVS     R0,R7
   \   00000044   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000048   80209FE5           LDR      R2,??PutFloatValue_5  ;; 0xffffffff89374bc7
   \   0000004C   80309FE5           LDR      R3,??PutFloatValue_5+0x4  ;; 0x40588441
   \   00000050   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000054   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000058   0070B0E1           MOVS     R7,R0
    117              case SVT_AP_LEVEL_PRESSURE_MH2O:
    118                  FilteredValue = NewValue;
   \                     ??PutFloatValue_6:
   \   0000005C   447184E5           STR      R7,[R4, #+324]
    119                  ActiveAlarms = CheckAlarms(AlarmSet, &MyHWFailure);
   \   00000060   0D00A0E3           MOV      R0,#+13
   \   00000064   400F80E3           ORR      R0,R0,#0x100
   \   00000068   041090E0           ADDS     R1,R0,R4
   \   0000006C   C00094E2           ADDS     R0,R4,#+192
   \   00000070   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
   \   00000074   380084E5           STR      R0,[R4, #+56]
   \   00000078   110000EA           B        ??PutFloatValue_7
    120                 break;
    121              case SVT_AP_TPRESS_SNS_FAIL    :
    122              case SVT_AP_LPRESS_SNS_FAIL    :
    123                  if (NewValue) {
   \                     ??PutFloatValue_8:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   0710B0E1           MOVS     R1,R7
   \   00000084   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0300000A           BEQ      ??PutFloatValue_9
    124          			Failure |= AIR_PURGE_SNS_FAIL;
   \   00000090   3801D4E5           LDRB     R0,[R4, #+312]
   \   00000094   010090E3           ORRS     R0,R0,#0x1
   \   00000098   3801C4E5           STRB     R0,[R4, #+312]
   \   0000009C   080000EA           B        ??PutFloatValue_7
    125                  }else{
    126          			Failure &= (~AIR_PURGE_SNS_FAIL)&0xff;
   \                     ??PutFloatValue_9:
   \   000000A0   3801D4E5           LDRB     R0,[R4, #+312]
   \   000000A4   FE0010E2           ANDS     R0,R0,#0xFE
   \   000000A8   3801C4E5           STRB     R0,[R4, #+312]
   \   000000AC   040000EA           B        ??PutFloatValue_7
    127                  }
    128                  break;
    129              default:
    130                  Status = AnalogInput::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_3:
   \   000000B0   0720B0E1           MOVS     R2,R7
   \   000000B4   0510B0E1           MOVS     R1,R5
   \   000000B8   0400B0E1           MOVS     R0,R4
   \   000000BC   ........           _BLF     ??PutFloatValue_2,??PutFloatValue??rA
   \   000000C0   0060B0E1           MOVS     R6,R0
    131                  break;
    132              }
    133              return (Status);
   \                     ??PutFloatValue_7:
   \   000000C4   0600B0E1           MOVS     R0,R6
   \   000000C8   F040BDE8           POP      {R4-R7,LR}
   \   000000CC   1EFF2FE1           BX       LR               ;; return
   \                     ??PutFloatValue_5:
   \   000000D0   C74B3789           DC32     0xffffffff89374bc7
   \   000000D4   41845840           DC32     0x40588441
    134          
    135          }
    136          
    137          //---------------------------------------------------------------------------
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          float AIAirPurgePressSensor::Calculate(void)
    140          {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    141              if ( CanCalculate() && !Failure ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1400000A           BEQ      ??Calculate_1
   \   00000018   3801D4E5           LDRB     R0,[R4, #+312]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1100001A           BNE      ??Calculate_1
    142                  // This value should be checked for alarm
    143                  float RawCalcValue = Gain*FilteredValue-Offset;
   \   00000024   3C1194E5           LDR      R1,[R4, #+316]
   \   00000028   440194E5           LDR      R0,[R4, #+324]
   \   0000002C   ........           _BLF     __fMul,??__fMul??rA
   \   00000030   401194E5           LDR      R1,[R4, #+320]
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   0050B0E1           MOVS     R5,R0
    144                  if (RawCalcValue < 0.0) {
   \   0000003C   0500B0E1           MOVS     R0,R5
   \   00000040   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   ........           _BLF     __dLess,??__dLess??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0100000A           BEQ      ??Calculate_2
    145                      RawCalcValue = 0.0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0050B0E1           MOVS     R5,R0
    146                  }
    147                  CalcValue = RawCalcValue;
   \                     ??Calculate_2:
   \   00000060   485184E5           STR      R5,[R4, #+328]
    148                  ResultOK  = true;
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   3601C4E5           STRB     R0,[R4, #+310]
    149          
    150              }
    151              return(CalcValue);
   \                     ??Calculate_1:
   \   0000006C   480194E5           LDR      R0,[R4, #+328]
   \   00000070   3040BDE8           POP      {R4,R5,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    152          
    153          }
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          int AIAirPurgePressSensor::ReceiveData(U8* data)
    156          {
   \                     ??ReceiveData:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    157              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
   \   00000010   0560B0E1           MOVS     R6,R5
    158              switch ( pCH->CommandNo ) {
   \   00000014   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000018   0010D6E5           LDRB     R1,[R6, #+0]
   \   0000001C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000020   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000024   2008B0E1           MOVS     R0,R0, LSR #+16
   \   00000028   650050E3           CMP      R0,#+101
   \   0000002C   3A00001A           BNE      ??ReceiveData_2
    159              case CMD_GENERIC_REALTIME_DATA:
    160                  {
    161                      ANPRO10_COMMAND_2508  *pData = (ANPRO10_COMMAND_2508*) data;
   \                     ??ReceiveData_3:
   \   00000030   0570B0E1           MOVS     R7,R5
    162                      HWFailure       = pData->HWFailure;
   \   00000034   0800D7E5           LDRB     R0,[R7, #+8]
   \   00000038   0C01C4E5           STRB     R0,[R4, #+268]
    163                      MyHWFailure     = pData->MyHWFailure;
   \   0000003C   0900D7E5           LDRB     R0,[R7, #+9]
   \   00000040   0D01C4E5           STRB     R0,[R4, #+269]
    164                      ActiveAlarms    = pData->ActiveAlarms;
   \   00000044   0E00D7E5           LDRB     R0,[R7, #+14]
   \   00000048   0D10D7E5           LDRB     R1,[R7, #+13]
   \   0000004C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000050   0C10D7E5           LDRB     R1,[R7, #+12]
   \   00000054   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000058   0B10D7E5           LDRB     R1,[R7, #+11]
   \   0000005C   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000060   380084E5           STR      R0,[R4, #+56]
    165                      FilteredValue   = pData->FilteredValue;
   \   00000064   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_4:
   \   00000068   0D10B0E1           MOVS     R1,SP
   \   0000006C   072090E0           ADDS     R2,R0,R7
   \   00000070   1320D2E5           LDRB     R2,[R2, #+19]
   \   00000074   0120C0E7           STRB     R2,[R0, +R1]
   \   00000078   010090E2           ADDS     R0,R0,#+1
   \   0000007C   040050E3           CMP      R0,#+4
   \   00000080   F8FFFFBA           BLT      ??ReceiveData_4
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   440184E5           STR      R0,[R4, #+324]
    166                      CalcValue       = pData->CalcValue;
   \   0000008C   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_5:
   \   00000090   04108DE2           ADD      R1,SP,#+4
   \   00000094   072090E0           ADDS     R2,R0,R7
   \   00000098   0F20D2E5           LDRB     R2,[R2, #+15]
   \   0000009C   0120C0E7           STRB     R2,[R0, +R1]
   \   000000A0   010090E2           ADDS     R0,R0,#+1
   \   000000A4   040050E3           CMP      R0,#+4
   \   000000A8   F8FFFFBA           BLT      ??ReceiveData_5
   \   000000AC   04009DE5           LDR      R0,[SP, #+4]
   \   000000B0   480184E5           STR      R0,[R4, #+328]
    167                      ResultOK        = pData->ResultOK;
   \   000000B4   0A00D7E5           LDRB     R0,[R7, #+10]
   \   000000B8   3601C4E5           STRB     R0,[R4, #+310]
    168                      Failure         = pData->FreeValue;
   \   000000BC   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_6:
   \   000000C0   08108DE2           ADD      R1,SP,#+8
   \   000000C4   072090E0           ADDS     R2,R0,R7
   \   000000C8   1720D2E5           LDRB     R2,[R2, #+23]
   \   000000CC   0120C0E7           STRB     R2,[R0, +R1]
   \   000000D0   010090E2           ADDS     R0,R0,#+1
   \   000000D4   040050E3           CMP      R0,#+4
   \   000000D8   F8FFFFBA           BLT      ??ReceiveData_6
   \   000000DC   08009DE5           LDR      R0,[SP, #+8]
   \   000000E0   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000000E4   3801C4E5           STRB     R0,[R4, #+312]
    169                      // Only check alarm for Master TCU for now
    170                      if ( !CurrentDeviceAddress && CurrentDeviceId == DEVICE_TCU ) {
   \   000000E8   44009FE5           LDR      R0,??ReceiveData_7  ;; CurrentDeviceAddress
   \   000000EC   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0600001A           BNE      ??ReceiveData_8
   \   000000F8   38009FE5           LDR      R0,??ReceiveData_7+0x4  ;; CurrentDeviceId
   \   000000FC   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000100   200050E3           CMP      R0,#+32
   \   00000104   0200001A           BNE      ??ReceiveData_8
    171                          CheckAlarms(AlarmSet);
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   C00094E2           ADDS     R0,R4,#+192
   \   00000110   ........           _BLF     ??CheckAlarms,??CheckAlarms??rA
    172                      }
    173          
    174                  }
    175                  return(E_OK);
   \                     ??ReceiveData_8:
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   020000EA           B        ??ReceiveData_9
    176              default:
    177                  return AnalogInput::ReceiveData(data);
   \                     ??ReceiveData_2:
   \   0000011C   0510B0E1           MOVS     R1,R5
   \   00000120   0400B0E1           MOVS     R0,R4
   \   00000124   ........           _BLF     ??ReceiveData_1,??ReceiveData??rA
   \                     ??ReceiveData_9:
   \   00000128   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
   \   0000012C   F040BDE8           POP      {R4-R7,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
   \                     ??ReceiveData_7:
   \   00000134   ........           DC32     CurrentDeviceAddress
   \   00000138   ........           DC32     CurrentDeviceId
    178              };
    179          }

   \                                 In segment CODE, align 4, keep-with-next
    180          int AIAirPurgePressSensor::SendData(U16 cmd)
    181          {
   \                     ??SendData:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
    182              switch ( cmd ) {
   \   00000010   0500B0E1           MOVS     R0,R5
   \   00000014   650050E3           CMP      R0,#+101
   \   00000018   4600001A           BNE      ??SendData_2
    183              case CMD_GENERIC_REALTIME_DATA:
    184                  {
    185                      QueueANPRO10_COMMAND_2508  Cmd;
    186                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_3:
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04108DE5           STR      R1,[SP, #+4]
    187                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   00000024   FF10A0E3           MOV      R1,#+255
   \   00000028   0810CDE5           STRB     R1,[SP, #+8]
    188                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   0000002C   0E10A0E3           MOV      R1,#+14
   \   00000030   0910CDE5           STRB     R1,[SP, #+9]
    189          
    190                      Cmd.Data.CommandNo      = CMD_GENERIC_REALTIME_DATA;
   \   00000034   6510A0E3           MOV      R1,#+101
   \   00000038   BA10CDE1           STRH     R1,[SP, #+10]
    191                      Cmd.Data.ndb            = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
   \   0000003C   1710A0E3           MOV      R1,#+23
   \   00000040   BC10CDE1           STRH     R1,[SP, #+12]
    192                      Cmd.Data.ObjectId       = IDNumber;
   \   00000044   9C0094E5           LDR      R0,[R4, #+156]
   \   00000048   0E00CDE5           STRB     R0,[SP, #+14]
   \   0000004C   2004B0E1           LSRS     R0,R0,#+8
   \   00000050   0F00CDE5           STRB     R0,[SP, #+15]
   \   00000054   2004B0E1           LSRS     R0,R0,#+8
   \   00000058   1000CDE5           STRB     R0,[SP, #+16]
   \   0000005C   2004B0E1           LSRS     R0,R0,#+8
   \   00000060   1100CDE5           STRB     R0,[SP, #+17]
    193                      Cmd.Data.HWFailure      = HWFailure;
   \   00000064   0C11D4E5           LDRB     R1,[R4, #+268]
   \   00000068   1210CDE5           STRB     R1,[SP, #+18]
    194                      Cmd.Data.MyHWFailure    = MyHWFailure;
   \   0000006C   0D11D4E5           LDRB     R1,[R4, #+269]
   \   00000070   1310CDE5           STRB     R1,[SP, #+19]
    195                      Cmd.Data.ActiveAlarms   = ActiveAlarms;
   \   00000074   380094E5           LDR      R0,[R4, #+56]
   \   00000078   1500CDE5           STRB     R0,[SP, #+21]
   \   0000007C   2004B0E1           LSRS     R0,R0,#+8
   \   00000080   1600CDE5           STRB     R0,[SP, #+22]
   \   00000084   2004B0E1           LSRS     R0,R0,#+8
   \   00000088   1700CDE5           STRB     R0,[SP, #+23]
   \   0000008C   2004B0E1           LSRS     R0,R0,#+8
   \   00000090   1800CDE5           STRB     R0,[SP, #+24]
    196                      Cmd.Data.FilteredValue  = FilteredValue;
   \   00000094   0000A0E3           MOV      R0,#+0
   \                     ??SendData_4:
   \   00000098   04108DE2           ADD      R1,SP,#+4
   \   0000009C   011090E0           ADDS     R1,R0,R1
   \   000000A0   042090E0           ADDS     R2,R0,R4
   \   000000A4   4421D2E5           LDRB     R2,[R2, #+324]
   \   000000A8   1920C1E5           STRB     R2,[R1, #+25]
   \   000000AC   010090E2           ADDS     R0,R0,#+1
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   F7FFFFBA           BLT      ??SendData_4
    197                      Cmd.Data.CalcValue      = CalcValue;
   \   000000B8   0000A0E3           MOV      R0,#+0
   \                     ??SendData_5:
   \   000000BC   04108DE2           ADD      R1,SP,#+4
   \   000000C0   011090E0           ADDS     R1,R0,R1
   \   000000C4   042090E0           ADDS     R2,R0,R4
   \   000000C8   4821D2E5           LDRB     R2,[R2, #+328]
   \   000000CC   1520C1E5           STRB     R2,[R1, #+21]
   \   000000D0   010090E2           ADDS     R0,R0,#+1
   \   000000D4   040050E3           CMP      R0,#+4
   \   000000D8   F7FFFFBA           BLT      ??SendData_5
    198                      Cmd.Data.ResultOK       = ResultOK;
   \   000000DC   3611D4E5           LDRB     R1,[R4, #+310]
   \   000000E0   1410CDE5           STRB     R1,[SP, #+20]
    199                      Cmd.Data.FreeValue      = Failure;
   \   000000E4   3801D4E5           LDRB     R0,[R4, #+312]
   \   000000E8   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000000EC   00008DE5           STR      R0,[SP, #+0]
   \   000000F0   0000A0E3           MOV      R0,#+0
   \                     ??SendData_6:
   \   000000F4   04108DE2           ADD      R1,SP,#+4
   \   000000F8   011090E0           ADDS     R1,R0,R1
   \   000000FC   0D20B0E1           MOVS     R2,SP
   \   00000100   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000104   1D20C1E5           STRB     R2,[R1, #+29]
   \   00000108   010090E2           ADDS     R0,R0,#+1
   \   0000010C   040050E3           CMP      R0,#+4
   \   00000110   F7FFFFBA           BLT      ??SendData_6
    200                      bool sent =ANPRO10SendNormal(&Cmd);
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   0000011C   0060B0E1           MOVS     R6,R0
    201                      if ( !sent )
   \   00000120   000056E3           CMP      R6,#+0
   \   00000124   0100001A           BNE      ??SendData_7
    202                          return(E_QUEUE_FULL);
   \   00000128   0300A0E3           MOV      R0,#+3
   \   0000012C   040000EA           B        ??SendData_8
    203                      else
    204                          return(E_OK);
   \                     ??SendData_7:
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   020000EA           B        ??SendData_8
    205                  }
    206              default:
    207                  return AnalogInput::SendData(cmd);
   \                     ??SendData_2:
   \   00000138   0510B0E1           MOVS     R1,R5
   \   0000013C   0400B0E1           MOVS     R0,R4
   \   00000140   ........           _BLF     ??SendData_1,??SendData??rA
   \                     ??SendData_8:
   \   00000144   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   00000148   F040BDE8           POP      {R4-R7,LR}
   \   0000014C   1EFF2FE1           BX       LR               ;; return
    208              };
    209          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A00               DC8 ":"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIAirPurgePressSensor &AIAirPurgePressSensor::new AIAirPurgePressSensor()
   \                     `??new AIAirPurgePressSensor`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   710FA0E3           MOV      R0,#+452
   \   00000008   ........           _BLF     `??operator new_1`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      `??new AIAirPurgePressSensor_1`
   \   00000014   ........           BL       ??AIAirPurgePressSensor
   \   00000018   000000EA           B        `??new AIAirPurgePressSensor_2`
   \                     `??new AIAirPurgePressSensor_1`:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     `??new AIAirPurgePressSensor_2`:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    210          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIAirPurgePressSensor::AIAirPurgePressSensor()
                                       20
     AIAirPurgePressSensor::Calculate()
                                       12
     AIAirPurgePressSensor::GetStringValue(int, int, AnsiString &)
                                      192
     AIAirPurgePressSensor::GetValue(int, int, float &, int &, int &)
                                       40
     AIAirPurgePressSensor::PutFloatValue(int, float)
                                       20
     AIAirPurgePressSensor::PutValue(int, int, AnsiString, bool, int *)
                                      152
     AIAirPurgePressSensor::ReceiveData(unsigned char *)
                                       32
     AIAirPurgePressSensor::SendData(unsigned short)
                                       60
     AIAirPurgePressSensor::new AIAirPurgePressSensor()
                                        4
     AIAirPurgePressSensor::~AIAirPurgePressSensor()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _Allocator<void>::allocate(unsigned int)
                                        8
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                        8
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                        0
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                        8
     _String_val::_String_val(char_allocator)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                       48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       76
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                        0
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                        8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                       12
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                       12
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                        8
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                        0
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                        0
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       28
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Lmost()
                                        8
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        8
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rmost()
                                        8
     _Tree_algobase<allocator<void>>::_Root()
                                        8
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                       32
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                        8
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                        8
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                        0
     __sti__routine()                   0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                       12
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                        0
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                        0
     allocator<void>::allocator()       0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     char_traits::length(char const *)
                                        8
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                        0
     operator new(unsigned int, void *)
                                        0
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       44
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                       16
     string::append(char const *)      12
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(char const *)
                                       12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_traits::length(char const *)
                                      24
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::_Helper<less<AlarmBasic *>, false>::Ref()
                                       4
     _ClassUtil::_MemHolder<AlarmBasic *, less<AlarmBasic *>>::operator less<AlarmBasic *> &()
                                      24
     _ClassUtil::_AllocHolder<allocator<void>, false>::_Alval() const
                                      24
     pair<_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator, bool>::pair(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &, bool)
                                      44
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::operator+=(char const *)
                                      32
     string::append(string const &)   48
     string::append(char const *)     44
     string::assign(string const &)   48
     operator new(unsigned int, void *)
                                      12
     _Allocator<void>::allocate(unsigned int)
                                      24
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocator(allocator<void> const &)
                                       4
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::allocate(unsigned int)
                                      32
     allocator<_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node>::max_size() const
                                      32
     allocator<void>::allocator()      4
     less<AlarmBasic *>::operator()(AlarmBasic *, AlarmBasic *) const
                                      24
     _Tree_algobase<allocator<void>>::_GenNode::_GenNode(_Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr, char)
                                      40
     _Tree_algobase<allocator<void>>::_Color(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree_algobase<allocator<void>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      72
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     204
     _Tree_algobase<allocator<void>>::_GenIter::_GenIter(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree_algobase<allocator<void>>::_GenIter::operator==(_Tree_algobase<allocator<void>>::_GenIter const &) const
                                      32
     _Tree_algobase<allocator<void>>::_GenIter::_Dec()
                                      28
     _Tree_algobase<allocator<void>>::_GenIter::_Mynode() const
                                       8
     _Tree_algobase<allocator<void>>::_Root()
                                      24
     _Tree_algobase<allocator<void>>::_Lmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rmost()
                                      24
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                     276
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     900
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::comp()
                                      24
     _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node::_Node(_Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, _Tree_nod<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Node *, AlarmBasic *, char)
                                      76
     _Tree_val<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Kfn(AlarmBasic *)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Alnod() const
                                      52
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Isnil(_Tree_algobase<allocator<void>>::_Genptr)
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Key(_Tree_algobase<allocator<void>>::_Genptr)
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Left(_Tree_algobase<allocator<void>>::_Genptr)
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Parent(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Right(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Myval(_Tree_algobase<allocator<void>>::_Genptr)
                                       8
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::const_iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::operator==(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator const &) const
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::const_iterator::_Mynode() const
                                      24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator const &)
                                      12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::iterator(_Tree_algobase<allocator<void>>::_Genptr)
                                      36
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator::operator--()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::begin()
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::max_size() const
                                      44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     460
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Lmost()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Root()
                                      28
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Head() const
                                       4
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Buynode(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *, char)
                                     148
     _Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>::_Kfn(AlarmBasic *)
                                       4
     operator+(string const &, string const &)
                                      72
     operator+(string const &, char const *)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AIAirPurgePressSensor::AIAirPurgePressSensor()
                                     176
     AIAirPurgePressSensor::~AIAirPurgePressSensor()
                                      56
     AIAirPurgePressSensor::PutValue(int, int, AnsiString, bool, int *)
                                     404
     AIAirPurgePressSensor::GetValue(int, int, float &, int &, int &)
                                     368
     AIAirPurgePressSensor::GetStringValue(int, int, AnsiString &)
                                     332
     AIAirPurgePressSensor::PutFloatValue(int, float)
                                     216
     AIAirPurgePressSensor::Calculate()
                                     120
     AIAirPurgePressSensor::ReceiveData(unsigned char *)
                                     316
     AIAirPurgePressSensor::SendData(unsigned short)
                                     336
     ?<Constant ":">                   2
     __sti__routine()                208
     AIAirPurgePressSensor::new AIAirPurgePressSensor()
                                      40
      Others                        1464

 
 8 012 bytes in segment CODE
   158 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 576 bytes of CODE  memory (+ 5 452 bytes shared)
   158 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
