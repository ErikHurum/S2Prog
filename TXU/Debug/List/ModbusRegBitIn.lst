##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusRegBitIn.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusRegBitIn.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusRegBitIn.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusRegBitIn.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusRegBitIn.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_6
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_7:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_8
   \                     ??_Insert_6:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_9
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_8
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_8
   \                     ??_Insert_9:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_8
   \   00000060   F0FFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_8:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_11
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_12
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_10
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_13
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_13:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_8
   \                     ??_Insert_12:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_10
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_14
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_14:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Pairib _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_4:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_5
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_4
   \                     ??insert_5:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_6
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_7
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_8:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_9
   \                     ??insert_7:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_6:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_10
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_8
   \                     ??insert_10:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_9:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_11:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_12
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_11
   \                     ??insert_12:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_13
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_14
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_15:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_16
   \                     ??insert_14:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_13:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_17
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_15
   \                     ??insert_17:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_16:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_18:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_19
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_18
   \                     ??insert_19:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_20
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_21
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_22:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_23
   \                     ??insert_21:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_20:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_24
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_22
   \                     ??insert_24:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_23:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_3:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_25:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_26
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_25
   \                     ??insert_26:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_27
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_28
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_29:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_4,??_Insert??rA_3
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_30
   \                     ??insert_28:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_27:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_31
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_29
   \                     ??insert_31:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_30:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_2
   \                     ??_Erase_3:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_2:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_3
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_4
   \                     ??_Erase_5:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_4:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_5
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::iterator _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::iterator _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_17
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_17:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_4:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_18
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_18:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_4
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_5
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     strlen,??strlen??rA
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??assign_1,??assign??rA_1
   \   0000003C   38009FE5           LDR      R0,`??operator+_4`  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   003090E5           LDR      R3,[R0, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     ??string,??string??rA
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000070   1CD08DE2           ADD      SP,SP,#+28
   \   00000074   7040BDE8           POP      {R4-R6,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_4`:
   \   0000007C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_2`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif

   \                                 In segment DATA_Z, align 4, align-sorted
      6          set<PRogramObjectBase *>ModbusRegBitIn::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          ModbusRegBitIn::ModbusRegBitIn(bool pIsCreatedFromMultiple) : ModbusRegisterIn(pIsCreatedFromMultiple, C_PRO_MODBUS_REG_BIT_IN, false) {
   \                     ??ModbusRegBitIn:
   \   00000000   F7402DE9           PUSH     {R0-R2,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0030A0E3           MOV      R3,#+0
      9          	ModbusSet.insert(this);
   \   00000010   ........           LDR      R7,??DataTable1  ;; ??ModbusSet
   \   00000014   FA20A0E3           MOV      R2,#+250
   \   00000018   A02E82E3           ORR      R2,R2,#0xA00
   \   0000001C   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000020   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000024   726F84E2           ADD      R6,R4,#+456
   \   00000028   A40084E5           STR      R0,[R4, #+164]
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   0420A0E1           MOV      R2,R4
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   1400C6E5           STRB     R0,[R6, #+20]
   \   00000050   780F84E2           ADD      R0,R4,#+480
   \   00000054   0060A0E3           MOV      R6,#+0
   \   00000058   006080E5           STR      R6,[R0, #+0]
   \   0000005C   046080E5           STR      R6,[R0, #+4]
   \   00000060   086080E5           STR      R6,[R0, #+8]
   \   00000064   04008DE2           ADD      R0,SP,#+4
   \   00000068   ........           _BLF     ??insert_2,??insert??rA
     10              if (pIsCreatedFromMultiple) {
   \   0000006C   000055E3           CMP      R5,#+0
   \   00000070   0F00000A           BEQ      ??ModbusRegBitIn_1
     11                  unsigned newIDNumber    = (C_PRO_MODBUS_REG_BIT_IN << 16) + ModbusSet.size()+0x1000;
   \   00000074   100097E5           LDR      R0,[R7, #+16]
   \   00000078   AF16A0E3           MOV      R1,#+183500800
   \   0000007C   A11A81E3           ORR      R1,R1,#0xA1000
   \   00000080   005081E0           ADD      R5,R1,R0
     12          
     13                  if (FindPROFromIDNumber(newIDNumber)) {
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0500000A           BEQ      ??ModbusRegBitIn_2
     14                      do {
     15                          newIDNumber++;
   \                     ??ModbusRegBitIn_3:
   \   00000098   015085E2           ADD      R5,R5,#+1
     16                      }while (FindPROFromIDNumber(newIDNumber));
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   F9FFFF1A           BNE      ??ModbusRegBitIn_3
     17                  }
     18                  IDNumber = newIDNumber;
   \                     ??ModbusRegBitIn_2:
   \   000000B0   9C5084E5           STR      R5,[R4, #+156]
     19              }
     20          	BitOffset   = 0;
   \                     ??ModbusRegBitIn_1:
   \   000000B4   B06184E5           STR      R6,[R4, #+432]
     21              AlarmDelay  = 0;
   \   000000B8   B46184E5           STR      R6,[R4, #+436]
     22              NormalState = 0;
   \   000000BC   B86184E5           STR      R6,[R4, #+440]
     23              RegMax      = 0x01;
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   A80184E5           STR      R0,[R4, #+424]
     24              DefaultId   = true;
   \   000000C8   BC01C4E5           STRB     R0,[R4, #+444]
     25              AlarmPtr   = NULL;
   \   000000CC   C06184E5           STR      R6,[R4, #+448]
     26              ObjectPtr  = NULL;
   \   000000D0   C46184E5           STR      R6,[R4, #+452]
     27          }
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   FE40BDE8           POP      {R1-R7,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          ModbusRegBitIn::~ModbusRegBitIn() {
   \                     `?~ModbusRegBitIn`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1500000A           BEQ      `?~ModbusRegBitIn_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     30          }
   \   00000018   786F84E2           ADD      R6,R4,#+480
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   000086E5           STR      R0,[R6, #+0]
   \   00000030   040086E5           STR      R0,[R6, #+4]
   \   00000034   080086E5           STR      R0,[R6, #+8]
   \   00000038   726F84E2           ADD      R6,R4,#+456
   \   0000003C   041096E5           LDR      R1,[R6, #+4]
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000005C   010015E3           TST      R5,#0x1
   \   00000060   0100000A           BEQ      `?~ModbusRegBitIn_1`
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusRegBitIn_1`:
   \   0000006C   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     31          
     32          
     33          //---------------------------------------------------------------------------
     34          ///////////////////////////////////////////////////////////////
     35          //
     36          // Routines for the Configuration
     37          //
     38          //
     39          //    ModbusRegBitIn 0   6   1   815   ObjectId 0x49F0001 Bit     0       Unpowered  Name WBDB-4     Description Failure      ModbusEnd
     40          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     41          AnsiString ModbusRegBitIn::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   77DF4DE2           SUB      SP,SP,#+476
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     42              AnsiString LocalString = ModbusObject::MakeConfigString();
     43          
     44              if (DefaultId) {
   \   00000010   48669FE5           LDR      R6,??MakeConfigString_2+0x4  ;; TabStr1
   \   00000014   48869FE5           LDR      R8,??MakeConfigString_2+0x8  ;; `?<Constant "0x%0x">`
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   00000020   BC01D4E5           LDRB     R0,[R4, #+444]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2B00000A           BEQ      ??MakeConfigString_3
     45                  AnsiString ObjectIdStr;
   \   0000002C   70008DE2           ADD      R0,SP,#+112
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
     46                  ObjectIdStr.cat_sprintf("0x%0x", IDNumber);
   \   00000034   9C3094E5           LDR      R3,[R4, #+156]
   \   00000038   0820A0E1           MOV      R2,R8
   \   0000003C   54108DE2           ADD      R1,SP,#+84
   \   00000040   70008DE2           ADD      R0,SP,#+112
   \   00000044   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   54008DE2           ADD      R0,SP,#+84
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
     47                  LocalString += TabStr1 + KeyWord(C_MY_OBJECT_ID) + ObjectIdStr;
   \   00000058   D310A0E3           MOV      R1,#+211
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000064   0D20A0E1           MOV      R2,SP
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   70208DE2           ADD      R2,SP,#+112
   \   00000078   1C108DE2           ADD      R1,SP,#+28
   \   0000007C   38008DE2           ADD      R0,SP,#+56
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   003090E5           LDR      R3,[R0, #+0]
   \   00000090   38108DE2           ADD      R1,SP,#+56
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   ........           _BLF     ??append,??append??rA
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   38008DE2           ADD      R0,SP,#+56
   \   000000A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   1C008DE2           ADD      R0,SP,#+28
   \   000000B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   0D00A0E1           MOV      R0,SP
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
     48              }
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   70008DE2           ADD      R0,SP,#+112
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     49          
     50              if (PROList.size() > 1) {
   \                     ??MakeConfigString_3:
   \   000000DC   D80194E5           LDR      R0,[R4, #+472]
   \   000000E0   729FA0E3           MOV      R9,#+456
   \   000000E4   020050E3           CMP      R0,#+2
   \   000000E8   4800003A           BCC      ??MakeConfigString_4
     51                  LocalString += TabStr1 + KeyWord(C_OBJECT_ID_LIST);
   \   000000EC   D210A0E3           MOV      R1,#+210
   \   000000F0   38008DE2           ADD      R0,SP,#+56
   \   000000F4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000F8   38208DE2           ADD      R2,SP,#+56
   \   000000FC   0610A0E1           MOV      R1,R6
   \   00000100   1C008DE2           ADD      R0,SP,#+28
   \   00000104   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000108   ........           LDR      R0,??DataTable11  ;; ??npos
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   007090E5           LDR      R7,[R0, #+0]
   \   00000114   1C108DE2           ADD      R1,SP,#+28
   \   00000118   0730A0E1           MOV      R3,R7
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   1C008DE2           ADD      R0,SP,#+28
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0110A0E3           MOV      R1,#+1
   \   0000013C   38008DE2           ADD      R0,SP,#+56
   \   00000140   ........           _BLF     ??_Tidy,??_Tidy??rA
     52                  set<PRogramObject *>::iterator pBIt;
     53                  for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000144   04A099E7           LDR      R10,[R9, +R4]
   \   00000148   180000EA           B        ??MakeConfigString_5
     54                      PRogramObject *Element = (PRogramObject *)*pBIt;
     55                      int PROIDNumber = Element->IDNumber;
   \                     ??MakeConfigString_6:
   \   0000014C   10009AE5           LDR      R0,[R10, #+16]
   \   00000150   9CB090E5           LDR      R11,[R0, #+156]
     56                      AnsiString IdNumStr;
   \   00000154   0D00A0E1           MOV      R0,SP
   \   00000158   ........           _BLF     ??AnsiString,??AnsiString??rA
     57                      IdNumStr.cat_sprintf("0x%0X\t", PROIDNumber);
   \   0000015C   0B30A0E1           MOV      R3,R11
   \   00000160   082088E2           ADD      R2,R8,#+8
   \   00000164   70108DE2           ADD      R1,SP,#+112
   \   00000168   0D00A0E1           MOV      R0,SP
   \   0000016C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000170   0020A0E3           MOV      R2,#+0
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   70008DE2           ADD      R0,SP,#+112
   \   0000017C   ........           _BLF     ??_Tidy,??_Tidy??rA
     58                      LocalString += IdNumStr;
   \   00000180   0730A0E1           MOV      R3,R7
   \   00000184   0020A0E3           MOV      R2,#+0
   \   00000188   0D10A0E1           MOV      R1,SP
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           _BLF     ??append,??append??rA
     59                  }
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   0D00A0E1           MOV      R0,SP
   \   000001A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A4   0A00A0E1           MOV      R0,R10
   \   000001A8   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001AC   00A0A0E1           MOV      R10,R0
   \                     ??MakeConfigString_5:
   \   000001B0   040089E0           ADD      R0,R9,R4
   \   000001B4   00005AE1           CMP      R10,R0
   \   000001B8   E3FFFF1A           BNE      ??MakeConfigString_6
     60                  LocalString += TabStr1 + KeyWord(C_PROLIST_END);
   \   000001BC   4910A0E3           MOV      R1,#+73
   \   000001C0   501E81E3           ORR      R1,R1,#0x500
   \   000001C4   8C008DE2           ADD      R0,SP,#+140
   \   000001C8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001CC   8C208DE2           ADD      R2,SP,#+140
   \   000001D0   0610A0E1           MOV      R1,R6
   \   000001D4   54008DE2           ADD      R0,SP,#+84
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0730A0E1           MOV      R3,R7
   \   000001E0   0020A0E3           MOV      R2,#+0
   \   000001E4   54108DE2           ADD      R1,SP,#+84
   \   000001E8   0500A0E1           MOV      R0,R5
   \   000001EC   ........           _BLF     ??append,??append??rA
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   54008DE2           ADD      R0,SP,#+84
   \   000001FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   8C008DE2           ADD      R0,SP,#+140
   \   0000020C   2B0000EA           B        ??MakeConfigString_7
     61              } else {
     62                  PRogramObject *Element = (PRogramObject *)*PROList.begin();
   \                     ??MakeConfigString_4:
   \   00000210   040099E7           LDR      R0,[R9, +R4]
     63          		int PROIDNumber = Element->IDNumber;
     64          		LocalString += TabStr1 + KeyWord(C_OBJECT_ID);
   \   00000214   D110A0E3           MOV      R1,#+209
   \   00000218   100090E5           LDR      R0,[R0, #+16]
   \   0000021C   9C9090E5           LDR      R9,[R0, #+156]
   \   00000220   38008DE2           ADD      R0,SP,#+56
   \   00000224   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000228   38208DE2           ADD      R2,SP,#+56
   \   0000022C   0610A0E1           MOV      R1,R6
   \   00000230   54008DE2           ADD      R0,SP,#+84
   \   00000234   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000238   ........           LDR      R0,??DataTable11  ;; ??npos
   \   0000023C   0020A0E3           MOV      R2,#+0
   \   00000240   007090E5           LDR      R7,[R0, #+0]
   \   00000244   54108DE2           ADD      R1,SP,#+84
   \   00000248   0730A0E1           MOV      R3,R7
   \   0000024C   0500A0E1           MOV      R0,R5
   \   00000250   ........           _BLF     ??append,??append??rA
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   54008DE2           ADD      R0,SP,#+84
   \   00000260   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000264   0020A0E3           MOV      R2,#+0
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   38008DE2           ADD      R0,SP,#+56
   \   00000270   ........           _BLF     ??_Tidy,??_Tidy??rA
     65                  AnsiString IdNumStr;
   \   00000274   0D00A0E1           MOV      R0,SP
   \   00000278   ........           _BLF     ??AnsiString,??AnsiString??rA
     66                  IdNumStr.cat_sprintf("0x%0X\t", PROIDNumber);
   \   0000027C   0930A0E1           MOV      R3,R9
   \   00000280   082088E2           ADD      R2,R8,#+8
   \   00000284   1C108DE2           ADD      R1,SP,#+28
   \   00000288   0D00A0E1           MOV      R0,SP
   \   0000028C   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   1C008DE2           ADD      R0,SP,#+28
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
     67                  LocalString += IdNumStr;
   \   000002A0   0730A0E1           MOV      R3,R7
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   0D10A0E1           MOV      R1,SP
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   ........           _BLF     ??append,??append??rA
     68              }
   \   000002B4   0020A0E3           MOV      R2,#+0
   \   000002B8   0110A0E3           MOV      R1,#+1
   \   000002BC   0D00A0E1           MOV      R0,SP
   \                     ??MakeConfigString_7:
   \   000002C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C4   A41194E5           LDR      R1,[R4, #+420]
   \   000002C8   000051E3           CMP      R1,#+0
   \   000002CC   2200000A           BEQ      ??MakeConfigString_8
     69              if (ValueKey) {
     70                  LocalString += TabStr1 + KeyWord(C_VALUE_KEY) + ValueKeyWord(ValueKey);
   \   000002D0   54008DE2           ADD      R0,SP,#+84
   \   000002D4   ........           _BLF     ??ValueKeyWord,??ValueKeyWord??rA
   \   000002D8   D510A0E3           MOV      R1,#+213
   \   000002DC   38008DE2           ADD      R0,SP,#+56
   \   000002E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002E4   38208DE2           ADD      R2,SP,#+56
   \   000002E8   0610A0E1           MOV      R1,R6
   \   000002EC   1C008DE2           ADD      R0,SP,#+28
   \   000002F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002F4   54208DE2           ADD      R2,SP,#+84
   \   000002F8   1C108DE2           ADD      R1,SP,#+28
   \   000002FC   0D00A0E1           MOV      R0,SP
   \   00000300   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000304   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   003090E5           LDR      R3,[R0, #+0]
   \   00000310   0D10A0E1           MOV      R1,SP
   \   00000314   0500A0E1           MOV      R0,R5
   \   00000318   ........           _BLF     ??append,??append??rA
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   0D00A0E1           MOV      R0,SP
   \   00000328   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   54008DE2           ADD      R0,SP,#+84
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   1C008DE2           ADD      R0,SP,#+28
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   38008DE2           ADD      R0,SP,#+56
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
     71              }
     72              {
     73                  AnsiString BitOffsetStr;
   \                     ??MakeConfigString_8:
   \   0000035C   70008DE2           ADD      R0,SP,#+112
   \   00000360   ........           _BLF     ??AnsiString,??AnsiString??rA
     74                  BitOffsetStr.cat_sprintf("%2i", BitOffset);
   \   00000364   B03194E5           LDR      R3,[R4, #+432]
   \   00000368   BB2F8FE2           ADR      R2,??MakeConfigString_2  ;; "%2i"
   \   0000036C   0D10A0E1           MOV      R1,SP
   \   00000370   70008DE2           ADD      R0,SP,#+112
   \   00000374   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000378   0020A0E3           MOV      R2,#+0
   \   0000037C   0110A0E3           MOV      R1,#+1
   \   00000380   0D00A0E1           MOV      R0,SP
   \   00000384   ........           _BLF     ??_Tidy,??_Tidy??rA
     75                  LocalString += TabStr1 + KeyWord(C_BIT_OFFSET) + BitOffsetStr;
   \   00000388   D010A0E3           MOV      R1,#+208
   \   0000038C   1C008DE2           ADD      R0,SP,#+28
   \   00000390   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000394   1C208DE2           ADD      R2,SP,#+28
   \   00000398   0610A0E1           MOV      R1,R6
   \   0000039C   38008DE2           ADD      R0,SP,#+56
   \   000003A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003A4   70208DE2           ADD      R2,SP,#+112
   \   000003A8   38108DE2           ADD      R1,SP,#+56
   \   000003AC   54008DE2           ADD      R0,SP,#+84
   \   000003B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003B4   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000003B8   0020A0E3           MOV      R2,#+0
   \   000003BC   007090E5           LDR      R7,[R0, #+0]
   \   000003C0   54108DE2           ADD      R1,SP,#+84
   \   000003C4   0730A0E1           MOV      R3,R7
   \   000003C8   0500A0E1           MOV      R0,R5
   \   000003CC   ........           _BLF     ??append,??append??rA
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0110A0E3           MOV      R1,#+1
   \   000003D8   54008DE2           ADD      R0,SP,#+84
   \   000003DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0110A0E3           MOV      R1,#+1
   \   000003E8   38008DE2           ADD      R0,SP,#+56
   \   000003EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F0   0020A0E3           MOV      R2,#+0
   \   000003F4   0110A0E3           MOV      R1,#+1
   \   000003F8   1C008DE2           ADD      R0,SP,#+28
   \   000003FC   ........           _BLF     ??_Tidy,??_Tidy??rA
     76              }
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0110A0E3           MOV      R1,#+1
   \   00000408   70008DE2           ADD      R0,SP,#+112
   \   0000040C   ........           _BLF     ??_Tidy,??_Tidy??rA
     77              LocalString += TabStr1 + KeyWord(C_PRO_NAME) + Name;
   \   00000410   1510A0E3           MOV      R1,#+21
   \   00000414   501E81E3           ORR      R1,R1,#0x500
   \   00000418   E0008DE2           ADD      R0,SP,#+224
   \   0000041C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000420   E0208DE2           ADD      R2,SP,#+224
   \   00000424   0610A0E1           MOV      R1,R6
   \   00000428   C4008DE2           ADD      R0,SP,#+196
   \   0000042C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000430   442084E2           ADD      R2,R4,#+68
   \   00000434   C4108DE2           ADD      R1,SP,#+196
   \   00000438   A8008DE2           ADD      R0,SP,#+168
   \   0000043C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000440   0730A0E1           MOV      R3,R7
   \   00000444   0020A0E3           MOV      R2,#+0
   \   00000448   A8108DE2           ADD      R1,SP,#+168
   \   0000044C   0500A0E1           MOV      R0,R5
   \   00000450   ........           _BLF     ??append,??append??rA
   \   00000454   0020A0E3           MOV      R2,#+0
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   A8008DE2           ADD      R0,SP,#+168
   \   00000460   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000464   0020A0E3           MOV      R2,#+0
   \   00000468   0110A0E3           MOV      R1,#+1
   \   0000046C   C4008DE2           ADD      R0,SP,#+196
   \   00000470   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0110A0E3           MOV      R1,#+1
   \   0000047C   E0008DE2           ADD      R0,SP,#+224
   \   00000480   ........           _BLF     ??_Tidy,??_Tidy??rA
     78              LocalString += TabStr1 + KeyWord(C_DESCRIPTION) + Description;
   \   00000484   CC10A0E3           MOV      R1,#+204
   \   00000488   4D0F8DE2           ADD      R0,SP,#+308
   \   0000048C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000490   4D2F8DE2           ADD      R2,SP,#+308
   \   00000494   0610A0E1           MOV      R1,R6
   \   00000498   460F8DE2           ADD      R0,SP,#+280
   \   0000049C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A0   7C2084E2           ADD      R2,R4,#+124
   \   000004A4   461F8DE2           ADD      R1,SP,#+280
   \   000004A8   FC008DE2           ADD      R0,SP,#+252
   \   000004AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004B0   0730A0E1           MOV      R3,R7
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   FC108DE2           ADD      R1,SP,#+252
   \   000004BC   0500A0E1           MOV      R0,R5
   \   000004C0   ........           _BLF     ??append,??append??rA
   \   000004C4   0020A0E3           MOV      R2,#+0
   \   000004C8   0110A0E3           MOV      R1,#+1
   \   000004CC   FC008DE2           ADD      R0,SP,#+252
   \   000004D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004D4   0020A0E3           MOV      R2,#+0
   \   000004D8   0110A0E3           MOV      R1,#+1
   \   000004DC   460F8DE2           ADD      R0,SP,#+280
   \   000004E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E4   0020A0E3           MOV      R2,#+0
   \   000004E8   0110A0E3           MOV      R1,#+1
   \   000004EC   4D0F8DE2           ADD      R0,SP,#+308
   \   000004F0   ........           _BLF     ??_Tidy,??_Tidy??rA
     79              if (AlarmDelay) {
   \   000004F4   B41194E5           LDR      R1,[R4, #+436]
   \   000004F8   000051E3           CMP      R1,#+0
   \   000004FC   2300000A           BEQ      ??MakeConfigString_9
     80                  LocalString += TabStr1 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay;
   \   00000500   54008DE2           ADD      R0,SP,#+84
   \   00000504   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000508   0080A0E1           MOV      R8,R0
   \   0000050C   A810A0E3           MOV      R1,#+168
   \   00000510   701E81E3           ORR      R1,R1,#0x700
   \   00000514   38008DE2           ADD      R0,SP,#+56
   \   00000518   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000051C   38208DE2           ADD      R2,SP,#+56
   \   00000520   0610A0E1           MOV      R1,R6
   \   00000524   1C008DE2           ADD      R0,SP,#+28
   \   00000528   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000052C   0820A0E1           MOV      R2,R8
   \   00000530   1C108DE2           ADD      R1,SP,#+28
   \   00000534   0D00A0E1           MOV      R0,SP
   \   00000538   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000053C   0730A0E1           MOV      R3,R7
   \   00000540   0020A0E3           MOV      R2,#+0
   \   00000544   0D10A0E1           MOV      R1,SP
   \   00000548   0500A0E1           MOV      R0,R5
   \   0000054C   ........           _BLF     ??append,??append??rA
   \   00000550   0020A0E3           MOV      R2,#+0
   \   00000554   0110A0E3           MOV      R1,#+1
   \   00000558   0D00A0E1           MOV      R0,SP
   \   0000055C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000560   0020A0E3           MOV      R2,#+0
   \   00000564   0110A0E3           MOV      R1,#+1
   \   00000568   54008DE2           ADD      R0,SP,#+84
   \   0000056C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000570   0020A0E3           MOV      R2,#+0
   \   00000574   0110A0E3           MOV      R1,#+1
   \   00000578   1C008DE2           ADD      R0,SP,#+28
   \   0000057C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000580   0020A0E3           MOV      R2,#+0
   \   00000584   0110A0E3           MOV      R1,#+1
   \   00000588   38008DE2           ADD      R0,SP,#+56
   \   0000058C   ........           _BLF     ??_Tidy,??_Tidy??rA
     81              }
     82              LocalString += TabStr1 + KeyWord(NormalState);
   \                     ??MakeConfigString_9:
   \   00000590   B81194E5           LDR      R1,[R4, #+440]
   \   00000594   5B0F8DE2           ADD      R0,SP,#+364
   \   00000598   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000059C   5B2F8DE2           ADD      R2,SP,#+364
   \   000005A0   0610A0E1           MOV      R1,R6
   \   000005A4   540F8DE2           ADD      R0,SP,#+336
   \   000005A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005AC   0730A0E1           MOV      R3,R7
   \   000005B0   0020A0E3           MOV      R2,#+0
   \   000005B4   541F8DE2           ADD      R1,SP,#+336
   \   000005B8   0500A0E1           MOV      R0,R5
   \   000005BC   ........           _BLF     ??append,??append??rA
   \   000005C0   0020A0E3           MOV      R2,#+0
   \   000005C4   0110A0E3           MOV      R1,#+1
   \   000005C8   540F8DE2           ADD      R0,SP,#+336
   \   000005CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005D0   0020A0E3           MOV      R2,#+0
   \   000005D4   0110A0E3           MOV      R1,#+1
   \   000005D8   5B0F8DE2           ADD      R0,SP,#+364
   \   000005DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     83          
     84              LocalString += TabStr1 + KeyWord(C_MODBUS_END) + CrLfStr;
   \   000005E0   6110A0E3           MOV      R1,#+97
   \   000005E4   901E81E3           ORR      R1,R1,#0x900
   \   000005E8   700F8DE2           ADD      R0,SP,#+448
   \   000005EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005F0   702F8DE2           ADD      R2,SP,#+448
   \   000005F4   0610A0E1           MOV      R1,R6
   \   000005F8   690F8DE2           ADD      R0,SP,#+420
   \   000005FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000600   60209FE5           LDR      R2,??MakeConfigString_2+0xC  ;; CrLfStr
   \   00000604   691F8DE2           ADD      R1,SP,#+420
   \   00000608   620F8DE2           ADD      R0,SP,#+392
   \   0000060C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000610   0730A0E1           MOV      R3,R7
   \   00000614   0020A0E3           MOV      R2,#+0
   \   00000618   621F8DE2           ADD      R1,SP,#+392
   \   0000061C   0500A0E1           MOV      R0,R5
   \   00000620   ........           _BLF     ??append,??append??rA
   \   00000624   0020A0E3           MOV      R2,#+0
   \   00000628   0110A0E3           MOV      R1,#+1
   \   0000062C   620F8DE2           ADD      R0,SP,#+392
   \   00000630   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000634   0020A0E3           MOV      R2,#+0
   \   00000638   0110A0E3           MOV      R1,#+1
   \   0000063C   690F8DE2           ADD      R0,SP,#+420
   \   00000640   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000644   0020A0E3           MOV      R2,#+0
   \   00000648   0110A0E3           MOV      R1,#+1
   \   0000064C   700F8DE2           ADD      R0,SP,#+448
   \   00000650   ........           _BLF     ??_Tidy,??_Tidy??rA
     85          
     86              return (LocalString);
   \   00000654   77DF8DE2           ADD      SP,SP,#+476
   \   00000658   ........           B        ?Subroutine15
   \                     ??MakeConfigString_2:
   \   0000065C   25326900           DC8      "%2i"
   \   00000660   ........           DC32     TabStr1
   \   00000664   ........           DC32     `?<Constant "0x%0x">`
   \   00000668   ........           DC32     CrLfStr
     87          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine15_0:
   \   00000008   21000000           DC8      "!",+0,+0
   \   0000000C   ........           DC32     `?<Constant "Modbus RegBitIn">`
   \   00000010   ........           DC32     ??ModbusSet + 16
     88          //---------------------------------------------------------------------------
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          bool ModbusRegBitIn::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5EDF4DE2           SUB      SP,SP,#+376
     91          
     92              SetLineNumber(ConfigString.LineCount);
     93              int ErrorLine = 0;
     94              bool NoError = true;
   \   00000008   ........           LDR      R11,??Subroutine15_0+0x4  ;; `?<Constant "Modbus RegBitIn">`
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180A0E3           MOV      R8,#+1
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
     95              if (ModbusObject::LoadConfigString(ConfigString)) {
   \   00000030   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   5401000A           BEQ      ??LoadConfigString_2
     96                  int Key;
     97                  do {
     98                      AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   C8108DE2           ADD      R1,SP,#+200
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000050   00009DE5           LDR      R0,[SP, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0B00000A           BEQ      ??LoadConfigString_4
     99                      if (ErrorLine) {
    100                          if (ErrorLine != EOF) {
   \   0000005C   010070E3           CMN      R0,#+1
   \   00000060   3E01000A           BEQ      ??LoadConfigString_5
    101                              GiveConfigWarning("Modbus RegBitIn", ErrorLine);
   \   00000064   0B10A0E1           MOV      R1,R11
   \   00000068   04008DE2           ADD      R0,SP,#+4
   \   0000006C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000070   00109DE5           LDR      R1,[SP, #+0]
   \   00000074   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_6:
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   340100EA           B        ??LoadConfigString_5
    102                          }
    103                      } else {
    104                          Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   0000008C   C8108DE2           ADD      R1,SP,#+200
   \   00000090   AC008DE2           ADD      R0,SP,#+172
   \   00000094   ........           _BLF     ??string,??string??rA
   \   00000098   AC008DE2           ADD      R0,SP,#+172
   \   0000009C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000A0   0070A0E1           MOV      R7,R0
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   AC008DE2           ADD      R0,SP,#+172
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
    105                          switch (Key) {
   \   000000B4   78AFA0E3           MOV      R10,#+480
   \   000000B8   CC0057E3           CMP      R7,#+204
   \   000000BC   7E00000A           BEQ      ??LoadConfigString_7
   \   000000C0   D00057E3           CMP      R7,#+208
   \   000000C4   9700000A           BEQ      ??LoadConfigString_8
   \   000000C8   D10057E3           CMP      R7,#+209
   \   000000CC   1501000A           BEQ      ??LoadConfigString_9
   \   000000D0   D20057E3           CMP      R7,#+210
   \   000000D4   0001000A           BEQ      ??LoadConfigString_10
   \   000000D8   D30057E3           CMP      R7,#+211
   \   000000DC   9A00000A           BEQ      ??LoadConfigString_11
   \   000000E0   D40057E3           CMP      R7,#+212
   \   000000E4   0F01000A           BEQ      ??LoadConfigString_9
   \   000000E8   D50057E3           CMP      R7,#+213
   \   000000EC   2B00000A           BEQ      ??LoadConfigString_12
   \   000000F0   FA0F57E3           CMP      R7,#+1000
   \   000000F4   EA10A013           MOVNE    R1,#+234
   \   000000F8   C01F8113           ORRNE    R1,R1,#0x300
   \   000000FC   01005711           CMPNE    R7,R1
   \   00000100   1501000A           BEQ      ??LoadConfigString_13
   \   00000104   1510A0E3           MOV      R1,#+21
   \   00000108   501E81E3           ORR      R1,R1,#0x500
   \   0000010C   010057E1           CMP      R7,R1
   \   00000110   5500000A           BEQ      ??LoadConfigString_14
   \   00000114   6C10A0E3           MOV      R1,#+108
   \   00000118   701E81E3           ORR      R1,R1,#0x700
   \   0000011C   010057E1           CMP      R7,R1
   \   00000120   02108113           ORRNE    R1,R1,#0x2
   \   00000124   01005711           CMPNE    R7,R1
   \   00000128   0B01000A           BEQ      ??LoadConfigString_13
   \   0000012C   311081E2           ADD      R1,R1,#+49
   \   00000130   010057E1           CMP      R7,R1
   \   00000134   02108112           ADDNE    R1,R1,#+2
   \   00000138   01005711           CMPNE    R7,R1
   \   0000013C   7100000A           BEQ      ??LoadConfigString_15
   \   00000140   071081E2           ADD      R1,R1,#+7
   \   00000144   010057E1           CMP      R7,R1
   \   00000148   7000000A           BEQ      ??LoadConfigString_16
   \   0000014C   6110A0E3           MOV      R1,#+97
   \   00000150   901E81E3           ORR      R1,R1,#0x900
   \   00000154   010057E1           CMP      R7,R1
   \   00000158   4100000A           BEQ      ??LoadConfigString_17
    106                          default:
    107                              GiveConfigWarning("Modbus RegBitIn", InputKeyWord, ConfigString.LineCount);
   \   0000015C   C8108DE2           ADD      R1,SP,#+200
   \   00000160   420F8DE2           ADD      R0,SP,#+264
   \   00000164   ........           _BLF     ??string,??string??rA
   \   00000168   0B10A0E1           MOV      R1,R11
   \   0000016C   490F8DE2           ADD      R0,SP,#+292
   \   00000170   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000174   1C2095E5           LDR      R2,[R5, #+28]
   \   00000178   421F8DE2           ADD      R1,SP,#+264
   \   0000017C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   420F8DE2           ADD      R0,SP,#+264
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   490F8DE2           ADD      R0,SP,#+292
   \   0000019C   B8FFFFEA           B        ??LoadConfigString_6
    108                              break;
    109                          case C_VALUE_KEY :
    110                              {
    111                                  AnsiString tempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_12:
   \   000001A0   0030A0E3           MOV      R3,#+0
   \   000001A4   0D20A0E1           MOV      R2,SP
   \   000001A8   3C108DE2           ADD      R1,SP,#+60
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   ........           _BLF     ??NextWord,??NextWord??rA
    112                                  NoError = !ErrorLine;
   \   000001B4   00009DE5           LDR      R0,[SP, #+0]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0180A003           MOVEQ    R8,#+1
   \   000001C0   0080A013           MOVNE    R8,#+0
    113                                  if (NoError) {
   \   000001C4   000058E3           CMP      R8,#+0
   \   000001C8   2100000A           BEQ      ??LoadConfigString_18
    114                                      ValueKey = FindValueConfigKey(tempStr);
   \   000001CC   3C108DE2           ADD      R1,SP,#+60
   \   000001D0   04008DE2           ADD      R0,SP,#+4
   \   000001D4   ........           _BLF     ??string,??string??rA
   \   000001D8   69AFA0E3           MOV      R10,#+420
   \   000001DC   04008DE2           ADD      R0,SP,#+4
   \   000001E0   ........           _BLF     ??FindValueConfigKey,??FindValueConfigKey??rA
   \   000001E4   04008AE7           STR      R0,[R10, +R4]
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   04008DE2           ADD      R0,SP,#+4
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    115                                      if (ValueKey == NOT_FOUND) {
   \   000001F8   04009AE7           LDR      R0,[R10, +R4]
   \   000001FC   010070E3           CMN      R0,#+1
   \   00000200   1300001A           BNE      ??LoadConfigString_18
    116                                          ErrorLine = ConfigString.LineCount;
   \   00000204   1C1095E5           LDR      R1,[R5, #+28]
    117                                          NoError = false;
    118                                          GiveConfigWarning("Modbus RegBitIn value", InputKeyWord, ConfigString.LineCount);
   \   00000208   58008DE2           ADD      R0,SP,#+88
   \   0000020C   00108DE5           STR      R1,[SP, #+0]
   \   00000210   C8108DE2           ADD      R1,SP,#+200
   \   00000214   ........           _BLF     ??string,??string??rA
   \   00000218   10108BE2           ADD      R1,R11,#+16
   \   0000021C   20008DE2           ADD      R0,SP,#+32
   \   00000220   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000224   1C2095E5           LDR      R2,[R5, #+28]
   \   00000228   0080A0E3           MOV      R8,#+0
   \   0000022C   58108DE2           ADD      R1,SP,#+88
   \   00000230   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   58008DE2           ADD      R0,SP,#+88
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000244   0820A0E1           MOV      R2,R8
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   20008DE2           ADD      R0,SP,#+32
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
    119                                      }
    120                                  }
    121                              }
   \                     ??LoadConfigString_18:
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   3C008DE2           ADD      R0,SP,#+60
   \   00000260   87FFFFEA           B        ??LoadConfigString_6
    122                              break;
    123                          case C_PRO_END_COMMON :
    124                          case C_PRO_END :
    125                          case C_CTRL_END_COMMON :
    126                          case C_CTRL_END :
    127                              NoError = false;
    128                              break;
    129                          case C_MODBUS_END :
    130                              Key = C_MODBUS_END;
   \                     ??LoadConfigString_17:
   \   00000264   0170A0E1           MOV      R7,R1
   \   00000268   BC0000EA           B        ??LoadConfigString_5
    131                              break;
    132                          case C_PRO_NAME :
    133                              Name = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_14:
   \   0000026C   0030A0E3           MOV      R3,#+0
   \   00000270   0D20A0E1           MOV      R2,SP
   \   00000274   501F8DE2           ADD      R1,SP,#+320
   \   00000278   0500A0E1           MOV      R0,R5
   \   0000027C   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000280   ........           LDR      R0,??DataTable11  ;; ??npos
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   003090E5           LDR      R3,[R0, #+0]
   \   0000028C   501F8DE2           ADD      R1,SP,#+320
   \   00000290   440084E2           ADD      R0,R4,#+68
   \   00000294   ........           _BLF     ??assign,??assign??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   500F8DE2           ADD      R0,SP,#+320
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
    134                              NoError = !ErrorLine;
   \   000002A8   00009DE5           LDR      R0,[SP, #+0]
   \   000002AC   000050E3           CMP      R0,#+0
   \   000002B0   A900001A           BNE      ??LoadConfigString_13
   \                     ??LoadConfigString_19:
   \   000002B4   0180A0E3           MOV      R8,#+1
   \   000002B8   A80000EA           B        ??LoadConfigString_5
    135                              break;
    136                          case C_DESCRIPTION :
    137                              Description = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_7:
   \   000002BC   0030A0E3           MOV      R3,#+0
   \   000002C0   0D20A0E1           MOV      R2,SP
   \   000002C4   571F8DE2           ADD      R1,SP,#+348
   \   000002C8   0500A0E1           MOV      R0,R5
   \   000002CC   ........           _BLF     ??NextWord,??NextWord??rA
   \   000002D0   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   003090E5           LDR      R3,[R0, #+0]
   \   000002DC   571F8DE2           ADD      R1,SP,#+348
   \   000002E0   7C0084E2           ADD      R0,R4,#+124
   \   000002E4   ........           _BLF     ??assign,??assign??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   570F8DE2           ADD      R0,SP,#+348
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    138                              NoError = !ErrorLine;
   \                     ??LoadConfigString_20:
   \   000002F8   00009DE5           LDR      R0,[SP, #+0]
   \   000002FC   000050E3           CMP      R0,#+0
   \   00000300   9500001A           BNE      ??LoadConfigString_13
   \   00000304   EAFFFFEA           B        ??LoadConfigString_19
    139                              break;
    140                          case C_CTRL_NS_POWERED :
    141                          case C_CTRL_NS_UNPOWERED:
    142                              NormalState = Key;
   \                     ??LoadConfigString_15:
   \   00000308   B87184E5           STR      R7,[R4, #+440]
   \   0000030C   930000EA           B        ??LoadConfigString_5
    143                              break;
    144                          case C_CTRL_AL_DELAY:
    145                              AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_16:
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0D10A0E1           MOV      R1,SP
   \   00000318   0500A0E1           MOV      R0,R5
   \   0000031C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000320   B40184E5           STR      R0,[R4, #+436]
    146                              NoError = !ErrorLine;
   \   00000324   F3FFFFEA           B        ??LoadConfigString_20
    147                              break;
    148                          case C_BIT_OFFSET:
    149                              BitOffset = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_8:
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0D10A0E1           MOV      R1,SP
   \   00000330   0500A0E1           MOV      R0,R5
   \   00000334   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000338   B00184E5           STR      R0,[R4, #+432]
    150                              NoError = !ErrorLine;
   \   0000033C   00009DE5           LDR      R0,[SP, #+0]
   \   00000340   000050E3           CMP      R0,#+0
   \   00000344   8400001A           BNE      ??LoadConfigString_13
   \   00000348   D9FFFFEA           B        ??LoadConfigString_19
    151                              break;
    152                          case C_MY_OBJECT_ID :
    153                              {
    154                                  unsigned tmpIDNumber    = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_11:
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0D10A0E1           MOV      R1,SP
   \   00000354   0500A0E1           MOV      R0,R5
   \   00000358   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   0000035C   00A0A0E1           MOV      R10,R0
    155                                  if (NoError) {
   \   00000360   000058E3           CMP      R8,#+0
   \   00000364   5900000A           BEQ      ??LoadConfigString_21
    156          							unsigned ObjTypeId = tmpIDNumber >> 16;
    157                                      if ((ObjTypeId != C_PRO_MODBUS_REG_BIT_IN)) {
   \   00000368   FA00A0E3           MOV      R0,#+250
   \   0000036C   A00E80E3           ORR      R0,R0,#0xA00
   \   00000370   2A0850E1           CMP      R0,R10, LSR #+16
   \   00000374   0E00000A           BEQ      ??LoadConfigString_22
    158                                          IDNumber = (C_PRO_MODBUS_REG_BIT_IN << 16) | (tmpIDNumber & 0xffff);
   \   00000378   0A08A0E1           LSL      R0,R10,#+16
   \   0000037C   A016A0E3           MOV      R1,#+167772160
   \   00000380   FA1881E3           ORR      R1,R1,#0xFA0000
   \   00000384   200881E1           ORR      R0,R1,R0, LSR #+16
   \   00000388   9C0084E5           STR      R0,[R4, #+156]
    159                                          GiveConfigWarning("Modbus RegBitIn IDNumber Err", ConfigString.LineCount);
   \   0000038C   28108BE2           ADD      R1,R11,#+40
   \   00000390   04008DE2           ADD      R0,SP,#+4
   \   00000394   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000398   1C1095E5           LDR      R1,[R5, #+28]
   \   0000039C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000003A0   0020A0E3           MOV      R2,#+0
   \   000003A4   0110A0E3           MOV      R1,#+1
   \   000003A8   04008DE2           ADD      R0,SP,#+4
   \   000003AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003B0   460000EA           B        ??LoadConfigString_21
    160                                      } else {
    161                                          if (FindPROFromIDNumber(tmpIDNumber)) {
   \                     ??LoadConfigString_22:
   \   000003B4   0010A0E3           MOV      R1,#+0
   \   000003B8   0A00A0E1           MOV      R0,R10
   \   000003BC   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000003C0   000050E3           CMP      R0,#+0
   \   000003C4   4000000A           BEQ      ??LoadConfigString_23
    162                                              unsigned tmpOrgIDNumber = tmpIDNumber;
   \   000003C8   0A80A0E1           MOV      R8,R10
    163          									do {
    164                                                  tmpIDNumber++;
   \                     ??LoadConfigString_24:
   \   000003CC   01A08AE2           ADD      R10,R10,#+1
    165                                              }while (FindPROFromIDNumber(tmpIDNumber));
   \   000003D0   0010A0E3           MOV      R1,#+0
   \   000003D4   0A00A0E1           MOV      R0,R10
   \   000003D8   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000003DC   000050E3           CMP      R0,#+0
   \   000003E0   F9FFFF1A           BNE      ??LoadConfigString_24
    166                                              AnsiString IdNumStr;
   \   000003E4   90008DE2           ADD      R0,SP,#+144
   \   000003E8   ........           _BLF     ??AnsiString,??AnsiString??rA
    167          									IdNumStr.cat_sprintf("RegBitIn IDNumber changed from 0x%0X to 0x%0X", tmpOrgIDNumber, tmpIDNumber);
   \   000003EC   0A00A0E1           MOV      R0,R10
   \   000003F0   01002DE9           PUSH     {R0}
   \   000003F4   0830A0E1           MOV      R3,R8
   \   000003F8   48208BE2           ADD      R2,R11,#+72
   \   000003FC   08108DE2           ADD      R1,SP,#+8
   \   00000400   94008DE2           ADD      R0,SP,#+148
   \   00000404   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   08008DE2           ADD      R0,SP,#+8
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
    168          									GiveConfigWarning("RegBitIn duplicate IDNumber in line "+ AnsiString(ConfigString.LineCount)+"!");
   \   00000418   1C1095E5           LDR      R1,[R5, #+28]
   \   0000041C   F0008DE2           ADD      R0,SP,#+240
   \   00000420   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000424   0020A0E1           MOV      R2,R0
   \   00000428   78108BE2           ADD      R1,R11,#+120
   \   0000042C   24008DE2           ADD      R0,SP,#+36
   \   00000430   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000434   ........           ADR      R2,??Subroutine15_0  ;; "!"
   \   00000438   24108DE2           ADD      R1,SP,#+36
   \   0000043C   5C008DE2           ADD      R0,SP,#+92
   \   00000440   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   00000444   5C108DE2           ADD      R1,SP,#+92
   \   00000448   40008DE2           ADD      R0,SP,#+64
   \   0000044C   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000450   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   00000454   0020A0E3           MOV      R2,#+0
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   40008DE2           ADD      R0,SP,#+64
   \   00000460   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000464   0020A0E3           MOV      R2,#+0
   \   00000468   0110A0E3           MOV      R1,#+1
   \   0000046C   5C008DE2           ADD      R0,SP,#+92
   \   00000470   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0110A0E3           MOV      R1,#+1
   \   0000047C   24008DE2           ADD      R0,SP,#+36
   \   00000480   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000484   0020A0E3           MOV      R2,#+0
   \   00000488   0110A0E3           MOV      R1,#+1
   \   0000048C   F0008DE2           ADD      R0,SP,#+240
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
    169                                              GiveConfigWarning(IdNumStr);
   \   00000494   94108DE2           ADD      R1,SP,#+148
   \   00000498   78008DE2           ADD      R0,SP,#+120
   \   0000049C   ........           _BLF     ??string,??string??rA
   \   000004A0   78008DE2           ADD      R0,SP,#+120
   \   000004A4   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   000004A8   0020A0E3           MOV      R2,#+0
   \   000004AC   0110A0E3           MOV      R1,#+1
   \   000004B0   78008DE2           ADD      R0,SP,#+120
   \   000004B4   ........           _BLF     ??_Tidy,??_Tidy??rA
    170          								}
   \   000004B8   0020A0E3           MOV      R2,#+0
   \   000004BC   0110A0E3           MOV      R1,#+1
   \   000004C0   94008DE2           ADD      R0,SP,#+148
   \   000004C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004C8   04D08DE2           ADD      SP,SP,#+4
    171          								IDNumber = tmpIDNumber;
   \                     ??LoadConfigString_23:
   \   000004CC   9CA084E5           STR      R10,[R4, #+156]
    172          							}
    173                                  }
    174                              }
    175                              DefaultId = false;
   \                     ??LoadConfigString_21:
   \   000004D0   0000A0E3           MOV      R0,#+0
   \   000004D4   BC01C4E5           STRB     R0,[R4, #+444]
    176                              NoError = !ErrorLine;
   \   000004D8   86FFFFEA           B        ??LoadConfigString_20
    177                              break;
    178                          case C_OBJECT_ID_LIST:
    179                              do {
    180                                  unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_10:
   \   000004DC   4920A0E3           MOV      R2,#+73
   \   000004E0   502E82E3           ORR      R2,R2,#0x500
   \   000004E4   0D10A0E1           MOV      R1,SP
   \   000004E8   0500A0E1           MOV      R0,R5
   \   000004EC   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    181                                  if (!ErrorLine) {
   \   000004F0   00109DE5           LDR      R1,[SP, #+0]
   \   000004F4   000051E3           CMP      R1,#+0
   \   000004F8   0200001A           BNE      ??LoadConfigString_25
    182                                      IdNumbers.push_back(tmpIDNumber);
   \   000004FC   0010A0E1           MOV      R1,R0
   \   00000500   04008AE0           ADD      R0,R10,R4
   \   00000504   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    183                                  }
    184                              }while (!ErrorLine);
   \                     ??LoadConfigString_25:
   \   00000508   00009DE5           LDR      R0,[SP, #+0]
   \   0000050C   000050E3           CMP      R0,#+0
   \   00000510   F1FFFF0A           BEQ      ??LoadConfigString_10
    185                              if (ErrorLine == END_FOUND) {
   \   00000514   020070E3           CMN      R0,#+2
   \   00000518   0F00001A           BNE      ??LoadConfigString_13
    186                                  ErrorLine = 0;
   \   0000051C   0010A0E3           MOV      R1,#+0
   \   00000520   00108DE5           STR      R1,[SP, #+0]
   \   00000524   62FFFFEA           B        ??LoadConfigString_19
    187                              }
    188                              NoError = !ErrorLine;
    189                              break;
    190                          case C_OBJECT_ID:
    191                          case C_REF_OBJECT_ID:
    192                              {
    193                                  RefObjectId = ConfigString.ReadInteger(ErrorLine);
   \                     ??LoadConfigString_9:
   \   00000528   0020A0E3           MOV      R2,#+0
   \   0000052C   0D10A0E1           MOV      R1,SP
   \   00000530   0500A0E1           MOV      R0,R5
   \   00000534   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000538   9C0184E5           STR      R0,[R4, #+412]
    194                                  NoError = !ErrorLine;
   \   0000053C   00009DE5           LDR      R0,[SP, #+0]
   \   00000540   000050E3           CMP      R0,#+0
   \   00000544   0400001A           BNE      ??LoadConfigString_13
    195                                  if (!ErrorLine) {
    196                                      IdNumbers.push_back(RefObjectId);
   \   00000548   9C1194E5           LDR      R1,[R4, #+412]
   \   0000054C   0180A0E3           MOV      R8,#+1
   \   00000550   04008AE0           ADD      R0,R10,R4
   \   00000554   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \   00000558   000000EA           B        ??LoadConfigString_5
    197                                  }
    198                              }
    199                              break;
    200                          }
   \                     ??LoadConfigString_13:
   \   0000055C   0080A0E3           MOV      R8,#+0
    201                      }
    202                  }while (NoError && (ErrorLine != EOF) && (Key != C_MODBUS_END));
   \                     ??LoadConfigString_5:
   \   00000560   0020A0E3           MOV      R2,#+0
   \   00000564   0110A0E3           MOV      R1,#+1
   \   00000568   C8008DE2           ADD      R0,SP,#+200
   \   0000056C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000570   000058E3           CMP      R8,#+0
   \   00000574   4900000A           BEQ      ??LoadConfigString_26
   \   00000578   00009DE5           LDR      R0,[SP, #+0]
   \   0000057C   010070E3           CMN      R0,#+1
   \   00000580   6100A013           MOVNE    R0,#+97
   \   00000584   900E8013           ORRNE    R0,R0,#0x900
   \   00000588   00005711           CMPNE    R7,R0
   \   0000058C   AAFEFF1A           BNE      ??LoadConfigString_3
    203              }
    204              if (NoError) {
    205                  if (( IDNumber >> 16  ) != C_PRO_MODBUS_REG_BIT_IN) {
   \                     ??LoadConfigString_2:
   \   00000590   9C0094E5           LDR      R0,[R4, #+156]
   \   00000594   FA10A0E3           MOV      R1,#+250
   \   00000598   A01E81E3           ORR      R1,R1,#0xA00
   \   0000059C   200851E1           CMP      R1,R0, LSR #+16
   \   000005A0   0F00000A           BEQ      ??LoadConfigString_27
    206                      unsigned newIDNumber    = (C_PRO_MODBUS_REG_BIT_IN << 16) + ModbusSet.size();
   \   000005A4   ........           LDR      R0,??Subroutine15_0+0x8  ;; ??ModbusSet + 16
   \   000005A8   0118A0E1           MOV      R1,R1, LSL #+16
   \   000005AC   000090E5           LDR      R0,[R0, #+0]
   \   000005B0   005081E0           ADD      R5,R1,R0
    207          
    208                      if (FindPROFromIDNumber(newIDNumber)) {
   \   000005B4   0010A0E3           MOV      R1,#+0
   \   000005B8   0500A0E1           MOV      R0,R5
   \   000005BC   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000005C0   000050E3           CMP      R0,#+0
   \   000005C4   0500000A           BEQ      ??LoadConfigString_28
    209                          do {
    210                              newIDNumber++;
   \                     ??LoadConfigString_29:
   \   000005C8   015085E2           ADD      R5,R5,#+1
    211                          }while (FindPROFromIDNumber(newIDNumber));
   \   000005CC   0010A0E3           MOV      R1,#+0
   \   000005D0   0500A0E1           MOV      R0,R5
   \   000005D4   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000005D8   000050E3           CMP      R0,#+0
   \   000005DC   F9FFFF1A           BNE      ??LoadConfigString_29
    212                      }
    213                      IDNumber = newIDNumber;
   \                     ??LoadConfigString_28:
   \   000005E0   9C5084E5           STR      R5,[R4, #+156]
    214                  }
    215                  if (!IsCreatedFromMultiple) {
   \                     ??LoadConfigString_27:
   \   000005E4   7801D4E5           LDRB     R0,[R4, #+376]
   \   000005E8   000050E3           CMP      R0,#+0
   \   000005EC   2B00001A           BNE      ??LoadConfigString_26
    216                      if (!RefObjectId) {
   \   000005F0   9C0194E5           LDR      R0,[R4, #+412]
   \   000005F4   000050E3           CMP      R0,#+0
   \   000005F8   1900001A           BNE      ??LoadConfigString_30
    217                          AlarmPtr = new AlarmModbusInCoil(this, Name, Description);
   \   000005FC   7C1084E2           ADD      R1,R4,#+124
   \   00000600   20008DE2           ADD      R0,SP,#+32
   \   00000604   ........           _BLF     ??string,??string??rA
   \   00000608   441084E2           ADD      R1,R4,#+68
   \   0000060C   04008DE2           ADD      R0,SP,#+4
   \   00000610   ........           _BLF     ??string,??string??rA
   \   00000614   20208DE2           ADD      R2,SP,#+32
   \   00000618   04108DE2           ADD      R1,SP,#+4
   \   0000061C   0400A0E1           MOV      R0,R4
   \   00000620   ........           _BLF     `??new AlarmModbusInCoil`,`??new AlarmModbusInCoil??rA`
   \   00000624   C00184E5           STR      R0,[R4, #+448]
   \   00000628   0020A0E3           MOV      R2,#+0
   \   0000062C   0110A0E3           MOV      R1,#+1
   \   00000630   20008DE2           ADD      R0,SP,#+32
   \   00000634   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000638   0020A0E3           MOV      R2,#+0
   \   0000063C   0110A0E3           MOV      R1,#+1
   \   00000640   04008DE2           ADD      R0,SP,#+4
   \   00000644   ........           _BLF     ??_Tidy,??_Tidy??rA
    218                          AlarmSet.insert(AlarmPtr);
   \   00000648   C02194E5           LDR      R2,[R4, #+448]
   \   0000064C   E41084E2           ADD      R1,R4,#+228
   \   00000650   E4008DE2           ADD      R0,SP,#+228
   \   00000654   ........           _BLF     ??insert_3,??insert??rA_1
    219                          AddAlarms(CompleteAlarmInfoList);
   \   00000658   FC1084E2           ADD      R1,R4,#+252
   \   0000065C   0400A0E1           MOV      R0,R4
   \   00000660   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    220                      }
    221                      ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel);
   \                     ??LoadConfigString_30:
   \   00000664   0000A0E3           MOV      R0,#+0
   \   00000668   01002DE9           PUSH     {R0}
   \   0000066C   01002DE9           PUSH     {R0}
   \   00000670   700194E5           LDR      R0,[R4, #+368]
   \   00000674   01002DE9           PUSH     {R0}
   \   00000678   A03094E5           LDR      R3,[R4, #+160]
   \   0000067C   6C2194E5           LDR      R2,[R4, #+364]
   \   00000680   681194E5           LDR      R1,[R4, #+360]
   \   00000684   640194E5           LDR      R0,[R4, #+356]
   \   00000688   FF2002E2           AND      R2,R2,#0xFF
   \   0000068C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000690   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000694   FF0000E2           AND      R0,R0,#0xFF
   \   00000698   ........           _BLF     ??InsertInMap,??InsertInMap??rA
   \   0000069C   0CD08DE2           ADD      SP,SP,#+12
    222                  }
    223              }
    224              return (NoError);
   \                     ??LoadConfigString_26:
   \   000006A0   0800A0E1           MOV      R0,R8
   \   000006A4   5EDF8DE2           ADD      SP,SP,#+376
   \   000006A8                      REQUIRE ?Subroutine15
   \   000006A8                      ;; // Fall through to label ?Subroutine15
    225          }
    226          
    227          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    228          void ModbusRegBitIn::SetProList(void) {
   \                     ??SetProList:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0040A0E1           MOV      R4,R0
    229              for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   786FA0E3           MOV      R6,#+480
   \   00000014   5E8FA0E3           MOV      R8,#+376
   \   00000018   110000EA           B        ??SetProList_1
    230                  PRogramObject *PROPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[i]);
    231                  if (PROPtr) {
    232                      PROList.insert(PROPtr);
    233                      if (IsCreatedFromMultiple) {
    234                          Name = PROPtr->Name;
    235                      }
    236          		} else {
    237          			AnsiString InfoStr;
    238                      if (IsCreatedFromMultiple) {
    239                          InfoStr.cat_sprintf("Created by ModbusMultiple (Line number %i): ModbusRegBitIn RefIDNumber %i (0x%0x) is incorrect", LineNumber, RefObjectId,RefObjectId);
    240                      } else {
    241                          InfoStr.cat_sprintf("ModbusRegBitIn RefIDNumber %i (0x%0x) is incorrect. Line Number %i", RefObjectId, RefObjectId,LineNumber);
   \                     ??SetProList_2:
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   602082E2           ADD      R2,R2,#+96
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   0300A0E1           MOV      R0,R3
   \   0000002C   01002DE9           PUSH     {R0}
   \                     ??SetProList_3:
   \   00000030   24108DE2           ADD      R1,SP,#+36
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   24008DE2           ADD      R0,SP,#+36
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   08D08DE2           ADD      SP,SP,#+8
    242                      }
    243                  }
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SetProList_4:
   \   00000060   015085E2           ADD      R5,R5,#+1
   \                     ??SetProList_1:
   \   00000064   042096E7           LDR      R2,[R6, +R4]
   \   00000068   040086E0           ADD      R0,R6,R4
   \   0000006C   041090E5           LDR      R1,[R0, #+4]
   \   00000070   020041E0           SUB      R0,R1,R2
   \   00000074   200155E1           CMP      R5,R0, LSR #+2
   \   00000078   1F00002A           BCS      ??SetProList_5
   \   0000007C   050192E7           LDR      R0,[R2, +R5, LSL #+2]
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000088   0070B0E1           MOVS     R7,R0
   \   0000008C   0D00000A           BEQ      ??SetProList_6
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   721F84E2           ADD      R1,R4,#+456
   \   00000098   38008DE2           ADD      R0,SP,#+56
   \   0000009C   ........           _BLF     ??insert_1,??insert??rA_2
   \   000000A0   0400D8E7           LDRB     R0,[R8, +R4]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   ECFFFF0A           BEQ      ??SetProList_4
   \   000000AC   ........           LDR      R0,??DataTable11  ;; ??npos
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   003090E5           LDR      R3,[R0, #+0]
   \   000000B8   441087E2           ADD      R1,R7,#+68
   \   000000BC   440084E2           ADD      R0,R4,#+68
   \   000000C0   ........           _BLF     ??assign,??assign??rA
   \   000000C4   E5FFFFEA           B        ??SetProList_4
   \                     ??SetProList_6:
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000D0   0410D8E7           LDRB     R1,[R8, +R4]
   \   000000D4   48209FE5           LDR      R2,??SetProList_7  ;; `?<Constant "Created by ModbusMult...">`
   \   000000D8   670FA0E3           MOV      R0,#+412
   \   000000DC   043090E7           LDR      R3,[R0, +R4]
   \   000000E0   000051E3           CMP      R1,#+0
   \   000000E4   CCFFFF0A           BEQ      ??SetProList_2
   \   000000E8   0300A0E1           MOV      R0,R3
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   08002DE9           PUSH     {R3}
   \   000000F4   043094E5           LDR      R3,[R4, #+4]
   \   000000F8   CCFFFFEA           B        ??SetProList_3
    244              }
    245              if (IdNumbers.size() == 1) {
   \                     ??SetProList_5:
   \   000000FC   2001A0E1           LSR      R0,R0,#+2
   \   00000100   010050E3           CMP      R0,#+1
   \   00000104   0300001A           BNE      ??SetProList_8
    246                  ObjPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[0]);
   \   00000108   000092E5           LDR      R0,[R2, #+0]
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   00000114   A00184E5           STR      R0,[R4, #+416]
    247              }
    248          
    249          
    250          }
   \                     ??SetProList_8:
   \   00000118   40D08DE2           ADD      SP,SP,#+64
   \   0000011C   F041BDE8           POP      {R4-R8,LR}
   \   00000120   1EFF2FE1           BX       LR               ;; return
   \                     ??SetProList_7:
   \   00000124   ........           DC32     `?<Constant "Created by ModbusMult...">`
    251          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    252          void ModbusRegBitIn::Update(void) {
   \                     ??Update:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    253              ModbusUnit *tmpPtr = FindUnit();
   \   00000008   ........           _BLF     ??FindUnit,??FindUnit??rA
   \   0000000C   0050B0E1           MOVS     R5,R0
    254          
    255              if (tmpPtr && tmpPtr->HasNewValue(Channel)) {
   \   00000010   3400000A           BEQ      ??Update_1
   \   00000014   5C6FA0E3           MOV      R6,#+368
   \   00000018   041096E7           LDR      R1,[R6, +R4]
   \   0000001C   ........           _BLF     ??HasNewValue,??HasNewValue??rA
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2F00000A           BEQ      ??Update_1
    256                  U16 rInVal = tmpPtr->GetRegister(Channel);
   \   00000028   041096E7           LDR      R1,[R6, +R4]
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??GetRegister,??GetRegister??rA
    257          
    258                  bool tmpIsActive = (rInVal >> BitOffset) & 1;
   \   00000038   B01194E5           LDR      R1,[R4, #+432]
   \   0000003C   5001A0E1           ASR      R0,R0,R1
   \   00000040   010010E3           TST      R0,#0x1
    259                  switch (NormalState) {
   \   00000044   B80194E5           LDR      R0,[R4, #+440]
   \   00000048   0150A013           MOVNE    R5,#+1
   \   0000004C   0050A003           MOVEQ    R5,#+0
   \   00000050   9F10A0E3           MOV      R1,#+159
   \   00000054   701E81E3           ORR      R1,R1,#0x700
   \   00000058   010050E1           CMP      R0,R1
    260                  case C_CTRL_NS_UNPOWERED:
    261                      break;
    262                  case C_CTRL_NS_POWERED :
    263                      tmpIsActive = !tmpIsActive;
   \   0000005C   01502502           EOREQ    R5,R5,#0x1
    264                      break;
    265                  }
    266                  IsActive = tmpIsActive;
   \   00000060   7951C4E5           STRB     R5,[R4, #+377]
    267                  if (AlarmPtr) {
   \   00000064   C01194E5           LDR      R1,[R4, #+448]
   \   00000068   000051E3           CMP      R1,#+0
   \   0000006C   0400000A           BEQ      ??Update_2
    268                      AlarmPtr->Check();
   \   00000070   0100A0E1           MOV      R0,R1
   \   00000074   A41091E5           LDR      R1,[R1, #+164]
   \   00000078   641091E5           LDR      R1,[R1, #+100]
   \   0000007C   0FE0A0E1           MOV      LR,PC
   \   00000080   11FF2FE1           BX       R1
    269                  }
    270                  if (!PROList.empty()) {
   \                     ??Update_2:
   \   00000084   D80194E5           LDR      R0,[R4, #+472]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   1500000A           BEQ      ??Update_1
    271                      clock_t tm = clock();
   \   00000090   ........           _BLF     clock,??clock??rA
   \   00000094   0060A0E1           MOV      R6,R0
    272                      set<PRogramObject *>::iterator pBIt;
    273          
    274                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000098   727FA0E3           MOV      R7,#+456
   \   0000009C   048097E7           LDR      R8,[R7, +R4]
   \   000000A0   0D0000EA           B        ??Update_3
    275                          PRogramObject *ObjectPtr = (PRogramObject *)*pBIt;
   \                     ??Update_4:
   \   000000A4   109098E5           LDR      R9,[R8, #+16]
    276                          ObjectPtr->TimeStamp = tm;
    277                          ObjectPtr->PutFloatValue(ValueKey, float(tmpIsActive));
   \   000000A8   FF0005E2           AND      R0,R5,#0xFF
   \   000000AC   406089E5           STR      R6,[R9, #+64]
   \   000000B0   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   000000B4   A43099E5           LDR      R3,[R9, #+164]
   \   000000B8   A41194E5           LDR      R1,[R4, #+420]
   \   000000BC   343093E5           LDR      R3,[R3, #+52]
   \   000000C0   0020A0E1           MOV      R2,R0
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   0FE0A0E1           MOV      LR,PC
   \   000000CC   13FF2FE1           BX       R3
    278                      }
   \   000000D0   0800A0E1           MOV      R0,R8
   \   000000D4   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000D8   0080A0E1           MOV      R8,R0
   \                     ??Update_3:
   \   000000DC   040087E0           ADD      R0,R7,R4
   \   000000E0   000058E1           CMP      R8,R0
   \   000000E4   EEFFFF1A           BNE      ??Update_4
    279                  }
    280              }
    281          }
   \                     ??Update_1:
   \   000000E8   F043BDE8           POP      {R4-R9,LR}
   \   000000EC   1EFF2FE1           BX       LR               ;; return
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          ModbusRegBitIn& ModbusRegBitIn::operator = (ModbusRegBitIn Src) {
   \                     `??operator=`:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    284              Name              = Src.Name;
   \   00000008   ........           LDR      R0,??DataTable14  ;; ??npos
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0630A0E1           MOV      R3,R6
   \   0000001C   441085E2           ADD      R1,R5,#+68
   \   00000020   440084E2           ADD      R0,R4,#+68
   \   00000024   ........           _BLF     ??assign,??assign??rA
    285              Description       = Src.Description;
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   7C1085E2           ADD      R1,R5,#+124
   \   00000034   7C0084E2           ADD      R0,R4,#+124
   \   00000038   ........           _BLF     ??assign,??assign??rA
    286          
    287              IPAddress         = Src.IPAddress;
   \   0000003C   520FA0E3           MOV      R0,#+328
   \   00000040   0630A0E1           MOV      R3,R6
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   051080E0           ADD      R1,R0,R5
   \   0000004C   040080E0           ADD      R0,R0,R4
   \   00000050   ........           _BLF     ??assign,??assign??rA
    288              TCUAddress        = Src.TCUAddress;
   \   00000054   590FA0E3           MOV      R0,#+356
   \   00000058   051090E7           LDR      R1,[R0, +R5]
   \   0000005C   041080E7           STR      R1,[R0, +R4]
    289              TCUPortNo         = Src.TCUPortNo;
   \   00000060   5A1FA0E3           MOV      R1,#+360
   \   00000064   052091E7           LDR      R2,[R1, +R5]
   \   00000068   042081E7           STR      R2,[R1, +R4]
    290              Address           = Src.Address;
   \   0000006C   5B1FA0E3           MOV      R1,#+364
   \   00000070   052091E7           LDR      R2,[R1, +R5]
   \   00000074   042081E7           STR      R2,[R1, +R4]
    291              Channel           = Src.Channel;
   \   00000078   5C1FA0E3           MOV      R1,#+368
   \   0000007C   052091E7           LDR      R2,[R1, +R5]
   \   00000080   042081E7           STR      R2,[R1, +R4]
    292          
    293          
    294              MinRange          = Src.MinRange;
   \   00000084   5F1FA0E3           MOV      R1,#+380
   \   00000088   052091E7           LDR      R2,[R1, +R5]
   \   0000008C   042081E7           STR      R2,[R1, +R4]
    295              MaxRange          = Src.MaxRange;
   \   00000090   601FA0E3           MOV      R1,#+384
   \   00000094   052091E7           LDR      R2,[R1, +R5]
   \   00000098   042081E7           STR      R2,[R1, +R4]
    296              RegMax            = Src.RegMax;
   \   0000009C   6A1FA0E3           MOV      R1,#+424
   \   000000A0   052091E7           LDR      R2,[R1, +R5]
   \   000000A4   042081E7           STR      R2,[R1, +R4]
    297              ValueKey          = Src.ValueKey;
   \   000000A8   692FA0E3           MOV      R2,#+420
   \   000000AC   053092E7           LDR      R3,[R2, +R5]
   \   000000B0   043082E7           STR      R3,[R2, +R4]
    298              RefObjectId       = Src.RefObjectId;
   \   000000B4   672FA0E3           MOV      R2,#+412
   \   000000B8   053092E7           LDR      R3,[R2, +R5]
   \   000000BC   043082E7           STR      R3,[R2, +R4]
    299          
    300              Scale             = Src.Scale;
   \   000000C0   622FA0E3           MOV      R2,#+392
   \   000000C4   053092E7           LDR      R3,[R2, +R5]
   \   000000C8   043082E7           STR      R3,[R2, +R4]
    301              Offset            = Src.Offset;
   \   000000CC   632FA0E3           MOV      R2,#+396
   \   000000D0   053092E7           LDR      R3,[R2, +R5]
   \   000000D4   043082E7           STR      R3,[R2, +R4]
    302              HasSign           = Src.HasSign;
   \   000000D8   612FA0E3           MOV      R2,#+388
   \   000000DC   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000E0   0430C2E7           STRB     R3,[R2, +R4]
    303              HasDecimalScaling = Src.HasDecimalScaling;
   \   000000E4   662FA0E3           MOV      R2,#+408
   \   000000E8   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000EC   0430C2E7           STRB     R3,[R2, +R4]
    304              ModbusDataFormat   = Src.ModbusDataFormat;
   \   000000F0   352080E2           ADD      R2,R0,#+53
   \   000000F4   0530D2E7           LDRB     R3,[R2, +R5]
   \   000000F8   0430C2E7           STRB     R3,[R2, +R4]
    305              HasRange          = Src.HasRange;
   \   000000FC   362080E2           ADD      R2,R0,#+54
   \   00000100   0530D2E7           LDRB     R3,[R2, +R5]
   \   00000104   0430C2E7           STRB     R3,[R2, +R4]
    306              DecimalPoint      = Src.DecimalPoint;
   \   00000108   652FA0E3           MOV      R2,#+404
   \   0000010C   053092E7           LDR      R3,[R2, +R5]
   \   00000110   043082E7           STR      R3,[R2, +R4]
    307              DecimalScaling    = Src.DecimalScaling;
   \   00000114   642FA0E3           MOV      R2,#+400
   \   00000118   053092E7           LDR      R3,[R2, +R5]
   \   0000011C   043082E7           STR      R3,[R2, +R4]
    308          
    309              BitOffset         = Src.BitOffset;
   \   00000120   B02195E5           LDR      R2,[R5, #+432]
   \   00000124   B02184E5           STR      R2,[R4, #+432]
    310              AlarmDelay        = Src.AlarmDelay;
   \   00000128   B42195E5           LDR      R2,[R5, #+436]
   \   0000012C   B42184E5           STR      R2,[R4, #+436]
    311              NormalState       = Src.NormalState;
   \   00000130   B82195E5           LDR      R2,[R5, #+440]
   \   00000134   B82184E5           STR      R2,[R4, #+440]
    312              RegMax            = Src.RegMax;
   \   00000138   052091E7           LDR      R2,[R1, +R5]
   \   0000013C   042081E7           STR      R2,[R1, +R4]
    313              DefaultId         = Src.DefaultId;
   \   00000140   BC11D5E5           LDRB     R1,[R5, #+444]
   \   00000144   BC11C4E5           STRB     R1,[R4, #+444]
    314              //IdNumbers         = Src.IdNumbers; // Set from UpdateFromMultiple
    315              if ((TCUAddress==CurrentDeviceAddress) && (CurrentDeviceId == DEVICE_TCU)) {
   \   00000148   34109FE5           LDR      R1,`??operator=_1`  ;; CurrentDeviceAddress
   \   0000014C   040090E7           LDR      R0,[R0, +R4]
   \   00000150   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000154   010050E1           CMP      R0,R1
   \   00000158   28009F05           LDREQ    R0,`??operator=_1`+0x4  ;; CurrentDeviceId
   \   0000015C   F000D001           LDRSHEQ  R0,[R0, #+0]
   \   00000160   20005003           CMPEQ    R0,#+32
   \   00000164   0300001A           BNE      `??operator=_2`
    316                  MyModbusSet.insert(this);
   \   00000168   1C109FE5           LDR      R1,`??operator=_1`+0x8  ;; ??MyModbusSet
   \   0000016C   0420A0E1           MOV      R2,R4
   \   00000170   0D00A0E1           MOV      R0,SP
   \   00000174   ........           _BLF     ??insert,??insert??rA_3
    317              }
    318          
    319              return *this;
   \                     `??operator=_2`:
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000180   1EFF2FE1           BX       LR               ;; return
   \                     `??operator=_1`:
   \   00000184   ........           DC32     CurrentDeviceAddress
   \   00000188   ........           DC32     CurrentDeviceId
   \   0000018C   ........           DC32     ??MyModbusSet
    320          }
    321          

   \                                 In segment CODE, align 4, keep-with-next
    322          void ModbusRegBitIn::UpdateFromMultiple(unsigned pIdNumber, int pChannel) {
   \                     ??UpdateFromMultiple:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0040A0E1           MOV      R4,R0
    323              Channel     +=  pChannel;
   \   0000000C   5C5FA0E3           MOV      R5,#+368
   \   00000010   040095E7           LDR      R0,[R5, +R4]
    324              RefObjectId  = pIdNumber;
   \   00000014   676FA0E3           MOV      R6,#+412
   \   00000018   000082E0           ADD      R0,R2,R0
   \   0000001C   040085E7           STR      R0,[R5, +R4]
   \   00000020   041086E7           STR      R1,[R6, +R4]
    325              IdNumbers.push_back(RefObjectId);
   \   00000024   780F84E2           ADD      R0,R4,#+480
   \   00000028   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    326              if (!RefObjectId) {
   \   0000002C   040096E7           LDR      R0,[R6, +R4]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1900001A           BNE      ??UpdateFromMultiple_1
    327                  AlarmPtr = new AlarmModbusInCoil(this, Name, Description);
   \   00000038   7C1084E2           ADD      R1,R4,#+124
   \   0000003C   1C008DE2           ADD      R0,SP,#+28
   \   00000040   ........           _BLF     ??string,??string??rA
   \   00000044   441084E2           ADD      R1,R4,#+68
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??string,??string??rA
   \   00000050   1C208DE2           ADD      R2,SP,#+28
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           _BLF     `??new AlarmModbusInCoil`,`??new AlarmModbusInCoil??rA`
   \   00000060   C00184E5           STR      R0,[R4, #+448]
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
    328                  AlarmSet.insert(AlarmPtr);
   \   00000084   C02194E5           LDR      R2,[R4, #+448]
   \   00000088   E41084E2           ADD      R1,R4,#+228
   \   0000008C   38008DE2           ADD      R0,SP,#+56
   \   00000090   ........           _BLF     ??insert_3,??insert??rA_1
    329                  AddAlarms(CompleteAlarmInfoList);
   \   00000094   FC1084E2           ADD      R1,R4,#+252
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           _BLF     ??AddAlarms,??AddAlarms??rA
    330              }
    331              ModbusUnit::InsertInMap(TCUAddress, TCUPortNo, Address, Type, Channel, RefObjectId);
   \                     ??UpdateFromMultiple_1:
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   040096E7           LDR      R0,[R6, +R4]
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   040095E7           LDR      R0,[R5, +R4]
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   A03094E5           LDR      R3,[R4, #+160]
   \   000000BC   6C2194E5           LDR      R2,[R4, #+364]
   \   000000C0   681194E5           LDR      R1,[R4, #+360]
   \   000000C4   640194E5           LDR      R0,[R4, #+356]
   \   000000C8   FF2002E2           AND      R2,R2,#0xFF
   \   000000CC   0118A0E1           MOV      R1,R1, LSL #+16
   \   000000D0   2118A0E1           MOV      R1,R1, LSR #+16
   \   000000D4   FF0000E2           AND      R0,R0,#0xFF
   \   000000D8   ........           _BLF     ??InsertInMap,??InsertInMap??rA
    332          }
   \   000000DC   4CD08DE2           ADD      SP,SP,#+76
   \   000000E0                      REQUIRE ?Subroutine14
   \   000000E0                      ;; // Fall through to label ?Subroutine14
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          int ModbusRegBitIn::GetObjectId(void)
    335          {
   \                     ??GetObjectId:
   \   00000000   9C1190E5           LDR      R1,[R0, #+412]
   \   00000004   000051E3           CMP      R1,#+0
    336              if (RefObjectId) {
    337                  return RefObjectId;
   \   00000008   0100A011           MOVNE    R0,R1
   \   0000000C   1EFF2F11           BXNE     LR
    338              }else{
    339                  return IDNumber;
   \   00000010   9C0090E5           LDR      R0,[R0, #+156]
   \   00000014   1EFF2FE1           BX       LR               ;; return
    340              }
    341          }
    342          

   \                                 In segment CODE, align 4, keep-with-next
    343          AnsiString ModbusRegBitIn::GetRegisterType(void) {
   \                     ??GetRegisterType:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0140A0E1           MOV      R4,R1
    344              return "Bit offset:" + AnsiString(BitOffset);
   \   0000000C   B01190E5           LDR      R1,[R0, #+432]
   \   00000010   1C008DE2           ADD      R0,SP,#+28
   \   00000014   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000018   ........           LDR      R1,??Subroutine13_0  ;; `?<Constant "Bit offset:">`
   \   0000001C   0020A0E1           MOV      R2,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   1C008DE2           ADD      R0,SP,#+28
   \   00000050   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000054   38D08DE2           ADD      SP,SP,#+56
   \   00000058                      REQUIRE ?Subroutine13
   \   00000058                      ;; // Fall through to label ?Subroutine13
    345          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine13_0:
   \   00000008   ........           DC32     `?<Constant "Bit offset:">`
    346          

   \                                 In segment CODE, align 4, keep-with-next
    347          AnsiString ModbusRegBitIn::GetRegisterValue(void) {
   \                     ??GetRegisterValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    348              AnsiString Result;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   A02194E5           LDR      R2,[R4, #+416]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0800000A           BEQ      ??GetRegisterValue_1
    349              if (ObjPtr) {
    350                  //Result.sprintf("%8.3f",GetOutputValFloat());
    351                  Result = LibGetValue(ValueKey, ObjPtr);
   \   00000024   A41194E5           LDR      R1,[R4, #+420]
   \   00000028   0030A0E3           MOV      R3,#+0
   \                     ??GetRegisterValue_2:
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           _BLF     ??LibGetValue,??LibGetValue??rA
   \   00000034   ........           LDR      R0,??DataTable14  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0D10A0E1           MOV      R1,SP
   \   00000044   0D0000EA           B        ??GetRegisterValue_3
    352              } else if ( AlarmPtr ){
   \                     ??GetRegisterValue_1:
   \   00000048   C02194E5           LDR      R2,[R4, #+448]
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   0300000A           BEQ      ??GetRegisterValue_4
    353                  Result = LibGetValue(SVT_AL_STATE, AlarmPtr);
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   4310A0E3           MOV      R1,#+67
   \   0000005C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000060   F1FFFFEA           B        ??GetRegisterValue_2
    354              } else {
    355                  Result = "Multiple";
   \                     ??GetRegisterValue_4:
   \   00000064   38109FE5           LDR      R1,??GetRegisterValue_5  ;; `?<Constant "Multiple">`
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000070   ........           LDR      R1,??DataTable14  ;; ??npos
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   003091E5           LDR      R3,[R1, #+0]
   \   0000007C   0010A0E1           MOV      R1,R0
   \                     ??GetRegisterValue_3:
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   ........           _BLF     ??assign,??assign??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   0D00A0E1           MOV      R0,SP
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
    356              }
    357              return Result;
   \   00000098   1CD08DE2           ADD      SP,SP,#+28
   \   0000009C   3040BDE8           POP      {R4,R5,LR}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
   \                     ??GetRegisterValue_5:
   \   000000A4   ........           DC32     `?<Constant "Multiple">`
    358          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0
   \   00000008   307825305809       DC8 "0x%0X      "
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25326900           DC8 "%2i"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Modbus RegBitIn">`:
   \   00000000   4D6F64627573       DC8 "Modbus RegBitIn"
   \              205265674269
   \              74496E00    
   \   00000010   4D6F64627573       DC8 "Modbus RegBitIn value"
   \              205265674269
   \              74496E207661
   \              6C756500    
   \   00000026   0000               DC8 0, 0
   \   00000028   4D6F64627573       DC8 "Modbus RegBitIn IDNumber Err"
   \              205265674269
   \              74496E204944
   \              4E756D626572
   \              2045727200  
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   526567426974       DC8 "RegBitIn IDNumber changed from 0x%0X to 0x%0X"
   \              496E2049444E
   \              756D62657220
   \              6368616E6765
   \              642066726F6D
   \              203078253058
   \              20746F203078
   \              25305800    
   \   00000076   0000               DC8 0, 0
   \   00000078   526567426974       DC8 "RegBitIn duplicate IDNumber in line "
   \              496E20647570
   \              6C6963617465
   \              2049444E756D
   \              62657220696E
   \              206C696E6520
   \              00          
   \   0000009D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2100               DC8 "!"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Created by ModbusMult...">`:
   \   00000000   437265617465       DC8 43H, 72H, 65H, 61H, 74H, 65H, 64H, 20H
   \              6420        
   \   00000008   6279204D6F64       DC8 62H, 79H, 20H, 4DH, 6FH, 64H, 62H, 75H
   \              6275        
   \   00000010   734D756C7469       DC8 73H, 4DH, 75H, 6CH, 74H, 69H, 70H, 6CH
   \              706C        
   \   00000018   6520284C696E       DC8 65H, 20H, 28H, 4CH, 69H, 6EH, 65H, 20H
   \              6520        
   \   00000020   6E756D626572       DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000028   69293A204D6F       DC8 69H, 29H, 3AH, 20H, 4DH, 6FH, 64H, 62H
   \              6462        
   \   00000030   757352656742       DC8 75H, 73H, 52H, 65H, 67H, 42H, 69H, 74H
   \              6974        
   \   00000038   496E20526566       DC8 49H, 6EH, 20H, 52H, 65H, 66H, 49H, 44H
   \              4944        
   \   00000040   4E756D626572       DC8 4EH, 75H, 6DH, 62H, 65H, 72H, 20H, 25H
   \              2025        
   \   00000048   692028307825       DC8 69H, 20H, 28H, 30H, 78H, 25H, 30H, 78H
   \              3078        
   \   00000050   292069732069       DC8 29H, 20H, 69H, 73H, 20H, 69H, 6EH, 63H
   \              6E63        
   \   00000058   6F7272656374       DC8 6FH, 72H, 72H, 65H, 63H, 74H, 0
   \              00          
   \   0000005F   00                 DC8 0
   \   00000060   4D6F64627573       DC8 4DH, 6FH, 64H, 62H, 75H, 73H, 52H, 65H
   \              5265        
   \   00000068   67426974496E       DC8 67H, 42H, 69H, 74H, 49H, 6EH, 20H, 52H
   \              2052        
   \   00000070   656649444E75       DC8 65H, 66H, 49H, 44H, 4EH, 75H, 6DH, 62H
   \              6D62        
   \   00000078   657220256920       DC8 65H, 72H, 20H, 25H, 69H, 20H, 28H, 30H
   \              2830        
   \   00000080   782530782920       DC8 78H, 25H, 30H, 78H, 29H, 20H, 69H, 73H
   \              6973        
   \   00000088   20696E636F72       DC8 20H, 69H, 6EH, 63H, 6FH, 72H, 72H, 65H
   \              7265        
   \   00000090   63742E204C69       DC8 63H, 74H, 2EH, 20H, 4CH, 69H, 6EH, 65H
   \              6E65        
   \   00000098   204E756D6265       DC8 20H, 4EH, 75H, 6DH, 62H, 65H, 72H, 20H
   \              7220        
   \   000000A0   256900             DC8 25H, 69H, 0
   \   000000A3   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Bit offset:">`:
   \   00000000   426974206F66       DC8 "Bit offset:"
   \              667365743A00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Multiple">`:
   \   00000000   4D756C746970       DC8 "Multiple"
   \              6C6500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegBitIn &ModbusRegBitIn::new ModbusRegBitIn(bool)
   \                     `??new ModbusRegBitIn`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   7B0FA0E3           MOV      R0,#+492
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new ModbusRegBitIn_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??ModbusRegBitIn
   \                     `??new ModbusRegBitIn_1`:
   \   00000020   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable1  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ModbusRegBitIn::GetObjectId()      0
     ModbusRegBitIn::GetRegisterType()
                                       64
     ModbusRegBitIn::GetRegisterValue()
                                       40
     ModbusRegBitIn::LoadConfigString(TSNConfigString &)
                                      424
     ModbusRegBitIn::MakeConfigString(int)
                                      512
     ModbusRegBitIn::ModbusRegBitIn(bool)
                                       32
     ModbusRegBitIn::SetProList()      96
     ModbusRegBitIn::Update()          28
     ModbusRegBitIn::UpdateFromMultiple(unsigned int, int)
                                       92
     ModbusRegBitIn::new ModbusRegBitIn(bool)
                                        8
     ModbusRegBitIn::operator=(ModbusRegBitIn)
                                       24
     ModbusRegBitIn::~ModbusRegBitIn()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                       24
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                       44
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                       24
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     __sti__routine()                  12
     operator+(char const *, string const &)
                                       44
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        8
     string::string(string const &)    12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::insert(ModbusObject *)
                                     200
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::insert(PRogramObject *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<ModbusObject *, less<ModbusObject *>, allocator<ModbusObject *>, false>>::_Nodeptr, ModbusObject *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, PRogramObject *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<PRogramObjectBase *>::~set()
                                      32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     operator+(string const &, string const &)
                                      88
     operator+(char const *, string const &)
                                     128
     operator+(string const &, char const *)
                                      92
     ModbusRegBitIn::ModbusSet        24
     ModbusRegBitIn::ModbusRegBitIn(bool)
                                     224
     ModbusRegBitIn::~ModbusRegBitIn()
                                     112
     ?Subroutine14                     8
     ModbusRegBitIn::MakeConfigString(int)
                                    1644
     ?Subroutine15                    20
     ModbusRegBitIn::LoadConfigString(TSNConfigString &)
                                    1704
     ModbusRegBitIn::SetProList()    296
     ModbusRegBitIn::Update()        240
     ModbusRegBitIn::operator=(ModbusRegBitIn)
                                     400
     ModbusRegBitIn::UpdateFromMultiple(unsigned int, int)
                                     224
     ModbusRegBitIn::GetObjectId()    24
     ModbusRegBitIn::GetRegisterType()
                                      88
     ?Subroutine13                    12
     ModbusRegBitIn::GetRegisterValue()
                                     168
     ?<Constant "0x%0x">              16
     ?<Constant "%2i">                 4
     ?<Constant "Modbus RegBitIn">   160
     ?<Constant "!">                   2
     ?<Constant "Created by ModbusMult...">
                                     164
     ?<Constant "Bit offset:">        12
     ?<Constant "Multiple">           12
     ModbusRegBitIn::new ModbusRegBitIn(bool)
                                      36
     __sti__routine()                 56
     ??DataTable1                      4
     ??DataTable3                      4
     ??DataTable11                     4
     ??DataTable14                     4
      Others                        1048

 
 9 004 bytes in segment CODE
   554 bytes in segment DATA_C
    28 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 5 276 bytes of CODE  memory (+ 3 744 bytes shared)
   554 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
