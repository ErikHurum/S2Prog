##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               13/Sep/2016  09:48:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\VMShare\working\trunk\Shared\Src\ANPRO10UnitInfo. #
#                       cpp                                                  #
#    Command line    =  E:\VMShare\working\trunk\Shared\Src\ANPRO10UnitInfo. #
#                       cpp --fpu None -D OS_LIBMODE_DT -D CPU_S3C2410 -D    #
#                       OS_UART=-1 -D OS_SEGGER -D S2TXUBOOTLOADER -lCN      #
#                       E:\VMShare\working\trunk\TXU\Debug\List\ -o          #
#                       E:\VMShare\working\trunk\TXU\Debug\Obj\ -s2          #
#                       --no_cse --no_unroll --no_inline --no_code_motion    #
#                       --no_tbaa --no_clustering --no_scheduling --debug    #
#                       --cpu_mode arm --endian little --cpu ARM920T         #
#                       --stack_align 4 --interwork -e --eec++               #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       E:\VMShare\working\trunk\TXU\INC\ -I                 #
#                       E:\VMShare\working\trunk\TXU\..\Shared\INC\ -I       #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\SRC\ -I       #
#                       E:\VMShare\working\trunk\TXU\GUI\CORE\ -I            #
#                       E:\VMShare\working\trunk\TXU\GUI\WM\ -I              #
#                       E:\VMShare\working\trunk\TXU\GUI\WIDGET\ -I          #
#                       E:\VMShare\working\trunk\TXU\CONFIG\ -I "C:\Program  #
#                       Files (x86)\IAR Systems\Embedded Workbench           #
#                       4.0\arm\INC\"                                        #
#    List file       =  E:\VMShare\working\trunk\TXU\Debug\List\ANPRO10UnitI #
#                       nfo.lst                                              #
#    Object file     =  E:\VMShare\working\trunk\TXU\Debug\Obj\ANPRO10UnitIn #
#                       fo.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

E:\VMShare\working\trunk\Shared\Src\ANPRO10UnitInfo.cpp
      1          
      2          #ifdef ANBOOTLOADER
      3          	#include "RTOS.h"
      4          	#include "ANPro10Inc.h"
      5          #else
      6          	#include "TSNIncludes.h"
      7          	#pragma hdrstop
      8          	#ifdef BORLAND
      9          		#pragma package(smart_init)
     10          	#endif
     11          
     12          #endif
     13          
     14          ANPRO10UnitInfo::ANPRO10UnitInfo(void)
     15          {
     16          #ifndef WIN32
     17          	pTask         = NULL;
     18          #endif
     19          	ErrorStatus   = 0;
     20          	HasInfo       = false;
     21          	SignalHasInfo = false;
     22          	UnitID        =0;
     23          	UnitAdress    =0;
     24          	ProgramType   =0;	// 0 = Bootloader, 1 = Application
     25          	UpdateTime    = 0;
     26          	ErrorStatus   = FLASH_NO_ERROR;
     27          
     28          }
     29          
     30          void ANPRO10UnitInfo::Update_Unit_Info(ANPRO10_COMMAND_2001 *InfoStruct)
     31          {
     32          	UnitID        = InfoStruct->UnitID;
     33          	UnitAdress    = InfoStruct->UnitAdress;
     34          	ProgramType   = InfoStruct->ProgramType; // 0 = Bootloader, 1 = Application
     35          
     36          	strcpy(SystemID,InfoStruct->SystemID);// #### 7 bytes for this??????
     37          	DataVersion                 = InfoStruct->DataVersion;
     38          	ProgramVersion.Build        = InfoStruct->ProgramVersion.Build;
     39          	ProgramVersion.NewFunctions = InfoStruct->ProgramVersion.NewFunctions;
     40          	ProgramVersion.PacketFormat = InfoStruct->ProgramVersion.PacketFormat;
     41          	ProgramVersion.ProdNo       = InfoStruct->ProgramVersion.ProdNo;
     42          	BootVersion.Build           = InfoStruct->BootVersion.Build;
     43          	BootVersion.NewFunctions    = InfoStruct->BootVersion.NewFunctions;
     44          	BootVersion.PacketFormat    = InfoStruct->BootVersion.PacketFormat;
     45          	BootVersion.ProdNo          = InfoStruct->BootVersion.ProdNo;
     46          	ProgrDate                   = InfoStruct->ProgrDate;
     47          	UpdateTime                  = time(NULL);
     48          	LastOSErr                   = InfoStruct->LastOSError;
     49          	LastErrAddr                 = InfoStruct->LastErrAddress;
     50          	FlashErrStatus              = InfoStruct->FlashErrorStatus;
     51          	strncpy(LastOSErrTask,InfoStruct->LastOSErrorTask,0x20);
     52          
     53          
     54          
     55          	HasInfo       = true;
     56          #ifndef WIN32
     57          	if ( pTask && SignalHasInfo ) {
     58          		SignalHasInfo = false;
     59          		OS_SignalEvent(SYSINFO_RECEIVED_EVENT,pTask);
     60          	}
     61          #endif
     62          
     63          }
     64          
     65          
     66          void ANPRO10UnitInfo::VersionControl(TSNUart *Port)
     67          {
     68          #if !defined(ANBOOTLOADER) && !defined(WIN32)
     69          	pTask = OS_GetpCurrentTask();
     70          	switch ( ProgramType ) {
     71          		case 0:// Bootloader
     72          			ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_FLASH_PROG,SectorProgStart,SectorProgEnd);
     73          			if ( ErrorStatus == FLASH_NO_ERROR ) {
     74          				ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     75          				if ( ErrorStatus == FLASH_NO_ERROR ) {
     76          					ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     77          				}
     78          			}
     79          			break;
     80          		case 1:
     81          			{
     82          				if ( memcmp(&MyProgramVersion,&ProgramVersion,sizeof(ProgramVersionInfo) ) ) {
     83          					ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_FLASH_PROG,SectorProgStart,SectorProgEnd);
     84          					if ( ErrorStatus == FLASH_NO_ERROR ) {
     85          						ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     86          						if ( ErrorStatus == FLASH_NO_ERROR ) {
     87          							ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     88          						}
     89          					}
     90          				} else if ( strncmp(SystemID,PROProjectInfo::PROProjectInfoPtr->ProjectName.c_str(),ANPRO10_ID_LENGTH-1) || DataVersion != ConfigInfoPtr->PrevConfigDataRevision ) {
     91          					ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     92          					if ( ErrorStatus == FLASH_NO_ERROR ) {
     93          						ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     94          					}
     95          				}
     96          
     97          			}
     98          			break;
     99          		case 2:
    100          			if ( strncmp(SystemID,PROProjectInfo::PROProjectInfoPtr->ProjectName.c_str(),ANPRO10_ID_LENGTH-1) || DataVersion != ConfigInfoPtr->PrevConfigDataRevision ) {
    101          				ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
    102          				if ( ErrorStatus == FLASH_NO_ERROR ) {
    103          					ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
    104          				}
    105          			}
    106          			break;
    107          
    108          	}
    109          #endif
    110          }
    111          

Errors: 62
Warnings: 3
